Extproc malloc u64
    extparam                  u64 
Endext

Extproc realloc u64
    extparam                  u64 
    extparam                  u64 
Endext

Extproc free
    extparam                  u64 
Endext

Extproc memset
    extparam                  u64 
    extparam                  i32 
    extparam                  u64 
Endext

Extproc memcpy
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
Endext

Extproc clock i32
Endext

Extproc ftell i32
    extparam                  u64 
Endext

Extproc fseek i32
    extparam                  u64 
    extparam                  i32 
    extparam                  i32 
Endext

Extproc fread u64
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
Endext

Extproc fwrite u64
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
Endext

Extproc ungetc i32
    extparam                  i32 
    extparam                  u64 
Endext

Extproc fopen u64
    extparam                  u64 
    extparam                  u64 
Endext

Extproc fclose i32
    extparam                  u64 
Endext

Extproc fgets u64
    extparam                  u64 
    extparam                  i64 
    extparam                  u64 
Endext

Extproc getchar i32
Endext

Extproc strlen i64
    extparam                  u64 
Endext

Extproc strcpy u64
    extparam                  u64 
    extparam                  u64 
Endext

Extproc strcmp i32
    extparam                  u64 
    extparam                  u64 
Endext

Extproc strncmp i32
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
Endext

Extproc strncpy u64
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
Endext

Extproc memcmp i32
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
Endext

Extproc strcat u64
    extparam                  u64 
    extparam                  u64 
Endext

Extproc tolower i32
    extparam                  i32 
Endext

Extproc toupper i32
    extparam                  i32 
Endext

Extproc strtod r64
    extparam                  u64 
    extparam                  u64 
Endext

Extproc puts i32
    extparam                  u64 
Endext

Extproc printf i32
    extparam                  u64 
    extvariadics              
Endext

Extproc sprintf i32
    extparam                  u64 
    extparam                  u64 
    extvariadics              
Endext

Extproc sscanf i32
    extparam                  u64 
    extparam                  u64 
    extvariadics              
Endext

Extproc system i32
    extparam                  u64 
Endext

Extproc fgetc i32
    extparam                  u64 
Endext

Extproc fprintf i32
    extparam                  u64 
    extparam                  u64 
    extvariadics              
Endext

Extproc strchr u64
    extparam                  u64 
    extparam                  i32 
Endext

Extproc __getmainargs i32
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
    extparam                  i64 
    extparam                  u64 
Endext

Extproc `GetStdHandle u64
    extparam                  u32 
Endext

Extproc `SetConsoleCtrlHandler i64
    extparam                  u64 
    extparam                  i64 
Endext

Extproc `SetConsoleMode i64
    extparam                  u64 
    extparam                  u32 
Endext

Extproc `CreateProcessA i64
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
    extparam                  i64 
    extparam                  u32 
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
Endext

Extproc `GetLastError u32
Endext

Extproc `WaitForSingleObject u32
    extparam                  u64 
    extparam                  u32 
Endext

Extproc `GetExitCodeProcess i64
    extparam                  u64 
    extparam                  u64 
Endext

Extproc `CloseHandle i64
    extparam                  u64 
Endext

Extproc `GetNumberOfConsoleInputEvents i64
    extparam                  u64 
    extparam                  u64 
Endext

Extproc `FlushConsoleInputBuffer i64
    extparam                  u64 
Endext

Extproc `LoadLibraryA u64
    extparam                  u64 
Endext

Extproc `GetProcAddress u64
    extparam                  u64 
    extparam                  u64 
Endext

Extproc `LoadCursorA u64
    extparam                  u64 
    extparam                  u64 
Endext

Extproc `RegisterClassExA u32
    extparam                  u64 
Endext

Extproc `DefWindowProcA i64
    extparam                  u64 
    extparam                  u32 
    extparam                  u64 
    extparam                  u64 
Endext

Extproc `ReadConsoleInputA i64
    extparam                  u64 
    extparam                  u64 
    extparam                  u32 
    extparam                  u64 
Endext

Extproc `Sleep
    extparam                  u32 
Endext

Extproc `GetModuleFileNameA u32
    extparam                  u64 
    extparam                  u64 
    extparam                  u32 
Endext

Extproc `MessageBoxA
    extparam                  i32 
    extparam                  u64 
    extparam                  u64 
    extparam                  i32 
Endext

Extproc `QueryPerformanceCounter u32
    extparam                  u64 
Endext

Extproc `QueryPerformanceFrequency u32
    extparam                  u64 
Endext

Extproc `CreateFileA u64
    extparam                  u64 
    extparam                  u32 
    extparam                  u32 
    extparam                  u64 
    extparam                  u32 
    extparam                  u32 
    extparam                  u64 
Endext

Extproc `GetFileTime u32
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
Endext

Extproc `GetLocalTime
    extparam                  u64 
Endext

Extproc `GetTickCount64 u64
Endext

Extproc `PeekMessageA u32
    extparam                  u64 
    extparam                  u64 
    extparam                  u32 
    extparam                  u32 
    extparam                  u32 
Endext

    zstatic        msysp.fmtparam: i64 
    istatic        msysp.needgap: i64 
    data           0          u64 
    istatic        msysp.outdev: i64 
    data           1          u64 
    istatic        msysp.outchan: u64 
    data           0          u64 
    istatic        msysp.fmtstr: u64 
    data           0          u64 
    zstatic        msysp.outchan_stack: block:80 
    zstatic        msysp.outdev_stack: block:80 
    zstatic        msysp.fmtstr_stack: block:80 
    zstatic        msysp.needgap_stack: block:10 
    zstatic        msysp.ptr_stack: block:80 
    istatic        msysp.niostack: i64 
    data           0          u64 
    istatic        msysp.digits: block:16 
    data           48         u8 
    data           49         u8 
    data           50         u8 
    data           51         u8 
    data           52         u8 
    data           53         u8 
    data           54         u8 
    data           55         u8 
    data           56         u8 
    data           57         u8 
    data           65         u8 
    data           66         u8 
    data           67         u8 
    data           68         u8 
    data           69         u8 
    data           70         u8 
    istatic        msysp.defaultfmt: block:16 
    data           0          u8 
    data           0          u8 
    data           10         u8 
    data           0          u8 
    data           32         u8 
    data           102        u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           82         u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    zstatic        msysp.rd_buffer: u64 
    zstatic        msysp.rd_length: i64 
    zstatic        msysp.rd_pos: u64 
    zstatic        msysp.rd_lastpos: u64 
    zstatic        msysp.termchar: i64 
    zstatic        msysp.itemerror: i64 
    zstatic        msysp.nsysparams: i64 
    zstatic        msysp.nenvstrings: i64 
    zstatic        msysp.sysparams: block:1024 
    zstatic        msysp.envstrings: block:1024 
    zstatic        msysp.callbackstack: block:576 
    istatic        msysp.ncallbacks: i64 
    data           0          u64 
    istatic        msysp.mask63: u64 
    data           9223372036854775807 u64 
    istatic        msysp.offset64: r64 
    data           9.2233720368547758e+018 u64 
    istatic        msysp.offset32: r64 
    data           9.2233720368547758e+018 u64 
    zstatic        msysp.m$init.startupinfo: block:128 
    zstatic        msysp.getfmt.fmt: block:16 
    zstatic        msysp.strint.str: block:100 
    zstatic        msysp.strword.str: block:100 
    zstatic        msysp.strreal.str: block:320 
    zstatic        mlibp.mdebug: i64 
    zstatic        mlibp.npcmalloc: i64 
    zstatic        mlibp.allocupper: block:2408 
    zstatic        mlibp.alloccode: i64 
    zstatic        mlibp.allocbytes: i64 
    istatic        mlibp.fdebug: i64 
    data           0          u64 
    zstatic        mlibp.rfsize: i64 
    zstatic        mlibp.maxmemory: u64 
    zstatic        mlibp.maxalloccode: i64 
    istatic        mlibp.pcm_setup: u8 
    data           0          u8 
    istatic        mlibp.show: i64 
    data           0          u64 
    zstatic        mlibp.allocbase: u64 
    istatic        mlibp.memtotal: i64 
    data           0          u64 
    istatic        mlibp.smallmemtotal: i64 
    data           0          u64 
    istatic        mlibp.smallmemobjs: i64 
    data           0          u64 
    istatic        mlibp.maxmemtotal: i64 
    data           0          u64 
    zstatic        mlibp.memalloctable: block:24 
    zstatic        mlibp.memallocsize: block:12 
    zstatic        mlibp.pcheapstart: u64 
    zstatic        mlibp.pcheapend: u64 
    zstatic        mlibp.pcheapptr: u64 
    zstatic        mlibp.sizeindextable: block:2049 
    zstatic        mlibp.freelist: block:72 
    istatic        mlibp.pmnames: block:48 
    data           "pm_end"   u64 
    data           "pm_option" u64 
    data           "pm_sourcefile" u64 
    data           "pm_libfile" u64 
    data           "pm_colon" u64 
    data           "pm_extra" u64 
    istatic        mlibp.seed: block:16 
    data           2993073034246558322 u64 
    data           1617678968452121188 u64 
    zstatic        mlibp.pcm_newblock.totalheapsize: i64 
    istatic        mlibp.pcm_round.allocbytes: block:36 
    data           0          u32 
    data           16         u32 
    data           32         u32 
    data           64         u32 
    data           128        u32 
    data           256        u32 
    data           512        u32 
    data           1024       u32 
    data           2048       u32 
    zstatic        mlibp.changeext.newfile: block:260 
    zstatic        mlibp.extractpath.str: block:260 
    zstatic        mlibp.extractbasefile.str: block:100 
    istatic        mlibp.nextcmdparam.infile: i64 
    data           0          u64 
    istatic        mlibp.nextcmdparam.filestart: u64 
    data           0          u64 
    istatic        mlibp.nextcmdparam.fileptr: u64 
    data           0          u64 
    istatic        mlibp.nextcmdparam.colonseen: u8 
    data           0          u8 
    zstatic        mlibp.nextcmdparam.str: block:300 
    zstatic        mlibp.readnextfileitem.str: block:256 
    zstatic        mlibp.padstr.str: block:256 
    zstatic        mlibp.chr.str: block:8 
    zstatic        mwindowsp.hconsole: u64 
    zstatic        mwindowsp.hconsolein: u64 
    zstatic        mwindowsp.lastkey: block:20 
    zstatic        mwindowsp.pendkey: block:20 
    zstatic        mwindowsp.keypending: i64 
    istatic        mwindowsp.wndproc_callbackfn: u64 
    data           0          u64 
    istatic        mwindowsp.init_flag: i64 
    data           0          u64 
    zstatic        mwindowsp.os_gxregisterclass.registered: u8 
    istatic        mwindowsp.mainwndproc.count: i64 
    data           0          u64 
    zstatic        mwindowsp.os_gethostname.name: block:300 
    zstatic        mwindowsp.os_gethostname.n: i64 
    zstatic        mwindowsp.os_peek.lastticks: i64 
    zstatic        pc_decls.optimflag: i64 
    zstatic        pc_decls.rtsproctable: block:48 
    zstatic        pc_decls.npdllnametable: i64 
    zstatic        pc_decls.pdllnametable: block:400 
    zstatic        pc_libpcl.pcstart: u64 
    zstatic        pc_libpcl.pccurr: u64 
    zstatic        pc_libpcl.pcend: u64 
    zstatic        pc_libpcl.pcalloc: i64 
    zstatic        pc_libpcl.pcfixed: u8 
    zstatic        pc_libpcl.pcseqno: i64 
    zstatic        pc_libpcl.pcneedfntable: i64 
    istatic        pc_libpcl.initpcalloc: i64 
    data           4194304    u64 
    zstatic        pc_libpcl.sbuffer: block:16 
    istatic        pc_libpcl.dest: u64 
    data           &pc_libpcl.sbuffer u64 
    zstatic        pc_libpcl.destlinestart: i64 
    zstatic        pc_libpcl.labelmap: block:4000000 
    zstatic        pc_libpcl.labelno: i64 
    zstatic        pc_libpcl.maxuserlabel: i64 
    zstatic        pc_libpcl.labelnooffset: i64 
    zstatic        pc_libpcl.labeloffset: block:8000000 
    zstatic        pc_libpcl.longstring: u64 
    zstatic        pc_libpcl.longstringlen: i64 
    zstatic        pc_libpcl.errormess: u64 
    zstatic        pc_libpcl.mcldone: i64 
    zstatic        pc_libpcl.stropnd.str: block:512 
    zstatic        pc_libpcl.strpmode.str: block:64 
    istatic        pc_lex.symbolnames: block:176 
    data           "errorsym" u64 
    data           "commasym" u64 
    data           "colonsym" u64 
    data           "dcolonsym" u64 
    data           "lsqsym"   u64 
    data           "rsqsym"   u64 
    data           "addsym"   u64 
    data           "subsym"   u64 
    data           "mulsym"   u64 
    data           "addrsym"  u64 
    data           "eqsym"    u64 
    data           "eolsym"   u64 
    data           "eofsym"   u64 
    data           "labelsym" u64 
    data           "intconstsym" u64 
    data           "realconstsym" u64 
    data           "stringconstsym" u64 
    data           "int128constsym" u64 
    data           "namesym"  u64 
    data           "kopcodesym" u64 
    data           "typesym"  u64 
    data           "kdummysym" u64 
    zstatic        pc_lex.nsymbols: i64 
    zstatic        pc_lex.lexhashtable: block:2097152 
    istatic        pc_lex.lxfileno: i64 
    data           0          u64 
    istatic        pc_lex.lxlineno: i64 
    data           0          u64 
    istatic        pc_lex.nsourcefiles: i64 
    data           0          u64 
    zstatic        pc_lex.lxsymbol: i64 
    zstatic        pc_lex.lxsubcode: i64 
    zstatic        pc_lex.lxvalue: i64 
    zstatic        pc_lex.lxuvalue128: u128 
    zstatic        pc_lex.lxxvalue: r64 
    zstatic        pc_lex.lxsvalue: u64 
    zstatic        pc_lex.lxlength: i64 
    zstatic        pc_lex.lxtruename: u8 
    zstatic        pc_lex.lxhashvalue: i64 
    zstatic        pc_lex.lxsptr: u64 
    zstatic        pc_lex.lxstart: u64 
    zstatic        pc_lex.lxsymptr: u64 
    zstatic        pc_lex.alphamap: block:256 
    zstatic        pc_lex.digitmap: block:256 
    zstatic        pc_lex.commentmap: block:256 
    istatic        pc_lex.initlex.done: u8 
    data           0          u8 
    zstatic        pc_parse.insideproc: i64 
    istatic        pc_parse.parse_readrts.source: u64 
    data           "!\c\nProcrts rts.$power_i64: i64\c\n    param          rts.$power_i64.a i64 \c\n    param          rts.$power_i64.n i64 \c\n    procentry                 \c\n!-------------------------------------------------\c\n    startmult                 \c\n    push           rts.$power_i64.n i64 \c\n    push           0          i64 \c\n    jumpge         #8         i64 \c\n    push           0          i64 \c\n    resetmult                 \c\n    jump           #9         \c\n#8: \c\n    push           rts.$power_i64.n i64 \c\n    push           0          i64 \c\n    jumpne         #10        i64 \c\n    push           1          i64 \c\n    resetmult                 \c\n    jump           #9         \c\n#10: \c\n    push           rts.$power_i64.n i64 \c\n    push           1          i64 \c\n    jumpne         #11        i64 \c\n    push           rts.$power_i64.a i64 \c\n    resetmult                 \c\n    jump           #9         \c\n#11: \c\n    push           rts.$power_i64.n i64 \c\n    push           0          i64 \c\n    dotindex                  i64 \c\n    jumptrue       #12        i64 \c\n    setargs                   2 0\c\n    push           rts.$power_i64.n i64 \c\n    push           2          i64 \c\n    idiv                      i64 \c\n    push           rts.$power_i64.a i64 \c\n    sqr                       i64 \c\n    callfn         &rts.$power_i64 i64 \c\n    resetmult                 \c\n    jump           #9         \c\n#12: \c\n    setargs                   2 0\c\n    push           rts.$power_i64.n i64 \c\n    push           1          i64 \c\n    sub                       i64 \c\n    push           2          i64 \c\n    idiv                      i64 \c\n    push           rts.$power_i64.a i64 \c\n    sqr                       i64 \c\n    callfn         &rts.$power_i64 i64 \c\n    push           rts.$power_i64.a i64 \c\n    mul                       i64 \c\n    endmult                   \c\n#9: \c\n    setret                    i64 \c\n    jump           #13        \c\n!-------------------------------------------------\c\n#13: \c\n    retfn                     i64 \c\nEnd\c\n\c\n!\c\n    endprogram                \c\n" u64 
    istatic        pc_tables.pstdnames: block:120 
    data           "void"     u64 
    data           "u8"       u64 
    data           "u16"      u64 
    data           "u32"      u64 
    data           "u64"      u64 
    data           "u128"     u64 
    data           "i8"       u64 
    data           "i16"      u64 
    data           "i32"      u64 
    data           "i64"      u64 
    data           "i128"     u64 
    data           "r32"      u64 
    data           "r64"      u64 
    data           "block"    u64 
    data           "$last"    u64 
    istatic        pc_tables.psize: block:15 
    data           0          u8 
    data           1          u8 
    data           2          u8 
    data           4          u8 
    data           8          u8 
    data           16         u8 
    data           1          u8 
    data           2          u8 
    data           4          u8 
    data           8          u8 
    data           16         u8 
    data           4          u8 
    data           8          u8 
    data           0          u8 
    data           0          u8 
    istatic        pc_tables.psigned: block:15 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    istatic        pc_tables.pfloat: block:15 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    istatic        pc_tables.pcat: block:15 
    data           0          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           1          u8 
    data           5          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           1          u8 
    data           5          u8 
    data           2          u8 
    data           3          u8 
    data           6          u8 
    data           0          u8 
    istatic        pc_tables.catnames: block:56 
    data           "voidcat"  u64 
    data           "d64cat"   u64 
    data           "x32cat"   u64 
    data           "x64cat"   u64 
    data           "shortcat" u64 
    data           "widecat"  u64 
    data           "blockcat" u64 
    istatic        pc_tables.opndnames: block:72 
    data           "no_opnd"  u64 
    data           "mem_opnd" u64 
    data           "memaddr_opnd" u64 
    data           "label_opnd" u64 
    data           "int_opnd" u64 
    data           "real_opnd" u64 
    data           "int128_opnd" u64 
    data           "real32_opnd" u64 
    data           "string_opnd" u64 
    istatic        pc_tables.pclnames: block:1744 
    data           "kzero"    u64 
    data           "knop"     u64 
    data           "kstop"    u64 
    data           "kcomment" u64 
    data           "kimportdll" u64 
    data           "kistatic" u64 
    data           "kzstatic" u64 
    data           "kequiv"   u64 
    data           "kprocdef" u64 
    data           "kprocentry" u64 
    data           "kendproc" u64 
    data           "kendprogram" u64 
    data           "kextproc" u64 
    data           "kextparam" u64 
    data           "kextvariadics" u64 
    data           "kendextproc" u64 
    data           "kprocrts" u64 
    data           "klocal"   u64 
    data           "kparam"   u64 
    data           "klabel"   u64 
    data           "klabelname" u64 
    data           "kpush"    u64 
    data           "kpop"     u64 
    data           "kstore"   u64 
    data           "kpushnc"  u64 
    data           "kpushlabel" u64 
    data           "kopnd"    u64 
    data           "ktype"    u64 
    data           "kduplstack" u64 
    data           "kswapstack" u64 
    data           "kpushptroff" u64 
    data           "kpopptroff" u64 
    data           "kstoreptroff" u64 
    data           "kpushptr" u64 
    data           "kpopptr"  u64 
    data           "kstoreptr" u64 
    data           "kdotindex" u64 
    data           "kpopdotindex" u64 
    data           "kstoredotindex" u64 
    data           "kdotslice" u64 
    data           "kpopdotslice" u64 
    data           "kstoredotslice" u64 
    data           "kpopstack" u64 
    data           "keval"    u64 
    data           "kcallproc" u64 
    data           "kcallprocptr" u64 
    data           "kretproc" u64 
    data           "kcallfn"  u64 
    data           "kcallfnptr" u64 
    data           "kretfn"   u64 
    data           "kjump"    u64 
    data           "kjumpptr" u64 
    data           "kjumpeq"  u64 
    data           "kjumpne"  u64 
    data           "kjumplt"  u64 
    data           "kjumple"  u64 
    data           "kjumpge"  u64 
    data           "kjumpgt"  u64 
    data           "kjumptrue" u64 
    data           "kjumpfalse" u64 
    data           "kjumpinrange" u64 
    data           "kjumpnotinrange" u64 
    data           "ksetjumpeq" u64 
    data           "ksetjumpeqx" u64 
    data           "ksetjumpne" u64 
    data           "kseteq"   u64 
    data           "ksetne"   u64 
    data           "ksetlt"   u64 
    data           "ksetle"   u64 
    data           "ksetge"   u64 
    data           "ksetgt"   u64 
    data           "kcasejumpeq" u64 
    data           "kselecteq" u64 
    data           "kselectne" u64 
    data           "kselectlt" u64 
    data           "kselectle" u64 
    data           "kselectge" u64 
    data           "kselectgt" u64 
    data           "kselecttrue" u64 
    data           "kto"      u64 
    data           "kforup"   u64 
    data           "kfordown" u64 
    data           "kswap"    u64 
    data           "kmakeslice" u64 
    data           "kswitch"  u64 
    data           "kswitchlabel" u64 
    data           "kendswitch" u64 
    data           "kclear"   u64 
    data           "kcsegment" u64 
    data           "kisegment" u64 
    data           "kzsegment" u64 
    data           "krosegment" u64 
    data           "kdata"    u64 
    data           "kdb"      u64 
    data           "kdw"      u64 
    data           "kdd"      u64 
    data           "kdq"      u64 
    data           "kdstring" u64 
    data           "kdstringz" u64 
    data           "kreserve" u64 
    data           "kassem"   u64 
    data           "kadd"     u64 
    data           "ksub"     u64 
    data           "kmul"     u64 
    data           "kdiv"     u64 
    data           "kidiv"    u64 
    data           "kirem"    u64 
    data           "kiand"    u64 
    data           "kior"     u64 
    data           "kixor"    u64 
    data           "kshl"     u64 
    data           "kshr"     u64 
    data           "kin"      u64 
    data           "knotin"   u64 
    data           "kmin"     u64 
    data           "kmax"     u64 
    data           "keq"      u64 
    data           "kne"      u64 
    data           "klt"      u64 
    data           "kle"      u64 
    data           "kge"      u64 
    data           "kgt"      u64 
    data           "ksame"    u64 
    data           "kandl"    u64 
    data           "korl"     u64 
    data           "kaddrefoff" u64 
    data           "ksubrefoff" u64 
    data           "ksubref"  u64 
    data           "kneg"     u64 
    data           "kabs"     u64 
    data           "kinot"    u64 
    data           "knotl"    u64 
    data           "kistruel" u64 
    data           "ksqr"     u64 
    data           "ksqrt"    u64 
    data           "ksin"     u64 
    data           "kcos"     u64 
    data           "ktan"     u64 
    data           "kasin"    u64 
    data           "kacos"    u64 
    data           "katan"    u64 
    data           "kln"      u64 
    data           "klog"     u64 
    data           "kexp"     u64 
    data           "kround"   u64 
    data           "kfloor"   u64 
    data           "kceil"    u64 
    data           "kfract"   u64 
    data           "ksign"    u64 
    data           "katan2"   u64 
    data           "kpower"   u64 
    data           "kfmod"    u64 
    data           "kincr"    u64 
    data           "kdecr"    u64 
    data           "kincrload" u64 
    data           "kdecrload" u64 
    data           "kloadincr" u64 
    data           "kloaddecr" u64 
    data           "kaddto"   u64 
    data           "ksubto"   u64 
    data           "kmulto"   u64 
    data           "kdivto"   u64 
    data           "kidivto"  u64 
    data           "kiremto"  u64 
    data           "kiandto"  u64 
    data           "kiorto"   u64 
    data           "kixorto"  u64 
    data           "kshlto"   u64 
    data           "kshrto"   u64 
    data           "kminto"   u64 
    data           "kmaxto"   u64 
    data           "kandlto"  u64 
    data           "korlto"   u64 
    data           "kaddrefoffto" u64 
    data           "ksubrefoffto" u64 
    data           "knegto"   u64 
    data           "kabsto"   u64 
    data           "kinotto"  u64 
    data           "knotlto"  u64 
    data           "kistruelto" u64 
    data           "ktypepun" u64 
    data           "ksoftconv" u64 
    data           "kwiden"   u64 
    data           "knarrow"  u64 
    data           "kfloat"   u64 
    data           "kfix"     u64 
    data           "ktruncate" u64 
    data           "kfwiden"  u64 
    data           "kfnarrow" u64 
    data           "ksofttruncw" u64 
    data           "kwidenw"  u64 
    data           "kstartmult" u64 
    data           "kresetmult" u64 
    data           "kendmult" u64 
    data           "ksetret"  u64 
    data           "ksetretmult" u64 
    data           "ksetargs" u64 
    data           "kgetnprocs" u64 
    data           "kgetprocname" u64 
    data           "kgetprocaddr" u64 
    data           "klen"     u64 
    data           "klwb"     u64 
    data           "kupb"     u64 
    data           "kbounds"  u64 
    data           "klenstr"  u64 
    data           "kbitwidth" u64 
    data           "kbytesize" u64 
    data           "kbytes"   u64 
    data           "kminvalue" u64 
    data           "kmaxvalue" u64 
    data           "ktypestr" u64 
    data           "kerror"   u64 
    data           "karraytoslice" u64 
    data           "kichartoslice" u64 
    data           "ksofttruncshort" u64 
    data           "kcharaxtoichar" u64 
    data           "ksliceptr" u64 
    data           "klast"    u64 
    istatic        pc_tables.pclhasopnd: block:218 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           4          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           2          u8 
    data           3          u8 
    data           3          u8 
    data           1          u8 
    data           2          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    istatic        pc_tables.pclhastype: block:218 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    istatic        pc_tables.pclextra: block:218 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           2          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           2          u8 
    data           2          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           2          u8 
    data           2          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           2          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    istatic        pc_tables.rtsnames: block:48 
    data           "rts_rts_unimpl" u64 
    data           "rts_power_i64" u64 
    data           "rts_float_u64r64" u64 
    data           "rts_mul_i128" u64 
    data           "rts_div_i128" u64 
    data           "rts_div_u128" u64 
    istatic        pci_mcl.valtypenames: block:80 
    data           "no_val"   u64 
    data           "intimm_val" u64 
    data           "realimm_val" u64 
    data           "realmem_val" u64 
    data           "stringimm_val" u64 
    data           "def_val"  u64 
    data           "temp_val" u64 
    data           "label_val" u64 
    data           "name_val" u64 
    data           "syscall_val" u64 
    istatic        pci_mcl.mclnames: block:1184 
    data           "m_procstart" u64 
    data           "m_procend" u64 
    data           "m_comment" u64 
    data           "m_blank"  u64 
    data           "m_deleted" u64 
    data           "m_labelname" u64 
    data           "m_define" u64 
    data           "m_definereg" u64 
    data           "m_label"  u64 
    data           "m_nop"    u64 
    data           "m_param"  u64 
    data           "m_mov"    u64 
    data           "m_push"   u64 
    data           "m_pop"    u64 
    data           "m_lea"    u64 
    data           "m_cmovcc" u64 
    data           "m_movd"   u64 
    data           "m_movq"   u64 
    data           "m_movsx"  u64 
    data           "m_movzx"  u64 
    data           "m_movsxd" u64 
    data           "m_call"   u64 
    data           "m_ret"    u64 
    data           "m_leave"  u64 
    data           "m_retn"   u64 
    data           "m_jmp"    u64 
    data           "m_jmpcc"  u64 
    data           "m_xchg"   u64 
    data           "m_add"    u64 
    data           "m_sub"    u64 
    data           "m_adc"    u64 
    data           "m_sbb"    u64 
    data           "m_imul"   u64 
    data           "m_mul"    u64 
    data           "m_imul2"  u64 
    data           "m_imul3"  u64 
    data           "m_idiv"   u64 
    data           "m_div"    u64 
    data           "m_andx"   u64 
    data           "m_orx"    u64 
    data           "m_xorx"   u64 
    data           "m_test"   u64 
    data           "m_cmp"    u64 
    data           "m_shl"    u64 
    data           "m_sar"    u64 
    data           "m_shr"    u64 
    data           "m_rol"    u64 
    data           "m_ror"    u64 
    data           "m_rcl"    u64 
    data           "m_rcr"    u64 
    data           "m_neg"    u64 
    data           "m_notx"   u64 
    data           "m_inc"    u64 
    data           "m_dec"    u64 
    data           "m_cbw"    u64 
    data           "m_cwd"    u64 
    data           "m_cdq"    u64 
    data           "m_cqo"    u64 
    data           "m_setcc"  u64 
    data           "m_bsf"    u64 
    data           "m_bsr"    u64 
    data           "m_sqrtsd" u64 
    data           "m_sqrtss" u64 
    data           "m_addss"  u64 
    data           "m_subss"  u64 
    data           "m_mulss"  u64 
    data           "m_divss"  u64 
    data           "m_addsd"  u64 
    data           "m_subsd"  u64 
    data           "m_mulsd"  u64 
    data           "m_divsd"  u64 
    data           "m_comiss" u64 
    data           "m_comisd" u64 
    data           "m_xorpd"  u64 
    data           "m_xorps"  u64 
    data           "m_andpd"  u64 
    data           "m_andps"  u64 
    data           "m_pxor"   u64 
    data           "m_pand"   u64 
    data           "m_cvtss2si" u64 
    data           "m_cvtsd2si" u64 
    data           "m_cvttss2si" u64 
    data           "m_cvttsd2si" u64 
    data           "m_cvtsi2ss" u64 
    data           "m_cvtsi2sd" u64 
    data           "m_cvtsd2ss" u64 
    data           "m_cvtss2sd" u64 
    data           "m_movdqa" u64 
    data           "m_movdqu" u64 
    data           "m_pcmpistri" u64 
    data           "m_pcmpistrm" u64 
    data           "m_fld"    u64 
    data           "m_fst"    u64 
    data           "m_fstp"   u64 
    data           "m_fild"   u64 
    data           "m_fist"   u64 
    data           "m_fistp"  u64 
    data           "m_fadd"   u64 
    data           "m_fsub"   u64 
    data           "m_fmul"   u64 
    data           "m_fdiv"   u64 
    data           "m_fsqrt"  u64 
    data           "m_fsin"   u64 
    data           "m_fcos"   u64 
    data           "m_fsincos" u64 
    data           "m_fptan"  u64 
    data           "m_fpatan" u64 
    data           "m_fabs"   u64 
    data           "m_fchs"   u64 
    data           "m_minss"  u64 
    data           "m_maxss"  u64 
    data           "m_minsd"  u64 
    data           "m_maxsd"  u64 
    data           "m_db"     u64 
    data           "m_dw"     u64 
    data           "m_dd"     u64 
    data           "m_dq"     u64 
    data           "m_ddoffset" u64 
    data           "m_segment" u64 
    data           "m_isegment" u64 
    data           "m_zsegment" u64 
    data           "m_csegment" u64 
    data           "m_align"  u64 
    data           "m_resb"   u64 
    data           "m_resw"   u64 
    data           "m_resd"   u64 
    data           "m_resq"   u64 
    data           "m_xlat"   u64 
    data           "m_loopnz" u64 
    data           "m_loopz"  u64 
    data           "m_loopcx" u64 
    data           "m_jecxz"  u64 
    data           "m_jrcxz"  u64 
    data           "m_cmpsb"  u64 
    data           "m_cmpsw"  u64 
    data           "m_cmpsd"  u64 
    data           "m_cmpsq"  u64 
    data           "m_rdtsc"  u64 
    data           "m_popcnt" u64 
    data           "m_finit"  u64 
    data           "m_fldz"   u64 
    data           "m_fld1"   u64 
    data           "m_fldpi"  u64 
    data           "m_fld2t"  u64 
    data           "m_fld2e"  u64 
    data           "m_fldlg2" u64 
    data           "m_fldln2" u64 
    data           "m_halt"   u64 
    istatic        pci_mcl.mclnopnds: block:148 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           1          u8 
    data           2          u8 
    data           1          u8 
    data           1          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           1          u8 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           1          u8 
    data           1          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           3          u8 
    data           3          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           2          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    istatic        pci_mcl.mclcodes: block:148 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           144        u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           232        u8 
    data           195        u8 
    data           201        u8 
    data           0          u8 
    data           233        u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           5          u8 
    data           2          u8 
    data           3          u8 
    data           5          u8 
    data           4          u8 
    data           0          u8 
    data           0          u8 
    data           7          u8 
    data           6          u8 
    data           4          u8 
    data           1          u8 
    data           6          u8 
    data           0          u8 
    data           7          u8 
    data           4          u8 
    data           7          u8 
    data           5          u8 
    data           0          u8 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           3          u8 
    data           2          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           188        u8 
    data           189        u8 
    data           81         u8 
    data           81         u8 
    data           88         u8 
    data           92         u8 
    data           89         u8 
    data           94         u8 
    data           88         u8 
    data           92         u8 
    data           89         u8 
    data           94         u8 
    data           0          u8 
    data           0          u8 
    data           87         u8 
    data           87         u8 
    data           84         u8 
    data           84         u8 
    data           239        u8 
    data           219        u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           102        u8 
    data           243        u8 
    data           99         u8 
    data           98         u8 
    data           0          u8 
    data           2          u8 
    data           3          u8 
    data           0          u8 
    data           2          u8 
    data           3          u8 
    data           193        u8 
    data           233        u8 
    data           201        u8 
    data           249        u8 
    data           250        u8 
    data           254        u8 
    data           255        u8 
    data           251        u8 
    data           242        u8 
    data           243        u8 
    data           225        u8 
    data           224        u8 
    data           93         u8 
    data           95         u8 
    data           93         u8 
    data           95         u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           2          u8 
    data           4          u8 
    data           8          u8 
    data           215        u8 
    data           224        u8 
    data           225        u8 
    data           226        u8 
    data           227        u8 
    data           227        u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           49         u8 
    data           0          u8 
    data           0          u8 
    data           238        u8 
    data           232        u8 
    data           235        u8 
    data           233        u8 
    data           234        u8 
    data           236        u8 
    data           237        u8 
    data           244        u8 
    istatic        pci_mcl.regnames: block:168 
    data           "rnone"    u64 
    data           "r0"       u64 
    data           "r1"       u64 
    data           "r2"       u64 
    data           "r3"       u64 
    data           "r4"       u64 
    data           "r5"       u64 
    data           "r6"       u64 
    data           "r7"       u64 
    data           "r8"       u64 
    data           "r9"       u64 
    data           "r10"      u64 
    data           "r11"      u64 
    data           "r12"      u64 
    data           "r13"      u64 
    data           "r14"      u64 
    data           "r15"      u64 
    data           "r16"      u64 
    data           "r17"      u64 
    data           "r18"      u64 
    data           "r19"      u64 
    istatic        pci_mcl.regcodes: block:21 
    data           0          u8 
    data           0          u8 
    data           10         u8 
    data           11         u8 
    data           7          u8 
    data           3          u8 
    data           6          u8 
    data           12         u8 
    data           13         u8 
    data           14         u8 
    data           15         u8 
    data           1          u8 
    data           2          u8 
    data           8          u8 
    data           9          u8 
    data           5          u8 
    data           4          u8 
    data           4          u8 
    data           7          u8 
    data           5          u8 
    data           6          u8 
    istatic        pci_mcl.condnames: block:160 
    data           "ov"       u64 
    data           "nov"      u64 
    data           "ltu"      u64 
    data           "geu"      u64 
    data           "eq"       u64 
    data           "ne"       u64 
    data           "leu"      u64 
    data           "gtu"      u64 
    data           "s"        u64 
    data           "ns"       u64 
    data           "p"        u64 
    data           "np"       u64 
    data           "lt"       u64 
    data           "ge"       u64 
    data           "le"       u64 
    data           "gt"       u64 
    data           "flt"      u64 
    data           "fge"      u64 
    data           "fle"      u64 
    data           "fgt"      u64 
    istatic        pci_mcl.asmcondnames: block:160 
    data           "o"        u64 
    data           "no"       u64 
    data           "b"        u64 
    data           "ae"       u64 
    data           "z"        u64 
    data           "nz"       u64 
    data           "be"       u64 
    data           "a"        u64 
    data           "s"        u64 
    data           "ns"       u64 
    data           "p"        u64 
    data           "np"       u64 
    data           "l"        u64 
    data           "ge"       u64 
    data           "le"       u64 
    data           "g"        u64 
    data           "b"        u64 
    data           "ae"       u64 
    data           "be"       u64 
    data           "a"        u64 
    istatic        pci_mcl.asmrevcond: block:160 
    data           1          u64 
    data           0          u64 
    data           3          u64 
    data           2          u64 
    data           5          u64 
    data           4          u64 
    data           7          u64 
    data           6          u64 
    data           9          u64 
    data           8          u64 
    data           11         u64 
    data           10         u64 
    data           13         u64 
    data           12         u64 
    data           15         u64 
    data           14         u64 
    data           17         u64 
    data           16         u64 
    data           19         u64 
    data           18         u64 
    istatic        pci_mcl.dregnames: block:1088 
    data           "d0"       u64 
    data           "d1"       u64 
    data           "d2"       u64 
    data           "d3"       u64 
    data           "d4"       u64 
    data           "d5"       u64 
    data           "d6"       u64 
    data           "d7"       u64 
    data           "d8"       u64 
    data           "d9"       u64 
    data           "d10"      u64 
    data           "d11"      u64 
    data           "d12"      u64 
    data           "d13"      u64 
    data           "d14"      u64 
    data           "d15"      u64 
    data           "a0"       u64 
    data           "a1"       u64 
    data           "a2"       u64 
    data           "a3"       u64 
    data           "a4"       u64 
    data           "a5"       u64 
    data           "a6"       u64 
    data           "a7"       u64 
    data           "a8"       u64 
    data           "a9"       u64 
    data           "a10"      u64 
    data           "a11"      u64 
    data           "a12"      u64 
    data           "a13"      u64 
    data           "a14"      u64 
    data           "a15"      u64 
    data           "w0"       u64 
    data           "w1"       u64 
    data           "w2"       u64 
    data           "w3"       u64 
    data           "w4"       u64 
    data           "w5"       u64 
    data           "w6"       u64 
    data           "w7"       u64 
    data           "w8"       u64 
    data           "w9"       u64 
    data           "w10"      u64 
    data           "w11"      u64 
    data           "w12"      u64 
    data           "w13"      u64 
    data           "w14"      u64 
    data           "w15"      u64 
    data           "b0"       u64 
    data           "b1"       u64 
    data           "b2"       u64 
    data           "b3"       u64 
    data           "b4"       u64 
    data           "b5"       u64 
    data           "b6"       u64 
    data           "b7"       u64 
    data           "b8"       u64 
    data           "b9"       u64 
    data           "b10"      u64 
    data           "b11"      u64 
    data           "b12"      u64 
    data           "b13"      u64 
    data           "b14"      u64 
    data           "b15"      u64 
    data           "b16"      u64 
    data           "b17"      u64 
    data           "b18"      u64 
    data           "b19"      u64 
    data           "rax"      u64 
    data           "rbx"      u64 
    data           "rcx"      u64 
    data           "rdx"      u64 
    data           "rsi"      u64 
    data           "rdi"      u64 
    data           "rbp"      u64 
    data           "rsp"      u64 
    data           "r8"       u64 
    data           "r9"       u64 
    data           "r10"      u64 
    data           "r11"      u64 
    data           "r12"      u64 
    data           "r13"      u64 
    data           "r14"      u64 
    data           "r15"      u64 
    data           "eax"      u64 
    data           "ebx"      u64 
    data           "ecx"      u64 
    data           "edx"      u64 
    data           "esi"      u64 
    data           "edi"      u64 
    data           "ebp"      u64 
    data           "esp"      u64 
    data           "r8d"      u64 
    data           "r9d"      u64 
    data           "r10d"     u64 
    data           "r11d"     u64 
    data           "r12d"     u64 
    data           "r13d"     u64 
    data           "r14d"     u64 
    data           "r15d"     u64 
    data           "ax"       u64 
    data           "bx"       u64 
    data           "cx"       u64 
    data           "dx"       u64 
    data           "si"       u64 
    data           "di"       u64 
    data           "bp"       u64 
    data           "sp"       u64 
    data           "r8w"      u64 
    data           "r9w"      u64 
    data           "r10w"     u64 
    data           "r11w"     u64 
    data           "r12w"     u64 
    data           "r13w"     u64 
    data           "r14w"     u64 
    data           "r15w"     u64 
    data           "al"       u64 
    data           "bl"       u64 
    data           "cl"       u64 
    data           "dl"       u64 
    data           "ah"       u64 
    data           "bh"       u64 
    data           "ch"       u64 
    data           "dh"       u64 
    data           "sil"      u64 
    data           "dil"      u64 
    data           "bpl"      u64 
    data           "spl"      u64 
    data           "r8b"      u64 
    data           "r9b"      u64 
    data           "r10b"     u64 
    data           "r11b"     u64 
    data           "r12b"     u64 
    data           "r13b"     u64 
    data           "r14b"     u64 
    data           "r15b"     u64 
    istatic        pci_mcl.regsizes: block:136 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    istatic        pci_mcl.regindices: block:136 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           4          u8 
    data           5          u8 
    data           6          u8 
    data           7          u8 
    data           8          u8 
    data           9          u8 
    data           10         u8 
    data           11         u8 
    data           12         u8 
    data           13         u8 
    data           14         u8 
    data           15         u8 
    data           16         u8 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           4          u8 
    data           5          u8 
    data           6          u8 
    data           7          u8 
    data           8          u8 
    data           9          u8 
    data           10         u8 
    data           11         u8 
    data           12         u8 
    data           13         u8 
    data           14         u8 
    data           15         u8 
    data           16         u8 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           4          u8 
    data           5          u8 
    data           6          u8 
    data           7          u8 
    data           8          u8 
    data           9          u8 
    data           10         u8 
    data           11         u8 
    data           12         u8 
    data           13         u8 
    data           14         u8 
    data           15         u8 
    data           16         u8 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           4          u8 
    data           5          u8 
    data           6          u8 
    data           7          u8 
    data           8          u8 
    data           9          u8 
    data           10         u8 
    data           11         u8 
    data           12         u8 
    data           13         u8 
    data           14         u8 
    data           15         u8 
    data           16         u8 
    data           17         u8 
    data           18         u8 
    data           19         u8 
    data           20         u8 
    data           1          u8 
    data           5          u8 
    data           11         u8 
    data           12         u8 
    data           6          u8 
    data           4          u8 
    data           15         u8 
    data           16         u8 
    data           13         u8 
    data           14         u8 
    data           2          u8 
    data           3          u8 
    data           7          u8 
    data           8          u8 
    data           9          u8 
    data           10         u8 
    data           1          u8 
    data           5          u8 
    data           11         u8 
    data           12         u8 
    data           6          u8 
    data           4          u8 
    data           15         u8 
    data           16         u8 
    data           13         u8 
    data           14         u8 
    data           2          u8 
    data           3          u8 
    data           7          u8 
    data           8          u8 
    data           9          u8 
    data           10         u8 
    data           1          u8 
    data           5          u8 
    data           11         u8 
    data           12         u8 
    data           6          u8 
    data           4          u8 
    data           15         u8 
    data           16         u8 
    data           13         u8 
    data           14         u8 
    data           2          u8 
    data           3          u8 
    data           7          u8 
    data           8          u8 
    data           9          u8 
    data           10         u8 
    data           1          u8 
    data           5          u8 
    data           11         u8 
    data           12         u8 
    data           17         u8 
    data           18         u8 
    data           19         u8 
    data           20         u8 
    data           6          u8 
    data           4          u8 
    data           15         u8 
    data           16         u8 
    data           13         u8 
    data           14         u8 
    data           2          u8 
    data           3          u8 
    data           7          u8 
    data           8          u8 
    data           9          u8 
    data           10         u8 
    istatic        pci_mcl.xmmregnames: block:128 
    data           "xmm0"     u64 
    data           "xmm1"     u64 
    data           "xmm2"     u64 
    data           "xmm3"     u64 
    data           "xmm4"     u64 
    data           "xmm5"     u64 
    data           "xmm6"     u64 
    data           "xmm7"     u64 
    data           "xmm8"     u64 
    data           "xmm9"     u64 
    data           "xmm10"    u64 
    data           "xmm11"    u64 
    data           "xmm12"    u64 
    data           "xmm13"    u64 
    data           "xmm14"    u64 
    data           "xmm15"    u64 
    istatic        pci_mcl.fregnames: block:64 
    data           "st0"      u64 
    data           "st1"      u64 
    data           "st2"      u64 
    data           "st3"      u64 
    data           "st4"      u64 
    data           "st5"      u64 
    data           "st6"      u64 
    data           "st7"      u64 
    istatic        pci_mcl.mregnames: block:64 
    data           "mmx0"     u64 
    data           "mmx1"     u64 
    data           "mmx2"     u64 
    data           "mmx3"     u64 
    data           "mmx4"     u64 
    data           "mmx5"     u64 
    data           "mmx6"     u64 
    data           "mmx7"     u64 
    istatic        pci_mcl.jmpccnames: block:128 
    data           "jo"       u64 
    data           "jno"      u64 
    data           "jb"       u64 
    data           "jae"      u64 
    data           "jz"       u64 
    data           "jnz"      u64 
    data           "jbe"      u64 
    data           "ja"       u64 
    data           "js"       u64 
    data           "jns"      u64 
    data           "jp"       u64 
    data           "jnp"      u64 
    data           "jl"       u64 
    data           "jge"      u64 
    data           "jle"      u64 
    data           "jg"       u64 
    istatic        pci_mcl.jmpcccodes: block:16 
    data           0          u8 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           4          u8 
    data           5          u8 
    data           6          u8 
    data           7          u8 
    data           8          u8 
    data           9          u8 
    data           10         u8 
    data           11         u8 
    data           12         u8 
    data           13         u8 
    data           14         u8 
    data           15         u8 
    istatic        pci_mcl.setccnames: block:128 
    data           "seto"     u64 
    data           "setno"    u64 
    data           "setb"     u64 
    data           "setae"    u64 
    data           "setz"     u64 
    data           "setnz"    u64 
    data           "setbe"    u64 
    data           "seta"     u64 
    data           "sets"     u64 
    data           "setns"    u64 
    data           "setp"     u64 
    data           "setnp"    u64 
    data           "setl"     u64 
    data           "setge"    u64 
    data           "setle"    u64 
    data           "setg"     u64 
    istatic        pci_mcl.setcccodes: block:16 
    data           0          u8 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           4          u8 
    data           5          u8 
    data           6          u8 
    data           7          u8 
    data           8          u8 
    data           9          u8 
    data           10         u8 
    data           11         u8 
    data           12         u8 
    data           13         u8 
    data           14         u8 
    data           15         u8 
    istatic        pci_mcl.cmovccnames: block:128 
    data           "cmovo"    u64 
    data           "cmovno"   u64 
    data           "cmovb"    u64 
    data           "cmovae"   u64 
    data           "cmovz"    u64 
    data           "cmovnz"   u64 
    data           "cmovbe"   u64 
    data           "cmova"    u64 
    data           "cmovs"    u64 
    data           "cmovns"   u64 
    data           "cmovp"    u64 
    data           "cmovnp"   u64 
    data           "cmovl"    u64 
    data           "cmovge"   u64 
    data           "cmovle"   u64 
    data           "cmovg"    u64 
    istatic        pci_mcl.cmovcccodes: block:16 
    data           0          u8 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           4          u8 
    data           5          u8 
    data           6          u8 
    data           7          u8 
    data           8          u8 
    data           9          u8 
    data           10         u8 
    data           11         u8 
    data           12         u8 
    data           13         u8 
    data           14         u8 
    data           15         u8 
    istatic        pci_mcl.segmentnames: block:48 
    data           "no_seg"   u64 
    data           "code_seg" u64 
    data           "idata_seg" u64 
    data           "zdata_seg" u64 
    data           "rodata_seg" u64 
    data           "impdata_seg" u64 
    istatic        pci_mcl.reftypenames: block:24 
    data           "extern_ref" u64 
    data           "fwd_ref"  u64 
    data           "back_ref" u64 
    istatic        pci_mcl.opndnames_ma: block:56 
    data           "a_none"   u64 
    data           "a_reg"    u64 
    data           "a_imm"    u64 
    data           "a_mem"    u64 
    data           "a_cond"   u64 
    data           "a_xreg"   u64 
    data           "a_wreg"   u64 
    zstatic        pci_mcl.mlabelno: i64 
    zstatic        pci_mcl.foptimise: u8 
    zstatic        pci_mcl.pclopndstack: block:3150 
    zstatic        pci_mcl.noperands: i64 
    zstatic        pci_mcl.mstackdepth: i64 
    zstatic        pci_mcl.pclstack: u64 
    zstatic        pci_mcl.pclstackzero: block:15 
    istatic        pci_mcl.locnames: block:72 
    data           "no_loc"   u64 
    data           "reg_loc"  u64 
    data           "xreg_loc" u64 
    data           "stack_loc" u64 
    data           "imm_loc"  u64 
    data           "mem_loc"  u64 
    data           "memhigh_loc" u64 
    data           "regvar_loc" u64 
    data           "xregvar_loc" u64 
    istatic        pci_mcl.fmtnames: block:160 
    data           "nofmt_void" u64 
    data           "reg_d64"  u64 
    data           "xreg_x64" u64 
    data           "xreg_x32" u64 
    data           "stack_d64" u64 
    data           "stack_x64" u64 
    data           "stack_x32" u64 
    data           "imm_d64"  u64 
    data           "imm_x64"  u64 
    data           "imm_x32"  u64 
    data           "imm_str"  u64 
    data           "imm_memaddr" u64 
    data           "imm_label" u64 
    data           "imm_labaddr" u64 
    data           "mem_d64"  u64 
    data           "mem_x64"  u64 
    data           "mem_x32"  u64 
    data           "memhigh_d64" u64 
    data           "regvar_d64" u64 
    data           "xregvar_x64" u64 
    istatic        pci_mcl.loccodes: block:20 
    data           0          u8 
    data           1          u8 
    data           2          u8 
    data           2          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           5          u8 
    data           5          u8 
    data           5          u8 
    data           5          u8 
    data           7          u8 
    data           8          u8 
    istatic        pci_mcl.floatloc: block:20 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    istatic        pci_mcl.loadfmt: block:20 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           1          u8 
    data           1          u8 
    data           2          u8 
    istatic        pci_mcl.pushfmt: block:20 
    data           0          u8 
    data           4          u8 
    data           5          u8 
    data           6          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           4          u8 
    data           5          u8 
    data           6          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           5          u8 
    data           6          u8 
    data           4          u8 
    data           4          u8 
    data           5          u8 
    zstatic        pci_mcl.regset: block:16 
    zstatic        pci_mcl.xregset: block:16 
    zstatic        pci_mcl.isregvar: block:16 
    zstatic        pci_mcl.isxregvar: block:16 
    zstatic        pci_mcl.inf_proccalls: i64 
    zstatic        pci_mcl.inf_proclocals: i64 
    zstatic        pci_mcl.inf_procxlocals: i64 
    zstatic        pci_mcl.inf_leafproc: i64 
    zstatic        pci_mcl.inf_highreg: i64 
    zstatic        pci_mcl.inf_highxreg: i64 
    zstatic        pci_mcl.inf_maxargs: i64 
    zstatic        pci_mcl.inf_assem: i64 
    zstatic        pci_mcl.inf_r10used: i64 
    zstatic        pci_mcl.inf_r11used: i64 
    zstatic        pci_mcl.inf_r13used: i64 
    zstatic        pci_mcl.dsaveregs: block:128 
    zstatic        pci_mcl.xsaveregs: block:128 
    zstatic        pci_mcl.ndsaveregs: i64 
    zstatic        pci_mcl.ndsavepush: i64 
    zstatic        pci_mcl.nxsaveregs: i64 
    zstatic        pci_mcl.dsaveoffset: i64 
    zstatic        pci_mcl.xsaveoffset: i64 
    zstatic        pci_mcl.needstackframe: i64 
    zstatic        pci_mcl.framebytes: i64 
    zstatic        pci_mcl.needshadow48: i64 
    zstatic        pci_mcl.needshadow32: i64 
    zstatic        pci_mcl.noxorclear: u8 
    istatic        pci_mcl.xregnames: block:136 
    data           "xnone"    u64 
    data           "xr0"      u64 
    data           "xr1"      u64 
    data           "xr2"      u64 
    data           "xr3"      u64 
    data           "xr4"      u64 
    data           "xr5"      u64 
    data           "xr6"      u64 
    data           "xr7"      u64 
    data           "xr8"      u64 
    data           "xr9"      u64 
    data           "xr10"     u64 
    data           "xr11"     u64 
    data           "xr12"     u64 
    data           "xr13"     u64 
    data           "xr14"     u64 
    data           "xr15"     u64 
    zstatic        pci_mcl.procdefpcl: u64 
    zstatic        pci_mcl.procdef: u64 
    zstatic        pci_mcl.callshadow: block:128 
    zstatic        pci_mcl.callslots: block:128 
    zstatic        pci_mcl.callalign: block:16 
    zstatic        pci_mcl.callargs: block:16 
    zstatic        pci_mcl.callnvars: block:16 
    zstatic        pci_mcl.ncalldepth: i64 
    zstatic        pci_mcl.paramdefs: block:256 
    zstatic        pci_mcl.localdefs: block:2048 
    zstatic        pci_mcl.nparams: i64 
    zstatic        pci_mcl.nlocals: i64 
    zstatic        pci_mcl.retmode: i64 
    zstatic        pci_mcl.passno: i64 
    zstatic        pci_mcl.sa_nargs: i64 
    istatic        pci_mcl.multregs: block:48 
    data           1          u64 
    data           2          u64 
    data           3          u64 
    data           11         u64 
    data           12         u64 
    data           13         u64 
    istatic        pci_mcl.multxregs: block:48 
    data           1          u64 
    data           2          u64 
    data           3          u64 
    data           4          u64 
    data           5          u64 
    data           6          u64 
    zstatic        pci_mcl.paramoffset: i64 
    zstatic        pci_mcl.lababs32: i64 
    zstatic        pci_mcl.lababs64: i64 
    zstatic        pci_mcl.labneg32: i64 
    zstatic        pci_mcl.labneg64: i64 
    zstatic        pci_mcl.labmask63: i64 
    zstatic        pci_mcl.laboffset64: i64 
    zstatic        pci_mcl.labzero: i64 
    istatic        pci_mcl.kk0used: i64 
    data           0          u64 
    zstatic        pci_mcl.stackaligned: i64 
    zstatic        pci_mcl.mccode: u64 
    zstatic        pci_mcl.mccodex: u64 
    istatic        pci_mcl.currsegment: i64 
    data           0          u64 
    istatic        pci_mcl.currzdataalign: i64 
    data           0          u64 
    istatic        pci_mcl.curridataalign: i64 
    data           0          u64 
    zstatic        pci_mcl.frameoffset: i64 
    zstatic        pci_mcl.isthreadedproc: i64 
    zstatic        pci_mcl.iscallbackproc: i64 
    zstatic        pci_mcl.structretoffset: i64 
    zstatic        pci_mcl.stacksetinstr: u64 
    zstatic        pci_mcl.currblocksize: i64 
    zstatic        pci_mcl.allasmstr: u64 
    zstatic        pci_mcl.allasmstrlen: i64 
    zstatic        pci_mcl.dstackopnd: u64 
    zstatic        pci_mcl.dframeopnd: u64 
    istatic        pci_mcl.zero_opnd: u64 
    data           0          u64 
    zstatic        pci_mcl.regtable: block:2048 
    zstatic        pci_mcl.smallinttable: block:264 
    zstatic        pci_mcl.frameregtable: block:1544 
    zstatic        pci_mcl.stringtable: u64 
    zstatic        pci_mcl.stringlabtable: u64 
    zstatic        pci_mcl.realtable: u64 
    zstatic        pci_mcl.reallabtable: u64 
    zstatic        pci_mcl.stringtablesize: i64 
    zstatic        pci_mcl.realtablesize: i64 
    istatic        pci_mcl.nstrings: i64 
    data           0          u64 
    istatic        pci_mcl.nreals: i64 
    data           0          u64 
    zstatic        pci_mcl.labeltable: block:640000 
    zstatic        pci_mcl.sbuffer: block:16 
    istatic        pci_mcl.dest: u64 
    data           &pci_mcl.sbuffer u64 
    zstatic        pci_mcl.destlinestart: i64 
    zstatic        pci_mcl.currasmproc: u64 
    zstatic        pci_mcl.noregvar: i64 
    zstatic        pci_mcl.mseqno: i64 
    zstatic        pci_mcl.rtsproclabels: block:48 
    zstatic        pci_mcl.lab_funcnametable: i64 
    zstatic        pci_mcl.lab_funcaddrtable: i64 
    zstatic        pci_mcl.lab_funcnprocs: i64 
    zstatic        pci_mcl.ss_zdatalen: i64 
    zstatic        pci_mcl.ss_zdata: u64 
    zstatic        pci_mcl.ss_idata: u64 
    zstatic        pci_mcl.ss_code: u64 
    zstatic        pci_mcl.ss_idatarelocs: u64 
    zstatic        pci_mcl.ss_coderelocs: u64 
    zstatic        pci_mcl.ss_nidatarelocs: i64 
    zstatic        pci_mcl.ss_ncoderelocs: i64 
    zstatic        pci_mcl.ss_symboltable: u64 
    zstatic        pci_mcl.ss_nsymbols: i64 
    zstatic        pci_mcl.ss_symboltablesize: i64 
    zstatic        pci_mcl.labeldeftable: u64 
    zstatic        pci_mcl.alineno: i64 
    zstatic        pci_mcl.psearchlibs: block:240 
    zstatic        pci_mcl.npsearchlibs: i64 
    zstatic        pci_mcl.plibfiles: block:408 
    zstatic        pci_mcl.nplibfiles: i64 
    zstatic        pc_genmcl.currpcl: u64 
    zstatic        pc_genmcl.px_handlertable: block:1744 
    istatic        pc_genmcl.scondcodes: block:6 
    data           4          u8 
    data           5          u8 
    data           12         u8 
    data           14         u8 
    data           13         u8 
    data           15         u8 
    istatic        pc_genmcl.ucondcodes: block:6 
    data           4          u8 
    data           5          u8 
    data           2          u8 
    data           6          u8 
    data           3          u8 
    data           7          u8 
    istatic        pc_genmcl.multregs: block:48 
    data           1          u64 
    data           2          u64 
    data           3          u64 
    data           11         u64 
    data           12         u64 
    data           13         u64 
    istatic        pc_genmcl.multxregs: block:48 
    data           1          u64 
    data           2          u64 
    data           3          u64 
    data           4          u64 
    data           5          u64 
    data           6          u64 
    istatic        pc_genmcl.inithandlers.initdone: u8 
    data           0          u8 
    istatic        pc_libmcl.fshowmsource: i64 
    data           0          u64 
    zstatic        pc_libmcl.rd: block:120 
    zstatic        pc_libmcl.strmcl.str: block:512 
    istatic        pc_libmcl.getregname.prefix: block:136 
    data           "B"        u64 
    data           "W"        u64 
    data           ""         u64 
    data           "A"        u64 
    data           ""         u64 
    data           ""         u64 
    data           ""         u64 
    data           "D"        u64 
    data           ""         u64 
    data           ""         u64 
    data           ""         u64 
    data           ""         u64 
    data           ""         u64 
    data           ""         u64 
    data           ""         u64 
    data           "Q"        u64 
    data           "N"        u64 
    zstatic        pc_libmcl.getregname.str: block:32 
    zstatic        pc_libmcl.fgetregname.str: block:32 
    zstatic        pc_libmcl.getfullname.str: block:256 
    zstatic        pc_libmcl.stropnd.str: block:512 
    zstatic        pc_libmcl.strvalue.str: block:512 
    zstatic        pc_stackmcl.stropndstack.str: block:512 
    zstatic        pc_genss.ncomments: i64 
    zstatic        pc_genss.nblanks: i64 
    zstatic        pc_genss.ndeleted: i64 
    zstatic        pc_genss.rex: i64 
    zstatic        pc_genss.sizeoverride: i64 
    zstatic        pc_genss.addroverride: i64 
    zstatic        pc_genss.f2override: i64 
    zstatic        pc_genss.f3override: i64 
    zstatic        pc_genss.extraparam: u64 
    istatic        pc_genss.currseg: i64 
    data           0          u64 
    zstatic        pc_genss.currdata: u64 
    zstatic        pc_genss.currrelocs: u64 
    zstatic        pc_genss.nrelocs: i64 
    istatic        pc_genss.instrno: i64 
    data           2          u64 
    zstatic        pc_genss.currmcl: u64 
    istatic        pc_genss.genrm.scaletable: block:64 
    data           0          u64 
    data           1          u64 
    data           0          u64 
    data           2          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           3          u64 
    istatic        pc_objdecls.relocnames: block:56 
    data           "abs_rel"  u64 
    data           "addr64_rel" u64 
    data           "addr32_rel" u64 
    data           "addr32nb_rel" u64 
    data           "rel32_rel" u64 
    data           "rel321_rel" u64 
    data           "rel8_rel" u64 
    zstatic        pc_writeexe.libinsttable: block:240 
    zstatic        pc_writeexe.libinstnames: block:240 
    zstatic        pc_writeexe.libnotable: block:240 
    zstatic        pc_writeexe.basereloclist: u64 
    zstatic        pc_writeexe.nbaserelocs: i64 
    zstatic        pc_writeexe.maxrelocaddr: i64 
    zstatic        pc_writeexe.blockbases: block:4000 
    zstatic        pc_writeexe.blockcounts: block:2000 
    zstatic        pc_writeexe.blockbytes: block:2000 
    zstatic        pc_writeexe.blockpadding: block:500 
    zstatic        pc_writeexe.nbaseblocks: i64 
    zstatic        pc_writeexe.basetablesize: i64 
    zstatic        pc_writeexe.imagebase: i64 
    zstatic        pc_writeexe.imagesize: i64 
    zstatic        pc_writeexe.filesize: i64 
    zstatic        pc_writeexe.thunktable: u64 
    zstatic        pc_writeexe.fileiatoffset: i64 
    zstatic        pc_writeexe.fileiatsize: i64 
    zstatic        pc_writeexe.stentrypoint: u64 
    zstatic        pc_writeexe.stentrypoint2: u64 
    zstatic        pc_writeexe.stentrypoint3: u64 
    zstatic        pc_writeexe.sectiontable: block:720 
    zstatic        pc_writeexe.nsections: i64 
    zstatic        pc_writeexe.importdir: u64 
    zstatic        pc_writeexe.importtable: block:144000 
    zstatic        pc_writeexe.nimports: i64 
    zstatic        pc_writeexe.exporttable: block:16000 
    zstatic        pc_writeexe.nexports: i64 
    zstatic        pc_writeexe.dllfilename: u64 
    zstatic        pc_writeexe.isdll: i64 
    zstatic        pc_writeexe.dlltable: block:2400 
    zstatic        pc_writeexe.ndlls: i64 
    zstatic        pc_writeexe.datastart: u64 
    zstatic        pc_writeexe.dataptr: u64 
    zstatic        pc_writeexe.userentrypoint: u64 
    zstatic        pc_writeexe.exportdirvirtaddr: i64 
    zstatic        pc_writeexe.exportdirvirtsize: i64 
    zstatic        pc_writeexe.exportdiroffset: i64 
    zstatic        pc_writeexe.blockdirvirtaddr: i64 
    zstatic        pc_writeexe.blockdirvirtsize: i64 
    zstatic        pc_writeexe.blockdiroffset: i64 
    istatic        pc_writeexe.writedosstub.stubdata: block:128 
    data           77         u8 
    data           90         u8 
    data           144        u8 
    data           0          u8 
    data           3          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           4          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           255        u8 
    data           255        u8 
    data           0          u8 
    data           0          u8 
    data           184        u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           64         u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           128        u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           14         u8 
    data           31         u8 
    data           186        u8 
    data           14         u8 
    data           0          u8 
    data           180        u8 
    data           9          u8 
    data           205        u8 
    data           33         u8 
    data           184        u8 
    data           1          u8 
    data           76         u8 
    data           205        u8 
    data           33         u8 
    data           84         u8 
    data           104        u8 
    data           105        u8 
    data           115        u8 
    data           32         u8 
    data           112        u8 
    data           114        u8 
    data           111        u8 
    data           103        u8 
    data           114        u8 
    data           97         u8 
    data           109        u8 
    data           32         u8 
    data           99         u8 
    data           97         u8 
    data           110        u8 
    data           110        u8 
    data           111        u8 
    data           116        u8 
    data           32         u8 
    data           98         u8 
    data           101        u8 
    data           32         u8 
    data           114        u8 
    data           117        u8 
    data           110        u8 
    data           32         u8 
    data           105        u8 
    data           110        u8 
    data           32         u8 
    data           68         u8 
    data           79         u8 
    data           83         u8 
    data           32         u8 
    data           109        u8 
    data           111        u8 
    data           100        u8 
    data           101        u8 
    data           46         u8 
    data           13         u8 
    data           13         u8 
    data           10         u8 
    data           36         u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    zstatic        pc.target: i64 
    zstatic        pc.fshowc: u8 
    zstatic        pc.fshowpcl: u8 
    zstatic        pc.fshowmcl: u8 
    zstatic        pc.fshowss: u8 
    zstatic        pc.fshowst: u8 
    zstatic        pc.fshowstflat: u8 
    zstatic        pc.fshowtiming: u8 
    zstatic        pc.fverbose: u8 
    zstatic        pc.freadpcl: u8 
    istatic        pc.freadrts: u8 
    data           1          u8 
    zstatic        pc.mcltarget: u8 
    zstatic        pc.foptim: u8 
    zstatic        pc.destfile: u64 
    zstatic        pc.destext: u64 
    zstatic        pc.destfilename: u64 
    zstatic        pc.destfilepath: u64 
    zstatic        pc.infile: u64 
    istatic        pc.targetnames: block:80 
    data           "load_target" u64 
    data           "pcl_target" u64 
    data           "pcb_target" u64 
    data           "clang_target" u64 
    data           "exe_target" u64 
    data           "dll_target" u64 
    data           "asm_target" u64 
    data           "run_target" u64 
    data           "runvm_target" u64 
    data           "runjit_target" u64 
    istatic        pc.optionnames: block:224 
    data           "exe"      u64 
    data           "dll"      u64 
    data           "obj"      u64 
    data           "asm"      u64 
    data           "clang"    u64 
    data           "pcl"      u64 
    data           "pcb"      u64 
    data           "load"     u64 
    data           "runvm"    u64 
    data           "runjit"   u64 
    data           "opt"      u64 
    data           "opt1"     u64 
    data           "opt2"     u64 
    data           "rts"      u64 
    data           "norts"    u64 
    data           "showpcl"  u64 
    data           "showmcl"  u64 
    data           "showc"    u64 
    data           "showss"   u64 
    data           "st"       u64 
    data           "stflat"   u64 
    data           "time"     u64 
    data           "v"        u64 
    data           "q"        u64 
    data           "h"        u64 
    data           "help"     u64 
    data           "out"      u64 
    data           "outpath"  u64 
    zstatic        pc.progsource: u64 
    zstatic        pc.error:  u64 
    zstatic        pc.inputfiles: block:168 
    zstatic        pc.libfiles: block:168 
    zstatic        pc.ninputfiles: i64 
    zstatic        pc.nlibfiles: i64 
    zstatic        pc.do_option.outused: u8 
    zstatic        pc.do_option.outpathused: u8 

Proc msysp.m$init:
    local          msysp.m$init.nargs i32 
    local          msysp.m$init.nargs64 i64 
    local          msysp.m$init.args u64 
    local          msysp.m$init.env u64 
    local          msysp.m$init.res i64 
    local          msysp.m$init.s u64 
    local          msysp.m$init.j i64 
    local          msysp.m$init.i i64 
    procentry                 
    setargs                   5 0
    push           &msysp.m$init.startupinfo 
    push           0          i64 
    push           &msysp.m$init.env 
    push           &msysp.m$init.args 
    push           &msysp.m$init.nargs 
    callfn         &__getmainargs i32 
    pop            msysp.m$init.res i64 
    push           msysp.m$init.nargs i32 
    pop            msysp.nsysparams i64 
    push           msysp.nsysparams i64 
    push           128        i64 
    jumple         #4487      i64 
    setargs                   1 0
    push           "Too many params\n" u64 
    callproc       &printf    
    push           50         i64 
    stop                      
#4487: 
    push           msysp.m$init.nargs i32 
    pop            msysp.m$init.nargs64 i64 
#4488: 
    push           1          i64 
    pop            msysp.m$init.i i64 
    push           msysp.m$init.nargs64 i64 
    push           1          i64 
    jumplt         #4489      i64 
#4490: 
    push           msysp.m$init.args u64 
    push           msysp.m$init.i i64 
    pushptroff                u64 8 -8
    push           &msysp.sysparams 
    push           msysp.m$init.i i64 
    popptroff                 u64 8 -8
#4491: 
    forup          #4490      i64 1
    opnd           msysp.m$init.i 
    opnd           msysp.m$init.nargs64 
#4489: 
    push           1          i64 
    pop            msysp.m$init.j i64 
    push           0          i64 
    pop            msysp.nenvstrings i64 
    jump           #4492      
#4493: 
    push           msysp.m$init.env u64 
    push           msysp.m$init.j i64 
    pushptroff                u64 8 -8
    push           &msysp.envstrings 
    push           &msysp.nenvstrings 
    incrload                  i64 1
    popptroff                 u64 8 -8
    push           &msysp.m$init.j 
    incr                      i64 1
#4492: 
    push           msysp.m$init.env u64 
    push           msysp.m$init.j i64 
    pushptroff                u64 8 -8
    jumptrue       #4493      u64 
#4494: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
#4495: 
    retproc                   
End


Proc msysp.pushio:
    procentry                 
    push           msysp.niostack i64 
    push           10         i64 
    jumplt         #4497      i64 
    setargs                   1 0
    push           "Too many io levels\n" u64 
    callproc       &printf    
    push           53         i64 
    stop                      
#4497: 
    push           &msysp.niostack 
    incr                      i64 1
    push           msysp.outchan u64 
    push           &msysp.outchan_stack 
    push           msysp.niostack i64 
    popptroff                 u64 8 -8
    push           msysp.outdev i64 
    push           &msysp.outdev_stack 
    push           msysp.niostack i64 
    popptroff                 i64 8 -8
    push           msysp.fmtstr u64 
    push           &msysp.fmtstr_stack 
    push           msysp.niostack i64 
    popptroff                 u64 8 -8
    push           msysp.needgap i64 
    push           &msysp.needgap_stack 
    push           msysp.niostack i64 
    popptroff                 u8 1 -1
    push           0          i64 
    pop            msysp.needgap i64 
    push           0          u64 
    pop            msysp.fmtstr u64 
    push           0          u64 
    pop            msysp.outchan u64 
#4498: 
    retproc                   
End


Proc msysp.m$print_startfile:
    param          msysp.m$print_startfile.dev u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.pushio 
    push           msysp.m$print_startfile.dev u64 
    pop            msysp.outchan u64 
    push           msysp.m$print_startfile.dev u64 
    jumpfalse      #4500      u64 
    push           2          i64 
    pop            msysp.outdev i64 
    jump           #4501      
#4500: 
    push           1          i64 
    pop            msysp.outdev i64 
#4501: 
#4502: 
    retproc                   
End


Proc msysp.m$print_startstr:
    param          msysp.m$print_startstr.s u64 
    local          msysp.m$print_startstr.p u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.pushio 
    push           msysp.m$print_startstr.s u64 
    push           &msysp.ptr_stack 
    push           msysp.niostack i64 
    popptroff                 u64 8 -8
    push           &msysp.ptr_stack 
    push           msysp.niostack i64 
    addrefoff                 u64 8 -8
    pop            msysp.m$print_startstr.p u64 
    push           msysp.m$print_startstr.p u64 
    pop            msysp.outchan u64 
    push           3          i64 
    pop            msysp.outdev i64 
#4504: 
    retproc                   
End


Proc msysp.m$print_startptr:
    param          msysp.m$print_startptr.p u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.pushio 
    push           msysp.m$print_startptr.p u64 
    pop            msysp.outchan u64 
    push           3          i64 
    pop            msysp.outdev i64 
#4506: 
    retproc                   
End


Proc msysp.m$print_startcon:
    procentry                 
    setargs                   0 0
    callproc       &msysp.pushio 
    push           1          i64 
    pop            msysp.outdev i64 
#4508: 
    retproc                   
End


Proc msysp.m$print_setfmt:
    param          msysp.m$print_setfmt.format u64 
    procentry                 
    push           msysp.m$print_setfmt.format u64 
    pop            msysp.fmtstr u64 
#4510: 
    retproc                   
End


Proc msysp.m$print_end:
    procentry                 
    push           0          i64 
    pop            msysp.needgap i64 
    setargs                   1 0
    push           1          i64 
    callproc       &msysp.nextfmtchars 
    push           msysp.niostack i64 
    push           0          i64 
    jumpne         #4512      i64 
    jump           #4513      
#4512: 
    push           &msysp.outchan_stack 
    push           msysp.niostack i64 
    pushptroff                u64 8 -8
    pop            msysp.outchan u64 
    push           &msysp.outdev_stack 
    push           msysp.niostack i64 
    pushptroff                i64 8 -8
    pop            msysp.outdev i64 
    push           &msysp.fmtstr_stack 
    push           msysp.niostack i64 
    pushptroff                u64 8 -8
    pop            msysp.fmtstr u64 
    push           &msysp.needgap_stack 
    push           msysp.niostack i64 
    pushptroff                u8 1 -1
    pop            msysp.needgap i64 
    push           &msysp.niostack 
    decr                      i64 1
#4513: 
    retproc                   
End


Proc msysp.m$print_ptr:
    param          msysp.m$print_ptr.a u64 
    param          msysp.m$print_ptr.fmtstyle u64 
    local          msysp.m$print_ptr.s block:20 
    procentry                 
    push           msysp.m$print_ptr.fmtstyle u64 
    push           0          u64 
    jumpne         #4515      u64 
    push           "z8H"      u64 
    pop            msysp.m$print_ptr.fmtstyle u64 
#4515: 
    setargs                   2 0
    push           msysp.m$print_ptr.fmtstyle u64 
    push           msysp.m$print_ptr.a u64 
    callproc       &msysp.m$print_u64 
#4516: 
    retproc                   
End


Proc msysp.m$print_ptr_nf:
    param          msysp.m$print_ptr_nf.a u64 
    procentry                 
    setargs                   2 0
    push           0          u64 
    push           msysp.m$print_ptr_nf.a u64 
    callproc       &msysp.m$print_ptr 
#4518: 
    retproc                   
End


Proc msysp.m$print_i64:
    param          msysp.m$print_i64.a i64 
    param          msysp.m$print_i64.fmtstyle u64 
    local          msysp.m$print_i64.s block:40 
    local          msysp.m$print_i64.fmt block:16 
    local          msysp.m$print_i64.n i64 
    procentry                 
    setargs                   1 0
    push           0          i64 
    callproc       &msysp.nextfmtchars 
    push           msysp.m$print_i64.fmtstyle u64 
    push           0          u64 
    jumpne         #4520      u64 
    push           msysp.m$print_i64.a i64 
    push           0          i64 
    jumplt         #4521      i64 
    setargs                   4 0
    push           0          i64 
    push           10         u64 
    push           &msysp.m$print_i64.s 
    push           msysp.m$print_i64.a u64 
    callfn         &msysp.u64tostr i64 
    pop            msysp.m$print_i64.n i64 
    jump           #4522      
#4521: 
    push           45         u64 
    push           &msysp.m$print_i64.s 
    push           1          i64 
    popptroff                 u8 1 -1
    setargs                   4 0
    push           0          i64 
    push           10         u64 
    push           &msysp.m$print_i64.s 
    push           1          
    addrefoff                 u8 1 0
    push           msysp.m$print_i64.a i64 
    neg                       u64 
    callfn         &msysp.u64tostr i64 
    push           1          i64 
    add                       i64 
    pop            msysp.m$print_i64.n i64 
#4522: 
    setargs                   2 0
    push           msysp.m$print_i64.n i64 
    push           &msysp.m$print_i64.s 
    callproc       &msysp.printstr_n 
    jump           #4523      
#4520: 
    setargs                   3 0
    push           &msysp.m$print_i64.fmt 
    push           -1         i64 
    push           msysp.m$print_i64.fmtstyle u64 
    callproc       &msysp.strtofmt 
    push           &msysp.m$print_i64.fmt 
    push           14         
    pushptroff                u8 1 0
    push           86         u64 
    jumpne         #4524      u64 
    push           msysp.m$print_i64.a i64 
    pop            msysp.fmtparam i64 
    push           0          i64 
    pop            msysp.needgap i64 
    jump           #4525      
#4524: 
    setargs                   2 0
    push           &msysp.m$print_i64.fmt 
    push           msysp.m$print_i64.a i64 
    callproc       &msysp.tostr_i64 
#4525: 
#4523: 
    push           1          i64 
    pop            msysp.needgap i64 
#4526: 
    retproc                   
End


Proc msysp.m$print_i64_nf:
    param          msysp.m$print_i64_nf.a i64 
    procentry                 
    setargs                   2 0
    push           0          u64 
    push           msysp.m$print_i64_nf.a i64 
    callproc       &msysp.m$print_i64 
#4528: 
    retproc                   
End


Proc msysp.m$print_u64:
    param          msysp.m$print_u64.a u64 
    param          msysp.m$print_u64.fmtstyle u64 
    local          msysp.m$print_u64.s block:40 
    local          msysp.m$print_u64.fmt block:16 
    procentry                 
    setargs                   1 0
    push           0          i64 
    callproc       &msysp.nextfmtchars 
    push           msysp.m$print_u64.fmtstyle u64 
    push           0          u64 
    jumpne         #4530      u64 
    setargs                   3 3
    push           msysp.m$print_u64.a u64 
    push           "%llu"     u64 
    push           &msysp.m$print_u64.s 
    callproc       &sprintf   
    setargs                   1 0
    push           &msysp.m$print_u64.s 
    callproc       &msysp.printstr 
    jump           #4531      
#4530: 
    setargs                   3 0
    push           &msysp.m$print_u64.fmt 
    push           -1         i64 
    push           msysp.m$print_u64.fmtstyle u64 
    callproc       &msysp.strtofmt 
    setargs                   2 0
    push           &msysp.m$print_u64.fmt 
    push           msysp.m$print_u64.a u64 
    callproc       &msysp.tostr_u64 
#4531: 
    push           1          i64 
    pop            msysp.needgap i64 
#4532: 
    retproc                   
End


Proc msysp.m$print_i128:
    param          msysp.m$print_i128.a i128 
    param          msysp.m$print_i128.fmtstyle u64 
    local          msysp.m$print_i128.s block:40 
    local          msysp.m$print_i128.fmt block:16 
    procentry                 
    setargs                   1 0
    push           0          i64 
    callproc       &msysp.nextfmtchars 
    setargs                   3 0
    push           &msysp.m$print_i128.fmt 
    push           -1         i64 
    push           msysp.m$print_i128.fmtstyle u64 
    callproc       &msysp.strtofmt 
    push           msysp.m$print_i128.a i128 
    push           0          i64 
    widenw                    i128 i64 
    jumplt         #4534      i128 
    setargs                   4 0
    push           0          i64 
    push           &msysp.m$print_i128.fmt 
    push           msysp.m$print_i128.a u128 
    callproc       &msysp.tostr_u128 
    jump           #4535      
#4534: 
    setargs                   4 0
    push           1          i64 
    push           &msysp.m$print_i128.fmt 
    push           msysp.m$print_i128.a i128 
    neg                       u128 
    callproc       &msysp.tostr_u128 
#4535: 
    push           1          i64 
    pop            msysp.needgap i64 
#4536: 
    retproc                   
End


Proc msysp.m$print_u128:
    param          msysp.m$print_u128.a u128 
    param          msysp.m$print_u128.fmtstyle u64 
    local          msysp.m$print_u128.s block:40 
    local          msysp.m$print_u128.fmt block:16 
    procentry                 
    setargs                   1 0
    push           0          i64 
    callproc       &msysp.nextfmtchars 
    setargs                   3 0
    push           &msysp.m$print_u128.fmt 
    push           -1         i64 
    push           msysp.m$print_u128.fmtstyle u64 
    callproc       &msysp.strtofmt 
    setargs                   4 0
    push           0          i64 
    push           &msysp.m$print_u128.fmt 
    push           msysp.m$print_u128.a u128 
    callproc       &msysp.tostr_u128 
    push           1          i64 
    pop            msysp.needgap i64 
#4538: 
    retproc                   
End


Proc msysp.m$print_r64:
    param          msysp.m$print_r64.x r64 
    param          msysp.m$print_r64.fmtstyle u64 
    local          msysp.m$print_r64.s block:360 
    local          msysp.m$print_r64.fmt block:16 
    procentry                 
    setargs                   1 0
    push           0          i64 
    callproc       &msysp.nextfmtchars 
    push           msysp.m$print_r64.fmtstyle u64 
    push           0          u64 
    jumpne         #4540      u64 
    setargs                   3 3
    push           msysp.m$print_r64.x r64 
    push           "%f"       u64 
    push           &msysp.m$print_r64.s 
    callproc       &sprintf   
    setargs                   1 0
    push           &msysp.m$print_r64.s 
    callproc       &msysp.printstr 
    jump           #4541      
#4540: 
    setargs                   3 0
    push           &msysp.m$print_r64.fmt 
    push           -1         i64 
    push           msysp.m$print_r64.fmtstyle u64 
    callproc       &msysp.strtofmt 
    setargs                   2 0
    push           &msysp.m$print_r64.fmt 
    push           msysp.m$print_r64.x r64 
    callproc       &msysp.tostr_r64 
#4541: 
    push           1          i64 
    pop            msysp.needgap i64 
#4542: 
    retproc                   
End


Proc msysp.m$print_r32:
    param          msysp.m$print_r32.x r32 
    param          msysp.m$print_r32.fmtstyle u64 
    procentry                 
    setargs                   2 0
    push           msysp.m$print_r32.fmtstyle u64 
    push           msysp.m$print_r32.x r32 
    fwiden                    r64 r32 
    callproc       &msysp.m$print_r64 
#4544: 
    retproc                   
End


Proc msysp.m$print_c8:
    param          msysp.m$print_c8.a i64 
    param          msysp.m$print_c8.fmtstyle u64 
    local          msysp.m$print_c8.s block:40 
    local          msysp.m$print_c8.fmt block:16 
    local          msysp.m$print_c8.n i64 
    procentry                 
    setargs                   1 0
    push           0          i64 
    callproc       &msysp.nextfmtchars 
    push           msysp.m$print_c8.a u64 
    push           &msysp.m$print_c8.s 
    push           1          i64 
    popptroff                 u8 1 -1
    push           0          u64 
    push           &msysp.m$print_c8.s 
    push           2          i64 
    popptroff                 u8 1 -1
    setargs                   1 0
    push           &msysp.m$print_c8.s 
    callproc       &msysp.printstr 
    push           1          i64 
    pop            msysp.needgap i64 
#4546: 
    retproc                   
End


Proc msysp.m$print_str:
    param          msysp.m$print_str.s u64 
    param          msysp.m$print_str.fmtstyle u64 
    local          msysp.m$print_str.fmt block:16 
    procentry                 
    setargs                   1 0
    push           0          i64 
    callproc       &msysp.nextfmtchars 
    push           msysp.m$print_str.s u64 
    push           0          u64 
    jumpne         #4548      u64 
    setargs                   1 0
    push           "<null>"   u64 
    callproc       &msysp.printstr 
    jump           #4549      
#4548: 
    push           msysp.m$print_str.fmtstyle u64 
    push           0          u64 
    jumpne         #4550      u64 
    setargs                   1 0
    push           msysp.m$print_str.s u64 
    callproc       &msysp.printstr 
    jump           #4551      
#4550: 
    setargs                   3 0
    push           &msysp.m$print_str.fmt 
    push           -1         i64 
    push           msysp.m$print_str.fmtstyle u64 
    callproc       &msysp.strtofmt 
    setargs                   2 0
    push           &msysp.m$print_str.fmt 
    push           msysp.m$print_str.s u64 
    callproc       &msysp.tostr_str 
#4551: 
    push           1          i64 
    pop            msysp.needgap i64 
#4549: 
    retproc                   
End


Proc msysp.m$print_str_nf:
    param          msysp.m$print_str_nf.s u64 
    procentry                 
    setargs                   2 0
    push           0          u64 
    push           msysp.m$print_str_nf.s u64 
    callproc       &msysp.m$print_str 
#4553: 
    retproc                   
End


Proc msysp.m$print_strsl:
    param          msysp.m$print_strsl.s u128 
    param          msysp.m$print_strsl.fmtstyle u64 
    local          msysp.m$print_strsl.fmt block:16 
    procentry                 
    setargs                   1 0
    push           0          i64 
    callproc       &msysp.nextfmtchars 
    setargs                   1 0
    push           "FORMATED PRINT SLICE NOT READY" u64 
    callproc       &mlibp.abortprogram 
    push           1          i64 
    pop            msysp.needgap i64 
#4555: 
    retproc                   
End


Proc msysp.m$print_newline:
    procentry                 
    push           0          i64 
    pop            msysp.needgap i64 
    setargs                   1 0
    push           1          i64 
    callproc       &msysp.nextfmtchars 
    setargs                   1 0
    push           "\c\n"     u64 
    callproc       &msysp.printstr 
#4557: 
    retproc                   
End


Proc msysp.m$print_nogap:
    procentry                 
    push           0          i64 
    pop            msysp.needgap i64 
#4559: 
    retproc                   
End


Proc msysp.m$print_space:
    procentry                 
    push           0          i64 
    pop            msysp.needgap i64 
    setargs                   1 0
    push           " "        u64 
    callproc       &msysp.printstr 
#4561: 
    retproc                   
End


Proc msysp.printstr:
    param          msysp.printstr.s u64 
    local          msysp.printstr.n i64 
    local          msysp.printstr.p u64 
    procentry                 
    push           msysp.outdev i64 
    push           1          i64 
    casejumpeq     #4563      i64 0
    push           2          i64 
    casejumpeq     #4564      i64 0
    push           3          i64 
    casejumpeq     #4565      i64 0
    popstack                  i64 
    jump           #4566      
#4563: 
    setargs                   2 2
    push           msysp.printstr.s u64 
    push           "%s"       u64 
    callproc       &printf    
    jump           #4567      
#4564: 
    setargs                   3 3
    push           msysp.printstr.s u64 
    push           "%s"       u64 
    push           msysp.outchan u64 
    callproc       &fprintf   
    jump           #4567      
#4565: 
    push           msysp.outchan u64 
    pop            msysp.printstr.p u64 
    setargs                   2 0
    push           msysp.printstr.s u64 
    push           msysp.printstr.p u64 
    pushptr                   u64 
    callproc       &strcpy    
    push           msysp.printstr.p u64 
    setargs                   1 0
    push           msysp.printstr.s u64 
    callfn         &strlen    i64 
    addrefoffto               u64 1 0
    push           0          u64 
    push           msysp.printstr.p u64 
    pushptr                   u64 
    popptr                    u8 
    jump           #4567      
#4566: 
#4567: 
#4568: 
    retproc                   
End


Proc msysp.printstr_n:
    param          msysp.printstr_n.s u64 
    param          msysp.printstr_n.n i64 
    local          msysp.printstr_n.p u64 
    procentry                 
    push           msysp.printstr_n.n i64 
    push           -1         i64 
    casejumpeq     #4570      i64 0
    push           0          i64 
    casejumpeq     #4571      i64 0
    popstack                  i64 
    jump           #4572      
#4570: 
    setargs                   1 0
    push           msysp.printstr_n.s u64 
    callfn         &strlen    i64 
    pop            msysp.printstr_n.n i64 
    jump           #4573      
#4571: 
    jump           #4574      
    jump           #4573      
#4572: 
#4573: 
    push           msysp.outdev i64 
    push           1          i64 
    casejumpeq     #4575      i64 0
    push           2          i64 
    casejumpeq     #4576      i64 0
    push           3          i64 
    casejumpeq     #4577      i64 0
    popstack                  i64 
    jump           #4578      
#4575: 
    setargs                   3 2
    push           msysp.printstr_n.s u64 
    push           msysp.printstr_n.n i64 
    push           "%.*s"     u64 
    callproc       &printf    
    jump           #4579      
#4576: 
    setargs                   4 3
    push           msysp.printstr_n.s u64 
    push           msysp.printstr_n.n i64 
    push           "%.*s"     u64 
    push           msysp.outchan u64 
    callproc       &fprintf   
    jump           #4579      
#4577: 
    push           msysp.outchan u64 
    pop            msysp.printstr_n.p u64 
    setargs                   3 0
    push           msysp.printstr_n.n u64 
    push           msysp.printstr_n.s u64 
    push           msysp.printstr_n.p u64 
    pushptr                   u64 
    callproc       &memcpy    
    push           msysp.printstr_n.p u64 
    push           msysp.printstr_n.n i64 
    addrefoffto               u64 1 0
    push           0          u64 
    push           msysp.printstr_n.p u64 
    pushptr                   u64 
    popptr                    u8 
    jump           #4579      
#4578: 
#4579: 
#4574: 
    retproc                   
End


Proc msysp.printstrn_app:
    param          msysp.printstrn_app.s u64 
    param          msysp.printstrn_app.length i64 
    param          msysp.printstrn_app.f u64 
    procentry                 
    push           msysp.printstrn_app.length i64 
    jumpfalse      #4581      i64 
    push           msysp.printstrn_app.f u64 
    push           0          u64 
    jumpne         #4582      u64 
    setargs                   3 2
    push           msysp.printstrn_app.s u64 
    push           msysp.printstrn_app.length i64 
    push           "%.*s"     u64 
    callproc       &printf    
    jump           #4583      
#4582: 
    setargs                   4 3
    push           msysp.printstrn_app.s u64 
    push           msysp.printstrn_app.length i64 
    push           "%.*s"     u64 
    push           msysp.printstrn_app.f u64 
    callproc       &fprintf   
#4583: 
#4581: 
#4584: 
    retproc                   
End


Proc msysp.printchar:
    param          msysp.printchar.ch i64 
    local          msysp.printchar.p u64 
    procentry                 
    push           msysp.outdev i64 
    push           1          i64 
    casejumpeq     #4586      i64 0
    push           2          i64 
    casejumpeq     #4587      i64 0
    push           3          i64 
    casejumpeq     #4588      i64 0
    popstack                  i64 
    jump           #4589      
#4586: 
    setargs                   2 2
    push           msysp.printchar.ch i64 
    push           "%c"       u64 
    callproc       &printf    
    jump           #4590      
#4587: 
    setargs                   3 3
    push           msysp.printchar.ch i64 
    push           "%c"       u64 
    push           msysp.outchan u64 
    callproc       &fprintf   
    jump           #4590      
#4588: 
    push           msysp.outchan u64 
    pop            msysp.printchar.p u64 
    push           msysp.printchar.ch u64 
    push           msysp.printchar.p u64 
    pushptr                   u64 
    popptr                    u8 
    push           msysp.printchar.p u64 
    push           1          i64 
    addrefoffto               u64 1 0
    push           0          u64 
    push           msysp.printchar.p u64 
    pushptr                   u64 
    popptr                    u8 
    jump           #4590      
#4589: 
#4590: 
#4591: 
    retproc                   
End


Proc msysp.nextfmtchars:
    param          msysp.nextfmtchars.lastx i64 
    local          msysp.nextfmtchars.c u8 
    local          msysp.nextfmtchars.pstart u64 
    local          msysp.nextfmtchars.n i64 
    procentry                 
    push           msysp.fmtstr u64 
    jumptrue       #4593      u64 
    push           msysp.needgap i64 
    jumpfalse      #4594      i64 
    setargs                   1 0
    push           32         i64 
    callproc       &msysp.printchar 
#4594: 
    push           0          i64 
    pop            msysp.needgap i64 
    jump           #4595      
#4593: 
    push           msysp.fmtstr u64 
    pop            msysp.nextfmtchars.pstart u64 
    push           0          i64 
    pop            msysp.nextfmtchars.n i64 
#4596: 
    push           msysp.fmtstr u64 
    pushptr                   u8 
    pop            msysp.nextfmtchars.c u8 
    push           msysp.nextfmtchars.c u8 
    switch         #4597      0 126
    opnd           #4598      
#4597: 
    switchlabel    #4599      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4600      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4598      
    switchlabel    #4601      
    endswitch                 
#4600: 
    push           msysp.nextfmtchars.lastx i64 
    jumpfalse      #4602      i64 
    jump           #4603      
#4602: 
    push           &msysp.fmtstr 
    incr                      u64 1
    push           msysp.nextfmtchars.n i64 
    jumpfalse      #4604      i64 
    setargs                   2 0
    push           msysp.nextfmtchars.n i64 
    push           msysp.nextfmtchars.pstart u64 
    callproc       &msysp.printstr_n 
#4604: 
    jump           #4595      
    jump           #4605      
#4599: 
    push           msysp.nextfmtchars.n i64 
    jumpfalse      #4606      i64 
    setargs                   2 0
    push           msysp.nextfmtchars.n i64 
    push           msysp.nextfmtchars.pstart u64 
    callproc       &msysp.printstr_n 
    jump           #4607      
#4606: 
    push           msysp.nextfmtchars.lastx i64 
    jumptrue       #4608      i64 
    setargs                   2 0
    push           1          i64 
    push           "|"        u64 
    callproc       &msysp.printstr_n 
#4608: 
#4607: 
    jump           #4595      
    jump           #4605      
#4601: 
    push           msysp.nextfmtchars.n i64 
    jumpfalse      #4609      i64 
    setargs                   2 0
    push           msysp.nextfmtchars.n i64 
    push           msysp.nextfmtchars.pstart u64 
    callproc       &msysp.printstr_n 
    push           0          i64 
    pop            msysp.nextfmtchars.n i64 
#4609: 
    push           &msysp.fmtstr 
    incr                      u64 1
    push           msysp.fmtstr u64 
    pushptr                   u8 
    pop            msysp.nextfmtchars.c u8 
    push           msysp.nextfmtchars.c u8 
    jumpfalse      #4610      u64 
    push           &msysp.fmtstr 
    incr                      u64 1
    setargs                   1 0
    push           msysp.nextfmtchars.c u8 
    callproc       &msysp.printchar 
#4610: 
    push           msysp.fmtstr u64 
    pop            msysp.nextfmtchars.pstart u64 
    jump           #4605      
#4598: 
!skip::
#4603: 
    push           &msysp.nextfmtchars.n 
    incr                      i64 1
    push           &msysp.fmtstr 
    incr                      u64 1
#4605: 
    jump           #4596      
#4611: 
#4595: 
    retproc                   
End


Proc msysp.strtofmt:
    param          msysp.strtofmt.s u64 
    param          msysp.strtofmt.slen i64 
    param          msysp.strtofmt.fmt u64 
    local          msysp.strtofmt.c i64 
    local          msysp.strtofmt.wset u8 
    local          msysp.strtofmt.n i64 
    local          msysp.strtofmt.str block:100 
    procentry                 
    push           msysp.defaultfmt block:16 
    push           msysp.strtofmt.fmt u64 
    popptr                    block:16 
    push           msysp.strtofmt.s u64 
    push           0          u64 
    jumpne         #4613      u64 
    jump           #4614      
#4613: 
    push           msysp.strtofmt.slen i64 
    push           -1         i64 
    jumpne         #4615      i64 
    setargs                   1 0
    push           msysp.strtofmt.s u64 
    callfn         &strlen    i64 
    pop            msysp.strtofmt.slen i64 
#4615: 
    setargs                   3 0
    push           msysp.strtofmt.slen u64 
    push           msysp.strtofmt.s u64 
    push           &msysp.strtofmt.str 
    callproc       &memcpy    
    push           0          u64 
    push           &msysp.strtofmt.str 
    push           msysp.strtofmt.slen i64 
    popptroff                 u8 1 0
    push           &msysp.strtofmt.str 
    pop            msysp.strtofmt.s u64 
    push           0          i64 
    pop            msysp.strtofmt.wset u8 
    jump           #4616      
#4617: 
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    pop            msysp.strtofmt.c i64 
    push           &msysp.strtofmt.s 
    incr                      u64 1
    push           msysp.strtofmt.c i64 
    switch         #4618      42 126
    opnd           #4619      
#4618: 
    switchlabel    #4620      
    switchlabel    #4621      
    switchlabel    #4622      
    switchlabel    #4619      
    switchlabel    #4623      
    switchlabel    #4619      
    switchlabel    #4619      
    switchlabel    #4619      
    switchlabel    #4619      
    switchlabel    #4619      
    switchlabel    #4619      
    switchlabel    #4619      
    switchlabel    #4619      
    switchlabel    #4619      
    switchlabel    #4619      
    switchlabel    #4619      
    switchlabel    #4619      
    switchlabel    #4619      
    switchlabel    #4619      
    switchlabel    #4619      
    switchlabel    #4619      
    switchlabel    #4619      
    switchlabel    #4619      
    switchlabel    #4624      
    switchlabel    #4625      
    switchlabel    #4626      
    switchlabel    #4627      
    switchlabel    #4628      
    switchlabel    #4629      
    switchlabel    #4630      
    switchlabel    #4631      
    switchlabel    #4619      
    switchlabel    #4632      
    switchlabel    #4619      
    switchlabel    #4619      
    switchlabel    #4633      
    switchlabel    #4619      
    switchlabel    #4634      
    switchlabel    #4635      
    switchlabel    #4636      
    switchlabel    #4619      
    switchlabel    #4637      
    switchlabel    #4638      
    switchlabel    #4619      
    switchlabel    #4639      
    switchlabel    #4640      
    switchlabel    #4641      
    switchlabel    #4619      
    switchlabel    #4642      
    switchlabel    #4619      
    switchlabel    #4619      
    switchlabel    #4619      
    switchlabel    #4619      
    switchlabel    #4622      
    switchlabel    #4619      
    switchlabel    #4643      
    switchlabel    #4625      
    switchlabel    #4626      
    switchlabel    #4627      
    switchlabel    #4628      
    switchlabel    #4629      
    switchlabel    #4630      
    switchlabel    #4631      
    switchlabel    #4619      
    switchlabel    #4632      
    switchlabel    #4619      
    switchlabel    #4619      
    switchlabel    #4633      
    switchlabel    #4619      
    switchlabel    #4634      
    switchlabel    #4635      
    switchlabel    #4636      
    switchlabel    #4619      
    switchlabel    #4637      
    switchlabel    #4638      
    switchlabel    #4619      
    switchlabel    #4639      
    switchlabel    #4640      
    switchlabel    #4641      
    switchlabel    #4619      
    switchlabel    #4642      
    switchlabel    #4619      
    switchlabel    #4619      
    switchlabel    #4619      
    switchlabel    #4644      
    endswitch                 
#4625: 
    push           2          i64 
    push           msysp.strtofmt.fmt u64 
    push           2          
    popptroff                 u8 1 0
    jump           #4645      
#4631: 
    push           16         i64 
    push           msysp.strtofmt.fmt u64 
    push           2          
    popptroff                 u8 1 0
    jump           #4645      
#4634: 
    push           8          i64 
    push           msysp.strtofmt.fmt u64 
    push           2          
    popptroff                 u8 1 0
    jump           #4645      
#4641: 
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    pop            msysp.strtofmt.c i64 
    push           msysp.strtofmt.c i64 
    jumpfalse      #4646      i64 
    push           msysp.strtofmt.c i64 
    switch         #4647      48 102
    opnd           #4648      
#4647: 
    switchlabel    #4649      
    switchlabel    #4649      
    switchlabel    #4649      
    switchlabel    #4649      
    switchlabel    #4649      
    switchlabel    #4649      
    switchlabel    #4649      
    switchlabel    #4649      
    switchlabel    #4649      
    switchlabel    #4649      
    switchlabel    #4648      
    switchlabel    #4648      
    switchlabel    #4648      
    switchlabel    #4648      
    switchlabel    #4648      
    switchlabel    #4648      
    switchlabel    #4648      
    switchlabel    #4650      
    switchlabel    #4650      
    switchlabel    #4650      
    switchlabel    #4650      
    switchlabel    #4650      
    switchlabel    #4650      
    switchlabel    #4648      
    switchlabel    #4648      
    switchlabel    #4648      
    switchlabel    #4648      
    switchlabel    #4648      
    switchlabel    #4648      
    switchlabel    #4648      
    switchlabel    #4648      
    switchlabel    #4648      
    switchlabel    #4648      
    switchlabel    #4648      
    switchlabel    #4648      
    switchlabel    #4648      
    switchlabel    #4648      
    switchlabel    #4648      
    switchlabel    #4648      
    switchlabel    #4648      
    switchlabel    #4648      
    switchlabel    #4648      
    switchlabel    #4648      
    switchlabel    #4648      
    switchlabel    #4648      
    switchlabel    #4648      
    switchlabel    #4648      
    switchlabel    #4648      
    switchlabel    #4648      
    switchlabel    #4651      
    switchlabel    #4651      
    switchlabel    #4651      
    switchlabel    #4651      
    switchlabel    #4651      
    switchlabel    #4651      
    endswitch                 
#4649: 
    push           msysp.strtofmt.c i64 
    push           48         i64 
    sub                       i64 
    pop            msysp.strtofmt.c i64 
    jump           #4652      
#4650: 
    push           msysp.strtofmt.c i64 
    push           65         i64 
    sub                       i64 
    push           10         i64 
    add                       i64 
    pop            msysp.strtofmt.c i64 
    jump           #4652      
#4651: 
    push           msysp.strtofmt.c i64 
    push           97         i64 
    sub                       i64 
    push           10         i64 
    add                       i64 
    pop            msysp.strtofmt.c i64 
    jump           #4652      
#4648: 
    push           10         i64 
    pop            msysp.strtofmt.c i64 
#4652: 
    push           msysp.strtofmt.c i64 
    push           msysp.strtofmt.fmt u64 
    push           2          
    popptroff                 u8 1 0
    push           &msysp.strtofmt.s 
    incr                      u64 1
#4646: 
    jump           #4645      
#4636: 
    push           34         u64 
    push           msysp.strtofmt.fmt u64 
    push           3          
    popptroff                 u8 1 0
    jump           #4645      
#4644: 
    push           126        u64 
    push           msysp.strtofmt.fmt u64 
    push           3          
    popptroff                 u8 1 0
    jump           #4645      
#4632: 
    setargs                   1 0
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    callfn         &toupper   i32 
    push           msysp.strtofmt.fmt u64 
    push           9          
    popptroff                 u8 1 0
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    jumpfalse      #4653      u64 
    push           &msysp.strtofmt.s 
    incr                      u64 1
#4653: 
    jump           #4645      
#4624: 
    push           65         u64 
    push           msysp.strtofmt.fmt u64 
    push           8          
    popptroff                 u8 1 0
    jump           #4645      
#4643: 
    push           97         u64 
    push           msysp.strtofmt.fmt u64 
    push           8          
    popptroff                 u8 1 0
    jump           #4645      
#4642: 
    push           48         u64 
    push           msysp.strtofmt.fmt u64 
    push           4          
    popptroff                 u8 1 0
    jump           #4645      
#4637: 
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    push           msysp.strtofmt.fmt u64 
    push           7          
    popptroff                 u8 1 0
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    jumpfalse      #4654      u64 
    push           &msysp.strtofmt.s 
    incr                      u64 1
#4654: 
    jump           #4645      
#4635: 
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    push           msysp.strtofmt.fmt u64 
    push           4          
    popptroff                 u8 1 0
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    jumpfalse      #4655      u64 
    push           &msysp.strtofmt.s 
    incr                      u64 1
#4655: 
    jump           #4645      
#4638: 
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    push           msysp.strtofmt.fmt u64 
    push           10         
    popptroff                 u8 1 0
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    jumpfalse      #4656      u64 
    push           &msysp.strtofmt.s 
    incr                      u64 1
#4656: 
    jump           #4645      
#4640: 
    push           87         u64 
    push           msysp.strtofmt.fmt u64 
    push           11         
    popptroff                 u8 1 0
    jump           #4645      
#4628: 
    push           101        u64 
    push           msysp.strtofmt.fmt u64 
    push           5          
    popptroff                 u8 1 0
    jump           #4645      
#4629: 
    push           102        u64 
    push           msysp.strtofmt.fmt u64 
    push           5          
    popptroff                 u8 1 0
    jump           #4645      
#4630: 
    push           103        u64 
    push           msysp.strtofmt.fmt u64 
    push           5          
    popptroff                 u8 1 0
    jump           #4645      
#4623: 
    push           1          i64 
    pop            msysp.strtofmt.wset u8 
    jump           #4645      
#4622: 
    push           msysp.strtofmt.c u64 
    push           msysp.strtofmt.fmt u64 
    push           7          
    popptroff                 u8 1 0
    jump           #4645      
#4621: 
    push           43         u64 
    push           msysp.strtofmt.fmt u64 
    push           6          
    popptroff                 u8 1 0
    jump           #4645      
#4627: 
    push           68         u64 
    push           msysp.strtofmt.fmt u64 
    push           12         
    popptroff                 u8 1 0
    jump           #4645      
#4626: 
    push           67         u64 
    push           msysp.strtofmt.fmt u64 
    push           12         
    popptroff                 u8 1 0
    jump           #4645      
#4633: 
    push           77         u64 
    push           msysp.strtofmt.fmt u64 
    push           13         
    popptroff                 u8 1 0
    jump           #4645      
#4639: 
    push           86         u64 
    push           msysp.strtofmt.fmt u64 
    push           14         
    popptroff                 u8 1 0
    jump           #4645      
#4620: 
    push           msysp.fmtparam i64 
    pop            msysp.strtofmt.n i64 
    jump           #4657      
    jump           #4645      
#4619: 
    push           msysp.strtofmt.c i64 
    push           48         i64 
    jumplt         #4658      i64 
    push           msysp.strtofmt.c i64 
    push           57         i64 
    jumpgt         #4658      i64 
    push           msysp.strtofmt.c i64 
    push           48         i64 
    sub                       i64 
    pop            msysp.strtofmt.n i64 
#4659: 
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    pop            msysp.strtofmt.c i64 
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    push           0          i64 
    jumpne         #4660      i64 
    jump           #4661      
#4660: 
    push           msysp.strtofmt.c i64 
    push           48         i64 
    jumplt         #4662      i64 
    push           msysp.strtofmt.c i64 
    push           57         i64 
    jumpgt         #4662      i64 
    push           &msysp.strtofmt.s 
    incr                      u64 1
    push           msysp.strtofmt.n i64 
    push           10         i64 
    mul                       i64 
    push           msysp.strtofmt.c i64 
    add                       i64 
    push           48         i64 
    sub                       i64 
    pop            msysp.strtofmt.n i64 
    jump           #4663      
#4662: 
    jump           #4661      
#4663: 
    jump           #4659      
#4661: 
!gotwidth::
#4657: 
    push           msysp.strtofmt.wset u8 
    jumptrue       #4664      i64 
    push           msysp.strtofmt.n i64 
    push           msysp.strtofmt.fmt u64 
    push           0          
    popptroff                 u8 1 0
    push           1          i64 
    pop            msysp.strtofmt.wset u8 
    jump           #4665      
#4664: 
    push           msysp.strtofmt.n i64 
    push           msysp.strtofmt.fmt u64 
    push           1          
    popptroff                 i8 1 0
#4665: 
#4658: 
#4645: 
#4616: 
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    jumptrue       #4617      u64 
#4666: 
#4614: 
    retproc                   
End


Proc msysp.domultichar: i64
    param          msysp.domultichar.p u64 
    param          msysp.domultichar.n i64 
    param          msysp.domultichar.dest u64 
    param          msysp.domultichar.fmt u64 
    local          msysp.domultichar.str block:20 
    local          msysp.domultichar.q u64 
    local          msysp.domultichar.i i64 
    local          msysp.domultichar.nchars i64 
    local          msysp.domultichar.av_1 i64 
    procentry                 
    push           &msysp.domultichar.str 
    pop            msysp.domultichar.q u64 
    push           msysp.domultichar.n i64 
    pop            msysp.domultichar.nchars i64 
#4668: 
    push           msysp.domultichar.n i64 
    pop            msysp.domultichar.av_1 i64 
    push           msysp.domultichar.av_1 i64 
    push           0          i64 
    jumple         #4669      i64 
#4670: 
    push           msysp.domultichar.p u64 
    pushptr                   u8 
    push           0          i64 
    jumpne         #4671      i64 
    jump           #4669      
#4671: 
    push           msysp.domultichar.p u64 
    pushptr                   u8 
    push           msysp.domultichar.q u64 
    popptr                    u8 
    push           &msysp.domultichar.q 
    incr                      u64 1
    push           &msysp.domultichar.p 
    incr                      u64 1
#4672: 
    to             #4670      
    opnd           msysp.domultichar.av_1 
#4669: 
    push           0          u64 
    push           msysp.domultichar.q u64 
    popptr                    u8 
    setargs                   4 0
    push           msysp.domultichar.fmt u64 
    setargs                   1 0
    push           &msysp.domultichar.str 
    callfn         &strlen    i64 
    push           msysp.domultichar.dest u64 
    push           &msysp.domultichar.str 
    callfn         &msysp.expandstr i64 
    setret                    i64 
    jump           #4673      
#4673: 
    retfn                     i64 
End


Proc msysp.expandstr: i64
    param          msysp.expandstr.s u64 
    param          msysp.expandstr.t u64 
    param          msysp.expandstr.n i64 
    param          msysp.expandstr.fmt u64 
    local          msysp.expandstr.i i64 
    local          msysp.expandstr.w i64 
    local          msysp.expandstr.m i64 
    local          msysp.expandstr.av_1 i64 
    local          msysp.expandstr.av_2 i64 
    local          msysp.expandstr.av_3 i64 
    local          msysp.expandstr.av_4 i64 
    local          msysp.expandstr.av_5 i64 
    procentry                 
    push           msysp.expandstr.fmt u64 
    pushptr                   u8 
    pop            msysp.expandstr.w i64 
    push           msysp.expandstr.w i64 
    push           0          i64 
    jumpeq         #4675      i64 
    push           msysp.expandstr.w i64 
    push           msysp.expandstr.n i64 
    jumpgt         #4676      i64 
#4675: 
    setargs                   3 0
    push           msysp.expandstr.n u64 
    push           msysp.expandstr.s u64 
    push           msysp.expandstr.t u64 
    callproc       &strncpy   
    push           0          u64 
    push           msysp.expandstr.t u64 
    push           msysp.expandstr.n i64 
    popptroff                 u8 1 0
    push           msysp.expandstr.n i64 
    setret                    i64 
    jump           #4677      
#4676: 
    push           msysp.expandstr.fmt u64 
    push           9          
    pushptroff                u8 1 0
    push           76         u64 
    jumpne         #4678      u64 
    setargs                   3 0
    push           msysp.expandstr.n u64 
    push           msysp.expandstr.s u64 
    push           msysp.expandstr.t u64 
    callproc       &strncpy   
    push           &msysp.expandstr.t 
    push           msysp.expandstr.n i64 
    addrefoffto               u64 1 0
#4679: 
    push           1          i64 
    pop            msysp.expandstr.i i64 
    push           msysp.expandstr.w i64 
    push           msysp.expandstr.n i64 
    sub                       i64 
    pop            msysp.expandstr.av_1 i64 
    push           msysp.expandstr.av_1 i64 
    push           1          i64 
    jumplt         #4680      i64 
#4681: 
    push           msysp.expandstr.fmt u64 
    push           4          
    pushptroff                u8 1 0
    push           msysp.expandstr.t u64 
    popptr                    u8 
    push           &msysp.expandstr.t 
    incr                      u64 1
#4682: 
    forup          #4681      i64 1
    opnd           msysp.expandstr.i 
    opnd           msysp.expandstr.av_1 
#4680: 
    push           0          u64 
    push           msysp.expandstr.t u64 
    popptr                    u8 
    jump           #4683      
#4678: 
    push           msysp.expandstr.fmt u64 
    push           9          
    pushptroff                u8 1 0
    push           82         u64 
    jumpne         #4684      u64 
    push           msysp.expandstr.fmt u64 
    push           4          
    pushptroff                u8 1 0
    push           48         u64 
    jumpne         #4685      u64 
    push           msysp.expandstr.fmt u64 
    push           2          
    pushptroff                u8 1 0
    jumpfalse      #4685      i64 
    push           msysp.expandstr.s u64 
    pushptr                   u8 
    push           45         u64 
    jumpeq         #4686      u64 
    push           msysp.expandstr.s u64 
    pushptr                   u8 
    push           43         u64 
    jumpne         #4685      u64 
#4686: 
    push           msysp.expandstr.s u64 
    pushptr                   u8 
    push           msysp.expandstr.t u64 
    popptr                    u8 
    push           &msysp.expandstr.t 
    incr                      u64 1
#4687: 
    push           msysp.expandstr.w i64 
    push           msysp.expandstr.n i64 
    sub                       i64 
    pop            msysp.expandstr.av_2 i64 
    push           msysp.expandstr.av_2 i64 
    push           0          i64 
    jumple         #4688      i64 
#4689: 
    push           msysp.expandstr.fmt u64 
    push           4          
    pushptroff                u8 1 0
    push           msysp.expandstr.t u64 
    popptr                    u8 
    push           &msysp.expandstr.t 
    incr                      u64 1
#4690: 
    to             #4689      
    opnd           msysp.expandstr.av_2 
#4688: 
    setargs                   3 0
    push           msysp.expandstr.n i64 
    push           1          i64 
    sub                       u64 
    push           msysp.expandstr.s u64 
    push           1          i64 
    addrefoff                 u64 1 0
    push           msysp.expandstr.t u64 
    callproc       &strncpy   
    push           0          u64 
    push           msysp.expandstr.t u64 
    push           msysp.expandstr.n i64 
    popptroff                 u8 1 -1
    jump           #4691      
#4685: 
#4692: 
    push           msysp.expandstr.w i64 
    push           msysp.expandstr.n i64 
    sub                       i64 
    pop            msysp.expandstr.av_3 i64 
    push           msysp.expandstr.av_3 i64 
    push           0          i64 
    jumple         #4693      i64 
#4694: 
    push           msysp.expandstr.fmt u64 
    push           4          
    pushptroff                u8 1 0
    push           msysp.expandstr.t u64 
    popptr                    u8 
    push           &msysp.expandstr.t 
    incr                      u64 1
#4695: 
    to             #4694      
    opnd           msysp.expandstr.av_3 
#4693: 
    setargs                   3 0
    push           msysp.expandstr.n u64 
    push           msysp.expandstr.s u64 
    push           msysp.expandstr.t u64 
    callproc       &strncpy   
    push           0          u64 
    push           msysp.expandstr.t u64 
    push           msysp.expandstr.n i64 
    popptroff                 u8 1 0
#4691: 
    jump           #4683      
#4684: 
    push           msysp.expandstr.w i64 
    push           msysp.expandstr.n i64 
    sub                       i64 
    push           1          i64 
    add                       i64 
    push           2          i64 
    idiv                      i64 
    pop            msysp.expandstr.m i64 
#4696: 
    push           msysp.expandstr.m i64 
    pop            msysp.expandstr.av_4 i64 
    push           msysp.expandstr.av_4 i64 
    push           0          i64 
    jumple         #4697      i64 
#4698: 
    push           msysp.expandstr.fmt u64 
    push           4          
    pushptroff                u8 1 0
    push           msysp.expandstr.t u64 
    popptr                    u8 
    push           &msysp.expandstr.t 
    incr                      u64 1
#4699: 
    to             #4698      
    opnd           msysp.expandstr.av_4 
#4697: 
    setargs                   3 0
    push           msysp.expandstr.n u64 
    push           msysp.expandstr.s u64 
    push           msysp.expandstr.t u64 
    callproc       &strncpy   
    push           &msysp.expandstr.t 
    push           msysp.expandstr.n i64 
    addrefoffto               u64 1 0
#4700: 
    push           msysp.expandstr.w i64 
    push           msysp.expandstr.n i64 
    sub                       i64 
    push           msysp.expandstr.m i64 
    sub                       i64 
    pop            msysp.expandstr.av_5 i64 
    push           msysp.expandstr.av_5 i64 
    push           0          i64 
    jumple         #4701      i64 
#4702: 
    push           msysp.expandstr.fmt u64 
    push           4          
    pushptroff                u8 1 0
    push           msysp.expandstr.t u64 
    popptr                    u8 
    push           &msysp.expandstr.t 
    incr                      u64 1
#4703: 
    to             #4702      
    opnd           msysp.expandstr.av_5 
#4701: 
    push           0          u64 
    push           msysp.expandstr.t u64 
    popptr                    u8 
#4683: 
    push           msysp.expandstr.w i64 
    setret                    i64 
    jump           #4677      
#4677: 
    retfn                     i64 
End


Proc msysp.u64tostr: i64
    param          msysp.u64tostr.aa u64 
    param          msysp.u64tostr.s u64 
    param          msysp.u64tostr.base u64 
    param          msysp.u64tostr.sep i64 
    local          msysp.u64tostr.t block:360 
    local          msysp.u64tostr.dd u64 
    local          msysp.u64tostr.i i64 
    local          msysp.u64tostr.j i64 
    local          msysp.u64tostr.k i64 
    local          msysp.u64tostr.g i64 
    local          msysp.u64tostr.cc i64 
    local          msysp.u64tostr.dummy i64 
    local          msysp.u64tostr.s0 u64 
    procentry                 
    push           0          i64 
    pop            msysp.u64tostr.i i64 
    push           0          i64 
    pop            msysp.u64tostr.k i64 
    startmult                 
    push           msysp.u64tostr.base i64 
    push           10         i64 
    jumpne         #4705      i64 
    push           3          i64 
    resetmult                 
    jump           #4706      
#4705: 
    push           4          i64 
    endmult                   
#4706: 
    pop            msysp.u64tostr.g i64 
#4707: 
    push           msysp.u64tostr.aa u64 
    push           msysp.u64tostr.base u64 
    irem                      u64 
    pop            msysp.u64tostr.dd u64 
    push           msysp.u64tostr.aa u64 
    push           msysp.u64tostr.base u64 
    idiv                      u64 
    pop            msysp.u64tostr.aa u64 
    push           &msysp.digits 
    push           msysp.u64tostr.dd i64 
    pushptroff                u8 1 0
    push           &msysp.u64tostr.t 
    push           &msysp.u64tostr.i 
    incrload                  i64 1
    popptroff                 u8 1 0
    push           &msysp.u64tostr.k 
    incr                      i64 1
    push           msysp.u64tostr.sep i64 
    jumpfalse      #4708      i64 
    push           msysp.u64tostr.aa i64 
    push           0          i64 
    jumpeq         #4708      i64 
    push           msysp.u64tostr.k i64 
    push           msysp.u64tostr.g i64 
    jumpne         #4708      i64 
    push           msysp.u64tostr.sep u64 
    push           &msysp.u64tostr.t 
    push           &msysp.u64tostr.i 
    incrload                  i64 1
    popptroff                 u8 1 0
    push           0          i64 
    pop            msysp.u64tostr.k i64 
#4708: 
#4709: 
    push           msysp.u64tostr.aa i64 
    push           0          i64 
    jumpne         #4707      i64 
#4710: 
    push           msysp.u64tostr.i i64 
    pop            msysp.u64tostr.j i64 
    push           msysp.u64tostr.s u64 
    pop            msysp.u64tostr.s0 u64 
    jump           #4711      
#4712: 
    push           &msysp.u64tostr.t 
    push           &msysp.u64tostr.i 
    loaddecr                  i64 1
    pushptroff                u8 1 0
    push           msysp.u64tostr.s u64 
    popptr                    u8 
    push           &msysp.u64tostr.s 
    incr                      u64 1
#4711: 
    push           msysp.u64tostr.i i64 
    jumptrue       #4712      i64 
#4713: 
    push           0          u64 
    push           msysp.u64tostr.s u64 
    popptr                    u8 
    push           msysp.u64tostr.j i64 
    setret                    i64 
    jump           #4714      
#4714: 
    retfn                     i64 
End


Proc msysp.u128tostr: i64
    param          msysp.u128tostr.aa u128 
    param          msysp.u128tostr.s u64 
    param          msysp.u128tostr.base u64 
    param          msysp.u128tostr.sep i64 
    local          msysp.u128tostr.t block:160 
    local          msysp.u128tostr.dd u64 
    local          msysp.u128tostr.i i64 
    local          msysp.u128tostr.j i64 
    local          msysp.u128tostr.k i64 
    local          msysp.u128tostr.g i64 
    local          msysp.u128tostr.dummy i64 
    local          msysp.u128tostr.s0 u64 
    procentry                 
    push           0          i64 
    pop            msysp.u128tostr.i i64 
    push           0          i64 
    pop            msysp.u128tostr.k i64 
    startmult                 
    push           msysp.u128tostr.base i64 
    push           10         i64 
    jumpne         #4716      i64 
    push           3          i64 
    resetmult                 
    jump           #4717      
#4716: 
    push           4          i64 
    endmult                   
#4717: 
    pop            msysp.u128tostr.g i64 
#4718: 
    setargs                   4 0
    push           &msysp.u128tostr.dd 
    push           msysp.u128tostr.base u64 
    push           msysp.u128tostr.aa u128 
    callfn         &msysp.xdivrem128 u128 
    pop            msysp.u128tostr.aa u128 
    push           &msysp.digits 
    push           msysp.u128tostr.dd i64 
    pushptroff                u8 1 0
    push           &msysp.u128tostr.t 
    push           &msysp.u128tostr.i 
    incrload                  i64 1
    popptroff                 u8 1 0
    push           &msysp.u128tostr.k 
    incr                      i64 1
    push           msysp.u128tostr.sep i64 
    jumpfalse      #4719      i64 
    push           msysp.u128tostr.aa u128 
    push           0          i64 
    widenw                    u128 i64 
    jumpeq         #4719      u128 
    push           msysp.u128tostr.k i64 
    push           msysp.u128tostr.g i64 
    jumpne         #4719      i64 
    push           msysp.u128tostr.sep u64 
    push           &msysp.u128tostr.t 
    push           &msysp.u128tostr.i 
    incrload                  i64 1
    popptroff                 u8 1 0
    push           0          i64 
    pop            msysp.u128tostr.k i64 
#4719: 
#4720: 
    push           msysp.u128tostr.aa u128 
    push           0          i64 
    widenw                    u128 i64 
    jumpne         #4718      u128 
#4721: 
    push           msysp.u128tostr.i i64 
    pop            msysp.u128tostr.j i64 
    push           msysp.u128tostr.s u64 
    pop            msysp.u128tostr.s0 u64 
    jump           #4722      
#4723: 
    push           &msysp.u128tostr.t 
    push           &msysp.u128tostr.i 
    loaddecr                  i64 1
    pushptroff                u8 1 0
    push           msysp.u128tostr.s u64 
    popptr                    u8 
    push           &msysp.u128tostr.s 
    incr                      u64 1
#4722: 
    push           msysp.u128tostr.i i64 
    jumptrue       #4723      i64 
#4724: 
    push           0          u64 
    push           msysp.u128tostr.s u64 
    popptr                    u8 
    push           msysp.u128tostr.j i64 
    setret                    i64 
    jump           #4725      
#4725: 
    retfn                     i64 
End


Proc msysp.xdivrem128: u128
    param          msysp.xdivrem128.a u128 
    param          msysp.xdivrem128.b u64 
    param          msysp.xdivrem128.remainder u64 
    local          msysp.xdivrem128.d u128 
    local          msysp.xdivrem128.e u128 
    local          msysp.xdivrem128.r u128 
    local          msysp.xdivrem128.rlow u64 
    procentry                 
    push           msysp.xdivrem128.a u128 
    push           msysp.xdivrem128.b u64 
    widenw                    u128 u64 
    idiv                      u128 
    pop            msysp.xdivrem128.d u128 
    push           msysp.xdivrem128.a u128 
    push           msysp.xdivrem128.d u128 
    push           msysp.xdivrem128.b u64 
    widenw                    u128 u64 
    mul                       u128 
    sub                       u128 
    pop            msysp.xdivrem128.r u128 
    push           msysp.xdivrem128.r u128 
    softtruncw                u64 u128 
    pop            msysp.xdivrem128.rlow u64 
    push           msysp.xdivrem128.d u128 
    setretmult                u128 2
    jump           #4727      
#4727: 
    retfn                     u128 
End


Proc msysp.i64tostrfmt: i64
    param          msysp.i64tostrfmt.aa i64 
    param          msysp.i64tostrfmt.s u64 
    param          msysp.i64tostrfmt.fmt u64 
    local          msysp.i64tostrfmt.str block:360 
    local          msysp.i64tostrfmt.i i64 
    local          msysp.i64tostrfmt.j i64 
    local          msysp.i64tostrfmt.k i64 
    local          msysp.i64tostrfmt.n i64 
    local          msysp.i64tostrfmt.w i64 
    local          msysp.i64tostrfmt.usigned i64 
    procentry                 
    push           0          i64 
    pop            msysp.i64tostrfmt.usigned i64 
    push           msysp.i64tostrfmt.fmt u64 
    push           11         
    pushptroff                u8 1 0
    jumpfalse      #4729      u64 
    push           1          i64 
    pop            msysp.i64tostrfmt.usigned i64 
#4729: 
    push           msysp.i64tostrfmt.aa i64 
    push           -9223372036854775808 i64 
    jumpne         #4730      i64 
    push           msysp.i64tostrfmt.usigned i64 
    jumptrue       #4730      i64 
    push           45         u64 
    push           &msysp.i64tostrfmt.str 
    push           0          i64 
    popptroff                 u8 1 0
    setargs                   3 0
    push           msysp.i64tostrfmt.fmt u64 
    push           7          
    pushptroff                u8 1 0
    push           msysp.i64tostrfmt.fmt u64 
    push           2          
    pushptroff                u8 1 0
    push           &msysp.i64tostrfmt.str 
    push           1          
    addrefoff                 u8 1 0
    callfn         &msysp.i64mintostr i64 
    push           1          i64 
    add                       i64 
    pop            msysp.i64tostrfmt.n i64 
    jump           #4731      
#4730: 
    push           msysp.i64tostrfmt.usigned i64 
    jumptrue       #4732      i64 
    push           msysp.i64tostrfmt.aa i64 
    push           0          i64 
    jumplt         #4733      i64 
#4732: 
    push           msysp.i64tostrfmt.fmt u64 
    push           6          
    pushptroff                u8 1 0
    jumpfalse      #4734      u64 
#4733: 
    push           msysp.i64tostrfmt.aa i64 
    push           0          i64 
    jumpge         #4735      i64 
    push           msysp.i64tostrfmt.aa i64 
    neg                       i64 
    pop            msysp.i64tostrfmt.aa i64 
    push           45         u64 
    push           &msysp.i64tostrfmt.str 
    push           0          i64 
    popptroff                 u8 1 0
    jump           #4736      
#4735: 
    push           43         u64 
    push           &msysp.i64tostrfmt.str 
    push           0          i64 
    popptroff                 u8 1 0
#4736: 
    setargs                   4 0
    push           msysp.i64tostrfmt.fmt u64 
    push           7          
    pushptroff                u8 1 0
    push           msysp.i64tostrfmt.fmt u64 
    push           2          
    pushptroff                u8 1 0
    push           &msysp.i64tostrfmt.str 
    push           1          
    addrefoff                 u8 1 0
    push           msysp.i64tostrfmt.aa u64 
    callfn         &msysp.u64tostr i64 
    push           1          i64 
    add                       i64 
    pop            msysp.i64tostrfmt.n i64 
    jump           #4737      
#4734: 
    setargs                   4 0
    push           msysp.i64tostrfmt.fmt u64 
    push           7          
    pushptroff                u8 1 0
    push           msysp.i64tostrfmt.fmt u64 
    push           2          
    pushptroff                u8 1 0
    push           &msysp.i64tostrfmt.str 
    push           msysp.i64tostrfmt.aa u64 
    callfn         &msysp.u64tostr i64 
    pop            msysp.i64tostrfmt.n i64 
#4737: 
#4731: 
    push           msysp.i64tostrfmt.fmt u64 
    push           10         
    pushptroff                u8 1 0
    jumpfalse      #4738      u64 
    push           msysp.i64tostrfmt.fmt u64 
    push           10         
    pushptroff                u8 1 0
    push           &msysp.i64tostrfmt.str 
    push           msysp.i64tostrfmt.n i64 
    popptroff                 u8 1 0
    push           0          u64 
    push           &msysp.i64tostrfmt.str 
    push           &msysp.i64tostrfmt.n 
    incrload                  i64 1
    popptroff                 u8 1 0
#4738: 
    push           msysp.i64tostrfmt.fmt u64 
    push           2          
    pushptroff                u8 1 0
    push           10         i64 
    jumpgt         #4739      i64 
    push           msysp.i64tostrfmt.fmt u64 
    push           10         
    pushptroff                u8 1 0
    jumpfalse      #4740      u64 
#4739: 
    push           msysp.i64tostrfmt.fmt u64 
    push           8          
    pushptroff                u8 1 0
    push           97         u64 
    jumpne         #4740      u64 
    setargs                   1 0
    push           &msysp.i64tostrfmt.str 
    callproc       &mlibp.convlcstring 
#4740: 
    setargs                   4 0
    push           msysp.i64tostrfmt.fmt u64 
    push           msysp.i64tostrfmt.n i64 
    push           msysp.i64tostrfmt.s u64 
    push           &msysp.i64tostrfmt.str 
    callfn         &msysp.expandstr i64 
    setret                    i64 
    jump           #4741      
#4741: 
    retfn                     i64 
End


Proc msysp.u64tostrfmt: i64
    param          msysp.u64tostrfmt.aa i64 
    param          msysp.u64tostrfmt.s u64 
    param          msysp.u64tostrfmt.fmt u64 
    local          msysp.u64tostrfmt.str block:360 
    local          msysp.u64tostrfmt.i i64 
    local          msysp.u64tostrfmt.j i64 
    local          msysp.u64tostrfmt.k i64 
    local          msysp.u64tostrfmt.n i64 
    local          msysp.u64tostrfmt.w i64 
    procentry                 
    setargs                   4 0
    push           msysp.u64tostrfmt.fmt u64 
    push           7          
    pushptroff                u8 1 0
    push           msysp.u64tostrfmt.fmt u64 
    push           2          
    pushptroff                u8 1 0
    push           &msysp.u64tostrfmt.str 
    push           msysp.u64tostrfmt.aa u64 
    callfn         &msysp.u64tostr i64 
    pop            msysp.u64tostrfmt.n i64 
    push           msysp.u64tostrfmt.fmt u64 
    push           10         
    pushptroff                u8 1 0
    jumpfalse      #4743      u64 
    push           msysp.u64tostrfmt.fmt u64 
    push           10         
    pushptroff                u8 1 0
    push           &msysp.u64tostrfmt.str 
    push           msysp.u64tostrfmt.n i64 
    popptroff                 u8 1 0
    push           0          u64 
    push           &msysp.u64tostrfmt.str 
    push           &msysp.u64tostrfmt.n 
    incrload                  i64 1
    popptroff                 u8 1 0
#4743: 
    push           msysp.u64tostrfmt.fmt u64 
    push           2          
    pushptroff                u8 1 0
    push           10         i64 
    jumpgt         #4744      i64 
    push           msysp.u64tostrfmt.fmt u64 
    push           10         
    pushptroff                u8 1 0
    jumpfalse      #4745      u64 
    push           msysp.u64tostrfmt.fmt u64 
    push           8          
    pushptroff                u8 1 0
    push           97         u64 
    jumpne         #4745      u64 
#4744: 
#4745: 
    setargs                   4 0
    push           msysp.u64tostrfmt.fmt u64 
    push           msysp.u64tostrfmt.n i64 
    push           msysp.u64tostrfmt.s u64 
    push           &msysp.u64tostrfmt.str 
    callfn         &msysp.expandstr i64 
    setret                    i64 
    jump           #4746      
#4746: 
    retfn                     i64 
End


Proc msysp.u128tostrfmt: i64
    param          msysp.u128tostrfmt.aa i128 
    param          msysp.u128tostrfmt.s u64 
    param          msysp.u128tostrfmt.fmt u64 
    local          msysp.u128tostrfmt.str block:360 
    local          msysp.u128tostrfmt.i i64 
    local          msysp.u128tostrfmt.j i64 
    local          msysp.u128tostrfmt.k i64 
    local          msysp.u128tostrfmt.n i64 
    local          msysp.u128tostrfmt.w i64 
    procentry                 
    setargs                   5 0
    push           msysp.u128tostrfmt.fmt u64 
    push           7          
    pushptroff                u8 1 0
    push           msysp.u128tostrfmt.fmt u64 
    push           2          
    pushptroff                u8 1 0
    push           &msysp.u128tostrfmt.str 
    push           msysp.u128tostrfmt.aa u128 
    callfn         &msysp.u128tostr i64 
    pop            msysp.u128tostrfmt.n i64 
    push           msysp.u128tostrfmt.fmt u64 
    push           10         
    pushptroff                u8 1 0
    jumpfalse      #4748      u64 
    push           msysp.u128tostrfmt.fmt u64 
    push           10         
    pushptroff                u8 1 0
    push           &msysp.u128tostrfmt.str 
    push           msysp.u128tostrfmt.n i64 
    popptroff                 u8 1 0
    push           0          u64 
    push           &msysp.u128tostrfmt.str 
    push           &msysp.u128tostrfmt.n 
    incrload                  i64 1
    popptroff                 u8 1 0
#4748: 
    push           msysp.u128tostrfmt.fmt u64 
    push           2          
    pushptroff                u8 1 0
    push           10         i64 
    jumpgt         #4749      i64 
    push           msysp.u128tostrfmt.fmt u64 
    push           10         
    pushptroff                u8 1 0
    jumpfalse      #4750      u64 
    push           msysp.u128tostrfmt.fmt u64 
    push           8          
    pushptroff                u8 1 0
    push           97         u64 
    jumpne         #4750      u64 
#4749: 
    setargs                   1 0
    push           &msysp.u128tostrfmt.str 
    callproc       &mlibp.convlcstring 
#4750: 
    setargs                   4 0
    push           msysp.u128tostrfmt.fmt u64 
    push           msysp.u128tostrfmt.n i64 
    push           msysp.u128tostrfmt.s u64 
    push           &msysp.u128tostrfmt.str 
    callfn         &msysp.expandstr i64 
    setret                    i64 
    jump           #4751      
#4751: 
    retfn                     i64 
End


Proc msysp.i64mintostr: i64
    param          msysp.i64mintostr.s u64 
    param          msysp.i64mintostr.base i64 
    param          msysp.i64mintostr.sep i64 
    local          msysp.i64mintostr.t block:360 
    local          msysp.i64mintostr.i i64 
    local          msysp.i64mintostr.j i64 
    local          msysp.i64mintostr.k i64 
    local          msysp.i64mintostr.g i64 
    local          msysp.i64mintostr.neg i64 
    procentry                 
    push           msysp.i64mintostr.base i64 
    switch         #4753      2 16
    opnd           #4754      
#4753: 
    switchlabel    #4755      
    switchlabel    #4754      
    switchlabel    #4754      
    switchlabel    #4754      
    switchlabel    #4754      
    switchlabel    #4754      
    switchlabel    #4754      
    switchlabel    #4754      
    switchlabel    #4756      
    switchlabel    #4754      
    switchlabel    #4754      
    switchlabel    #4754      
    switchlabel    #4754      
    switchlabel    #4754      
    switchlabel    #4757      
    endswitch                 
#4756: 
    setargs                   2 0
    push           "9223372036854775808" u64 
    push           &msysp.i64mintostr.t 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcpy    
    push           3          i64 
    pop            msysp.i64mintostr.j i64 
    jump           #4758      
#4757: 
    setargs                   2 0
    push           "8000000000000000" u64 
    push           &msysp.i64mintostr.t 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcpy    
    push           1          i64 
    pop            msysp.i64mintostr.j i64 
    jump           #4758      
#4755: 
    setargs                   2 0
    push           "1000000000000000000000000000000000000000000000000000000000000000" u64 
    push           &msysp.i64mintostr.t 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcpy    
    push           7          i64 
    pop            msysp.i64mintostr.j i64 
    jump           #4758      
#4754: 
    setargs                   2 0
    push           "<mindint>" u64 
    push           &msysp.i64mintostr.t 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcpy    
#4758: 
    setargs                   1 0
    push           &msysp.i64mintostr.t 
    push           0          
    addrefoff                 u8 1 0
    callfn         &strlen    i64 
    pop            msysp.i64mintostr.i i64 
    push           &msysp.i64mintostr.s 
    push           msysp.i64mintostr.i i64 
    addrefoffto               u64 1 0
    push           msysp.i64mintostr.sep i64 
    jumpfalse      #4759      i64 
    push           &msysp.i64mintostr.s 
    push           msysp.i64mintostr.j i64 
    addrefoffto               u64 1 0
#4759: 
    push           0          u64 
    push           msysp.i64mintostr.s u64 
    popptr                    u8 
    push           0          i64 
    pop            msysp.i64mintostr.k i64 
    startmult                 
    push           msysp.i64mintostr.base i64 
    push           10         i64 
    jumpne         #4760      i64 
    push           3          i64 
    resetmult                 
    jump           #4761      
#4760: 
    push           4          i64 
    endmult                   
#4761: 
    pop            msysp.i64mintostr.g i64 
    jump           #4762      
#4763: 
    push           &msysp.i64mintostr.s 
    decr                      u64 1
    push           &msysp.i64mintostr.t 
    push           &msysp.i64mintostr.i 
    loaddecr                  i64 1
    pushptroff                u8 1 -1
    push           msysp.i64mintostr.s u64 
    popptr                    u8 
    push           msysp.i64mintostr.sep i64 
    jumpfalse      #4764      i64 
    push           msysp.i64mintostr.i i64 
    jumpfalse      #4764      i64 
    push           &msysp.i64mintostr.k 
    incrload                  i64 1
    push           msysp.i64mintostr.g i64 
    jumpne         #4764      i64 
    push           &msysp.i64mintostr.s 
    decr                      u64 1
    push           msysp.i64mintostr.sep u64 
    push           msysp.i64mintostr.s u64 
    popptr                    u8 
    push           0          i64 
    pop            msysp.i64mintostr.k i64 
#4764: 
#4762: 
    push           msysp.i64mintostr.i i64 
    jumptrue       #4763      i64 
#4765: 
    setargs                   1 0
    push           msysp.i64mintostr.s u64 
    callfn         &strlen    i64 
    setret                    i64 
    jump           #4766      
#4766: 
    retfn                     i64 
End


Proc msysp.strtostrfmt: i64
    param          msysp.strtostrfmt.s u64 
    param          msysp.strtostrfmt.t u64 
    param          msysp.strtostrfmt.n i64 
    param          msysp.strtostrfmt.fmt u64 
    local          msysp.strtostrfmt.u u64 
    local          msysp.strtostrfmt.v u64 
    local          msysp.strtostrfmt.str block:256 
    local          msysp.strtostrfmt.w i64 
    local          msysp.strtostrfmt.nheap i64 
    procentry                 
    push           0          i64 
    pop            msysp.strtostrfmt.nheap i64 
    push           msysp.strtostrfmt.fmt u64 
    push           3          
    pushptroff                u8 1 0
    jumptrue       #4768      u64 
    push           msysp.strtostrfmt.fmt u64 
    push           8          
    pushptroff                u8 1 0
    jumpfalse      #4769      u64 
#4768: 
    push           msysp.strtostrfmt.n i64 
    push           256        i64 
    jumpge         #4770      i64 
    push           &msysp.strtostrfmt.str 
    pop            msysp.strtostrfmt.u u64 
    jump           #4771      
#4770: 
    push           msysp.strtostrfmt.n i64 
    push           3          i64 
    add                       i64 
    pop            msysp.strtostrfmt.nheap i64 
    setargs                   1 0
    push           msysp.strtostrfmt.nheap i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            msysp.strtostrfmt.u u64 
#4771: 
    push           msysp.strtostrfmt.fmt u64 
    push           3          
    pushptroff                u8 1 0
    jumpfalse      #4772      u64 
    push           msysp.strtostrfmt.u u64 
    pop            msysp.strtostrfmt.v u64 
    push           msysp.strtostrfmt.fmt u64 
    push           3          
    pushptroff                u8 1 0
    push           msysp.strtostrfmt.v u64 
    popptr                    u8 
    push           &msysp.strtostrfmt.v 
    incr                      u64 1
    push           msysp.strtostrfmt.n i64 
    jumpfalse      #4773      i64 
    setargs                   2 0
    push           msysp.strtostrfmt.s u64 
    push           msysp.strtostrfmt.v u64 
    callproc       &strcpy    
    push           &msysp.strtostrfmt.v 
    push           msysp.strtostrfmt.n i64 
    addrefoffto               u64 1 0
#4773: 
    push           msysp.strtostrfmt.fmt u64 
    push           3          
    pushptroff                u8 1 0
    push           msysp.strtostrfmt.v u64 
    popptr                    u8 
    push           &msysp.strtostrfmt.v 
    incr                      u64 1
    push           0          u64 
    push           msysp.strtostrfmt.v u64 
    popptr                    u8 
    push           &msysp.strtostrfmt.n 
    push           2          i64 
    addto                     i64 
    jump           #4774      
#4772: 
    setargs                   3 0
    push           msysp.strtostrfmt.n u64 
    push           msysp.strtostrfmt.s u64 
    push           msysp.strtostrfmt.u u64 
    callproc       &memcpy    
#4774: 
    push           msysp.strtostrfmt.fmt u64 
    push           8          
    pushptroff                u8 1 0
    switch         #4775      65 97
    opnd           #4776      
#4775: 
    switchlabel    #4777      
    switchlabel    #4776      
    switchlabel    #4776      
    switchlabel    #4776      
    switchlabel    #4776      
    switchlabel    #4776      
    switchlabel    #4776      
    switchlabel    #4776      
    switchlabel    #4776      
    switchlabel    #4776      
    switchlabel    #4776      
    switchlabel    #4776      
    switchlabel    #4776      
    switchlabel    #4776      
    switchlabel    #4776      
    switchlabel    #4776      
    switchlabel    #4776      
    switchlabel    #4776      
    switchlabel    #4776      
    switchlabel    #4776      
    switchlabel    #4776      
    switchlabel    #4776      
    switchlabel    #4776      
    switchlabel    #4776      
    switchlabel    #4776      
    switchlabel    #4776      
    switchlabel    #4776      
    switchlabel    #4776      
    switchlabel    #4776      
    switchlabel    #4776      
    switchlabel    #4776      
    switchlabel    #4776      
    switchlabel    #4778      
    endswitch                 
#4778: 
    setargs                   1 0
    push           msysp.strtostrfmt.u u64 
    callproc       &mlibp.convlcstring 
    jump           #4779      
#4777: 
    setargs                   1 0
    push           msysp.strtostrfmt.u u64 
    callproc       &mlibp.convucstring 
    jump           #4779      
#4776: 
#4779: 
    push           msysp.strtostrfmt.u u64 
    pop            msysp.strtostrfmt.s u64 
#4769: 
    push           msysp.strtostrfmt.fmt u64 
    pushptr                   u8 
    pop            msysp.strtostrfmt.w i64 
    push           msysp.strtostrfmt.w i64 
    push           msysp.strtostrfmt.n i64 
    jumple         #4780      i64 
    setargs                   4 0
    push           msysp.strtostrfmt.fmt u64 
    push           msysp.strtostrfmt.n i64 
    push           msysp.strtostrfmt.t u64 
    push           msysp.strtostrfmt.s u64 
    callfn         &msysp.expandstr i64 
    pop            msysp.strtostrfmt.n i64 
    jump           #4781      
#4780: 
    setargs                   3 0
    push           msysp.strtostrfmt.n u64 
    push           msysp.strtostrfmt.s u64 
    push           msysp.strtostrfmt.t u64 
    callproc       &memcpy    
#4781: 
    push           msysp.strtostrfmt.nheap i64 
    jumpfalse      #4782      i64 
    setargs                   2 0
    push           msysp.strtostrfmt.nheap i64 
    push           msysp.strtostrfmt.u u64 
    callproc       &mlibp.pcm_free 
#4782: 
    push           msysp.strtostrfmt.n i64 
    setret                    i64 
    jump           #4783      
#4783: 
    retfn                     i64 
End


Proc msysp.tostr_i64:
    param          msysp.tostr_i64.a i64 
    param          msysp.tostr_i64.fmt u64 
    local          msysp.tostr_i64.str block:360 
    local          msysp.tostr_i64.n i64 
    procentry                 
    push           msysp.tostr_i64.fmt u64 
    push           12         
    pushptroff                u8 1 0
    push           0          u64 
    casejumpeq     #4785      u64 0
    push           68         u64 
    casejumpeq     #4786      u64 0
    push           100        u64 
    casejumpeq     #4786      u64 0
    popstack                  u64 
    jump           #4787      
#4785: 
    setargs                   3 0
    push           msysp.tostr_i64.fmt u64 
    push           &msysp.tostr_i64.str 
    push           msysp.tostr_i64.a i64 
    callfn         &msysp.i64tostrfmt i64 
    pop            msysp.tostr_i64.n i64 
    jump           #4788      
#4786: 
    setargs                   4 0
    push           msysp.tostr_i64.fmt u64 
    push           &msysp.tostr_i64.str 
    push           8          i64 
    push           &msysp.tostr_i64.a 
    callfn         &msysp.domultichar i64 
    pop            msysp.tostr_i64.n i64 
    jump           #4788      
#4787: 
    setargs                   1 0
    push           msysp.tostr_i64.a i64 
    callproc       &msysp.printchar 
    jump           #4789      
#4788: 
    setargs                   2 0
    push           msysp.tostr_i64.n i64 
    push           &msysp.tostr_i64.str 
    callproc       &msysp.printstr_n 
#4789: 
    retproc                   
End


Proc msysp.tostr_u64:
    param          msysp.tostr_u64.a u64 
    param          msysp.tostr_u64.fmt u64 
    local          msysp.tostr_u64.str block:360 
    local          msysp.tostr_u64.n i64 
    procentry                 
    push           msysp.tostr_u64.fmt u64 
    push           12         
    pushptroff                u8 1 0
    push           68         u64 
    casejumpeq     #4791      u64 0
    push           100        u64 
    casejumpeq     #4791      u64 0
    push           67         u64 
    casejumpeq     #4792      u64 0
    push           99         u64 
    casejumpeq     #4792      u64 0
    popstack                  u64 
    jump           #4793      
#4791: 
    setargs                   4 0
    push           msysp.tostr_u64.fmt u64 
    push           &msysp.tostr_u64.str 
    push           8          i64 
    push           &msysp.tostr_u64.a 
    callfn         &msysp.domultichar i64 
    pop            msysp.tostr_u64.n i64 
    jump           #4794      
#4792: 
    setargs                   1 0
    push           msysp.tostr_u64.a i64 
    callproc       &msysp.printchar 
    jump           #4795      
    jump           #4794      
#4793: 
    setargs                   3 0
    push           msysp.tostr_u64.fmt u64 
    push           &msysp.tostr_u64.str 
    push           msysp.tostr_u64.a i64 
    callfn         &msysp.u64tostrfmt i64 
    pop            msysp.tostr_u64.n i64 
#4794: 
    setargs                   2 0
    push           msysp.tostr_u64.n i64 
    push           &msysp.tostr_u64.str 
    callproc       &msysp.printstr_n 
#4795: 
    retproc                   
End


Proc msysp.tostr_u128:
    param          msysp.tostr_u128.a u128 
    param          msysp.tostr_u128.fmt u64 
    param          msysp.tostr_u128.neg i64 
    local          msysp.tostr_u128.str block:360 
    local          msysp.tostr_u128.n i64 
    procentry                 
    push           msysp.tostr_u128.fmt u64 
    push           12         
    pushptroff                u8 1 0
    push           68         u64 
    casejumpeq     #4797      u64 0
    push           100        u64 
    casejumpeq     #4797      u64 0
    push           67         u64 
    casejumpeq     #4798      u64 0
    push           99         u64 
    casejumpeq     #4798      u64 0
    popstack                  u64 
    jump           #4799      
#4797: 
    setargs                   4 0
    push           msysp.tostr_u128.fmt u64 
    push           &msysp.tostr_u128.str 
    push           8          i64 
    push           &msysp.tostr_u128.a 
    callfn         &msysp.domultichar i64 
    pop            msysp.tostr_u128.n i64 
    jump           #4800      
#4798: 
    setargs                   1 0
    push           msysp.tostr_u128.a u128 
    softtruncw                i64 u128 
    callproc       &msysp.printchar 
    jump           #4801      
    jump           #4800      
#4799: 
    push           msysp.tostr_u128.neg i64 
    jumpfalse      #4802      i64 
    push           45         u64 
    push           &msysp.tostr_u128.str 
    push           1          i64 
    popptroff                 u8 1 -1
    setargs                   4 0
    push           msysp.tostr_u128.fmt u64 
    push           &msysp.tostr_u128.str 
    push           1          
    addrefoff                 u8 1 0
    push           msysp.tostr_u128.a i128 
    callfn         &msysp.u128tostrfmt i64 
    push           1          i64 
    add                       i64 
    pop            msysp.tostr_u128.n i64 
    jump           #4803      
#4802: 
    setargs                   4 0
    push           msysp.tostr_u128.fmt u64 
    push           &msysp.tostr_u128.str 
    push           msysp.tostr_u128.a i128 
    callfn         &msysp.u128tostrfmt i64 
    pop            msysp.tostr_u128.n i64 
#4803: 
#4800: 
    setargs                   2 0
    push           msysp.tostr_u128.n i64 
    push           &msysp.tostr_u128.str 
    callproc       &msysp.printstr_n 
#4801: 
    retproc                   
End


Proc msysp.tostr_r64:
    param          msysp.tostr_r64.x r64 
    param          msysp.tostr_r64.fmt u64 
    local          msysp.tostr_r64.str block:360 
    local          msysp.tostr_r64.str2 block:360 
    local          msysp.tostr_r64.cfmt block:10 
    local          msysp.tostr_r64.n i64 
    procentry                 
    push           37         u64 
    push           &msysp.tostr_r64.cfmt 
    push           0          i64 
    popptroff                 u8 1 0
    push           msysp.tostr_r64.fmt u64 
    push           1          
    pushptroff                i8 1 0
    jumpfalse      #4805      i64 
    push           46         u64 
    push           &msysp.tostr_r64.cfmt 
    push           1          i64 
    popptroff                 u8 1 0
    push           42         u64 
    push           &msysp.tostr_r64.cfmt 
    push           2          i64 
    popptroff                 u8 1 0
    push           msysp.tostr_r64.fmt u64 
    push           5          
    pushptroff                u8 1 0
    push           &msysp.tostr_r64.cfmt 
    push           3          i64 
    popptroff                 u8 1 0
    push           0          u64 
    push           &msysp.tostr_r64.cfmt 
    push           4          i64 
    popptroff                 u8 1 0
    setargs                   4 3
    push           msysp.tostr_r64.x r64 
    push           msysp.tostr_r64.fmt u64 
    push           1          
    pushptroff                i8 1 0
    push           &msysp.tostr_r64.cfmt 
    push           &msysp.tostr_r64.str 
    callproc       &sprintf   
    jump           #4806      
#4805: 
    push           msysp.tostr_r64.fmt u64 
    push           5          
    pushptroff                u8 1 0
    push           &msysp.tostr_r64.cfmt 
    push           1          i64 
    popptroff                 u8 1 0
    push           0          u64 
    push           &msysp.tostr_r64.cfmt 
    push           2          i64 
    popptroff                 u8 1 0
    setargs                   3 3
    push           msysp.tostr_r64.x r64 
    push           &msysp.tostr_r64.cfmt 
    push           &msysp.tostr_r64.str 
    callproc       &sprintf   
#4806: 
    setargs                   1 0
    push           &msysp.tostr_r64.str 
    callfn         &strlen    i64 
    pop            msysp.tostr_r64.n i64 
    push           msysp.tostr_r64.n i64 
    push           msysp.tostr_r64.fmt u64 
    pushptr                   u8 
    jumpge         #4807      i64 
    setargs                   4 0
    push           msysp.tostr_r64.fmt u64 
    push           msysp.tostr_r64.n i64 
    push           &msysp.tostr_r64.str2 
    push           &msysp.tostr_r64.str 
    callfn         &msysp.expandstr i64 
    pop            msysp.tostr_r64.n i64 
    setargs                   2 0
    push           &msysp.tostr_r64.str2 
    push           &msysp.tostr_r64.str 
    callproc       &strcpy    
#4807: 
    setargs                   2 0
    push           msysp.tostr_r64.n i64 
    push           &msysp.tostr_r64.str 
    callproc       &msysp.printstr_n 
#4808: 
    retproc                   
End


Proc msysp.tostr_str:
    param          msysp.tostr_str.s u64 
    param          msysp.tostr_str.fmt u64 
    local          msysp.tostr_str.oldlen i64 
    local          msysp.tostr_str.newlen i64 
    local          msysp.tostr_str.n i64 
    local          msysp.tostr_str.t u64 
    procentry                 
    setargs                   1 0
    push           msysp.tostr_str.s u64 
    callfn         &strlen    i64 
    pop            msysp.tostr_str.oldlen i64 
    push           msysp.tostr_str.oldlen i64 
    pop            msysp.tostr_str.newlen i64 
    push           msysp.tostr_str.fmt u64 
    push           3          
    pushptroff                u8 1 0
    jumptrue       #4810      u64 
    push           msysp.tostr_str.fmt u64 
    pushptr                   u8 
    push           msysp.tostr_str.newlen i64 
    jumpgt         #4810      i64 
    push           msysp.tostr_str.fmt u64 
    push           8          
    pushptroff                u8 1 0
    jumptrue       #4810      u64 
    push           msysp.tostr_str.fmt u64 
    push           1          
    pushptroff                i8 1 0
    jumpfalse      #4811      i64 
#4810: 
    push           msysp.tostr_str.fmt u64 
    push           3          
    pushptroff                u8 1 0
    jumpfalse      #4812      u64 
    push           &msysp.tostr_str.newlen 
    push           2          i64 
    addto                     i64 
#4812: 
    push           msysp.tostr_str.fmt u64 
    pushptr                   u8 
    push           msysp.tostr_str.newlen i64 
    jumple         #4813      i64 
    push           msysp.tostr_str.fmt u64 
    pushptr                   u8 
    pop            msysp.tostr_str.newlen i64 
#4813: 
    setargs                   1 0
    push           msysp.tostr_str.newlen i64 
    push           1          i64 
    add                       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            msysp.tostr_str.t u64 
    setargs                   4 0
    push           msysp.tostr_str.fmt u64 
    push           msysp.tostr_str.oldlen i64 
    push           msysp.tostr_str.t u64 
    push           msysp.tostr_str.s u64 
    callfn         &msysp.strtostrfmt i64 
    pop            msysp.tostr_str.n i64 
    push           msysp.tostr_str.fmt u64 
    push           1          
    pushptroff                i8 1 0
    jumpfalse      #4814      i64 
    push           &msysp.tostr_str.n 
    push           msysp.tostr_str.fmt u64 
    push           1          
    pushptroff                i8 1 0
    minto                     i64 
#4814: 
    setargs                   2 0
    push           msysp.tostr_str.n i64 
    push           msysp.tostr_str.t u64 
    callproc       &msysp.printstr_n 
    setargs                   2 0
    push           msysp.tostr_str.newlen i64 
    push           1          i64 
    add                       i64 
    push           msysp.tostr_str.t u64 
    callproc       &mlibp.pcm_free 
    jump           #4815      
#4811: 
    setargs                   2 0
    push           msysp.tostr_str.oldlen i64 
    push           msysp.tostr_str.s u64 
    callproc       &msysp.printstr_n 
#4815: 
#4816: 
    retproc                   
End


Proc msysp.getfmt: u64
    param          msysp.getfmt.fmtstyle u64 
    procentry                 
    startmult                 
    push           msysp.getfmt.fmtstyle u64 
    jumpfalse      #4818      u64 
    setargs                   3 0
    push           &msysp.getfmt.fmt 
    push           -1         i64 
    push           msysp.getfmt.fmtstyle u64 
    callproc       &msysp.strtofmt 
    push           &msysp.getfmt.fmt 
    resetmult                 
    jump           #4819      
#4818: 
    push           &msysp.defaultfmt 
    endmult                   
#4819: 
    setret                    u64 
    jump           #4820      
#4820: 
    retfn                     u64 
End


Proc msysp.strint: u64
    param          msysp.strint.a i64 
    param          msysp.strint.fmtstyle u64 
    local          msysp.strint.fmt u64 
    procentry                 
    setargs                   1 0
    push           &msysp.strint.str 
    callproc       &msysp.m$print_startstr 
    setargs                   2 0
    setargs                   1 0
    push           msysp.strint.fmtstyle u64 
    callfn         &msysp.getfmt u64 
    store          msysp.strint.fmt u64 
    push           msysp.strint.a i64 
    callproc       &msysp.tostr_i64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           msysp.strint.fmt u64 
    push           &msysp.strint.str 
    callfn         &msysp.getstr u64 
    setret                    u64 
    jump           #4822      
#4822: 
    retfn                     u64 
End


Proc msysp.getstrint:
    param          msysp.getstrint.a i64 
    param          msysp.getstrint.dest u64 
    procentry                 
    setargs                   1 0
    push           msysp.getstrint.dest u64 
    callproc       &msysp.m$print_startstr 
    setargs                   2 0
    setargs                   1 0
    push           0          u64 
    callfn         &msysp.getfmt u64 
    push           msysp.getstrint.a i64 
    callproc       &msysp.tostr_i64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#4824: 
    retproc                   
End


Proc msysp.strword: u64
    param          msysp.strword.a u64 
    param          msysp.strword.fmtstyle u64 
    local          msysp.strword.fmt u64 
    procentry                 
    setargs                   1 0
    push           &msysp.strword.str 
    callproc       &msysp.m$print_startstr 
    setargs                   2 0
    setargs                   1 0
    push           msysp.strword.fmtstyle u64 
    callfn         &msysp.getfmt u64 
    store          msysp.strword.fmt u64 
    push           msysp.strword.a u64 
    callproc       &msysp.tostr_u64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           msysp.strword.fmt u64 
    push           &msysp.strword.str 
    callfn         &msysp.getstr u64 
    setret                    u64 
    jump           #4826      
#4826: 
    retfn                     u64 
End


Proc msysp.strreal: u64
    param          msysp.strreal.a r64 
    param          msysp.strreal.fmtstyle u64 
    local          msysp.strreal.fmt u64 
    procentry                 
    setargs                   1 0
    push           &msysp.strreal.str 
    callproc       &msysp.m$print_startstr 
    setargs                   2 0
    setargs                   1 0
    push           msysp.strreal.fmtstyle u64 
    callfn         &msysp.getfmt u64 
    store          msysp.strreal.fmt u64 
    push           msysp.strreal.a r64 
    callproc       &msysp.tostr_r64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           msysp.strreal.fmt u64 
    push           &msysp.strreal.str 
    callfn         &msysp.getstr u64 
    setret                    u64 
    jump           #4828      
#4828: 
    retfn                     u64 
End


Proc msysp.getstr: u64
    param          msysp.getstr.s u64 
    param          msysp.getstr.fmt u64 
    procentry                 
    startmult                 
    push           msysp.getstr.fmt u64 
    push           13         
    pushptroff                u8 1 0
    jumpfalse      #4830      u64 
    setargs                   1 0
    push           msysp.getstr.s u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    resetmult                 
    jump           #4831      
#4830: 
    push           msysp.getstr.s u64 
    endmult                   
#4831: 
    setret                    u64 
    jump           #4832      
#4832: 
    retfn                     u64 
End


Proc msysp.initreadbuffer:
    procentry                 
    push           msysp.rd_buffer u64 
    jumpfalse      #4834      u64 
    jump           #4835      
#4834: 
    setargs                   1 0
    push           524288     i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            msysp.rd_buffer u64 
    push           0          u64 
    push           msysp.rd_buffer u64 
    popptr                    u8 
    push           msysp.rd_buffer u64 
    store          msysp.rd_lastpos u64 
    pop            msysp.rd_pos u64 
#4835: 
    retproc                   
End


Proc msysp.m$read_conline:
    procentry                 
    setargs                   0 0
    callproc       &msysp.initreadbuffer 
    setargs                   3 0
    push           524288     i64 
    push           msysp.rd_buffer u64 
    push           0          u64 
    callproc       &mlibp.readlinen 
    setargs                   1 0
    push           msysp.rd_buffer u64 
    callfn         &strlen    i64 
    pop            msysp.rd_length i64 
    push           msysp.rd_buffer u64 
    pop            msysp.rd_pos u64 
    push           0          u64 
    pop            msysp.rd_lastpos u64 
#4837: 
    retproc                   
End


Proc msysp.m$read_fileline:
    param          msysp.m$read_fileline.f u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.initreadbuffer 
    setargs                   3 0
    push           524288     i64 
    push           msysp.rd_buffer u64 
    push           msysp.m$read_fileline.f u64 
    callproc       &mlibp.readlinen 
    setargs                   1 0
    push           msysp.rd_buffer u64 
    callfn         &strlen    i64 
    pop            msysp.rd_length i64 
    push           msysp.rd_buffer u64 
    pop            msysp.rd_pos u64 
    push           0          u64 
    pop            msysp.rd_lastpos u64 
#4839: 
    retproc                   
End


Proc msysp.m$read_strline:
    param          msysp.m$read_strline.s u64 
    local          msysp.m$read_strline.n i64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.initreadbuffer 
    setargs                   1 0
    push           msysp.m$read_strline.s u64 
    callfn         &strlen    i64 
    pop            msysp.m$read_strline.n i64 
    push           msysp.m$read_strline.n i64 
    push           524288     i64 
    jumpge         #4841      i64 
    setargs                   2 0
    push           msysp.m$read_strline.s u64 
    push           msysp.rd_buffer u64 
    callproc       &strcpy    
    jump           #4842      
#4841: 
    setargs                   3 0
    push           524287     u64 
    push           msysp.m$read_strline.s u64 
    push           msysp.rd_buffer u64 
    callproc       &memcpy    
    push           0          u64 
    push           msysp.rd_buffer u64 
    push           524288     i64 
    popptroff                 u8 1 -1
#4842: 
    push           msysp.m$read_strline.n i64 
    pop            msysp.rd_length i64 
    push           msysp.rd_buffer u64 
    pop            msysp.rd_pos u64 
    push           0          u64 
    pop            msysp.rd_lastpos u64 
#4843: 
    retproc                   
End


Proc msysp.readitem: u64
    param          msysp.readitem.itemlength u64 
    local          msysp.readitem.p u64 
    local          msysp.readitem.s u64 
    local          msysp.readitem.itemstr u64 
    local          msysp.readitem.quotechar u8 
    local          msysp.readitem.c u8 
    procentry                 
    push           msysp.rd_buffer u64 
    jumptrue       #4845      u64 
    setargs                   0 0
    callproc       &msysp.initreadbuffer 
#4845: 
    push           msysp.rd_pos u64 
    pop            msysp.readitem.s u64 
    jump           #4846      
#4847: 
    push           &msysp.readitem.s 
    incr                      u64 1
#4846: 
    push           msysp.readitem.s u64 
    pushptr                   u8 
    push           32         u64 
    jumpeq         #4847      u64 
    push           msysp.readitem.s u64 
    pushptr                   u8 
    push           9          i64 
    jumpeq         #4847      i64 
#4848: 
    push           msysp.readitem.s u64 
    pop            msysp.readitem.itemstr u64 
    push           msysp.readitem.s u64 
    store          msysp.rd_pos u64 
    pop            msysp.rd_lastpos u64 
    push           msysp.readitem.s u64 
    pushptr                   u8 
    push           0          i64 
    jumpne         #4849      i64 
    push           0          i64 
    pop            msysp.termchar i64 
    push           0          i64 
    push           msysp.readitem.itemlength u64 
    popptr                    i64 
    push           msysp.readitem.s u64 
    setret                    u64 
    jump           #4850      
#4849: 
    push           0          u64 
    pop            msysp.readitem.quotechar u8 
    push           msysp.readitem.s u64 
    pushptr                   u8 
    push           34         u64 
    jumpne         #4851      u64 
    push           34         u64 
    pop            msysp.readitem.quotechar u8 
    push           &msysp.readitem.s 
    incr                      u64 1
    jump           #4852      
#4851: 
    push           msysp.readitem.s u64 
    pushptr                   u8 
    push           39         u64 
    jumpne         #4853      u64 
    push           39         u64 
    pop            msysp.readitem.quotechar u8 
    push           &msysp.readitem.s 
    incr                      u64 1
#4853: 
#4852: 
    push           msysp.readitem.s u64 
    store          msysp.readitem.itemstr u64 
    pop            msysp.readitem.p u64 
    jump           #4854      
#4855: 
    push           &msysp.readitem.s 
    loadincr                  u64 1
    pushptr                   u8 
    pop            msysp.readitem.c u8 
    push           msysp.readitem.c u8 
    switch         #4856      9 61
    opnd           #4857      
#4856: 
    switchlabel    #4858      
    switchlabel    #4857      
    switchlabel    #4857      
    switchlabel    #4857      
    switchlabel    #4857      
    switchlabel    #4857      
    switchlabel    #4857      
    switchlabel    #4857      
    switchlabel    #4857      
    switchlabel    #4857      
    switchlabel    #4857      
    switchlabel    #4857      
    switchlabel    #4857      
    switchlabel    #4857      
    switchlabel    #4857      
    switchlabel    #4857      
    switchlabel    #4857      
    switchlabel    #4857      
    switchlabel    #4857      
    switchlabel    #4857      
    switchlabel    #4857      
    switchlabel    #4857      
    switchlabel    #4857      
    switchlabel    #4858      
    switchlabel    #4857      
    switchlabel    #4857      
    switchlabel    #4857      
    switchlabel    #4857      
    switchlabel    #4857      
    switchlabel    #4857      
    switchlabel    #4857      
    switchlabel    #4857      
    switchlabel    #4857      
    switchlabel    #4857      
    switchlabel    #4857      
    switchlabel    #4858      
    switchlabel    #4857      
    switchlabel    #4857      
    switchlabel    #4857      
    switchlabel    #4857      
    switchlabel    #4857      
    switchlabel    #4857      
    switchlabel    #4857      
    switchlabel    #4857      
    switchlabel    #4857      
    switchlabel    #4857      
    switchlabel    #4857      
    switchlabel    #4857      
    switchlabel    #4857      
    switchlabel    #4857      
    switchlabel    #4857      
    switchlabel    #4857      
    switchlabel    #4858      
    endswitch                 
#4858: 
    push           msysp.readitem.quotechar u8 
    jumptrue       #4859      u64 
    push           msysp.readitem.p u64 
    push           msysp.readitem.s u64 
    jumpne         #4860      u64 
#4859: 
    jump           #4861      
#4860: 
    push           msysp.readitem.c u8 
    pop            msysp.termchar i64 
    jump           #4862      
    jump           #4863      
#4857: 
!normalchar::
#4861: 
    push           msysp.readitem.c u8 
    push           msysp.readitem.quotechar u8 
    jumpne         #4864      u64 
    push           msysp.readitem.s u64 
    pushptr                   u8 
    push           msysp.readitem.quotechar u8 
    jumpne         #4865      u64 
    push           msysp.readitem.c u8 
    push           msysp.readitem.p u64 
    popptr                    u8 
    push           &msysp.readitem.s 
    incr                      u64 1
    push           &msysp.readitem.p 
    incr                      u64 1
    jump           #4866      
#4865: 
    push           msysp.readitem.s u64 
    pushptr                   u8 
    pop            msysp.termchar i64 
    push           msysp.termchar i64 
    push           44         i64 
    jumpeq         #4867      i64 
    push           msysp.termchar i64 
    push           61         i64 
    jumpne         #4868      i64 
#4867: 
    push           &msysp.readitem.s 
    incr                      u64 1
    push           msysp.readitem.s u64 
    pushptr                   u8 
    pop            msysp.termchar i64 
#4868: 
    jump           #4862      
#4866: 
    jump           #4869      
#4864: 
    push           msysp.readitem.c u8 
    push           msysp.readitem.p u64 
    popptr                    u8 
    push           &msysp.readitem.p 
    incr                      u64 1
#4869: 
#4863: 
#4854: 
    push           msysp.readitem.s u64 
    pushptr                   u8 
    jumptrue       #4855      u64 
#4862: 
    push           msysp.readitem.s u64 
    pushptr                   u8 
    push           0          i64 
    jumpne         #4870      i64 
    push           0          i64 
    pop            msysp.termchar i64 
#4870: 
    push           msysp.readitem.p u64 
    push           msysp.readitem.itemstr u64 
    subref                    i64 1
    push           msysp.readitem.itemlength u64 
    popptr                    i64 
    push           msysp.readitem.s u64 
    pop            msysp.rd_pos u64 
    push           msysp.readitem.itemstr u64 
    setret                    u64 
    jump           #4850      
#4850: 
    retfn                     u64 
End


Proc msysp.strtoint: i64
    param          msysp.strtoint.s u64 
    param          msysp.strtoint.length i64 
    param          msysp.strtoint.base u64 
    local          msysp.strtoint.signd u8 
    local          msysp.strtoint.aa u64 
    local          msysp.strtoint.c u64 
    local          msysp.strtoint.d u64 
    procentry                 
    push           0          i64 
    pop            msysp.itemerror i64 
    push           msysp.strtoint.length i64 
    push           -1         i64 
    jumpne         #4872      i64 
    setargs                   1 0
    push           msysp.strtoint.s u64 
    callfn         &strlen    i64 
    pop            msysp.strtoint.length i64 
#4872: 
    push           0          i64 
    pop            msysp.strtoint.signd u8 
    push           msysp.strtoint.length i64 
    jumpfalse      #4873      i64 
    push           msysp.strtoint.s u64 
    pushptr                   u8 
    push           45         u64 
    jumpne         #4873      u64 
    push           1          i64 
    pop            msysp.strtoint.signd u8 
    push           &msysp.strtoint.s 
    incr                      u64 1
    push           &msysp.strtoint.length 
    decr                      i64 1
    jump           #4874      
#4873: 
    push           msysp.strtoint.length i64 
    jumpfalse      #4875      i64 
    push           msysp.strtoint.s u64 
    pushptr                   u8 
    push           43         u64 
    jumpne         #4875      u64 
    push           &msysp.strtoint.s 
    incr                      u64 1
    push           &msysp.strtoint.length 
    decr                      i64 1
#4875: 
#4874: 
    push           0          u64 
    pop            msysp.strtoint.aa u64 
    jump           #4876      
#4877: 
    push           &msysp.strtoint.s 
    loadincr                  u64 1
    pushptr                   u8 
    pop            msysp.strtoint.c u64 
    push           &msysp.strtoint.length 
    decr                      i64 1
    push           msysp.strtoint.c i64 
    switch         #4878      39 102
    opnd           #4879      
#4878: 
    switchlabel    #4880      
    switchlabel    #4879      
    switchlabel    #4879      
    switchlabel    #4879      
    switchlabel    #4879      
    switchlabel    #4879      
    switchlabel    #4879      
    switchlabel    #4879      
    switchlabel    #4879      
    switchlabel    #4881      
    switchlabel    #4881      
    switchlabel    #4881      
    switchlabel    #4881      
    switchlabel    #4881      
    switchlabel    #4881      
    switchlabel    #4881      
    switchlabel    #4881      
    switchlabel    #4881      
    switchlabel    #4881      
    switchlabel    #4879      
    switchlabel    #4879      
    switchlabel    #4879      
    switchlabel    #4879      
    switchlabel    #4879      
    switchlabel    #4879      
    switchlabel    #4879      
    switchlabel    #4882      
    switchlabel    #4882      
    switchlabel    #4882      
    switchlabel    #4882      
    switchlabel    #4882      
    switchlabel    #4882      
    switchlabel    #4879      
    switchlabel    #4879      
    switchlabel    #4879      
    switchlabel    #4879      
    switchlabel    #4879      
    switchlabel    #4879      
    switchlabel    #4879      
    switchlabel    #4879      
    switchlabel    #4879      
    switchlabel    #4879      
    switchlabel    #4879      
    switchlabel    #4879      
    switchlabel    #4879      
    switchlabel    #4879      
    switchlabel    #4879      
    switchlabel    #4879      
    switchlabel    #4879      
    switchlabel    #4879      
    switchlabel    #4879      
    switchlabel    #4879      
    switchlabel    #4879      
    switchlabel    #4879      
    switchlabel    #4879      
    switchlabel    #4879      
    switchlabel    #4880      
    switchlabel    #4879      
    switchlabel    #4883      
    switchlabel    #4883      
    switchlabel    #4883      
    switchlabel    #4883      
    switchlabel    #4883      
    switchlabel    #4883      
    endswitch                 
#4882: 
    push           msysp.strtoint.c u64 
    push           65         u64 
    sub                       i64 
    push           10         i64 
    add                       u64 
    pop            msysp.strtoint.d u64 
    jump           #4884      
#4883: 
    push           msysp.strtoint.c u64 
    push           97         u64 
    sub                       i64 
    push           10         i64 
    add                       u64 
    pop            msysp.strtoint.d u64 
    jump           #4884      
#4881: 
    push           msysp.strtoint.c u64 
    push           48         u64 
    sub                       u64 
    pop            msysp.strtoint.d u64 
    jump           #4884      
#4880: 
    jump           #4876      
    jump           #4884      
#4879: 
    push           1          i64 
    pop            msysp.itemerror i64 
    jump           #4885      
#4884: 
    push           msysp.strtoint.d u64 
    push           msysp.strtoint.base u64 
    jumplt         #4886      u64 
    push           1          i64 
    pop            msysp.itemerror i64 
    jump           #4885      
#4886: 
    push           msysp.strtoint.aa u64 
    push           msysp.strtoint.base u64 
    mul                       u64 
    push           msysp.strtoint.d u64 
    add                       u64 
    pop            msysp.strtoint.aa u64 
#4876: 
    push           msysp.strtoint.length i64 
    jumptrue       #4877      i64 
#4885: 
    startmult                 
    push           msysp.strtoint.signd u8 
    jumpfalse      #4887      i64 
    push           msysp.strtoint.aa u64 
    neg                       i64 
    resetmult                 
    jump           #4888      
#4887: 
    push           msysp.strtoint.aa i64 
    endmult                   
#4888: 
    setret                    i64 
    jump           #4889      
#4889: 
    retfn                     i64 
End


Proc msysp.m$read_i64: i64
    param          msysp.m$read_i64.fmt i64 
    local          msysp.m$read_i64.s u64 
    local          msysp.m$read_i64.length i64 
    local          msysp.m$read_i64.c i64 
    local          msysp.m$read_i64.aa i64 
    procentry                 
    push           msysp.m$read_i64.fmt i64 
    push           67         i64 
    casejumpeq     #4891      i64 0
    push           99         i64 
    casejumpeq     #4891      i64 0
    push           84         i64 
    casejumpeq     #4892      i64 0
    push           116        i64 
    casejumpeq     #4892      i64 0
    push           69         i64 
    casejumpeq     #4893      i64 0
    push           101        i64 
    casejumpeq     #4893      i64 0
    popstack                  i64 
    jump           #4894      
#4891: 
    push           msysp.rd_pos u64 
    pop            msysp.rd_lastpos u64 
    push           msysp.rd_pos u64 
    pushptr                   u8 
    jumpfalse      #4895      u64 
    push           &msysp.rd_pos 
    loadincr                  u64 1
    pushptr                   u8 
    setret                    i64 
    jump           #4896      
    jump           #4897      
#4895: 
    push           0          i64 
    setret                    i64 
    jump           #4896      
#4897: 
    jump           #4898      
#4892: 
    push           msysp.termchar i64 
    setret                    i64 
    jump           #4896      
    jump           #4898      
#4893: 
    push           msysp.itemerror i64 
    setret                    i64 
    jump           #4896      
    jump           #4898      
#4894: 
#4898: 
    setargs                   1 0
    push           &msysp.m$read_i64.length 
    callfn         &msysp.readitem u64 
    pop            msysp.m$read_i64.s u64 
    push           msysp.m$read_i64.fmt i64 
    push           0          i64 
    casejumpeq     #4899      i64 0
    push           73         i64 
    casejumpeq     #4899      i64 0
    push           105        i64 
    casejumpeq     #4899      i64 0
    push           66         i64 
    casejumpeq     #4900      i64 0
    push           98         i64 
    casejumpeq     #4900      i64 0
    push           72         i64 
    casejumpeq     #4901      i64 0
    push           104        i64 
    casejumpeq     #4901      i64 0
    popstack                  i64 
    jump           #4902      
#4899: 
    setargs                   3 0
    push           10         u64 
    push           msysp.m$read_i64.length i64 
    push           msysp.m$read_i64.s u64 
    callfn         &msysp.strtoint i64 
    setret                    i64 
    jump           #4896      
    jump           #4903      
#4900: 
    setargs                   3 0
    push           2          u64 
    push           msysp.m$read_i64.length i64 
    push           msysp.m$read_i64.s u64 
    callfn         &msysp.strtoint i64 
    setret                    i64 
    jump           #4896      
    jump           #4903      
#4901: 
    setargs                   3 0
    push           16         u64 
    push           msysp.m$read_i64.length i64 
    push           msysp.m$read_i64.s u64 
    callfn         &msysp.strtoint i64 
    setret                    i64 
    jump           #4896      
    jump           #4903      
#4902: 
#4903: 
    push           0          i64 
    setret                    i64 
    jump           #4896      
#4896: 
    retfn                     i64 
End


Proc msysp.m$read_r64: r64
    param          msysp.m$read_r64.fmt i64 
    local          msysp.m$read_r64.str block:512 
    local          msysp.m$read_r64.s u64 
    local          msysp.m$read_r64.length i64 
    local          msysp.m$read_r64.numlength i32 
    local          msysp.m$read_r64.x r64 
    procentry                 
    setargs                   1 0
    push           &msysp.m$read_r64.length 
    callfn         &msysp.readitem u64 
    pop            msysp.m$read_r64.s u64 
    push           msysp.m$read_r64.length i64 
    push           0          i64 
    jumpeq         #4905      i64 
    push           msysp.m$read_r64.length i64 
    push           512        i64 
    jumplt         #4906      i64 
#4905: 
    push           0.0000000000000000e+000 r64 
    setret                    r64 
    jump           #4907      
#4906: 
    setargs                   3 0
    push           msysp.m$read_r64.length u64 
    push           msysp.m$read_r64.s u64 
    push           &msysp.m$read_r64.str 
    callproc       &memcpy    
    push           0          u64 
    push           &msysp.m$read_r64.str 
    push           msysp.m$read_r64.length i64 
    popptroff                 u8 1 0
    push           0          i64 
    pop            msysp.itemerror i64 
    setargs                   4 3
    push           &msysp.m$read_r64.numlength 
    push           &msysp.m$read_r64.x 
    push           "%lf%n"    u64 
    push           &msysp.m$read_r64.str 
    callfn         &sscanf    i32 
    push           0          i64 
    jumpeq         #4908      i64 
    push           msysp.m$read_r64.numlength i32 
    push           msysp.m$read_r64.length i64 
    jumpeq         #4909      i64 
#4908: 
    push           0.0000000000000000e+000 r64 
    pop            msysp.m$read_r64.x r64 
    push           1          i64 
    pop            msysp.itemerror i64 
#4909: 
    push           msysp.m$read_r64.x r64 
    setret                    r64 
    jump           #4907      
#4907: 
    retfn                     r64 
End


Proc msysp.m$read_str:
    param          msysp.m$read_str.dest u64 
    param          msysp.m$read_str.destlen i64 
    param          msysp.m$read_str.fmt i64 
    local          msysp.m$read_str.s u64 
    local          msysp.m$read_str.length i64 
    local          msysp.m$read_str.numlength i64 
    local          msysp.m$read_str.x r64 
    procentry                 
    push           0          i64 
    pop            msysp.itemerror i64 
    push           msysp.m$read_str.fmt i64 
    push           76         i64 
    jumpeq         #4911      i64 
    push           msysp.m$read_str.fmt i64 
    push           108        i64 
    jumpne         #4912      i64 
#4911: 
    push           msysp.rd_pos u64 
    pop            msysp.m$read_str.s u64 
    push           msysp.rd_buffer u64 
    push           msysp.rd_length i64 
    addrefoff                 u64 1 0
    push           msysp.rd_pos u64 
    subref                    i64 1
    pop            msysp.m$read_str.length i64 
    jump           #4913      
#4912: 
    setargs                   1 0
    push           &msysp.m$read_str.length 
    callfn         &msysp.readitem u64 
    pop            msysp.m$read_str.s u64 
    push           msysp.m$read_str.fmt i64 
    push           78         i64 
    jumpeq         #4914      i64 
    push           msysp.m$read_str.fmt i64 
    push           110        i64 
    jumpne         #4915      i64 
#4914: 
    setargs                   2 0
    push           msysp.m$read_str.length i64 
    push           msysp.m$read_str.s u64 
    callproc       &mlibp.iconvlcn 
#4915: 
#4913: 
    push           msysp.m$read_str.destlen i64 
    push           0          i64 
    jumple         #4916      i64 
    push           msysp.m$read_str.length i64 
    push           msysp.m$read_str.destlen i64 
    jumplt         #4917      i64 
    push           msysp.m$read_str.destlen i64 
    push           1          i64 
    sub                       i64 
    pop            msysp.m$read_str.length i64 
    push           1          i64 
    pop            msysp.itemerror i64 
#4917: 
#4916: 
    setargs                   3 0
    push           msysp.m$read_str.length u64 
    push           msysp.m$read_str.s u64 
    push           msysp.m$read_str.dest u64 
    callproc       &memcpy    
    push           0          u64 
    push           msysp.m$read_str.dest u64 
    push           msysp.m$read_str.length i64 
    popptroff                 u8 1 0
#4918: 
    retproc                   
End


Proc msysp.readstr:
    param          msysp.readstr.dest u64 
    param          msysp.readstr.fmt i64 
    param          msysp.readstr.destlen i64 
    procentry                 
    setargs                   3 0
    push           msysp.readstr.fmt i64 
    push           msysp.readstr.destlen i64 
    push           msysp.readstr.dest u64 
    callproc       &msysp.m$read_str 
#4920: 
    retproc                   
End


Proc msysp.rereadln:
    procentry                 
    push           msysp.rd_buffer u64 
    pop            msysp.rd_pos u64 
    push           msysp.rd_pos u64 
    pop            msysp.rd_lastpos u64 
#4922: 
    retproc                   
End


Proc msysp.reread:
    procentry                 
    push           msysp.rd_lastpos u64 
    pop            msysp.rd_pos u64 
#4924: 
    retproc                   
End


Proc msysp.valint: i64
    param          msysp.valint.s u64 
    param          msysp.valint.fmt i64 
    local          msysp.valint.old_pos u64 
    local          msysp.valint.old_lastpos u64 
    local          msysp.valint.aa i64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.initreadbuffer 
    push           msysp.rd_pos u64 
    pop            msysp.valint.old_pos u64 
    push           msysp.rd_lastpos u64 
    pop            msysp.valint.old_lastpos u64 
    push           msysp.valint.s u64 
    pop            msysp.rd_pos u64 
    setargs                   1 0
    push           msysp.valint.fmt i64 
    callfn         &msysp.m$read_i64 i64 
    pop            msysp.valint.aa i64 
    push           msysp.valint.old_pos u64 
    pop            msysp.rd_pos u64 
    push           msysp.valint.old_lastpos u64 
    pop            msysp.rd_lastpos u64 
    push           msysp.valint.aa i64 
    setret                    i64 
    jump           #4926      
#4926: 
    retfn                     i64 
End


Proc msysp.valreal: r64
    param          msysp.valreal.s u64 
    local          msysp.valreal.old_pos u64 
    local          msysp.valreal.old_lastpos u64 
    local          msysp.valreal.x r64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.initreadbuffer 
    push           msysp.rd_pos u64 
    pop            msysp.valreal.old_pos u64 
    push           msysp.rd_lastpos u64 
    pop            msysp.valreal.old_lastpos u64 
    push           msysp.valreal.s u64 
    pop            msysp.rd_pos u64 
    setargs                   1 0
    push           0          i64 
    callfn         &msysp.m$read_r64 r64 
    pop            msysp.valreal.x r64 
    push           msysp.valreal.old_pos u64 
    pop            msysp.rd_pos u64 
    push           msysp.valreal.old_lastpos u64 
    pop            msysp.rd_lastpos u64 
    push           msysp.valreal.x r64 
    setret                    r64 
    jump           #4928      
#4928: 
    retfn                     r64 
End


Proc msysp.mclunimpl:
    param          msysp.mclunimpl.mess u64 
    procentry                 
    setargs                   2 2
    push           msysp.mclunimpl.mess u64 
    push           "MCL-UNIMPL: %s\n" u64 
    callproc       &printf    
    push           1          i64 
    stop                      
#4930: 
    retproc                   
End


Proc mlibp.pcm_alloc: u64
    param          mlibp.pcm_alloc.n i64 
    local          mlibp.pcm_alloc.p u64 
    procentry                 
    push           mlibp.pcm_setup u8 
    jumptrue       #4932      i64 
    setargs                   0 0
    callproc       &mlibp.pcm_init 
#4932: 
    push           mlibp.pcm_alloc.n i64 
    push           2048       i64 
    jumple         #4933      i64 
    setargs                   1 0
    push           mlibp.pcm_alloc.n i64 
    callfn         &mlibp.pcm_getac i64 
    pop            mlibp.alloccode i64 
    push           &mlibp.allocupper 
    push           mlibp.alloccode i64 
    pushptroff                i64 8 0
    pop            mlibp.allocbytes i64 
    setargs                   1 0
    push           mlibp.allocbytes i64 
    callfn         &mlibp.allocmem u64 
    pop            mlibp.pcm_alloc.p u64 
    push           mlibp.pcm_alloc.p u64 
    jumptrue       #4934      u64 
    setargs                   1 0
    push           "pcm_alloc failure" u64 
    callproc       &mlibp.abortprogram 
#4934: 
    push           mlibp.pcm_alloc.p u64 
    setret                    u64 
    jump           #4935      
#4933: 
    push           &mlibp.sizeindextable 
    push           mlibp.pcm_alloc.n i64 
    pushptroff                u8 1 0
    pop            mlibp.alloccode i64 
    push           &mlibp.allocupper 
    push           mlibp.alloccode i64 
    pushptroff                i64 8 0
    pop            mlibp.allocbytes i64 
    push           &mlibp.smallmemtotal 
    push           mlibp.allocbytes i64 
    addto                     i64 
    push           &mlibp.freelist 
    push           mlibp.alloccode i64 
    pushptroff                u64 8 0
    store          mlibp.pcm_alloc.p u64 
    jumpfalse      #4936      u64 
    push           &mlibp.freelist 
    push           mlibp.alloccode i64 
    pushptroff                u64 8 0
    pushptr                   u64 
    push           &mlibp.freelist 
    push           mlibp.alloccode i64 
    popptroff                 u64 8 0
    push           mlibp.pcm_alloc.p u64 
    setret                    u64 
    jump           #4935      
#4936: 
    push           mlibp.pcheapptr u64 
    pop            mlibp.pcm_alloc.p u64 
    push           &mlibp.pcheapptr 
    push           mlibp.allocbytes i64 
    addrefoffto               u64 1 0
    push           mlibp.pcheapptr u64 
    push           mlibp.pcheapend u64 
    jumplt         #4937      u64 
    setargs                   1 0
    push           mlibp.allocbytes i64 
    callfn         &mlibp.pcm_newblock u64 
    pop            mlibp.pcm_alloc.p u64 
    push           mlibp.pcm_alloc.p u64 
    setret                    u64 
    jump           #4935      
#4937: 
    push           mlibp.pcm_alloc.p u64 
    setret                    u64 
    jump           #4935      
#4935: 
    retfn                     u64 
End


Proc mlibp.pcm_free:
    param          mlibp.pcm_free.p u64 
    param          mlibp.pcm_free.n i64 
    local          mlibp.pcm_free.acode i64 
    procentry                 
    push           mlibp.pcm_free.n i64 
    push           0          i64 
    jumpne         #4939      i64 
    jump           #4940      
#4939: 
    push           mlibp.pcm_free.n i64 
    push           2048       i64 
    jumple         #4941      i64 
    setargs                   1 0
    push           mlibp.pcm_free.p u64 
    callproc       &free      
    jump           #4940      
#4941: 
    push           mlibp.pcm_free.p u64 
    jumpfalse      #4942      u64 
    push           &mlibp.sizeindextable 
    push           mlibp.pcm_free.n i64 
    pushptroff                u8 1 0
    pop            mlibp.pcm_free.acode i64 
    push           &mlibp.smallmemtotal 
    push           &mlibp.allocupper 
    push           mlibp.pcm_free.acode i64 
    pushptroff                i64 8 0
    subto                     i64 
    push           &mlibp.freelist 
    push           mlibp.pcm_free.acode i64 
    pushptroff                u64 8 0
    push           mlibp.pcm_free.p u64 
    popptr                    u64 
    push           mlibp.pcm_free.p u64 
    push           &mlibp.freelist 
    push           mlibp.pcm_free.acode i64 
    popptroff                 u64 8 0
#4942: 
#4940: 
    retproc                   
End


Proc mlibp.pcm_freeac:
    param          mlibp.pcm_freeac.p u64 
    param          mlibp.pcm_freeac.alloc i64 
    procentry                 
    setargs                   2 0
    push           &mlibp.allocupper 
    push           mlibp.pcm_freeac.alloc i64 
    pushptroff                i64 8 0
    push           mlibp.pcm_freeac.p u64 
    callproc       &mlibp.pcm_free 
#4944: 
    retproc                   
End


Proc mlibp.pcm_copymem4:
    param          mlibp.pcm_copymem4.p u64 
    param          mlibp.pcm_copymem4.q u64 
    param          mlibp.pcm_copymem4.n i64 
    procentry                 
    setargs                   3 0
    push           mlibp.pcm_copymem4.n u64 
    push           mlibp.pcm_copymem4.q u64 
    push           mlibp.pcm_copymem4.p u64 
    callproc       &memcpy    
#4946: 
    retproc                   
End


Proc mlibp.pcm_clearmem:
    param          mlibp.pcm_clearmem.p u64 
    param          mlibp.pcm_clearmem.n i64 
    procentry                 
    setargs                   3 0
    push           mlibp.pcm_clearmem.n u64 
    push           0          i64 
    push           mlibp.pcm_clearmem.p u64 
    callproc       &memset    
#4948: 
    retproc                   
End


Proc mlibp.pcm_init:
    local          mlibp.pcm_init.j i64 
    local          mlibp.pcm_init.k i64 
    local          mlibp.pcm_init.k1 i64 
    local          mlibp.pcm_init.k2 i64 
    local          mlibp.pcm_init.size i64 
    local          mlibp.pcm_init.av_1 i64 
    local          mlibp.pcm_init.i i64 
    procentry                 
    push           0          i64 
    pop            mlibp.alloccode i64 
    push           mlibp.pcm_setup u8 
    jumpfalse      #4950      i64 
    jump           #4951      
#4950: 
    setargs                   1 0
    push           0          i64 
    callproc       &mlibp.pcm_newblock 
    push           mlibp.pcheapptr u64 
    pop            mlibp.allocbase u64 
#4952: 
    push           1          i64 
    pop            mlibp.pcm_init.i i64 
#4953: 
    push           1          i64 
    pop            mlibp.pcm_init.j i64 
    push           16         i64 
    pop            mlibp.pcm_init.k i64 
    jump           #4954      
#4955: 
    push           mlibp.pcm_init.k i64 
    push           1          i64 
    shl                       i64 
    pop            mlibp.pcm_init.k i64 
    push           &mlibp.pcm_init.j 
    incr                      i64 1
#4954: 
    push           mlibp.pcm_init.i i64 
    push           mlibp.pcm_init.k i64 
    jumpgt         #4955      i64 
#4956: 
    push           mlibp.pcm_init.j i64 
    push           &mlibp.sizeindextable 
    push           mlibp.pcm_init.i i64 
    popptroff                 u8 1 0
#4957: 
    forup          #4953      i64 1
    opnd           mlibp.pcm_init.i 
    opnd           2048       
#4958: 
    push           16         u64 
    push           &mlibp.allocupper 
    push           1          i64 
    popptroff                 u64 8 0
    push           16         i64 
    pop            mlibp.pcm_init.size i64 
#4959: 
    push           2          i64 
    pop            mlibp.pcm_init.i i64 
#4960: 
    push           &mlibp.pcm_init.size 
    push           2          i64 
    multo                     i64 
    push           mlibp.pcm_init.size u64 
    push           &mlibp.allocupper 
    push           mlibp.pcm_init.i i64 
    popptroff                 u64 8 0
    push           mlibp.pcm_init.size i64 
    push           33554432   i64 
    jumplt         #4961      i64 
    push           mlibp.pcm_init.i i64 
    pop            mlibp.pcm_init.k i64 
    jump           #4962      
#4961: 
#4963: 
    forup          #4960      i64 1
    opnd           mlibp.pcm_init.i 
    opnd           27         
#4962: 
#4964: 
    push           mlibp.pcm_init.k i64 
    push           1          i64 
    add                       i64 
    pop            mlibp.pcm_init.i i64 
    push           300        i64 
    pop            mlibp.pcm_init.av_1 i64 
    push           mlibp.pcm_init.i i64 
    push           mlibp.pcm_init.av_1 i64 
    jumpgt         #4965      i64 
#4966: 
    push           &mlibp.pcm_init.size 
    push           33554432   i64 
    addto                     i64 
    push           mlibp.pcm_init.size i64 
    push           8589934592 i64 
    jumpge         #4967      i64 
    push           mlibp.pcm_init.size u64 
    push           &mlibp.allocupper 
    push           mlibp.pcm_init.i i64 
    popptroff                 u64 8 0
    push           mlibp.pcm_init.size u64 
    pop            mlibp.maxmemory u64 
    jump           #4968      
#4967: 
    push           mlibp.pcm_init.i i64 
    push           1          i64 
    sub                       i64 
    pop            mlibp.maxalloccode i64 
    jump           #4965      
#4968: 
#4969: 
    forup          #4966      i64 1
    opnd           mlibp.pcm_init.i 
    opnd           mlibp.pcm_init.av_1 
#4965: 
    push           1          i64 
    pop            mlibp.pcm_setup u8 
#4951: 
    retproc                   
End


Proc mlibp.pcm_getac: i64
    param          mlibp.pcm_getac.size i64 
    procentry                 
    push           mlibp.pcm_getac.size i64 
    push           2048       i64 
    jumpgt         #4971      i64 
    push           &mlibp.sizeindextable 
    push           mlibp.pcm_getac.size i64 
    pushptroff                u8 1 0
    setret                    i64 
    jump           #4972      
#4971: 
    push           mlibp.pcm_getac.size i64 
    push           255        i64 
    add                       i64 
    push           8          i64 
    shr                       i64 
    pop            mlibp.pcm_getac.size i64 
    push           mlibp.pcm_getac.size i64 
    push           2048       i64 
    jumpgt         #4973      i64 
    push           &mlibp.sizeindextable 
    push           mlibp.pcm_getac.size i64 
    pushptroff                u8 1 0
    push           8          i64 
    add                       i64 
    setret                    i64 
    jump           #4972      
#4973: 
    push           mlibp.pcm_getac.size i64 
    push           63         i64 
    add                       i64 
    push           6          i64 
    shr                       i64 
    pop            mlibp.pcm_getac.size i64 
    push           mlibp.pcm_getac.size i64 
    push           2048       i64 
    jumpgt         #4974      i64 
    push           &mlibp.sizeindextable 
    push           mlibp.pcm_getac.size i64 
    pushptroff                u8 1 0
    push           14         i64 
    add                       i64 
    setret                    i64 
    jump           #4972      
#4974: 
    push           mlibp.pcm_getac.size i64 
    push           2048       i64 
    sub                       i64 
    push           2047       i64 
    add                       i64 
    push           2048       i64 
    idiv                      i64 
    push           22         i64 
    add                       i64 
    pop            mlibp.pcm_getac.size i64 
    push           mlibp.pcm_getac.size i64 
    setret                    i64 
    jump           #4972      
#4972: 
    retfn                     i64 
End


Proc mlibp.pcm_newblock: u64
    param          mlibp.pcm_newblock.itemsize i64 
    local          mlibp.pcm_newblock.p u64 
    procentry                 
    push           &mlibp.pcm_newblock.totalheapsize 
    push           2097152    i64 
    addto                     i64 
    push           0          i64 
    pop            mlibp.alloccode i64 
    setargs                   1 0
    push           2097152    i64 
    callfn         &mlibp.allocmem u64 
    pop            mlibp.pcm_newblock.p u64 
    push           mlibp.pcm_newblock.p u64 
    push           0          u64 
    jumpne         #4976      u64 
    setargs                   1 0
    push           "Can't alloc pc heap" u64 
    callproc       &mlibp.abortprogram 
#4976: 
    push           mlibp.pcm_newblock.p u64 
    pop            mlibp.pcheapptr u64 
    push           mlibp.pcm_newblock.p u64 
    push           2097152    i64 
    addrefoff                 u64 1 0
    pop            mlibp.pcheapend u64 
    push           mlibp.pcheapstart u64 
    push           0          u64 
    jumpne         #4977      u64 
    push           mlibp.pcm_newblock.p u64 
    pop            mlibp.pcheapstart u64 
#4977: 
    push           &mlibp.pcheapptr 
    push           mlibp.pcm_newblock.itemsize i64 
    addrefoffto               u64 1 0
    push           mlibp.pcm_newblock.p u64 
    setret                    u64 
    jump           #4978      
#4978: 
    retfn                     u64 
End


Proc mlibp.pcm_round: i64
    param          mlibp.pcm_round.n i64 
    procentry                 
    startmult                 
    push           mlibp.pcm_round.n i64 
    push           2048       i64 
    jumple         #4980      i64 
    push           mlibp.pcm_round.n i64 
    resetmult                 
    jump           #4981      
#4980: 
    push           &mlibp.pcm_round.allocbytes 
    push           &mlibp.sizeindextable 
    push           mlibp.pcm_round.n i64 
    pushptroff                u8 1 0
    pushptroff                i32 4 0
    endmult                   
#4981: 
    setret                    i64 
    jump           #4982      
#4982: 
    retfn                     i64 
End


Proc mlibp.pcm_array: i64
    param          mlibp.pcm_array.n i64 
    local          mlibp.pcm_array.m i64 
    procentry                 
    startmult                 
    push           mlibp.pcm_array.n i64 
    push           2048       i64 
    jumpgt         #4984      i64 
    setargs                   1 0
    push           mlibp.pcm_array.n i64 
    callfn         &mlibp.pcm_round i64 
    resetmult                 
    jump           #4985      
#4984: 
    push           2048       i64 
    pop            mlibp.pcm_array.m i64 
    jump           #4986      
#4987: 
    push           &mlibp.pcm_array.m 
    push           1          i64 
    shlto                     i64 
#4986: 
    push           mlibp.pcm_array.n i64 
    push           mlibp.pcm_array.m i64 
    jumpgt         #4987      i64 
#4988: 
    push           mlibp.pcm_array.m i64 
    endmult                   
#4985: 
    setret                    i64 
    jump           #4989      
#4989: 
    retfn                     i64 
End


Proc mlibp.pcm_printfreelist:
    param          mlibp.pcm_printfreelist.size i64 
    param          mlibp.pcm_printfreelist.p u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Size: "   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mlibp.pcm_printfreelist.size i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #4991      
#4992: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           " "        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   2 0
    push           "h"        u64 
    push           mlibp.pcm_printfreelist.p u64 
    callproc       &msysp.m$print_ptr 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           mlibp.pcm_printfreelist.p u64 
    pushptr                   u64 
    pop            mlibp.pcm_printfreelist.p u64 
#4991: 
    push           mlibp.pcm_printfreelist.p u64 
    jumptrue       #4992      u64 
#4993: 
    setargs                   1 0
    push           ""         u64 
    callproc       &puts      
#4994: 
    retproc                   
End


Proc mlibp.pcm_diags:
    param          mlibp.pcm_diags.caption u64 
    local          mlibp.pcm_diags.m i64 
    local          mlibp.pcm_diags.i i64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "HEAP FREELISTS:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mlibp.pcm_diags.caption u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           16         i64 
    pop            mlibp.pcm_diags.m i64 
#4996: 
    push           1          i64 
    pop            mlibp.pcm_diags.i i64 
#4997: 
    setargs                   2 0
    push           &mlibp.freelist 
    push           mlibp.pcm_diags.i i64 
    pushptroff                u64 8 0
    push           mlibp.pcm_diags.m i64 
    callproc       &mlibp.pcm_printfreelist 
    push           &mlibp.pcm_diags.m 
    push           1          i64 
    shlto                     i64 
#4998: 
    forup          #4997      i64 1
    opnd           mlibp.pcm_diags.i 
    opnd           8          
#4999: 
#5000: 
    retproc                   
End


Proc mlibp.pcm_allocz: u64
    param          mlibp.pcm_allocz.n i64 
    local          mlibp.pcm_allocz.p u64 
    procentry                 
    setargs                   1 0
    push           mlibp.pcm_allocz.n i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            mlibp.pcm_allocz.p u64 
    setargs                   3 0
    push           mlibp.pcm_allocz.n u64 
    push           0          i64 
    push           mlibp.pcm_allocz.p u64 
    callproc       &memset    
    push           mlibp.pcm_allocz.p u64 
    setret                    u64 
    jump           #5002      
#5002: 
    retfn                     u64 
End


Proc mlibp.pcm_copyheapstring: u64
    param          mlibp.pcm_copyheapstring.s u64 
    local          mlibp.pcm_copyheapstring.q u64 
    local          mlibp.pcm_copyheapstring.n i64 
    procentry                 
    push           mlibp.pcm_copyheapstring.s u64 
    push           0          u64 
    jumpne         #5004      u64 
    push           0          u64 
    setret                    u64 
    jump           #5005      
#5004: 
    setargs                   1 0
    push           mlibp.pcm_copyheapstring.s u64 
    callfn         &strlen    i64 
    push           1          i64 
    add                       i64 
    pop            mlibp.pcm_copyheapstring.n i64 
    setargs                   1 0
    push           mlibp.pcm_copyheapstring.n i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            mlibp.pcm_copyheapstring.q u64 
    setargs                   3 0
    push           mlibp.pcm_copyheapstring.n u64 
    push           mlibp.pcm_copyheapstring.s u64 
    push           mlibp.pcm_copyheapstring.q u64 
    callproc       &memcpy    
    push           mlibp.pcm_copyheapstring.q u64 
    setret                    u64 
    jump           #5005      
#5005: 
    retfn                     u64 
End


Proc mlibp.pcm_copyheapstringn: u64
    param          mlibp.pcm_copyheapstringn.s u64 
    param          mlibp.pcm_copyheapstringn.n i64 
    local          mlibp.pcm_copyheapstringn.q u64 
    procentry                 
    push           mlibp.pcm_copyheapstringn.s u64 
    push           0          u64 
    jumpne         #5007      u64 
    push           0          u64 
    setret                    u64 
    jump           #5008      
#5007: 
    setargs                   1 0
    push           mlibp.pcm_copyheapstringn.n i64 
    push           1          i64 
    add                       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            mlibp.pcm_copyheapstringn.q u64 
    setargs                   3 0
    push           mlibp.pcm_copyheapstringn.n u64 
    push           mlibp.pcm_copyheapstringn.s u64 
    push           mlibp.pcm_copyheapstringn.q u64 
    callproc       &memcpy    
    push           0          u64 
    push           mlibp.pcm_copyheapstringn.q u64 
    push           mlibp.pcm_copyheapstringn.n i64 
    popptroff                 u8 1 0
    push           mlibp.pcm_copyheapstringn.q u64 
    setret                    u64 
    jump           #5008      
#5008: 
    retfn                     u64 
End


Proc mlibp.pcm_copyheapblock: u64
    param          mlibp.pcm_copyheapblock.s u64 
    param          mlibp.pcm_copyheapblock.length i64 
    local          mlibp.pcm_copyheapblock.q u64 
    procentry                 
    push           mlibp.pcm_copyheapblock.length i64 
    push           0          i64 
    jumpne         #5010      i64 
    push           0          u64 
    setret                    u64 
    jump           #5011      
#5010: 
    setargs                   1 0
    push           mlibp.pcm_copyheapblock.length i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            mlibp.pcm_copyheapblock.q u64 
    setargs                   3 0
    push           mlibp.pcm_copyheapblock.length u64 
    push           mlibp.pcm_copyheapblock.s u64 
    push           mlibp.pcm_copyheapblock.q u64 
    callproc       &memcpy    
    push           mlibp.pcm_copyheapblock.q u64 
    setret                    u64 
    jump           #5011      
#5011: 
    retfn                     u64 
End


Proc mlibp.addtomemalloc:
    param          mlibp.addtomemalloc.ptr u64 
    param          mlibp.addtomemalloc.size i64 
    local          mlibp.addtomemalloc.i i64 
    procentry                 
#5013: 
    push           1          i64 
    pop            mlibp.addtomemalloc.i i64 
#5014: 
    push           &mlibp.memalloctable 
    push           mlibp.addtomemalloc.i i64 
    pushptroff                u64 8 -8
    push           mlibp.addtomemalloc.ptr u64 
    jumpne         #5015      u64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "ALLOC ERROR:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mlibp.addtomemalloc.ptr u64 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   1 0
    push           "ALREADY ALLOCATED\n\n\n" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           2          i64 
    stop                      
#5015: 
    push           &mlibp.memalloctable 
    push           mlibp.addtomemalloc.i i64 
    pushptroff                u64 8 -8
    push           0          u64 
    jumpne         #5016      u64 
    push           mlibp.addtomemalloc.ptr u64 
    push           &mlibp.memalloctable 
    push           mlibp.addtomemalloc.i i64 
    popptroff                 u64 8 -8
    push           mlibp.addtomemalloc.size i64 
    push           &mlibp.memallocsize 
    push           mlibp.addtomemalloc.i i64 
    popptroff                 i32 4 -4
    jump           #5017      
#5016: 
#5018: 
    forup          #5014      i64 1
    opnd           mlibp.addtomemalloc.i 
    opnd           2          
#5019: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "MEMALLOCTABLE FULL\n\n\n\n" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &mwindowsp.os_getch 
    push           3          i64 
    stop                      
#5017: 
    retproc                   
End


Proc mlibp.removefrommemalloc:
    param          mlibp.removefrommemalloc.ptr u64 
    param          mlibp.removefrommemalloc.size i64 
    local          mlibp.removefrommemalloc.i i64 
    procentry                 
#5021: 
    push           1          i64 
    pop            mlibp.removefrommemalloc.i i64 
#5022: 
    push           &mlibp.memalloctable 
    push           mlibp.removefrommemalloc.i i64 
    pushptroff                u64 8 -8
    push           mlibp.removefrommemalloc.ptr u64 
    jumpne         #5023      u64 
    push           &mlibp.memallocsize 
    push           mlibp.removefrommemalloc.i i64 
    pushptroff                i32 4 -4
    push           mlibp.removefrommemalloc.size i64 
    jumpeq         #5024      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "REMOVE:FOUND" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mlibp.removefrommemalloc.ptr u64 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   1 0
    push           "IN MEMALLOCTABLE, FREESIZE=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mlibp.removefrommemalloc.size i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           ", BUT STORED AS BLOCK SIZE:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mlibp.memallocsize 
    push           mlibp.removefrommemalloc.i i64 
    pushptroff                i32 4 -4
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "MEMSIZE"  u64 
    callproc       &mlibp.abortprogram 
#5024: 
    push           0          u64 
    push           &mlibp.memalloctable 
    push           mlibp.removefrommemalloc.i i64 
    popptroff                 u64 8 -8
    jump           #5025      
#5023: 
#5026: 
    forup          #5022      i64 1
    opnd           mlibp.removefrommemalloc.i 
    opnd           2          
#5027: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "CAN'T FIND" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mlibp.removefrommemalloc.ptr u64 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   1 0
    push           "IN MEMALLOCTABLE" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mlibp.removefrommemalloc.size i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "MEM"      u64 
    callproc       &mlibp.abortprogram 
    push           4          i64 
    stop                      
#5025: 
    retproc                   
End


Proc mlibp.allocmem: u64
    param          mlibp.allocmem.n i64 
    local          mlibp.allocmem.p u64 
    procentry                 
    setargs                   1 0
    push           mlibp.allocmem.n u64 
    callfn         &malloc    u64 
    pop            mlibp.allocmem.p u64 
    push           mlibp.allocmem.p u64 
    jumpfalse      #5029      u64 
    push           mlibp.allocmem.p u64 
    setret                    u64 
    jump           #5030      
#5029: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mlibp.allocmem.n i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           mlibp.memtotal i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Alloc mem failure" u64 
    callproc       &mlibp.abortprogram 
    push           0          u64 
    setret                    u64 
    jump           #5030      
#5030: 
    retfn                     u64 
End


Proc mlibp.reallocmem: u64
    param          mlibp.reallocmem.p u64 
    param          mlibp.reallocmem.n i64 
    procentry                 
    setargs                   2 0
    push           mlibp.reallocmem.n u64 
    push           mlibp.reallocmem.p u64 
    callfn         &realloc   u64 
    pop            mlibp.reallocmem.p u64 
    push           mlibp.reallocmem.p u64 
    jumpfalse      #5032      u64 
    push           mlibp.reallocmem.p u64 
    setret                    u64 
    jump           #5033      
#5032: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mlibp.reallocmem.n i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Realloc mem failure" u64 
    callproc       &mlibp.abortprogram 
    push           0          u64 
    setret                    u64 
    jump           #5033      
#5033: 
    retfn                     u64 
End


Proc mlibp.abortprogram:
    param          mlibp.abortprogram.s u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mlibp.abortprogram.s u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "ABORTING: Press key..." u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           5          i64 
    stop                      
#5035: 
    retproc                   
End


Proc mlibp.getfilesize: i64
    param          mlibp.getfilesize.handlex u64 
    local          mlibp.getfilesize.p u32 
    local          mlibp.getfilesize.size u32 
    procentry                 
    setargs                   1 0
    push           mlibp.getfilesize.handlex u64 
    callfn         &ftell     i32 
    pop            mlibp.getfilesize.p u32 
    setargs                   3 0
    push           2          i64 
    push           0          i64 
    push           mlibp.getfilesize.handlex u64 
    callproc       &fseek     
    setargs                   1 0
    push           mlibp.getfilesize.handlex u64 
    callfn         &ftell     i32 
    pop            mlibp.getfilesize.size u32 
    setargs                   3 0
    push           0          i64 
    push           mlibp.getfilesize.p u32 
    push           mlibp.getfilesize.handlex u64 
    callproc       &fseek     
    push           mlibp.getfilesize.size u32 
    setret                    i64 
    jump           #5037      
#5037: 
    retfn                     i64 
End


Proc mlibp.readrandom:
    param          mlibp.readrandom.handlex u64 
    param          mlibp.readrandom.mem u64 
    param          mlibp.readrandom.offset i64 
    param          mlibp.readrandom.size i64 
    local          mlibp.readrandom.a i64 
    procentry                 
    setargs                   3 0
    push           0          i64 
    push           mlibp.readrandom.offset i64 
    push           mlibp.readrandom.handlex u64 
    callproc       &fseek     
    setargs                   4 0
    push           mlibp.readrandom.handlex u64 
    push           mlibp.readrandom.size u64 
    push           1          u64 
    push           mlibp.readrandom.mem u64 
    callfn         &fread     i64 
    pop            mlibp.readrandom.a i64 
#5039: 
    retproc                   
End


Proc mlibp.writerandom: i64
    param          mlibp.writerandom.handlex u64 
    param          mlibp.writerandom.mem u64 
    param          mlibp.writerandom.offset i64 
    param          mlibp.writerandom.size i64 
    procentry                 
    setargs                   3 0
    push           0          i64 
    push           mlibp.writerandom.offset i64 
    push           mlibp.writerandom.handlex u64 
    callproc       &fseek     
    setargs                   4 0
    push           mlibp.writerandom.handlex u64 
    push           mlibp.writerandom.size u64 
    push           1          u64 
    push           mlibp.writerandom.mem u64 
    callfn         &fwrite    i64 
    setret                    i64 
    jump           #5041      
#5041: 
    retfn                     i64 
End


Proc mlibp.setfilepos: i64
    param          mlibp.setfilepos.file u64 
    param          mlibp.setfilepos.offset i64 
    procentry                 
    setargs                   3 0
    push           0          i64 
    push           mlibp.setfilepos.offset i64 
    push           mlibp.setfilepos.file u64 
    callfn         &fseek     i32 
    setret                    i64 
    jump           #5043      
#5043: 
    retfn                     i64 
End


Proc mlibp.getfilepos: i64
    param          mlibp.getfilepos.file u64 
    procentry                 
    setargs                   1 0
    push           mlibp.getfilepos.file u64 
    callfn         &ftell     i32 
    setret                    i64 
    jump           #5045      
#5045: 
    retfn                     i64 
End


Proc mlibp.readfile: u64
    param          mlibp.readfile.filename u64 
    local          mlibp.readfile.f u64 
    local          mlibp.readfile.size i64 
    local          mlibp.readfile.m u64 
    local          mlibp.readfile.p u64 
    procentry                 
    setargs                   2 0
    push           "rb"       u64 
    push           mlibp.readfile.filename u64 
    callfn         &fopen     u64 
    pop            mlibp.readfile.f u64 
    push           mlibp.readfile.f u64 
    push           0          u64 
    jumpne         #5047      u64 
    push           0          u64 
    setret                    u64 
    jump           #5048      
#5047: 
    setargs                   1 0
    push           mlibp.readfile.f u64 
    callfn         &mlibp.getfilesize i64 
    store          mlibp.readfile.size i64 
    pop            mlibp.rfsize i64 
    setargs                   1 0
    push           mlibp.readfile.size i64 
    push           4          i64 
    add                       u64 
    callfn         &malloc    u64 
    pop            mlibp.readfile.m u64 
    push           mlibp.readfile.m u64 
    push           0          u64 
    jumpne         #5049      u64 
    push           0          u64 
    setret                    u64 
    jump           #5048      
#5049: 
    setargs                   4 0
    push           mlibp.readfile.size i64 
    push           0          i64 
    push           mlibp.readfile.m u64 
    push           mlibp.readfile.f u64 
    callproc       &mlibp.readrandom 
    push           mlibp.readfile.m u64 
    push           mlibp.readfile.size i64 
    addrefoff                 u64 1 0
    pop            mlibp.readfile.p u64 
    push           0          i64 
    push           mlibp.readfile.p u64 
    popptr                    u8 
    push           26         i64 
    push           mlibp.readfile.p u64 
    push           1          i64 
    popptroff                 u8 1 0
    push           0          i64 
    push           mlibp.readfile.p u64 
    push           2          i64 
    popptroff                 u8 1 0
    setargs                   1 0
    push           mlibp.readfile.f u64 
    callproc       &fclose    
    push           mlibp.readfile.m u64 
    setret                    u64 
    jump           #5048      
#5048: 
    retfn                     u64 
End


Proc mlibp.writefile: i64
    param          mlibp.writefile.filename u64 
    param          mlibp.writefile.data u64 
    param          mlibp.writefile.size i64 
    local          mlibp.writefile.f u64 
    local          mlibp.writefile.n i64 
    procentry                 
    setargs                   2 0
    push           "wb"       u64 
    push           mlibp.writefile.filename u64 
    callfn         &fopen     u64 
    pop            mlibp.writefile.f u64 
    push           mlibp.writefile.f u64 
    push           0          u64 
    jumpne         #5051      u64 
    push           0          i64 
    setret                    i64 
    jump           #5052      
#5051: 
    setargs                   4 0
    push           mlibp.writefile.size i64 
    push           0          i64 
    push           mlibp.writefile.data u64 
    push           mlibp.writefile.f u64 
    callfn         &mlibp.writerandom i64 
    pop            mlibp.writefile.n i64 
    setargs                   1 0
    push           mlibp.writefile.f u64 
    callproc       &fclose    
    push           mlibp.writefile.n i64 
    setret                    i64 
    jump           #5052      
#5052: 
    retfn                     i64 
End


Proc mlibp.checkfile: i64
    param          mlibp.checkfile.file u64 
    local          mlibp.checkfile.f u64 
    procentry                 
    setargs                   2 0
    push           "rb"       u64 
    push           mlibp.checkfile.file u64 
    callfn         &fopen     u64 
    store          mlibp.checkfile.f u64 
    jumpfalse      #5054      u64 
    setargs                   1 0
    push           mlibp.checkfile.f u64 
    callproc       &fclose    
    push           1          i64 
    setret                    i64 
    jump           #5055      
#5054: 
    push           0          i64 
    setret                    i64 
    jump           #5055      
#5055: 
    retfn                     i64 
End


Proc mlibp.readlinen:
    param          mlibp.readlinen.handlex u64 
    param          mlibp.readlinen.buffer u64 
    param          mlibp.readlinen.size i64 
    local          mlibp.readlinen.ch i64 
    local          mlibp.readlinen.p u64 
    local          mlibp.readlinen.n i64 
    local          mlibp.readlinen.buff block:100 
    local          mlibp.readlinen.crseen u8 
    procentry                 
    push           mlibp.readlinen.handlex u64 
    push           0          u64 
    jumpne         #5057      u64 
    setargs                   0 0
    callfn         &mwindowsp.os_getstdin u64 
    pop            mlibp.readlinen.handlex u64 
#5057: 
    push           mlibp.readlinen.handlex u64 
    push           0          u64 
    jumpne         #5058      u64 
    push           0          i64 
    pop            mlibp.readlinen.n i64 
    push           mlibp.readlinen.buffer u64 
    pop            mlibp.readlinen.p u64 
#5059: 
    setargs                   0 0
    callfn         &getchar   i32 
    pop            mlibp.readlinen.ch i64 
    push           mlibp.readlinen.ch i64 
    push           13         i64 
    jumpeq         #5060      i64 
    push           mlibp.readlinen.ch i64 
    push           10         i64 
    jumpeq         #5060      i64 
    push           mlibp.readlinen.ch i64 
    push           -1         i64 
    jumpne         #5061      i64 
#5060: 
    push           0          u64 
    push           mlibp.readlinen.p u64 
    popptr                    u8 
    jump           #5062      
#5061: 
    push           mlibp.readlinen.ch u64 
    push           &mlibp.readlinen.p 
    loadincr                  u64 1
    popptr                    u8 
    push           &mlibp.readlinen.n 
    incr                      i64 1
    push           mlibp.readlinen.n i64 
    push           mlibp.readlinen.size i64 
    push           2          i64 
    sub                       i64 
    jumplt         #5063      i64 
    push           0          u64 
    push           mlibp.readlinen.p u64 
    popptr                    u8 
    jump           #5062      
#5063: 
    jump           #5059      
#5064: 
#5058: 
    push           0          u64 
    push           mlibp.readlinen.buffer u64 
    popptr                    u8 
    setargs                   3 0
    push           mlibp.readlinen.handlex u64 
    push           mlibp.readlinen.size i64 
    push           2          i64 
    sub                       i64 
    push           mlibp.readlinen.buffer u64 
    callfn         &fgets     u64 
    push           0          u64 
    jumpne         #5065      u64 
    jump           #5062      
#5065: 
    setargs                   1 0
    push           mlibp.readlinen.buffer u64 
    callfn         &strlen    i64 
    pop            mlibp.readlinen.n i64 
    push           mlibp.readlinen.n i64 
    push           0          i64 
    jumpne         #5066      i64 
    jump           #5062      
#5066: 
    push           mlibp.readlinen.buffer u64 
    push           mlibp.readlinen.n i64 
    addrefoff                 u64 1 -1
    pop            mlibp.readlinen.p u64 
    push           0          i64 
    pop            mlibp.readlinen.crseen u8 
    jump           #5067      
#5068: 
    push           mlibp.readlinen.p u64 
    pushptr                   u8 
    push           13         i64 
    jumpeq         #5069      i64 
    push           mlibp.readlinen.p u64 
    pushptr                   u8 
    push           10         i64 
    jumpne         #5070      i64 
#5069: 
    push           1          i64 
    pop            mlibp.readlinen.crseen u8 
#5070: 
    push           0          u64 
    push           &mlibp.readlinen.p 
    loaddecr                  u64 1
    popptr                    u8 
#5067: 
    push           mlibp.readlinen.p u64 
    push           mlibp.readlinen.buffer u64 
    jumplt         #5071      u64 
    push           mlibp.readlinen.p u64 
    pushptr                   u8 
    push           13         i64 
    jumpeq         #5068      i64 
    push           mlibp.readlinen.p u64 
    pushptr                   u8 
    push           10         i64 
    jumpeq         #5068      i64 
#5071: 
#5072: 
    push           mlibp.readlinen.crseen u8 
    jumptrue       #5073      i64 
    push           mlibp.readlinen.n i64 
    push           4          i64 
    add                       i64 
    push           mlibp.readlinen.size i64 
    jumple         #5073      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mlibp.readlinen.size i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           mlibp.readlinen.n i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "line too long" u64 
    callproc       &mlibp.abortprogram 
#5073: 
#5062: 
    retproc                   
End


Proc mlibp.iconvlcn:
    param          mlibp.iconvlcn.s u64 
    param          mlibp.iconvlcn.n i64 
    local          mlibp.iconvlcn.av_1 i64 
    procentry                 
#5075: 
    push           mlibp.iconvlcn.n i64 
    pop            mlibp.iconvlcn.av_1 i64 
    push           mlibp.iconvlcn.av_1 i64 
    push           0          i64 
    jumple         #5076      i64 
#5077: 
    setargs                   1 0
    push           mlibp.iconvlcn.s u64 
    pushptr                   u8 
    callfn         &tolower   i32 
    push           mlibp.iconvlcn.s u64 
    popptr                    u8 
    push           &mlibp.iconvlcn.s 
    incr                      u64 1
#5078: 
    to             #5077      
    opnd           mlibp.iconvlcn.av_1 
#5076: 
#5079: 
    retproc                   
End


Proc mlibp.iconvucn:
    param          mlibp.iconvucn.s u64 
    param          mlibp.iconvucn.n i64 
    local          mlibp.iconvucn.av_1 i64 
    procentry                 
#5081: 
    push           mlibp.iconvucn.n i64 
    pop            mlibp.iconvucn.av_1 i64 
    push           mlibp.iconvucn.av_1 i64 
    push           0          i64 
    jumple         #5082      i64 
#5083: 
    setargs                   1 0
    push           mlibp.iconvucn.s u64 
    pushptr                   u8 
    callfn         &toupper   i32 
    push           mlibp.iconvucn.s u64 
    popptr                    u8 
    push           &mlibp.iconvucn.s 
    incr                      u64 1
#5084: 
    to             #5083      
    opnd           mlibp.iconvucn.av_1 
#5082: 
#5085: 
    retproc                   
End


Proc mlibp.convlcstring: u64
    param          mlibp.convlcstring.s u64 
    local          mlibp.convlcstring.s0 u64 
    procentry                 
    push           mlibp.convlcstring.s u64 
    pop            mlibp.convlcstring.s0 u64 
    jump           #5087      
#5088: 
    setargs                   1 0
    push           mlibp.convlcstring.s u64 
    pushptr                   u8 
    callfn         &tolower   i32 
    push           mlibp.convlcstring.s u64 
    popptr                    u8 
    push           &mlibp.convlcstring.s 
    incr                      u64 1
#5087: 
    push           mlibp.convlcstring.s u64 
    pushptr                   u8 
    jumptrue       #5088      u64 
#5089: 
    push           mlibp.convlcstring.s0 u64 
    setret                    u64 
    jump           #5090      
#5090: 
    retfn                     u64 
End


Proc mlibp.convucstring: u64
    param          mlibp.convucstring.s u64 
    local          mlibp.convucstring.s0 u64 
    procentry                 
    push           mlibp.convucstring.s u64 
    pop            mlibp.convucstring.s0 u64 
    jump           #5092      
#5093: 
    setargs                   1 0
    push           mlibp.convucstring.s u64 
    pushptr                   u8 
    callfn         &toupper   i32 
    push           mlibp.convucstring.s u64 
    popptr                    u8 
    push           &mlibp.convucstring.s 
    incr                      u64 1
#5092: 
    push           mlibp.convucstring.s u64 
    pushptr                   u8 
    jumptrue       #5093      u64 
#5094: 
    push           mlibp.convucstring.s0 u64 
    setret                    u64 
    jump           #5095      
#5095: 
    retfn                     u64 
End


Proc mlibp.changeext: u64
    param          mlibp.changeext.s u64 
    param          mlibp.changeext.newext u64 
    local          mlibp.changeext.newext2 block:32 
    local          mlibp.changeext.sext u64 
    local          mlibp.changeext.n i64 
    procentry                 
    setargs                   2 0
    push           mlibp.changeext.s u64 
    push           &mlibp.changeext.newfile 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcpy    
    push           mlibp.changeext.newext u64 
    pushptr                   u8 
    push           0          u64 
    casejumpeq     #5097      u64 0
    push           46         u64 
    casejumpeq     #5098      u64 0
    popstack                  u64 
    jump           #5099      
#5097: 
    push           0          u64 
    push           &mlibp.changeext.newext2 
    push           1          i64 
    popptroff                 u8 1 -1
    push           0          u64 
    push           &mlibp.changeext.newext2 
    push           2          i64 
    popptroff                 u8 1 -1
    jump           #5100      
#5098: 
    setargs                   2 0
    push           mlibp.changeext.newext u64 
    push           &mlibp.changeext.newext2 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcpy    
    jump           #5100      
#5099: 
    setargs                   2 0
    push           "."        u64 
    push           &mlibp.changeext.newext2 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcpy    
    setargs                   2 0
    push           mlibp.changeext.newext u64 
    push           &mlibp.changeext.newext2 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcat    
#5100: 
    setargs                   2 0
    push           1          i64 
    push           mlibp.changeext.s u64 
    callfn         &mlibp.extractext u64 
    pop            mlibp.changeext.sext u64 
    push           mlibp.changeext.sext u64 
    pushptr                   u8 
    push           0          u64 
    casejumpeq     #5101      u64 0
    push           46         u64 
    casejumpeq     #5102      u64 0
    popstack                  u64 
    jump           #5103      
#5101: 
    setargs                   2 0
    push           &mlibp.changeext.newext2 
    push           0          
    addrefoff                 u8 1 0
    push           &mlibp.changeext.newfile 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcat    
    jump           #5104      
#5102: 
    setargs                   2 0
    push           &mlibp.changeext.newext2 
    push           1          
    addrefoff                 u8 1 0
    push           &mlibp.changeext.newfile 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcat    
    jump           #5104      
#5103: 
    push           mlibp.changeext.sext u64 
    push           mlibp.changeext.s u64 
    subref                    i64 1
    push           2          i64 
    sub                       i64 
    pop            mlibp.changeext.n i64 
    setargs                   2 0
    push           &mlibp.changeext.newext2 
    push           0          
    addrefoff                 u8 1 0
    push           &mlibp.changeext.newfile 
    push           0          
    addrefoff                 u8 1 0
    push           mlibp.changeext.n i64 
    addrefoff                 u64 1 1
    callproc       &strcpy    
#5104: 
    push           &mlibp.changeext.newfile 
    push           0          
    addrefoff                 u8 1 0
    setret                    u64 
    jump           #5105      
#5105: 
    retfn                     u64 
End


Proc mlibp.extractext: u64
    param          mlibp.extractext.s u64 
    param          mlibp.extractext.period i64 
    local          mlibp.extractext.t u64 
    local          mlibp.extractext.u u64 
    procentry                 
    setargs                   1 0
    push           mlibp.extractext.s u64 
    callfn         &mlibp.extractfile u64 
    pop            mlibp.extractext.t u64 
    push           mlibp.extractext.t u64 
    pushptr                   u8 
    push           0          i64 
    jumpne         #5107      i64 
    push           ""         u64 
    setret                    u64 
    jump           #5108      
#5107: 
    push           mlibp.extractext.t u64 
    setargs                   1 0
    push           mlibp.extractext.t u64 
    callfn         &strlen    i64 
    addrefoff                 u64 1 -1
    pop            mlibp.extractext.u u64 
    jump           #5109      
#5110: 
    push           mlibp.extractext.u u64 
    pushptr                   u8 
    push           46         u64 
    jumpne         #5111      u64 
    push           mlibp.extractext.u u64 
    push           1          i64 
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #5112      i64 
    startmult                 
    push           mlibp.extractext.period i64 
    jumpfalse      #5113      i64 
    push           "."        u64 
    resetmult                 
    jump           #5114      
#5113: 
    push           ""         u64 
    endmult                   
#5114: 
    setret                    u64 
    jump           #5108      
#5112: 
    push           mlibp.extractext.u u64 
    push           1          i64 
    addrefoff                 u64 1 0
    setret                    u64 
    jump           #5108      
#5111: 
    push           &mlibp.extractext.u 
    decr                      u64 1
#5109: 
    push           mlibp.extractext.u u64 
    push           mlibp.extractext.t u64 
    jumpge         #5110      u64 
#5115: 
    push           ""         u64 
    setret                    u64 
    jump           #5108      
#5108: 
    retfn                     u64 
End


Proc mlibp.extractpath: u64
    param          mlibp.extractpath.s u64 
    local          mlibp.extractpath.t u64 
    local          mlibp.extractpath.n i64 
    procentry                 
    push           mlibp.extractpath.s u64 
    setargs                   1 0
    push           mlibp.extractpath.s u64 
    callfn         &strlen    i64 
    addrefoff                 u64 1 -1
    pop            mlibp.extractpath.t u64 
    jump           #5117      
#5118: 
    push           mlibp.extractpath.t u64 
    pushptr                   u8 
    switch         #5119      47 92
    opnd           #5120      
#5119: 
    switchlabel    #5121      
    switchlabel    #5120      
    switchlabel    #5120      
    switchlabel    #5120      
    switchlabel    #5120      
    switchlabel    #5120      
    switchlabel    #5120      
    switchlabel    #5120      
    switchlabel    #5120      
    switchlabel    #5120      
    switchlabel    #5120      
    switchlabel    #5121      
    switchlabel    #5120      
    switchlabel    #5120      
    switchlabel    #5120      
    switchlabel    #5120      
    switchlabel    #5120      
    switchlabel    #5120      
    switchlabel    #5120      
    switchlabel    #5120      
    switchlabel    #5120      
    switchlabel    #5120      
    switchlabel    #5120      
    switchlabel    #5120      
    switchlabel    #5120      
    switchlabel    #5120      
    switchlabel    #5120      
    switchlabel    #5120      
    switchlabel    #5120      
    switchlabel    #5120      
    switchlabel    #5120      
    switchlabel    #5120      
    switchlabel    #5120      
    switchlabel    #5120      
    switchlabel    #5120      
    switchlabel    #5120      
    switchlabel    #5120      
    switchlabel    #5120      
    switchlabel    #5120      
    switchlabel    #5120      
    switchlabel    #5120      
    switchlabel    #5120      
    switchlabel    #5120      
    switchlabel    #5120      
    switchlabel    #5120      
    switchlabel    #5121      
    endswitch                 
#5121: 
    push           mlibp.extractpath.t u64 
    push           mlibp.extractpath.s u64 
    subref                    i64 1
    push           1          i64 
    add                       i64 
    pop            mlibp.extractpath.n i64 
    setargs                   3 0
    push           mlibp.extractpath.n u64 
    push           mlibp.extractpath.s u64 
    push           &mlibp.extractpath.str 
    callproc       &memcpy    
    push           0          u64 
    push           &mlibp.extractpath.str 
    push           mlibp.extractpath.n i64 
    popptroff                 u8 1 0
    push           &mlibp.extractpath.str 
    setret                    u64 
    jump           #5122      
    jump           #5123      
#5120: 
#5123: 
    push           &mlibp.extractpath.t 
    decr                      u64 1
#5117: 
    push           mlibp.extractpath.t u64 
    push           mlibp.extractpath.s u64 
    jumpge         #5118      u64 
#5124: 
    push           ""         u64 
    setret                    u64 
    jump           #5122      
#5122: 
    retfn                     u64 
End


Proc mlibp.extractfile: u64
    param          mlibp.extractfile.s u64 
    local          mlibp.extractfile.t u64 
    procentry                 
    setargs                   1 0
    push           mlibp.extractfile.s u64 
    callfn         &mlibp.extractpath u64 
    pop            mlibp.extractfile.t u64 
    push           mlibp.extractfile.t u64 
    pushptr                   u8 
    push           0          i64 
    jumpne         #5126      i64 
    push           mlibp.extractfile.s u64 
    setret                    u64 
    jump           #5127      
#5126: 
    push           mlibp.extractfile.s u64 
    setargs                   1 0
    push           mlibp.extractfile.t u64 
    callfn         &strlen    i64 
    addrefoff                 u64 1 0
    setret                    u64 
    jump           #5127      
#5127: 
    retfn                     u64 
End


Proc mlibp.extractbasefile: u64
    param          mlibp.extractbasefile.s u64 
    local          mlibp.extractbasefile.f u64 
    local          mlibp.extractbasefile.e u64 
    local          mlibp.extractbasefile.n i64 
    local          mlibp.extractbasefile.flen i64 
    procentry                 
    setargs                   1 0
    push           mlibp.extractbasefile.s u64 
    callfn         &mlibp.extractfile u64 
    pop            mlibp.extractbasefile.f u64 
    setargs                   1 0
    push           mlibp.extractbasefile.f u64 
    callfn         &strlen    i64 
    pop            mlibp.extractbasefile.flen i64 
    push           mlibp.extractbasefile.flen i64 
    push           0          i64 
    jumpne         #5129      i64 
    push           ""         u64 
    setret                    u64 
    jump           #5130      
#5129: 
    setargs                   2 0
    push           0          i64 
    push           mlibp.extractbasefile.f u64 
    callfn         &mlibp.extractext u64 
    pop            mlibp.extractbasefile.e u64 
    push           mlibp.extractbasefile.e u64 
    pushptr                   u8 
    jumpfalse      #5131      u64 
    push           mlibp.extractbasefile.flen i64 
    setargs                   1 0
    push           mlibp.extractbasefile.e u64 
    callfn         &strlen    i64 
    sub                       i64 
    push           1          i64 
    sub                       i64 
    pop            mlibp.extractbasefile.n i64 
    setargs                   3 0
    push           mlibp.extractbasefile.n u64 
    push           mlibp.extractbasefile.f u64 
    push           &mlibp.extractbasefile.str 
    callproc       &memcpy    
    push           0          u64 
    push           &mlibp.extractbasefile.str 
    push           mlibp.extractbasefile.n i64 
    popptroff                 u8 1 0
    push           &mlibp.extractbasefile.str 
    setret                    u64 
    jump           #5130      
#5131: 
    push           mlibp.extractbasefile.f u64 
    push           mlibp.extractbasefile.flen i64 
    pushptroff                u8 1 -1
    push           46         u64 
    jumpne         #5132      u64 
    setargs                   3 0
    push           mlibp.extractbasefile.flen i64 
    push           1          i64 
    sub                       u64 
    push           mlibp.extractbasefile.f u64 
    push           &mlibp.extractbasefile.str 
    callproc       &memcpy    
    push           0          u64 
    push           &mlibp.extractbasefile.str 
    push           mlibp.extractbasefile.flen i64 
    popptroff                 u8 1 -1
    push           &mlibp.extractbasefile.str 
    setret                    u64 
    jump           #5130      
#5132: 
    push           mlibp.extractbasefile.f u64 
    setret                    u64 
    jump           #5130      
#5130: 
    retfn                     u64 
End


Proc mlibp.addext: u64
    param          mlibp.addext.s u64 
    param          mlibp.addext.newext u64 
    local          mlibp.addext.sext u64 
    procentry                 
    setargs                   2 0
    push           1          i64 
    push           mlibp.addext.s u64 
    callfn         &mlibp.extractext u64 
    pop            mlibp.addext.sext u64 
    push           mlibp.addext.sext u64 
    pushptr                   u8 
    push           0          i64 
    jumpne         #5134      i64 
    setargs                   2 0
    push           mlibp.addext.newext u64 
    push           mlibp.addext.s u64 
    callfn         &mlibp.changeext u64 
    setret                    u64 
    jump           #5135      
#5134: 
    push           mlibp.addext.s u64 
    setret                    u64 
    jump           #5135      
#5135: 
    retfn                     u64 
End


Proc mlibp.alloctable: u64
    param          mlibp.alloctable.n i64 
    param          mlibp.alloctable.size i64 
    local          mlibp.alloctable.p u64 
    procentry                 
    setargs                   1 0
    push           mlibp.alloctable.n i64 
    push           1          i64 
    add                       i64 
    push           mlibp.alloctable.size i64 
    mul                       u64 
    callfn         &malloc    u64 
    pop            mlibp.alloctable.p u64 
    push           mlibp.alloctable.p u64 
    jumptrue       #5137      u64 
    setargs                   1 0
    push           "Alloctable failure" u64 
    callproc       &mlibp.abortprogram 
#5137: 
    push           mlibp.alloctable.p u64 
    setret                    u64 
    jump           #5138      
#5138: 
    retfn                     u64 
End


Proc mlibp.zalloctable: u64
    param          mlibp.zalloctable.n i64 
    param          mlibp.zalloctable.size i64 
    local          mlibp.zalloctable.p u64 
    procentry                 
    setargs                   2 0
    push           mlibp.zalloctable.size i64 
    push           mlibp.zalloctable.n i64 
    callfn         &mlibp.alloctable u64 
    pop            mlibp.zalloctable.p u64 
    setargs                   2 0
    push           mlibp.zalloctable.n i64 
    push           1          i64 
    add                       i64 
    push           mlibp.zalloctable.size i64 
    mul                       i64 
    push           mlibp.zalloctable.p u64 
    callproc       &mlibp.pcm_clearmem 
    push           mlibp.zalloctable.p u64 
    setret                    u64 
    jump           #5140      
#5140: 
    retfn                     u64 
End


Proc mlibp.checkfreelists:
    param          mlibp.checkfreelists.s u64 
    local          mlibp.checkfreelists.p u64 
    local          mlibp.checkfreelists.q u64 
    local          mlibp.checkfreelists.aa i64 
    local          mlibp.checkfreelists.i i64 
    procentry                 
#5142: 
    push           2          i64 
    pop            mlibp.checkfreelists.i i64 
#5143: 
    push           &mlibp.freelist 
    push           mlibp.checkfreelists.i i64 
    pushptroff                u64 8 0
    pop            mlibp.checkfreelists.p u64 
    jump           #5144      
#5145: 
    push           mlibp.checkfreelists.p i64 
    pop            mlibp.checkfreelists.aa i64 
    push           mlibp.checkfreelists.aa i64 
    push           4294967295 i64 
    jumpgt         #5146      i64 
    push           mlibp.checkfreelists.aa i64 
    push           100        i64 
    jumpge         #5147      i64 
#5146: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mlibp.checkfreelists.s u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "FREE LIST ERROR" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mlibp.checkfreelists.i i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           mlibp.checkfreelists.p u64 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   1 0
    push           mlibp.checkfreelists.q u64 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#5147: 
    push           mlibp.checkfreelists.p u64 
    pop            mlibp.checkfreelists.q u64 
    push           mlibp.checkfreelists.p u64 
    pushptr                   u64 
    pop            mlibp.checkfreelists.p u64 
#5144: 
    push           mlibp.checkfreelists.p u64 
    jumptrue       #5145      u64 
#5148: 
#5149: 
    forup          #5143      i64 1
    opnd           mlibp.checkfreelists.i 
    opnd           2          
#5150: 
#5151: 
    retproc                   
End


Proc mlibp.pcm_alloc32: u64
    local          mlibp.pcm_alloc32.p u64 
    procentry                 
    push           32         i64 
    pop            mlibp.allocbytes i64 
    push           &mlibp.smallmemtotal 
    push           32         i64 
    addto                     i64 
    push           &mlibp.freelist 
    push           2          i64 
    pushptroff                u64 8 0
    store          mlibp.pcm_alloc32.p u64 
    jumpfalse      #5153      u64 
    push           &mlibp.freelist 
    push           2          i64 
    pushptroff                u64 8 0
    pushptr                   u64 
    push           &mlibp.freelist 
    push           2          i64 
    popptroff                 u64 8 0
    push           mlibp.pcm_alloc32.p u64 
    setret                    u64 
    jump           #5154      
#5153: 
    setargs                   1 0
    push           32         i64 
    callfn         &mlibp.pcm_alloc u64 
    setret                    u64 
    jump           #5154      
#5154: 
    retfn                     u64 
End


Proc mlibp.pcm_free32:
    param          mlibp.pcm_free32.p u64 
    procentry                 
    push           &mlibp.smallmemtotal 
    push           32         i64 
    subto                     i64 
    push           &mlibp.freelist 
    push           2          i64 
    pushptroff                u64 8 0
    push           mlibp.pcm_free32.p u64 
    popptr                    u64 
    push           mlibp.pcm_free32.p u64 
    push           &mlibp.freelist 
    push           2          i64 
    popptroff                 u64 8 0
#5156: 
    retproc                   
End


Proc mlibp.outbyte:
    param          mlibp.outbyte.f u64 
    param          mlibp.outbyte.x i64 
    procentry                 
    setargs                   4 0
    push           mlibp.outbyte.f u64 
    push           1          u64 
    push           1          u64 
    push           &mlibp.outbyte.x 
    callproc       &fwrite    
#5158: 
    retproc                   
End


Proc mlibp.outword16:
    param          mlibp.outword16.f u64 
    param          mlibp.outword16.x u64 
    procentry                 
    setargs                   4 0
    push           mlibp.outword16.f u64 
    push           1          u64 
    push           2          u64 
    push           &mlibp.outword16.x 
    callproc       &fwrite    
#5160: 
    retproc                   
End


Proc mlibp.outword:
    param          mlibp.outword.f u64 
    param          mlibp.outword.x u64 
    procentry                 
    setargs                   4 0
    push           mlibp.outword.f u64 
    push           1          u64 
    push           4          u64 
    push           &mlibp.outword.x 
    callproc       &fwrite    
#5162: 
    retproc                   
End


Proc mlibp.outword64:
    param          mlibp.outword64.f u64 
    param          mlibp.outword64.x u64 
    procentry                 
    setargs                   4 0
    push           mlibp.outword64.f u64 
    push           1          u64 
    push           8          u64 
    push           &mlibp.outword64.x 
    callproc       &fwrite    
#5164: 
    retproc                   
End


Proc mlibp.myeof: i64
    param          mlibp.myeof.f u64 
    local          mlibp.myeof.c i64 
    procentry                 
    setargs                   1 0
    push           mlibp.myeof.f u64 
    callfn         &fgetc     i32 
    pop            mlibp.myeof.c i64 
    push           mlibp.myeof.c i64 
    push           -1         i64 
    jumpne         #5166      i64 
    push           1          i64 
    setret                    i64 
    jump           #5167      
#5166: 
    setargs                   2 0
    push           mlibp.myeof.f u64 
    push           mlibp.myeof.c i64 
    callproc       &ungetc    
    push           0          i64 
    setret                    i64 
    jump           #5167      
#5167: 
    retfn                     i64 
End


Proc mlibp.pcm_smallallocz: u64
    param          mlibp.pcm_smallallocz.n i64 
    local          mlibp.pcm_smallallocz.p u64 
    procentry                 
    push           &mlibp.allocupper 
    push           &mlibp.sizeindextable 
    push           mlibp.pcm_smallallocz.n i64 
    pushptroff                u8 1 0
    store          mlibp.alloccode i64 
    pushptroff                i64 8 0
    pop            mlibp.allocbytes i64 
    push           mlibp.pcheapptr u64 
    pop            mlibp.pcm_smallallocz.p u64 
    push           &mlibp.pcheapptr 
    push           mlibp.allocbytes i64 
    addrefoffto               u64 1 0
    push           mlibp.pcheapptr u64 
    push           mlibp.pcheapend u64 
    jumplt         #5169      u64 
    setargs                   1 0
    push           mlibp.allocbytes i64 
    callfn         &mlibp.pcm_newblock u64 
    pop            mlibp.pcm_smallallocz.p u64 
    setargs                   3 0
    push           mlibp.pcm_smallallocz.n u64 
    push           0          i64 
    push           mlibp.pcm_smallallocz.p u64 
    callproc       &memset    
    push           mlibp.pcm_smallallocz.p u64 
    setret                    u64 
    jump           #5170      
#5169: 
    setargs                   3 0
    push           mlibp.pcm_smallallocz.n u64 
    push           0          i64 
    push           mlibp.pcm_smallallocz.p u64 
    callproc       &memset    
    push           mlibp.pcm_smallallocz.p u64 
    setret                    u64 
    jump           #5170      
#5170: 
    retfn                     u64 
End


Proc mlibp.pcm_smallalloc: u64
    param          mlibp.pcm_smallalloc.n i64 
    local          mlibp.pcm_smallalloc.p u64 
    procentry                 
    push           &mlibp.allocupper 
    push           &mlibp.sizeindextable 
    push           mlibp.pcm_smallalloc.n i64 
    pushptroff                u8 1 0
    store          mlibp.alloccode i64 
    pushptroff                i64 8 0
    pop            mlibp.allocbytes i64 
    push           mlibp.pcheapptr u64 
    pop            mlibp.pcm_smallalloc.p u64 
    push           &mlibp.pcheapptr 
    push           mlibp.allocbytes i64 
    addrefoffto               u64 1 0
    push           mlibp.pcheapptr u64 
    push           mlibp.pcheapend u64 
    jumplt         #5172      u64 
    setargs                   1 0
    push           mlibp.allocbytes i64 
    callfn         &mlibp.pcm_newblock u64 
    pop            mlibp.pcm_smallalloc.p u64 
    push           mlibp.pcm_smallalloc.p u64 
    setret                    u64 
    jump           #5173      
#5172: 
    push           mlibp.pcm_smallalloc.p u64 
    setret                    u64 
    jump           #5173      
#5173: 
    retfn                     u64 
End


Proc mlibp.strbuffer_add:
    param          mlibp.strbuffer_add.dest u64 
    param          mlibp.strbuffer_add.s u64 
    param          mlibp.strbuffer_add.n i64 
    local          mlibp.strbuffer_add.newlen i64 
    local          mlibp.strbuffer_add.oldlen i64 
    local          mlibp.strbuffer_add.newptr u64 
    procentry                 
    push           mlibp.strbuffer_add.n i64 
    push           0          i64 
    jumpne         #5175      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "N=0"      u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#5175: 
    push           mlibp.strbuffer_add.n i64 
    push           -1         i64 
    jumpne         #5176      i64 
    setargs                   1 0
    push           mlibp.strbuffer_add.s u64 
    callfn         &strlen    i64 
    pop            mlibp.strbuffer_add.n i64 
#5176: 
    push           mlibp.strbuffer_add.dest u64 
    push           8          
    pushptroff                i32 1 0
    pop            mlibp.strbuffer_add.oldlen i64 
    push           mlibp.strbuffer_add.oldlen i64 
    push           0          i64 
    jumpne         #5177      i64 
    setargs                   1 0
    push           mlibp.strbuffer_add.n i64 
    push           1          i64 
    add                       i64 
    callfn         &mlibp.pcm_alloc u64 
    push           mlibp.strbuffer_add.dest u64 
    push           0          
    popptroff                 u64 1 0
    push           mlibp.allocbytes i64 
    push           mlibp.strbuffer_add.dest u64 
    push           12         
    popptroff                 i32 1 0
    push           mlibp.strbuffer_add.n i64 
    push           mlibp.strbuffer_add.dest u64 
    push           8          
    popptroff                 i32 1 0
    setargs                   3 0
    push           mlibp.strbuffer_add.n u64 
    push           mlibp.strbuffer_add.s u64 
    push           mlibp.strbuffer_add.dest u64 
    pushptr                   u64 
    callproc       &memcpy    
    push           0          u64 
    push           mlibp.strbuffer_add.dest u64 
    pushptr                   u64 
    push           mlibp.strbuffer_add.n i64 
    popptroff                 u8 1 0
    jump           #5178      
#5177: 
    push           mlibp.strbuffer_add.oldlen i64 
    push           mlibp.strbuffer_add.n i64 
    add                       i64 
    pop            mlibp.strbuffer_add.newlen i64 
    push           mlibp.strbuffer_add.newlen i64 
    push           1          i64 
    add                       i64 
    push           mlibp.strbuffer_add.dest u64 
    push           12         
    pushptroff                i32 1 0
    jumple         #5179      i64 
    setargs                   1 0
    push           mlibp.strbuffer_add.newlen i64 
    push           1          i64 
    add                       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            mlibp.strbuffer_add.newptr u64 
    setargs                   3 0
    push           mlibp.strbuffer_add.oldlen u64 
    push           mlibp.strbuffer_add.dest u64 
    pushptr                   u64 
    push           mlibp.strbuffer_add.newptr u64 
    callproc       &memcpy    
    push           mlibp.strbuffer_add.newptr u64 
    push           mlibp.strbuffer_add.dest u64 
    push           0          
    popptroff                 u64 1 0
    push           mlibp.allocbytes i64 
    push           mlibp.strbuffer_add.dest u64 
    push           12         
    popptroff                 i32 1 0
#5179: 
    setargs                   3 0
    push           mlibp.strbuffer_add.n u64 
    push           mlibp.strbuffer_add.s u64 
    push           mlibp.strbuffer_add.dest u64 
    pushptr                   u64 
    push           mlibp.strbuffer_add.oldlen i64 
    addrefoff                 u64 1 0
    callproc       &memcpy    
    push           0          u64 
    push           mlibp.strbuffer_add.dest u64 
    pushptr                   u64 
    push           mlibp.strbuffer_add.newlen i64 
    popptroff                 u8 1 0
    push           mlibp.strbuffer_add.newlen i64 
    push           mlibp.strbuffer_add.dest u64 
    push           8          
    popptroff                 i32 1 0
#5178: 
    retproc                   
End


Proc mlibp.gs_init:
    param          mlibp.gs_init.dest u64 
    procentry                 
    setargs                   2 0
    push           16         i64 
    push           mlibp.gs_init.dest u64 
    callproc       &mlibp.pcm_clearmem 
#5181: 
    retproc                   
End


Proc mlibp.gs_free:
    param          mlibp.gs_free.dest u64 
    procentry                 
    push           mlibp.gs_free.dest u64 
    push           12         
    pushptroff                i32 1 0
    jumpfalse      #5183      i64 
    setargs                   2 0
    push           mlibp.gs_free.dest u64 
    push           12         
    pushptroff                i32 1 0
    push           mlibp.gs_free.dest u64 
    pushptr                   u64 
    callproc       &mlibp.pcm_free 
#5183: 
#5184: 
    retproc                   
End


Proc mlibp.gs_str:
    param          mlibp.gs_str.dest u64 
    param          mlibp.gs_str.s u64 
    procentry                 
    setargs                   3 0
    push           -1         i64 
    push           mlibp.gs_str.s u64 
    push           mlibp.gs_str.dest u64 
    callproc       &mlibp.strbuffer_add 
#5186: 
    retproc                   
End


Proc mlibp.gs_char:
    param          mlibp.gs_char.dest u64 
    param          mlibp.gs_char.c i64 
    local          mlibp.gs_char.s block:16 
    procentry                 
    push           mlibp.gs_char.c u64 
    push           &mlibp.gs_char.s 
    push           1          i64 
    popptroff                 u8 1 -1
    push           0          u64 
    push           &mlibp.gs_char.s 
    push           2          i64 
    popptroff                 u8 1 -1
    setargs                   3 0
    push           1          i64 
    push           &mlibp.gs_char.s 
    push           mlibp.gs_char.dest u64 
    callproc       &mlibp.strbuffer_add 
#5188: 
    retproc                   
End


Proc mlibp.gs_strn:
    param          mlibp.gs_strn.dest u64 
    param          mlibp.gs_strn.s u64 
    param          mlibp.gs_strn.length i64 
    procentry                 
    setargs                   3 0
    push           mlibp.gs_strn.length i64 
    push           mlibp.gs_strn.s u64 
    push           mlibp.gs_strn.dest u64 
    callproc       &mlibp.strbuffer_add 
#5190: 
    retproc                   
End


Proc mlibp.gs_strvar:
    param          mlibp.gs_strvar.dest u64 
    param          mlibp.gs_strvar.s u64 
    procentry                 
    setargs                   3 0
    push           -1         i64 
    push           mlibp.gs_strvar.s u64 
    pushptr                   u64 
    push           mlibp.gs_strvar.dest u64 
    callproc       &mlibp.strbuffer_add 
#5192: 
    retproc                   
End


Proc mlibp.gs_strint:
    param          mlibp.gs_strint.dest u64 
    param          mlibp.gs_strint.a i64 
    procentry                 
    setargs                   3 0
    push           -1         i64 
    setargs                   2 0
    push           0          u64 
    push           mlibp.gs_strint.a i64 
    callfn         &msysp.strint u64 
    push           mlibp.gs_strint.dest u64 
    callproc       &mlibp.strbuffer_add 
#5194: 
    retproc                   
End


Proc mlibp.gs_strln:
    param          mlibp.gs_strln.dest u64 
    param          mlibp.gs_strln.s u64 
    procentry                 
    setargs                   2 0
    push           mlibp.gs_strln.s u64 
    push           mlibp.gs_strln.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   1 0
    push           mlibp.gs_strln.dest u64 
    callproc       &mlibp.gs_line 
#5196: 
    retproc                   
End


Proc mlibp.gs_strsp:
    param          mlibp.gs_strsp.dest u64 
    param          mlibp.gs_strsp.s u64 
    procentry                 
    setargs                   2 0
    push           mlibp.gs_strsp.s u64 
    push           mlibp.gs_strsp.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           " "        u64 
    push           mlibp.gs_strsp.dest u64 
    callproc       &mlibp.gs_str 
#5198: 
    retproc                   
End


Proc mlibp.gs_line:
    param          mlibp.gs_line.dest u64 
    procentry                 
    setargs                   3 0
    push           -1         i64 
    push           "\c\n"     u64 
    push           mlibp.gs_line.dest u64 
    callproc       &mlibp.strbuffer_add 
#5200: 
    retproc                   
End


Proc mlibp.gs_getcol: i64
    param          mlibp.gs_getcol.dest u64 
    procentry                 
    push           mlibp.gs_getcol.dest u64 
    push           8          
    pushptroff                i32 1 0
    setret                    i64 
    jump           #5202      
#5202: 
    retfn                     i64 
End


Proc mlibp.gs_leftstr:
    param          mlibp.gs_leftstr.dest u64 
    param          mlibp.gs_leftstr.s u64 
    param          mlibp.gs_leftstr.w i64 
    param          mlibp.gs_leftstr.padch i64 
    local          mlibp.gs_leftstr.col i64 
    local          mlibp.gs_leftstr.i i64 
    local          mlibp.gs_leftstr.n i64 
    local          mlibp.gs_leftstr.slen i64 
    local          mlibp.gs_leftstr.str block:2560 
    procentry                 
    push           mlibp.gs_leftstr.dest u64 
    push           8          
    pushptroff                i32 1 0
    pop            mlibp.gs_leftstr.col i64 
    setargs                   2 0
    push           mlibp.gs_leftstr.s u64 
    push           &mlibp.gs_leftstr.str 
    callproc       &strcpy    
    setargs                   1 0
    push           mlibp.gs_leftstr.s u64 
    callfn         &strlen    i64 
    pop            mlibp.gs_leftstr.slen i64 
    push           mlibp.gs_leftstr.w i64 
    push           mlibp.gs_leftstr.slen i64 
    sub                       i64 
    pop            mlibp.gs_leftstr.n i64 
    push           mlibp.gs_leftstr.n i64 
    push           0          i64 
    jumple         #5204      i64 
#5205: 
    push           1          i64 
    pop            mlibp.gs_leftstr.i i64 
    push           mlibp.gs_leftstr.n i64 
    push           1          i64 
    jumplt         #5206      i64 
#5207: 
    push           mlibp.gs_leftstr.padch u64 
    push           &mlibp.gs_leftstr.str 
    push           mlibp.gs_leftstr.slen i64 
    push           mlibp.gs_leftstr.i i64 
    add                       i64 
    popptroff                 u8 1 -1
#5208: 
    forup          #5207      i64 1
    opnd           mlibp.gs_leftstr.i 
    opnd           mlibp.gs_leftstr.n 
#5206: 
    push           0          u64 
    push           &mlibp.gs_leftstr.str 
    push           mlibp.gs_leftstr.slen i64 
    push           mlibp.gs_leftstr.n i64 
    add                       i64 
    popptroff                 u8 1 0
#5204: 
    setargs                   2 0
    push           &mlibp.gs_leftstr.str 
    push           mlibp.gs_leftstr.dest u64 
    callproc       &mlibp.gs_str 
#5209: 
    retproc                   
End


Proc mlibp.gs_leftint:
    param          mlibp.gs_leftint.dest u64 
    param          mlibp.gs_leftint.a i64 
    param          mlibp.gs_leftint.w i64 
    param          mlibp.gs_leftint.padch i64 
    procentry                 
    setargs                   4 0
    push           mlibp.gs_leftint.padch i64 
    push           mlibp.gs_leftint.w i64 
    setargs                   2 0
    push           0          u64 
    push           mlibp.gs_leftint.a i64 
    callfn         &msysp.strint u64 
    push           mlibp.gs_leftint.dest u64 
    callproc       &mlibp.gs_leftstr 
#5211: 
    retproc                   
End


Proc mlibp.gs_padto:
    param          mlibp.gs_padto.dest u64 
    param          mlibp.gs_padto.col i64 
    param          mlibp.gs_padto.ch i64 
    local          mlibp.gs_padto.n i64 
    local          mlibp.gs_padto.str block:2560 
    local          mlibp.gs_padto.i i64 
    procentry                 
    push           mlibp.gs_padto.col i64 
    push           mlibp.gs_padto.dest u64 
    push           8          
    pushptroff                i32 1 0
    sub                       i64 
    pop            mlibp.gs_padto.n i64 
    push           mlibp.gs_padto.n i64 
    push           0          i64 
    jumpgt         #5213      i64 
    jump           #5214      
#5213: 
#5215: 
    push           1          i64 
    pop            mlibp.gs_padto.i i64 
    push           mlibp.gs_padto.n i64 
    push           1          i64 
    jumplt         #5216      i64 
#5217: 
    push           mlibp.gs_padto.ch u64 
    push           &mlibp.gs_padto.str 
    push           mlibp.gs_padto.i i64 
    popptroff                 u8 1 -1
#5218: 
    forup          #5217      i64 1
    opnd           mlibp.gs_padto.i 
    opnd           mlibp.gs_padto.n 
#5216: 
    push           0          u64 
    push           &mlibp.gs_padto.str 
    push           mlibp.gs_padto.n i64 
    popptroff                 u8 1 0
    setargs                   2 0
    push           &mlibp.gs_padto.str 
    push           mlibp.gs_padto.dest u64 
    callproc       &mlibp.gs_str 
#5214: 
    retproc                   
End


Proc mlibp.gs_println:
    param          mlibp.gs_println.dest u64 
    param          mlibp.gs_println.f u64 
    procentry                 
    push           0          u64 
    push           mlibp.gs_println.dest u64 
    pushptr                   u64 
    push           mlibp.gs_println.dest u64 
    push           8          
    pushptroff                i32 1 0
    popptroff                 u8 1 0
    push           mlibp.gs_println.f u64 
    push           0          u64 
    jumpne         #5220      u64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mlibp.gs_println.dest u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           "\c"       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #5221      
#5220: 
    setargs                   1 0
    push           mlibp.gs_println.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           mlibp.gs_println.dest u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           "\c"       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#5221: 
#5222: 
    retproc                   
End


Proc mlibp.nextcmdparam: i64
    param          mlibp.nextcmdparam.paramno u64 
    param          mlibp.nextcmdparam.name u64 
    param          mlibp.nextcmdparam.value u64 
    param          mlibp.nextcmdparam.defext u64 
    local          mlibp.nextcmdparam.q u64 
    local          mlibp.nextcmdparam.item u64 
    local          mlibp.nextcmdparam.fileext u64 
    local          mlibp.nextcmdparam.rest u64 
    local          mlibp.nextcmdparam.length i64 
    procentry                 
!reenter::
#5224: 
    push           0          u64 
    push           mlibp.nextcmdparam.value u64 
    popptr                    u64 
    push           0          u64 
    push           mlibp.nextcmdparam.name u64 
    popptr                    u64 
    push           mlibp.nextcmdparam.infile i64 
    jumpfalse      #5225      i64 
    setargs                   2 0
    push           &mlibp.nextcmdparam.item 
    push           &mlibp.nextcmdparam.fileptr 
    callfn         &mlibp.readnextfileitem i64 
    push           0          i64 
    jumpne         #5226      i64 
    setargs                   1 0
    push           mlibp.nextcmdparam.filestart u64 
    callproc       &free      
    push           0          i64 
    pop            mlibp.nextcmdparam.infile i64 
    jump           #5224      
#5226: 
    jump           #5227      
#5225: 
    push           mlibp.nextcmdparam.paramno u64 
    pushptr                   i64 
    push           msysp.nsysparams i64 
    jumple         #5228      i64 
    push           0          i64 
    setret                    i64 
    jump           #5229      
#5228: 
    push           &msysp.sysparams 
    push           mlibp.nextcmdparam.paramno u64 
    pushptr                   i64 
    pushptroff                u64 8 -8
    pop            mlibp.nextcmdparam.item u64 
    push           mlibp.nextcmdparam.paramno u64 
    incr                      i64 1
    setargs                   1 0
    push           mlibp.nextcmdparam.item u64 
    callfn         &strlen    i64 
    pop            mlibp.nextcmdparam.length i64 
    push           mlibp.nextcmdparam.item u64 
    pushptr                   u8 
    push           64         u64 
    jumpne         #5230      u64 
    setargs                   1 0
    push           mlibp.nextcmdparam.item u64 
    push           1          i64 
    addrefoff                 u64 1 0
    callfn         &mlibp.readfile u64 
    store          mlibp.nextcmdparam.fileptr u64 
    pop            mlibp.nextcmdparam.filestart u64 
    push           mlibp.nextcmdparam.filestart u64 
    push           0          u64 
    jumpne         #5231      u64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Can't open" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mlibp.nextcmdparam.item u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           7          i64 
    stop                      
#5231: 
    push           1          i64 
    pop            mlibp.nextcmdparam.infile i64 
    jump           #5224      
#5230: 
    push           mlibp.nextcmdparam.item u64 
    pushptr                   u8 
    push           58         u64 
    jumpne         #5232      u64 
    push           1          i64 
    pop            mlibp.nextcmdparam.colonseen u8 
    push           4          i64 
    setret                    i64 
    jump           #5229      
#5232: 
#5227: 
    push           0          u64 
    push           mlibp.nextcmdparam.value u64 
    popptr                    u64 
    push           mlibp.nextcmdparam.item u64 
    pushptr                   u8 
    push           45         u64 
    jumpne         #5233      u64 
    push           mlibp.nextcmdparam.item u64 
    startmult                 
    push           mlibp.nextcmdparam.colonseen u8 
    jumpfalse      #5234      i64 
    push           0          i64 
    resetmult                 
    jump           #5235      
#5234: 
    push           1          i64 
    endmult                   
#5235: 
    addrefoff                 u64 1 0
    push           mlibp.nextcmdparam.name u64 
    popptr                    u64 
    setargs                   2 0
    push           58         u64 
    push           mlibp.nextcmdparam.item u64 
    callfn         &strchr    u64 
    pop            mlibp.nextcmdparam.q u64 
    push           mlibp.nextcmdparam.q u64 
    jumptrue       #5236      u64 
    setargs                   2 0
    push           61         u64 
    push           mlibp.nextcmdparam.item u64 
    callfn         &strchr    u64 
    pop            mlibp.nextcmdparam.q u64 
#5236: 
    push           mlibp.nextcmdparam.q u64 
    jumpfalse      #5237      u64 
    push           mlibp.nextcmdparam.q u64 
    push           1          i64 
    addrefoff                 u64 1 0
    push           mlibp.nextcmdparam.value u64 
    popptr                    u64 
    push           0          u64 
    push           mlibp.nextcmdparam.q u64 
    popptr                    u8 
#5237: 
    startmult                 
    push           mlibp.nextcmdparam.colonseen u8 
    jumpfalse      #5238      i64 
    push           5          i64 
    resetmult                 
    jump           #5239      
#5238: 
    push           1          i64 
    endmult                   
#5239: 
    setret                    i64 
    jump           #5229      
#5233: 
    setargs                   2 0
    push           0          i64 
    push           mlibp.nextcmdparam.item u64 
    callfn         &mlibp.extractext u64 
    pop            mlibp.nextcmdparam.fileext u64 
    push           mlibp.nextcmdparam.item u64 
    push           mlibp.nextcmdparam.name u64 
    popptr                    u64 
    push           mlibp.nextcmdparam.fileext u64 
    pushptr                   u8 
    push           0          i64 
    jumpne         #5240      i64 
    setargs                   2 0
    push           mlibp.nextcmdparam.name u64 
    pushptr                   u64 
    push           &mlibp.nextcmdparam.str 
    callproc       &strcpy    
    push           mlibp.nextcmdparam.defext u64 
    jumpfalse      #5241      u64 
    push           mlibp.nextcmdparam.colonseen u8 
    jumptrue       #5241      i64 
    setargs                   2 0
    push           mlibp.nextcmdparam.defext u64 
    push           &mlibp.nextcmdparam.str 
    callfn         &mlibp.addext u64 
    push           mlibp.nextcmdparam.name u64 
    popptr                    u64 
#5241: 
    jump           #5242      
#5240: 
    setargs                   2 0
    push           "dll"      u64 
    push           mlibp.nextcmdparam.fileext u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #5243      i64 
    startmult                 
    push           mlibp.nextcmdparam.colonseen u8 
    jumpfalse      #5244      i64 
    push           5          i64 
    resetmult                 
    jump           #5245      
#5244: 
    push           3          i64 
    endmult                   
#5245: 
    setret                    i64 
    jump           #5229      
#5243: 
#5242: 
    startmult                 
    push           mlibp.nextcmdparam.colonseen u8 
    jumpfalse      #5246      i64 
    push           5          i64 
    resetmult                 
    jump           #5247      
#5246: 
    push           2          i64 
    endmult                   
#5247: 
    setret                    i64 
    jump           #5229      
#5229: 
    retfn                     i64 
End


Proc mlibp.readnextfileitem: i64
    param          mlibp.readnextfileitem.fileptr u64 
    param          mlibp.readnextfileitem.item u64 
    local          mlibp.readnextfileitem.p u64 
    local          mlibp.readnextfileitem.pstart u64 
    local          mlibp.readnextfileitem.pend u64 
    local          mlibp.readnextfileitem.n i64 
    procentry                 
    push           mlibp.readnextfileitem.fileptr u64 
    pushptr                   u64 
    pop            mlibp.readnextfileitem.p u64 
!reenter::
#5249: 
#5250: 
    push           mlibp.readnextfileitem.p u64 
    pushptr                   u8 
    push           32         u64 
    casejumpeq     #5251      u64 0
    push           9          u64 
    casejumpeq     #5251      u64 0
    push           13         u64 
    casejumpeq     #5251      u64 0
    push           10         u64 
    casejumpeq     #5251      u64 0
    push           26         u64 
    casejumpeq     #5252      u64 0
    push           0          u64 
    casejumpeq     #5252      u64 0
    popstack                  u64 
    jump           #5253      
#5251: 
    push           &mlibp.readnextfileitem.p 
    incr                      u64 1
    jump           #5254      
#5252: 
    push           0          i64 
    setret                    i64 
    jump           #5255      
    jump           #5254      
#5253: 
    jump           #5256      
#5254: 
    jump           #5250      
#5256: 
    push           mlibp.readnextfileitem.p u64 
    pushptr                   u8 
    push           33         u64 
    casejumpeq     #5257      u64 0
    push           35         u64 
    casejumpeq     #5257      u64 0
    popstack                  u64 
    jump           #5258      
#5257: 
    push           &mlibp.readnextfileitem.p 
    incr                      u64 1
#5259: 
    push           &mlibp.readnextfileitem.p 
    loadincr                  u64 1
    pushptr                   u8 
    push           10         u64 
    casejumpeq     #5260      u64 0
    push           26         u64 
    casejumpeq     #5261      u64 0
    push           0          u64 
    casejumpeq     #5261      u64 0
    popstack                  u64 
    jump           #5262      
#5260: 
    jump           #5249      
    jump           #5259      
#5261: 
    push           mlibp.readnextfileitem.p u64 
    push           1          i64 
    subrefoff                 u64 1 0
    push           mlibp.readnextfileitem.fileptr u64 
    popptr                    u64 
    push           0          i64 
    setret                    i64 
    jump           #5255      
    jump           #5259      
#5262: 
    jump           #5259      
#5263: 
    jump           #5264      
#5258: 
#5264: 
    push           mlibp.readnextfileitem.p u64 
    pushptr                   u8 
    push           34         u64 
    casejumpeq     #5265      u64 0
    popstack                  u64 
    jump           #5266      
#5265: 
    push           &mlibp.readnextfileitem.p 
    incrload                  u64 1
    pop            mlibp.readnextfileitem.pstart u64 
#5267: 
    push           mlibp.readnextfileitem.p u64 
    pushptr                   u8 
    push           0          u64 
    casejumpeq     #5268      u64 0
    push           26         u64 
    casejumpeq     #5268      u64 0
    push           34         u64 
    casejumpeq     #5269      u64 0
    popstack                  u64 
    jump           #5270      
#5268: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Unexpected EOF in @file" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           8          i64 
    stop                      
    jump           #5271      
#5269: 
    push           &mlibp.readnextfileitem.p 
    loadincr                  u64 1
    pop            mlibp.readnextfileitem.pend u64 
    push           mlibp.readnextfileitem.p u64 
    pushptr                   u8 
    push           44         u64 
    jumpne         #5272      u64 
    push           &mlibp.readnextfileitem.p 
    incr                      u64 1
#5272: 
    jump           #5273      
    jump           #5271      
#5270: 
#5271: 
    push           &mlibp.readnextfileitem.p 
    incr                      u64 1
    jump           #5267      
#5273: 
    jump           #5274      
#5266: 
    push           mlibp.readnextfileitem.p u64 
    pop            mlibp.readnextfileitem.pstart u64 
#5275: 
    push           mlibp.readnextfileitem.p u64 
    pushptr                   u8 
    push           0          u64 
    casejumpeq     #5276      u64 0
    push           26         u64 
    casejumpeq     #5276      u64 0
    push           32         u64 
    casejumpeq     #5277      u64 0
    push           9          u64 
    casejumpeq     #5277      u64 0
    push           44         u64 
    casejumpeq     #5277      u64 0
    push           13         u64 
    casejumpeq     #5277      u64 0
    push           10         u64 
    casejumpeq     #5277      u64 0
    popstack                  u64 
    jump           #5278      
#5276: 
    push           mlibp.readnextfileitem.p u64 
    pop            mlibp.readnextfileitem.pend u64 
    jump           #5279      
    jump           #5280      
#5277: 
    push           &mlibp.readnextfileitem.p 
    loadincr                  u64 1
    pop            mlibp.readnextfileitem.pend u64 
    jump           #5279      
    jump           #5280      
#5278: 
#5280: 
    push           &mlibp.readnextfileitem.p 
    incr                      u64 1
    jump           #5275      
#5279: 
#5274: 
    push           mlibp.readnextfileitem.pend u64 
    push           mlibp.readnextfileitem.pstart u64 
    subref                    i64 1
    pop            mlibp.readnextfileitem.n i64 
    push           mlibp.readnextfileitem.n i64 
    push           256        i64 
    jumplt         #5281      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "@file item too long" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           9          i64 
    stop                      
#5281: 
    setargs                   3 0
    push           mlibp.readnextfileitem.n u64 
    push           mlibp.readnextfileitem.pstart u64 
    push           &mlibp.readnextfileitem.str 
    callproc       &memcpy    
    push           0          u64 
    push           &mlibp.readnextfileitem.str 
    push           mlibp.readnextfileitem.n i64 
    popptroff                 u8 1 0
    push           &mlibp.readnextfileitem.str 
    push           mlibp.readnextfileitem.item u64 
    popptr                    u64 
    push           mlibp.readnextfileitem.p u64 
    push           mlibp.readnextfileitem.fileptr u64 
    popptr                    u64 
    push           1          i64 
    setret                    i64 
    jump           #5255      
#5255: 
    retfn                     i64 
End


Proc mlibp.ipadstr:
    param          mlibp.ipadstr.s u64 
    param          mlibp.ipadstr.width i64 
    param          mlibp.ipadstr.padchar u64 
    local          mlibp.ipadstr.n i64 
    local          mlibp.ipadstr.av_1 i64 
    procentry                 
    setargs                   1 0
    push           mlibp.ipadstr.s u64 
    callfn         &strlen    i64 
    pop            mlibp.ipadstr.n i64 
#5283: 
    push           mlibp.ipadstr.width i64 
    push           mlibp.ipadstr.n i64 
    sub                       i64 
    pop            mlibp.ipadstr.av_1 i64 
    push           mlibp.ipadstr.av_1 i64 
    push           0          i64 
    jumple         #5284      i64 
#5285: 
    setargs                   2 0
    push           mlibp.ipadstr.padchar u64 
    push           mlibp.ipadstr.s u64 
    callproc       &strcat    
#5286: 
    to             #5285      
    opnd           mlibp.ipadstr.av_1 
#5284: 
#5287: 
    retproc                   
End


Proc mlibp.padstr: u64
    param          mlibp.padstr.s u64 
    param          mlibp.padstr.width i64 
    param          mlibp.padstr.padchar u64 
    procentry                 
    setargs                   2 0
    push           mlibp.padstr.s u64 
    push           &mlibp.padstr.str 
    callproc       &strcpy    
    setargs                   3 0
    push           mlibp.padstr.padchar u64 
    push           mlibp.padstr.width i64 
    push           &mlibp.padstr.str 
    callproc       &mlibp.ipadstr 
    push           &mlibp.padstr.str 
    setret                    u64 
    jump           #5289      
#5289: 
    retfn                     u64 
End


Proc mlibp.chr: u64
    param          mlibp.chr.c i64 
    procentry                 
    push           mlibp.chr.c u64 
    push           &mlibp.chr.str 
    push           1          i64 
    popptroff                 u8 1 -1
    push           0          u64 
    push           &mlibp.chr.str 
    push           2          i64 
    popptroff                 u8 1 -1
    push           &mlibp.chr.str 
    setret                    u64 
    jump           #5291      
#5291: 
    retfn                     u64 
End


Proc mlibp.cmpstring: i64
    param          mlibp.cmpstring.s u64 
    param          mlibp.cmpstring.t u64 
    local          mlibp.cmpstring.res i64 
    procentry                 
    startmult                 
    setargs                   2 0
    push           mlibp.cmpstring.t u64 
    push           mlibp.cmpstring.s u64 
    callfn         &strcmp    i32 
    store          mlibp.cmpstring.res i64 
    push           0          i64 
    jumpge         #5293      i64 
    push           -1         i64 
    resetmult                 
    jump           #5294      
#5293: 
    push           mlibp.cmpstring.res i64 
    push           0          i64 
    jumple         #5295      i64 
    push           1          i64 
    resetmult                 
    jump           #5294      
#5295: 
    push           0          i64 
    endmult                   
#5294: 
    setret                    i64 
    jump           #5296      
#5296: 
    retfn                     i64 
End


Proc mlibp.cmpstringn: i64
    param          mlibp.cmpstringn.s u64 
    param          mlibp.cmpstringn.t u64 
    param          mlibp.cmpstringn.n i64 
    local          mlibp.cmpstringn.res i64 
    procentry                 
    startmult                 
    setargs                   3 0
    push           mlibp.cmpstringn.n u64 
    push           mlibp.cmpstringn.t u64 
    push           mlibp.cmpstringn.s u64 
    callfn         &strncmp   i32 
    store          mlibp.cmpstringn.res i64 
    push           0          i64 
    jumpge         #5298      i64 
    push           -1         i64 
    resetmult                 
    jump           #5299      
#5298: 
    push           mlibp.cmpstringn.res i64 
    push           0          i64 
    jumple         #5300      i64 
    push           1          i64 
    resetmult                 
    jump           #5299      
#5300: 
    push           0          i64 
    endmult                   
#5299: 
    setret                    i64 
    jump           #5301      
#5301: 
    retfn                     i64 
End


Proc mlibp.eqstring: i64
    param          mlibp.eqstring.s u64 
    param          mlibp.eqstring.t u64 
    procentry                 
    setargs                   2 0
    push           mlibp.eqstring.t u64 
    push           mlibp.eqstring.s u64 
    callfn         &strcmp    i32 
    push           0          i64 
    seteq                     i64 
    setret                    i64 
    jump           #5303      
#5303: 
    retfn                     i64 
End


Proc mlibp.cmpbytes: i64
    param          mlibp.cmpbytes.p u64 
    param          mlibp.cmpbytes.q u64 
    param          mlibp.cmpbytes.n i64 
    local          mlibp.cmpbytes.res i64 
    procentry                 
    startmult                 
    setargs                   3 0
    push           mlibp.cmpbytes.n u64 
    push           mlibp.cmpbytes.q u64 
    push           mlibp.cmpbytes.p u64 
    callfn         &memcmp    i32 
    store          mlibp.cmpbytes.res i64 
    push           0          i64 
    jumpge         #5305      i64 
    push           -1         i64 
    resetmult                 
    jump           #5306      
#5305: 
    push           mlibp.cmpbytes.res i64 
    push           0          i64 
    jumple         #5307      i64 
    push           1          i64 
    resetmult                 
    jump           #5306      
#5307: 
    push           0          i64 
    endmult                   
#5306: 
    setret                    i64 
    jump           #5308      
#5308: 
    retfn                     i64 
End


Proc mlibp.eqbytes: i64
    param          mlibp.eqbytes.p u64 
    param          mlibp.eqbytes.q u64 
    param          mlibp.eqbytes.n i64 
    procentry                 
    setargs                   3 0
    push           mlibp.eqbytes.n u64 
    push           mlibp.eqbytes.q u64 
    push           mlibp.eqbytes.p u64 
    callfn         &memcmp    i32 
    push           0          i64 
    seteq                     i64 
    setret                    i64 
    jump           #5310      
#5310: 
    retfn                     i64 
End


Proc mlibp.mseed:
    param          mlibp.mseed.a u64 
    param          mlibp.mseed.b u64 
    procentry                 
    push           mlibp.mseed.a i64 
    push           &mlibp.seed 
    push           1          i64 
    popptroff                 i64 8 -8
    push           mlibp.mseed.b u64 
    jumpfalse      #5312      u64 
    push           mlibp.mseed.b i64 
    push           &mlibp.seed 
    push           2          i64 
    popptroff                 i64 8 -8
    jump           #5313      
#5312: 
    push           &mlibp.seed 
    push           2          i64 
    addrefoff                 i64 8 -8
    push           mlibp.mseed.a i64 
    ixorto                    i64 
#5313: 
#5314: 
    retproc                   
End


Proc mlibp.mrandom: u64
    local          mlibp.mrandom.x i64 
    local          mlibp.mrandom.y i64 
    procentry                 
    push           &mlibp.seed 
    push           1          i64 
    pushptroff                i64 8 -8
    pop            mlibp.mrandom.x i64 
    push           &mlibp.seed 
    push           2          i64 
    pushptroff                i64 8 -8
    pop            mlibp.mrandom.y i64 
    push           mlibp.mrandom.y i64 
    push           &mlibp.seed 
    push           1          i64 
    popptroff                 i64 8 -8
    push           &mlibp.mrandom.x 
    push           mlibp.mrandom.x i64 
    push           23         i64 
    shl                       i64 
    ixorto                    i64 
    push           mlibp.mrandom.x i64 
    push           mlibp.mrandom.y i64 
    ixor                      i64 
    push           mlibp.mrandom.x i64 
    push           17         i64 
    shr                       i64 
    ixor                      i64 
    push           mlibp.mrandom.y i64 
    push           26         i64 
    shr                       i64 
    ixor                      i64 
    push           &mlibp.seed 
    push           2          i64 
    popptroff                 i64 8 -8
    push           &mlibp.seed 
    push           2          i64 
    pushptroff                i64 8 -8
    push           mlibp.mrandom.y i64 
    add                       u64 
    setret                    u64 
    jump           #5316      
#5316: 
    retfn                     u64 
End


Proc mlibp.mrandomp: i64
    procentry                 
    setargs                   0 0
    callfn         &mlibp.mrandom i64 
    push           9223372036854775807 i64 
    iand                      i64 
    setret                    i64 
    jump           #5318      
#5318: 
    retfn                     i64 
End


Proc mlibp.mrandomint: i64
    param          mlibp.mrandomint.n i64 
    procentry                 
    setargs                   0 0
    callfn         &mlibp.mrandomp i64 
    push           mlibp.mrandomint.n i64 
    irem                      i64 
    setret                    i64 
    jump           #5320      
#5320: 
    retfn                     i64 
End


Proc mlibp.mrandomrange: i64
    param          mlibp.mrandomrange.a i64 
    param          mlibp.mrandomrange.b i64 
    local          mlibp.mrandomrange.span i64 
    procentry                 
    push           mlibp.mrandomrange.b i64 
    push           mlibp.mrandomrange.a i64 
    sub                       i64 
    push           1          i64 
    add                       i64 
    pop            mlibp.mrandomrange.span i64 
    push           mlibp.mrandomrange.span i64 
    push           0          i64 
    jumpgt         #5322      i64 
    push           0          i64 
    setret                    i64 
    jump           #5323      
#5322: 
    setargs                   0 0
    callfn         &mlibp.mrandomp i64 
    push           mlibp.mrandomrange.span i64 
    irem                      i64 
    push           mlibp.mrandomrange.a i64 
    add                       i64 
    setret                    i64 
    jump           #5323      
#5323: 
    retfn                     i64 
End


Proc mlibp.mrandomreal: r64
    local          mlibp.mrandomreal.x r64 
    procentry                 
#5325: 
    setargs                   0 0
    callfn         &mlibp.mrandomp i64 
    float                     r64 i64 
    push           9.2233720368547758e+018 r64 
    div                       r64 
    pop            mlibp.mrandomreal.x r64 
#5326: 
    push           mlibp.mrandomreal.x r64 
    push           1.0000000000000000e+000 r64 
    jumpeq         #5325      r64 
#5327: 
    push           mlibp.mrandomreal.x r64 
    setret                    r64 
    jump           #5328      
#5328: 
    retfn                     r64 
End


Proc mlibp.mrandomreal1: r64
    procentry                 
    setargs                   0 0
    callfn         &mlibp.mrandomp i64 
    push           9223372036854775807 i64 
    idiv                      i64 
    float                     r64 i64 
    setret                    r64 
    jump           #5330      
#5330: 
    retfn                     r64 
End


Proc mlibp.checkpackfile: u64
    local          mlibp.checkpackfile.a i64 
    local          mlibp.checkpackfile.offset i64 
    local          mlibp.checkpackfile.i i64 
    local          mlibp.checkpackfile.size i64 
    local          mlibp.checkpackfile.name block:100 
    local          mlibp.checkpackfile.exefile block:300 
    local          mlibp.checkpackfile.packexeptr u64 
    local          mlibp.checkpackfile.packexesize i64 
    local          mlibp.checkpackfile.packfilename u64 
    local          mlibp.checkpackfile.packfilesize i64 
    local          mlibp.checkpackfile.packfileptr u64 
    procentry                 
    setargs                   2 0
    setargs                   0 0
    callfn         &mwindowsp.os_gethostname u64 
    push           &mlibp.checkpackfile.exefile 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcpy    
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Attempting to open" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mlibp.checkpackfile.exefile 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           &mlibp.checkpackfile.exefile 
    push           0          
    addrefoff                 u8 1 0
    callfn         &mlibp.readfile u64 
    pop            mlibp.checkpackfile.packexeptr u64 
    push           mlibp.checkpackfile.packexeptr u64 
    jumptrue       #5332      u64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Can't open" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mlibp.checkpackfile.exefile 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   1 0
    push           &mlibp.checkpackfile.packexeptr 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           0          
    stop                      
#5332: 
    push           mlibp.rfsize i64 
    pop            mlibp.checkpackfile.packexesize i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "File read OK. Size" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mlibp.checkpackfile.packexesize i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           mlibp.checkpackfile.packexeptr u64 
    push           mlibp.checkpackfile.packexesize i64 
    push           4          i64 
    sub                       i64 
    pushptroff                i32 1 0
    pop            mlibp.checkpackfile.a i64 
    push           mlibp.checkpackfile.a i64 
    push           1262568272 i64 
    jumpeq         #5333      i64 
    setargs                   1 0
    push           mlibp.checkpackfile.packexeptr u64 
    callproc       &free      
    push           0          u64 
    pop            mlibp.checkpackfile.packfileptr u64 
    push           0          u64 
    setret                    u64 
    jump           #5334      
#5333: 
    push           mlibp.checkpackfile.packexeptr u64 
    push           mlibp.checkpackfile.packexesize i64 
    push           8          i64 
    sub                       i64 
    pushptroff                i32 1 0
    pop            mlibp.checkpackfile.offset i64 
    push           mlibp.checkpackfile.packexeptr u64 
    push           mlibp.checkpackfile.offset i64 
    addrefoff                 u64 1 0
    pop            mlibp.checkpackfile.packfilename u64 
    push           &mlibp.checkpackfile.offset 
    setargs                   1 0
    push           mlibp.checkpackfile.packfilename u64 
    callfn         &strlen    i64 
    push           1          i64 
    add                       i64 
    addto                     i64 
    push           mlibp.checkpackfile.packexeptr u64 
    push           mlibp.checkpackfile.offset i64 
    pushptroff                i32 1 0
    pop            mlibp.checkpackfile.packfilesize i64 
    push           mlibp.checkpackfile.packexeptr u64 
    push           mlibp.checkpackfile.offset i64 
    addrefoff                 u64 1 4
    pop            mlibp.checkpackfile.packfileptr u64 
    push           mlibp.checkpackfile.packfileptr u64 
    setret                    u64 
    jump           #5334      
#5334: 
    retfn                     u64 
End


Proc mlibp.pcm_allocx: u64
    local          mlibp.pcm_allocx.p u64 
    procentry                 
    push           32         i64 
    pop            mlibp.allocbytes i64 
    startmult                 
    push           &mlibp.freelist 
    push           2          i64 
    pushptroff                u64 8 0
    store          mlibp.pcm_allocx.p u64 
    jumpfalse      #5336      u64 
    push           &mlibp.freelist 
    push           2          i64 
    pushptroff                u64 8 0
    pushptr                   u64 
    push           &mlibp.freelist 
    push           2          i64 
    storeptroff               u64 8 0
    resetmult                 
    jump           #5337      
#5336: 
    push           mlibp.pcheapptr u64 
    pop            mlibp.pcm_allocx.p u64 
    push           &mlibp.pcheapptr 
    push           32         i64 
    addrefoffto               u64 1 0
    push           mlibp.pcheapptr u64 
    push           mlibp.pcheapend u64 
    jumplt         #5338      u64 
    setargs                   1 0
    push           32         i64 
    callfn         &mlibp.pcm_newblock u64 
    pop            mlibp.pcm_allocx.p u64 
#5338: 
    push           0          u64 
    push           mlibp.pcm_allocx.p u64 
    popptr                    u64 
    push           0          u64 
    push           mlibp.pcm_allocx.p u64 
    push           1          i64 
    popptroff                 u64 8 0
    push           0          u64 
    push           mlibp.pcm_allocx.p u64 
    push           2          i64 
    popptroff                 u64 8 0
    push           0          u64 
    push           mlibp.pcm_allocx.p u64 
    push           3          i64 
    popptroff                 u64 8 0
    push           mlibp.pcm_allocx.p u64 
    endmult                   
#5337: 
    setret                    u64 
    jump           #5339      
#5339: 
    retfn                     u64 
End


Proc mlibp.readline: u64
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$read_conline 
    push           msysp.rd_buffer u64 
    setret                    u64 
    jump           #5341      
#5341: 
    retfn                     u64 
End


Proc mlibp.stralloc: u64
    param          mlibp.stralloc.p u64 
    procentry                 
    setargs                   2 0
    push           0          u64 
    push           mlibp.stralloc.p u64 
    push           mlibp.allocbase u64 
    subref                    i64 1
    callfn         &msysp.strint u64 
    setret                    u64 
    jump           #5343      
#5343: 
    retfn                     u64 
End


Proc mlibp.findfunction: u64
    param          mlibp.findfunction.name u64 
    local          mlibp.findfunction.av_1 i64 
    local          mlibp.findfunction.i i64 
    procentry                 
#5345: 
    push           1          i64 
    pop            mlibp.findfunction.i i64 
    getnprocs                 i64 
    pop            mlibp.findfunction.av_1 i64 
    push           mlibp.findfunction.av_1 i64 
    push           1          i64 
    jumplt         #5346      i64 
#5347: 
    setargs                   2 0
    push           mlibp.findfunction.name u64 
    push           mlibp.findfunction.i i64 
    getprocname               i64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #5348      i64 
    push           mlibp.findfunction.i i64 
    getprocaddr               i64 
    setret                    u64 
    jump           #5349      
#5348: 
#5350: 
    forup          #5347      i64 1
    opnd           mlibp.findfunction.i 
    opnd           mlibp.findfunction.av_1 
#5346: 
    push           0          u64 
    setret                    u64 
    jump           #5349      
#5349: 
    retfn                     u64 
End


Proc mwindowsp.os_init:
    local          mwindowsp.os_init.i i64 
    local          mwindowsp.os_init.count i64 
    local          mwindowsp.os_init.info block:22 
    procentry                 
    setargs                   1 0
    push           -11        i64 
    truncate                  i64 u32 
    callfn         &`GetStdHandle u64 
    pop            mwindowsp.hconsole u64 
    setargs                   1 0
    push           -10        i64 
    truncate                  i64 u32 
    callfn         &`GetStdHandle u64 
    pop            mwindowsp.hconsolein u64 
    push           0          i64 
    push           &mwindowsp.lastkey 
    push           8          
    popptroff                 u16 1 0
    push           0          i64 
    pop            mwindowsp.keypending i64 
    setargs                   2 0
    push           1          i64 
    push           0          u64 
    callproc       &`SetConsoleCtrlHandler 
    setargs                   2 0
    push           3          i64 
    push           mwindowsp.hconsole u64 
    callproc       &`SetConsoleMode 
    push           1          i64 
    pop            mwindowsp.init_flag i64 
#5352: 
    retproc                   
End


Proc mwindowsp.os_execwait: i64
    param          mwindowsp.os_execwait.cmdline u64 
    param          mwindowsp.os_execwait.newconsole i64 
    param          mwindowsp.os_execwait.workdir u64 
    local          mwindowsp.os_execwait.exitcode u32 
    local          mwindowsp.os_execwait.status i64 
    local          mwindowsp.os_execwait.cflags i64 
    local          mwindowsp.os_execwait.si block:104 
    local          mwindowsp.os_execwait.xpi block:24 
    procentry                 
    push           0          i64 
    pop            mwindowsp.os_execwait.cflags i64 
    push           &mwindowsp.os_execwait.si 
    clear                     block:104 
    push           &mwindowsp.os_execwait.xpi 
    clear                     block:24 
    push           mwindowsp.os_execwait.newconsole i64 
    switch         #5354      0 2
    opnd           #5355      
#5354: 
    switchlabel    #5356      
    switchlabel    #5357      
    switchlabel    #5358      
    endswitch                 
#5356: 
    push           32         i64 
    pop            mwindowsp.os_execwait.cflags i64 
    jump           #5359      
#5357: 
    push           48         i64 
    pop            mwindowsp.os_execwait.cflags i64 
    jump           #5359      
#5358: 
    push           48         i64 
    pop            mwindowsp.os_execwait.cflags i64 
    jump           #5359      
#5355: 
#5359: 
    push           104        i64 
    push           &mwindowsp.os_execwait.si 
    push           0          
    popptroff                 u32 1 0
    setargs                   10 0
    push           &mwindowsp.os_execwait.xpi 
    push           &mwindowsp.os_execwait.si 
    push           0          u64 
    push           0          u64 
    push           mwindowsp.os_execwait.cflags i64 
    push           1          i64 
    push           0          u64 
    push           0          u64 
    push           mwindowsp.os_execwait.cmdline u64 
    push           0          u64 
    callfn         &`CreateProcessA i64 
    pop            mwindowsp.os_execwait.status i64 
    push           mwindowsp.os_execwait.status i64 
    push           0          i64 
    jumpne         #5360      i64 
    setargs                   0 0
    callfn         &`GetLastError u32 
    pop            mwindowsp.os_execwait.status i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Winexec error:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mwindowsp.os_execwait.status i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           -1         i64 
    setret                    i64 
    jump           #5361      
#5360: 
    setargs                   2 0
    push           4294967295 i64 
    push           &mwindowsp.os_execwait.xpi 
    pushptr                   u64 
    callproc       &`WaitForSingleObject 
    setargs                   2 0
    push           &mwindowsp.os_execwait.exitcode 
    push           &mwindowsp.os_execwait.xpi 
    pushptr                   u64 
    callproc       &`GetExitCodeProcess 
    setargs                   1 0
    push           &mwindowsp.os_execwait.xpi 
    pushptr                   u64 
    callproc       &`CloseHandle 
    setargs                   1 0
    push           &mwindowsp.os_execwait.xpi 
    push           8          
    pushptroff                u64 1 0
    callproc       &`CloseHandle 
    push           mwindowsp.os_execwait.exitcode u32 
    setret                    i64 
    jump           #5361      
#5361: 
    retfn                     i64 
End


Proc mwindowsp.os_execcmd: i64
    param          mwindowsp.os_execcmd.cmdline u64 
    param          mwindowsp.os_execcmd.newconsole i64 
    local          mwindowsp.os_execcmd.exitcode u32 
    local          mwindowsp.os_execcmd.i i64 
    local          mwindowsp.os_execcmd.j i64 
    local          mwindowsp.os_execcmd.k i64 
    local          mwindowsp.os_execcmd.si block:104 
    local          mwindowsp.os_execcmd.xpi block:24 
    procentry                 
    push           &mwindowsp.os_execcmd.si 
    clear                     block:104 
    push           &mwindowsp.os_execcmd.xpi 
    clear                     block:24 
    push           104        i64 
    push           &mwindowsp.os_execcmd.si 
    push           0          
    popptroff                 u32 1 0
    setargs                   10 0
    push           &mwindowsp.os_execcmd.xpi 
    push           &mwindowsp.os_execcmd.si 
    push           0          u64 
    push           0          u64 
    push           32         i64 
    startmult                 
    push           mwindowsp.os_execcmd.newconsole i64 
    jumpfalse      #5363      i64 
    push           16         i64 
    resetmult                 
    jump           #5364      
#5363: 
    push           0          i64 
    endmult                   
#5364: 
    ior                       i64 
    push           1          i64 
    push           0          u64 
    push           0          u64 
    push           mwindowsp.os_execcmd.cmdline u64 
    push           0          u64 
    callproc       &`CreateProcessA 
    setargs                   1 0
    push           &mwindowsp.os_execcmd.xpi 
    pushptr                   u64 
    callproc       &`CloseHandle 
    setargs                   1 0
    push           &mwindowsp.os_execcmd.xpi 
    push           8          
    pushptroff                u64 1 0
    callproc       &`CloseHandle 
    push           1          i64 
    setret                    i64 
    jump           #5365      
#5365: 
    retfn                     i64 
End


Proc mwindowsp.os_getch: i64
    local          mwindowsp.os_getch.k i64 
    procentry                 
    setargs                   0 0
    callfn         &mwindowsp.os_getchx i64 
    push           255        i64 
    iand                      i64 
    pop            mwindowsp.os_getch.k i64 
    push           mwindowsp.os_getch.k i64 
    setret                    i64 
    jump           #5367      
#5367: 
    retfn                     i64 
End


Proc mwindowsp.os_kbhit: i64
    local          mwindowsp.os_kbhit.count u32 
    procentry                 
    push           mwindowsp.init_flag i64 
    jumptrue       #5369      i64 
    setargs                   0 0
    callproc       &mwindowsp.os_init 
#5369: 
    setargs                   2 0
    push           &mwindowsp.os_kbhit.count 
    push           mwindowsp.hconsolein u64 
    callproc       &`GetNumberOfConsoleInputEvents 
    push           mwindowsp.os_kbhit.count u32 
    push           1          i64 
    setgt                     i64 
    setret                    i64 
    jump           #5370      
#5370: 
    retfn                     i64 
End


Proc mwindowsp.os_flushkeys:
    procentry                 
    setargs                   1 0
    push           mwindowsp.hconsolein u64 
    callproc       &`FlushConsoleInputBuffer 
#5372: 
    retproc                   
End


Proc mwindowsp.os_getconsolein: u64
    procentry                 
    push           mwindowsp.hconsolein u64 
    setret                    u64 
    jump           #5374      
#5374: 
    retfn                     u64 
End


Proc mwindowsp.os_getconsoleout: u64
    procentry                 
    push           mwindowsp.hconsole u64 
    setret                    u64 
    jump           #5376      
#5376: 
    retfn                     u64 
End


Proc mwindowsp.os_proginstance: u64
    procentry                 
    setargs                   1 0
    push           "PROGINST" u64 
    callproc       &mlibp.abortprogram 
    push           0          u64 
    setret                    u64 
    jump           #5378      
#5378: 
    retfn                     u64 
End


Proc mwindowsp.os_getdllinst: u64
    param          mwindowsp.os_getdllinst.name u64 
    local          mwindowsp.os_getdllinst.hinst u64 
    procentry                 
    setargs                   1 0
    push           mwindowsp.os_getdllinst.name u64 
    callfn         &`LoadLibraryA u64 
    pop            mwindowsp.os_getdllinst.hinst u64 
    push           mwindowsp.os_getdllinst.hinst u64 
    setret                    u64 
    jump           #5380      
#5380: 
    retfn                     u64 
End


Proc mwindowsp.os_getdllprocaddr: u64
    param          mwindowsp.os_getdllprocaddr.hinst i64 
    param          mwindowsp.os_getdllprocaddr.name u64 
    procentry                 
    setargs                   2 0
    push           mwindowsp.os_getdllprocaddr.name u64 
    push           mwindowsp.os_getdllprocaddr.hinst u64 
    callfn         &`GetProcAddress u64 
    setret                    u64 
    jump           #5382      
#5382: 
    retfn                     u64 
End


Proc mwindowsp.os_initwindows:
    procentry                 
    setargs                   0 0
    callproc       &mwindowsp.os_init 
    setargs                   1 0
    push           "pcc001"   u64 
    callproc       &mwindowsp.os_gxregisterclass 
#5384: 
    retproc                   
End


Proc mwindowsp.os_gxregisterclass:
    param          mwindowsp.os_gxregisterclass.classname u64 
    local          mwindowsp.os_gxregisterclass.r block:80 
    procentry                 
    push           mwindowsp.os_gxregisterclass.registered u8 
    jumpfalse      #5386      i64 
    jump           #5387      
#5386: 
    push           &mwindowsp.os_gxregisterclass.r 
    clear                     block:80 
    push           80         i64 
    push           &mwindowsp.os_gxregisterclass.r 
    push           0          
    popptroff                 u32 1 0
    push           40         i64 
    push           &mwindowsp.os_gxregisterclass.r 
    push           4          
    popptroff                 u32 1 0
    push           &mwindowsp.mainwndproc 
    push           &mwindowsp.os_gxregisterclass.r 
    push           8          
    popptroff                 u64 1 0
    push           0          u64 
    push           &mwindowsp.os_gxregisterclass.r 
    push           24         
    popptroff                 u64 1 0
    push           0          u64 
    push           &mwindowsp.os_gxregisterclass.r 
    push           32         
    popptroff                 u64 1 0
    setargs                   2 0
    push           32512      u64 
    push           0          u64 
    callfn         &`LoadCursorA u64 
    push           &mwindowsp.os_gxregisterclass.r 
    push           40         
    popptroff                 u64 1 0
    push           16         u64 
    push           &mwindowsp.os_gxregisterclass.r 
    push           48         
    popptroff                 u64 1 0
    push           0          u64 
    push           &mwindowsp.os_gxregisterclass.r 
    push           56         
    popptroff                 u64 1 0
    push           mwindowsp.os_gxregisterclass.classname u64 
    push           &mwindowsp.os_gxregisterclass.r 
    push           64         
    popptroff                 u64 1 0
    push           0          u64 
    push           &mwindowsp.os_gxregisterclass.r 
    push           72         
    popptroff                 u64 1 0
    setargs                   1 0
    push           &mwindowsp.os_gxregisterclass.r 
    callfn         &`RegisterClassExA u32 
    push           0          i64 
    jumpne         #5388      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mwindowsp.os_gxregisterclass.classname u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &`GetLastError 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Registerclass error" u64 
    callproc       &mlibp.abortprogram 
#5388: 
    push           1          i64 
    pop            mwindowsp.os_gxregisterclass.registered u8 
#5387: 
    retproc                   
End


Proc mwindowsp.mainwndproc: i64
    param          mwindowsp.mainwndproc.hwnd u64 
    param          mwindowsp.mainwndproc.message u32 
    param          mwindowsp.mainwndproc.wparam u64 
    param          mwindowsp.mainwndproc.lparam u64 
    local          mwindowsp.mainwndproc.m block:48 
    local          mwindowsp.mainwndproc.i i64 
    local          mwindowsp.mainwndproc.result i64 
    local          mwindowsp.mainwndproc.l i64 
    procentry                 
    push           mwindowsp.mainwndproc.hwnd u64 
    push           &mwindowsp.mainwndproc.m 
    push           0          
    popptroff                 u64 1 0
    push           mwindowsp.mainwndproc.message u32 
    push           &mwindowsp.mainwndproc.m 
    push           8          
    popptroff                 u32 1 0
    push           mwindowsp.mainwndproc.wparam u64 
    push           &mwindowsp.mainwndproc.m 
    push           16         
    popptroff                 u64 1 0
    push           mwindowsp.mainwndproc.lparam u64 
    push           &mwindowsp.mainwndproc.m 
    push           24         
    popptroff                 u64 1 0
    push           0          i64 
    push           &mwindowsp.mainwndproc.m 
    push           40         
    popptroff                 i32 1 0
    push           0          i64 
    push           &mwindowsp.mainwndproc.m 
    push           44         
    popptroff                 i32 1 0
    push           mwindowsp.wndproc_callbackfn u64 
    jumpfalse      #5390      u64 
    setargs                   1 0
    push           &mwindowsp.mainwndproc.m 
    push           mwindowsp.wndproc_callbackfn u64 
    callfnptr                 i64 
    pop            mwindowsp.mainwndproc.result i64 
    jump           #5391      
#5390: 
    push           0          i64 
    pop            mwindowsp.mainwndproc.result i64 
#5391: 
    push           &mwindowsp.mainwndproc.m 
    push           8          
    pushptroff                u32 1 0
    push           2          i64 
    jumpne         #5392      i64 
    push           0          i64 
    setret                    i64 
    jump           #5393      
#5392: 
    startmult                 
    push           mwindowsp.mainwndproc.result i64 
    jumptrue       #5394      i64 
    setargs                   4 0
    push           mwindowsp.mainwndproc.lparam u64 
    push           mwindowsp.mainwndproc.wparam u64 
    push           mwindowsp.mainwndproc.message u32 
    push           mwindowsp.mainwndproc.hwnd u64 
    callfn         &`DefWindowProcA i64 
    resetmult                 
    jump           #5395      
#5394: 
    push           0          i64 
    endmult                   
#5395: 
    setret                    i64 
    jump           #5393      
#5393: 
    retfn                     i64 
End


Proc mwindowsp.timerproc:
    param          mwindowsp.timerproc.hwnd u64 
    param          mwindowsp.timerproc.msg i64 
    param          mwindowsp.timerproc.id i64 
    param          mwindowsp.timerproc.time i64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "TIMERPROC" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#5397: 
    retproc                   
End


Proc mwindowsp.os_testcallback:
    param          mwindowsp.os_testcallback.p u64 
    procentry                 
    push           mwindowsp.wndproc_callbackfn u64 
    jumpfalse      #5399      u64 
    setargs                   1 0
    push           mwindowsp.os_testcallback.p u64 
    push           mwindowsp.wndproc_callbackfn u64 
    callprocptr               
    jump           #5400      
#5399: 
    setargs                   1 0
    push           "MESS HANDLER NOT DEFINED" u64 
    callproc       &mlibp.abortprogram 
#5400: 
#5401: 
    retproc                   
End


Proc mwindowsp.os_setmesshandler:
    param          mwindowsp.os_setmesshandler.addr u64 
    procentry                 
    push           mwindowsp.os_setmesshandler.addr u64 
    pop            mwindowsp.wndproc_callbackfn u64 
#5403: 
    retproc                   
End


Proc mwindowsp.os_getchx: i64
    local          mwindowsp.os_getchx.count i64 
    local          mwindowsp.os_getchx.charcode i64 
    local          mwindowsp.os_getchx.keyshift i64 
    local          mwindowsp.os_getchx.keycode i64 
    local          mwindowsp.os_getchx.altdown i64 
    local          mwindowsp.os_getchx.ctrldown i64 
    local          mwindowsp.os_getchx.shiftdown i64 
    local          mwindowsp.os_getchx.capslock i64 
    procentry                 
    push           mwindowsp.init_flag i64 
    jumptrue       #5405      i64 
    setargs                   0 0
    callproc       &mwindowsp.os_init 
#5405: 
    push           mwindowsp.keypending i64 
    jumpfalse      #5406      i64 
    push           mwindowsp.pendkey block:20 
    pop            mwindowsp.lastkey block:20 
    push           0          i64 
    pop            mwindowsp.keypending i64 
    jump           #5407      
#5406: 
    push           &mwindowsp.lastkey 
    push           8          
    pushptroff                u16 1 0
    push           0          i64 
    jumpne         #5408      i64 
#5409: 
    push           0          i64 
    pop            mwindowsp.os_getchx.count i64 
    setargs                   4 0
    push           &mwindowsp.os_getchx.count 
    push           1          i64 
    push           &mwindowsp.lastkey 
    push           mwindowsp.hconsolein u64 
    callproc       &`ReadConsoleInputA 
#5410: 
    push           &mwindowsp.lastkey 
    pushptr                   u16 
    push           1          i64 
    jumpne         #5409      i64 
    push           &mwindowsp.lastkey 
    push           4          
    pushptroff                u32 1 0
    push           1          i64 
    jumpne         #5409      i64 
#5411: 
#5408: 
#5407: 
    startmult                 
    push           &mwindowsp.lastkey 
    push           16         
    pushptroff                u32 1 0
    push           3          i64 
    iand                      i64 
    jumpfalse      #5412      i64 
    push           1          i64 
    resetmult                 
    jump           #5413      
#5412: 
    push           0          i64 
    endmult                   
#5413: 
    pop            mwindowsp.os_getchx.altdown i64 
    startmult                 
    push           &mwindowsp.lastkey 
    push           16         
    pushptroff                u32 1 0
    push           12         i64 
    iand                      i64 
    jumpfalse      #5414      i64 
    push           1          i64 
    resetmult                 
    jump           #5415      
#5414: 
    push           0          i64 
    endmult                   
#5415: 
    pop            mwindowsp.os_getchx.ctrldown i64 
    startmult                 
    push           &mwindowsp.lastkey 
    push           16         
    pushptroff                u32 1 0
    push           16         i64 
    iand                      i64 
    jumpfalse      #5416      i64 
    push           1          i64 
    resetmult                 
    jump           #5417      
#5416: 
    push           0          i64 
    endmult                   
#5417: 
    pop            mwindowsp.os_getchx.shiftdown i64 
    startmult                 
    push           &mwindowsp.lastkey 
    push           16         
    pushptroff                u32 1 0
    push           128        i64 
    iand                      i64 
    jumpfalse      #5418      i64 
    push           1          i64 
    resetmult                 
    jump           #5419      
#5418: 
    push           0          i64 
    endmult                   
#5419: 
    pop            mwindowsp.os_getchx.capslock i64 
    push           &mwindowsp.lastkey 
    push           8          
    addrefoff                 u64 1 0
    decr                      u16 1
    push           &mwindowsp.lastkey 
    push           14         
    pushptroff                u8 1 0
    pop            mwindowsp.os_getchx.charcode i64 
    push           &mwindowsp.lastkey 
    push           10         
    pushptroff                u16 1 0
    push           255        i64 
    iand                      i64 
    pop            mwindowsp.os_getchx.keycode i64 
    push           mwindowsp.os_getchx.charcode i64 
    push           0          i64 
    jumpge         #5420      i64 
    push           mwindowsp.os_getchx.charcode i64 
    push           -128       i64 
    jumpge         #5421      i64 
    push           0          i64 
    pop            mwindowsp.os_getchx.charcode i64 
    jump           #5422      
#5421: 
    push           &mwindowsp.os_getchx.charcode 
    push           256        i64 
    addto                     i64 
#5422: 
#5420: 
    push           mwindowsp.os_getchx.altdown i64 
    jumpfalse      #5423      i64 
    push           mwindowsp.os_getchx.ctrldown i64 
    jumpfalse      #5423      i64 
    push           mwindowsp.os_getchx.charcode i64 
    push           166        i64 
    jumpne         #5423      i64 
    push           0          i64 
    store          mwindowsp.os_getchx.ctrldown i64 
    pop            mwindowsp.os_getchx.altdown i64 
    jump           #5424      
#5423: 
    push           mwindowsp.os_getchx.altdown i64 
    jumptrue       #5425      i64 
    push           mwindowsp.os_getchx.ctrldown i64 
    jumpfalse      #5426      i64 
#5425: 
    push           0          i64 
    pop            mwindowsp.os_getchx.charcode i64 
    push           mwindowsp.os_getchx.keycode i64 
    push           65         i64 
    jumplt         #5427      i64 
    push           mwindowsp.os_getchx.keycode i64 
    push           90         i64 
    jumpgt         #5427      i64 
    push           mwindowsp.os_getchx.keycode i64 
    push           64         i64 
    sub                       i64 
    pop            mwindowsp.os_getchx.charcode i64 
#5427: 
#5426: 
#5424: 
    push           mwindowsp.os_getchx.capslock i64 
    push           3          i64 
    shl                       i64 
    push           mwindowsp.os_getchx.altdown i64 
    push           2          i64 
    shl                       i64 
    ior                       i64 
    push           mwindowsp.os_getchx.ctrldown i64 
    push           1          i64 
    shl                       i64 
    ior                       i64 
    push           mwindowsp.os_getchx.shiftdown i64 
    ior                       i64 
    pop            mwindowsp.os_getchx.keyshift i64 
    push           mwindowsp.os_getchx.keyshift i64 
    push           24         i64 
    shl                       i64 
    push           mwindowsp.os_getchx.keycode i64 
    push           16         i64 
    shl                       i64 
    ior                       i64 
    push           mwindowsp.os_getchx.charcode i64 
    ior                       i64 
    setret                    i64 
    jump           #5428      
#5428: 
    retfn                     i64 
End


Proc mwindowsp.os_getos: u64
    procentry                 
    push           "W64"      u64 
    setret                    u64 
    jump           #5430      
#5430: 
    retfn                     u64 
End


Proc mwindowsp.os_gethostsize: i64
    procentry                 
    push           64         i64 
    setret                    i64 
    jump           #5432      
#5432: 
    retfn                     i64 
End


Proc mwindowsp.os_shellexec: i64
    param          mwindowsp.os_shellexec.opc u64 
    param          mwindowsp.os_shellexec.file u64 
    procentry                 
    setargs                   1 0
    push           mwindowsp.os_shellexec.file u64 
    callfn         &system    i32 
    setret                    i64 
    jump           #5434      
#5434: 
    retfn                     i64 
End


Proc mwindowsp.os_sleep:
    param          mwindowsp.os_sleep.a i64 
    procentry                 
    setargs                   1 0
    push           mwindowsp.os_sleep.a i64 
    callproc       &`Sleep    
#5436: 
    retproc                   
End


Proc mwindowsp.os_getstdin: u64
    procentry                 
    setargs                   2 0
    push           "rb"       u64 
    push           "con"      u64 
    callfn         &fopen     u64 
    setret                    u64 
    jump           #5438      
#5438: 
    retfn                     u64 
End


Proc mwindowsp.os_getstdout: u64
    procentry                 
    setargs                   2 0
    push           "wb"       u64 
    push           "con"      u64 
    callfn         &fopen     u64 
    setret                    u64 
    jump           #5440      
#5440: 
    retfn                     u64 
End


Proc mwindowsp.os_gethostname: u64
    procentry                 
    setargs                   3 0
    push           300        i64 
    push           &mwindowsp.os_gethostname.name 
    push           0          u64 
    callproc       &`GetModuleFileNameA 
    push           &mwindowsp.os_gethostname.name 
    setret                    u64 
    jump           #5442      
#5442: 
    retfn                     u64 
End


Proc mwindowsp.os_getmpath: u64
    procentry                 
    push           "C:\\m\\"  u64 
    setret                    u64 
    jump           #5444      
#5444: 
    retfn                     u64 
End


Proc mwindowsp.os_exitprocess:
    param          mwindowsp.os_exitprocess.x i64 
    procentry                 
    push           mwindowsp.os_exitprocess.x i64 
    stop                      
#5446: 
    retproc                   
End


Proc mwindowsp.os_clock: i64
    procentry                 
    setargs                   0 0
    callfn         &clock     i32 
    setret                    i64 
    jump           #5448      
#5448: 
    retfn                     i64 
End


Proc mwindowsp.os_ticks: i64
    procentry                 
    setargs                   0 0
    callfn         &`GetTickCount64 i64 
    setret                    i64 
    jump           #5450      
#5450: 
    retfn                     i64 
End


Proc mwindowsp.os_getclockspersec: i64
    procentry                 
    push           1000       i64 
    setret                    i64 
    jump           #5452      
#5452: 
    retfn                     i64 
End


Proc mwindowsp.os_iswindows: i64
    procentry                 
    push           1          i64 
    setret                    i64 
    jump           #5454      
#5454: 
    retfn                     i64 
End


Proc mwindowsp.os_filelastwritetime: i64
    param          mwindowsp.os_filelastwritetime.filename u64 
    local          mwindowsp.os_filelastwritetime.f u64 
    local          mwindowsp.os_filelastwritetime.ctime i64 
    local          mwindowsp.os_filelastwritetime.atime i64 
    local          mwindowsp.os_filelastwritetime.wtime i64 
    procentry                 
    push           mwindowsp.os_filelastwritetime.filename u64 
    push           0          u64 
    jumpne         #5456      u64 
    push           1          i64 
    setret                    i64 
    jump           #5457      
#5456: 
    setargs                   7 0
    push           0          u64 
    push           3          i64 
    push           3          i64 
    push           0          u64 
    push           1          i64 
    push           2147483648 i64 
    push           mwindowsp.os_filelastwritetime.filename u64 
    callfn         &`CreateFileA u64 
    pop            mwindowsp.os_filelastwritetime.f u64 
    push           mwindowsp.os_filelastwritetime.f i64 
    push           -1         i64 
    jumpne         #5458      i64 
    push           0          i64 
    setret                    i64 
    jump           #5457      
#5458: 
    setargs                   4 0
    push           &mwindowsp.os_filelastwritetime.wtime 
    push           &mwindowsp.os_filelastwritetime.atime 
    push           &mwindowsp.os_filelastwritetime.ctime 
    push           mwindowsp.os_filelastwritetime.f u64 
    callproc       &`GetFileTime 
    setargs                   1 0
    push           mwindowsp.os_filelastwritetime.f u64 
    callproc       &`CloseHandle 
    push           mwindowsp.os_filelastwritetime.wtime i64 
    setret                    i64 
    jump           #5457      
#5457: 
    retfn                     i64 
End


Proc mwindowsp.os_getsystime:
    param          mwindowsp.os_getsystime.tm u64 
    procentry                 
    setargs                   1 0
    push           mwindowsp.os_getsystime.tm u64 
    callproc       &`GetLocalTime 
#5460: 
    retproc                   
End


Proc mwindowsp.os_messagebox:
    param          mwindowsp.os_messagebox.s u64 
    param          mwindowsp.os_messagebox.t u64 
    procentry                 
    setargs                   4 0
    push           0          i64 
    push           mwindowsp.os_messagebox.t u64 
    push           mwindowsp.os_messagebox.s u64 
    push           0          i64 
    callproc       &`MessageBoxA 
#5462: 
    retproc                   
End


Proc mwindowsp.os_hpcounter: i64
    local          mwindowsp.os_hpcounter.a i64 
    procentry                 
    setargs                   1 0
    push           &mwindowsp.os_hpcounter.a 
    callproc       &`QueryPerformanceCounter 
    push           mwindowsp.os_hpcounter.a i64 
    setret                    i64 
    jump           #5464      
#5464: 
    retfn                     i64 
End


Proc mwindowsp.os_hpfrequency: i64
    local          mwindowsp.os_hpfrequency.a i64 
    procentry                 
    setargs                   1 0
    push           &mwindowsp.os_hpfrequency.a 
    callproc       &`QueryPerformanceFrequency 
    push           mwindowsp.os_hpfrequency.a i64 
    setret                    i64 
    jump           #5466      
#5466: 
    retfn                     i64 
End


Proc mwindowsp.os_peek:
    local          mwindowsp.os_peek.ticks i64 
    local          mwindowsp.os_peek.m block:100 
    procentry                 
    setargs                   0 0
    callfn         &`GetTickCount64 i64 
    pop            mwindowsp.os_peek.ticks i64 
    push           mwindowsp.os_peek.ticks i64 
    push           mwindowsp.os_peek.lastticks i64 
    sub                       i64 
    push           1000       i64 
    jumplt         #5468      i64 
    push           mwindowsp.os_peek.ticks i64 
    pop            mwindowsp.os_peek.lastticks i64 
    setargs                   5 0
    push           0          i64 
    push           0          i64 
    push           0          i64 
    push           0          u64 
    push           &mwindowsp.os_peek.m 
    callproc       &`PeekMessageA 
#5468: 
#5469: 
    retproc                   
End


Proc pc_libpcl.pcl_start::
    procentry                 
    push           pc_libpcl.initpcalloc i64 
    pop            pc_libpcl.pcalloc i64 
    setargs                   1 0
    push           pc_libpcl.pcalloc i64 
    push           32         i64 
    mul                       i64 
    callfn         &mlibp.pcm_allocz u64 
    pop            pc_libpcl.pcstart u64 
    push           pc_libpcl.pcstart u64 
    push           pc_libpcl.pcalloc i64 
    addrefoff                 u64 32 -256
    pop            pc_libpcl.pcend u64 
    push           pc_libpcl.pcstart u64 
    push           1          i64 
    subrefoff                 u64 32 0
    pop            pc_libpcl.pccurr u64 
    push           0          i64 
    pop            pc_libpcl.pcfixed u8 
    push           0          i64 
    pop            pc_libpcl.pcseqno i64 
    push           0          i64 
    pop            pc_libpcl.pcneedfntable i64 
    push           0          i64 
    store          pc_libpcl.labelnooffset i64 
    store          pc_libpcl.maxuserlabel i64 
    pop            pc_libpcl.labelno i64 
    push           0          i64 
    pop            pc_libpcl.mcldone i64 
    push           &pc_decls.rtsproctable 
    clear                     block:48 
#5471: 
    retproc                   
End


Proc pc_libpcl.pcl_end::
    param          pc_libpcl.pcl_end.fixup i64 
    procentry                 
    push           pc_libpcl.pccurr u64 
    push           pc_libpcl.pccurr u64 
    jumplt         #5473      u64 
    push           pc_libpcl.pccurr u64 
    push           1          
    pushptroff                u8 1 0
    push           11         i64 
    jumpeq         #5473      i64 
    setargs                   2 0
    push           0          u64 
    push           11         i64 
    callproc       &pc_libpcl.pcl_gen 
#5473: 
    push           pc_libpcl.pcl_end.fixup i64 
    jumpfalse      #5474      i64 
    setargs                   0 0
    callproc       &pc_libpcl.fixuppcl 
#5474: 
#5475: 
    retproc                   
End


Proc pc_libpcl.pcl_free::
    param          pc_libpcl.pcl_free.fixup i64 
    procentry                 
    push           0          u64 
    store          pc_libpcl.pcend u64 
    store          pc_libpcl.pccurr u64 
    pop            pc_libpcl.pcstart u64 
    push           0          i64 
    pop            pc_libpcl.pcfixed u8 
#5477: 
    retproc                   
End


Proc pc_libpcl.fixuppcl:
    local          pc_libpcl.fixuppcl.d u64 
    local          pc_libpcl.fixuppcl.p u64 
    local          pc_libpcl.fixuppcl.pextproc u64 
    local          pc_libpcl.fixuppcl.labno i64 
    local          pc_libpcl.fixuppcl.insideproc i64 
    local          pc_libpcl.fixuppcl.extparams i64 
    procentry                 
    push           pc_libpcl.pcfixed u8 
    jumpfalse      #5479      i64 
    jump           #5480      
#5479: 
    push           pc_libpcl.pcstart u64 
    pop            pc_libpcl.fixuppcl.p u64 
    push           0          i64 
    pop            pc_libpcl.fixuppcl.insideproc i64 
    push           0          u64 
    pop            pc_libpcl.fixuppcl.pextproc u64 
    jump           #5481      
#5482: 
    push           pc_libpcl.fixuppcl.p u64 
    push           1          
    pushptroff                u8 1 0
    switch         #5483      5 96
    opnd           #5484      
#5483: 
    switchlabel    #5485      
    switchlabel    #5485      
    switchlabel    #5484      
    switchlabel    #5486      
    switchlabel    #5484      
    switchlabel    #5487      
    switchlabel    #5484      
    switchlabel    #5488      
    switchlabel    #5489      
    switchlabel    #5490      
    switchlabel    #5491      
    switchlabel    #5484      
    switchlabel    #5492      
    switchlabel    #5492      
    switchlabel    #5484      
    switchlabel    #5493      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5484      
    switchlabel    #5494      
    switchlabel    #5495      
    switchlabel    #5496      
    switchlabel    #5497      
    switchlabel    #5498      
    endswitch                 
#5492: 
    push           pc_libpcl.fixuppcl.insideproc i64 
    push           1          i64 
    jumpeq         #5499      i64 
    setargs                   1 0
    push           "Not allowed" u64 
    callproc       &pc_libpcl.perror 
#5499: 
    push           pc_libpcl.fixuppcl.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_libpcl.fixuppcl.d u64 
    push           pc_libpcl.fixuppcl.p u64 
    push           1          
    pushptroff                u8 1 0
    push           pc_libpcl.fixuppcl.d u64 
    push           27         
    popptroff                 u8 1 0
    push           pc_libpcl.fixuppcl.p u64 
    push           pc_libpcl.fixuppcl.d u64 
    push           16         
    popptroff                 u64 1 0
    push           pc_libpcl.fixuppcl.d u64 
    push           46         
    pushptroff                u16 1 0
    push           0          i64 
    dotindex                  i64 
    jumpfalse      #5500      u64 
    setargs                   2 0
    push           pc_libpcl.fixuppcl.d u64 
    pushptr                   u64 
    push           "Redefining local/param/ext:" u64 
    callproc       &pc_libpcl.perror_s 
#5500: 
    push           1          u64 
    push           pc_libpcl.fixuppcl.d u64 
    push           46         
    addrefoff                 u64 1 0
    push           0          i64 
    popdotindex               u16 
    jump           #5501      
#5486: 
    push           pc_libpcl.fixuppcl.insideproc i64 
    jumpfalse      #5502      i64 
    setargs                   1 0
    push           "Nested proc" u64 
    callproc       &pc_libpcl.perror 
#5502: 
    push           1          i64 
    pop            pc_libpcl.fixuppcl.insideproc i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_libpcl.fixuppcl.d u64 
    push           pc_libpcl.fixuppcl.p u64 
    push           1          
    pushptroff                u8 1 0
    push           pc_libpcl.fixuppcl.d u64 
    push           27         
    popptroff                 u8 1 0
    push           pc_libpcl.fixuppcl.p u64 
    push           pc_libpcl.fixuppcl.d u64 
    push           16         
    popptroff                 u64 1 0
    push           pc_libpcl.fixuppcl.d u64 
    push           46         
    pushptroff                u16 1 0
    push           0          i64 
    dotindex                  i64 
    jumpfalse      #5503      u64 
    setargs                   2 0
    push           pc_libpcl.fixuppcl.d u64 
    pushptr                   u64 
    push           "Redefining proc:" u64 
    callproc       &pc_libpcl.perror_s 
#5503: 
    push           1          u64 
    push           pc_libpcl.fixuppcl.d u64 
    push           46         
    addrefoff                 u64 1 0
    push           0          i64 
    popdotindex               u16 
    setargs                   1 0
    push           pc_libpcl.fixuppcl.d u64 
    callproc       &pc_libpcl.assignlabeltoname 
    jump           #5501      
#5485: 
    push           pc_libpcl.fixuppcl.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_libpcl.fixuppcl.d u64 
    push           pc_libpcl.fixuppcl.p u64 
    push           1          
    pushptroff                u8 1 0
    push           pc_libpcl.fixuppcl.d u64 
    push           27         
    popptroff                 u8 1 0
    push           pc_libpcl.fixuppcl.p u64 
    push           pc_libpcl.fixuppcl.d u64 
    push           16         
    popptroff                 u64 1 0
    push           pc_libpcl.fixuppcl.d u64 
    push           46         
    pushptroff                u16 1 0
    push           0          i64 
    dotindex                  i64 
    jumpfalse      #5504      u64 
    setargs                   2 0
    push           pc_libpcl.fixuppcl.d u64 
    pushptr                   u64 
    push           "Redefining proc/static/label:" u64 
    callproc       &pc_libpcl.perror_s 
#5504: 
    push           1          u64 
    push           pc_libpcl.fixuppcl.d u64 
    push           46         
    addrefoff                 u64 1 0
    push           0          i64 
    popdotindex               u16 
    setargs                   1 0
    push           pc_libpcl.fixuppcl.d u64 
    callproc       &pc_libpcl.assignlabeltoname 
    jump           #5501      
#5487: 
    push           pc_libpcl.fixuppcl.insideproc i64 
    push           1          i64 
    jumpeq         #5505      i64 
    setargs                   1 0
    push           "End without proc" u64 
    callproc       &pc_libpcl.perror 
#5505: 
    push           0          i64 
    pop            pc_libpcl.fixuppcl.insideproc i64 
    jump           #5501      
#5491: 
    push           pc_libpcl.fixuppcl.insideproc i64 
    push           2          i64 
    jumpeq         #5506      i64 
    setargs                   1 0
    push           "End without extproc" u64 
    callproc       &pc_libpcl.perror 
#5506: 
    push           0          i64 
    pop            pc_libpcl.fixuppcl.insideproc i64 
    jump           #5501      
#5488: 
    push           pc_libpcl.fixuppcl.p u64 
    pop            pc_libpcl.fixuppcl.pextproc u64 
    push           0          i64 
    pop            pc_libpcl.fixuppcl.extparams i64 
    push           pc_libpcl.fixuppcl.insideproc i64 
    jumpfalse      #5507      i64 
    setargs                   1 0
    push           "Nested proc" u64 
    callproc       &pc_libpcl.perror 
#5507: 
    push           2          i64 
    pop            pc_libpcl.fixuppcl.insideproc i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_libpcl.fixuppcl.d u64 
    push           pc_libpcl.fixuppcl.d u64 
    push           46         
    pushptroff                u16 1 0
    push           0          i64 
    dotindex                  i64 
    jumptrue       #5508      u64 
    push           pc_libpcl.fixuppcl.p u64 
    push           1          
    pushptroff                u8 1 0
    push           pc_libpcl.fixuppcl.d u64 
    push           27         
    popptroff                 u8 1 0
    push           pc_libpcl.fixuppcl.p u64 
    push           pc_libpcl.fixuppcl.d u64 
    push           16         
    popptroff                 u64 1 0
    push           pc_libpcl.fixuppcl.d u64 
    push           46         
    pushptroff                u16 1 0
    push           0          i64 
    dotindex                  i64 
    jumpfalse      #5509      u64 
    setargs                   2 0
    push           pc_libpcl.fixuppcl.d u64 
    pushptr                   u64 
    push           "Redefining extproc:" u64 
    callproc       &pc_libpcl.perror_s 
#5509: 
    push           1          u64 
    push           pc_libpcl.fixuppcl.d u64 
    push           46         
    addrefoff                 u64 1 0
    push           0          i64 
    popdotindex               u16 
    push           1          u64 
    push           pc_libpcl.fixuppcl.d u64 
    push           46         
    addrefoff                 u64 1 0
    push           1          i64 
    popdotindex               u16 
#5508: 
    jump           #5501      
#5489: 
    push           pc_libpcl.fixuppcl.insideproc i64 
    push           2          i64 
    jumpeq         #5510      i64 
    setargs                   1 0
    push           "Not allowed" u64 
    callproc       &pc_libpcl.perror 
#5510: 
    push           &pc_libpcl.fixuppcl.extparams 
    incr                      i64 1
    jump           #5501      
#5490: 
    push           pc_libpcl.fixuppcl.insideproc i64 
    push           2          i64 
    jumpeq         #5511      i64 
    setargs                   1 0
    push           "Not allowed" u64 
    callproc       &pc_libpcl.perror 
#5511: 
    push           pc_libpcl.fixuppcl.extparams i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           16         
    popptroff                 i32 1 0
    jump           #5501      
#5493: 
    push           pc_libpcl.fixuppcl.p u64 
    push           8          
    pushptroff                i64 1 0
    pop            pc_libpcl.fixuppcl.labno i64 
    push           pc_libpcl.fixuppcl.labno i64 
    push           1          i64 
    push           1000000    i64 
    jumpinrange    #5512      i64 
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_libpcl.fixuppcl.labno i64 
    callfn         &msysp.strint u64 
    push           "3:Label out of range" u64 
    callproc       &pc_libpcl.perror_s 
#5512: 
    setargs                   1 0
    push           pc_libpcl.fixuppcl.labno i64 
    callfn         &pc_libpcl.fixlabel i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           8          
    popptroff                 i64 1 0
    push           3          i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           0          
    popptroff                 u8 1 0
    jump           #5501      
#5495: 
    push           92         i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           1          
    popptroff                 u8 1 0
    push           1          i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           3          
    popptroff                 u8 1 0
    push           1          i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           4          
    popptroff                 i32 1 0
    jump           #5501      
#5496: 
    push           92         i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           1          
    popptroff                 u8 1 0
    push           2          i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           3          
    popptroff                 u8 1 0
    push           2          i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           4          
    popptroff                 i32 1 0
    jump           #5501      
#5497: 
    push           92         i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           1          
    popptroff                 u8 1 0
    push           3          i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           3          
    popptroff                 u8 1 0
    push           4          i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           4          
    popptroff                 i32 1 0
    jump           #5501      
#5498: 
    push           92         i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           1          
    popptroff                 u8 1 0
    push           4          i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           3          
    popptroff                 u8 1 0
    push           8          i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           4          
    popptroff                 i32 1 0
    jump           #5501      
#5494: 
    push           pc_libpcl.fixuppcl.p u64 
    push           4          
    pushptroff                i32 1 0
    push           0          i64 
    jumpne         #5513      i64 
    push           &pc_tables.psize 
    push           pc_libpcl.fixuppcl.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           pc_libpcl.fixuppcl.p u64 
    push           4          
    popptroff                 i32 1 0
#5513: 
    jump           #5501      
#5484: 
    push           pc_libpcl.fixuppcl.p u64 
    pushptr                   u8 
    push           5          i64 
    casejumpeq     #5514      i64 0
    push           3          i64 
    casejumpeq     #5515      i64 0
    push           197        i64 
    casejumpeq     #5516      i64 0
    push           198        i64 
    casejumpeq     #5516      i64 0
    push           199        i64 
    casejumpeq     #5516      i64 0
    popstack                  i64 
    jump           #5517      
#5514: 
    push           pc_libpcl.fixuppcl.p u64 
    push           3          
    pushptroff                u8 1 0
    push           11         i64 
    jumpeq         #5518      i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           4          
    pushptroff                i32 1 0
    push           4          i64 
    jumpne         #5519      i64 
#5518: 
    push           7          i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           0          
    popptroff                 u8 1 0
    push           pc_libpcl.fixuppcl.p u64 
    push           8          
    pushptroff                r64 1 0
    fnarrow                   r32 r64 
    push           pc_libpcl.fixuppcl.p u64 
    push           8          
    popptroff                 r32 1 0
#5519: 
    jump           #5520      
#5515: 
    setargs                   1 0
    push           pc_libpcl.fixuppcl.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libpcl.fixlabel i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           8          
    popptroff                 i64 1 0
    jump           #5520      
#5516: 
    push           1          i64 
    pop            pc_libpcl.pcneedfntable i64 
    jump           #5520      
#5517: 
#5520: 
#5501: 
#5521: 
    push           &pc_libpcl.fixuppcl.p 
    incr                      u64 32
#5481: 
    push           pc_libpcl.fixuppcl.p u64 
    push           pc_libpcl.pcend u64 
    jumple         #5482      u64 
#5522: 
    push           pc_libpcl.fixuppcl.insideproc i64 
    jumpfalse      #5523      i64 
    setargs                   1 0
    push           "End missing" u64 
    callproc       &pc_libpcl.perror 
#5523: 
    push           1          i64 
    pop            pc_libpcl.pcfixed u8 
#5480: 
    retproc                   
End


Proc pc_libpcl.extendpclblock:
    local          pc_libpcl.extendpclblock.newpcalloc i64 
    local          pc_libpcl.extendpclblock.lengthused i64 
    local          pc_libpcl.extendpclblock.newpcstart u64 
    procentry                 
    push           pc_libpcl.pcalloc i64 
    push           2          i64 
    mul                       i64 
    pop            pc_libpcl.extendpclblock.newpcalloc i64 
    push           pc_libpcl.pccurr u64 
    push           pc_libpcl.pcstart u64 
    subref                    i64 32
    push           1          i64 
    add                       i64 
    pop            pc_libpcl.extendpclblock.lengthused i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "EXTENDING PCM TABLE" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           32         i64 
    push           pc_libpcl.extendpclblock.newpcalloc i64 
    mul                       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pc_libpcl.extendpclblock.newpcstart u64 
    setargs                   3 0
    push           pc_libpcl.extendpclblock.lengthused i64 
    push           32         i64 
    mul                       u64 
    push           pc_libpcl.pcstart u64 
    push           pc_libpcl.extendpclblock.newpcstart u64 
    callproc       &memcpy    
    setargs                   2 0
    push           pc_libpcl.extendpclblock.newpcalloc i64 
    push           pc_libpcl.extendpclblock.lengthused i64 
    sub                       i64 
    push           32         i64 
    mul                       i64 
    push           pc_libpcl.extendpclblock.newpcstart u64 
    push           pc_libpcl.extendpclblock.lengthused i64 
    addrefoff                 u64 32 0
    callproc       &mlibp.pcm_clearmem 
    push           pc_libpcl.extendpclblock.newpcstart u64 
    push           pc_libpcl.pccurr u64 
    push           pc_libpcl.pcstart u64 
    subref                    i64 32
    addrefoff                 u64 32 0
    pop            pc_libpcl.pccurr u64 
    push           pc_libpcl.extendpclblock.newpcstart u64 
    push           pc_libpcl.extendpclblock.newpcalloc i64 
    addrefoff                 u64 32 -256
    pop            pc_libpcl.pcend u64 
    setargs                   2 0
    push           pc_libpcl.pcalloc i64 
    push           32         i64 
    mul                       i64 
    push           pc_libpcl.pcstart u64 
    callproc       &mlibp.pcm_free 
    push           pc_libpcl.extendpclblock.newpcstart u64 
    pop            pc_libpcl.pcstart u64 
    push           pc_libpcl.extendpclblock.newpcalloc i64 
    pop            pc_libpcl.pcalloc i64 
#5525: 
    retproc                   
End


Proc pc_libpcl.newpcl: u64
    procentry                 
    push           pc_libpcl.pccurr u64 
    push           pc_libpcl.pcend u64 
    jumplt         #5527      u64 
    setargs                   0 0
    callproc       &pc_libpcl.extendpclblock 
#5527: 
    push           &pc_libpcl.pccurr 
    incr                      u64 32
    push           &pc_libpcl.pcseqno 
    incrload                  i64 1
    push           pc_libpcl.pccurr u64 
    push           24         
    popptroff                 u32 1 0
    push           pc_libpcl.pccurr u64 
    setret                    u64 
    jump           #5528      
#5528: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_gen::
    param          pc_libpcl.pcl_gen.opcode i64 
    param          pc_libpcl.pcl_gen.p u64 
    local          pc_libpcl.pcl_gen.d u64 
    procentry                 
    push           pc_libpcl.pcl_gen.p u64 
    push           0          u64 
    jumpne         #5530      u64 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_gen.p u64 
#5530: 
    push           pc_libpcl.pcl_gen.opcode i64 
    push           20         i64 
    casejumpeq     #5531      i64 0
    popstack                  i64 
    jump           #5532      
#5531: 
    setargs                   1 0
    push           "PCLGEN/LABELNAME" u64 
    callproc       &pc_libpcl.perror 
    jump           #5533      
#5532: 
#5533: 
    push           pc_libpcl.pcl_gen.opcode i64 
    push           pc_libpcl.pcl_gen.p u64 
    push           1          
    popptroff                 u8 1 0
#5534: 
    retproc                   
End


Proc pc_libpcl.pcl_gent::
    param          pc_libpcl.pcl_gent.opcode i64 
    param          pc_libpcl.pcl_gent.t i64 
    param          pc_libpcl.pcl_gent.p u64 
    procentry                 
    push           pc_libpcl.pcl_gent.p u64 
    push           0          u64 
    jumpne         #5536      u64 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_gent.p u64 
#5536: 
    push           pc_libpcl.pcl_gent.opcode i64 
    push           pc_libpcl.pcl_gent.p u64 
    push           1          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_gent.t i64 
    push           0          i64 
    jumpge         #5537      i64 
    push           13         i64 
    push           pc_libpcl.pcl_gent.p u64 
    push           3          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_gent.t i64 
    neg                       i64 
    push           pc_libpcl.pcl_gent.p u64 
    push           4          
    popptroff                 i32 1 0
    jump           #5538      
#5537: 
    push           pc_libpcl.pcl_gent.t i64 
    push           pc_libpcl.pcl_gent.p u64 
    push           3          
    popptroff                 u8 1 0
#5538: 
#5539: 
    retproc                   
End


Proc pc_libpcl.pcl_genx::
    param          pc_libpcl.pcl_genx.opcode i64 
    param          pc_libpcl.pcl_genx.x i64 
    param          pc_libpcl.pcl_genx.p u64 
    procentry                 
    push           pc_libpcl.pcl_genx.p u64 
    push           0          u64 
    jumpne         #5541      u64 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_genx.p u64 
#5541: 
    push           pc_libpcl.pcl_genx.opcode i64 
    push           pc_libpcl.pcl_genx.p u64 
    push           1          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_genx.x i64 
    push           pc_libpcl.pcl_genx.p u64 
    push           16         
    popptroff                 i32 1 0
#5542: 
    retproc                   
End


Proc pc_libpcl.pcl_genxy::
    param          pc_libpcl.pcl_genxy.opcode i64 
    param          pc_libpcl.pcl_genxy.x i64 
    param          pc_libpcl.pcl_genxy.y i64 
    param          pc_libpcl.pcl_genxy.p u64 
    procentry                 
    push           pc_libpcl.pcl_genxy.p u64 
    push           0          u64 
    jumpne         #5544      u64 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_genxy.p u64 
#5544: 
    push           pc_libpcl.pcl_genxy.opcode i64 
    push           pc_libpcl.pcl_genxy.p u64 
    push           1          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_genxy.x i64 
    push           pc_libpcl.pcl_genxy.p u64 
    push           16         
    popptroff                 i32 1 0
    push           pc_libpcl.pcl_genxy.y i64 
    push           pc_libpcl.pcl_genxy.p u64 
    push           20         
    popptroff                 i32 1 0
#5545: 
    retproc                   
End


Proc pc_libpcl.pcl_genint:: u64
    param          pc_libpcl.pcl_genint.a i64 
    param          pc_libpcl.pcl_genint.mode i64 
    local          pc_libpcl.pcl_genint.p u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_genint.p u64 
    push           pc_libpcl.pcl_genint.a i64 
    push           pc_libpcl.pcl_genint.p u64 
    push           8          
    popptroff                 i64 1 0
    push           4          i64 
    push           pc_libpcl.pcl_genint.p u64 
    push           0          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_genint.p u64 
    setret                    u64 
    jump           #5547      
#5547: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_genint128:: u64
    param          pc_libpcl.pcl_genint128.a i128 
    param          pc_libpcl.pcl_genint128.mode i64 
    local          pc_libpcl.pcl_genint128.p u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_genint128.p u64 
    push           pc_libpcl.pcl_genint128.a i128 
    push           pc_libpcl.pcl_genint128.p u64 
    push           8          
    popptroff                 i128 1 0
    push           6          i64 
    push           pc_libpcl.pcl_genint128.p u64 
    push           0          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_genint128.p u64 
    setret                    u64 
    jump           #5549      
#5549: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_genreal:: u64
    param          pc_libpcl.pcl_genreal.x r64 
    local          pc_libpcl.pcl_genreal.p u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_genreal.p u64 
    push           pc_libpcl.pcl_genreal.x r64 
    push           pc_libpcl.pcl_genreal.p u64 
    push           8          
    popptroff                 r64 1 0
    push           5          i64 
    push           pc_libpcl.pcl_genreal.p u64 
    push           0          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_genreal.p u64 
    setret                    u64 
    jump           #5551      
#5551: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_genreal32:: u64
    param          pc_libpcl.pcl_genreal32.x r64 
    local          pc_libpcl.pcl_genreal32.p u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_genreal32.p u64 
    push           pc_libpcl.pcl_genreal32.x r64 
    fnarrow                   r32 r64 
    push           pc_libpcl.pcl_genreal32.p u64 
    push           8          
    popptroff                 r32 1 0
    push           7          i64 
    push           pc_libpcl.pcl_genreal32.p u64 
    push           0          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_genreal32.p u64 
    setret                    u64 
    jump           #5553      
#5553: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_genstring:: u64
    param          pc_libpcl.pcl_genstring.s u64 
    local          pc_libpcl.pcl_genstring.p u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_genstring.p u64 
    setargs                   1 0
    push           pc_libpcl.pcl_genstring.s u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           pc_libpcl.pcl_genstring.p u64 
    push           8          
    popptroff                 u64 1 0
    push           8          i64 
    push           pc_libpcl.pcl_genstring.p u64 
    push           0          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_genstring.p u64 
    setret                    u64 
    jump           #5555      
#5555: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_genlabel:: u64
    param          pc_libpcl.pcl_genlabel.a i64 
    local          pc_libpcl.pcl_genlabel.p u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_genlabel.p u64 
    push           pc_libpcl.pcl_genlabel.a i64 
    push           pc_libpcl.pcl_genlabel.p u64 
    push           8          
    popptroff                 i64 1 0
    push           3          i64 
    push           pc_libpcl.pcl_genlabel.p u64 
    push           0          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_genlabel.p u64 
    setret                    u64 
    jump           #5557      
#5557: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_genmem:: u64
    param          pc_libpcl.pcl_genmem.d u64 
    local          pc_libpcl.pcl_genmem.p u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_genmem.p u64 
    push           pc_libpcl.pcl_genmem.d u64 
    push           pc_libpcl.pcl_genmem.p u64 
    push           8          
    popptroff                 u64 1 0
    push           1          i64 
    push           pc_libpcl.pcl_genmem.p u64 
    push           0          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_genmem.p u64 
    setret                    u64 
    jump           #5559      
#5559: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_genmemaddr:: u64
    param          pc_libpcl.pcl_genmemaddr.d u64 
    local          pc_libpcl.pcl_genmemaddr.p u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_genmemaddr.p u64 
    push           pc_libpcl.pcl_genmemaddr.d u64 
    push           pc_libpcl.pcl_genmemaddr.p u64 
    push           8          
    popptroff                 u64 1 0
    push           2          i64 
    push           pc_libpcl.pcl_genmemaddr.p u64 
    push           0          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_genmemaddr.p u64 
    setret                    u64 
    jump           #5561      
#5561: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_gencomment::
    param          pc_libpcl.pcl_gencomment.s u64 
    procentry                 
    setargs                   2 0
    setargs                   1 0
    push           pc_libpcl.pcl_gencomment.s u64 
    callfn         &pc_libpcl.pcl_genstring u64 
    push           3          i64 
    callproc       &pc_libpcl.pcl_gen 
#5563: 
    retproc                   
End


Proc pc_libpcl.pcl_genname:: u64
    param          pc_libpcl.pcl_genname.s u64 
    procentry                 
    setargs                   1 0
    setargs                   1 0
    push           pc_libpcl.pcl_genname.s u64 
    callfn         &pc_libpcl.pcl_makesymbol u64 
    callfn         &pc_libpcl.pcl_genmem u64 
    setret                    u64 
    jump           #5565      
#5565: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_gennameaddr:: u64
    param          pc_libpcl.pcl_gennameaddr.s u64 
    procentry                 
    setargs                   1 0
    setargs                   1 0
    push           pc_libpcl.pcl_gennameaddr.s u64 
    callfn         &pc_libpcl.pcl_makesymbol u64 
    callfn         &pc_libpcl.pcl_genmemaddr u64 
    setret                    u64 
    jump           #5567      
#5567: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_makesymbol:: u64
    param          pc_libpcl.pcl_makesymbol.s u64 
    local          pc_libpcl.pcl_makesymbol.d u64 
    procentry                 
    setargs                   1 0
    push           pc_libpcl.pcl_makesymbol.s u64 
    callfn         &pc_lex.addnamestr u64 
    pop            pc_libpcl.pcl_makesymbol.d u64 
    push           pc_libpcl.pcl_makesymbol.d u64 
    setret                    u64 
    jump           #5569      
#5569: 
    retfn                     u64 
End


Proc pc_libpcl.strpcl:
    param          pc_libpcl.strpcl.p u64 
    local          pc_libpcl.strpcl.pmodestr block:256 
    local          pc_libpcl.strpcl.str block:256 
    local          pc_libpcl.strpcl.opcode i64 
    local          pc_libpcl.strpcl.defused i64 
    procentry                 
    push           pc_libpcl.strpcl.p u64 
    push           1          
    pushptroff                u8 1 0
    pop            pc_libpcl.strpcl.opcode i64 
    push           pc_libpcl.strpcl.opcode i64 
    push           19         i64 
    casejumpeq     #5571      i64 0
    push           3          i64 
    casejumpeq     #5572      i64 0
    push           8          i64 
    casejumpeq     #5573      i64 0
    push           10         i64 
    casejumpeq     #5574      i64 0
    push           15         i64 
    casejumpeq     #5575      i64 0
    push           12         i64 
    casejumpeq     #5576      i64 0
    push           20         i64 
    casejumpeq     #5577      i64 0
    push           11         i64 
    casejumpeq     #5578      i64 0
    popstack                  i64 
    jump           #5579      
#5571: 
    setargs                   2 0
    push           1          i64 
    push           pc_libpcl.strpcl.p u64 
    push           8          
    pushptroff                i64 1 0
    callproc       &pc_libpcl.strlabel 
    jump           #5580      
    jump           #5581      
#5572: 
    push           pc_libpcl.strpcl.p u64 
    push           8          
    pushptroff                u64 1 0
    pushptr                   u8 
    jumpfalse      #5582      u64 
    setargs                   1 0
    push           "!"        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.strpcl.p u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &pc_libpcl.psstr 
#5582: 
    jump           #5580      
    jump           #5581      
#5573: 
    push           pc_libpcl.strpcl.p u64 
    push           8          
    pushptroff                u64 1 0
    push           46         
    pushptroff                u16 1 0
    push           9          i64 
    dotindex                  i64 
    jumpfalse      #5583      u64 
    setargs                   1 0
    push           "Procrts"  u64 
    callproc       &pc_libpcl.psstr 
    jump           #5584      
#5583: 
    setargs                   1 0
    push           "Proc"     u64 
    callproc       &pc_libpcl.psstr 
#5584: 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.strpcl.p u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &pc_libpcl.psname 
    setargs                   1 0
    startmult                 
    push           pc_libpcl.strpcl.p u64 
    push           2          
    pushptroff                u8 1 0
    push           0          i64 
    dotindex                  i64 
    jumpfalse      #5585      u64 
    push           "::"       u64 
    resetmult                 
    jump           #5586      
#5585: 
    push           ":"        u64 
    endmult                   
#5586: 
    callproc       &pc_libpcl.psstr 
    push           pc_libpcl.strpcl.p u64 
    push           3          
    pushptroff                u8 1 0
    jumpfalse      #5587      i64 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    setargs                   2 0
    push           pc_libpcl.strpcl.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_libpcl.strpcl.p u64 
    push           3          
    pushptroff                u8 1 0
    callfn         &pc_libpcl.strpmode u64 
    callproc       &pc_libpcl.psstr 
#5587: 
    jump           #5580      
    jump           #5581      
#5574: 
    setargs                   1 0
    push           "End"      u64 
    callproc       &pc_libpcl.psstr 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    jump           #5580      
    jump           #5581      
#5575: 
    setargs                   1 0
    push           "Endext"   u64 
    callproc       &pc_libpcl.psstr 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    jump           #5580      
    jump           #5581      
#5576: 
    setargs                   1 0
    push           "Extproc"  u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.strpcl.p u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &pc_libpcl.psname 
    push           pc_libpcl.strpcl.p u64 
    push           3          
    pushptroff                u8 1 0
    jumpfalse      #5588      i64 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    setargs                   2 0
    push           pc_libpcl.strpcl.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_libpcl.strpcl.p u64 
    push           3          
    pushptroff                u8 1 0
    callfn         &pc_libpcl.strpmode u64 
    callproc       &pc_libpcl.psstr 
#5588: 
    jump           #5580      
    jump           #5581      
#5577: 
    setargs                   1 0
    push           pc_libpcl.strpcl.p u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &pc_libpcl.psname 
    setargs                   1 0
    startmult                 
    push           pc_libpcl.strpcl.p u64 
    push           8          
    pushptroff                u64 1 0
    push           46         
    pushptroff                u16 1 0
    push           3          i64 
    dotindex                  i64 
    jumpfalse      #5589      u64 
    push           "::"       u64 
    resetmult                 
    jump           #5590      
#5589: 
    push           ":"        u64 
    endmult                   
#5590: 
    callproc       &pc_libpcl.psstr 
    jump           #5580      
    jump           #5581      
#5578: 
    setargs                   1 0
    push           "Endprogram" u64 
    callproc       &pc_libpcl.psstr 
    jump           #5580      
    jump           #5581      
#5579: 
#5581: 
    setargs                   1 0
    push           "    "     u64 
    callproc       &pc_libpcl.psstr 
    setargs                   2 0
    push           &pc_tables.pclnames 
    push           pc_libpcl.strpcl.opcode i64 
    pushptroff                u64 8 0
    push           1          i64 
    addrefoff                 u64 1 0
    push           &pc_libpcl.strpcl.str 
    callproc       &strcpy    
!skip::
#5591: 
    setargs                   4 0
    push           32         i64 
    push           15         i64 
    push           &pc_libpcl.strpcl.str 
    push           pc_libpcl.dest u64 
    callproc       &mlibp.gs_leftstr 
    push           pc_libpcl.strpcl.p u64 
    pushptr                   u8 
    push           0          i64 
    jumpeq         #5592      i64 
    setargs                   1 0
    setargs                   1 0
    push           pc_libpcl.strpcl.p u64 
    callfn         &pc_libpcl.stropnd u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
#5592: 
    setargs                   1 0
    push           30         i64 
    callproc       &pc_libpcl.pstabto 
    push           pc_libpcl.strpcl.p u64 
    push           3          
    pushptroff                u8 1 0
    push           0          i64 
    jumpeq         #5593      i64 
    setargs                   1 0
    setargs                   2 0
    push           pc_libpcl.strpcl.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_libpcl.strpcl.p u64 
    push           3          
    pushptroff                u8 1 0
    callfn         &pc_libpcl.strpmode u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
#5593: 
    push           &pc_tables.pclhastype 
    push           pc_libpcl.strpcl.opcode i64 
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #5594      i64 
    push           pc_libpcl.strpcl.p u64 
    push           3          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #5595      i64 
    setargs                   1 0
    push           "void"     u64 
    callproc       &pc_libpcl.psstr 
#5595: 
    setargs                   1 0
    setargs                   2 0
    push           pc_libpcl.strpcl.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_libpcl.strpcl.p u64 
    push           16         
    pushptroff                i32 1 0
    callfn         &pc_libpcl.strpmode u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
#5594: 
    push           &pc_tables.pclextra 
    push           pc_libpcl.strpcl.opcode i64 
    pushptroff                u8 1 0
    jumpfalse      #5596      i64 
    setargs                   1 0
    push           pc_libpcl.strpcl.p u64 
    push           16         
    pushptroff                i32 1 0
    callproc       &pc_libpcl.psint 
    push           &pc_tables.pclextra 
    push           pc_libpcl.strpcl.opcode i64 
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #5597      i64 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.strpcl.p u64 
    push           20         
    pushptroff                i32 1 0
    callproc       &pc_libpcl.psint 
#5597: 
#5596: 
#5580: 
    retproc                   
End


Proc pc_libpcl.stropnd: u64
    param          pc_libpcl.stropnd.p u64 
    local          pc_libpcl.stropnd.length i64 
    local          pc_libpcl.stropnd.d u64 
    procentry                 
    push           pc_libpcl.stropnd.p u64 
    push           0          u64 
    jumpne         #5599      u64 
    push           ""         u64 
    setret                    u64 
    jump           #5600      
#5599: 
    push           pc_libpcl.stropnd.p u64 
    pushptr                   u8 
    push           4          i64 
    casejumpeq     #5601      i64 0
    push           5          i64 
    casejumpeq     #5602      i64 0
    push           7          i64 
    casejumpeq     #5603      i64 0
    push           8          i64 
    casejumpeq     #5604      i64 0
    push           1          i64 
    casejumpeq     #5605      i64 0
    push           2          i64 
    casejumpeq     #5606      i64 0
    push           3          i64 
    casejumpeq     #5607      i64 0
    push           0          i64 
    casejumpeq     #5608      i64 0
    push           6          i64 
    casejumpeq     #5609      i64 0
    popstack                  i64 
    jump           #5610      
#5601: 
    setargs                   2 0
    push           0          u64 
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &msysp.strint u64 
    setret                    u64 
    jump           #5600      
    jump           #5611      
#5602: 
    setargs                   1 0
    push           &pc_libpcl.stropnd.str 
    callproc       &msysp.m$print_startstr 
    setargs                   2 0
    push           "e16.16"   u64 
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                r64 1 0
    callproc       &msysp.m$print_r64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #5611      
#5603: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "STROP/R32" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   2 0
    push           0          i64 
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                r32 1 0
    callproc       &msysp.m$print_r32 
    setargs                   2 0
    push           0          i64 
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                r64 1 0
    callproc       &msysp.m$print_r64 
    setargs                   2 0
    push           "H"        u64 
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                i64 1 0
    callproc       &msysp.m$print_i64 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           &pc_libpcl.stropnd.str 
    callproc       &msysp.m$print_startstr 
    setargs                   2 0
    push           "e16.16"   u64 
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                r32 1 0
    callproc       &msysp.m$print_r32 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #5611      
#5604: 
    setargs                   1 0
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &strlen    i64 
    store          pc_libpcl.stropnd.length i64 
    push           256        i64 
    jumpge         #5612      i64 
    setargs                   2 0
    push           "\""       u64 
    push           &pc_libpcl.stropnd.str 
    callproc       &strcpy    
    setargs                   2 0
    push           &pc_libpcl.stropnd.str 
    push           1          i64 
    addrefoff                 u64 1 0
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &pc_libpcl.convertstring 
    setargs                   2 0
    push           "\""       u64 
    push           &pc_libpcl.stropnd.str 
    callproc       &strcat    
    jump           #5613      
#5612: 
    push           pc_libpcl.longstring u64 
    jumpfalse      #5614      u64 
    setargs                   2 0
    push           pc_libpcl.longstringlen i64 
    push           pc_libpcl.longstring u64 
    callproc       &mlibp.pcm_free 
#5614: 
    push           pc_libpcl.stropnd.length i64 
    push           2          i64 
    mul                       i64 
    pop            pc_libpcl.longstringlen i64 
    setargs                   1 0
    push           pc_libpcl.longstringlen i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pc_libpcl.longstring u64 
    push           34         u64 
    push           pc_libpcl.longstring u64 
    popptr                    u8 
    setargs                   2 0
    push           pc_libpcl.longstring u64 
    push           1          i64 
    addrefoff                 u64 1 0
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libpcl.convertstring i64 
    pop            pc_libpcl.stropnd.length i64 
    push           34         u64 
    push           pc_libpcl.longstring u64 
    push           pc_libpcl.stropnd.length i64 
    popptroff                 u8 1 1
    push           0          u64 
    push           pc_libpcl.longstring u64 
    push           pc_libpcl.stropnd.length i64 
    popptroff                 u8 1 2
    push           pc_libpcl.longstring u64 
    setret                    u64 
    jump           #5600      
#5613: 
    jump           #5611      
#5605: 
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_libpcl.stropnd.d u64 
    setargs                   1 0
    push           &pc_libpcl.stropnd.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    startmult                 
    push           pc_libpcl.stropnd.d u64 
    push           46         
    pushptroff                u16 1 0
    push           8          i64 
    dotindex                  i64 
    jumpfalse      #5615      u64 
    push           "`"        u64 
    resetmult                 
    jump           #5616      
#5615: 
    push           ""         u64 
    endmult                   
#5616: 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           pc_libpcl.stropnd.d u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           pc_libpcl.stropnd.p u64 
    push           1          
    pushptroff                u8 1 0
    push           5          i64 
    setjumpeq      #5617      i64 
    push           6          i64 
    setjumpne      #5618      i64 
#5617: 
    setargs                   2 0
    push           ":"        u64 
    push           &pc_libpcl.stropnd.str 
    callproc       &strcat    
#5618: 
    jump           #5611      
#5606: 
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_libpcl.stropnd.d u64 
    setargs                   1 0
    push           &pc_libpcl.stropnd.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "&##"      u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    startmult                 
    push           pc_libpcl.stropnd.d u64 
    push           46         
    pushptroff                u16 1 0
    push           8          i64 
    dotindex                  i64 
    jumpfalse      #5619      u64 
    push           "`"        u64 
    resetmult                 
    jump           #5620      
#5619: 
    push           ""         u64 
    endmult                   
#5620: 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libpcl.stropnd.d u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #5611      
#5607: 
    setargs                   1 0
    push           &pc_libpcl.stropnd.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "## "      u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           "#"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                i64 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #5611      
#5608: 
    push           ""         u64 
    setret                    u64 
    jump           #5600      
    jump           #5611      
#5609: 
    setargs                   1 0
    push           &pc_libpcl.stropnd.str 
    callproc       &msysp.m$print_startstr 
    setargs                   3 0
    push           0          i64 
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                i128 1 0
    callproc       &msysp.m$print_i128 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #5611      
#5610: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pc_tables.opndnames 
    push           pc_libpcl.stropnd.p u64 
    pushptr                   u8 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           "<PCLOPND?>" u64 
    setret                    u64 
    jump           #5600      
#5611: 
    push           &pc_libpcl.stropnd.str 
    setret                    u64 
    jump           #5600      
#5600: 
    retfn                     u64 
End


Proc pc_libpcl.psstr:
    param          pc_libpcl.psstr.s u64 
    procentry                 
    setargs                   2 0
    push           pc_libpcl.psstr.s u64 
    push           pc_libpcl.dest u64 
    callproc       &mlibp.gs_str 
#5622: 
    retproc                   
End


Proc pc_libpcl.psline:
    procentry                 
    setargs                   1 0
    push           pc_libpcl.dest u64 
    callproc       &mlibp.gs_line 
#5624: 
    retproc                   
End


Proc pc_libpcl.psint:
    param          pc_libpcl.psint.a i64 
    procentry                 
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_libpcl.psint.a i64 
    callfn         &msysp.strint u64 
    push           pc_libpcl.dest u64 
    callproc       &mlibp.gs_str 
#5626: 
    retproc                   
End


Proc pc_libpcl.psname:
    param          pc_libpcl.psname.d u64 
    procentry                 
    push           pc_libpcl.psname.d u64 
    push           46         
    pushptroff                u16 1 0
    push           8          i64 
    dotindex                  i64 
    jumpfalse      #5628      u64 
    setargs                   2 0
    push           "`"        u64 
    push           pc_libpcl.dest u64 
    callproc       &mlibp.gs_str 
#5628: 
    setargs                   2 0
    push           pc_libpcl.psname.d u64 
    pushptr                   u64 
    push           pc_libpcl.dest u64 
    callproc       &mlibp.gs_str 
#5629: 
    retproc                   
End


Proc pc_libpcl.pstabto:
    param          pc_libpcl.pstabto.n i64 
    local          pc_libpcl.pstabto.col i64 
    procentry                 
    push           pc_libpcl.dest u64 
    push           8          
    pushptroff                i32 1 0
    push           pc_libpcl.destlinestart i64 
    sub                       i64 
    pop            pc_libpcl.pstabto.col i64 
    jump           #5631      
#5632: 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
    push           &pc_libpcl.pstabto.col 
    incr                      i64 1
#5631: 
    push           pc_libpcl.pstabto.n i64 
    push           pc_libpcl.pstabto.col i64 
    jumpgt         #5632      i64 
#5633: 
#5634: 
    retproc                   
End


Proc pc_libpcl.convertstring: i64
    param          pc_libpcl.convertstring.s u64 
    param          pc_libpcl.convertstring.t u64 
    local          pc_libpcl.convertstring.c i64 
    local          pc_libpcl.convertstring.t0 u64 
    procentry                 
    push           pc_libpcl.convertstring.t u64 
    pop            pc_libpcl.convertstring.t0 u64 
    jump           #5636      
#5637: 
    push           pc_libpcl.convertstring.c i64 
    switch         #5638      7 92
    opnd           #5639      
#5638: 
    switchlabel    #5640      
    switchlabel    #5640      
    switchlabel    #5641      
    switchlabel    #5642      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5643      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5640      
    switchlabel    #5640      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5644      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5639      
    switchlabel    #5645      
    endswitch                 
#5644: 
    push           92         u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    push           34         u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    jump           #5646      
#5642: 
    push           92         u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    push           110        u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    jump           #5646      
#5643: 
    push           92         u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    push           99         u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    jump           #5646      
#5641: 
    push           92         u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    push           116        u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    jump           #5646      
#5645: 
    push           92         u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    push           92         u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    jump           #5646      
#5640: 
    push           60         u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    push           pc_libpcl.convertstring.c i64 
    push           10         i64 
    idiv                      i64 
    push           48         i64 
    add                       u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    push           pc_libpcl.convertstring.c i64 
    push           10         i64 
    irem                      i64 
    push           48         i64 
    add                       u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    push           62         u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    jump           #5646      
#5639: 
    push           pc_libpcl.convertstring.c u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
#5646: 
#5636: 
    push           &pc_libpcl.convertstring.s 
    loadincr                  u64 1
    pushptr                   u8 
    store          pc_libpcl.convertstring.c i64 
    jumptrue       #5637      i64 
#5647: 
    push           0          u64 
    push           pc_libpcl.convertstring.t u64 
    popptr                    u8 
    push           pc_libpcl.convertstring.t u64 
    push           pc_libpcl.convertstring.t0 u64 
    subref                    i64 1
    setret                    i64 
    jump           #5648      
#5648: 
    retfn                     i64 
End


Proc pc_libpcl.strlabel:
    param          pc_libpcl.strlabel.labelno i64 
    param          pc_libpcl.strlabel.colon i64 
    procentry                 
    setargs                   1 0
    push           "#"        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.strlabel.labelno i64 
    callproc       &pc_libpcl.psint 
    push           pc_libpcl.strlabel.colon i64 
    jumpfalse      #5650      i64 
    setargs                   1 0
    push           ":"        u64 
    callproc       &pc_libpcl.psstr 
#5650: 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
#5651: 
    retproc                   
End


Proc pc_libpcl.psopnd:
    param          pc_libpcl.psopnd.p u64 
    procentry                 
    setargs                   1 0
    setargs                   1 0
    push           pc_libpcl.psopnd.p u64 
    callfn         &pc_libpcl.stropnd u64 
    callproc       &pc_libpcl.psstr 
#5653: 
    retproc                   
End


Proc pc_libpcl.strpmode: u64
    param          pc_libpcl.strpmode.m i64 
    param          pc_libpcl.strpmode.size i64 
    procentry                 
    push           pc_libpcl.strpmode.m i64 
    push           13         i64 
    jumpeq         #5655      i64 
    setargs                   2 0
    push           &pc_tables.pstdnames 
    push           pc_libpcl.strpmode.m i64 
    pushptroff                u64 8 0
    push           &pc_libpcl.strpmode.str 
    callproc       &strcpy    
    jump           #5656      
#5655: 
    setargs                   1 0
    push           &pc_libpcl.strpmode.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "#:#"      u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           &pc_tables.pstdnames 
    push           pc_libpcl.strpmode.m i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libpcl.strpmode.size i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#5656: 
    push           &pc_libpcl.strpmode.str 
    setret                    u64 
    jump           #5657      
#5657: 
    retfn                     u64 
End


Proc pc_libpcl.writepcl:
    param          pc_libpcl.writepcl.p u64 
    local          pc_libpcl.writepcl.str block:32 
    procentry                 
    setargs                   1 0
    push           pc_libpcl.writepcl.p u64 
    callproc       &pc_libpcl.strpcl 
    setargs                   1 0
    push           pc_libpcl.dest u64 
    callproc       &mlibp.gs_line 
#5659: 
    retproc                   
End


Proc pc_libpcl.writeallpcl:
    local          pc_libpcl.writeallpcl.p u64 
    local          pc_libpcl.writeallpcl.d u64 
    local          pc_libpcl.writeallpcl.e u64 
    procentry                 
    setargs                   1 0
    push           pc_libpcl.dest u64 
    callproc       &mlibp.gs_init 
    push           pc_libpcl.dest u64 
    push           8          
    pushptroff                i32 1 0
    pop            pc_libpcl.destlinestart i64 
    push           pc_libpcl.pcstart u64 
    pop            pc_libpcl.writeallpcl.p u64 
    jump           #5661      
#5662: 
    setargs                   1 0
    push           pc_libpcl.writeallpcl.p u64 
    callproc       &pc_libpcl.writepcl 
    push           pc_libpcl.dest u64 
    push           8          
    pushptroff                i32 1 0
    pop            pc_libpcl.destlinestart i64 
    push           &pc_libpcl.writeallpcl.p 
    incr                      u64 32
#5661: 
    push           pc_libpcl.writeallpcl.p u64 
    push           pc_libpcl.pccurr u64 
    jumple         #5662      u64 
#5663: 
    push           pc_libpcl.longstring u64 
    jumpfalse      #5664      u64 
    setargs                   2 0
    push           pc_libpcl.longstringlen i64 
    push           pc_libpcl.longstring u64 
    callproc       &mlibp.pcm_free 
#5664: 
!done::
#5665: 
    push           pc_libpcl.dest u64 
    push           8          
    pushptroff                i32 1 0
    push           pc_libpcl.dest u64 
    pushptr                   u64 
    setretmult                2
    jump           #5666      
#5666: 
    retfn                     
End


Proc pc_libpcl.nextlabel: i64
    procentry                 
    push           pc_libpcl.labelno i64 
    push           1000000    i64 
    jumplt         #5668      i64 
    setargs                   3 0
    push           0          i64 
    push           0          u64 
    push           "Too many global labels" u64 
    callproc       &pc_libpcl.pclerror 
#5668: 
    push           &pc_libpcl.labelno 
    incrload                  i64 1
    setret                    i64 
    jump           #5669      
#5669: 
    retfn                     i64 
End


Proc pc_libpcl.fixlabel: i64
    param          pc_libpcl.fixlabel.userlab i64 
    procentry                 
    push           pc_libpcl.fixlabel.userlab i64 
    push           1          i64 
    push           1000000    i64 
    jumpinrange    #5671      i64 
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_libpcl.fixlabel.userlab i64 
    callfn         &msysp.strint u64 
    push           "Label no out of range:" u64 
    callproc       &pc_libpcl.perror_s 
#5671: 
    startmult                 
    push           &pc_libpcl.labelmap 
    push           pc_libpcl.fixlabel.userlab i64 
    pushptroff                i32 4 -4
    push           0          i64 
    jumpne         #5672      i64 
    setargs                   0 0
    callfn         &pc_libpcl.nextlabel i64 
    push           &pc_libpcl.labelmap 
    push           pc_libpcl.fixlabel.userlab i64 
    popptroff                 i32 4 -4
    push           pc_libpcl.labelno i64 
    resetmult                 
    jump           #5673      
#5672: 
    push           &pc_libpcl.labelmap 
    push           pc_libpcl.fixlabel.userlab i64 
    pushptroff                i32 4 -4
    endmult                   
#5673: 
    setret                    i64 
    jump           #5674      
#5674: 
    retfn                     i64 
End


Proc pc_libpcl.pdefinelabel:
    param          pc_libpcl.pdefinelabel.label i64 
    param          pc_libpcl.pdefinelabel.seqno i64 
    procentry                 
    push           &pc_libpcl.labeloffset 
    push           pc_libpcl.pdefinelabel.label i64 
    pushptroff                u64 8 -8
    jumpfalse      #5676      u64 
    setargs                   3 0
    push           0          i64 
    setargs                   2 0
    push           0          u64 
    push           pc_libpcl.pdefinelabel.label i64 
    callfn         &msysp.strint u64 
    push           "Redefining label:" u64 
    callproc       &pc_libpcl.pclerror 
#5676: 
    setargs                   2 0
    setargs                   1 0
    push           pc_libpcl.pdefinelabel.label i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    push           19         i64 
    callproc       &pc_libpcl.pcl_gen 
    push           pc_libpcl.pdefinelabel.seqno i64 
    push           pc_libpcl.pccurr u64 
    push           24         
    popptroff                 u32 1 0
    push           pc_libpcl.pccurr u64 
    push           &pc_libpcl.labeloffset 
    push           pc_libpcl.pdefinelabel.label i64 
    popptroff                 u64 8 -8
#5677: 
    retproc                   
End


Proc pc_libpcl.assignlabeltoname:
    param          pc_libpcl.assignlabeltoname.d u64 
    procentry                 
    push           pc_libpcl.assignlabeltoname.d u64 
    push           40         
    pushptroff                i32 1 0
    jumpfalse      #5679      i64 
    jump           #5680      
#5679: 
    setargs                   0 0
    callfn         &pc_libpcl.nextlabel i64 
    push           pc_libpcl.assignlabeltoname.d u64 
    push           40         
    popptroff                 i32 1 0
#5680: 
    retproc                   
End


Proc pc_libpcl.pclerror:
    param          pc_libpcl.pclerror.mess u64 
    param          pc_libpcl.pclerror.param u64 
    param          pc_libpcl.pclerror.lineno i64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "PCC error:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libpcl.pclerror.mess u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           pc_libpcl.pclerror.param u64 
    jumpfalse      #5682      u64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           pc_libpcl.pclerror.param u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#5682: 
    push           pc_libpcl.pclerror.lineno i64 
    jumpfalse      #5683      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           " on line:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libpcl.pclerror.lineno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#5683: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#5684: 
    retproc                   
End


Proc pc_libpcl.getpclstr: u64
    param          pc_libpcl.getpclstr.p u64 
    procentry                 
    setargs                   1 0
    push           pc_libpcl.dest u64 
    callproc       &mlibp.gs_init 
    push           pc_libpcl.dest u64 
    push           8          
    pushptroff                i32 1 0
    pop            pc_libpcl.destlinestart i64 
    setargs                   1 0
    push           pc_libpcl.getpclstr.p u64 
    callproc       &pc_libpcl.strpcl 
    push           0          u64 
    push           pc_libpcl.dest u64 
    pushptr                   u64 
    push           pc_libpcl.dest u64 
    push           8          
    pushptroff                i32 1 0
    popptroff                 u8 1 0
    push           pc_libpcl.dest u64 
    pushptr                   u64 
    setret                    u64 
    jump           #5686      
#5686: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_getopcode:: i64
    procentry                 
    push           pc_libpcl.pccurr u64 
    push           1          
    pushptroff                u8 1 0
    setret                    i64 
    jump           #5688      
#5688: 
    retfn                     i64 
End


Proc pc_libpcl.pcl_setopcode::
    param          pc_libpcl.pcl_setopcode.opc i64 
    procentry                 
    push           pc_libpcl.pcl_setopcode.opc i64 
    push           pc_libpcl.pccurr u64 
    push           1          
    popptroff                 u8 1 0
#5690: 
    retproc                   
End


Proc pc_libpcl.pcl_settype::
    param          pc_libpcl.pcl_settype.t i64 
    param          pc_libpcl.pcl_settype.size i64 
    procentry                 
    push           pc_libpcl.pcl_settype.t i64 
    push           pc_libpcl.pccurr u64 
    push           3          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_settype.size i64 
    push           pc_libpcl.pccurr u64 
    push           4          
    popptroff                 i32 1 0
    push           pc_libpcl.pcl_settype.t i64 
    push           0          i64 
    jumpge         #5692      i64 
    push           13         i64 
    push           pc_libpcl.pccurr u64 
    push           3          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_settype.t i64 
    neg                       i64 
    push           pc_libpcl.pccurr u64 
    push           4          
    popptroff                 i32 1 0
#5692: 
#5693: 
    retproc                   
End


Proc pc_libpcl.pcl_setxy::
    param          pc_libpcl.pcl_setxy.x i64 
    param          pc_libpcl.pcl_setxy.y i64 
    procentry                 
    push           pc_libpcl.pcl_setxy.x i64 
    push           pc_libpcl.pccurr u64 
    push           16         
    popptroff                 i32 1 0
    push           pc_libpcl.pcl_setxy.y i64 
    push           pc_libpcl.pccurr u64 
    push           20         
    popptroff                 i32 1 0
#5695: 
    retproc                   
End


Proc pc_libpcl.pcl_setscale::
    param          pc_libpcl.pcl_setscale.scale i64 
    procentry                 
    push           pc_libpcl.pcl_setscale.scale i64 
    push           pc_libpcl.pccurr u64 
    push           16         
    popptroff                 i32 1 0
#5697: 
    retproc                   
End


Proc pc_libpcl.pcl_setoffset::
    param          pc_libpcl.pcl_setoffset.offset i64 
    procentry                 
    push           pc_libpcl.pcl_setoffset.offset i64 
    push           pc_libpcl.pccurr u64 
    push           20         
    popptroff                 i32 1 0
#5699: 
    retproc                   
End


Proc pc_libpcl.pcl_addoffset::
    param          pc_libpcl.pcl_addoffset.offset i64 
    procentry                 
    push           pc_libpcl.pccurr u64 
    push           20         
    addrefoff                 u64 1 0
    push           pc_libpcl.pcl_addoffset.offset i64 
    addto                     i32 
#5701: 
    retproc                   
End


Proc pc_libpcl.pcl_setincr::
    param          pc_libpcl.pcl_setincr.n i64 
    procentry                 
    push           pc_libpcl.pcl_setincr.n i64 
    push           pc_libpcl.pccurr u64 
    push           16         
    popptroff                 i32 1 0
#5703: 
    retproc                   
End


Proc pc_libpcl.pcl_setnargs::
    param          pc_libpcl.pcl_setnargs.n i64 
    procentry                 
    push           pc_libpcl.pcl_setnargs.n i64 
    push           pc_libpcl.pccurr u64 
    push           16         
    popptroff                 i32 1 0
#5705: 
    retproc                   
End


Proc pc_libpcl.pcl_setnmult::
    param          pc_libpcl.pcl_setnmult.n i64 
    procentry                 
    setargs                   1 0
    push           "SETNMULT" u64 
    callproc       &mlibp.abortprogram 
#5707: 
    retproc                   
End


Proc pc_libpcl.pcl_setrettypes::
    param          pc_libpcl.pcl_setrettypes.types u64 
    param          pc_libpcl.pcl_setrettypes.n i64 
    procentry                 
    setargs                   1 0
    push           "SETRETTYPES" u64 
    callproc       &mlibp.abortprogram 
#5709: 
    retproc                   
End


Proc pc_libpcl.pcl_setexported::
    param          pc_libpcl.pcl_setexported.x i64 
    procentry                 
    push           1          u64 
    push           pc_libpcl.pccurr u64 
    push           2          
    addrefoff                 u64 1 0
    push           0          i64 
    popdotindex               u8 
    push           pc_libpcl.pccurr u64 
    push           8          
    pushptroff                u64 1 0
    jumpfalse      #5711      u64 
    push           1          u64 
    push           pc_libpcl.pccurr u64 
    push           8          
    pushptroff                u64 1 0
    push           46         
    addrefoff                 u64 1 0
    push           3          i64 
    popdotindex               u16 
#5711: 
#5712: 
    retproc                   
End


Proc pc_libpcl.pcl_setnvariadics::
    param          pc_libpcl.pcl_setnvariadics.n i64 
    procentry                 
    push           pc_libpcl.pcl_setnvariadics.n i64 
    push           pc_libpcl.pccurr u64 
    push           20         
    popptroff                 i32 1 0
#5714: 
    retproc                   
End


Proc pc_libpcl.pcl_setalign::
    param          pc_libpcl.pcl_setalign.n i64 
    procentry                 
    push           pc_libpcl.pcl_setalign.n i64 
    push           pc_libpcl.pccurr u64 
    push           16         
    popptroff                 i32 1 0
#5716: 
    retproc                   
End


Proc pc_libpcl.pcl_setrtsproc::
    procentry                 
    push           pc_libpcl.pccurr u64 
    push           8          
    pushptroff                u64 1 0
    jumpfalse      #5718      u64 
    push           pc_libpcl.pccurr u64 
    push           1          
    pushptroff                u8 1 0
    push           8          i64 
    jumpne         #5718      i64 
    setargs                   1 0
    push           pc_libpcl.pccurr u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &pc_libpcl.definertsproc 
#5718: 
#5719: 
    retproc                   
End


Proc pc_libpcl.pcl_setoldtype::
    param          pc_libpcl.pcl_setoldtype.t i64 
    procentry                 
    push           pc_libpcl.pcl_setoldtype.t i64 
    push           pc_libpcl.pccurr u64 
    push           16         
    popptroff                 i32 1 0
#5721: 
    retproc                   
End


Proc pc_libpcl.pcl_setpos::
    param          pc_libpcl.pcl_setpos.pos i64 
    procentry                 
    setargs                   1 0
    push           "SETPOS"   u64 
    callproc       &mlibp.abortprogram 
#5723: 
    retproc                   
End


Proc pc_libpcl.pcl_lasterror:: u64
    procentry                 
    push           pc_libpcl.errormess u64 
    setret                    u64 
    jump           #5725      
#5725: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_writepclfile:: i64
    param          pc_libpcl.pcl_writepclfile.filename u64 
    local          pc_libpcl.pcl_writepclfile.source u64 
    local          pc_libpcl.pcl_writepclfile.length i64 
    procentry                 
    setargs                   0 0
    callproc       &pc_libpcl.fixuppcl 
    setargs                   0 0
    callfn         &pc_libpcl.writeallpcl 
    type                      u64 
    type                      i64 
    pop            pc_libpcl.pcl_writepclfile.source u64 
    pop            pc_libpcl.pcl_writepclfile.length i64 
    setargs                   3 0
    push           pc_libpcl.pcl_writepclfile.length i64 
    push           pc_libpcl.pcl_writepclfile.source u64 
    push           pc_libpcl.pcl_writepclfile.filename u64 
    callfn         &mlibp.writefile i64 
    setret                    i64 
    jump           #5727      
#5727: 
    retfn                     i64 
End


Proc pc_libpcl.perror:
    param          pc_libpcl.perror.mess u64 
    procentry                 
    setargs                   2 0
    push           0          u64 
    push           pc_libpcl.perror.mess u64 
    callproc       &pc_libpcl.perror_s 
#5729: 
    retproc                   
End


Proc pc_libpcl.perror_s:
    param          pc_libpcl.perror_s.mess u64 
    param          pc_libpcl.perror_s.param u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "PCL error:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libpcl.perror_s.mess u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           pc_libpcl.perror_s.param u64 
    jumpfalse      #5731      u64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           ":"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libpcl.perror_s.param u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#5731: 
    push           1          i64 
    stop                      
#5732: 
    retproc                   
End


Proc pc_libpcl.writesymbols:
    local          pc_libpcl.writesymbols.p u64 
    local          pc_libpcl.writesymbols.d u64 
    local          pc_libpcl.writesymbols.e u64 
    procentry                 
    push           pc_libpcl.pcstart u64 
    pop            pc_libpcl.writesymbols.p u64 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    setargs                   1 0
    push           "PROC PCL DEF OPS" u64 
    callproc       &pc_libpcl.psstr 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    jump           #5734      
#5735: 
    push           pc_libpcl.writesymbols.p u64 
    push           1          
    pushptroff                u8 1 0
    push           8          i64 
    casejumpeq     #5736      i64 0
    push           5          i64 
    casejumpeq     #5736      i64 0
    push           6          i64 
    casejumpeq     #5736      i64 0
    push           12         i64 
    casejumpeq     #5736      i64 0
    push           20         i64 
    casejumpeq     #5736      i64 0
    push           17         i64 
    casejumpeq     #5736      i64 0
    push           18         i64 
    casejumpeq     #5736      i64 0
    popstack                  i64 
    jump           #5737      
#5736: 
    push           pc_libpcl.writesymbols.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_libpcl.writesymbols.d u64 
    setargs                   1 0
    push           pc_libpcl.writesymbols.p i64 
    callproc       &pc_libpcl.psint 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.d i64 
    callproc       &pc_libpcl.psint 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.d u64 
    pushptr                   u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           ": "       u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.p u64 
    push           24         
    pushptroff                u32 1 0
    callproc       &pc_libpcl.psint 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    setargs                   1 0
    push           "\tOpcode:" u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           &pc_tables.pclnames 
    push           pc_libpcl.writesymbols.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &pc_libpcl.psstr 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    setargs                   1 0
    push           "\tPCLdef:" u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    startmult                 
    push           pc_libpcl.writesymbols.d u64 
    push           16         
    pushptroff                u64 1 0
    jumpfalse      #5738      u64 
    push           &pc_tables.pclnames 
    push           pc_libpcl.writesymbols.d u64 
    push           16         
    pushptroff                u64 1 0
    push           1          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    resetmult                 
    jump           #5739      
#5738: 
    push           "---"      u64 
    endmult                   
#5739: 
    callproc       &pc_libpcl.psstr 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    setargs                   1 0
    push           "\tIsdefined:" u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.d u64 
    push           46         
    pushptroff                u16 1 0
    push           0          i64 
    dotindex                  i64 
    callproc       &pc_libpcl.psint 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    setargs                   1 0
    push           "\tIsexported:" u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.d u64 
    push           46         
    pushptroff                u16 1 0
    push           3          i64 
    dotindex                  i64 
    callproc       &pc_libpcl.psint 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    setargs                   1 0
    push           "\tIsimported:" u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.d u64 
    push           46         
    pushptroff                u16 1 0
    push           1          i64 
    dotindex                  i64 
    callproc       &pc_libpcl.psint 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    setargs                   1 0
    push           "\tExtvariadics:" u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.p u64 
    push           16         
    pushptroff                i32 1 0
    callproc       &pc_libpcl.psint 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    setargs                   1 0
    push           "\tIsaddrof:" u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.d u64 
    push           46         
    pushptroff                u16 1 0
    push           2          i64 
    dotindex                  i64 
    callproc       &pc_libpcl.psint 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    setargs                   1 0
    push           "\tLabel#:" u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.d u64 
    push           40         
    pushptroff                i32 1 0
    callproc       &pc_libpcl.psint 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    jump           #5740      
#5737: 
#5740: 
#5741: 
    push           &pc_libpcl.writesymbols.p 
    incr                      u64 32
#5734: 
    push           pc_libpcl.writesymbols.p u64 
    push           pc_libpcl.pccurr u64 
    jumple         #5735      u64 
#5742: 
    push           pc_libpcl.pcstart u64 
    pop            pc_libpcl.writesymbols.p u64 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    setargs                   1 0
    push           "PROC PCL UNDEFINED MEM REFS" u64 
    callproc       &pc_libpcl.psstr 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    jump           #5743      
#5744: 
    push           pc_libpcl.writesymbols.p u64 
    pushptr                   u8 
    push           1          i64 
    setjumpeq      #5745      i64 
    push           2          i64 
    setjumpne      #5746      i64 
#5745: 
    push           pc_libpcl.writesymbols.p u64 
    push           8          
    pushptroff                u64 1 0
    push           46         
    pushptroff                u16 1 0
    push           0          i64 
    dotindex                  i64 
    jumptrue       #5746      u64 
    push           pc_libpcl.writesymbols.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_libpcl.writesymbols.d u64 
    setargs                   1 0
    push           pc_libpcl.writesymbols.p i64 
    callproc       &pc_libpcl.psint 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.d i64 
    callproc       &pc_libpcl.psint 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           "Not defined: " u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.d u64 
    pushptr                   u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.p u64 
    push           24         
    pushptroff                u32 1 0
    callproc       &pc_libpcl.psint 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    push           1          u64 
    push           pc_libpcl.writesymbols.d u64 
    push           46         
    addrefoff                 u64 1 0
    push           0          i64 
    popdotindex               u16 
#5746: 
#5747: 
    push           &pc_libpcl.writesymbols.p 
    incr                      u64 32
#5743: 
    push           pc_libpcl.writesymbols.p u64 
    push           pc_libpcl.pccurr u64 
    jumple         #5744      u64 
#5748: 
#5749: 
    retproc                   
End


Proc pc_libpcl.getbasename: u64
    param          pc_libpcl.getbasename.s u64 
    local          pc_libpcl.getbasename.t u64 
    procentry                 
    push           pc_libpcl.getbasename.s u64 
    setargs                   1 0
    push           pc_libpcl.getbasename.s u64 
    callfn         &strlen    i64 
    addrefoff                 u64 1 -1
    pop            pc_libpcl.getbasename.t u64 
    jump           #5751      
#5752: 
    push           &pc_libpcl.getbasename.t 
    decr                      u64 1
#5751: 
    push           pc_libpcl.getbasename.t u64 
    push           pc_libpcl.getbasename.s u64 
    jumple         #5753      u64 
    push           pc_libpcl.getbasename.t u64 
    push           1          i64 
    subrefoff                 u64 1 0
    pushptr                   u8 
    push           46         u64 
    jumpne         #5752      u64 
#5753: 
#5754: 
    push           pc_libpcl.getbasename.t u64 
    setret                    u64 
    jump           #5755      
#5755: 
    retfn                     u64 
End


Proc pc_libpcl.definertsproc:
    param          pc_libpcl.definertsproc.d u64 
    local          pc_libpcl.definertsproc.s u64 
    local          pc_libpcl.definertsproc.c i64 
    local          pc_libpcl.definertsproc.av_1 i64 
    local          pc_libpcl.definertsproc.i i64 
    procentry                 
    push           pc_libpcl.definertsproc.d u64 
    pushptr                   u64 
    pop            pc_libpcl.definertsproc.s u64 
    jump           #5757      
#5758: 
#5757: 
    push           &pc_libpcl.definertsproc.s 
    loadincr                  u64 1
    pushptr                   u8 
    store          pc_libpcl.definertsproc.c i64 
    push           36         i64 
    jumpne         #5758      i64 
#5759: 
#5760: 
    push           1          i64 
    pop            pc_libpcl.definertsproc.i i64 
    push           6          i64 
    pop            pc_libpcl.definertsproc.av_1 i64 
    push           pc_libpcl.definertsproc.av_1 i64 
    push           1          i64 
    jumplt         #5761      i64 
#5762: 
    setargs                   2 0
    push           pc_libpcl.definertsproc.s u64 
    push           &pc_tables.rtsnames 
    push           pc_libpcl.definertsproc.i i64 
    pushptroff                u64 8 -8
    push           4          i64 
    addrefoff                 u64 1 0
    callfn         &mlibp.eqstring i64 
    jumpfalse      #5763      i64 
    push           1          u64 
    push           pc_libpcl.definertsproc.d u64 
    push           46         
    addrefoff                 u64 1 0
    push           9          i64 
    popdotindex               u16 
    push           pc_libpcl.definertsproc.i i64 
    push           pc_libpcl.definertsproc.d u64 
    push           26         
    popptroff                 u8 1 0
    push           pc_libpcl.definertsproc.d u64 
    push           &pc_decls.rtsproctable 
    push           pc_libpcl.definertsproc.i i64 
    popptroff                 u64 8 -8
    jump           #5764      
#5763: 
#5765: 
    forup          #5762      i64 1
    opnd           pc_libpcl.definertsproc.i 
    opnd           pc_libpcl.definertsproc.av_1 
#5761: 
#5766: 
#5764: 
    retproc                   
End


Proc pc_lex.lex:
    local          pc_lex.lex.i i64 
    local          pc_lex.lex.c i64 
    local          pc_lex.lex.d i64 
    local          pc_lex.lex.hsum i64 
    local          pc_lex.lex.length i64 
    local          pc_lex.lex.pstart u64 
    procentry                 
    push           0          i64 
    pop            pc_lex.lxsubcode i64 
#5768: 
    push           &pc_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    store          pc_lex.lex.c i64 
    switch         #5769      0 122
    opnd           #5770      
#5769: 
    switchlabel    #5771      
    switchlabel    #5770      
    switchlabel    #5770      
    switchlabel    #5770      
    switchlabel    #5770      
    switchlabel    #5770      
    switchlabel    #5770      
    switchlabel    #5770      
    switchlabel    #5770      
    switchlabel    #5772      
    switchlabel    #5773      
    switchlabel    #5770      
    switchlabel    #5770      
    switchlabel    #5774      
    switchlabel    #5770      
    switchlabel    #5770      
    switchlabel    #5770      
    switchlabel    #5770      
    switchlabel    #5770      
    switchlabel    #5770      
    switchlabel    #5770      
    switchlabel    #5770      
    switchlabel    #5770      
    switchlabel    #5770      
    switchlabel    #5770      
    switchlabel    #5770      
    switchlabel    #5771      
    switchlabel    #5770      
    switchlabel    #5770      
    switchlabel    #5770      
    switchlabel    #5770      
    switchlabel    #5770      
    switchlabel    #5772      
    switchlabel    #5775      
    switchlabel    #5776      
    switchlabel    #5777      
    switchlabel    #5778      
    switchlabel    #5770      
    switchlabel    #5779      
    switchlabel    #5770      
    switchlabel    #5770      
    switchlabel    #5770      
    switchlabel    #5780      
    switchlabel    #5770      
    switchlabel    #5781      
    switchlabel    #5782      
    switchlabel    #5778      
    switchlabel    #5770      
    switchlabel    #5783      
    switchlabel    #5783      
    switchlabel    #5783      
    switchlabel    #5783      
    switchlabel    #5783      
    switchlabel    #5783      
    switchlabel    #5783      
    switchlabel    #5783      
    switchlabel    #5783      
    switchlabel    #5783      
    switchlabel    #5784      
    switchlabel    #5775      
    switchlabel    #5770      
    switchlabel    #5770      
    switchlabel    #5770      
    switchlabel    #5770      
    switchlabel    #5770      
    switchlabel    #5785      
    switchlabel    #5785      
    switchlabel    #5785      
    switchlabel    #5785      
    switchlabel    #5785      
    switchlabel    #5785      
    switchlabel    #5785      
    switchlabel    #5785      
    switchlabel    #5785      
    switchlabel    #5785      
    switchlabel    #5785      
    switchlabel    #5785      
    switchlabel    #5785      
    switchlabel    #5785      
    switchlabel    #5785      
    switchlabel    #5785      
    switchlabel    #5785      
    switchlabel    #5785      
    switchlabel    #5785      
    switchlabel    #5785      
    switchlabel    #5785      
    switchlabel    #5785      
    switchlabel    #5785      
    switchlabel    #5785      
    switchlabel    #5785      
    switchlabel    #5785      
    switchlabel    #5770      
    switchlabel    #5770      
    switchlabel    #5770      
    switchlabel    #5770      
    switchlabel    #5778      
    switchlabel    #5786      
    switchlabel    #5778      
    switchlabel    #5778      
    switchlabel    #5778      
    switchlabel    #5778      
    switchlabel    #5778      
    switchlabel    #5778      
    switchlabel    #5778      
    switchlabel    #5778      
    switchlabel    #5778      
    switchlabel    #5778      
    switchlabel    #5778      
    switchlabel    #5778      
    switchlabel    #5778      
    switchlabel    #5778      
    switchlabel    #5778      
    switchlabel    #5778      
    switchlabel    #5778      
    switchlabel    #5778      
    switchlabel    #5778      
    switchlabel    #5778      
    switchlabel    #5778      
    switchlabel    #5778      
    switchlabel    #5778      
    switchlabel    #5778      
    switchlabel    #5778      
    switchlabel    #5778      
    endswitch                 
#5778: 
    push           pc_lex.lxsptr u64 
    push           1          i64 
    subrefoff                 u64 1 0
    pop            pc_lex.lex.pstart u64 
!doname::
#5787: 
    push           pc_lex.lex.pstart u64 
    pushptr                   u8 
    pop            pc_lex.lex.hsum i64 
#5788: 
    push           &pc_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    store          pc_lex.lex.c i64 
    switch         #5789      36 122
    opnd           #5790      
#5789: 
    switchlabel    #5791      
    switchlabel    #5790      
    switchlabel    #5790      
    switchlabel    #5790      
    switchlabel    #5790      
    switchlabel    #5790      
    switchlabel    #5790      
    switchlabel    #5790      
    switchlabel    #5790      
    switchlabel    #5790      
    switchlabel    #5791      
    switchlabel    #5790      
    switchlabel    #5791      
    switchlabel    #5791      
    switchlabel    #5791      
    switchlabel    #5791      
    switchlabel    #5791      
    switchlabel    #5791      
    switchlabel    #5791      
    switchlabel    #5791      
    switchlabel    #5791      
    switchlabel    #5791      
    switchlabel    #5790      
    switchlabel    #5790      
    switchlabel    #5790      
    switchlabel    #5790      
    switchlabel    #5790      
    switchlabel    #5790      
    switchlabel    #5790      
    switchlabel    #5792      
    switchlabel    #5792      
    switchlabel    #5792      
    switchlabel    #5792      
    switchlabel    #5792      
    switchlabel    #5792      
    switchlabel    #5792      
    switchlabel    #5792      
    switchlabel    #5792      
    switchlabel    #5792      
    switchlabel    #5792      
    switchlabel    #5792      
    switchlabel    #5792      
    switchlabel    #5792      
    switchlabel    #5792      
    switchlabel    #5792      
    switchlabel    #5792      
    switchlabel    #5792      
    switchlabel    #5792      
    switchlabel    #5792      
    switchlabel    #5792      
    switchlabel    #5792      
    switchlabel    #5792      
    switchlabel    #5792      
    switchlabel    #5792      
    switchlabel    #5792      
    switchlabel    #5790      
    switchlabel    #5790      
    switchlabel    #5790      
    switchlabel    #5790      
    switchlabel    #5791      
    switchlabel    #5790      
    switchlabel    #5791      
    switchlabel    #5791      
    switchlabel    #5791      
    switchlabel    #5791      
    switchlabel    #5791      
    switchlabel    #5791      
    switchlabel    #5791      
    switchlabel    #5791      
    switchlabel    #5791      
    switchlabel    #5791      
    switchlabel    #5791      
    switchlabel    #5791      
    switchlabel    #5791      
    switchlabel    #5791      
    switchlabel    #5791      
    switchlabel    #5791      
    switchlabel    #5791      
    switchlabel    #5791      
    switchlabel    #5791      
    switchlabel    #5791      
    switchlabel    #5791      
    switchlabel    #5791      
    switchlabel    #5791      
    switchlabel    #5791      
    switchlabel    #5791      
    switchlabel    #5791      
    endswitch                 
#5791: 
    push           pc_lex.lex.hsum i64 
    push           4          i64 
    shl                       i64 
    push           pc_lex.lex.hsum i64 
    sub                       i64 
    push           pc_lex.lex.c i64 
    add                       i64 
    pop            pc_lex.lex.hsum i64 
    jump           #5788      
#5792: 
    push           pc_lex.lex.c i64 
    push           32         i64 
    add                       i64 
    push           pc_lex.lxsptr u64 
    push           1          i64 
    subrefoff                 u64 1 0
    popptr                    u8 
    push           pc_lex.lex.hsum i64 
    push           4          i64 
    shl                       i64 
    push           pc_lex.lex.hsum i64 
    sub                       i64 
    push           pc_lex.lex.c i64 
    add                       i64 
    push           32         i64 
    add                       i64 
    pop            pc_lex.lex.hsum i64 
    jump           #5788      
#5790: 
    push           &pc_lex.lxsptr 
    decr                      u64 1
    jump           #5793      
    jump           #5788      
#5793: 
    push           pc_lex.lxsptr u64 
    push           pc_lex.lex.pstart u64 
    subref                    i64 1
    pop            pc_lex.lxlength i64 
    push           pc_lex.lex.hsum i64 
    push           5          i64 
    shl                       i64 
    push           pc_lex.lex.hsum i64 
    sub                       i64 
    pop            pc_lex.lxhashvalue i64 
    push           0          i64 
    pop            pc_lex.lxtruename u8 
    setargs                   2 0
    push           pc_lex.lxlength i64 
    push           pc_lex.lex.pstart u64 
    callfn         &pc_lex.lookuplex i64 
    jumpfalse      #5794      i64 
    push           pc_lex.lxsymptr u64 
    push           25         
    pushptroff                u8 1 0
    jumpfalse      #5795      i64 
    push           pc_lex.lxsymptr u64 
    push           25         
    pushptroff                u8 1 0
    pop            pc_lex.lxsymbol i64 
    push           pc_lex.lxsymptr u64 
    push           26         
    pushptroff                u8 1 0
    pop            pc_lex.lxsubcode i64 
    jump           #5796      
#5795: 
    push           pc_lex.lxsymptr u64 
    push           24         
    pushptroff                u8 1 0
    pop            pc_lex.lxsymbol i64 
#5796: 
    jump           #5797      
#5794: 
    push           19         i64 
    pop            pc_lex.lxsymbol i64 
#5797: 
    jump           #5798      
    jump           #5768      
#5785: 
    push           pc_lex.lxsptr u64 
    push           1          i64 
    subrefoff                 u64 1 0
    pop            pc_lex.lex.pstart u64 
    push           pc_lex.lex.pstart u64 
    pushptr                   u8 
    push           32         i64 
    add                       i64 
    push           pc_lex.lex.pstart u64 
    storeptr                  u8 
    pop            pc_lex.lex.c i64 
    jump           #5787      
    jump           #5768      
#5783: 
    setargs                   2 0
    push           1          i64 
    push           pc_lex.lex.c i64 
    callproc       &pc_lex.readnumber 
    jump           #5798      
    jump           #5768      
#5786: 
    push           pc_lex.lxsptr u64 
    pop            pc_lex.lex.pstart u64 
    push           0          i64 
    pop            pc_lex.lex.hsum i64 
#5799: 
    push           pc_lex.lxsptr u64 
    pushptr                   u8 
    store          pc_lex.lex.c i64 
    switch         #5800      36 122
    opnd           #5801      
#5800: 
    switchlabel    #5802      
    switchlabel    #5801      
    switchlabel    #5801      
    switchlabel    #5801      
    switchlabel    #5801      
    switchlabel    #5801      
    switchlabel    #5801      
    switchlabel    #5801      
    switchlabel    #5801      
    switchlabel    #5801      
    switchlabel    #5802      
    switchlabel    #5801      
    switchlabel    #5802      
    switchlabel    #5802      
    switchlabel    #5802      
    switchlabel    #5802      
    switchlabel    #5802      
    switchlabel    #5802      
    switchlabel    #5802      
    switchlabel    #5802      
    switchlabel    #5802      
    switchlabel    #5802      
    switchlabel    #5801      
    switchlabel    #5801      
    switchlabel    #5801      
    switchlabel    #5801      
    switchlabel    #5801      
    switchlabel    #5801      
    switchlabel    #5801      
    switchlabel    #5802      
    switchlabel    #5802      
    switchlabel    #5802      
    switchlabel    #5802      
    switchlabel    #5802      
    switchlabel    #5802      
    switchlabel    #5802      
    switchlabel    #5802      
    switchlabel    #5802      
    switchlabel    #5802      
    switchlabel    #5802      
    switchlabel    #5802      
    switchlabel    #5802      
    switchlabel    #5802      
    switchlabel    #5802      
    switchlabel    #5802      
    switchlabel    #5802      
    switchlabel    #5802      
    switchlabel    #5802      
    switchlabel    #5802      
    switchlabel    #5802      
    switchlabel    #5802      
    switchlabel    #5802      
    switchlabel    #5802      
    switchlabel    #5802      
    switchlabel    #5802      
    switchlabel    #5801      
    switchlabel    #5801      
    switchlabel    #5801      
    switchlabel    #5801      
    switchlabel    #5802      
    switchlabel    #5801      
    switchlabel    #5802      
    switchlabel    #5802      
    switchlabel    #5802      
    switchlabel    #5802      
    switchlabel    #5802      
    switchlabel    #5802      
    switchlabel    #5802      
    switchlabel    #5802      
    switchlabel    #5802      
    switchlabel    #5802      
    switchlabel    #5802      
    switchlabel    #5802      
    switchlabel    #5802      
    switchlabel    #5802      
    switchlabel    #5802      
    switchlabel    #5802      
    switchlabel    #5802      
    switchlabel    #5802      
    switchlabel    #5802      
    switchlabel    #5802      
    switchlabel    #5802      
    switchlabel    #5802      
    switchlabel    #5802      
    switchlabel    #5802      
    switchlabel    #5802      
    switchlabel    #5802      
    endswitch                 
#5802: 
    push           &pc_lex.lxsptr 
    incr                      u64 1
    push           pc_lex.lex.hsum i64 
    push           4          i64 
    shl                       i64 
    push           pc_lex.lex.hsum i64 
    sub                       i64 
    push           pc_lex.lex.c i64 
    add                       i64 
    pop            pc_lex.lex.hsum i64 
    jump           #5799      
#5801: 
    jump           #5803      
    jump           #5799      
#5803: 
    push           19         i64 
    pop            pc_lex.lxsymbol i64 
    push           1          i64 
    pop            pc_lex.lxtruename u8 
    push           pc_lex.lex.pstart u64 
    push           pc_lex.lxsptr u64 
    jumpne         #5804      u64 
    setargs                   1 0
    push           "NULL ` name" u64 
    callproc       &pc_lex.lxerror 
#5804: 
    push           pc_lex.lxsptr u64 
    push           pc_lex.lex.pstart u64 
    subref                    i64 1
    pop            pc_lex.lxlength i64 
    push           pc_lex.lex.hsum i64 
    push           5          i64 
    shl                       i64 
    push           pc_lex.lex.hsum i64 
    sub                       i64 
    pop            pc_lex.lxhashvalue i64 
    setargs                   2 0
    push           pc_lex.lxlength i64 
    push           pc_lex.lex.pstart u64 
    callfn         &pc_lex.lookuplex i64 
    jumpfalse      #5805      i64 
    push           pc_lex.lxsymptr u64 
    push           24         
    pushptroff                u8 1 0
    pop            pc_lex.lxsymbol i64 
    push           pc_lex.lxsymbol i64 
    push           0          i64 
    jumpne         #5806      i64 
    push           19         i64 
    push           pc_lex.lxsymptr u64 
    push           24         
    storeptroff               u8 1 0
    pop            pc_lex.lxsymbol i64 
#5806: 
#5805: 
    jump           #5798      
    jump           #5768      
#5775: 
    jump           #5807      
#5808: 
#5807: 
    push           &pc_lex.commentmap 
    push           &pc_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    pushptroff                u8 1 0
    jumptrue       #5808      u64 
#5809: 
    push           pc_lex.lxsptr u64 
    push           1          i64 
    subrefoff                 u64 1 0
    pushptr                   u8 
    push           0          i64 
    jumpne         #5810      i64 
    push           &pc_lex.lxsptr 
    decr                      u64 1
#5810: 
    push           &pc_lex.lxlineno 
    incr                      i64 1
    push           12         i64 
    pop            pc_lex.lxsymbol i64 
    jump           #5798      
    jump           #5768      
#5777: 
    push           0          i64 
    pop            pc_lex.lxvalue i64 
#5811: 
    push           &pc_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    store          pc_lex.lex.c i64 
    switch         #5812      48 57
    opnd           #5813      
#5812: 
    switchlabel    #5814      
    switchlabel    #5814      
    switchlabel    #5814      
    switchlabel    #5814      
    switchlabel    #5814      
    switchlabel    #5814      
    switchlabel    #5814      
    switchlabel    #5814      
    switchlabel    #5814      
    switchlabel    #5814      
    endswitch                 
#5814: 
    push           pc_lex.lxvalue i64 
    push           10         i64 
    mul                       i64 
    push           pc_lex.lex.c i64 
    add                       i64 
    push           48         i64 
    sub                       i64 
    pop            pc_lex.lxvalue i64 
    jump           #5811      
#5813: 
    push           &pc_lex.lxsptr 
    decr                      u64 1
    jump           #5815      
    jump           #5811      
#5815: 
    push           pc_lex.lxvalue i64 
    push           0          i64 
    jumpne         #5816      i64 
    setargs                   1 0
    push           "Bad label" u64 
    callproc       &pc_lex.lxerror 
#5816: 
    push           pc_libpcl.labelnooffset i64 
    push           0          i64 
    jumpne         #5817      i64 
    push           &pc_libpcl.maxuserlabel 
    push           pc_lex.lxvalue i64 
    maxto                     i64 
    jump           #5818      
#5817: 
    push           &pc_lex.lxvalue 
    push           pc_libpcl.labelnooffset i64 
    addto                     i64 
#5818: 
    push           14         i64 
    pop            pc_lex.lxsymbol i64 
    jump           #5798      
    jump           #5768      
#5781: 
    push           2          i64 
    pop            pc_lex.lxsymbol i64 
    jump           #5798      
    jump           #5768      
#5784: 
    push           pc_lex.lxsptr u64 
    pushptr                   u8 
    push           58         i64 
    jumpne         #5819      i64 
    push           4          i64 
    pop            pc_lex.lxsymbol i64 
    push           &pc_lex.lxsptr 
    incr                      u64 1
    jump           #5820      
#5819: 
    push           3          i64 
    pop            pc_lex.lxsymbol i64 
#5820: 
    jump           #5798      
    jump           #5768      
#5782: 
    push           &pc_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    pop            pc_lex.lex.c i64 
    push           pc_lex.lex.c i64 
    push           48         u64 
    push           57         u64 
    jumpinrange    #5821      i64 
    setargs                   1 0
    push           "Bad no"   u64 
    callproc       &pc_lex.lxerror 
#5821: 
    setargs                   2 0
    push           -1         i64 
    push           pc_lex.lex.c i64 
    callproc       &pc_lex.readnumber 
    jump           #5798      
    jump           #5768      
#5780: 
    push           9          i64 
    pop            pc_lex.lxsymbol i64 
    jump           #5798      
    jump           #5768      
#5779: 
    push           10         i64 
    pop            pc_lex.lxsymbol i64 
    jump           #5798      
    jump           #5768      
#5776: 
    setargs                   0 0
    callproc       &pc_lex.readstring 
    jump           #5798      
    jump           #5768      
#5772: 
    jump           #5768      
#5774: 
    jump           #5768      
#5773: 
    push           &pc_lex.lxlineno 
    incr                      i64 1
    push           12         i64 
    pop            pc_lex.lxsymbol i64 
    jump           #5798      
    jump           #5768      
#5771: 
    push           13         i64 
    pop            pc_lex.lxsymbol i64 
    push           &pc_lex.lxsptr 
    decr                      u64 1
    jump           #5798      
    jump           #5768      
#5770: 
    push           1          i64 
    pop            pc_lex.lxsymbol i64 
    push           pc_lex.lex.c i64 
    pop            pc_lex.lxvalue i64 
    jump           #5798      
    jump           #5768      
#5822: 
#5798: 
    retproc                   
End


Proc pc_lex.initlex:
    local          pc_lex.initlex.i i64 
    procentry                 
    push           pc_lex.initlex.done u8 
    jumpfalse      #5824      i64 
    jump           #5825      
#5824: 
    push           0          i64 
    pop            pc_lex.lxsubcode i64 
    push           1          i64 
    pop            pc_lex.lxsymbol i64 
    push           0          i64 
    pop            pc_lex.lxlineno i64 
#5826: 
    push           0          i64 
    pop            pc_lex.initlex.i i64 
#5827: 
    push           pc_lex.initlex.i i64 
    switch         #5828      36 122
    opnd           #5829      
#5828: 
    switchlabel    #5830      
    switchlabel    #5829      
    switchlabel    #5829      
    switchlabel    #5829      
    switchlabel    #5829      
    switchlabel    #5829      
    switchlabel    #5829      
    switchlabel    #5829      
    switchlabel    #5829      
    switchlabel    #5829      
    switchlabel    #5829      
    switchlabel    #5829      
    switchlabel    #5830      
    switchlabel    #5830      
    switchlabel    #5830      
    switchlabel    #5830      
    switchlabel    #5830      
    switchlabel    #5830      
    switchlabel    #5830      
    switchlabel    #5830      
    switchlabel    #5830      
    switchlabel    #5830      
    switchlabel    #5829      
    switchlabel    #5829      
    switchlabel    #5829      
    switchlabel    #5829      
    switchlabel    #5829      
    switchlabel    #5829      
    switchlabel    #5829      
    switchlabel    #5830      
    switchlabel    #5830      
    switchlabel    #5830      
    switchlabel    #5830      
    switchlabel    #5830      
    switchlabel    #5830      
    switchlabel    #5830      
    switchlabel    #5830      
    switchlabel    #5830      
    switchlabel    #5830      
    switchlabel    #5830      
    switchlabel    #5830      
    switchlabel    #5830      
    switchlabel    #5830      
    switchlabel    #5830      
    switchlabel    #5830      
    switchlabel    #5830      
    switchlabel    #5830      
    switchlabel    #5830      
    switchlabel    #5830      
    switchlabel    #5830      
    switchlabel    #5830      
    switchlabel    #5830      
    switchlabel    #5830      
    switchlabel    #5830      
    switchlabel    #5830      
    switchlabel    #5829      
    switchlabel    #5829      
    switchlabel    #5829      
    switchlabel    #5829      
    switchlabel    #5830      
    switchlabel    #5829      
    switchlabel    #5830      
    switchlabel    #5830      
    switchlabel    #5830      
    switchlabel    #5830      
    switchlabel    #5830      
    switchlabel    #5830      
    switchlabel    #5830      
    switchlabel    #5830      
    switchlabel    #5830      
    switchlabel    #5830      
    switchlabel    #5830      
    switchlabel    #5830      
    switchlabel    #5830      
    switchlabel    #5830      
    switchlabel    #5830      
    switchlabel    #5830      
    switchlabel    #5830      
    switchlabel    #5830      
    switchlabel    #5830      
    switchlabel    #5830      
    switchlabel    #5830      
    switchlabel    #5830      
    switchlabel    #5830      
    switchlabel    #5830      
    switchlabel    #5830      
    switchlabel    #5830      
    endswitch                 
#5830: 
    push           1          u64 
    push           &pc_lex.alphamap 
    push           pc_lex.initlex.i i64 
    popptroff                 u8 1 0
    jump           #5831      
#5829: 
#5831: 
    push           pc_lex.initlex.i i64 
    switch         #5832      48 57
    opnd           #5833      
#5832: 
    switchlabel    #5834      
    switchlabel    #5834      
    switchlabel    #5834      
    switchlabel    #5834      
    switchlabel    #5834      
    switchlabel    #5834      
    switchlabel    #5834      
    switchlabel    #5834      
    switchlabel    #5834      
    switchlabel    #5834      
    endswitch                 
#5834: 
    push           1          u64 
    push           &pc_lex.digitmap 
    push           pc_lex.initlex.i i64 
    popptroff                 u8 1 0
    jump           #5835      
#5833: 
#5835: 
    push           1          u64 
    push           &pc_lex.commentmap 
    push           pc_lex.initlex.i i64 
    popptroff                 u8 1 0
#5836: 
    forup          #5827      i64 1
    opnd           pc_lex.initlex.i 
    opnd           255        
#5837: 
    push           0          u64 
    push           &pc_lex.commentmap 
    push           0          i64 
    popptroff                 u8 1 0
    push           0          u64 
    push           &pc_lex.commentmap 
    push           10         i64 
    popptroff                 u8 1 0
    setargs                   0 0
    callproc       &pc_lex.inithashtable 
    push           1          i64 
    pop            pc_lex.initlex.done u8 
#5825: 
    retproc                   
End


Proc pc_lex.readreal:
    param          pc_lex.readreal.s u64 
    param          pc_lex.readreal.slen i64 
    local          pc_lex.readreal.c i64 
    procentry                 
    push           pc_lex.lxsptr u64 
    pushptr                   u8 
    pop            pc_lex.readreal.c i64 
    push           0          i64 
    push           pc_lex.lxsptr u64 
    popptr                    u8 
    setargs                   2 0
    push           0          u64 
    push           pc_lex.readreal.s u64 
    callfn         &strtod    r64 
    pop            pc_lex.lxxvalue r64 
    push           pc_lex.readreal.c i64 
    push           pc_lex.lxsptr u64 
    popptr                    u8 
    push           16         i64 
    pop            pc_lex.lxsymbol i64 
#5839: 
    retproc                   
End


Proc pc_lex.readnumber:
    param          pc_lex.readnumber.c i64 
    param          pc_lex.readnumber.signx i64 
    local          pc_lex.readnumber.str block:256 
    local          pc_lex.readnumber.i i64 
    local          pc_lex.readnumber.d i64 
    local          pc_lex.readnumber.intlen i64 
    local          pc_lex.readnumber.slen i64 
    local          pc_lex.readnumber.isfloat i64 
    local          pc_lex.readnumber.sepseen i64 
    local          pc_lex.readnumber.s u64 
    procentry                 
    push           pc_lex.lxsptr u64 
    pushptr                   u8 
    pop            pc_lex.readnumber.d i64 
    push           pc_lex.readnumber.d i64 
    push           120        i64 
    casejumpeq     #5841      i64 0
    push           88         i64 
    casejumpeq     #5841      i64 0
    popstack                  i64 
    jump           #5842      
#5841: 
    push           pc_lex.readnumber.c i64 
    push           48         i64 
    casejumpeq     #5843      i64 0
    popstack                  i64 
    jump           #5844      
#5843: 
    push           &pc_lex.lxsptr 
    incr                      u64 1
    setargs                   0 0
    callproc       &pc_lex.readhex 
    push           &pc_lex.lxvalue 
    push           pc_lex.readnumber.signx i64 
    multo                     i64 
    jump           #5845      
    jump           #5846      
#5844: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           pc_lex.readnumber.c i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Base not supported" u64 
    callproc       &pc_lex.lxerror 
#5846: 
    jump           #5847      
#5842: 
#5847: 
    push           pc_lex.readnumber.c u64 
    push           &pc_lex.readnumber.str 
    push           1          i64 
    popptroff                 u8 1 -1
    push           pc_lex.lxsptr u64 
    push           1          i64 
    subrefoff                 u64 1 0
    pop            pc_lex.readnumber.s u64 
    push           1          i64 
    pop            pc_lex.readnumber.slen i64 
    push           0          i64 
    store          pc_lex.readnumber.sepseen i64 
    pop            pc_lex.readnumber.isfloat i64 
#5848: 
    push           &pc_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    store          pc_lex.readnumber.c i64 
    switch         #5849      39 101
    opnd           #5850      
#5849: 
    switchlabel    #5851      
    switchlabel    #5850      
    switchlabel    #5850      
    switchlabel    #5850      
    switchlabel    #5852      
    switchlabel    #5850      
    switchlabel    #5852      
    switchlabel    #5853      
    switchlabel    #5850      
    switchlabel    #5854      
    switchlabel    #5854      
    switchlabel    #5854      
    switchlabel    #5854      
    switchlabel    #5854      
    switchlabel    #5854      
    switchlabel    #5854      
    switchlabel    #5854      
    switchlabel    #5854      
    switchlabel    #5854      
    switchlabel    #5850      
    switchlabel    #5850      
    switchlabel    #5850      
    switchlabel    #5850      
    switchlabel    #5850      
    switchlabel    #5850      
    switchlabel    #5850      
    switchlabel    #5850      
    switchlabel    #5850      
    switchlabel    #5850      
    switchlabel    #5850      
    switchlabel    #5855      
    switchlabel    #5850      
    switchlabel    #5850      
    switchlabel    #5850      
    switchlabel    #5850      
    switchlabel    #5850      
    switchlabel    #5850      
    switchlabel    #5850      
    switchlabel    #5850      
    switchlabel    #5850      
    switchlabel    #5850      
    switchlabel    #5850      
    switchlabel    #5850      
    switchlabel    #5850      
    switchlabel    #5850      
    switchlabel    #5850      
    switchlabel    #5850      
    switchlabel    #5850      
    switchlabel    #5850      
    switchlabel    #5850      
    switchlabel    #5850      
    switchlabel    #5850      
    switchlabel    #5850      
    switchlabel    #5850      
    switchlabel    #5850      
    switchlabel    #5850      
    switchlabel    #5851      
    switchlabel    #5850      
    switchlabel    #5850      
    switchlabel    #5850      
    switchlabel    #5850      
    switchlabel    #5850      
    switchlabel    #5855      
    endswitch                 
#5854: 
    push           pc_lex.readnumber.c u64 
    push           &pc_lex.readnumber.str 
    push           &pc_lex.readnumber.slen 
    incrload                  i64 1
    popptroff                 u8 1 -1
    jump           #5848      
#5851: 
    push           1          i64 
    pop            pc_lex.readnumber.sepseen i64 
    jump           #5848      
#5853: 
    push           pc_lex.readnumber.isfloat i64 
    jumpfalse      #5856      i64 
    setargs                   1 0
    push           "float?"   u64 
    callproc       &pc_lex.lxerror 
#5856: 
    push           1          i64 
    pop            pc_lex.readnumber.isfloat i64 
    push           pc_lex.readnumber.slen i64 
    pop            pc_lex.readnumber.intlen i64 
    jump           #5848      
#5855: 
    push           pc_lex.readnumber.isfloat i64 
    push           2          i64 
    jumpne         #5857      i64 
    setargs                   1 0
    push           "float?"   u64 
    callproc       &pc_lex.lxerror 
#5857: 
    push           2          i64 
    pop            pc_lex.readnumber.isfloat i64 
    jump           #5848      
#5852: 
    push           pc_lex.readnumber.isfloat i64 
    push           2          i64 
    jumpeq         #5858      i64 
    setargs                   1 0
    push           "float?"   u64 
    callproc       &pc_lex.lxerror 
#5858: 
    push           3          i64 
    pop            pc_lex.readnumber.isfloat i64 
    jump           #5848      
#5850: 
    push           &pc_lex.lxsptr 
    decr                      u64 1
    jump           #5859      
    jump           #5848      
#5859: 
    push           pc_lex.readnumber.isfloat i64 
    jumpfalse      #5860      i64 
    push           pc_lex.readnumber.sepseen i64 
    jumpfalse      #5861      i64 
    setargs                   1 0
    push           "seps in float?" u64 
    callproc       &pc_lex.lxerror 
#5861: 
    setargs                   2 0
    push           pc_lex.lxsptr u64 
    push           pc_lex.readnumber.s u64 
    subref                    i64 1
    push           pc_lex.readnumber.s u64 
    callproc       &pc_lex.readreal 
    push           &pc_lex.lxxvalue 
    push           pc_lex.readnumber.signx i64 
    float                     r64 i64 
    multo                     r64 
    jump           #5845      
#5860: 
    push           pc_lex.readnumber.slen i64 
    push           20         i64 
    jumpgt         #5862      i64 
    push           pc_lex.readnumber.slen i64 
    push           20         i64 
    jumpne         #5863      i64 
    setargs                   2 0
    push           "18446744073709551615" u64 
    push           &pc_lex.readnumber.str 
    callfn         &mlibp.cmpstring i64 
    push           0          i64 
    jumple         #5863      i64 
#5862: 
    push           pc_lex.readnumber.slen i64 
    push           39         i64 
    jumpgt         #5864      i64 
    push           pc_lex.readnumber.slen i64 
    push           39         i64 
    jumpne         #5865      i64 
    setargs                   3 0
    push           39         u64 
    push           "340282366920938463463374607431768211455" u64 
    push           pc_lex.readnumber.s u64 
    callfn         &strncmp   i32 
    push           0          i64 
    jumple         #5865      i64 
#5864: 
    setargs                   1 0
    push           "Overflows 128 bits" u64 
    callproc       &pc_lex.lxerror 
#5865: 
    setargs                   3 0
    push           10         i64 
    push           pc_lex.readnumber.slen i64 
    push           &pc_lex.readnumber.str 
    callproc       &pc_lex.stringtonumber128 
    jump           #5845      
#5863: 
    push           15         i64 
    pop            pc_lex.lxsymbol i64 
    push           0          i64 
    pop            pc_lex.lxvalue i64 
#5866: 
    push           1          i64 
    pop            pc_lex.readnumber.i i64 
    push           pc_lex.readnumber.slen i64 
    push           1          i64 
    jumplt         #5867      i64 
#5868: 
    push           pc_lex.lxvalue i64 
    push           10         i64 
    mul                       i64 
    push           &pc_lex.readnumber.str 
    push           pc_lex.readnumber.i i64 
    pushptroff                u8 1 -1
    add                       i64 
    push           48         i64 
    sub                       i64 
    pop            pc_lex.lxvalue i64 
#5869: 
    forup          #5868      i64 1
    opnd           pc_lex.readnumber.i 
    opnd           pc_lex.readnumber.slen 
#5867: 
    push           &pc_lex.lxvalue 
    push           pc_lex.readnumber.signx i64 
    multo                     i64 
#5845: 
    retproc                   
End


Proc pc_lex.readhex:
    local          pc_lex.readhex.ndigs i64 
    local          pc_lex.readhex.c i64 
    procentry                 
    push           0          i64 
    pop            pc_lex.readhex.ndigs i64 
    push           0          i64 
    pop            pc_lex.lxvalue i64 
#5871: 
    push           &pc_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    store          pc_lex.readhex.c i64 
    switch         #5872      39 102
    opnd           #5873      
#5872: 
    switchlabel    #5874      
    switchlabel    #5873      
    switchlabel    #5873      
    switchlabel    #5873      
    switchlabel    #5873      
    switchlabel    #5873      
    switchlabel    #5873      
    switchlabel    #5873      
    switchlabel    #5873      
    switchlabel    #5875      
    switchlabel    #5875      
    switchlabel    #5875      
    switchlabel    #5875      
    switchlabel    #5875      
    switchlabel    #5875      
    switchlabel    #5875      
    switchlabel    #5875      
    switchlabel    #5875      
    switchlabel    #5875      
    switchlabel    #5873      
    switchlabel    #5873      
    switchlabel    #5873      
    switchlabel    #5873      
    switchlabel    #5873      
    switchlabel    #5873      
    switchlabel    #5873      
    switchlabel    #5876      
    switchlabel    #5876      
    switchlabel    #5876      
    switchlabel    #5876      
    switchlabel    #5876      
    switchlabel    #5876      
    switchlabel    #5873      
    switchlabel    #5873      
    switchlabel    #5873      
    switchlabel    #5873      
    switchlabel    #5873      
    switchlabel    #5873      
    switchlabel    #5873      
    switchlabel    #5873      
    switchlabel    #5873      
    switchlabel    #5873      
    switchlabel    #5873      
    switchlabel    #5873      
    switchlabel    #5873      
    switchlabel    #5873      
    switchlabel    #5873      
    switchlabel    #5873      
    switchlabel    #5873      
    switchlabel    #5873      
    switchlabel    #5873      
    switchlabel    #5873      
    switchlabel    #5873      
    switchlabel    #5873      
    switchlabel    #5873      
    switchlabel    #5873      
    switchlabel    #5874      
    switchlabel    #5874      
    switchlabel    #5877      
    switchlabel    #5877      
    switchlabel    #5877      
    switchlabel    #5877      
    switchlabel    #5877      
    switchlabel    #5877      
    endswitch                 
#5875: 
    push           pc_lex.lxvalue i64 
    push           16         i64 
    mul                       i64 
    push           pc_lex.readhex.c i64 
    add                       i64 
    push           48         i64 
    sub                       i64 
    pop            pc_lex.lxvalue i64 
    push           &pc_lex.readhex.ndigs 
    incr                      i64 1
    jump           #5871      
#5876: 
    push           pc_lex.lxvalue i64 
    push           16         i64 
    mul                       i64 
    push           pc_lex.readhex.c i64 
    push           65         i64 
    sub                       i64 
    push           10         i64 
    add                       i64 
    add                       i64 
    pop            pc_lex.lxvalue i64 
    push           &pc_lex.readhex.ndigs 
    incr                      i64 1
    jump           #5871      
#5877: 
    push           pc_lex.lxvalue i64 
    push           16         i64 
    mul                       i64 
    push           pc_lex.readhex.c i64 
    push           97         i64 
    sub                       i64 
    push           10         i64 
    add                       i64 
    add                       i64 
    pop            pc_lex.lxvalue i64 
    push           &pc_lex.readhex.ndigs 
    incr                      i64 1
    jump           #5871      
#5874: 
    jump           #5871      
#5873: 
    push           &pc_lex.lxsptr 
    decr                      u64 1
    jump           #5878      
    jump           #5871      
#5878: 
    push           pc_lex.readhex.ndigs i64 
    push           0          i64 
    jumpne         #5879      i64 
    setargs                   1 0
    push           "No hex digits" u64 
    callproc       &pc_lex.lxerror 
    jump           #5880      
#5879: 
    push           pc_lex.readhex.ndigs i64 
    push           32         i64 
    jumple         #5881      i64 
    setargs                   1 0
    push           "Overflow in hex number" u64 
    callproc       &pc_lex.lxerror 
    jump           #5880      
#5881: 
    push           pc_lex.readhex.ndigs i64 
    push           16         i64 
    jumple         #5882      i64 
    setargs                   1 0
    push           "hex/128 bits not ready" u64 
    callproc       &pc_lex.lxerror 
    jump           #5883      
#5882: 
#5880: 
    push           15         i64 
    pop            pc_lex.lxsymbol i64 
#5883: 
    retproc                   
End


Proc pc_lex.ps:
    param          pc_lex.ps.caption u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           pc_lex.ps.caption u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_lex.lxsptr u64 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   1 0
    push           ":"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           0          u64 
    callproc       &pc_lex.printsymbol 
#5885: 
    retproc                   
End


Proc pc_lex.printsymbol:
    param          pc_lex.printsymbol.dev u64 
    local          pc_lex.printsymbol.str block:256 
    local          pc_lex.printsymbol.av_1 i64 
    procentry                 
    setargs                   2 0
    push           &pc_lex.symbolnames 
    push           pc_lex.lxsymbol i64 
    pushptroff                u64 8 -8
    push           &pc_lex.printsymbol.str 
    callproc       &strcpy    
    push           0          u64 
    push           &pc_lex.printsymbol.str 
    setargs                   1 0
    push           &pc_lex.printsymbol.str 
    callfn         &strlen    i64 
    popptroff                 u8 1 -3
    setargs                   1 0
    push           pc_lex.printsymbol.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           &pc_lex.printsymbol.str 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#5887: 
    push           14         i64 
    setargs                   1 0
    push           &pc_lex.printsymbol.str 
    callfn         &strlen    i64 
    sub                       i64 
    pop            pc_lex.printsymbol.av_1 i64 
    push           pc_lex.printsymbol.av_1 i64 
    push           0          i64 
    jumple         #5888      i64 
#5889: 
    setargs                   1 0
    push           pc_lex.printsymbol.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           " "        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#5890: 
    to             #5889      
    opnd           pc_lex.printsymbol.av_1 
#5888: 
    push           pc_lex.lxsymbol i64 
    push           19         i64 
    casejumpeq     #5891      i64 0
    push           15         i64 
    casejumpeq     #5892      i64 0
    push           16         i64 
    casejumpeq     #5893      i64 0
    push           17         i64 
    casejumpeq     #5894      i64 0
    push           1          i64 
    casejumpeq     #5895      i64 0
    push           20         i64 
    casejumpeq     #5896      i64 0
    push           21         i64 
    casejumpeq     #5897      i64 0
    popstack                  i64 
    jump           #5898      
#5891: 
    setargs                   1 0
    push           pc_lex.printsymbol.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           pc_lex.lxsymptr u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #5899      
#5892: 
    setargs                   1 0
    push           pc_lex.printsymbol.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           pc_lex.lxvalue i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #5899      
#5893: 
    setargs                   1 0
    push           pc_lex.printsymbol.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   2 0
    push           0          i64 
    push           pc_lex.lxxvalue r64 
    callproc       &msysp.m$print_r64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #5899      
#5894: 
    setargs                   1 0
    push           pc_lex.printsymbol.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "\""       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           pc_lex.lxsvalue u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           "\""       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #5899      
#5895: 
    setargs                   1 0
    push           pc_lex.printsymbol.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           pc_lex.lxvalue i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #5899      
#5896: 
    setargs                   1 0
    push           pc_lex.printsymbol.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           &pc_tables.pclnames 
    push           pc_lex.lxsubcode i64 
    pushptroff                u64 8 0
    push           1          i64 
    addrefoff                 u64 1 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #5899      
#5897: 
    setargs                   1 0
    push           pc_lex.printsymbol.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           &pc_tables.pstdnames 
    push           pc_lex.lxsubcode i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #5899      
#5898: 
    setargs                   1 0
    push           pc_lex.printsymbol.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           &pc_lex.symbolnames 
    push           pc_lex.lxsymbol i64 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           pc_lex.lxsubcode i64 
    jumpfalse      #5900      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           " "        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           pc_lex.lxsubcode i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#5900: 
#5899: 
    setargs                   1 0
    push           pc_lex.printsymbol.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   0 0
    callproc       &msysp.m$print_space 
    setargs                   1 0
    push           pc_lex.lxlineno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#5901: 
    retproc                   
End


Proc pc_lex.inithashtable:
    local          pc_lex.inithashtable.av_1 i64 
    local          pc_lex.inithashtable.av_2 i64 
    local          pc_lex.inithashtable.i i64 
    procentry                 
#5903: 
    push           0          i64 
    pop            pc_lex.inithashtable.i i64 
    push           217        i64 
    pop            pc_lex.inithashtable.av_1 i64 
    push           pc_lex.inithashtable.av_1 i64 
    push           0          i64 
    jumplt         #5904      i64 
#5905: 
    setargs                   3 0
    push           pc_lex.inithashtable.i i64 
    push           20         i64 
    push           &pc_tables.pclnames 
    push           pc_lex.inithashtable.i i64 
    pushptroff                u64 8 0
    push           1          i64 
    addrefoff                 u64 1 0
    callproc       &pc_lex.addreservedword 
#5906: 
    forup          #5905      i64 1
    opnd           pc_lex.inithashtable.i 
    opnd           pc_lex.inithashtable.av_1 
#5904: 
#5907: 
    push           0          i64 
    pop            pc_lex.inithashtable.i i64 
    push           14         i64 
    pop            pc_lex.inithashtable.av_2 i64 
    push           pc_lex.inithashtable.av_2 i64 
    push           0          i64 
    jumplt         #5908      i64 
#5909: 
    setargs                   3 0
    push           pc_lex.inithashtable.i i64 
    push           21         i64 
    push           &pc_tables.pstdnames 
    push           pc_lex.inithashtable.i i64 
    pushptroff                u64 8 0
    callproc       &pc_lex.addreservedword 
#5910: 
    forup          #5909      i64 1
    opnd           pc_lex.inithashtable.i 
    opnd           pc_lex.inithashtable.av_2 
#5908: 
    setargs                   3 0
    push           8          i64 
    push           20         i64 
    push           "proc"     u64 
    callproc       &pc_lex.addreservedword 
    setargs                   3 0
    push           8          i64 
    push           20         i64 
    push           "function" u64 
    callproc       &pc_lex.addreservedword 
    setargs                   3 0
    push           10         i64 
    push           20         i64 
    push           "end"      u64 
    callproc       &pc_lex.addreservedword 
    setargs                   3 0
    push           15         i64 
    push           20         i64 
    push           "endext"   u64 
    callproc       &pc_lex.addreservedword 
#5911: 
    retproc                   
End


Proc pc_lex.addreservedword:
    param          pc_lex.addreservedword.name u64 
    param          pc_lex.addreservedword.symbol i64 
    param          pc_lex.addreservedword.subcode i64 
    procentry                 
    setargs                   1 0
    push           pc_lex.addreservedword.name u64 
    callfn         &pc_lex.gethashvalue i64 
    pop            pc_lex.lxhashvalue i64 
    setargs                   2 0
    push           0          i64 
    push           pc_lex.addreservedword.name u64 
    callfn         &pc_lex.lookuplex i64 
    jumpfalse      #5913      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "NAME="    u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_lex.addreservedword.name u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "DUPL NAME" u64 
    callproc       &pc_lex.lxerror 
#5913: 
    push           0          i64 
    push           pc_lex.lxsymptr u64 
    push           24         
    popptroff                 u8 1 0
    push           pc_lex.addreservedword.symbol i64 
    push           pc_lex.lxsymptr u64 
    push           25         
    popptroff                 u8 1 0
    push           pc_lex.addreservedword.subcode i64 
    push           pc_lex.lxsymptr u64 
    push           26         
    popptroff                 u8 1 0
#5914: 
    retproc                   
End


Proc pc_lex.printhashtable:
    param          pc_lex.printhashtable.devx u64 
    param          pc_lex.printhashtable.caption u64 
    local          pc_lex.printhashtable.r u64 
    local          pc_lex.printhashtable.count i64 
    local          pc_lex.printhashtable.i i64 
    local          pc_lex.printhashtable.av_1 i64 
    procentry                 
    setargs                   1 0
    push           pc_lex.printhashtable.devx u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           pc_lex.printhashtable.caption u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           ":"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           0          i64 
    pop            pc_lex.printhashtable.count i64 
#5916: 
    push           0          i64 
    pop            pc_lex.printhashtable.i i64 
    push           262143     i64 
    pop            pc_lex.printhashtable.av_1 i64 
    push           pc_lex.printhashtable.av_1 i64 
    push           0          i64 
    jumplt         #5917      i64 
#5918: 
    push           &pc_lex.lexhashtable 
    push           pc_lex.printhashtable.i i64 
    pushptroff                u64 8 0
    pop            pc_lex.printhashtable.r u64 
    push           pc_lex.printhashtable.r u64 
    jumpfalse      #5919      u64 
    push           pc_lex.printhashtable.r u64 
    pushptr                   u64 
    jumpfalse      #5919      u64 
    push           &pc_lex.printhashtable.count 
    push           1          i64 
    addto                     i64 
#5919: 
#5920: 
    forup          #5918      i64 1
    opnd           pc_lex.printhashtable.i 
    opnd           pc_lex.printhashtable.av_1 
#5917: 
    setargs                   1 0
    push           pc_lex.printhashtable.devx u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           pc_lex.printhashtable.count i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           " items in table" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           262144     i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#5921: 
    retproc                   
End


Proc pc_lex.lookuplex: i64
    param          pc_lex.lookuplex.name u64 
    param          pc_lex.lookuplex.length i64 
    local          pc_lex.lookuplex.e u64 
    local          pc_lex.lookuplex.j i64 
    local          pc_lex.lookuplex.wrapped i64 
    local          pc_lex.lookuplex.insource i64 
    local          pc_lex.lookuplex.firstj i64 
    procentry                 
    push           pc_lex.lookuplex.length i64 
    pop            pc_lex.lookuplex.insource i64 
    push           pc_lex.lookuplex.length i64 
    push           0          i64 
    jumpne         #5923      i64 
    setargs                   1 0
    push           pc_lex.lookuplex.name u64 
    callfn         &strlen    i64 
    pop            pc_lex.lookuplex.length i64 
#5923: 
    push           pc_lex.lxhashvalue i64 
    push           262143     i64 
    iand                      i64 
    store          pc_lex.lookuplex.j i64 
    pop            pc_lex.lookuplex.firstj i64 
    push           0          i64 
    pop            pc_lex.lookuplex.wrapped i64 
#5924: 
    push           &pc_lex.lexhashtable 
    push           pc_lex.lookuplex.j i64 
    pushptroff                u64 8 0
    pop            pc_lex.lxsymptr u64 
    push           pc_lex.lxsymptr u64 
    push           0          u64 
    jumpne         #5925      u64 
    jump           #5926      
#5925: 
    push           pc_lex.lxsymptr u64 
    push           31         
    pushptroff                u8 1 0
    push           pc_lex.lookuplex.length i64 
    jumpne         #5927      i64 
    setargs                   3 0
    push           pc_lex.lookuplex.length u64 
    push           pc_lex.lookuplex.name u64 
    push           pc_lex.lxsymptr u64 
    pushptr                   u64 
    callfn         &memcmp    i32 
    push           0          i64 
    jumpne         #5927      i64 
    push           1          i64 
    setret                    i64 
    jump           #5928      
#5927: 
    push           &pc_lex.lookuplex.j 
    incrload                  i64 1
    push           262144     i64 
    jumplt         #5929      i64 
    push           pc_lex.lookuplex.wrapped i64 
    jumpfalse      #5930      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "???????HASHTABLE FULL" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           262144     i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           pc_lex.lxlineno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#5930: 
    push           1          i64 
    pop            pc_lex.lookuplex.wrapped i64 
    push           1          i64 
    pop            pc_lex.lookuplex.j i64 
#5929: 
    jump           #5924      
#5926: 
    push           pc_lex.lookuplex.insource i64 
    jumpfalse      #5931      i64 
    setargs                   2 0
    push           pc_lex.lookuplex.length i64 
    push           pc_lex.lookuplex.name u64 
    callfn         &mlibp.pcm_copyheapstringn u64 
    pop            pc_lex.lookuplex.name u64 
#5931: 
    push           &pc_lex.nsymbols 
    incrload                  i64 1
    push           229376     i64 
    jumple         #5932      i64 
    setargs                   1 0
    push           "Hashtable getting full" u64 
    callproc       &pc_lex.lxerror 
#5932: 
    push           pc_lex.lxsymptr u64 
    push           0          u64 
    jumpne         #5933      u64 
    setargs                   1 0
    push           51         i64 
    callfn         &mlibp.pcm_allocz u64 
    pop            pc_lex.lxsymptr u64 
    push           pc_lex.lxsymptr u64 
    push           &pc_lex.lexhashtable 
    push           pc_lex.lookuplex.j i64 
    popptroff                 u64 8 0
#5933: 
    push           pc_lex.lookuplex.name u64 
    push           pc_lex.lxsymptr u64 
    push           0          
    popptroff                 u64 1 0
    push           pc_lex.lookuplex.length i64 
    push           pc_lex.lxsymptr u64 
    push           31         
    popptroff                 u8 1 0
    push           19         i64 
    push           pc_lex.lxsymptr u64 
    push           24         
    popptroff                 u8 1 0
    push           0          i64 
    push           pc_lex.lxsymptr u64 
    push           25         
    popptroff                 u8 1 0
    push           0          i64 
    setret                    i64 
    jump           #5928      
#5928: 
    retfn                     i64 
End


Proc pc_lex.startlex:
    param          pc_lex.startlex.source u64 
    procentry                 
    setargs                   0 0
    callproc       &pc_lex.initlex 
    push           pc_lex.startlex.source u64 
    store          pc_lex.lxsptr u64 
    pop            pc_lex.lxstart u64 
    push           1          i64 
    pop            pc_lex.lxlineno i64 
    push           1          i64 
    pop            pc_lex.lxsymbol i64 
#5935: 
    retproc                   
End


Proc pc_lex.addnamestr: u64
    param          pc_lex.addnamestr.name u64 
    procentry                 
    setargs                   1 0
    push           pc_lex.addnamestr.name u64 
    callfn         &pc_lex.gethashvalue i64 
    pop            pc_lex.lxhashvalue i64 
    setargs                   2 0
    push           0          i64 
    setargs                   1 0
    push           pc_lex.addnamestr.name u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    callproc       &pc_lex.lookuplex 
    push           pc_lex.lxsymptr u64 
    setret                    u64 
    jump           #5937      
#5937: 
    retfn                     u64 
End


Proc pc_lex.lxerror:
    param          pc_lex.lxerror.m u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "\c\n\c\n Lexical Error\n*** # *** on line #" u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           pc_lex.lxerror.m u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_lex.lxlineno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#5939: 
    retproc                   
End


Proc pc_lex.gethashvalue: i64
    param          pc_lex.gethashvalue.s u64 
    local          pc_lex.gethashvalue.c i64 
    local          pc_lex.gethashvalue.hsum i64 
    procentry                 
    push           pc_lex.gethashvalue.s u64 
    pushptr                   u8 
    push           0          i64 
    jumpne         #5941      i64 
    push           0          i64 
    setret                    i64 
    jump           #5942      
#5941: 
    push           &pc_lex.gethashvalue.s 
    loadincr                  u64 1
    pushptr                   u8 
    pop            pc_lex.gethashvalue.hsum i64 
#5943: 
    push           &pc_lex.gethashvalue.s 
    loadincr                  u64 1
    pushptr                   u8 
    pop            pc_lex.gethashvalue.c i64 
    push           pc_lex.gethashvalue.c i64 
    push           0          i64 
    jumpne         #5944      i64 
    jump           #5945      
#5944: 
    push           pc_lex.gethashvalue.hsum i64 
    push           4          i64 
    shl                       i64 
    push           pc_lex.gethashvalue.hsum i64 
    sub                       i64 
    push           pc_lex.gethashvalue.c i64 
    add                       i64 
    pop            pc_lex.gethashvalue.hsum i64 
    jump           #5943      
#5945: 
    push           pc_lex.gethashvalue.hsum i64 
    push           5          i64 
    shl                       i64 
    push           pc_lex.gethashvalue.hsum i64 
    sub                       i64 
    setret                    i64 
    jump           #5942      
#5942: 
    retfn                     i64 
End


Proc pc_lex.readstring:
    local          pc_lex.readstring.dest u64 
    local          pc_lex.readstring.c i64 
    local          pc_lex.readstring.d i64 
    local          pc_lex.readstring.str block:8 
    local          pc_lex.readstring.av_1 i64 
    procentry                 
    push           17         i64 
    pop            pc_lex.lxsymbol i64 
    push           pc_lex.lxsptr u64 
    pop            pc_lex.lxsvalue u64 
    push           pc_lex.lxsptr u64 
    pop            pc_lex.readstring.dest u64 
#5947: 
    push           &pc_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    store          pc_lex.readstring.c i64 
    switch         #5948      0 92
    opnd           #5949      
#5948: 
    switchlabel    #5950      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5950      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5950      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5951      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5949      
    switchlabel    #5952      
    endswitch                 
#5952: 
    push           pc_lex.lxsptr u64 
    pushptr                   u8 
    pop            pc_lex.readstring.c i64 
    push           pc_lex.readstring.c i64 
    push           65         i64 
    jumplt         #5953      i64 
    push           pc_lex.readstring.c i64 
    push           90         i64 
    jumpgt         #5953      i64 
    push           &pc_lex.readstring.c 
    push           32         i64 
    addto                     i64 
#5953: 
    push           &pc_lex.lxsptr 
    incr                      u64 1
    push           pc_lex.readstring.c i64 
    switch         #5954      34 122
    opnd           #5955      
#5954: 
    switchlabel    #5956      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5957      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5958      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5956      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5959      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5960      
    switchlabel    #5961      
    switchlabel    #5962      
    switchlabel    #5955      
    switchlabel    #5963      
    switchlabel    #5964      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5965      
    switchlabel    #5955      
    switchlabel    #5965      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5955      
    switchlabel    #5962      
    switchlabel    #5966      
    switchlabel    #5967      
    switchlabel    #5955      
    switchlabel    #5968      
    switchlabel    #5969      
    switchlabel    #5970      
    switchlabel    #5971      
    switchlabel    #5958      
    endswitch                 
#5960: 
    push           7          i64 
    pop            pc_lex.readstring.c i64 
    jump           #5972      
#5961: 
    push           8          i64 
    pop            pc_lex.readstring.c i64 
    jump           #5972      
#5962: 
    push           13         i64 
    pop            pc_lex.readstring.c i64 
    jump           #5972      
#5963: 
    push           26         i64 
    pop            pc_lex.readstring.c i64 
    jump           #5972      
#5964: 
    push           12         i64 
    pop            pc_lex.readstring.c i64 
    jump           #5972      
#5965: 
    push           10         i64 
    pop            pc_lex.readstring.c i64 
    jump           #5972      
#5966: 
    push           27         i64 
    pop            pc_lex.readstring.c i64 
    jump           #5972      
#5967: 
    push           9          i64 
    pop            pc_lex.readstring.c i64 
    jump           #5972      
#5968: 
    push           11         i64 
    pop            pc_lex.readstring.c i64 
    jump           #5972      
#5969: 
    push           13         u64 
    push           &pc_lex.readstring.dest 
    loadincr                  u64 1
    popptr                    u8 
    push           10         i64 
    pop            pc_lex.readstring.c i64 
    jump           #5972      
#5970: 
    push           0          i64 
    pop            pc_lex.readstring.c i64 
#5973: 
    push           2          i64 
    pop            pc_lex.readstring.av_1 i64 
#5974: 
    push           &pc_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    store          pc_lex.readstring.d i64 
    push           65         i64 
    casejumpeq     #5975      i64 0
    push           66         i64 
    casejumpeq     #5975      i64 0
    push           67         i64 
    casejumpeq     #5975      i64 0
    push           68         i64 
    casejumpeq     #5975      i64 0
    push           69         i64 
    casejumpeq     #5975      i64 0
    push           70         i64 
    casejumpeq     #5975      i64 0
    push           97         i64 
    casejumpeq     #5976      i64 0
    push           98         i64 
    casejumpeq     #5976      i64 0
    push           99         i64 
    casejumpeq     #5976      i64 0
    push           100        i64 
    casejumpeq     #5976      i64 0
    push           101        i64 
    casejumpeq     #5976      i64 0
    push           102        i64 
    casejumpeq     #5976      i64 0
    push           48         i64 
    casejumpeq     #5977      i64 0
    push           49         i64 
    casejumpeq     #5977      i64 0
    push           50         i64 
    casejumpeq     #5977      i64 0
    push           51         i64 
    casejumpeq     #5977      i64 0
    push           52         i64 
    casejumpeq     #5977      i64 0
    push           53         i64 
    casejumpeq     #5977      i64 0
    push           54         i64 
    casejumpeq     #5977      i64 0
    push           55         i64 
    casejumpeq     #5977      i64 0
    push           56         i64 
    casejumpeq     #5977      i64 0
    push           57         i64 
    casejumpeq     #5977      i64 0
    popstack                  i64 
    jump           #5978      
#5975: 
    push           pc_lex.readstring.c i64 
    push           16         i64 
    mul                       i64 
    push           pc_lex.readstring.d i64 
    add                       i64 
    push           65         i64 
    sub                       i64 
    push           10         i64 
    add                       i64 
    pop            pc_lex.readstring.c i64 
    jump           #5979      
#5976: 
    push           pc_lex.readstring.c i64 
    push           16         i64 
    mul                       i64 
    push           pc_lex.readstring.d i64 
    add                       i64 
    push           97         i64 
    sub                       i64 
    push           10         i64 
    add                       i64 
    pop            pc_lex.readstring.c i64 
    jump           #5979      
#5977: 
    push           pc_lex.readstring.c i64 
    push           16         i64 
    mul                       i64 
    push           pc_lex.readstring.d i64 
    add                       i64 
    push           48         i64 
    sub                       i64 
    pop            pc_lex.readstring.c i64 
    jump           #5979      
#5978: 
    setargs                   1 0
    push           "Bad \\x code" u64 
    callproc       &pc_lex.lxerror 
#5979: 
#5980: 
    to             #5974      
    opnd           pc_lex.readstring.av_1 
#5981: 
    jump           #5972      
#5971: 
    push           16         i64 
    pop            pc_lex.readstring.c i64 
    jump           #5972      
#5958: 
    push           0          i64 
    pop            pc_lex.readstring.c i64 
    jump           #5972      
#5956: 
    push           34         i64 
    pop            pc_lex.readstring.c i64 
    jump           #5972      
#5959: 
    push           92         i64 
    pop            pc_lex.readstring.c i64 
    jump           #5972      
#5957: 
    push           39         i64 
    pop            pc_lex.readstring.c i64 
    jump           #5972      
#5955: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "<"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   2 0
    push           0          i64 
    push           pc_lex.readstring.c i64 
    truncate                  u64 u8 
    callproc       &msysp.m$print_c8 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           ">"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Unknown string escape" u64 
    callproc       &pc_lex.lxerror 
#5972: 
    jump           #5982      
#5951: 
    push           pc_lex.lxsptr u64 
    pushptr                   u8 
    push           pc_lex.readstring.c i64 
    jumpne         #5983      i64 
    push           &pc_lex.lxsptr 
    incr                      u64 1
    jump           #5984      
#5983: 
    jump           #5985      
#5984: 
    jump           #5982      
#5950: 
    setargs                   1 0
    push           "String not terminated" u64 
    callproc       &pc_lex.lxerror 
    jump           #5982      
#5949: 
#5982: 
    push           pc_lex.readstring.c u64 
    push           &pc_lex.readstring.dest 
    loadincr                  u64 1
    popptr                    u8 
    jump           #5947      
#5985: 
    push           pc_lex.readstring.dest u64 
    push           pc_lex.lxsvalue u64 
    subref                    i64 1
    pop            pc_lex.lxlength i64 
    push           0          u64 
    push           pc_lex.lxsvalue u64 
    push           pc_lex.lxlength i64 
    popptroff                 u8 1 0
#5986: 
    retproc                   
End


Proc pc_lex.stringtonumber128:
    param          pc_lex.stringtonumber128.s u64 
    param          pc_lex.stringtonumber128.length i64 
    param          pc_lex.stringtonumber128.base i64 
    local          pc_lex.stringtonumber128.aa u128 
    local          pc_lex.stringtonumber128.c i64 
    local          pc_lex.stringtonumber128.d i64 
    local          pc_lex.stringtonumber128.av_1 i64 
    procentry                 
    push           0          i64 
    widenw                    u128 i64 
    pop            pc_lex.stringtonumber128.aa u128 
#5988: 
    push           pc_lex.stringtonumber128.length i64 
    pop            pc_lex.stringtonumber128.av_1 i64 
    push           pc_lex.stringtonumber128.av_1 i64 
    push           0          i64 
    jumple         #5989      i64 
#5990: 
    push           pc_lex.stringtonumber128.aa u128 
    push           pc_lex.stringtonumber128.base i64 
    widenw                    u128 i64 
    mul                       u128 
    pop            pc_lex.stringtonumber128.aa u128 
    push           &pc_lex.stringtonumber128.s 
    loadincr                  u64 1
    pushptr                   u8 
    pop            pc_lex.stringtonumber128.c i64 
    push           pc_lex.stringtonumber128.c i64 
    push           97         i64 
    jumplt         #5991      i64 
    push           pc_lex.stringtonumber128.c i64 
    push           97         i64 
    sub                       i64 
    push           10         i64 
    add                       i64 
    pop            pc_lex.stringtonumber128.d i64 
    jump           #5992      
#5991: 
    push           pc_lex.stringtonumber128.c i64 
    push           65         i64 
    jumplt         #5993      i64 
    push           pc_lex.stringtonumber128.c i64 
    push           65         i64 
    sub                       i64 
    push           10         i64 
    add                       i64 
    pop            pc_lex.stringtonumber128.d i64 
    jump           #5992      
#5993: 
    push           pc_lex.stringtonumber128.c i64 
    push           48         i64 
    sub                       i64 
    pop            pc_lex.stringtonumber128.d i64 
#5992: 
    push           pc_lex.stringtonumber128.aa u128 
    push           pc_lex.stringtonumber128.d i64 
    widenw                    u128 i64 
    add                       u128 
    pop            pc_lex.stringtonumber128.aa u128 
#5994: 
    to             #5990      
    opnd           pc_lex.stringtonumber128.av_1 
#5989: 
    push           pc_lex.stringtonumber128.aa u128 
    pop            pc_lex.lxuvalue128 u128 
    push           18         i64 
    pop            pc_lex.lxsymbol i64 
#5995: 
    retproc                   
End


Proc pc_parse.parse: i64
    param          pc_parse.parse.source u64 
    local          pc_parse.parse.d u64 
    local          pc_parse.parse.labno i64 
    procentry                 
    setargs                   1 0
    push           pc_parse.parse.source u64 
    callproc       &pc_lex.startlex 
    push           1          i64 
    pop            pc_lex.lxsymbol i64 
#5997: 
    setargs                   0 0
    callproc       &pc_lex.lex 
    push           pc_lex.lxsymbol i64 
    push           20         i64 
    casejumpeq     #5998      i64 0
    push           21         i64 
    casejumpeq     #5998      i64 0
    push           14         i64 
    casejumpeq     #5999      i64 0
    push           19         i64 
    casejumpeq     #6000      i64 0
    push           15         i64 
    casejumpeq     #6001      i64 0
    push           12         i64 
    casejumpeq     #6002      i64 0
    push           13         i64 
    casejumpeq     #6003      i64 0
    popstack                  i64 
    jump           #6004      
#5998: 
    push           pc_lex.lxsubcode i64 
    push           11         i64 
    jumpne         #6005      i64 
    jump           #6006      
#6005: 
    setargs                   0 0
    callproc       &pc_parse.readinstr 
    jump           #6007      
#5999: 
    setargs                   0 0
    callproc       &pc_parse.dolabel 
    jump           #6007      
#6000: 
    setargs                   1 0
    push           "\"NAME:\" NOT SUPPORTED" u64 
    callproc       &pc_parse.serror 
    push           pc_lex.lxsymptr u64 
    pop            pc_parse.parse.d u64 
    setargs                   0 0
    callproc       &pc_lex.lex 
    push           pc_lex.lxsymbol i64 
    push           3          i64 
    casejumpeq     #6008      i64 0
    push           4          i64 
    casejumpeq     #6009      i64 0
    popstack                  i64 
    jump           #6010      
#6008: 
    jump           #6011      
#6009: 
    push           1          u64 
    push           pc_parse.parse.d u64 
    push           46         
    addrefoff                 u64 1 0
    push           3          i64 
    popdotindex               u16 
    jump           #6011      
#6010: 
    setargs                   1 0
    push           ": expected" u64 
    callproc       &pc_parse.serror 
#6011: 
    setargs                   1 0
    push           pc_parse.parse.d u64 
    callproc       &pc_libpcl.assignlabeltoname 
    setargs                   2 0
    setargs                   1 0
    push           pc_parse.parse.d u64 
    callfn         &pc_libpcl.pcl_genmemaddr u64 
    push           20         i64 
    callproc       &pc_libpcl.pcl_gen 
    push           pc_lex.lxlineno i64 
    push           pc_libpcl.pccurr u64 
    push           24         
    popptroff                 u32 1 0
    setargs                   0 0
    callproc       &pc_lex.lex 
    jump           #6007      
#6001: 
    jump           #5997      
    jump           #6007      
#6002: 
    jump           #5997      
    jump           #6007      
#6003: 
    jump           #6006      
    jump           #6007      
#6004: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "SYMBOLNAMES[LXSYMBOL]=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pc_lex.symbolnames 
    push           pc_lex.lxsymbol i64 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Bad input" u64 
    callproc       &pc_parse.serror 
#6007: 
    setargs                   1 0
    push           12         i64 
    callproc       &pc_parse.checksymbol 
    jump           #5997      
#6006: 
    push           pc_parse.insideproc i64 
    jumpfalse      #6012      i64 
    setargs                   1 0
    push           "End missing" u64 
    callproc       &pc_parse.serror 
#6012: 
    push           1          i64 
    setret                    i64 
    jump           #6013      
#6013: 
    retfn                     i64 
End


Proc pc_parse.checksymbol:
    param          pc_parse.checksymbol.symbol i64 
    procentry                 
    push           pc_lex.lxsymbol i64 
    push           pc_parse.checksymbol.symbol i64 
    jumpeq         #6015      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pc_lex.symbolnames 
    push           pc_parse.checksymbol.symbol i64 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "expected, not" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pc_lex.symbolnames 
    push           pc_lex.lxsymbol i64 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           ", on line:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_lex.lxlineno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#6015: 
#6016: 
    retproc                   
End


Proc pc_parse.dolabel:
    procentry                 
    push           pc_lex.lxvalue i64 
    push           1          i64 
    push           1000000    i64 
    jumpinrange    #6018      i64 
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_lex.lxvalue i64 
    callfn         &msysp.strint u64 
    push           "1:Label out of range:" u64 
    callproc       &pc_parse.serror_s 
#6018: 
    setargs                   2 0
    push           pc_lex.lxlineno i64 
    push           pc_lex.lxvalue i64 
    callproc       &pc_libpcl.pdefinelabel 
    setargs                   0 0
    callproc       &pc_lex.lex 
    setargs                   1 0
    push           3          i64 
    callproc       &pc_parse.checksymbol 
    setargs                   0 0
    callproc       &pc_lex.lex 
#6019: 
    retproc                   
End


Proc pc_parse.readmode:
    param          pc_parse.readmode.p u64 
    procentry                 
    push           pc_parse.readmode.p u64 
    push           3          
    pushptroff                u8 1 0
    push           0          i64 
    jumpeq         #6021      i64 
    push           pc_lex.lxsubcode i64 
    push           pc_parse.readmode.p u64 
    push           16         
    popptroff                 i32 1 0
    setargs                   0 0
    callproc       &pc_lex.lex 
    jump           #6022      
#6021: 
    push           pc_lex.lxsubcode i64 
    push           pc_parse.readmode.p u64 
    push           3          
    popptroff                 u8 1 0
    push           &pc_tables.psize 
    push           pc_lex.lxsubcode i64 
    pushptroff                u8 1 0
    push           pc_parse.readmode.p u64 
    push           4          
    popptroff                 i32 1 0
    setargs                   0 0
    callproc       &pc_lex.lex 
    push           pc_parse.readmode.p u64 
    push           3          
    pushptroff                u8 1 0
    push           13         i64 
    jumpne         #6023      i64 
    setargs                   1 0
    push           3          i64 
    callproc       &pc_parse.checksymbol 
    setargs                   0 0
    callproc       &pc_lex.lex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_parse.checksymbol 
    push           pc_lex.lxvalue i64 
    push           pc_parse.readmode.p u64 
    push           4          
    popptroff                 i32 1 0
    setargs                   0 0
    callproc       &pc_lex.lex 
#6023: 
#6022: 
    retproc                   
End


Proc pc_parse.readinstr:
    local          pc_parse.readinstr.opcode i64 
    local          pc_parse.readinstr.mode i64 
    local          pc_parse.readinstr.size i64 
    local          pc_parse.readinstr.p u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_parse.readinstr.p u64 
    push           pc_lex.lxlineno i64 
    push           pc_parse.readinstr.p u64 
    push           24         
    popptroff                 u32 1 0
    push           0          i64 
    pop            pc_parse.readinstr.mode i64 
    push           0          i64 
    pop            pc_parse.readinstr.size i64 
    push           pc_lex.lxsymbol i64 
    push           21         i64 
    jumpne         #6025      i64 
    setargs                   1 0
    push           pc_parse.readinstr.p u64 
    callproc       &pc_parse.readmode 
    setargs                   1 0
    push           20         i64 
    callproc       &pc_parse.checksymbol 
#6025: 
    push           pc_lex.lxsubcode i64 
    store          pc_parse.readinstr.opcode i64 
    push           pc_parse.readinstr.p u64 
    push           1          
    popptroff                 u8 1 0
    setargs                   0 0
    callproc       &pc_lex.lex 
    push           pc_lex.lxsymbol i64 
    push           21         i64 
    jumpne         #6026      i64 
    setargs                   1 0
    push           pc_parse.readinstr.p u64 
    callproc       &pc_parse.readmode 
#6026: 
    push           &pc_tables.pclhasopnd 
    push           pc_parse.readinstr.opcode i64 
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6027      i64 0
    push           2          i64 
    casejumpeq     #6028      i64 0
    push           3          i64 
    casejumpeq     #6029      i64 0
    push           4          i64 
    casejumpeq     #6030      i64 0
    popstack                  i64 
    jump           #6031      
#6027: 
    push           pc_lex.lxsymbol i64 
    push           15         i64 
    casejumpeq     #6032      i64 0
    push           16         i64 
    casejumpeq     #6033      i64 0
    push           17         i64 
    casejumpeq     #6034      i64 0
    push           14         i64 
    casejumpeq     #6035      i64 0
    push           19         i64 
    casejumpeq     #6036      i64 0
    push           18         i64 
    casejumpeq     #6037      i64 0
    push           10         i64 
    casejumpeq     #6038      i64 0
    popstack                  i64 
    jump           #6039      
#6032: 
    push           pc_lex.lxvalue i64 
    push           pc_parse.readinstr.p u64 
    push           8          
    popptroff                 i64 1 0
    push           4          i64 
    push           pc_parse.readinstr.p u64 
    push           0          
    popptroff                 u8 1 0
    push           9          i64 
    pop            pc_parse.readinstr.mode i64 
    setargs                   0 0
    callproc       &pc_lex.lex 
    jump           #6040      
#6033: 
    push           pc_lex.lxxvalue r64 
    push           pc_parse.readinstr.p u64 
    push           8          
    popptroff                 r64 1 0
    push           5          i64 
    push           pc_parse.readinstr.p u64 
    push           0          
    popptroff                 u8 1 0
    push           4          i64 
    pop            pc_parse.readinstr.mode i64 
    setargs                   0 0
    callproc       &pc_lex.lex 
    jump           #6040      
#6034: 
    setargs                   1 0
    push           pc_lex.lxsvalue u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           pc_parse.readinstr.p u64 
    push           8          
    popptroff                 u64 1 0
    push           8          i64 
    push           pc_parse.readinstr.p u64 
    push           0          
    popptroff                 u8 1 0
    push           4          i64 
    pop            pc_parse.readinstr.mode i64 
    setargs                   0 0
    callproc       &pc_lex.lex 
    jump           #6040      
#6035: 
    push           pc_lex.lxvalue i64 
    push           1          i64 
    push           1000000    i64 
    jumpinrange    #6041      i64 
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_lex.lxvalue i64 
    callfn         &msysp.strint u64 
    push           "2:Label out of range:" u64 
    callproc       &pc_parse.serror_s 
#6041: 
    push           pc_lex.lxvalue i64 
    push           pc_parse.readinstr.p u64 
    push           8          
    popptroff                 i64 1 0
    push           3          i64 
    push           pc_parse.readinstr.p u64 
    push           0          
    popptroff                 u8 1 0
    setargs                   0 0
    callproc       &pc_lex.lex 
    jump           #6040      
#6036: 
    push           pc_lex.lxsymptr u64 
    push           pc_parse.readinstr.p u64 
    push           8          
    popptroff                 u64 1 0
    push           1          i64 
    push           pc_parse.readinstr.p u64 
    push           0          
    popptroff                 u8 1 0
    push           pc_lex.lxtruename u8 
    push           pc_parse.readinstr.p u64 
    push           8          
    pushptroff                u64 1 0
    push           46         
    addrefoff                 u64 1 0
    push           8          i64 
    popdotindex               u16 
    setargs                   0 0
    callproc       &pc_lex.lex 
    jump           #6040      
#6037: 
    push           pc_lex.lxuvalue128 i128 
    push           pc_parse.readinstr.p u64 
    push           8          
    popptroff                 i128 1 0
    push           6          i64 
    push           pc_parse.readinstr.p u64 
    push           0          
    popptroff                 u8 1 0
    push           10         i64 
    pop            pc_parse.readinstr.mode i64 
    setargs                   0 0
    callproc       &pc_lex.lex 
    jump           #6040      
#6038: 
    setargs                   0 0
    callproc       &pc_lex.lex 
    setargs                   1 0
    push           19         i64 
    callproc       &pc_parse.checksymbol 
    push           pc_lex.lxsymptr u64 
    push           pc_parse.readinstr.p u64 
    push           8          
    popptroff                 u64 1 0
    push           pc_lex.lxtruename u8 
    push           pc_parse.readinstr.p u64 
    push           8          
    pushptroff                u64 1 0
    push           46         
    addrefoff                 u64 1 0
    push           8          i64 
    popdotindex               u16 
    push           2          i64 
    push           pc_parse.readinstr.p u64 
    push           0          
    popptroff                 u8 1 0
    setargs                   0 0
    callproc       &pc_lex.lex 
    push           pc_lex.lxsymbol i64 
    push           9          i64 
    jumpne         #6042      i64 
    push           1          u64 
    push           pc_parse.readinstr.p u64 
    push           8          
    pushptroff                u64 1 0
    push           46         
    addrefoff                 u64 1 0
    push           1          i64 
    popdotindex               u16 
    setargs                   0 0
    callproc       &pc_lex.lex 
#6042: 
    jump           #6040      
#6039: 
    setargs                   1 0
    push           "Missing or Bad Operand" u64 
    callproc       &pc_parse.serror 
#6040: 
    jump           #6043      
#6028: 
    setargs                   1 0
    push           19         i64 
    callproc       &pc_parse.checksymbol 
    push           pc_lex.lxsymptr u64 
    push           pc_parse.readinstr.p u64 
    push           8          
    popptroff                 u64 1 0
    push           pc_parse.readinstr.opcode i64 
    push           16         i64 
    jumpne         #6044      i64 
    push           8          i64 
    push           pc_parse.readinstr.p u64 
    push           1          
    popptroff                 u8 1 0
    setargs                   1 0
    push           pc_parse.readinstr.p u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &pc_libpcl.definertsproc 
#6044: 
    push           1          i64 
    push           pc_parse.readinstr.p u64 
    push           0          
    popptroff                 u8 1 0
    setargs                   0 0
    callproc       &pc_lex.lex 
    push           pc_lex.lxsymbol i64 
    push           3          i64 
    casejumpeq     #6045      i64 0
    push           4          i64 
    casejumpeq     #6046      i64 0
    popstack                  i64 
    jump           #6047      
#6045: 
    jump           #6048      
#6046: 
    push           1          u64 
    push           pc_parse.readinstr.p u64 
    push           8          
    pushptroff                u64 1 0
    push           46         
    addrefoff                 u64 1 0
    push           3          i64 
    popdotindex               u16 
    push           1          u64 
    push           pc_parse.readinstr.p u64 
    push           2          
    addrefoff                 u64 1 0
    push           0          i64 
    popdotindex               u8 
    jump           #6048      
#6047: 
    setargs                   1 0
    push           "Colon expected" u64 
    callproc       &pc_parse.serror 
#6048: 
    setargs                   0 0
    callproc       &pc_lex.lex 
    jump           #6043      
#6029: 
    setargs                   1 0
    push           19         i64 
    callproc       &pc_parse.checksymbol 
    push           pc_lex.lxsymptr u64 
    push           pc_parse.readinstr.p u64 
    push           8          
    popptroff                 u64 1 0
    push           1          i64 
    push           pc_parse.readinstr.p u64 
    push           0          
    popptroff                 u8 1 0
    setargs                   0 0
    callproc       &pc_lex.lex 
    push           pc_lex.lxsymbol i64 
    push           3          i64 
    jumpne         #6049      i64 
    setargs                   1 0
    push           ": not used for locals" u64 
    callproc       &pc_parse.serror 
#6049: 
    jump           #6043      
#6030: 
    setargs                   1 0
    push           19         i64 
    callproc       &pc_parse.checksymbol 
    push           pc_lex.lxsymptr u64 
    push           pc_parse.readinstr.p u64 
    push           8          
    popptroff                 u64 1 0
    push           1          i64 
    push           pc_parse.readinstr.p u64 
    push           0          
    popptroff                 u8 1 0
    setargs                   0 0
    callproc       &pc_lex.lex 
    jump           #6043      
#6031: 
#6043: 
    push           pc_lex.lxsymbol i64 
    push           21         i64 
    jumpne         #6050      i64 
    setargs                   1 0
    push           pc_parse.readinstr.p u64 
    callproc       &pc_parse.readmode 
#6050: 
    push           pc_parse.readinstr.p u64 
    push           3          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #6051      i64 
    push           pc_parse.readinstr.mode i64 
    push           0          i64 
    jumpeq         #6052      i64 
    push           pc_parse.readinstr.mode i64 
    push           pc_parse.readinstr.p u64 
    push           3          
    popptroff                 u8 1 0
    push           pc_parse.readinstr.size i64 
    push           pc_parse.readinstr.p u64 
    push           4          
    popptroff                 i32 1 0
#6052: 
#6051: 
    push           &pc_tables.pclextra 
    push           pc_parse.readinstr.opcode i64 
    pushptroff                u8 1 0
    jumpfalse      #6053      i64 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_parse.checksymbol 
    push           pc_lex.lxvalue i64 
    push           pc_parse.readinstr.p u64 
    push           16         
    popptroff                 i32 1 0
    setargs                   0 0
    callproc       &pc_lex.lex 
    push           &pc_tables.pclextra 
    push           pc_parse.readinstr.opcode i64 
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #6054      i64 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_parse.checksymbol 
    push           pc_lex.lxvalue i64 
    push           pc_parse.readinstr.p u64 
    push           20         
    popptroff                 i32 1 0
    setargs                   0 0
    callproc       &pc_lex.lex 
#6054: 
#6053: 
#6055: 
    retproc                   
End


Proc pc_parse.serror:
    param          pc_parse.serror.mess u64 
    procentry                 
    setargs                   2 0
    push           0          u64 
    push           pc_parse.serror.mess u64 
    callproc       &pc_parse.serror_s 
#6057: 
    retproc                   
End


Proc pc_parse.serror_s:
    param          pc_parse.serror_s.mess u64 
    param          pc_parse.serror_s.param u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Syntax error:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_parse.serror_s.mess u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           pc_parse.serror_s.param u64 
    jumpfalse      #6059      u64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           ":"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_parse.serror_s.param u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#6059: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           " on line:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_lex.lxlineno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#6060: 
    retproc                   
End


Proc pc_parse.pcl_readpclfile:: i64
    param          pc_parse.pcl_readpclfile.filename u64 
    param          pc_parse.pcl_readpclfile.rtsfile u64 
    local          pc_parse.pcl_readpclfile.source u64 
    procentry                 
    setargs                   0 0
    callproc       &pc_libpcl.pcl_start 
    setargs                   1 0
    push           pc_parse.pcl_readpclfile.filename u64 
    callfn         &pc_parse.parse_readsource i64 
    jumptrue       #6062      i64 
    push           0          i64 
    setret                    i64 
    jump           #6063      
#6062: 
    push           pc_parse.pcl_readpclfile.rtsfile u64 
    jumpfalse      #6064      u64 
    push           pc_libpcl.maxuserlabel i64 
    pop            pc_libpcl.labelnooffset i64 
    setargs                   0 0
    callfn         &pc_parse.parse_readrts i64 
    jumptrue       #6065      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "No RTS found" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           0          i64 
    setret                    i64 
    jump           #6063      
#6065: 
#6064: 
    setargs                   2 0
    push           0          u64 
    push           11         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_libpcl.pcl_end 
    push           1          i64 
    setret                    i64 
    jump           #6063      
#6063: 
    retfn                     i64 
End


Proc pc_parse.parse_readsource: i64
    param          pc_parse.parse_readsource.filename u64 
    local          pc_parse.parse_readsource.source u64 
    procentry                 
    setargs                   1 0
    push           pc_parse.parse_readsource.filename u64 
    callfn         &mlibp.readfile u64 
    pop            pc_parse.parse_readsource.source u64 
    push           pc_parse.parse_readsource.source u64 
    push           0          u64 
    jumpne         #6067      u64 
    push           "Can't load file" u64 
    pop            pc_libpcl.errormess u64 
    push           0          i64 
    setret                    i64 
    jump           #6068      
#6067: 
    setargs                   1 0
    push           pc_parse.parse_readsource.source u64 
    callfn         &pc_parse.parse i64 
    jumptrue       #6069      i64 
    push           "Couldn't parse" u64 
    pop            pc_libpcl.errormess u64 
    push           0          i64 
    setret                    i64 
    jump           #6068      
#6069: 
    push           1          i64 
    setret                    i64 
    jump           #6068      
#6068: 
    retfn                     i64 
End


Proc pc_parse.parse_readrts: i64
    procentry                 
    setargs                   1 0
    push           pc_parse.parse_readrts.source u64 
    callfn         &pc_parse.parse i64 
    jumptrue       #6071      i64 
    push           "Couldn't parse RTS" u64 
    pop            pc_libpcl.errormess u64 
    push           0          i64 
    setret                    i64 
    jump           #6072      
#6071: 
    push           1          i64 
    setret                    i64 
    jump           #6072      
#6072: 
    retfn                     i64 
End


Proc pc_win64.pcl_genmcl:: i64
    param          pc_win64.pcl_genmcl.optim i64 
    procentry                 
    setargs                   0 0
    callproc       &pc_libpcl.fixuppcl 
    setargs                   1 0
    push           pc_win64.pcl_genmcl.optim i64 
    callproc       &pc_genmcl.genmcl 
    push           1          i64 
    setret                    i64 
    jump           #6074      
#6074: 
    retfn                     i64 
End


Proc pc_win64.pcl_writeasmfile:: i64
    param          pc_win64.pcl_writeasmfile.filename u64 
    param          pc_win64.pcl_writeasmfile.optim i64 
    procentry                 
    setargs                   1 0
    push           pc_win64.pcl_writeasmfile.optim i64 
    callproc       &pc_win64.pcl_genmcl 
    setargs                   1 0
    push           pc_win64.pcl_writeasmfile.filename u64 
    callproc       &pc_win64.writeasmfile 
    push           1          i64 
    setret                    i64 
    jump           #6076      
#6076: 
    retfn                     i64 
End


Proc pc_win64.pcl_getasmstring:: u64
    param          pc_win64.pcl_getasmstring.optim i64 
    local          pc_win64.pcl_getasmstring.asmstr u64 
    procentry                 
    setargs                   1 0
    push           pc_win64.pcl_getasmstring.optim i64 
    callproc       &pc_win64.pcl_genmcl 
    setargs                   0 0
    callfn         &pc_libmcl.getmclstr u64 
    pop            pc_win64.pcl_getasmstring.asmstr u64 
    push           pc_win64.pcl_getasmstring.asmstr u64 
    pushptr                   u64 
    setret                    u64 
    jump           #6078      
#6078: 
    retfn                     u64 
End


Proc pc_win64.pcl_writeexefile:: i64
    param          pc_win64.pcl_writeexefile.filename u64 
    param          pc_win64.pcl_writeexefile.optim i64 
    procentry                 
    setargs                   1 0
    push           pc_win64.pcl_writeexefile.optim i64 
    callproc       &pc_win64.pcl_genmcl 
    setargs                   3 0
    push           0          i64 
    push           pc_win64.pcl_writeexefile.optim i64 
    push           pc_win64.pcl_writeexefile.filename u64 
    callfn         &pc_win64.writeexefile i64 
    setret                    i64 
    jump           #6080      
#6080: 
    retfn                     i64 
End


Proc pc_win64.pcl_writedllfile:: i64
    param          pc_win64.pcl_writedllfile.filename u64 
    param          pc_win64.pcl_writedllfile.optim i64 
    procentry                 
    setargs                   1 0
    push           pc_win64.pcl_writedllfile.optim i64 
    callproc       &pc_win64.pcl_genmcl 
    setargs                   3 0
    push           1          i64 
    push           pc_win64.pcl_writedllfile.optim i64 
    push           pc_win64.pcl_writedllfile.filename u64 
    callfn         &pc_win64.writeexefile i64 
    setret                    i64 
    jump           #6082      
#6082: 
    retfn                     i64 
End


Proc pc_win64.writeexefile: i64
    param          pc_win64.writeexefile.filename u64 
    param          pc_win64.writeexefile.optim i64 
    param          pc_win64.writeexefile.gendll i64 
    local          pc_win64.writeexefile.asmfilename block:300 
    local          pc_win64.writeexefile.str block:300 
    procentry                 
    setargs                   0 0
    callproc       &pc_genss.genss 
    setargs                   0 0
    callproc       &pc_writeexe.initsectiontable 
    setargs                   3 0
    push           pc_win64.writeexefile.gendll i64 
    push           pc_win64.writeexefile.filename u64 
    push           0          u64 
    callproc       &pc_writeexe.genexe 
    setargs                   2 0
    push           pc_win64.writeexefile.gendll i64 
    push           pc_win64.writeexefile.filename u64 
    callproc       &pc_writeexe.writeexe 
    push           1          i64 
    setret                    i64 
    jump           #6084      
#6084: 
    retfn                     i64 
End


Proc pc_win64.oldwriteexefile: i64
    param          pc_win64.oldwriteexefile.filename u64 
    param          pc_win64.oldwriteexefile.optim i64 
    param          pc_win64.oldwriteexefile.gendll i64 
    local          pc_win64.oldwriteexefile.asmfilename block:300 
    local          pc_win64.oldwriteexefile.str block:300 
    procentry                 
    setargs                   2 0
    setargs                   2 0
    push           "asm"      u64 
    push           pc_win64.oldwriteexefile.filename u64 
    callfn         &mlibp.changeext u64 
    push           &pc_win64.oldwriteexefile.asmfilename 
    callproc       &strcpy    
    setargs                   2 0
    push           pc_win64.oldwriteexefile.optim i64 
    push           &pc_win64.oldwriteexefile.asmfilename 
    callfn         &pc_win64.pcl_writeasmfile i64 
    jumptrue       #6086      i64 
    push           0          i64 
    setret                    i64 
    jump           #6087      
#6086: 
    setargs                   1 0
    push           &pc_win64.oldwriteexefile.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "/m/aa # #" u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           &pc_win64.oldwriteexefile.asmfilename 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    startmult                 
    push           pc_win64.oldwriteexefile.gendll i64 
    jumpfalse      #6088      i64 
    push           "-dll"     u64 
    resetmult                 
    jump           #6089      
#6088: 
    push           "-exe"     u64 
    endmult                   
#6089: 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    startmult                 
    setargs                   1 0
    push           &pc_win64.oldwriteexefile.str 
    callfn         &system    i32 
    push           0          i64 
    jumpne         #6090      i64 
    push           1          i64 
    resetmult                 
    jump           #6091      
#6090: 
    push           0          i64 
    endmult                   
#6091: 
    setret                    i64 
    jump           #6087      
#6087: 
    retfn                     i64 
End


Proc pc_win64.writeasmfile:
    param          pc_win64.writeasmfile.filename u64 
    local          pc_win64.writeasmfile.asmstr u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.getmclstr u64 
    pop            pc_win64.writeasmfile.asmstr u64 
    setargs                   2 0
    push           pc_win64.writeasmfile.asmstr u64 
    push           pc_win64.writeasmfile.filename u64 
    callproc       &pc_libmcl.writegsfile 
    setargs                   1 0
    push           pc_win64.writeasmfile.asmstr u64 
    callproc       &mlibp.gs_free 
#6093: 
    retproc                   
End


Proc pc_win64.pcl_readrts:: i64
    param          pc_win64.pcl_readrts.filename u64 
    procentry                 
    push           pc_libpcl.maxuserlabel i64 
    jumpfalse      #6095      i64 
    push           pc_libpcl.maxuserlabel i64 
    pop            pc_libpcl.labelnooffset i64 
    jump           #6096      
#6095: 
    push           &pc_libpcl.labelno 
    incrload                  i64 1
    pop            pc_libpcl.labelnooffset i64 
#6096: 
    setargs                   0 0
    callfn         &pc_parse.parse_readrts i64 
    jumptrue       #6097      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "No RTS file found" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           0          i64 
    setret                    i64 
    jump           #6098      
#6097: 
    push           1          i64 
    setret                    i64 
    jump           #6098      
#6098: 
    retfn                     i64 
End


Proc pc_win64.pcl_endprog::
    param          pc_win64.pcl_endprog.fixup i64 
    param          pc_win64.pcl_endprog.dorts i64 
    procentry                 
    push           pc_win64.pcl_endprog.dorts i64 
    jumpfalse      #6100      i64 
    setargs                   1 0
    push           "rts.pcl"  u64 
    callproc       &pc_win64.pcl_readrts 
#6100: 
    setargs                   1 0
    push           pc_win64.pcl_endprog.fixup i64 
    callproc       &pc_libpcl.pcl_end 
#6101: 
    retproc                   
End


Proc pc_win64.pcl_showss::
    param          pc_win64.pcl_showss.filename u64 
    param          pc_win64.pcl_showss.fexe i64 
    local          pc_win64.pcl_showss.ssstr u64 
    procentry                 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_init 
    setargs                   1 0
    push           pc_win64.pcl_showss.fexe i64 
    callfn         &pc_writessx.writessdata u64 
    pop            pc_win64.pcl_showss.ssstr u64 
    setargs                   2 0
    push           pc_win64.pcl_showss.ssstr u64 
    push           pc_win64.pcl_showss.filename u64 
    callproc       &pc_libmcl.writegsfile 
#6103: 
    retproc                   
End


Proc pc_win64.pcl_writeclangfile::
    param          pc_win64.pcl_writeclangfile.filename u64 
    procentry                 
#6105: 
    retproc                   
End


Proc pci_mcl.axerror:
    param          pci_mcl.axerror.mess u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "MCL Error: #" u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           pci_mcl.axerror.mess u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#6107: 
    retproc                   
End


Proc pc_genmcl.genmcl:
    param          pc_genmcl.genmcl.optim i64 
    procentry                 
    push           pc_libpcl.mcldone i64 
    jumpfalse      #6109      i64 
    jump           #6110      
#6109: 
    setargs                   0 0
    callproc       &pc_genmcl.inithandlers 
    push           pc_genmcl.genmcl.optim i64 
    pop            pc_decls.optimflag i64 
    setargs                   0 0
    callproc       &pc_libmcl.mclinit 
    push           pc_libpcl.pcstart u64 
    pop            pc_genmcl.currpcl u64 
    push           pc_libpcl.labelno i64 
    pop            pci_mcl.mlabelno i64 
    push           0          i64 
    pop            pci_mcl.mseqno i64 
#6111: 
    setargs                   1 0
    push           pc_genmcl.currpcl u64 
    callproc       &pc_genmcl.convertpcl 
    push           &pc_genmcl.currpcl 
    incr                      u64 32
#6112: 
    push           pc_genmcl.currpcl u64 
    push           1          
    pushptroff                u8 1 0
    push           11         i64 
    jumpne         #6111      i64 
#6113: 
    setargs                   0 0
    callproc       &pc_libmcl.genabsneg 
    setargs                   0 0
    callproc       &pc_libmcl.genstringtable 
    setargs                   0 0
    callproc       &pc_libmcl.genrealtable 
    setargs                   0 0
    callproc       &pc_libmcl.genrtsproctable 
    setargs                   0 0
    callproc       &pc_libmcl.genfunctiontable 
    setargs                   3 0
    push           0          u64 
    push           0          u64 
    push           10         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           0          u64 
    push           10         i64 
    callproc       &pc_libmcl.genmc 
    push           1          i64 
    pop            pc_libpcl.mcldone i64 
#6110: 
    retproc                   
End


Proc pc_genmcl.convertpcl:
    param          pc_genmcl.convertpcl.p u64 
    local          pc_genmcl.convertpcl.str block:1256 
    local          pc_genmcl.convertpcl.ss u64 
    local          pc_genmcl.convertpcl.m i64 
    procentry                 
    push           pc_genmcl.convertpcl.p u64 
    push           24         
    pushptroff                u32 1 0
    pop            pci_mcl.mseqno i64 
    setargs                   1 0
    push           pc_genmcl.convertpcl.p u64 
    push           &pc_genmcl.px_handlertable 
    push           pc_genmcl.convertpcl.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callprocptr               
#6115: 
    retproc                   
End


Proc pc_genmcl.inithandlers:
    local          pc_genmcl.inithandlers.name u64 
    local          pc_genmcl.inithandlers.n i64 
    local          pc_genmcl.inithandlers.av_1 i64 
    local          pc_genmcl.inithandlers.av_2 i64 
    local          pc_genmcl.inithandlers.i i64 
    local          pc_genmcl.inithandlers.k i64 
    procentry                 
    push           pc_genmcl.inithandlers.initdone u8 
    jumpfalse      #6117      i64 
    jump           #6118      
#6117: 
    getnprocs                 i64 
    pop            pc_genmcl.inithandlers.n i64 
#6119: 
    push           1          i64 
    pop            pc_genmcl.inithandlers.i i64 
    push           pc_genmcl.inithandlers.n i64 
    push           1          i64 
    jumplt         #6120      i64 
#6121: 
    push           pc_genmcl.inithandlers.i i64 
    getprocname               i64 
    pop            pc_genmcl.inithandlers.name u64 
    setargs                   3 0
    push           3          i64 
    push           "px_"      u64 
    push           pc_genmcl.inithandlers.name u64 
    callfn         &mlibp.eqbytes i64 
    jumpfalse      #6122      i64 
#6123: 
    push           0          i64 
    pop            pc_genmcl.inithandlers.k i64 
    push           217        i64 
    pop            pc_genmcl.inithandlers.av_1 i64 
    push           pc_genmcl.inithandlers.av_1 i64 
    push           0          i64 
    jumplt         #6124      i64 
#6125: 
    setargs                   2 0
    push           pc_genmcl.inithandlers.name u64 
    push           3          i64 
    addrefoff                 u64 1 0
    push           &pc_tables.pclnames 
    push           pc_genmcl.inithandlers.k i64 
    pushptroff                u64 8 0
    push           1          i64 
    addrefoff                 u64 1 0
    callfn         &mlibp.eqstring i64 
    jumpfalse      #6126      i64 
    push           pc_genmcl.inithandlers.i i64 
    getprocaddr               i64 
    push           &pc_genmcl.px_handlertable 
    push           pc_genmcl.inithandlers.k i64 
    popptroff                 u64 8 0
    jump           #6127      
#6126: 
#6128: 
    forup          #6125      i64 1
    opnd           pc_genmcl.inithandlers.k 
    opnd           pc_genmcl.inithandlers.av_1 
#6124: 
    setargs                   2 0
    push           pc_genmcl.inithandlers.name u64 
    push           "Invalid handler name:" u64 
    callproc       &pc_genmcl.gerrorc 
#6127: 
#6122: 
#6129: 
    forup          #6121      i64 1
    opnd           pc_genmcl.inithandlers.i 
    opnd           pc_genmcl.inithandlers.n 
#6120: 
#6130: 
    push           0          i64 
    pop            pc_genmcl.inithandlers.i i64 
    push           217        i64 
    pop            pc_genmcl.inithandlers.av_2 i64 
    push           pc_genmcl.inithandlers.av_2 i64 
    push           0          i64 
    jumplt         #6131      i64 
#6132: 
    push           &pc_genmcl.px_handlertable 
    push           pc_genmcl.inithandlers.i i64 
    pushptroff                u64 8 0
    jumptrue       #6133      u64 
    push           &pc_genmcl.unimpl 
    push           &pc_genmcl.px_handlertable 
    push           pc_genmcl.inithandlers.i i64 
    popptroff                 u64 8 0
#6133: 
#6134: 
    forup          #6132      i64 1
    opnd           pc_genmcl.inithandlers.i 
    opnd           pc_genmcl.inithandlers.av_2 
#6131: 
    push           1          i64 
    pop            pc_genmcl.inithandlers.initdone u8 
#6118: 
    retproc                   
End


Proc pc_genmcl.unimpl:
    param          pc_genmcl.unimpl.p u64 
    local          pc_genmcl.unimpl.str block:300 
    procentry                 
    setargs                   1 0
    push           &pc_genmcl.unimpl.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "Unimplemented Opcode:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pc_tables.pclnames 
    push           pc_genmcl.unimpl.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           &pc_genmcl.unimpl.str 
    callproc       &pc_libmcl.mgencomment 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Unimplemented Opcode:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pc_tables.pclnames 
    push           pc_genmcl.unimpl.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#6136: 
    retproc                   
End


Proc pc_genmcl.gerrorc:
    param          pc_genmcl.gerrorc.mess u64 
    param          pc_genmcl.gerrorc.param u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "MCL Gen error:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_genmcl.gerrorc.mess u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           pc_genmcl.gerrorc.param u64 
    jumpfalse      #6138      u64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           ":"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_genmcl.gerrorc.param u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#6138: 
    push           1          i64 
    stop                      
#6139: 
    retproc                   
End


Proc pc_genmcl.px_zero:
    param          pc_genmcl.px_zero.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_zero.p u64 
    callproc       &pc_genmcl.unimpl 
#6141: 
    retproc                   
End


Proc pc_genmcl.px_nop:
    param          pc_genmcl.px_nop.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_nop.p u64 
    callproc       &pc_genmcl.unimpl 
#6143: 
    retproc                   
End


Proc pc_genmcl.px_stop:
    param          pc_genmcl.px_stop.p u64 
    local          pc_genmcl.px_stop.d u64 
    procentry                 
    setargs                   2 0
    push           11         i64 
    push           1          i64 
    callproc       &pc_stackmcl.loadparam 
    setargs                   1 0
    push           "exit"     u64 
    callfn         &pc_libpcl.pcl_makesymbol u64 
    pop            pc_genmcl.px_stop.d u64 
    push           1          u64 
    push           pc_genmcl.px_stop.d u64 
    push           46         
    addrefoff                 u64 1 0
    push           1          i64 
    popdotindex               u16 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_stop.d u64 
    callfn         &pc_libmcl.mgenmemaddr u64 
    push           22         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6145: 
    retproc                   
End


Proc pc_genmcl.px_comment:
    param          pc_genmcl.px_comment.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_comment.p u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &pc_libmcl.mgencomment 
#6147: 
    retproc                   
End


Proc pc_genmcl.px_importdll:
    param          pc_genmcl.px_importdll.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_importdll.p u64 
    callproc       &pc_genmcl.unimpl 
#6149: 
    retproc                   
End


Proc pc_genmcl.px_istatic:
    param          pc_genmcl.px_istatic.p u64 
    procentry                 
    setargs                   2 0
    push           pc_genmcl.px_istatic.p u64 
    push           16         
    pushptroff                i32 1 0
    push           73         i64 
    callproc       &pc_libmcl.setsegment 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_istatic.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmemaddr u64 
    push           6          i64 
    callproc       &pc_libmcl.genmc 
#6151: 
    retproc                   
End


Proc pc_genmcl.px_zstatic:
    param          pc_genmcl.px_zstatic.p u64 
    local          pc_genmcl.px_zstatic.d u64 
    procentry                 
    push           pc_genmcl.px_zstatic.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_genmcl.px_zstatic.d u64 
    setargs                   2 0
    push           pc_genmcl.px_zstatic.p u64 
    push           16         
    pushptroff                i32 1 0
    push           90         i64 
    callproc       &pc_libmcl.setsegment 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_zstatic.d u64 
    callfn         &pc_libmcl.mgenmemaddr u64 
    push           6          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_zstatic.p u64 
    push           4          
    pushptroff                i32 1 0
    callfn         &pc_libmcl.mgenint u64 
    push           124        i64 
    callproc       &pc_libmcl.genmc 
#6153: 
    retproc                   
End


Proc pc_genmcl.px_equiv:
    param          pc_genmcl.px_equiv.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_equiv.p u64 
    callproc       &pc_genmcl.unimpl 
#6155: 
    retproc                   
End


Proc pc_genmcl.px_procdef:
    param          pc_genmcl.px_procdef.p u64 
    local          pc_genmcl.px_procdef.name u64 
    procentry                 
    push           pc_genmcl.currpcl u64 
    pop            pci_mcl.procdefpcl u64 
    push           pc_genmcl.currpcl u64 
    push           8          
    pushptroff                u64 1 0
    pop            pci_mcl.procdef u64 
    push           pci_mcl.procdef u64 
    pushptr                   u64 
    pop            pc_genmcl.px_procdef.name u64 
    setargs                   2 0
    push           16         i64 
    push           67         i64 
    callproc       &pc_libmcl.setsegment 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.procdef u64 
    callfn         &pc_libmcl.mgenmemaddr u64 
    push           6          i64 
    callproc       &pc_libmcl.genmc 
    push           0          i64 
    store          pci_mcl.nparams i64 
    pop            pci_mcl.nlocals i64 
#6157: 
    retproc                   
End


Proc pc_genmcl.px_procentry:
    param          pc_genmcl.px_procentry.p u64 
    local          pc_genmcl.px_procentry.np i64 
    local          pc_genmcl.px_procentry.regoffset i64 
    local          pc_genmcl.px_procentry.offset i64 
    local          pc_genmcl.px_procentry.dreg i64 
    local          pc_genmcl.px_procentry.xreg i64 
    local          pc_genmcl.px_procentry.nregparams i64 
    local          pc_genmcl.px_procentry.nspill i64 
    local          pc_genmcl.px_procentry.hasequiv i64 
    local          pc_genmcl.px_procentry.ax u64 
    local          pc_genmcl.px_procentry.d u64 
    local          pc_genmcl.px_procentry.i i64 
    procentry                 
    push           0          i64 
    pop            pci_mcl.framebytes i64 
    push           0          i64 
    pop            pci_mcl.frameoffset i64 
    push           0          i64 
    pop            pci_mcl.paramoffset i64 
    push           0          i64 
    pop            pci_mcl.needstackframe i64 
    push           0          i64 
    store          pci_mcl.nxsaveregs i64 
    pop            pci_mcl.ndsaveregs i64 
    push           0          i64 
    pop            pci_mcl.ndsavepush i64 
    push           0          i64 
    store          pc_genmcl.px_procentry.nspill i64 
    pop            pc_genmcl.px_procentry.nregparams i64 
    push           0          i64 
    pop            pci_mcl.needshadow48 i64 
    push           0          i64 
    pop            pci_mcl.needshadow32 i64 
    push           0          i64 
    pop            pc_genmcl.px_procentry.hasequiv i64 
    push           pci_mcl.inf_assem i64 
    jumpfalse      #6159      i64 
    jump           #6160      
#6159: 
    push           pci_mcl.passno i64 
    push           2          i64 
    jumpne         #6161      i64 
    push           pci_mcl.inf_leafproc i64 
    jumpfalse      #6161      i64 
    push           11         i64 
    pop            pc_genmcl.px_procentry.dreg i64 
    push           1          i64 
    pop            pc_genmcl.px_procentry.xreg i64 
#6162: 
    push           1          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.nparams i64 
    push           1          i64 
    jumplt         #6163      i64 
#6164: 
    push           pc_genmcl.px_procentry.i i64 
    push           4          i64 
    jumple         #6165      i64 
    jump           #6163      
#6165: 
    push           &pci_mcl.paramdefs 
    push           pc_genmcl.px_procentry.i i64 
    pushptroff                u64 8 -8
    pop            pc_genmcl.px_procentry.d u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_procentry.d u64 
    push           16         
    pushptroff                u64 1 0
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6166      i64 0
    push           3          i64 
    casejumpeq     #6167      i64 0
    popstack                  i64 
    jump           #6168      
#6166: 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           2          i64 
    dotindex                  i64 
    jumptrue       #6169      u64 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           5          i64 
    dotindex                  i64 
    jumptrue       #6169      u64 
    push           pc_genmcl.px_procentry.d u64 
    push           49         
    pushptroff                i16 1 0
    jumpfalse      #6169      i64 
    push           pc_genmcl.px_procentry.dreg i64 
    push           pc_genmcl.px_procentry.d u64 
    push           48         
    popptroff                 u8 1 0
    push           1          i64 
    push           &pci_mcl.isregvar 
    push           pc_genmcl.px_procentry.dreg i64 
    popptroff                 u8 1 -1
    push           pc_genmcl.px_procentry.dreg i64 
    push           11         i64 
    jumpne         #6170      i64 
    push           1          i64 
    pop            pci_mcl.inf_r10used i64 
#6170: 
    push           pc_genmcl.px_procentry.dreg i64 
    push           12         i64 
    jumpne         #6171      i64 
    push           1          i64 
    pop            pci_mcl.inf_r11used i64 
#6171: 
    push           pc_genmcl.px_procentry.dreg i64 
    push           14         i64 
    jumpne         #6172      i64 
    push           1          i64 
    pop            pci_mcl.inf_r13used i64 
#6172: 
    push           &pc_genmcl.px_procentry.nregparams 
    incr                      i64 1
#6169: 
    jump           #6173      
#6167: 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           2          i64 
    dotindex                  i64 
    jumptrue       #6174      u64 
    push           pc_genmcl.px_procentry.d u64 
    push           49         
    pushptroff                i16 1 0
    jumpfalse      #6174      i64 
    push           pc_genmcl.px_procentry.xreg i64 
    push           pc_genmcl.px_procentry.d u64 
    push           48         
    popptroff                 u8 1 0
    push           1          i64 
    push           &pci_mcl.isxregvar 
    push           pc_genmcl.px_procentry.dreg i64 
    popptroff                 u8 1 -1
    push           &pc_genmcl.px_procentry.nregparams 
    incr                      i64 1
#6174: 
    jump           #6173      
#6168: 
#6173: 
    push           &pc_genmcl.px_procentry.dreg 
    incr                      i64 1
    push           &pc_genmcl.px_procentry.xreg 
    incr                      i64 1
#6175: 
    forup          #6164      i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.nparams 
#6163: 
#6161: 
    push           pci_mcl.passno i64 
    push           2          i64 
    jumpne         #6176      i64 
    push           10         i64 
    pop            pc_genmcl.px_procentry.dreg i64 
    push           16         i64 
    pop            pc_genmcl.px_procentry.xreg i64 
#6177: 
    push           1          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.nlocals i64 
    push           1          i64 
    jumplt         #6178      i64 
#6179: 
    push           &pci_mcl.localdefs 
    push           pc_genmcl.px_procentry.i i64 
    pushptroff                u64 8 -8
    pop            pc_genmcl.px_procentry.d u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_procentry.d u64 
    push           16         
    pushptroff                u64 1 0
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6180      i64 0
    push           3          i64 
    casejumpeq     #6181      i64 0
    popstack                  i64 
    jump           #6182      
#6180: 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           2          i64 
    dotindex                  i64 
    jumptrue       #6183      u64 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           5          i64 
    dotindex                  i64 
    jumptrue       #6183      u64 
    push           pc_genmcl.px_procentry.d u64 
    push           49         
    pushptroff                i16 1 0
    jumpfalse      #6183      i64 
    push           pc_genmcl.px_procentry.dreg i64 
    push           pci_mcl.inf_highreg i64 
    jumple         #6184      i64 
    push           pc_genmcl.px_procentry.dreg i64 
    push           4          i64 
    jumpge         #6185      i64 
#6184: 
    jump           #6186      
#6185: 
    push           pc_genmcl.px_procentry.dreg i64 
    push           &pci_mcl.dsaveregs 
    push           &pci_mcl.ndsaveregs 
    incrload                  i64 1
    popptroff                 i64 8 -8
    push           pc_genmcl.px_procentry.dreg i64 
    push           pc_genmcl.px_procentry.d u64 
    push           48         
    popptroff                 u8 1 0
    push           1          i64 
    push           &pci_mcl.isregvar 
    push           pc_genmcl.px_procentry.dreg i64 
    popptroff                 u8 1 -1
    push           &pc_genmcl.px_procentry.dreg 
    decr                      i64 1
#6183: 
    jump           #6187      
#6181: 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           2          i64 
    dotindex                  i64 
    jumptrue       #6188      u64 
    push           pc_genmcl.px_procentry.d u64 
    push           49         
    pushptroff                i16 1 0
    jumpfalse      #6188      i64 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           5          i64 
    dotindex                  i64 
    jumptrue       #6188      u64 
    push           pc_genmcl.px_procentry.xreg i64 
    push           pci_mcl.inf_highxreg i64 
    jumple         #6189      i64 
    push           pc_genmcl.px_procentry.xreg i64 
    push           7          i64 
    jumpge         #6190      i64 
#6189: 
    jump           #6186      
#6190: 
    push           pc_genmcl.px_procentry.xreg i64 
    push           &pci_mcl.xsaveregs 
    push           &pci_mcl.nxsaveregs 
    incrload                  i64 1
    popptroff                 i64 8 -8
    push           pc_genmcl.px_procentry.xreg i64 
    push           pc_genmcl.px_procentry.d u64 
    push           48         
    popptroff                 u8 1 0
    push           1          i64 
    push           &pci_mcl.isxregvar 
    push           pc_genmcl.px_procentry.dreg i64 
    popptroff                 u8 1 -1
    push           &pc_genmcl.px_procentry.xreg 
    decr                      i64 1
#6188: 
    jump           #6187      
#6182: 
#6187: 
#6186: 
    forup          #6179      i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.nlocals 
#6178: 
    push           pci_mcl.inf_leafproc i64 
    jumptrue       #6191      i64 
#6192: 
    push           1          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.nparams i64 
    push           1          i64 
    jumplt         #6193      i64 
#6194: 
    push           pc_genmcl.px_procentry.i i64 
    push           4          i64 
    jumple         #6195      i64 
    jump           #6193      
#6195: 
    push           &pci_mcl.paramdefs 
    push           pc_genmcl.px_procentry.i i64 
    pushptroff                u64 8 -8
    pop            pc_genmcl.px_procentry.d u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_procentry.d u64 
    push           16         
    pushptroff                u64 1 0
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6196      i64 0
    push           3          i64 
    casejumpeq     #6197      i64 0
    popstack                  i64 
    jump           #6198      
#6196: 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           2          i64 
    dotindex                  i64 
    jumptrue       #6199      u64 
    push           pc_genmcl.px_procentry.d u64 
    push           49         
    pushptroff                i16 1 0
    jumpfalse      #6199      i64 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           5          i64 
    dotindex                  i64 
    jumptrue       #6199      u64 
    push           pc_genmcl.px_procentry.dreg i64 
    push           pci_mcl.inf_highreg i64 
    jumple         #6200      i64 
    push           pc_genmcl.px_procentry.dreg i64 
    push           4          i64 
    jumpge         #6201      i64 
#6200: 
    jump           #6202      
#6201: 
    push           pc_genmcl.px_procentry.dreg i64 
    push           &pci_mcl.dsaveregs 
    push           &pci_mcl.ndsaveregs 
    incrload                  i64 1
    popptroff                 i64 8 -8
    push           pc_genmcl.px_procentry.dreg i64 
    push           pc_genmcl.px_procentry.d u64 
    push           48         
    popptroff                 u8 1 0
    push           1          i64 
    push           &pci_mcl.isregvar 
    push           pc_genmcl.px_procentry.dreg i64 
    popptroff                 u8 1 -1
    push           &pc_genmcl.px_procentry.dreg 
    decr                      i64 1
    push           &pc_genmcl.px_procentry.nregparams 
    incr                      i64 1
#6199: 
    jump           #6203      
#6197: 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           2          i64 
    dotindex                  i64 
    jumptrue       #6204      u64 
    push           pc_genmcl.px_procentry.d u64 
    push           49         
    pushptroff                i16 1 0
    jumpfalse      #6204      i64 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           5          i64 
    dotindex                  i64 
    jumptrue       #6204      u64 
    push           pc_genmcl.px_procentry.xreg i64 
    push           pci_mcl.inf_highxreg i64 
    jumple         #6205      i64 
    push           pc_genmcl.px_procentry.xreg i64 
    push           7          i64 
    jumpge         #6206      i64 
#6205: 
    jump           #6202      
#6206: 
    push           pc_genmcl.px_procentry.xreg i64 
    push           &pci_mcl.xsaveregs 
    push           &pci_mcl.nxsaveregs 
    incrload                  i64 1
    popptroff                 i64 8 -8
    push           pc_genmcl.px_procentry.xreg i64 
    push           pc_genmcl.px_procentry.d u64 
    push           48         
    popptroff                 u8 1 0
    push           1          i64 
    push           &pci_mcl.isxregvar 
    push           pc_genmcl.px_procentry.dreg i64 
    popptroff                 u8 1 -1
    push           &pc_genmcl.px_procentry.xreg 
    decr                      i64 1
    push           &pc_genmcl.px_procentry.nregparams 
    incr                      i64 1
#6204: 
    jump           #6203      
#6198: 
#6203: 
#6202: 
    forup          #6194      i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.nparams 
#6193: 
#6191: 
#6176: 
!skip::
#6160: 
#6207: 
    push           1          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.nparams i64 
    push           1          i64 
    jumplt         #6208      i64 
#6209: 
    push           &pci_mcl.paramdefs 
    push           pc_genmcl.px_procentry.i i64 
    pushptroff                u64 8 -8
    pop            pc_genmcl.px_procentry.d u64 
    push           pc_genmcl.px_procentry.d u64 
    push           48         
    pushptroff                u8 1 0
    jumptrue       #6210      i64 
    push           pc_genmcl.px_procentry.i i64 
    push           1          i64 
    jumple         #6211      i64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_procentry.d u64 
    push           16         
    pushptroff                u64 1 0
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #6211      i64 
    push           &pci_mcl.paramdefs 
    push           pc_genmcl.px_procentry.i i64 
    pushptroff                u64 8 -16
    push           pc_genmcl.px_procentry.d u64 
    jumpne         #6211      u64 
    jump           #6212      
#6211: 
    push           pci_mcl.paramoffset i64 
    push           16         i64 
    add                       i64 
    push           pc_genmcl.px_procentry.d u64 
    push           32         
    popptroff                 i32 1 0
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_procentry.d u64 
    push           32         
    pushptroff                i32 1 0
    callfn         &pc_libmcl.mgenint u64 
    setargs                   1 0
    setargs                   1 0
    push           pc_genmcl.px_procentry.d u64 
    callfn         &pc_libmcl.getfullname u64 
    callfn         &pc_libmcl.mgenname u64 
    push           7          i64 
    callproc       &pc_libmcl.genmc 
#6212: 
    jump           #6213      
#6210: 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_procentry.d u64 
    push           16         
    pushptroff                u64 1 0
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #6214      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_procentry.d u64 
    push           48         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   1 0
    setargs                   1 0
    push           pc_genmcl.px_procentry.d u64 
    callfn         &pc_libmcl.getfullname u64 
    callfn         &pc_libmcl.mgenname u64 
    push           8          i64 
    callproc       &pc_libmcl.genmc 
    jump           #6213      
#6214: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_procentry.d u64 
    push           48         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenxreg u64 
    setargs                   1 0
    setargs                   1 0
    push           pc_genmcl.px_procentry.d u64 
    callfn         &pc_libmcl.getfullname u64 
    callfn         &pc_libmcl.mgenname u64 
    push           8          i64 
    callproc       &pc_libmcl.genmc 
#6213: 
    push           &pci_mcl.paramoffset 
    push           8          i64 
    addto                     i64 
#6215: 
    forup          #6209      i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.nparams 
#6208: 
#6216: 
    push           4          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.inf_highreg i64 
    push           4          i64 
    jumplt         #6217      i64 
#6218: 
    push           pc_genmcl.px_procentry.i i64 
    push           &pci_mcl.dsaveregs 
    push           &pci_mcl.ndsaveregs 
    incrload                  i64 1
    popptroff                 i64 8 -8
#6219: 
    forup          #6218      i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.inf_highreg 
#6217: 
#6220: 
    push           7          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.inf_highxreg i64 
    push           7          i64 
    jumplt         #6221      i64 
#6222: 
    push           pc_genmcl.px_procentry.i i64 
    push           &pci_mcl.xsaveregs 
    push           &pci_mcl.nxsaveregs 
    incrload                  i64 1
    popptroff                 i64 8 -8
#6223: 
    forup          #6222      i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.inf_highxreg 
#6221: 
    push           pci_mcl.nparams i64 
    push           4          i64 
    jumple         #6224      i64 
    push           1          i64 
    pop            pci_mcl.needstackframe i64 
    push           4          i64 
    push           pc_genmcl.px_procentry.nregparams i64 
    sub                       i64 
    pop            pc_genmcl.px_procentry.nspill i64 
    jump           #6225      
#6224: 
    push           pci_mcl.ndsaveregs i64 
    pop            pci_mcl.ndsavepush i64 
    push           0          i64 
    pop            pci_mcl.ndsaveregs i64 
    push           pci_mcl.nparams i64 
    push           pc_genmcl.px_procentry.nregparams i64 
    sub                       i64 
    pop            pc_genmcl.px_procentry.nspill i64 
    push           pc_genmcl.px_procentry.nspill i64 
    jumpfalse      #6226      i64 
    push           1          i64 
    pop            pci_mcl.needstackframe i64 
#6226: 
#6225: 
#6227: 
    push           1          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.nlocals i64 
    push           1          i64 
    jumplt         #6228      i64 
#6229: 
    push           &pci_mcl.localdefs 
    push           pc_genmcl.px_procentry.i i64 
    pushptroff                u64 8 -8
    pop            pc_genmcl.px_procentry.d u64 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           6          i64 
    dotindex                  i64 
    jumpfalse      #6230      u64 
    push           1          i64 
    pop            pc_genmcl.px_procentry.hasequiv i64 
    jump           #6231      
#6230: 
    push           pc_genmcl.px_procentry.d u64 
    push           48         
    pushptroff                u8 1 0
    jumptrue       #6232      i64 
    push           &pci_mcl.frameoffset 
    setargs                   1 0
    push           pc_genmcl.px_procentry.d u64 
    push           16         
    pushptroff                u64 1 0
    push           4          
    pushptroff                i32 1 0
    callfn         &pc_libmcl.roundsizetg i64 
    subto                     i64 
    push           pci_mcl.frameoffset i64 
    push           pc_genmcl.px_procentry.d u64 
    push           32         
    popptroff                 i32 1 0
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_procentry.d u64 
    push           32         
    pushptroff                i32 1 0
    callfn         &pc_libmcl.mgenint u64 
    setargs                   1 0
    setargs                   1 0
    push           pc_genmcl.px_procentry.d u64 
    callfn         &pc_libmcl.getfullname u64 
    callfn         &pc_libmcl.mgenname u64 
    push           7          i64 
    callproc       &pc_libmcl.genmc 
    jump           #6231      
#6232: 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_procentry.d u64 
    push           16         
    pushptroff                u64 1 0
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #6233      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_procentry.d u64 
    push           48         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   1 0
    setargs                   1 0
    push           pc_genmcl.px_procentry.d u64 
    callfn         &pc_libmcl.getfullname u64 
    callfn         &pc_libmcl.mgenname u64 
    push           8          i64 
    callproc       &pc_libmcl.genmc 
    jump           #6231      
#6233: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_procentry.d u64 
    push           48         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenxreg u64 
    setargs                   1 0
    setargs                   1 0
    push           pc_genmcl.px_procentry.d u64 
    callfn         &pc_libmcl.getfullname u64 
    callfn         &pc_libmcl.mgenname u64 
    push           8          i64 
    callproc       &pc_libmcl.genmc 
#6231: 
#6234: 
    forup          #6229      i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.nlocals 
#6228: 
    push           pc_genmcl.px_procentry.hasequiv i64 
    jumpfalse      #6235      i64 
#6236: 
    push           1          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.nlocals i64 
    push           1          i64 
    jumplt         #6237      i64 
#6238: 
    push           &pci_mcl.localdefs 
    push           pc_genmcl.px_procentry.i i64 
    pushptroff                u64 8 -8
    pop            pc_genmcl.px_procentry.d u64 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           6          i64 
    dotindex                  i64 
    jumpfalse      #6239      u64 
    setargs                   2 0
    push           ""         u64 
    push           "D.ATVAR NOT READY" u64 
    callproc       &pc_libmcl.merror 
#6239: 
#6240: 
    forup          #6238      i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.nlocals 
#6237: 
#6235: 
    push           &pci_mcl.frameoffset 
    push           pci_mcl.ndsaveregs i64 
    push           8          i64 
    mul                       i64 
    subto                     i64 
    push           pci_mcl.frameoffset i64 
    pop            pci_mcl.dsaveoffset i64 
    push           &pci_mcl.frameoffset 
    push           pci_mcl.nxsaveregs i64 
    push           8          i64 
    mul                       i64 
    subto                     i64 
    push           pci_mcl.frameoffset i64 
    pop            pci_mcl.xsaveoffset i64 
    push           pci_mcl.frameoffset i64 
    neg                       i64 
    pop            pci_mcl.framebytes i64 
    push           pci_mcl.nlocals i64 
    jumptrue       #6241      i64 
    push           pci_mcl.nparams i64 
    jumpfalse      #6242      i64 
#6241: 
    push           pci_mcl.procdef u64 
    push           46         
    pushptroff                u16 1 0
    push           7          i64 
    dotindex                  i64 
    jumpfalse      #6242      u64 
    setargs                   2 0
    push           ""         u64 
    push           "params/locals in threaded?" u64 
    callproc       &pc_libmcl.merror 
#6242: 
    push           pci_mcl.framebytes i64 
    jumpfalse      #6243      i64 
    push           1          i64 
    pop            pci_mcl.needstackframe i64 
#6243: 
    jump           #6244      
#6245: 
    push           &pci_mcl.framebytes 
    incr                      i64 1
#6244: 
    push           pci_mcl.framebytes i64 
    push           15         i64 
    iand                      i64 
    jumptrue       #6245      i64 
#6246: 
    push           pci_mcl.needstackframe i64 
    jumpfalse      #6247      i64 
    push           pci_mcl.ndsavepush i64 
    push           0          i64 
    dotindex                  i64 
    jumpfalse      #6247      u64 
    push           &pci_mcl.framebytes 
    push           8          i64 
    addto                     i64 
#6247: 
    push           pci_mcl.needstackframe i64 
    jumpfalse      #6248      i64 
    push           pci_mcl.inf_leafproc i64 
    jumptrue       #6248      i64 
    push           &pci_mcl.framebytes 
    push           32         i64 
    addto                     i64 
#6248: 
    push           pci_mcl.needstackframe i64 
    jumpfalse      #6249      i64 
    push           pci_mcl.ndsavepush i64 
    jumpfalse      #6249      i64 
    push           1          i64 
    pop            pci_mcl.needshadow48 i64 
#6249: 
    push           pci_mcl.needstackframe i64 
    jumptrue       #6250      i64 
    push           pci_mcl.inf_leafproc i64 
    jumptrue       #6250      i64 
    push           pci_mcl.procdef u64 
    push           46         
    pushptroff                u16 1 0
    push           7          i64 
    dotindex                  i64 
    jumptrue       #6250      u64 
    startmult                 
    push           pci_mcl.ndsavepush i64 
    push           0          i64 
    dotindex                  i64 
    jumpfalse      #6251      u64 
    push           32         i64 
    resetmult                 
    jump           #6252      
#6251: 
    push           40         i64 
    endmult                   
#6252: 
    pop            pci_mcl.needshadow32 i64 
#6250: 
#6253: 
    push           1          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.ndsavepush i64 
    push           1          i64 
    jumplt         #6254      i64 
#6255: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           &pci_mcl.dsaveregs 
    push           pc_genmcl.px_procentry.i i64 
    pushptroff                i64 8 -8
    callfn         &pc_libmcl.mgenreg u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
#6256: 
    forup          #6255      i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.ndsavepush 
#6254: 
    push           pci_mcl.needshadow48 i64 
    jumpfalse      #6257      i64 
    setargs                   1 0
    push           48         i64 
    callproc       &pc_stackmcl.pushstack 
#6257: 
    push           pci_mcl.needstackframe i64 
    jumpfalse      #6258      i64 
    setargs                   3 0
    push           0          u64 
    push           pci_mcl.dframeopnd u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pci_mcl.dstackopnd u64 
    push           pci_mcl.dframeopnd u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           pci_mcl.framebytes i64 
    jumpfalse      #6259      i64 
    setargs                   1 0
    push           pci_mcl.framebytes i64 
    callproc       &pc_stackmcl.pushstack 
#6259: 
    jump           #6260      
#6258: 
    push           pci_mcl.needshadow32 i64 
    jumpfalse      #6261      i64 
    setargs                   1 0
    push           pci_mcl.needshadow32 i64 
    callproc       &pc_stackmcl.pushstack 
#6261: 
#6260: 
    push           pci_mcl.dsaveoffset i64 
    pop            pc_genmcl.px_procentry.offset i64 
#6262: 
    push           1          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.ndsaveregs i64 
    push           1          i64 
    jumplt         #6263      i64 
#6264: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           &pci_mcl.dsaveregs 
    push           pc_genmcl.px_procentry.i i64 
    pushptroff                i64 8 -8
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           8          i64 
    push           pc_genmcl.px_procentry.offset i64 
    push           1          i64 
    push           0          i64 
    push           15         i64 
    callfn         &pc_libmcl.mgenindex u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_genmcl.px_procentry.offset 
    push           8          i64 
    addto                     i64 
#6265: 
    forup          #6264      i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.ndsaveregs 
#6263: 
    push           pci_mcl.xsaveoffset i64 
    pop            pc_genmcl.px_procentry.offset i64 
#6266: 
    push           1          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.nxsaveregs i64 
    push           1          i64 
    jumplt         #6267      i64 
#6268: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           &pci_mcl.xsaveregs 
    push           pc_genmcl.px_procentry.i i64 
    pushptroff                i64 8 -8
    callfn         &pc_libmcl.mgenxreg u64 
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           8          i64 
    push           pc_genmcl.px_procentry.offset i64 
    push           1          i64 
    push           0          i64 
    push           15         i64 
    callfn         &pc_libmcl.mgenindex u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_genmcl.px_procentry.offset 
    push           8          i64 
    addto                     i64 
#6269: 
    forup          #6268      i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.nxsaveregs 
#6267: 
    push           16         i64 
    pop            pc_genmcl.px_procentry.offset i64 
    push           0          i64 
    pop            pc_genmcl.px_procentry.regoffset i64 
#6270: 
    push           1          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.nparams i64 
    push           1          i64 
    jumplt         #6271      i64 
#6272: 
    push           pc_genmcl.px_procentry.regoffset i64 
    push           3          i64 
    jumple         #6273      i64 
    jump           #6271      
#6273: 
    push           &pci_mcl.paramdefs 
    push           pc_genmcl.px_procentry.i i64 
    pushptroff                u64 8 -8
    pop            pc_genmcl.px_procentry.d u64 
    push           pc_genmcl.px_procentry.d u64 
    push           48         
    pushptroff                u8 1 0
    jumptrue       #6274      i64 
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           8          i64 
    push           pc_genmcl.px_procentry.offset i64 
    push           1          i64 
    push           0          i64 
    push           15         i64 
    callfn         &pc_libmcl.mgenindex u64 
    pop            pc_genmcl.px_procentry.ax u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_procentry.d u64 
    push           16         
    pushptroff                u64 1 0
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           3          i64 
    casejumpeq     #6275      i64 0
    push           2          i64 
    casejumpeq     #6276      i64 0
    popstack                  i64 
    jump           #6277      
#6275: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    push           pc_genmcl.px_procentry.regoffset i64 
    add                       i64 
    callfn         &pc_libmcl.mgenxreg u64 
    push           pc_genmcl.px_procentry.ax u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6278      
#6276: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    push           pc_genmcl.px_procentry.regoffset i64 
    add                       i64 
    callfn         &pc_libmcl.mgenxreg u64 
    setargs                   2 0
    push           4          i64 
    push           pc_genmcl.px_procentry.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6278      
#6277: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_procentry.regoffset i64 
    push           11         i64 
    add                       i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           pc_genmcl.px_procentry.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
#6278: 
    jump           #6279      
#6274: 
    push           pc_genmcl.px_procentry.d u64 
    push           48         
    pushptroff                u8 1 0
    jumpfalse      #6280      i64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_procentry.d u64 
    push           16         
    pushptroff                u64 1 0
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           3          i64 
    casejumpeq     #6281      i64 0
    push           1          i64 
    casejumpeq     #6282      i64 0
    popstack                  i64 
    jump           #6283      
#6281: 
    push           pc_genmcl.px_procentry.d u64 
    push           48         
    pushptroff                u8 1 0
    push           1          i64 
    push           pc_genmcl.px_procentry.regoffset i64 
    add                       i64 
    jumpeq         #6284      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    push           pc_genmcl.px_procentry.regoffset i64 
    add                       i64 
    callfn         &pc_libmcl.mgenxreg u64 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_procentry.d u64 
    push           48         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenxreg u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
#6284: 
    jump           #6285      
#6282: 
    push           pc_genmcl.px_procentry.d u64 
    push           48         
    pushptroff                u8 1 0
    push           11         i64 
    push           pc_genmcl.px_procentry.regoffset i64 
    add                       i64 
    jumpeq         #6286      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_procentry.regoffset i64 
    push           11         i64 
    add                       i64 
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_procentry.d u64 
    push           48         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
#6286: 
    jump           #6285      
#6283: 
#6285: 
#6280: 
#6279: 
    push           &pc_genmcl.px_procentry.offset 
    push           8          i64 
    addto                     i64 
    push           &pc_genmcl.px_procentry.regoffset 
    incr                      i64 1
#6287: 
    forup          #6272      i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.nparams 
#6271: 
#6288: 
    retproc                   
End


Proc pc_genmcl.px_endproc:
    param          pc_genmcl.px_endproc.p u64 
    procentry                 
    setargs                   3 0
    push           0          u64 
    push           0          u64 
    push           2          i64 
    callproc       &pc_libmcl.genmc 
#6290: 
    retproc                   
End


Proc pc_genmcl.px_endprogram:
    param          pc_genmcl.px_endprogram.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_endprogram.p u64 
    callproc       &pc_genmcl.unimpl 
#6292: 
    retproc                   
End


Proc pc_genmcl.px_extproc:
    param          pc_genmcl.px_extproc.p u64 
    procentry                 
#6294: 
    retproc                   
End


Proc pc_genmcl.px_extparam:
    param          pc_genmcl.px_extparam.p u64 
    procentry                 
#6296: 
    retproc                   
End


Proc pc_genmcl.px_extvariadics:
    param          pc_genmcl.px_extvariadics.p u64 
    procentry                 
#6298: 
    retproc                   
End


Proc pc_genmcl.px_endextproc:
    param          pc_genmcl.px_endextproc.p u64 
    procentry                 
#6300: 
    retproc                   
End


Proc pc_genmcl.px_local:
    param          pc_genmcl.px_local.p u64 
    procentry                 
    push           pci_mcl.nlocals i64 
    push           256        i64 
    jumplt         #6302      i64 
    setargs                   2 0
    push           ""         u64 
    push           "Too many locals" u64 
    callproc       &pc_libmcl.merror 
#6302: 
    push           &pci_mcl.nlocals 
    incr                      i64 1
    push           &pc_tables.pcat 
    push           pc_genmcl.px_local.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6303      i64 0
    push           3          i64 
    casejumpeq     #6304      i64 0
    popstack                  i64 
    jump           #6305      
#6303: 
    push           &pci_mcl.inf_proclocals 
    incr                      i64 1
    jump           #6306      
#6304: 
    push           &pci_mcl.inf_procxlocals 
    incr                      i64 1
    jump           #6306      
#6305: 
#6306: 
    push           pc_genmcl.px_local.p u64 
    push           8          
    pushptroff                u64 1 0
    push           &pci_mcl.localdefs 
    push           pci_mcl.nlocals i64 
    popptroff                 u64 8 -8
#6307: 
    retproc                   
End


Proc pc_genmcl.px_param:
    param          pc_genmcl.px_param.p u64 
    procentry                 
    push           pci_mcl.nparams i64 
    push           32         i64 
    jumplt         #6309      i64 
    setargs                   2 0
    push           ""         u64 
    push           "Too many params" u64 
    callproc       &pc_libmcl.merror 
#6309: 
    push           &pci_mcl.nparams 
    incr                      i64 1
    push           pc_genmcl.px_param.p u64 
    push           8          
    pushptroff                u64 1 0
    push           &pci_mcl.paramdefs 
    push           pci_mcl.nparams i64 
    popptroff                 u64 8 -8
    push           &pc_tables.pcat 
    push           pc_genmcl.px_param.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #6310      i64 
    push           &pci_mcl.nparams 
    incr                      i64 1
    push           pc_genmcl.px_param.p u64 
    push           8          
    pushptroff                u64 1 0
    push           &pci_mcl.paramdefs 
    push           pci_mcl.nparams i64 
    popptroff                 u64 8 -8
#6310: 
#6311: 
    retproc                   
End


Proc pc_genmcl.px_label:
    param          pc_genmcl.px_label.p u64 
    procentry                 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_label.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
#6313: 
    retproc                   
End


Proc pc_genmcl.px_labelname:
    param          pc_genmcl.px_labelname.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_labelname.p u64 
    callproc       &pc_genmcl.unimpl 
#6315: 
    retproc                   
End


Proc pc_genmcl.px_push:
    param          pc_genmcl.px_push.p u64 
    procentry                 
    push           pc_genmcl.px_push.p u64 
    pushptr                   u8 
    push           1          i64 
    casejumpeq     #6317      i64 0
    push           2          i64 
    casejumpeq     #6318      i64 0
    push           4          i64 
    casejumpeq     #6319      i64 0
    push           5          i64 
    casejumpeq     #6320      i64 0
    push           7          i64 
    casejumpeq     #6321      i64 0
    push           8          i64 
    casejumpeq     #6322      i64 0
    push           6          i64 
    casejumpeq     #6323      i64 0
    popstack                  i64 
    jump           #6324      
#6317: 
    setargs                   1 0
    push           pc_genmcl.px_push.p u64 
    callproc       &pc_stackmcl.addmem 
    jump           #6325      
#6318: 
    setargs                   1 0
    push           pc_genmcl.px_push.p u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &pc_stackmcl.addmemaddr 
    jump           #6325      
#6319: 
    setargs                   1 0
    push           pc_genmcl.px_push.p u64 
    push           8          
    pushptroff                i64 1 0
    callproc       &pc_stackmcl.addint 
    jump           #6325      
#6320: 
    setargs                   1 0
    push           pc_genmcl.px_push.p u64 
    push           8          
    pushptroff                r64 1 0
    callproc       &pc_stackmcl.addreal 
    jump           #6325      
#6321: 
    setargs                   1 0
    push           pc_genmcl.px_push.p u64 
    push           8          
    pushptroff                r32 1 0
    fwiden                    r64 r32 
    callproc       &pc_stackmcl.addreal32 
    jump           #6325      
#6322: 
    setargs                   1 0
    push           pc_genmcl.px_push.p u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &pc_stackmcl.addstring 
    jump           #6325      
#6323: 
    setargs                   1 0
    push           pc_genmcl.px_push.p u64 
    push           8          
    addrefoff                 u64 1 0
    callproc       &pc_stackmcl.addint128 
    jump           #6325      
#6324: 
    setargs                   2 0
    push           &pc_tables.opndnames 
    push           pc_genmcl.px_push.p u64 
    pushptr                   u8 
    pushptroff                u64 8 0
    push           "push"     u64 
    callproc       &pc_libmcl.merror 
#6325: 
#6326: 
    retproc                   
End


Proc pc_genmcl.px_pop:
    param          pc_genmcl.px_pop.p u64 
    local          pc_genmcl.px_pop.ax u64 
    local          pc_genmcl.px_pop.bx u64 
    local          pc_genmcl.px_pop.i i64 
    procentry                 
    push           pc_genmcl.px_pop.p u64 
    pushptr                   u8 
    push           1          i64 
    casejumpeq     #6328      i64 0
    popstack                  i64 
    jump           #6329      
#6328: 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_pop.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6330      i64 0
    push           3          i64 
    casejumpeq     #6331      i64 0
    push           2          i64 
    casejumpeq     #6332      i64 0
    push           5          i64 
    casejumpeq     #6333      i64 0
    push           4          i64 
    casejumpeq     #6334      i64 0
    push           6          i64 
    casejumpeq     #6335      i64 0
    popstack                  i64 
    jump           #6336      
#6330: 
#6337: 
    push           1          i64 
    pop            pc_genmcl.px_pop.i i64 
    push           pci_mcl.noperands i64 
    push           1          i64 
    jumplt         #6338      i64 
#6339: 
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.px_pop.i i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           3          i64 
    casejumpeq     #6340      i64 0
    push           5          i64 
    casejumpeq     #6341      i64 0
    popstack                  i64 
    jump           #6342      
#6340: 
    jump           #6338      
    jump           #6343      
#6341: 
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.px_pop.i i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    push           pc_genmcl.px_pop.p u64 
    push           8          
    pushptroff                u64 1 0
    jumpne         #6344      u64 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_pop.i i64 
    callproc       &pc_stackmcl.genopnd_ld 
#6344: 
    jump           #6343      
#6342: 
#6343: 
#6345: 
    forup          #6339      i64 1
    opnd           pc_genmcl.px_pop.i 
    opnd           pci_mcl.noperands 
#6338: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    setargs                   1 0
    push           pc_genmcl.px_pop.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6346      
#6331: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    setargs                   1 0
    push           pc_genmcl.px_pop.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6346      
#6332: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    setargs                   1 0
    push           pc_genmcl.px_pop.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6346      
#6333: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    setargs                   1 0
    push           pc_genmcl.px_pop.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_genmcl.px_pop.p u64 
    push           1          
    pushptroff                u8 1 0
    push           23         i64 
    jumpeq         #6347      i64 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6347: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    setargs                   1 0
    push           pc_genmcl.px_pop.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmemhigh u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_genmcl.px_pop.p u64 
    push           1          
    pushptroff                u8 1 0
    push           23         i64 
    jumpeq         #6348      i64 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6348: 
    jump           #6349      
    jump           #6346      
#6334: 
    setargs                   3 0
    setargs                   2 0
    push           pc_genmcl.px_pop.p u64 
    push           4          
    pushptroff                i32 1 0
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    setargs                   1 0
    push           pc_genmcl.px_pop.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6346      
#6335: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.px_pop.bx u64 
    setargs                   1 0
    push           pc_genmcl.px_pop.p u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &pc_stackmcl.addmemaddr 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.px_pop.ax u64 
    setargs                   3 0
    push           pc_genmcl.px_pop.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_genmcl.px_pop.bx u64 
    push           pc_genmcl.px_pop.ax u64 
    callproc       &pc_libmcl.copyblock 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #6346      
#6336: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "POPMEM"   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_genmcl.px_pop.p u64 
    push           3          
    pushptroff                u8 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#6346: 
    jump           #6350      
#6329: 
    setargs                   2 0
    push           pc_genmcl.px_pop.p u64 
    pushptr                   u8 
    push           "POP"      u64 
    callproc       &pc_libmcl.merroropnd 
#6350: 
    push           pc_genmcl.px_pop.p u64 
    push           1          
    pushptroff                u8 1 0
    push           23         i64 
    jumpeq         #6351      i64 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6351: 
#6349: 
    retproc                   
End


Proc pc_genmcl.px_store:
    param          pc_genmcl.px_store.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_store.p u64 
    callproc       &pc_genmcl.px_pop 
#6353: 
    retproc                   
End


Proc pc_genmcl.px_pushnc:
    param          pc_genmcl.px_pushnc.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_pushnc.p u64 
    callproc       &pc_genmcl.unimpl 
#6355: 
    retproc                   
End


Proc pc_genmcl.px_opnd:
    param          pc_genmcl.px_opnd.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_opnd.p u64 
    callproc       &pc_genmcl.unimpl 
#6357: 
    retproc                   
End


Proc pc_genmcl.px_type:
    param          pc_genmcl.px_type.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_type.p u64 
    callproc       &pc_genmcl.unimpl 
#6359: 
    retproc                   
End


Proc pc_genmcl.px_pushptroff:
    param          pc_genmcl.px_pushptroff.p u64 
    local          pc_genmcl.px_pushptroff.ax u64 
    local          pc_genmcl.px_pushptroff.bx u64 
    local          pc_genmcl.px_pushptroff.cx u64 
    local          pc_genmcl.px_pushptroff.fx u64 
    local          pc_genmcl.px_pushptroff.m i64 
    procentry                 
    push           pc_genmcl.px_pushptroff.p u64 
    push           3          
    pushptroff                u8 1 0
    pop            pc_genmcl.px_pushptroff.m i64 
    setargs                   1 0
    push           pc_genmcl.px_pushptroff.p u64 
    callfn         &pc_genmcl.do_addrmode u64 
    pop            pc_genmcl.px_pushptroff.cx u64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #6361      i64 
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           1          
    popptroff                 u8 1 0
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
#6361: 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_pushptroff.ax u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_pushptroff.m i64 
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6362      i64 0
    push           3          i64 
    casejumpeq     #6363      i64 0
    push           2          i64 
    casejumpeq     #6364      i64 0
    push           4          i64 
    casejumpeq     #6365      i64 0
    push           5          i64 
    casejumpeq     #6366      i64 0
    push           6          i64 
    casejumpeq     #6367      i64 0
    popstack                  i64 
    jump           #6368      
#6362: 
    setargs                   3 0
    push           pc_genmcl.px_pushptroff.cx u64 
    push           pc_genmcl.px_pushptroff.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6369      
#6363: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_x64 
    setargs                   2 0
    push           3          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_pushptroff.fx u64 
    setargs                   3 0
    push           pc_genmcl.px_pushptroff.cx u64 
    push           pc_genmcl.px_pushptroff.fx u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #6369      
#6364: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_x32 
    setargs                   2 0
    push           3          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_pushptroff.fx u64 
    setargs                   3 0
    setargs                   2 0
    push           4          i64 
    push           pc_genmcl.px_pushptroff.cx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           pc_genmcl.px_pushptroff.fx u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #6369      
#6365: 
    push           pc_genmcl.px_pushptroff.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_genmcl.px_pushptroff.cx u64 
    push           8          
    popptroff                 u8 1 0
    setargs                   3 0
    push           pc_genmcl.px_pushptroff.cx u64 
    push           pc_genmcl.px_pushptroff.ax u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_genmcl.px_pushptroff.m i64 
    pushptroff                u8 1 0
    jumpfalse      #6370      i64 
    push           19         i64 
    resetmult                 
    jump           #6371      
#6370: 
    push           20         i64 
    endmult                   
#6371: 
    callproc       &pc_libmcl.genmc 
    jump           #6369      
#6366: 
    setargs                   0 0
    callfn         &pc_stackmcl.genopnd_d64 u64 
    pop            pc_genmcl.px_pushptroff.bx u64 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   2 0
    push           3          i64 
    push           2          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   3 0
    setargs                   3 0
    push           8          i64 
    push           8          i64 
    push           pc_genmcl.px_pushptroff.cx u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           pc_genmcl.px_pushptroff.bx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_pushptroff.cx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           pc_genmcl.px_pushptroff.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.setwideopnd 
    jump           #6372      
    jump           #6369      
#6367: 
    setargs                   3 0
    push           pc_genmcl.px_pushptroff.cx u64 
    push           pc_genmcl.px_pushptroff.ax u64 
    push           15         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6369      
#6368: 
    setargs                   2 0
    push           pc_genmcl.px_pushptroff.m i64 
    push           "pushptroff" u64 
    callproc       &pc_libmcl.merrort 
#6369: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6372: 
    retproc                   
End


Proc pc_genmcl.px_popptroff:
    param          pc_genmcl.px_popptroff.p u64 
    local          pc_genmcl.px_popptroff.ax u64 
    local          pc_genmcl.px_popptroff.bx u64 
    local          pc_genmcl.px_popptroff.cx u64 
    local          pc_genmcl.px_popptroff.px u64 
    local          pc_genmcl.px_popptroff.m i64 
    procentry                 
    push           pc_genmcl.px_popptroff.p u64 
    push           3          
    pushptroff                u8 1 0
    pop            pc_genmcl.px_popptroff.m i64 
    setargs                   1 0
    push           pc_genmcl.px_popptroff.p u64 
    callfn         &pc_genmcl.do_addrmode u64 
    pop            pc_genmcl.px_popptroff.px u64 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_popptroff.cx u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_popptroff.m i64 
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6374      i64 0
    push           3          i64 
    casejumpeq     #6375      i64 0
    push           2          i64 
    casejumpeq     #6376      i64 0
    push           4          i64 
    casejumpeq     #6377      i64 0
    push           5          i64 
    casejumpeq     #6378      i64 0
    push           6          i64 
    casejumpeq     #6379      i64 0
    popstack                  i64 
    jump           #6380      
#6374: 
    setargs                   3 0
    push           pc_genmcl.px_popptroff.cx u64 
    push           pc_genmcl.px_popptroff.px u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6381      
#6375: 
    setargs                   3 0
    push           pc_genmcl.px_popptroff.cx u64 
    push           pc_genmcl.px_popptroff.px u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6381      
#6376: 
    setargs                   3 0
    push           pc_genmcl.px_popptroff.cx u64 
    setargs                   2 0
    push           4          i64 
    push           pc_genmcl.px_popptroff.px u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6381      
#6377: 
    push           pc_genmcl.px_popptroff.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_genmcl.px_popptroff.px u64 
    push           8          
    popptroff                 u8 1 0
    setargs                   3 0
    setargs                   2 0
    push           pc_genmcl.px_popptroff.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_genmcl.px_popptroff.cx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           pc_genmcl.px_popptroff.px u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6381      
#6378: 
    setargs                   3 0
    push           pc_genmcl.px_popptroff.cx u64 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_popptroff.px u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           4          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    setargs                   3 0
    push           8          i64 
    push           8          i64 
    push           pc_genmcl.px_popptroff.px u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6381      
#6379: 
    setargs                   3 0
    push           pc_genmcl.px_popptroff.p u64 
    push           4          
    pushptroff                i32 1 0
    setargs                   2 0
    push           0          i64 
    push           pc_genmcl.px_popptroff.cx u64 
    callfn         &pc_libmcl.makeopndind u64 
    push           pc_genmcl.px_popptroff.px u64 
    callproc       &pc_libmcl.copyblock 
    jump           #6381      
#6380: 
    setargs                   2 0
    push           pc_genmcl.px_popptroff.m i64 
    push           "popptroff " u64 
    callproc       &pc_libmcl.merrort 
#6381: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    push           pc_genmcl.px_popptroff.p u64 
    push           1          
    pushptroff                u8 1 0
    push           31         i64 
    jumpne         #6382      i64 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_popptroff.m i64 
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #6383      i64 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6383: 
#6382: 
#6384: 
    retproc                   
End


Proc pc_genmcl.px_storeptroff:
    param          pc_genmcl.px_storeptroff.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_storeptroff.p u64 
    callproc       &pc_genmcl.px_popptroff 
#6386: 
    retproc                   
End


Proc pc_genmcl.px_pushptr:
    param          pc_genmcl.px_pushptr.p u64 
    local          pc_genmcl.px_pushptr.ax u64 
    local          pc_genmcl.px_pushptr.px u64 
    local          pc_genmcl.px_pushptr.cx u64 
    local          pc_genmcl.px_pushptr.fx u64 
    local          pc_genmcl.px_pushptr.bx u64 
    local          pc_genmcl.px_pushptr.m i64 
    procentry                 
    push           pc_genmcl.px_pushptr.p u64 
    push           3          
    pushptroff                u8 1 0
    pop            pc_genmcl.px_pushptr.m i64 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.isregvaropnd i64 
    jumpfalse      #6388      i64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_pushptr.m i64 
    pushptroff                u8 1 0
    push           6          i64 
    jumpeq         #6388      i64 
    setargs                   3 0
    push           0          i64 
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenireg u64 
    pop            pc_genmcl.px_pushptr.cx u64 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_genmcl.makeregopnd u64 
    pop            pc_genmcl.px_pushptr.ax u64 
    jump           #6389      
#6388: 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           11         i64 
    jumpne         #6390      i64 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    pop            pc_genmcl.px_pushptr.cx u64 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_genmcl.makeregopnd u64 
    pop            pc_genmcl.px_pushptr.ax u64 
    jump           #6389      
#6390: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_pushptr.ax u64 
    setargs                   2 0
    push           0          i64 
    push           pc_genmcl.px_pushptr.ax u64 
    callfn         &pc_libmcl.makeopndind u64 
    pop            pc_genmcl.px_pushptr.cx u64 
#6389: 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_pushptr.m i64 
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6391      i64 0
    push           4          i64 
    casejumpeq     #6392      i64 0
    push           3          i64 
    casejumpeq     #6393      i64 0
    push           2          i64 
    casejumpeq     #6394      i64 0
    push           5          i64 
    casejumpeq     #6395      i64 0
    push           6          i64 
    casejumpeq     #6396      i64 0
    popstack                  i64 
    jump           #6397      
#6391: 
    setargs                   3 0
    push           pc_genmcl.px_pushptr.cx u64 
    push           pc_genmcl.px_pushptr.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6398      
#6392: 
    setargs                   3 0
    setargs                   2 0
    push           pc_genmcl.px_pushptr.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_genmcl.px_pushptr.cx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           pc_genmcl.px_pushptr.ax u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_genmcl.px_pushptr.m i64 
    pushptroff                u8 1 0
    jumpfalse      #6399      i64 
    push           19         i64 
    resetmult                 
    jump           #6400      
#6399: 
    push           20         i64 
    endmult                   
#6400: 
    callproc       &pc_libmcl.genmc 
    jump           #6398      
#6393: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_x64 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_pushptr.fx u64 
    setargs                   3 0
    push           pc_genmcl.px_pushptr.cx u64 
    push           pc_genmcl.px_pushptr.fx u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #6398      
#6394: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_x32 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_pushptr.fx u64 
    setargs                   3 0
    setargs                   2 0
    push           4          i64 
    push           pc_genmcl.px_pushptr.cx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           pc_genmcl.px_pushptr.fx u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #6398      
#6395: 
    setargs                   0 0
    callfn         &pc_stackmcl.genopnd_d64 u64 
    pop            pc_genmcl.px_pushptr.bx u64 
    setargs                   3 0
    push           pc_genmcl.px_pushptr.cx u64 
    push           pc_genmcl.px_pushptr.bx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   3 0
    push           0          i64 
    push           8          i64 
    push           pc_genmcl.px_pushptr.cx u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           pc_genmcl.px_pushptr.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.setwideopnd 
    jump           #6398      
#6396: 
    jump           #6398      
#6397: 
    setargs                   1 0
    push           "****PUSHPTR" u64 
    callproc       &pc_libmcl.mgencomment 
#6398: 
#6401: 
    retproc                   
End


Proc pc_genmcl.px_popptr:
    param          pc_genmcl.px_popptr.p u64 
    local          pc_genmcl.px_popptr.ax u64 
    local          pc_genmcl.px_popptr.bx u64 
    local          pc_genmcl.px_popptr.cx u64 
    local          pc_genmcl.px_popptr.px u64 
    local          pc_genmcl.px_popptr.m i64 
    procentry                 
    push           pc_genmcl.px_popptr.p u64 
    push           3          
    pushptroff                u8 1 0
    pop            pc_genmcl.px_popptr.m i64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_popptr.bx u64 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.isregvaropnd i64 
    jumpfalse      #6403      i64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_popptr.m i64 
    pushptroff                u8 1 0
    push           6          i64 
    jumpeq         #6403      i64 
    setargs                   3 0
    push           0          i64 
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenireg u64 
    pop            pc_genmcl.px_popptr.ax u64 
    jump           #6404      
#6403: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.px_popptr.ax u64 
#6404: 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_popptr.m i64 
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6405      i64 0
    push           4          i64 
    casejumpeq     #6406      i64 0
    push           3          i64 
    casejumpeq     #6407      i64 0
    push           2          i64 
    casejumpeq     #6408      i64 0
    push           5          i64 
    casejumpeq     #6409      i64 0
    push           6          i64 
    casejumpeq     #6410      i64 0
    popstack                  i64 
    jump           #6411      
#6405: 
    setargs                   3 0
    push           pc_genmcl.px_popptr.bx u64 
    push           pc_genmcl.px_popptr.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6412      
#6406: 
    setargs                   3 0
    setargs                   2 0
    push           &pc_tables.psize 
    push           pc_genmcl.px_popptr.m i64 
    pushptroff                u8 1 0
    push           pc_genmcl.px_popptr.bx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    setargs                   2 0
    push           &pc_tables.psize 
    push           pc_genmcl.px_popptr.m i64 
    pushptroff                u8 1 0
    push           pc_genmcl.px_popptr.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6412      
#6407: 
    setargs                   3 0
    push           pc_genmcl.px_popptr.bx u64 
    push           pc_genmcl.px_popptr.ax u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6412      
#6408: 
    setargs                   3 0
    push           pc_genmcl.px_popptr.bx u64 
    setargs                   2 0
    push           4          i64 
    push           pc_genmcl.px_popptr.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6412      
#6409: 
    setargs                   3 0
    push           pc_genmcl.px_popptr.bx u64 
    push           pc_genmcl.px_popptr.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    setargs                   3 0
    push           0          i64 
    push           8          i64 
    push           pc_genmcl.px_popptr.ax u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6412      
#6410: 
    setargs                   3 0
    push           pc_genmcl.px_popptr.p u64 
    push           4          
    pushptroff                i32 1 0
    setargs                   2 0
    push           0          i64 
    push           pc_genmcl.px_popptr.bx u64 
    callfn         &pc_libmcl.makeopndind u64 
    push           pc_genmcl.px_popptr.ax u64 
    callproc       &pc_libmcl.copyblock 
    jump           #6412      
#6411: 
    setargs                   2 0
    push           pc_genmcl.px_popptr.m i64 
    push           "popptr "  u64 
    callproc       &pc_libmcl.merrort 
#6412: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    push           pc_genmcl.px_popptr.p u64 
    push           1          
    pushptroff                u8 1 0
    push           34         i64 
    jumpne         #6413      i64 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_popptr.m i64 
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #6414      i64 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6414: 
#6413: 
#6415: 
    retproc                   
End


Proc pc_genmcl.px_storeptr:
    param          pc_genmcl.px_storeptr.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_storeptr.p u64 
    callproc       &pc_genmcl.px_popptr 
#6417: 
    retproc                   
End


Proc pc_genmcl.px_dotindex:
    param          pc_genmcl.px_dotindex.p u64 
    local          pc_genmcl.px_dotindex.ax u64 
    local          pc_genmcl.px_dotindex.i i64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpeq         #6419      i64 
    setargs                   2 0
    push           ""         u64 
    push           "dotix i not imm" u64 
    callproc       &pc_libmcl.merror 
#6419: 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_dotindex.ax u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    pop            pc_genmcl.px_dotindex.i i64 
    push           pc_genmcl.px_dotindex.i i64 
    jumpfalse      #6420      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_dotindex.i i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_dotindex.ax u64 
    push           46         i64 
    callproc       &pc_libmcl.genmc 
#6420: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_libmcl.mgenint u64 
    setargs                   2 0
    push           4          i64 
    push           pc_genmcl.px_dotindex.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           39         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6421: 
    retproc                   
End


Proc pc_genmcl.px_popdotindex:
    param          pc_genmcl.px_popdotindex.p u64 
    local          pc_genmcl.px_popdotindex.ax u64 
    local          pc_genmcl.px_popdotindex.bx u64 
    local          pc_genmcl.px_popdotindex.cx u64 
    local          pc_genmcl.px_popdotindex.rx u64 
    local          pc_genmcl.px_popdotindex.mx u64 
    local          pc_genmcl.px_popdotindex.i i64 
    local          pc_genmcl.px_popdotindex.size i64 
    local          pc_genmcl.px_popdotindex.cxfmt i64 
    local          pc_genmcl.px_popdotindex.rhs i64 
    local          pc_genmcl.px_popdotindex.axoffset i64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           3          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #6423      i64 
    push           pci_mcl.pclstack u64 
    push           3          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    pop            pc_genmcl.px_popdotindex.rhs i64 
    push           0          u64 
    pop            pc_genmcl.px_popdotindex.cx u64 
    jump           #6424      
#6423: 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_popdotindex.cx u64 
#6424: 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpeq         #6425      i64 
    setargs                   2 0
    push           ""         u64 
    push           "popdotix i not imm" u64 
    callproc       &pc_libmcl.merror 
#6425: 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    pop            pc_genmcl.px_popdotindex.i i64 
    push           pc_genmcl.px_popdotindex.p u64 
    push           4          
    pushptroff                i32 1 0
    pop            pc_genmcl.px_popdotindex.size i64 
    push           2          i64 
    pop            pc_genmcl.px_popdotindex.axoffset i64 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_d64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_popdotindex.rx u64 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_d64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_popdotindex.mx u64 
    setargs                   2 0
    push           pc_genmcl.px_popdotindex.size i64 
    push           pc_genmcl.px_popdotindex.axoffset i64 
    push           2          i64 
    add                       i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.px_popdotindex.ax u64 
    setargs                   3 0
    push           pc_genmcl.px_popdotindex.ax u64 
    push           pc_genmcl.px_popdotindex.rx u64 
    startmult                 
    push           pc_genmcl.px_popdotindex.size i64 
    push           8          i64 
    jumpne         #6426      i64 
    push           12         i64 
    resetmult                 
    jump           #6427      
#6426: 
    push           20         i64 
    endmult                   
#6427: 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    push           pc_genmcl.px_popdotindex.i i64 
    shl                       i64 
    inot                      i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_popdotindex.mx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.px_popdotindex.mx u64 
    push           pc_genmcl.px_popdotindex.rx u64 
    push           39         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_genmcl.px_popdotindex.cx u64 
    jumpfalse      #6428      u64 
    push           pc_genmcl.px_popdotindex.i i64 
    jumpfalse      #6429      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_popdotindex.i i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_popdotindex.cx u64 
    push           44         i64 
    callproc       &pc_libmcl.genmc 
#6429: 
    setargs                   3 0
    push           pc_genmcl.px_popdotindex.cx u64 
    push           pc_genmcl.px_popdotindex.rx u64 
    push           40         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6430      
#6428: 
    push           pc_genmcl.px_popdotindex.rhs i64 
    push           0          i64 
    jumpeq         #6431      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    push           pc_genmcl.px_popdotindex.i i64 
    shl                       i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_popdotindex.rx u64 
    push           40         i64 
    callproc       &pc_libmcl.genmc 
#6431: 
#6430: 
    setargs                   3 0
    setargs                   2 0
    push           pc_genmcl.px_popdotindex.size i64 
    push           pc_genmcl.px_popdotindex.rx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           pc_genmcl.px_popdotindex.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    push           pc_genmcl.px_popdotindex.p u64 
    push           1          
    pushptroff                u8 1 0
    push           37         i64 
    jumpne         #6432      i64 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6432: 
#6433: 
    retproc                   
End


Proc pc_genmcl.px_storedotindex:
    param          pc_genmcl.px_storedotindex.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_storedotindex.p u64 
    callproc       &pc_genmcl.px_popdotindex 
#6435: 
    retproc                   
End


Proc pc_genmcl.px_dotslice:
    param          pc_genmcl.px_dotslice.p u64 
    local          pc_genmcl.px_dotslice.ax u64 
    local          pc_genmcl.px_dotslice.mx u64 
    local          pc_genmcl.px_dotslice.mx4 u64 
    local          pc_genmcl.px_dotslice.i i64 
    local          pc_genmcl.px_dotslice.j i64 
    local          pc_genmcl.px_dotslice.mask u64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #6437      i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpeq         #6438      i64 
#6437: 
    setargs                   2 0
    push           ""         u64 
    push           "dotslice i/j not imm" u64 
    callproc       &pc_libmcl.merror 
#6438: 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_dotslice.ax u64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    pop            pc_genmcl.px_dotslice.i i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    pop            pc_genmcl.px_dotslice.j i64 
    push           pc_genmcl.px_dotslice.i i64 
    jumpfalse      #6439      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_dotslice.i i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_dotslice.ax u64 
    push           46         i64 
    callproc       &pc_libmcl.genmc 
#6439: 
    push           -1         u64 
    push           pc_genmcl.px_dotslice.j i64 
    push           pc_genmcl.px_dotslice.i i64 
    sub                       i64 
    push           1          i64 
    add                       i64 
    shl                       u64 
    inot                      u64 
    pop            pc_genmcl.px_dotslice.mask u64 
    push           pc_genmcl.px_dotslice.mask u64 
    push           2147483647 u64 
    jumpgt         #6440      u64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_dotslice.mask i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_dotslice.ax u64 
    push           39         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6441      
#6440: 
    setargs                   1 0
    push           2          i64 
    callfn         &pc_genmcl.makeregopnd u64 
    pop            pc_genmcl.px_dotslice.mx u64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_dotslice.mask i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_dotslice.mx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.px_dotslice.mx u64 
    push           pc_genmcl.px_dotslice.ax u64 
    push           39         i64 
    callproc       &pc_libmcl.genmc 
#6441: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6442: 
    retproc                   
End


Proc pc_genmcl.px_popdotslice:
    param          pc_genmcl.px_popdotslice.p u64 
    local          pc_genmcl.px_popdotslice.ax u64 
    local          pc_genmcl.px_popdotslice.rx u64 
    local          pc_genmcl.px_popdotslice.mx u64 
    local          pc_genmcl.px_popdotslice.mx4 u64 
    local          pc_genmcl.px_popdotslice.dx u64 
    local          pc_genmcl.px_popdotslice.i i64 
    local          pc_genmcl.px_popdotslice.j i64 
    local          pc_genmcl.px_popdotslice.size i64 
    local          pc_genmcl.px_popdotslice.mask u64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #6444      i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpeq         #6445      i64 
#6444: 
    setargs                   2 0
    push           ""         u64 
    push           "popdotslice i/j not imm" u64 
    callproc       &pc_libmcl.merror 
#6445: 
    setargs                   2 0
    push           8          i64 
    push           4          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_popdotslice.dx u64 
    push           pc_genmcl.px_popdotslice.p u64 
    push           4          
    pushptroff                i32 1 0
    pop            pc_genmcl.px_popdotslice.size i64 
    setargs                   2 0
    push           pc_genmcl.px_popdotslice.size i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.px_popdotslice.ax u64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    pop            pc_genmcl.px_popdotslice.i i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    pop            pc_genmcl.px_popdotslice.j i64 
    setargs                   1 0
    push           2          i64 
    callfn         &pc_genmcl.makeregopnd u64 
    pop            pc_genmcl.px_popdotslice.mx u64 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_genmcl.makeregopnd u64 
    pop            pc_genmcl.px_popdotslice.rx u64 
    setargs                   3 0
    push           pc_genmcl.px_popdotslice.p u64 
    push           3          
    pushptroff                u8 1 0
    push           pc_genmcl.px_popdotslice.ax u64 
    push           pc_genmcl.px_popdotslice.rx u64 
    callproc       &pc_genmcl.loadtoreg 
    push           -1         u64 
    push           pc_genmcl.px_popdotslice.j i64 
    push           pc_genmcl.px_popdotslice.i i64 
    sub                       i64 
    push           1          i64 
    add                       i64 
    shl                       u64 
    inot                      u64 
    push           pc_genmcl.px_popdotslice.i i64 
    shl                       u64 
    inot                      u64 
    pop            pc_genmcl.px_popdotslice.mask u64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_popdotslice.mask i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_popdotslice.mx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_genmcl.px_popdotslice.i i64 
    jumpfalse      #6446      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_popdotslice.i i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_popdotslice.dx u64 
    push           44         i64 
    callproc       &pc_libmcl.genmc 
#6446: 
    setargs                   3 0
    push           pc_genmcl.px_popdotslice.mx u64 
    push           pc_genmcl.px_popdotslice.rx u64 
    push           39         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.px_popdotslice.dx u64 
    push           pc_genmcl.px_popdotslice.rx u64 
    push           40         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.px_popdotslice.size i64 
    push           pc_genmcl.px_popdotslice.rx u64 
    push           pc_genmcl.px_popdotslice.ax u64 
    callproc       &pc_genmcl.storefromreg 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    push           pc_genmcl.px_popdotslice.p u64 
    push           1          
    pushptroff                u8 1 0
    push           40         i64 
    jumpne         #6447      i64 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6447: 
#6448: 
    retproc                   
End


Proc pc_genmcl.px_storedotslice:
    param          pc_genmcl.px_storedotslice.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_storedotslice.p u64 
    callproc       &pc_genmcl.px_popdotslice 
#6450: 
    retproc                   
End


Proc pc_genmcl.px_popstack:
    param          pc_genmcl.px_popstack.p u64 
    procentry                 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6452: 
    retproc                   
End


Proc pc_genmcl.px_eval:
    param          pc_genmcl.px_eval.p u64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           4          
    pushptroff                u8 1 0
    push           76         i64 
    jumpne         #6454      i64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callproc       &pc_stackmcl.genopnd_ld 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callproc       &pc_stackmcl.genopnd_ld 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #6455      
#6454: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callproc       &pc_stackmcl.genopnd_ld 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6455: 
#6456: 
    retproc                   
End


Proc pc_genmcl.px_callproc:
    param          pc_genmcl.px_callproc.p u64 
    local          pc_genmcl.px_callproc.nslots i64 
    local          pc_genmcl.px_callproc.nargs i64 
    local          pc_genmcl.px_callproc.av_1 i64 
    procentry                 
    push           &pci_mcl.callargs 
    push           pci_mcl.ncalldepth i64 
    pushptroff                u8 1 -1
    pop            pc_genmcl.px_callproc.nargs i64 
    setargs                   2 0
    push           0          i64 
    push           pc_genmcl.px_callproc.p u64 
    callfn         &pc_genmcl.do_pushparams i64 
    pop            pc_genmcl.px_callproc.nslots i64 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_callproc.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmemaddr u64 
    push           22         i64 
    callproc       &pc_libmcl.genmc 
#6458: 
    push           pc_genmcl.px_callproc.nargs i64 
    pop            pc_genmcl.px_callproc.av_1 i64 
    push           pc_genmcl.px_callproc.av_1 i64 
    push           0          i64 
    jumple         #6459      i64 
#6460: 
    setargs                   0 0
    callproc       &pc_stackmcl.poparg 
#6461: 
    to             #6460      
    opnd           pc_genmcl.px_callproc.av_1 
#6459: 
    setargs                   1 0
    push           pc_genmcl.px_callproc.nslots i64 
    callproc       &pc_stackmcl.popslots 
#6462: 
    retproc                   
End


Proc pc_genmcl.px_callprocptr:
    param          pc_genmcl.px_callprocptr.p u64 
    local          pc_genmcl.px_callprocptr.nslots i64 
    local          pc_genmcl.px_callprocptr.nargs i64 
    local          pc_genmcl.px_callprocptr.av_1 i64 
    procentry                 
    push           &pci_mcl.callargs 
    push           pci_mcl.ncalldepth i64 
    pushptroff                u8 1 -1
    pop            pc_genmcl.px_callprocptr.nargs i64 
    setargs                   2 0
    push           1          i64 
    push           pc_genmcl.px_callprocptr.p u64 
    callfn         &pc_genmcl.do_pushparams i64 
    pop            pc_genmcl.px_callprocptr.nslots i64 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    push           22         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6464: 
    push           pc_genmcl.px_callprocptr.nargs i64 
    pop            pc_genmcl.px_callprocptr.av_1 i64 
    push           pc_genmcl.px_callprocptr.av_1 i64 
    push           0          i64 
    jumple         #6465      i64 
#6466: 
    setargs                   0 0
    callproc       &pc_stackmcl.poparg 
#6467: 
    to             #6466      
    opnd           pc_genmcl.px_callprocptr.av_1 
#6465: 
    setargs                   1 0
    push           pc_genmcl.px_callprocptr.nslots i64 
    callproc       &pc_stackmcl.popslots 
#6468: 
    retproc                   
End


Proc pc_genmcl.px_retproc:
    param          pc_genmcl.px_retproc.p u64 
    local          pc_genmcl.px_retproc.offset i64 
    local          pc_genmcl.px_retproc.i i64 
    procentry                 
    push           pci_mcl.dsaveoffset i64 
    pop            pc_genmcl.px_retproc.offset i64 
#6470: 
    push           1          i64 
    pop            pc_genmcl.px_retproc.i i64 
    push           pci_mcl.ndsaveregs i64 
    push           1          i64 
    jumplt         #6471      i64 
#6472: 
    setargs                   3 0
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           8          i64 
    push           pc_genmcl.px_retproc.offset i64 
    push           1          i64 
    push           0          i64 
    push           15         i64 
    callfn         &pc_libmcl.mgenindex u64 
    setargs                   2 0
    push           8          i64 
    push           &pci_mcl.dsaveregs 
    push           pc_genmcl.px_retproc.i i64 
    pushptroff                i64 8 -8
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_genmcl.px_retproc.offset 
    push           8          i64 
    addto                     i64 
#6473: 
    forup          #6472      i64 1
    opnd           pc_genmcl.px_retproc.i 
    opnd           pci_mcl.ndsaveregs 
#6471: 
    push           pci_mcl.xsaveoffset i64 
    pop            pc_genmcl.px_retproc.offset i64 
#6474: 
    push           1          i64 
    pop            pc_genmcl.px_retproc.i i64 
    push           pci_mcl.nxsaveregs i64 
    push           1          i64 
    jumplt         #6475      i64 
#6476: 
    setargs                   3 0
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           8          i64 
    push           pc_genmcl.px_retproc.offset i64 
    push           1          i64 
    push           0          i64 
    push           15         i64 
    callfn         &pc_libmcl.mgenindex u64 
    setargs                   2 0
    push           8          i64 
    push           &pci_mcl.xsaveregs 
    push           pc_genmcl.px_retproc.i i64 
    pushptroff                i64 8 -8
    callfn         &pc_libmcl.mgenxreg u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_genmcl.px_retproc.offset 
    push           8          i64 
    addto                     i64 
#6477: 
    forup          #6476      i64 1
    opnd           pc_genmcl.px_retproc.i 
    opnd           pci_mcl.nxsaveregs 
#6475: 
    push           pci_mcl.needstackframe i64 
    jumpfalse      #6478      i64 
    push           pci_mcl.framebytes i64 
    jumpfalse      #6479      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.framebytes i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pci_mcl.dstackopnd u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
#6479: 
    setargs                   3 0
    push           0          u64 
    push           pci_mcl.dframeopnd u64 
    push           14         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6480      
#6478: 
    push           pci_mcl.needshadow32 i64 
    jumpfalse      #6481      i64 
    setargs                   1 0
    push           pci_mcl.needshadow32 i64 
    callproc       &pc_stackmcl.popstack 
#6481: 
#6480: 
    push           pci_mcl.needshadow48 i64 
    jumpfalse      #6482      i64 
    setargs                   1 0
    push           48         i64 
    callproc       &pc_stackmcl.popstack 
#6482: 
#6483: 
    push           pci_mcl.ndsavepush i64 
    pop            pc_genmcl.px_retproc.i i64 
    push           pc_genmcl.px_retproc.i i64 
    push           1          i64 
    jumplt         #6484      i64 
#6485: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           &pci_mcl.dsaveregs 
    push           pc_genmcl.px_retproc.i i64 
    pushptroff                i64 8 -8
    callfn         &pc_libmcl.mgenreg u64 
    push           14         i64 
    callproc       &pc_libmcl.genmc 
#6486: 
    fordown        #6485      i64 1
    opnd           pc_genmcl.px_retproc.i 
    opnd           1          
#6484: 
    setargs                   3 0
    push           0          u64 
    push           0          u64 
    push           23         i64 
    callproc       &pc_libmcl.genmc 
#6487: 
    retproc                   
End


Proc pc_genmcl.px_callfn:
    param          pc_genmcl.px_callfn.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_callfn.p u64 
    callproc       &pc_genmcl.px_callproc 
    setargs                   1 0
    push           pc_genmcl.px_callfn.p u64 
    callproc       &pc_genmcl.dogetretvalue 
#6489: 
    retproc                   
End


Proc pc_genmcl.px_callfnptr:
    param          pc_genmcl.px_callfnptr.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_callfnptr.p u64 
    callproc       &pc_genmcl.px_callprocptr 
    setargs                   1 0
    push           pc_genmcl.px_callfnptr.p u64 
    callproc       &pc_genmcl.dogetretvalue 
#6491: 
    retproc                   
End


Proc pc_genmcl.px_retfn:
    param          pc_genmcl.px_retfn.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_retfn.p u64 
    callproc       &pc_genmcl.px_retproc 
#6493: 
    retproc                   
End


Proc pc_genmcl.px_jump:
    param          pc_genmcl.px_jump.p u64 
    procentry                 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_jump.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    push           26         i64 
    callproc       &pc_libmcl.genmc 
#6495: 
    retproc                   
End


Proc pc_genmcl.px_jumpptr:
    param          pc_genmcl.px_jumpptr.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_jumpptr.p u64 
    callproc       &pc_genmcl.unimpl 
#6497: 
    retproc                   
End


Proc pc_genmcl.px_jumpeq:
    param          pc_genmcl.px_jumpeq.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_jumpeq.p u64 
    callproc       &pc_genmcl.dojumpcc 
#6499: 
    retproc                   
End


Proc pc_genmcl.px_jumpne:
    param          pc_genmcl.px_jumpne.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_jumpne.p u64 
    callproc       &pc_genmcl.dojumpcc 
#6501: 
    retproc                   
End


Proc pc_genmcl.px_jumplt:
    param          pc_genmcl.px_jumplt.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_jumplt.p u64 
    callproc       &pc_genmcl.dojumpcc 
#6503: 
    retproc                   
End


Proc pc_genmcl.px_jumple:
    param          pc_genmcl.px_jumple.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_jumple.p u64 
    callproc       &pc_genmcl.dojumpcc 
#6505: 
    retproc                   
End


Proc pc_genmcl.px_jumpge:
    param          pc_genmcl.px_jumpge.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_jumpge.p u64 
    callproc       &pc_genmcl.dojumpcc 
#6507: 
    retproc                   
End


Proc pc_genmcl.px_jumpgt:
    param          pc_genmcl.px_jumpgt.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_jumpgt.p u64 
    callproc       &pc_genmcl.dojumpcc 
#6509: 
    retproc                   
End


Proc pc_genmcl.px_jumptrue:
    param          pc_genmcl.px_jumptrue.p u64 
    procentry                 
    setargs                   2 0
    push           5          i64 
    push           pc_genmcl.px_jumptrue.p u64 
    callproc       &pc_genmcl.dojumptruefalse 
#6511: 
    retproc                   
End


Proc pc_genmcl.px_jumpfalse:
    param          pc_genmcl.px_jumpfalse.p u64 
    procentry                 
    setargs                   2 0
    push           4          i64 
    push           pc_genmcl.px_jumpfalse.p u64 
    callproc       &pc_genmcl.dojumptruefalse 
#6513: 
    retproc                   
End


Proc pc_genmcl.px_jumpinrange:
    param          pc_genmcl.px_jumpinrange.p u64 
    local          pc_genmcl.px_jumpinrange.ax u64 
    local          pc_genmcl.px_jumpinrange.bx u64 
    local          pc_genmcl.px_jumpinrange.cx u64 
    local          pc_genmcl.px_jumpinrange.lx u64 
    local          pc_genmcl.px_jumpinrange.nolx u64 
    local          pc_genmcl.px_jumpinrange.nolab i64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_jumpinrange.ax u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_jumpinrange.bx u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_jumpinrange.cx u64 
    setargs                   1 0
    push           pc_genmcl.px_jumpinrange.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    pop            pc_genmcl.px_jumpinrange.lx u64 
    setargs                   3 0
    push           pc_genmcl.px_jumpinrange.bx u64 
    push           pc_genmcl.px_jumpinrange.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    setargs                   0 0
    callfn         &pc_libmcl.mcreatefwdlabel i64 
    store          pc_genmcl.px_jumpinrange.nolab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    pop            pc_genmcl.px_jumpinrange.nolx u64 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.px_jumpinrange.nolx u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_genmcl.px_jumpinrange.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #6515      i64 
    push           12         i64 
    resetmult                 
    jump           #6516      
#6515: 
    push           2          i64 
    endmult                   
#6516: 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.px_jumpinrange.cx u64 
    push           pc_genmcl.px_jumpinrange.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.px_jumpinrange.lx u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_genmcl.px_jumpinrange.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #6517      i64 
    push           14         i64 
    resetmult                 
    jump           #6518      
#6517: 
    push           6          i64 
    endmult                   
#6518: 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   1 0
    push           pc_genmcl.px_jumpinrange.nolab i64 
    callproc       &pc_libmcl.mdefinefwdlabel 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6519: 
    retproc                   
End


Proc pc_genmcl.px_jumpnotinrange:
    param          pc_genmcl.px_jumpnotinrange.p u64 
    local          pc_genmcl.px_jumpnotinrange.ax u64 
    local          pc_genmcl.px_jumpnotinrange.bx u64 
    local          pc_genmcl.px_jumpnotinrange.cx u64 
    local          pc_genmcl.px_jumpnotinrange.lx u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_jumpnotinrange.ax u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_jumpnotinrange.bx u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_jumpnotinrange.cx u64 
    setargs                   1 0
    push           pc_genmcl.px_jumpnotinrange.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    pop            pc_genmcl.px_jumpnotinrange.lx u64 
    setargs                   3 0
    push           pc_genmcl.px_jumpnotinrange.bx u64 
    push           pc_genmcl.px_jumpnotinrange.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.px_jumpnotinrange.lx u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_genmcl.px_jumpnotinrange.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #6521      i64 
    push           12         i64 
    resetmult                 
    jump           #6522      
#6521: 
    push           2          i64 
    endmult                   
#6522: 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.px_jumpnotinrange.cx u64 
    push           pc_genmcl.px_jumpnotinrange.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.px_jumpnotinrange.lx u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_genmcl.px_jumpnotinrange.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #6523      i64 
    push           15         i64 
    resetmult                 
    jump           #6524      
#6523: 
    push           7          i64 
    endmult                   
#6524: 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6525: 
    retproc                   
End


Proc pc_genmcl.px_setjumpeq:
    param          pc_genmcl.px_setjumpeq.p u64 
    procentry                 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_setjumpeq.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    push           4          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6527: 
    retproc                   
End


Proc pc_genmcl.px_setjumpeqx:
    param          pc_genmcl.px_setjumpeqx.p u64 
    procentry                 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_setjumpeqx.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    push           4          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6529: 
    retproc                   
End


Proc pc_genmcl.px_setjumpne:
    param          pc_genmcl.px_setjumpne.p u64 
    procentry                 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_setjumpne.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    push           5          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6531: 
    retproc                   
End


Proc pc_genmcl.px_seteq:
    param          pc_genmcl.px_seteq.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_seteq.p u64 
    callproc       &pc_genmcl.dosetcc 
#6533: 
    retproc                   
End


Proc pc_genmcl.px_setne:
    param          pc_genmcl.px_setne.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_setne.p u64 
    callproc       &pc_genmcl.dosetcc 
#6535: 
    retproc                   
End


Proc pc_genmcl.px_setlt:
    param          pc_genmcl.px_setlt.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_setlt.p u64 
    callproc       &pc_genmcl.dosetcc 
#6537: 
    retproc                   
End


Proc pc_genmcl.px_setle:
    param          pc_genmcl.px_setle.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_setle.p u64 
    callproc       &pc_genmcl.dosetcc 
#6539: 
    retproc                   
End


Proc pc_genmcl.px_setge:
    param          pc_genmcl.px_setge.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_setge.p u64 
    callproc       &pc_genmcl.dosetcc 
#6541: 
    retproc                   
End


Proc pc_genmcl.px_setgt:
    param          pc_genmcl.px_setgt.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_setgt.p u64 
    callproc       &pc_genmcl.dosetcc 
#6543: 
    retproc                   
End


Proc pc_genmcl.px_casejumpeq:
    param          pc_genmcl.px_casejumpeq.p u64 
    procentry                 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_casejumpeq.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    push           4          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6545: 
    retproc                   
End


Proc pc_genmcl.px_selecteq:
    param          pc_genmcl.px_selecteq.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_selecteq.p u64 
    callproc       &pc_genmcl.doselectcc 
#6547: 
    retproc                   
End


Proc pc_genmcl.px_selectne:
    param          pc_genmcl.px_selectne.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_selectne.p u64 
    callproc       &pc_genmcl.doselectcc 
#6549: 
    retproc                   
End


Proc pc_genmcl.px_selectlt:
    param          pc_genmcl.px_selectlt.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_selectlt.p u64 
    callproc       &pc_genmcl.doselectcc 
#6551: 
    retproc                   
End


Proc pc_genmcl.px_selectle:
    param          pc_genmcl.px_selectle.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_selectle.p u64 
    callproc       &pc_genmcl.doselectcc 
#6553: 
    retproc                   
End


Proc pc_genmcl.px_selectge:
    param          pc_genmcl.px_selectge.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_selectge.p u64 
    callproc       &pc_genmcl.doselectcc 
#6555: 
    retproc                   
End


Proc pc_genmcl.px_selectgt:
    param          pc_genmcl.px_selectgt.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_selectgt.p u64 
    callproc       &pc_genmcl.doselectcc 
#6557: 
    retproc                   
End


Proc pc_genmcl.px_selecttrue:
    param          pc_genmcl.px_selecttrue.p u64 
    local          pc_genmcl.px_selecttrue.ax u64 
    local          pc_genmcl.px_selecttrue.bx u64 
    local          pc_genmcl.px_selecttrue.cx u64 
    local          pc_genmcl.px_selecttrue.dx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_selecttrue.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #6559      i64 
    setargs                   2 0
    push           pc_genmcl.px_selecttrue.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "selecttrue" u64 
    callproc       &pc_libmcl.merrort 
#6559: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_selecttrue.ax u64 
    setargs                   3 0
    push           pc_genmcl.px_selecttrue.ax u64 
    push           pc_genmcl.px_selecttrue.ax u64 
    push           42         i64 
    callproc       &pc_libmcl.genmc 
    push           1          i64 
    pop            pci_mcl.noxorclear u8 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_selecttrue.dx u64 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_selecttrue.cx u64 
    push           0          i64 
    pop            pci_mcl.noxorclear u8 
    setargs                   4 0
    push           pc_genmcl.px_selecttrue.dx u64 
    push           pc_genmcl.px_selecttrue.cx u64 
    push           4          i64 
    push           16         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6560: 
    retproc                   
End


Proc pc_genmcl.px_to:
    param          pc_genmcl.px_to.p u64 
    local          pc_genmcl.px_to.q u64 
    local          pc_genmcl.px_to.ax u64 
    procentry                 
    push           pc_genmcl.px_to.p u64 
    push           1          i64 
    addrefoff                 u64 32 0
    store          pc_genmcl.currpcl u64 
    pop            pc_genmcl.px_to.q u64 
    setargs                   1 0
    push           pc_genmcl.px_to.q u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    pop            pc_genmcl.px_to.ax u64 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.px_to.ax u64 
    push           54         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_to.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    push           5          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
#6562: 
    retproc                   
End


Proc pc_genmcl.px_forup:
    param          pc_genmcl.px_forup.p u64 
    procentry                 
    setargs                   4 0
    push           14         i64 
    push           29         i64 
    push           53         i64 
    push           pc_genmcl.px_forup.p u64 
    callproc       &pc_genmcl.do_for 
#6564: 
    retproc                   
End


Proc pc_genmcl.px_fordown:
    param          pc_genmcl.px_fordown.p u64 
    procentry                 
    setargs                   4 0
    push           13         i64 
    push           30         i64 
    push           54         i64 
    push           pc_genmcl.px_fordown.p u64 
    callproc       &pc_genmcl.do_for 
#6566: 
    retproc                   
End


Proc pc_genmcl.px_swap:
    param          pc_genmcl.px_swap.p u64 
    local          pc_genmcl.px_swap.ax u64 
    local          pc_genmcl.px_swap.bx u64 
    local          pc_genmcl.px_swap.px u64 
    local          pc_genmcl.px_swap.qx u64 
    procentry                 
    setargs                   2 0
    push           pc_genmcl.px_swap.p u64 
    push           4          
    pushptroff                i32 1 0
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.px_swap.px u64 
    setargs                   2 0
    push           pc_genmcl.px_swap.p u64 
    push           4          
    pushptroff                i32 1 0
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.px_swap.qx u64 
    setargs                   2 0
    push           pc_genmcl.px_swap.p u64 
    push           4          
    pushptroff                i32 1 0
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_genmcl.px_swap.ax u64 
    setargs                   2 0
    push           pc_genmcl.px_swap.p u64 
    push           4          
    pushptroff                i32 1 0
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_genmcl.px_swap.bx u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_swap.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6568      i64 0
    push           4          i64 
    casejumpeq     #6568      i64 0
    popstack                  i64 
    jump           #6569      
#6568: 
    setargs                   3 0
    push           pc_genmcl.px_swap.px u64 
    push           pc_genmcl.px_swap.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.px_swap.qx u64 
    push           pc_genmcl.px_swap.bx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.px_swap.ax u64 
    push           pc_genmcl.px_swap.qx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.px_swap.bx u64 
    push           pc_genmcl.px_swap.px u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6570      
#6569: 
    setargs                   2 0
    push           pc_genmcl.px_swap.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "swap"     u64 
    callproc       &pc_libmcl.merrort 
#6570: 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_genmcl.px_swap.ax u64 
    push           10         
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_genmcl.px_swap.ax u64 
    push           10         
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_genmcl.px_swap.bx u64 
    push           10         
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_genmcl.px_swap.bx u64 
    push           10         
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6571: 
    retproc                   
End


Proc pc_genmcl.px_makeslice:
    param          pc_genmcl.px_makeslice.p u64 
    procentry                 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.setwideopnd 
#6573: 
    retproc                   
End


Proc pc_genmcl.px_switch:
    param          pc_genmcl.px_switch.p u64 
    local          pc_genmcl.px_switch.minlab i64 
    local          pc_genmcl.px_switch.maxlab i64 
    local          pc_genmcl.px_switch.jumplab i64 
    local          pc_genmcl.px_switch.elselab i64 
    local          pc_genmcl.px_switch.ax u64 
    procentry                 
    push           pc_genmcl.px_switch.p u64 
    push           16         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_switch.minlab i64 
    push           pc_genmcl.px_switch.p u64 
    push           20         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_switch.maxlab i64 
    push           pc_genmcl.px_switch.p u64 
    push           8          
    pushptroff                i64 1 0
    pop            pc_genmcl.px_switch.jumplab i64 
    push           pc_genmcl.px_switch.p u64 
    push           1          i64 
    addrefoff                 u64 32 0
    pop            pc_genmcl.currpcl u64 
    push           pc_genmcl.currpcl u64 
    push           8          
    pushptroff                i64 1 0
    pop            pc_genmcl.px_switch.elselab i64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_switch.ax u64 
    push           pc_genmcl.px_switch.minlab i64 
    push           0          i64 
    jumpeq         #6575      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_switch.minlab i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_switch.ax u64 
    push           30         i64 
    callproc       &pc_libmcl.genmc 
#6575: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_switch.maxlab i64 
    push           pc_genmcl.px_switch.minlab i64 
    sub                       i64 
    push           1          i64 
    add                       i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_switch.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_switch.elselab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           3          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           0          u64 
    setargs                   7 0
    push           0          u64 
    push           pc_genmcl.px_switch.jumplab i64 
    push           0          i64 
    push           0          i64 
    push           8          i64 
    push           pc_genmcl.px_switch.ax u64 
    push           10         
    pushptroff                u8 1 0
    push           0          i64 
    callfn         &pc_libmcl.mgenindex u64 
    push           26         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   2 0
    push           1          i64 
    push           73         i64 
    callproc       &pc_libmcl.setsegment 
#6576: 
    retproc                   
End


Proc pc_genmcl.px_switchlabel:
    param          pc_genmcl.px_switchlabel.p u64 
    procentry                 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_switchlabel.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    push           117        i64 
    callproc       &pc_libmcl.genmc 
#6578: 
    retproc                   
End


Proc pc_genmcl.px_endswitch:
    param          pc_genmcl.px_endswitch.p u64 
    procentry                 
    setargs                   2 0
    push           1          i64 
    push           67         i64 
    callproc       &pc_libmcl.setsegment 
#6580: 
    retproc                   
End


Proc pc_genmcl.px_clear:
    param          pc_genmcl.px_clear.p u64 
    local          pc_genmcl.px_clear.ax u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.px_clear.ax u64 
    setargs                   2 0
    push           pc_genmcl.px_clear.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_genmcl.px_clear.ax u64 
    callproc       &pc_libmcl.clearblock 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6582: 
    retproc                   
End


Proc pc_genmcl.px_csegment:
    param          pc_genmcl.px_csegment.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_csegment.p u64 
    callproc       &pc_genmcl.unimpl 
#6584: 
    retproc                   
End


Proc pc_genmcl.px_isegment:
    param          pc_genmcl.px_isegment.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_isegment.p u64 
    callproc       &pc_genmcl.unimpl 
#6586: 
    retproc                   
End


Proc pc_genmcl.px_zsegment:
    param          pc_genmcl.px_zsegment.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_zsegment.p u64 
    callproc       &pc_genmcl.unimpl 
#6588: 
    retproc                   
End


Proc pc_genmcl.px_rosegment:
    param          pc_genmcl.px_rosegment.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_rosegment.p u64 
    callproc       &pc_genmcl.unimpl 
#6590: 
    retproc                   
End


Proc pc_genmcl.px_data:
    param          pc_genmcl.px_data.p u64 
    local          pc_genmcl.px_data.ax u64 
    local          pc_genmcl.px_data.opc i64 
    procentry                 
    push           pc_genmcl.px_data.p u64 
    pushptr                   u8 
    push           4          i64 
    casejumpeq     #6592      i64 0
    push           5          i64 
    casejumpeq     #6593      i64 0
    push           7          i64 
    casejumpeq     #6593      i64 0
    push           8          i64 
    casejumpeq     #6594      i64 0
    push           2          i64 
    casejumpeq     #6595      i64 0
    popstack                  i64 
    jump           #6596      
#6592: 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_data.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenint u64 
    pop            pc_genmcl.px_data.ax u64 
    jump           #6597      
#6593: 
    setargs                   2 0
    push           pc_genmcl.px_data.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_genmcl.px_data.p u64 
    push           8          
    pushptroff                r64 1 0
    callfn         &pc_libmcl.mgenrealimm u64 
    pop            pc_genmcl.px_data.ax u64 
    jump           #6597      
#6594: 
    setargs                   1 0
    setargs                   1 0
    push           pc_genmcl.px_data.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.getstringindex i64 
    callfn         &pc_libmcl.mgenlabel u64 
    pop            pc_genmcl.px_data.ax u64 
    jump           #6597      
#6595: 
    setargs                   1 0
    push           pc_genmcl.px_data.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmemaddr u64 
    pop            pc_genmcl.px_data.ax u64 
    push           pc_genmcl.px_data.p u64 
    push           20         
    pushptroff                i32 1 0
    push           pc_genmcl.px_data.ax u64 
    push           14         
    popptroff                 i32 1 0
    jump           #6597      
#6596: 
    setargs                   2 0
    push           &pc_tables.opndnames 
    push           pc_genmcl.px_data.p u64 
    pushptr                   u8 
    pushptroff                u64 8 0
    push           "db/dq optype? #" u64 
    callproc       &pc_libmcl.merror 
#6597: 
    push           pc_genmcl.px_data.p u64 
    push           4          
    pushptroff                i32 1 0
    push           1          i64 
    casejumpeq     #6598      i64 0
    push           2          i64 
    casejumpeq     #6599      i64 0
    push           4          i64 
    casejumpeq     #6600      i64 0
    push           8          i64 
    casejumpeq     #6601      i64 0
    popstack                  i64 
    jump           #6602      
#6598: 
    push           114        i64 
    pop            pc_genmcl.px_data.opc i64 
    jump           #6603      
#6599: 
    push           115        i64 
    pop            pc_genmcl.px_data.opc i64 
    jump           #6603      
#6600: 
    push           116        i64 
    pop            pc_genmcl.px_data.opc i64 
    jump           #6603      
#6601: 
    push           117        i64 
    pop            pc_genmcl.px_data.opc i64 
    jump           #6603      
#6602: 
    setargs                   2 0
    push           ""         u64 
    push           "DATA/not 1248" u64 
    callproc       &pc_libmcl.merror 
#6603: 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.px_data.ax u64 
    push           pc_genmcl.px_data.opc i64 
    callproc       &pc_libmcl.genmc 
#6604: 
    retproc                   
End


Proc pc_genmcl.px_db:
    param          pc_genmcl.px_db.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_db.p u64 
    callproc       &pc_genmcl.unimpl 
#6606: 
    retproc                   
End


Proc pc_genmcl.px_dw:
    param          pc_genmcl.px_dw.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_dw.p u64 
    callproc       &pc_genmcl.unimpl 
#6608: 
    retproc                   
End


Proc pc_genmcl.px_dd:
    param          pc_genmcl.px_dd.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_dd.p u64 
    callproc       &pc_genmcl.unimpl 
#6610: 
    retproc                   
End


Proc pc_genmcl.px_dq:
    param          pc_genmcl.px_dq.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_dq.p u64 
    callproc       &pc_genmcl.unimpl 
#6612: 
    retproc                   
End


Proc pc_genmcl.px_dstring:
    param          pc_genmcl.px_dstring.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_dstring.p u64 
    callproc       &pc_genmcl.unimpl 
#6614: 
    retproc                   
End


Proc pc_genmcl.px_dstringz:
    param          pc_genmcl.px_dstringz.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_dstringz.p u64 
    callproc       &pc_genmcl.unimpl 
#6616: 
    retproc                   
End


Proc pc_genmcl.px_reserve:
    param          pc_genmcl.px_reserve.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_reserve.p u64 
    callproc       &pc_genmcl.unimpl 
#6618: 
    retproc                   
End


Proc pc_genmcl.px_assem:
    param          pc_genmcl.px_assem.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_assem.p u64 
    callproc       &pc_genmcl.unimpl 
#6620: 
    retproc                   
End


Proc pc_genmcl.px_add:
    param          pc_genmcl.px_add.p u64 
    local          pc_genmcl.px_add.ax u64 
    local          pc_genmcl.px_add.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_add.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6622      i64 0
    push           3          i64 
    casejumpeq     #6623      i64 0
    push           2          i64 
    casejumpeq     #6624      i64 0
    push           5          i64 
    casejumpeq     #6625      i64 0
    popstack                  i64 
    jump           #6626      
#6622: 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_add.ax u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #6627      i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    push           1          i64 
    jumpne         #6627      i64 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.px_add.ax u64 
    push           53         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6628      
#6627: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_add.bx u64 
    setargs                   3 0
    push           pc_genmcl.px_add.bx u64 
    push           pc_genmcl.px_add.ax u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
#6628: 
    jump           #6629      
#6623: 
    setargs                   1 0
    push           68         i64 
    callproc       &pc_genmcl.dobin_float 
    jump           #6629      
#6624: 
    setargs                   1 0
    push           64         i64 
    callproc       &pc_genmcl.dobin_float 
    jump           #6629      
#6625: 
    setargs                   3 0
    push           31         i64 
    push           29         i64 
    push           pc_genmcl.px_add.p u64 
    callproc       &pc_genmcl.dobin_i128 
    jump           #6630      
    jump           #6629      
#6626: 
    setargs                   2 0
    push           pc_genmcl.px_add.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "add:"     u64 
    callproc       &pc_libmcl.merrort 
#6629: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6630: 
    retproc                   
End


Proc pc_genmcl.px_sub:
    param          pc_genmcl.px_sub.p u64 
    local          pc_genmcl.px_sub.ax u64 
    local          pc_genmcl.px_sub.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_sub.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6632      i64 0
    push           3          i64 
    casejumpeq     #6633      i64 0
    push           2          i64 
    casejumpeq     #6634      i64 0
    push           5          i64 
    casejumpeq     #6635      i64 0
    popstack                  i64 
    jump           #6636      
#6632: 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_sub.ax u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #6637      i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    push           1          i64 
    jumpne         #6637      i64 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.px_sub.ax u64 
    push           54         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6638      
#6637: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_sub.bx u64 
    setargs                   3 0
    push           pc_genmcl.px_sub.bx u64 
    push           pc_genmcl.px_sub.ax u64 
    push           30         i64 
    callproc       &pc_libmcl.genmc 
#6638: 
    jump           #6639      
#6633: 
    setargs                   1 0
    push           69         i64 
    callproc       &pc_genmcl.dobin_float 
    jump           #6639      
#6634: 
    setargs                   1 0
    push           65         i64 
    callproc       &pc_genmcl.dobin_float 
    jump           #6639      
#6635: 
    setargs                   3 0
    push           32         i64 
    push           30         i64 
    push           pc_genmcl.px_sub.p u64 
    callproc       &pc_genmcl.dobin_i128 
    jump           #6640      
    jump           #6639      
#6636: 
    setargs                   2 0
    push           pc_genmcl.px_sub.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "sub:"     u64 
    callproc       &pc_libmcl.merrort 
#6639: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6640: 
    retproc                   
End


Proc pc_genmcl.px_mul:
    param          pc_genmcl.px_mul.p u64 
    local          pc_genmcl.px_mul.ax u64 
    local          pc_genmcl.px_mul.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_mul.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6642      i64 0
    push           3          i64 
    casejumpeq     #6643      i64 0
    push           2          i64 
    casejumpeq     #6644      i64 0
    push           5          i64 
    casejumpeq     #6645      i64 0
    popstack                  i64 
    jump           #6646      
#6642: 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_mul.ax u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #6647      i64 
    setargs                   2 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    push           pc_genmcl.px_mul.ax u64 
    callproc       &pc_genmcl.mulimm 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #6648      
#6647: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_mul.bx u64 
    setargs                   3 0
    push           pc_genmcl.px_mul.bx u64 
    push           pc_genmcl.px_mul.ax u64 
    push           35         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6649      
#6643: 
    setargs                   1 0
    push           70         i64 
    callproc       &pc_genmcl.dobin_float 
    jump           #6649      
#6644: 
    setargs                   1 0
    push           66         i64 
    callproc       &pc_genmcl.dobin_float 
    jump           #6649      
#6645: 
    setargs                   3 0
    push           5          i64 
    push           4          i64 
    push           4          i64 
    callproc       &pc_genmcl.do_syscall 
    jump           #6648      
    jump           #6649      
#6646: 
    setargs                   2 0
    push           pc_genmcl.px_mul.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "mul:"     u64 
    callproc       &pc_libmcl.merrort 
#6649: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6648: 
    retproc                   
End


Proc pc_genmcl.px_div:
    param          pc_genmcl.px_div.p u64 
    local          pc_genmcl.px_div.ax u64 
    local          pc_genmcl.px_div.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_div.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           3          i64 
    casejumpeq     #6651      i64 0
    push           2          i64 
    casejumpeq     #6652      i64 0
    popstack                  i64 
    jump           #6653      
#6651: 
    setargs                   1 0
    push           71         i64 
    callproc       &pc_genmcl.dobin_float 
    jump           #6654      
#6652: 
    setargs                   1 0
    push           67         i64 
    callproc       &pc_genmcl.dobin_float 
    jump           #6654      
#6653: 
    setargs                   2 0
    push           pc_genmcl.px_div.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "div:"     u64 
    callproc       &pc_libmcl.merrort 
#6654: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6655: 
    retproc                   
End


Proc pc_genmcl.px_idiv:
    param          pc_genmcl.px_idiv.p u64 
    procentry                 
    push           pc_genmcl.px_idiv.p u64 
    push           3          
    pushptroff                u8 1 0
    push           9          i64 
    casejumpeq     #6657      i64 0
    push           4          i64 
    casejumpeq     #6658      i64 0
    push           10         i64 
    casejumpeq     #6659      i64 0
    push           5          i64 
    casejumpeq     #6660      i64 0
    popstack                  i64 
    jump           #6661      
#6657: 
    setargs                   3 0
    push           1          i64 
    push           1          i64 
    push           pc_genmcl.px_idiv.p u64 
    callproc       &pc_genmcl.do_divrem 
    jump           #6662      
#6658: 
    setargs                   3 0
    push           1          i64 
    push           0          i64 
    push           pc_genmcl.px_idiv.p u64 
    callproc       &pc_genmcl.do_divrem 
    jump           #6662      
#6659: 
    setargs                   3 0
    push           5          i64 
    push           4          i64 
    push           5          i64 
    callproc       &pc_genmcl.do_syscall 
    jump           #6662      
#6660: 
    setargs                   3 0
    push           5          i64 
    push           4          i64 
    push           5          i64 
    callproc       &pc_genmcl.do_syscall 
    jump           #6662      
#6661: 
    setargs                   2 0
    push           pc_genmcl.px_idiv.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "idiv:"    u64 
    callproc       &pc_libmcl.merrort 
#6662: 
#6663: 
    retproc                   
End


Proc pc_genmcl.px_irem:
    param          pc_genmcl.px_irem.p u64 
    procentry                 
    push           pc_genmcl.px_irem.p u64 
    push           3          
    pushptroff                u8 1 0
    push           9          i64 
    casejumpeq     #6665      i64 0
    push           4          i64 
    casejumpeq     #6666      i64 0
    popstack                  i64 
    jump           #6667      
#6665: 
    setargs                   3 0
    push           0          i64 
    push           1          i64 
    push           pc_genmcl.px_irem.p u64 
    callproc       &pc_genmcl.do_divrem 
    jump           #6668      
#6666: 
    setargs                   3 0
    push           0          i64 
    push           0          i64 
    push           pc_genmcl.px_irem.p u64 
    callproc       &pc_genmcl.do_divrem 
    jump           #6668      
#6667: 
    setargs                   2 0
    push           pc_genmcl.px_irem.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "irem:"    u64 
    callproc       &pc_libmcl.merrort 
#6668: 
#6669: 
    retproc                   
End


Proc pc_genmcl.px_iand:
    param          pc_genmcl.px_iand.p u64 
    procentry                 
    setargs                   2 0
    push           39         i64 
    push           pc_genmcl.px_iand.p u64 
    callproc       &pc_genmcl.dobitwise 
#6671: 
    retproc                   
End


Proc pc_genmcl.px_ior:
    param          pc_genmcl.px_ior.p u64 
    procentry                 
    setargs                   2 0
    push           40         i64 
    push           pc_genmcl.px_ior.p u64 
    callproc       &pc_genmcl.dobitwise 
#6673: 
    retproc                   
End


Proc pc_genmcl.px_ixor:
    param          pc_genmcl.px_ixor.p u64 
    procentry                 
    setargs                   2 0
    push           41         i64 
    push           pc_genmcl.px_ixor.p u64 
    callproc       &pc_genmcl.dobitwise 
#6675: 
    retproc                   
End


Proc pc_genmcl.px_shl:
    param          pc_genmcl.px_shl.p u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_shl.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6677      i64 0
    popstack                  i64 
    jump           #6678      
#6677: 
    setargs                   2 0
    push           44         i64 
    push           pc_genmcl.px_shl.p u64 
    callproc       &pc_genmcl.do_shift 
    jump           #6679      
#6678: 
    setargs                   2 0
    push           pc_genmcl.px_shl.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "shl:"     u64 
    callproc       &pc_libmcl.merrort 
#6679: 
#6680: 
    retproc                   
End


Proc pc_genmcl.px_shr:
    param          pc_genmcl.px_shr.p u64 
    procentry                 
    push           pc_genmcl.px_shr.p u64 
    push           3          
    pushptroff                u8 1 0
    push           9          i64 
    casejumpeq     #6682      i64 0
    push           4          i64 
    casejumpeq     #6683      i64 0
    popstack                  i64 
    jump           #6684      
#6682: 
    setargs                   2 0
    push           45         i64 
    push           pc_genmcl.px_shr.p u64 
    callproc       &pc_genmcl.do_shift 
    jump           #6685      
#6683: 
    setargs                   2 0
    push           46         i64 
    push           pc_genmcl.px_shr.p u64 
    callproc       &pc_genmcl.do_shift 
    jump           #6685      
#6684: 
    setargs                   2 0
    push           pc_genmcl.px_shr.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "shr:"     u64 
    callproc       &pc_libmcl.merrort 
#6685: 
#6686: 
    retproc                   
End


Proc pc_genmcl.px_in:
    param          pc_genmcl.px_in.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_in.p u64 
    callproc       &pc_genmcl.unimpl 
#6688: 
    retproc                   
End


Proc pc_genmcl.px_notin:
    param          pc_genmcl.px_notin.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_notin.p u64 
    callproc       &pc_genmcl.unimpl 
#6690: 
    retproc                   
End


Proc pc_genmcl.px_min:
    param          pc_genmcl.px_min.p u64 
    procentry                 
    push           pc_genmcl.px_min.p u64 
    push           3          
    pushptroff                u8 1 0
    push           9          i64 
    casejumpeq     #6692      i64 0
    push           4          i64 
    casejumpeq     #6693      i64 0
    push           12         i64 
    casejumpeq     #6694      i64 0
    push           11         i64 
    casejumpeq     #6695      i64 0
    popstack                  i64 
    jump           #6696      
#6692: 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genmcl.domax_int 
    jump           #6697      
#6693: 
    setargs                   1 0
    push           7          i64 
    callproc       &pc_genmcl.domax_int 
    jump           #6697      
#6694: 
    setargs                   1 0
    push           112        i64 
    callproc       &pc_genmcl.domax_float 
    jump           #6697      
#6695: 
    setargs                   1 0
    push           110        i64 
    callproc       &pc_genmcl.domax_float 
    jump           #6697      
#6696: 
    setargs                   2 0
    push           pc_genmcl.px_min.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "min:"     u64 
    callproc       &pc_libmcl.merrort 
#6697: 
#6698: 
    retproc                   
End


Proc pc_genmcl.px_max:
    param          pc_genmcl.px_max.p u64 
    procentry                 
    push           pc_genmcl.px_max.p u64 
    push           3          
    pushptroff                u8 1 0
    push           9          i64 
    casejumpeq     #6700      i64 0
    push           4          i64 
    casejumpeq     #6701      i64 0
    push           12         i64 
    casejumpeq     #6702      i64 0
    push           11         i64 
    casejumpeq     #6703      i64 0
    popstack                  i64 
    jump           #6704      
#6700: 
    setargs                   1 0
    push           12         i64 
    callproc       &pc_genmcl.domax_int 
    jump           #6705      
#6701: 
    setargs                   1 0
    push           2          i64 
    callproc       &pc_genmcl.domax_int 
    jump           #6705      
#6702: 
    setargs                   1 0
    push           113        i64 
    callproc       &pc_genmcl.domax_float 
    jump           #6705      
#6703: 
    setargs                   1 0
    push           111        i64 
    callproc       &pc_genmcl.domax_float 
    jump           #6705      
#6704: 
    setargs                   2 0
    push           pc_genmcl.px_max.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "max:"     u64 
    callproc       &pc_libmcl.merrort 
#6705: 
#6706: 
    retproc                   
End


Proc pc_genmcl.px_eq:
    param          pc_genmcl.px_eq.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_eq.p u64 
    callproc       &pc_genmcl.unimpl 
#6708: 
    retproc                   
End


Proc pc_genmcl.px_ne:
    param          pc_genmcl.px_ne.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_ne.p u64 
    callproc       &pc_genmcl.unimpl 
#6710: 
    retproc                   
End


Proc pc_genmcl.px_lt:
    param          pc_genmcl.px_lt.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_lt.p u64 
    callproc       &pc_genmcl.unimpl 
#6712: 
    retproc                   
End


Proc pc_genmcl.px_le:
    param          pc_genmcl.px_le.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_le.p u64 
    callproc       &pc_genmcl.unimpl 
#6714: 
    retproc                   
End


Proc pc_genmcl.px_ge:
    param          pc_genmcl.px_ge.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_ge.p u64 
    callproc       &pc_genmcl.unimpl 
#6716: 
    retproc                   
End


Proc pc_genmcl.px_gt:
    param          pc_genmcl.px_gt.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_gt.p u64 
    callproc       &pc_genmcl.unimpl 
#6718: 
    retproc                   
End


Proc pc_genmcl.px_same:
    param          pc_genmcl.px_same.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_same.p u64 
    callproc       &pc_genmcl.unimpl 
#6720: 
    retproc                   
End


Proc pc_genmcl.px_andl:
    param          pc_genmcl.px_andl.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_andl.p u64 
    callproc       &pc_genmcl.unimpl 
#6722: 
    retproc                   
End


Proc pc_genmcl.px_orl:
    param          pc_genmcl.px_orl.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_orl.p u64 
    callproc       &pc_genmcl.unimpl 
#6724: 
    retproc                   
End


Proc pc_genmcl.px_addrefoff:
    param          pc_genmcl.px_addrefoff.p u64 
    local          pc_genmcl.px_addrefoff.ax u64 
    local          pc_genmcl.px_addrefoff.cx u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_addrefoff.p u64 
    callfn         &pc_genmcl.do_addrmode u64 
    pop            pc_genmcl.px_addrefoff.cx u64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #6726      i64 
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           1          
    popptroff                 u8 1 0
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
#6726: 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_addrefoff.ax u64 
    setargs                   3 0
    push           pc_genmcl.px_addrefoff.cx u64 
    push           pc_genmcl.px_addrefoff.ax u64 
    push           15         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6727: 
    retproc                   
End


Proc pc_genmcl.px_subref:
    param          pc_genmcl.px_subref.p u64 
    local          pc_genmcl.px_subref.ax u64 
    local          pc_genmcl.px_subref.bx u64 
    local          pc_genmcl.px_subref.n i64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_subref.ax u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_subref.bx u64 
    setargs                   3 0
    push           pc_genmcl.px_subref.bx u64 
    push           pc_genmcl.px_subref.ax u64 
    push           30         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_genmcl.px_subref.p u64 
    push           16         
    pushptroff                i32 1 0
    push           1          i64 
    jumple         #6729      i64 
    setargs                   1 0
    push           pc_genmcl.px_subref.p u64 
    push           16         
    pushptroff                i32 1 0
    callfn         &pc_libmcl.ispoweroftwo i64 
    pop            pc_genmcl.px_subref.n i64 
    push           pc_genmcl.px_subref.n i64 
    jumpfalse      #6730      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_subref.n i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_subref.ax u64 
    push           46         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6731      
#6730: 
    setargs                   2 0
    push           ""         u64 
    push           "SUB/REF NOT POWER OF TWO" u64 
    callproc       &pc_libmcl.merror 
#6731: 
#6729: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6732: 
    retproc                   
End


Proc pc_genmcl.px_subrefoff:
    param          pc_genmcl.px_subrefoff.p u64 
    local          pc_genmcl.px_subrefoff.scale i64 
    local          pc_genmcl.px_subrefoff.extra i64 
    local          pc_genmcl.px_subrefoff.offset i64 
    local          pc_genmcl.px_subrefoff.ax u64 
    local          pc_genmcl.px_subrefoff.bx u64 
    procentry                 
    push           pc_genmcl.px_subrefoff.p u64 
    push           16         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_subrefoff.scale i64 
    push           pc_genmcl.px_subrefoff.p u64 
    push           20         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_subrefoff.extra i64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_subrefoff.ax u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #6734      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    push           pc_genmcl.px_subrefoff.scale i64 
    mul                       i64 
    push           pc_genmcl.px_subrefoff.extra i64 
    add                       i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_subrefoff.ax u64 
    push           30         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6735      
#6734: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_subrefoff.bx u64 
    setargs                   2 0
    push           pc_genmcl.px_subrefoff.scale i64 
    push           pc_genmcl.px_subrefoff.bx u64 
    callfn         &pc_genmcl.scaleindex i64 
    pop            pc_genmcl.px_subrefoff.scale i64 
    push           pc_genmcl.px_subrefoff.scale i64 
    push           1          i64 
    jumple         #6736      i64 
    setargs                   2 0
    push           pc_genmcl.px_subrefoff.scale i64 
    push           pc_genmcl.px_subrefoff.bx u64 
    callproc       &pc_genmcl.mulimm 
#6736: 
    setargs                   3 0
    push           pc_genmcl.px_subrefoff.bx u64 
    push           pc_genmcl.px_subrefoff.ax u64 
    push           30         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_genmcl.px_subrefoff.extra i64 
    jumpfalse      #6737      i64 
    setargs                   2 0
    push           ""         u64 
    push           "SUBREF/EXTRA" u64 
    callproc       &pc_libmcl.merror 
#6737: 
#6735: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6738: 
    retproc                   
End


Proc pc_genmcl.px_neg:
    param          pc_genmcl.px_neg.p u64 
    local          pc_genmcl.px_neg.ax u64 
    local          pc_genmcl.px_neg.axlow u64 
    local          pc_genmcl.px_neg.axhigh u64 
    local          pc_genmcl.px_neg.bxlow u64 
    local          pc_genmcl.px_neg.bxhigh u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_neg.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6740      i64 0
    push           3          i64 
    casejumpeq     #6741      i64 0
    push           2          i64 
    casejumpeq     #6742      i64 0
    push           5          i64 
    casejumpeq     #6743      i64 0
    popstack                  i64 
    jump           #6744      
#6740: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_neg.ax u64 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.px_neg.ax u64 
    push           51         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6745      
#6741: 
    push           pci_mcl.labneg64 i64 
    jumptrue       #6746      i64 
    setargs                   0 0
    callfn         &pc_libmcl.mcreatefwdlabel i64 
    pop            pci_mcl.labneg64 i64 
#6746: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.labneg64 i64 
    callfn         &pc_libmcl.mgenlabelmem u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    push           74         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6745      
#6742: 
    push           pci_mcl.labneg32 i64 
    jumptrue       #6747      i64 
    setargs                   0 0
    callfn         &pc_libmcl.mcreatefwdlabel i64 
    pop            pci_mcl.labneg32 i64 
#6747: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.labneg32 i64 
    callfn         &pc_libmcl.mgenlabelmem u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    push           75         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6745      
#6743: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_neg.axlow u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_neg.axhigh u64 
    setargs                   0 0
    callfn         &pc_stackmcl.genopnd_d64 u64 
    pop            pc_genmcl.px_neg.bxhigh u64 
    setargs                   0 0
    callfn         &pc_stackmcl.genopnd_d64 u64 
    pop            pc_genmcl.px_neg.bxlow u64 
    setargs                   3 0
    push           pc_genmcl.px_neg.bxlow u64 
    push           pc_genmcl.px_neg.bxlow u64 
    push           41         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.px_neg.bxhigh u64 
    push           pc_genmcl.px_neg.bxhigh u64 
    push           41         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.px_neg.axlow u64 
    push           pc_genmcl.px_neg.bxlow u64 
    push           30         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.px_neg.axhigh u64 
    push           pc_genmcl.px_neg.bxhigh u64 
    push           32         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   2 0
    push           3          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   2 0
    push           4          i64 
    push           2          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #6745      
#6744: 
    setargs                   2 0
    push           pc_genmcl.px_neg.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "neg"      u64 
    callproc       &pc_libmcl.merrort 
#6745: 
#6748: 
    retproc                   
End


Proc pc_genmcl.px_abs:
    param          pc_genmcl.px_abs.p u64 
    local          pc_genmcl.px_abs.ax u64 
    local          pc_genmcl.px_abs.lx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_abs.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6750      i64 0
    push           3          i64 
    casejumpeq     #6751      i64 0
    push           2          i64 
    casejumpeq     #6752      i64 0
    popstack                  i64 
    jump           #6753      
#6750: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_abs.ax u64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           0          i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_abs.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    callfn         &pc_libmcl.mgenlabel u64 
    store          pc_genmcl.px_abs.lx u64 
    push           13         i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.px_abs.ax u64 
    push           51         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.px_abs.lx u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    jump           #6754      
#6751: 
    push           pci_mcl.labneg64 i64 
    jumptrue       #6755      i64 
    setargs                   0 0
    callfn         &pc_libmcl.mcreatefwdlabel i64 
    pop            pci_mcl.labneg64 i64 
#6755: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.labneg64 i64 
    callfn         &pc_libmcl.mgenlabelmem u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    push           74         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6754      
#6752: 
    push           pci_mcl.labneg32 i64 
    jumptrue       #6756      i64 
    setargs                   0 0
    callfn         &pc_libmcl.mcreatefwdlabel i64 
    pop            pci_mcl.labneg32 i64 
#6756: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.labneg32 i64 
    callfn         &pc_libmcl.mgenlabelmem u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    push           75         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6754      
#6753: 
    setargs                   2 0
    push           pc_genmcl.px_abs.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "abs"      u64 
    callproc       &pc_libmcl.merrort 
#6754: 
#6757: 
    retproc                   
End


Proc pc_genmcl.px_inot:
    param          pc_genmcl.px_inot.p u64 
    local          pc_genmcl.px_inot.ax u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_inot.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6759      i64 0
    popstack                  i64 
    jump           #6760      
#6759: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_inot.ax u64 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.px_inot.ax u64 
    push           52         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6761      
#6760: 
    setargs                   2 0
    push           pc_genmcl.px_inot.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "inot"     u64 
    callproc       &pc_libmcl.merrort 
#6761: 
#6762: 
    retproc                   
End


Proc pc_genmcl.px_notl:
    param          pc_genmcl.px_notl.p u64 
    local          pc_genmcl.px_notl.ax u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_notl.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6764      i64 0
    popstack                  i64 
    jump           #6765      
#6764: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_notl.ax u64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_notl.ax u64 
    push           41         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6766      
#6765: 
    setargs                   2 0
    push           pc_genmcl.px_notl.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "notl"     u64 
    callproc       &pc_libmcl.merrort 
#6766: 
#6767: 
    retproc                   
End


Proc pc_genmcl.px_istruel:
    param          pc_genmcl.px_istruel.p u64 
    local          pc_genmcl.px_istruel.ax u64 
    local          pc_genmcl.px_istruel.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_istruel.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6769      i64 0
    popstack                  i64 
    jump           #6770      
#6769: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_istruel.ax u64 
    setargs                   3 0
    push           pc_genmcl.px_istruel.ax u64 
    push           pc_genmcl.px_istruel.ax u64 
    push           42         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   2 0
    push           1          i64 
    push           pc_genmcl.px_istruel.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    store          pc_genmcl.px_istruel.bx u64 
    push           5          i64 
    push           59         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.px_istruel.bx u64 
    setargs                   2 0
    push           4          i64 
    push           pc_genmcl.px_istruel.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           20         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6771      
#6770: 
    setargs                   2 0
    push           pc_genmcl.px_istruel.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "istruel"  u64 
    callproc       &pc_libmcl.merrort 
#6771: 
#6772: 
    retproc                   
End


Proc pc_genmcl.px_sqr:
    param          pc_genmcl.px_sqr.p u64 
    local          pc_genmcl.px_sqr.ax u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_sqr.ax u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_sqr.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6774      i64 0
    push           3          i64 
    casejumpeq     #6775      i64 0
    push           2          i64 
    casejumpeq     #6776      i64 0
    popstack                  i64 
    jump           #6777      
#6774: 
    setargs                   3 0
    push           pc_genmcl.px_sqr.ax u64 
    push           pc_genmcl.px_sqr.ax u64 
    push           35         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6778      
#6775: 
    setargs                   3 0
    push           pc_genmcl.px_sqr.ax u64 
    push           pc_genmcl.px_sqr.ax u64 
    push           70         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6778      
#6776: 
    setargs                   3 0
    push           pc_genmcl.px_sqr.ax u64 
    push           pc_genmcl.px_sqr.ax u64 
    push           66         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6778      
#6777: 
    setargs                   2 0
    push           pc_genmcl.px_sqr.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "sqr"      u64 
    callproc       &pc_libmcl.merrort 
#6778: 
#6779: 
    retproc                   
End


Proc pc_genmcl.px_sqrt:
    param          pc_genmcl.px_sqrt.p u64 
    local          pc_genmcl.px_sqrt.ax u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_sqrt.ax u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_sqrt.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           3          i64 
    casejumpeq     #6781      i64 0
    push           2          i64 
    casejumpeq     #6782      i64 0
    popstack                  i64 
    jump           #6783      
#6781: 
    setargs                   3 0
    push           pc_genmcl.px_sqrt.ax u64 
    push           pc_genmcl.px_sqrt.ax u64 
    push           62         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6784      
#6782: 
    setargs                   3 0
    push           pc_genmcl.px_sqrt.ax u64 
    push           pc_genmcl.px_sqrt.ax u64 
    push           63         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6784      
#6783: 
    setargs                   2 0
    push           pc_genmcl.px_sqrt.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "sqrt"     u64 
    callproc       &pc_libmcl.merrort 
#6784: 
#6785: 
    retproc                   
End


Proc pc_genmcl.px_sin:
    param          pc_genmcl.px_sin.p u64 
    procentry                 
    setargs                   2 0
    push           "sin*"     u64 
    push           pc_genmcl.px_sin.p u64 
    callproc       &pc_genmcl.domaths 
#6787: 
    retproc                   
End


Proc pc_genmcl.px_cos:
    param          pc_genmcl.px_cos.p u64 
    procentry                 
    setargs                   2 0
    push           "cos*"     u64 
    push           pc_genmcl.px_cos.p u64 
    callproc       &pc_genmcl.domaths 
#6789: 
    retproc                   
End


Proc pc_genmcl.px_tan:
    param          pc_genmcl.px_tan.p u64 
    procentry                 
    setargs                   2 0
    push           "tan*"     u64 
    push           pc_genmcl.px_tan.p u64 
    callproc       &pc_genmcl.domaths 
#6791: 
    retproc                   
End


Proc pc_genmcl.px_asin:
    param          pc_genmcl.px_asin.p u64 
    procentry                 
    setargs                   2 0
    push           "asin*"    u64 
    push           pc_genmcl.px_asin.p u64 
    callproc       &pc_genmcl.domaths 
#6793: 
    retproc                   
End


Proc pc_genmcl.px_acos:
    param          pc_genmcl.px_acos.p u64 
    procentry                 
    setargs                   2 0
    push           "acos*"    u64 
    push           pc_genmcl.px_acos.p u64 
    callproc       &pc_genmcl.domaths 
#6795: 
    retproc                   
End


Proc pc_genmcl.px_atan:
    param          pc_genmcl.px_atan.p u64 
    procentry                 
    setargs                   2 0
    push           "atan*"    u64 
    push           pc_genmcl.px_atan.p u64 
    callproc       &pc_genmcl.domaths 
#6797: 
    retproc                   
End


Proc pc_genmcl.px_ln:
    param          pc_genmcl.px_ln.p u64 
    procentry                 
    setargs                   2 0
    push           "log*"     u64 
    push           pc_genmcl.px_ln.p u64 
    callproc       &pc_genmcl.domaths 
#6799: 
    retproc                   
End


Proc pc_genmcl.px_log:
    param          pc_genmcl.px_log.p u64 
    procentry                 
    setargs                   2 0
    push           "log10*"   u64 
    push           pc_genmcl.px_log.p u64 
    callproc       &pc_genmcl.domaths 
#6801: 
    retproc                   
End


Proc pc_genmcl.px_exp:
    param          pc_genmcl.px_exp.p u64 
    procentry                 
    setargs                   2 0
    push           "exp*"     u64 
    push           pc_genmcl.px_exp.p u64 
    callproc       &pc_genmcl.domaths 
#6803: 
    retproc                   
End


Proc pc_genmcl.px_round:
    param          pc_genmcl.px_round.p u64 
    procentry                 
    setargs                   2 0
    push           "round*"   u64 
    push           pc_genmcl.px_round.p u64 
    callproc       &pc_genmcl.domaths 
#6805: 
    retproc                   
End


Proc pc_genmcl.px_floor:
    param          pc_genmcl.px_floor.p u64 
    procentry                 
    setargs                   2 0
    push           "floor*"   u64 
    push           pc_genmcl.px_floor.p u64 
    callproc       &pc_genmcl.domaths 
#6807: 
    retproc                   
End


Proc pc_genmcl.px_ceil:
    param          pc_genmcl.px_ceil.p u64 
    procentry                 
    setargs                   2 0
    push           "ceil*"    u64 
    push           pc_genmcl.px_ceil.p u64 
    callproc       &pc_genmcl.domaths 
#6809: 
    retproc                   
End


Proc pc_genmcl.px_fract:
    param          pc_genmcl.px_fract.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_fract.p u64 
    callproc       &pc_genmcl.unimpl 
#6811: 
    retproc                   
End


Proc pc_genmcl.px_sign:
    param          pc_genmcl.px_sign.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_sign.p u64 
    callproc       &pc_genmcl.unimpl 
#6813: 
    retproc                   
End


Proc pc_genmcl.px_atan2:
    param          pc_genmcl.px_atan2.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_atan2.p u64 
    callproc       &pc_genmcl.unimpl 
#6815: 
    retproc                   
End


Proc pc_genmcl.px_power:
    param          pc_genmcl.px_power.p u64 
    local          pc_genmcl.px_power.ax u64 
    local          pc_genmcl.px_power.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_power.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6817      i64 0
    popstack                  i64 
    jump           #6818      
#6817: 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   3 0
    push           1          i64 
    push           2          i64 
    push           2          i64 
    callproc       &pc_genmcl.do_syscall 
    jump           #6819      
    jump           #6820      
#6818: 
    setargs                   2 0
    push           pc_genmcl.px_power.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "power:"   u64 
    callproc       &pc_libmcl.merrort 
#6820: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6819: 
    retproc                   
End


Proc pc_genmcl.px_fmod:
    param          pc_genmcl.px_fmod.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_fmod.p u64 
    callproc       &pc_genmcl.unimpl 
#6822: 
    retproc                   
End


Proc pc_genmcl.px_incr:
    param          pc_genmcl.px_incr.p u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_incr.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6824      i64 0
    push           4          i64 
    casejumpeq     #6824      i64 0
    popstack                  i64 
    jump           #6825      
#6824: 
    setargs                   3 0
    push           29         i64 
    push           53         i64 
    push           pc_genmcl.px_incr.p u64 
    callproc       &pc_genmcl.doincr 
    jump           #6826      
#6825: 
    setargs                   2 0
    push           pc_genmcl.px_incr.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "incr"     u64 
    callproc       &pc_libmcl.merrort 
#6826: 
#6827: 
    retproc                   
End


Proc pc_genmcl.px_decr:
    param          pc_genmcl.px_decr.p u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_decr.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6829      i64 0
    push           4          i64 
    casejumpeq     #6829      i64 0
    popstack                  i64 
    jump           #6830      
#6829: 
    setargs                   3 0
    push           30         i64 
    push           54         i64 
    push           pc_genmcl.px_decr.p u64 
    callproc       &pc_genmcl.doincr 
    jump           #6831      
#6830: 
    setargs                   2 0
    push           pc_genmcl.px_decr.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "decr"     u64 
    callproc       &pc_libmcl.merrort 
#6831: 
#6832: 
    retproc                   
End


Proc pc_genmcl.px_incrload:
    param          pc_genmcl.px_incrload.p u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_incrload.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6834      i64 0
    push           4          i64 
    casejumpeq     #6834      i64 0
    popstack                  i64 
    jump           #6835      
#6834: 
    setargs                   3 0
    push           29         i64 
    push           53         i64 
    push           pc_genmcl.px_incrload.p u64 
    callproc       &pc_genmcl.doincrload 
    jump           #6836      
#6835: 
    setargs                   2 0
    push           pc_genmcl.px_incrload.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "incrload" u64 
    callproc       &pc_libmcl.merrort 
#6836: 
#6837: 
    retproc                   
End


Proc pc_genmcl.px_decrload:
    param          pc_genmcl.px_decrload.p u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_decrload.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6839      i64 0
    push           4          i64 
    casejumpeq     #6839      i64 0
    popstack                  i64 
    jump           #6840      
#6839: 
    setargs                   3 0
    push           30         i64 
    push           54         i64 
    push           pc_genmcl.px_decrload.p u64 
    callproc       &pc_genmcl.doincrload 
    jump           #6841      
#6840: 
    setargs                   2 0
    push           pc_genmcl.px_decrload.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "decrload" u64 
    callproc       &pc_libmcl.merrort 
#6841: 
#6842: 
    retproc                   
End


Proc pc_genmcl.px_loadincr:
    param          pc_genmcl.px_loadincr.p u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_loadincr.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6844      i64 0
    push           4          i64 
    casejumpeq     #6844      i64 0
    popstack                  i64 
    jump           #6845      
#6844: 
    setargs                   3 0
    push           29         i64 
    push           53         i64 
    push           pc_genmcl.px_loadincr.p u64 
    callproc       &pc_genmcl.doloadincr 
    jump           #6846      
#6845: 
    setargs                   2 0
    push           pc_genmcl.px_loadincr.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "loadincr" u64 
    callproc       &pc_libmcl.merrort 
#6846: 
#6847: 
    retproc                   
End


Proc pc_genmcl.px_loaddecr:
    param          pc_genmcl.px_loaddecr.p u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_loaddecr.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6849      i64 0
    push           4          i64 
    casejumpeq     #6849      i64 0
    popstack                  i64 
    jump           #6850      
#6849: 
    setargs                   3 0
    push           30         i64 
    push           54         i64 
    push           pc_genmcl.px_loaddecr.p u64 
    callproc       &pc_genmcl.doloadincr 
    jump           #6851      
#6850: 
    setargs                   2 0
    push           pc_genmcl.px_loaddecr.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "loaddecr" u64 
    callproc       &pc_libmcl.merrort 
#6851: 
#6852: 
    retproc                   
End


Proc pc_genmcl.px_addto:
    param          pc_genmcl.px_addto.p u64 
    local          pc_genmcl.px_addto.ax u64 
    local          pc_genmcl.px_addto.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_addto.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6854      i64 0
    push           4          i64 
    casejumpeq     #6854      i64 0
    push           3          i64 
    casejumpeq     #6855      i64 0
    push           2          i64 
    casejumpeq     #6856      i64 0
    popstack                  i64 
    jump           #6857      
#6854: 
    setargs                   2 0
    push           29         i64 
    push           pc_genmcl.px_addto.p u64 
    callproc       &pc_genmcl.dobinto_int 
    jump           #6858      
#6855: 
    setargs                   2 0
    push           68         i64 
    push           pc_genmcl.px_addto.p u64 
    callproc       &pc_genmcl.dobinto_float 
    jump           #6858      
#6856: 
    setargs                   2 0
    push           64         i64 
    push           pc_genmcl.px_addto.p u64 
    callproc       &pc_genmcl.dobinto_float32 
    jump           #6858      
#6857: 
    setargs                   2 0
    push           pc_genmcl.px_addto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "addto:"   u64 
    callproc       &pc_libmcl.merrort 
#6858: 
#6859: 
    retproc                   
End


Proc pc_genmcl.px_subto:
    param          pc_genmcl.px_subto.p u64 
    local          pc_genmcl.px_subto.ax u64 
    local          pc_genmcl.px_subto.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_subto.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6861      i64 0
    push           4          i64 
    casejumpeq     #6861      i64 0
    push           3          i64 
    casejumpeq     #6862      i64 0
    push           2          i64 
    casejumpeq     #6863      i64 0
    popstack                  i64 
    jump           #6864      
#6861: 
    setargs                   2 0
    push           30         i64 
    push           pc_genmcl.px_subto.p u64 
    callproc       &pc_genmcl.dobinto_int 
    jump           #6865      
#6862: 
    setargs                   2 0
    push           69         i64 
    push           pc_genmcl.px_subto.p u64 
    callproc       &pc_genmcl.dobinto_float 
    jump           #6865      
#6863: 
    setargs                   2 0
    push           65         i64 
    push           pc_genmcl.px_subto.p u64 
    callproc       &pc_genmcl.dobinto_float32 
    jump           #6865      
#6864: 
    setargs                   2 0
    push           pc_genmcl.px_subto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "subto:"   u64 
    callproc       &pc_libmcl.merrort 
#6865: 
#6866: 
    retproc                   
End


Proc pc_genmcl.px_multo:
    param          pc_genmcl.px_multo.p u64 
    local          pc_genmcl.px_multo.ax u64 
    local          pc_genmcl.px_multo.bx u64 
    local          pc_genmcl.px_multo.cx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_multo.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6868      i64 0
    push           3          i64 
    casejumpeq     #6869      i64 0
    push           2          i64 
    casejumpeq     #6870      i64 0
    popstack                  i64 
    jump           #6871      
#6868: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_d64 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.px_multo.ax u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_multo.bx u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_multo.cx u64 
    setargs                   3 0
    push           pc_genmcl.px_multo.ax u64 
    push           pc_genmcl.px_multo.cx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #6872      i64 
    setargs                   2 0
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    push           pc_genmcl.px_multo.cx u64 
    callproc       &pc_genmcl.mulimm 
    jump           #6873      
#6872: 
    setargs                   3 0
    push           pc_genmcl.px_multo.bx u64 
    push           pc_genmcl.px_multo.cx u64 
    push           35         i64 
    callproc       &pc_libmcl.genmc 
#6873: 
    setargs                   3 0
    push           pc_genmcl.px_multo.cx u64 
    push           pc_genmcl.px_multo.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #6874      
#6869: 
    setargs                   2 0
    push           70         i64 
    push           pc_genmcl.px_multo.p u64 
    callproc       &pc_genmcl.dobinto_float 
    jump           #6874      
#6870: 
    setargs                   2 0
    push           66         i64 
    push           pc_genmcl.px_multo.p u64 
    callproc       &pc_genmcl.dobinto_float32 
    jump           #6874      
#6871: 
    setargs                   2 0
    push           pc_genmcl.px_multo.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "multo:"   u64 
    callproc       &pc_libmcl.merrort 
#6874: 
#6875: 
    retproc                   
End


Proc pc_genmcl.px_divto:
    param          pc_genmcl.px_divto.p u64 
    local          pc_genmcl.px_divto.ax u64 
    local          pc_genmcl.px_divto.bx u64 
    local          pc_genmcl.px_divto.cx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_divto.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           3          i64 
    casejumpeq     #6877      i64 0
    push           2          i64 
    casejumpeq     #6878      i64 0
    popstack                  i64 
    jump           #6879      
#6877: 
    setargs                   2 0
    push           71         i64 
    push           pc_genmcl.px_divto.p u64 
    callproc       &pc_genmcl.dobinto_float 
    jump           #6880      
#6878: 
    setargs                   2 0
    push           67         i64 
    push           pc_genmcl.px_divto.p u64 
    callproc       &pc_genmcl.dobinto_float32 
    jump           #6880      
#6879: 
    setargs                   2 0
    push           pc_genmcl.px_divto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "divto:"   u64 
    callproc       &pc_libmcl.merrort 
#6880: 
#6881: 
    retproc                   
End


Proc pc_genmcl.px_idivto:
    param          pc_genmcl.px_idivto.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_idivto.p u64 
    callproc       &pc_genmcl.unimpl 
#6883: 
    retproc                   
End


Proc pc_genmcl.px_iremto:
    param          pc_genmcl.px_iremto.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_iremto.p u64 
    callproc       &pc_genmcl.unimpl 
#6885: 
    retproc                   
End


Proc pc_genmcl.px_iandto:
    param          pc_genmcl.px_iandto.p u64 
    local          pc_genmcl.px_iandto.ax u64 
    local          pc_genmcl.px_iandto.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_iandto.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6887      i64 0
    push           4          i64 
    casejumpeq     #6887      i64 0
    popstack                  i64 
    jump           #6888      
#6887: 
    setargs                   2 0
    push           39         i64 
    push           pc_genmcl.px_iandto.p u64 
    callproc       &pc_genmcl.dobinto_int 
    jump           #6889      
#6888: 
    setargs                   2 0
    push           pc_genmcl.px_iandto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "iandto:"  u64 
    callproc       &pc_libmcl.merrort 
#6889: 
#6890: 
    retproc                   
End


Proc pc_genmcl.px_iorto:
    param          pc_genmcl.px_iorto.p u64 
    local          pc_genmcl.px_iorto.ax u64 
    local          pc_genmcl.px_iorto.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_iorto.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6892      i64 0
    push           4          i64 
    casejumpeq     #6892      i64 0
    popstack                  i64 
    jump           #6893      
#6892: 
    setargs                   2 0
    push           40         i64 
    push           pc_genmcl.px_iorto.p u64 
    callproc       &pc_genmcl.dobinto_int 
    jump           #6894      
#6893: 
    setargs                   2 0
    push           pc_genmcl.px_iorto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "iorto:"   u64 
    callproc       &pc_libmcl.merrort 
#6894: 
#6895: 
    retproc                   
End


Proc pc_genmcl.px_ixorto:
    param          pc_genmcl.px_ixorto.p u64 
    local          pc_genmcl.px_ixorto.ax u64 
    local          pc_genmcl.px_ixorto.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_ixorto.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6897      i64 0
    push           4          i64 
    casejumpeq     #6897      i64 0
    popstack                  i64 
    jump           #6898      
#6897: 
    setargs                   2 0
    push           41         i64 
    push           pc_genmcl.px_ixorto.p u64 
    callproc       &pc_genmcl.dobinto_int 
    jump           #6899      
#6898: 
    setargs                   2 0
    push           pc_genmcl.px_ixorto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "ixorto:"  u64 
    callproc       &pc_libmcl.merrort 
#6899: 
#6900: 
    retproc                   
End


Proc pc_genmcl.px_shlto:
    param          pc_genmcl.px_shlto.p u64 
    procentry                 
    push           pc_genmcl.px_shlto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           9          i64 
    casejumpeq     #6902      i64 0
    push           4          i64 
    casejumpeq     #6902      i64 0
    popstack                  i64 
    jump           #6903      
#6902: 
    setargs                   2 0
    push           44         i64 
    push           pc_genmcl.px_shlto.p u64 
    callproc       &pc_genmcl.do_shiftnto 
    jump           #6904      
#6903: 
    setargs                   2 0
    push           pc_genmcl.px_shlto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "shlto:"   u64 
    callproc       &pc_libmcl.merrort 
#6904: 
#6905: 
    retproc                   
End


Proc pc_genmcl.px_shrto:
    param          pc_genmcl.px_shrto.p u64 
    procentry                 
    push           pc_genmcl.px_shrto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           9          i64 
    casejumpeq     #6907      i64 0
    push           4          i64 
    casejumpeq     #6908      i64 0
    popstack                  i64 
    jump           #6909      
#6907: 
    setargs                   2 0
    push           45         i64 
    push           pc_genmcl.px_shrto.p u64 
    callproc       &pc_genmcl.do_shiftnto 
    jump           #6910      
#6908: 
    setargs                   2 0
    push           46         i64 
    push           pc_genmcl.px_shrto.p u64 
    callproc       &pc_genmcl.do_shiftnto 
    jump           #6910      
#6909: 
    setargs                   2 0
    push           pc_genmcl.px_shrto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "shrto:"   u64 
    callproc       &pc_libmcl.merrort 
#6910: 
#6911: 
    retproc                   
End


Proc pc_genmcl.px_minto:
    param          pc_genmcl.px_minto.p u64 
    procentry                 
    push           pc_genmcl.px_minto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           9          i64 
    casejumpeq     #6913      i64 0
    push           4          i64 
    casejumpeq     #6914      i64 0
    push           12         i64 
    casejumpeq     #6915      i64 0
    push           11         i64 
    casejumpeq     #6916      i64 0
    popstack                  i64 
    jump           #6917      
#6913: 
    setargs                   1 0
    push           14         i64 
    callproc       &pc_genmcl.domaxto_int 
    jump           #6918      
#6914: 
    setargs                   1 0
    push           6          i64 
    callproc       &pc_genmcl.domaxto_int 
    jump           #6918      
#6915: 
    setargs                   1 0
    push           6          i64 
    callproc       &pc_genmcl.domaxto_r64 
    jump           #6918      
#6916: 
    setargs                   1 0
    push           6          i64 
    callproc       &pc_genmcl.domaxto_r32 
    jump           #6918      
#6917: 
    setargs                   2 0
    push           pc_genmcl.px_minto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "minto:"   u64 
    callproc       &pc_libmcl.merrort 
#6918: 
#6919: 
    retproc                   
End


Proc pc_genmcl.px_maxto:
    param          pc_genmcl.px_maxto.p u64 
    procentry                 
    push           pc_genmcl.px_maxto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           9          i64 
    casejumpeq     #6921      i64 0
    push           4          i64 
    casejumpeq     #6922      i64 0
    push           12         i64 
    casejumpeq     #6923      i64 0
    push           11         i64 
    casejumpeq     #6924      i64 0
    popstack                  i64 
    jump           #6925      
#6921: 
    setargs                   1 0
    push           13         i64 
    callproc       &pc_genmcl.domaxto_int 
    jump           #6926      
#6922: 
    setargs                   1 0
    push           3          i64 
    callproc       &pc_genmcl.domaxto_int 
    jump           #6926      
#6923: 
    setargs                   1 0
    push           3          i64 
    callproc       &pc_genmcl.domaxto_r64 
    jump           #6926      
#6924: 
    setargs                   1 0
    push           3          i64 
    callproc       &pc_genmcl.domaxto_r32 
    jump           #6926      
#6925: 
    setargs                   2 0
    push           pc_genmcl.px_maxto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "maxto:"   u64 
    callproc       &pc_libmcl.merrort 
#6926: 
#6927: 
    retproc                   
End


Proc pc_genmcl.px_andlto:
    param          pc_genmcl.px_andlto.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_andlto.p u64 
    callproc       &pc_genmcl.unimpl 
#6929: 
    retproc                   
End


Proc pc_genmcl.px_orlto:
    param          pc_genmcl.px_orlto.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_orlto.p u64 
    callproc       &pc_genmcl.unimpl 
#6931: 
    retproc                   
End


Proc pc_genmcl.px_addrefoffto:
    param          pc_genmcl.px_addrefoffto.p u64 
    local          pc_genmcl.px_addrefoffto.scale i64 
    local          pc_genmcl.px_addrefoffto.extra i64 
    local          pc_genmcl.px_addrefoffto.offset i64 
    local          pc_genmcl.px_addrefoffto.ax u64 
    local          pc_genmcl.px_addrefoffto.bx u64 
    local          pc_genmcl.px_addrefoffto.rx u64 
    local          pc_genmcl.px_addrefoffto.reg i64 
    local          pc_genmcl.px_addrefoffto.size i64 
    procentry                 
    push           pc_genmcl.px_addrefoffto.p u64 
    push           16         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_addrefoffto.scale i64 
    push           pc_genmcl.px_addrefoffto.p u64 
    push           20         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_addrefoffto.extra i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    push           pc_genmcl.px_addrefoffto.scale i64 
    mul                       i64 
    push           pc_genmcl.px_addrefoffto.extra i64 
    add                       i64 
    pop            pc_genmcl.px_addrefoffto.offset i64 
    setargs                   1 0
    push           2          i64 
    callfn         &pc_libmcl.ismemaddr i64 
    jumpfalse      #6933      i64 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    pop            pc_genmcl.px_addrefoffto.ax u64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    pop            pc_genmcl.px_addrefoffto.reg i64 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_addrefoffto.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_genmcl.px_addrefoffto.rx u64 
    setargs                   3 0
    push           pc_genmcl.px_addrefoffto.ax u64 
    push           pc_genmcl.px_addrefoffto.rx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #6934      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_addrefoffto.offset i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_addrefoffto.rx u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6935      
#6934: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_addrefoffto.bx u64 
    setargs                   2 0
    push           pc_genmcl.px_addrefoffto.scale i64 
    push           pc_genmcl.px_addrefoffto.bx u64 
    callproc       &pc_genmcl.mulimm 
    setargs                   3 0
    push           pc_genmcl.px_addrefoffto.bx u64 
    push           pc_genmcl.px_addrefoffto.rx u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
#6935: 
    setargs                   3 0
    push           pc_genmcl.px_addrefoffto.rx u64 
    push           pc_genmcl.px_addrefoffto.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_genmcl.px_addrefoffto.reg i64 
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_genmcl.px_addrefoffto.reg i64 
    popptroff                 u8 1 -1
    jump           #6936      
#6933: 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.px_addrefoffto.ax u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #6937      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_addrefoffto.offset i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_addrefoffto.ax u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6938      
#6937: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_addrefoffto.bx u64 
    setargs                   2 0
    push           pc_genmcl.px_addrefoffto.scale i64 
    push           pc_genmcl.px_addrefoffto.bx u64 
    callproc       &pc_genmcl.mulimm 
    setargs                   3 0
    push           pc_genmcl.px_addrefoffto.bx u64 
    push           pc_genmcl.px_addrefoffto.ax u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
#6938: 
#6936: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6939: 
    retproc                   
End


Proc pc_genmcl.px_subrefoffto:
    param          pc_genmcl.px_subrefoffto.p u64 
    local          pc_genmcl.px_subrefoffto.scale i64 
    local          pc_genmcl.px_subrefoffto.extra i64 
    local          pc_genmcl.px_subrefoffto.ax u64 
    local          pc_genmcl.px_subrefoffto.bx u64 
    procentry                 
    push           pc_genmcl.px_subrefoffto.p u64 
    push           16         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_subrefoffto.scale i64 
    push           pc_genmcl.px_subrefoffto.p u64 
    push           20         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_subrefoffto.extra i64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.px_subrefoffto.ax u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #6941      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    push           pc_genmcl.px_subrefoffto.scale i64 
    mul                       i64 
    push           pc_genmcl.px_subrefoffto.extra i64 
    add                       i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_subrefoffto.ax u64 
    push           30         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6942      
#6941: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_subrefoffto.bx u64 
    setargs                   2 0
    push           pc_genmcl.px_subrefoffto.scale i64 
    push           pc_genmcl.px_subrefoffto.bx u64 
    callfn         &pc_genmcl.scaleindex i64 
    pop            pc_genmcl.px_subrefoffto.scale i64 
    push           pc_genmcl.px_subrefoffto.scale i64 
    push           1          i64 
    jumple         #6943      i64 
    setargs                   2 0
    push           pc_genmcl.px_subrefoffto.scale i64 
    push           pc_genmcl.px_subrefoffto.bx u64 
    callproc       &pc_genmcl.mulimm 
#6943: 
    setargs                   3 0
    push           pc_genmcl.px_subrefoffto.bx u64 
    push           pc_genmcl.px_subrefoffto.ax u64 
    push           30         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_genmcl.px_subrefoffto.extra i64 
    jumpfalse      #6944      i64 
    setargs                   2 0
    push           ""         u64 
    push           "SUBTOREF/EXTRA" u64 
    callproc       &pc_libmcl.merror 
#6944: 
#6942: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6945: 
    retproc                   
End


Proc pc_genmcl.px_negto:
    param          pc_genmcl.px_negto.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_negto.p u64 
    callproc       &pc_genmcl.unimpl 
#6947: 
    retproc                   
End


Proc pc_genmcl.px_absto:
    param          pc_genmcl.px_absto.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_absto.p u64 
    callproc       &pc_genmcl.unimpl 
#6949: 
    retproc                   
End


Proc pc_genmcl.px_inotto:
    param          pc_genmcl.px_inotto.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_inotto.p u64 
    callproc       &pc_genmcl.unimpl 
#6951: 
    retproc                   
End


Proc pc_genmcl.px_notlto:
    param          pc_genmcl.px_notlto.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_notlto.p u64 
    callproc       &pc_genmcl.unimpl 
#6953: 
    retproc                   
End


Proc pc_genmcl.px_istruelto:
    param          pc_genmcl.px_istruelto.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_istruelto.p u64 
    callproc       &pc_genmcl.unimpl 
#6955: 
    retproc                   
End


Proc pc_genmcl.px_typepun:
    param          pc_genmcl.px_typepun.p u64 
    local          pc_genmcl.px_typepun.ax u64 
    local          pc_genmcl.px_typepun.bx u64 
    local          pc_genmcl.px_typepun.cx u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_typepun.bx u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_typepun.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6957      i64 0
    push           3          i64 
    casejumpeq     #6958      i64 0
    push           4          i64 
    casejumpeq     #6959      i64 0
    popstack                  i64 
    jump           #6960      
#6957: 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           2          i64 
    casejumpeq     #6961      i64 0
    push           1          i64 
    casejumpeq     #6962      i64 0
    popstack                  i64 
    jump           #6963      
#6961: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_d64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_typepun.ax u64 
    setargs                   3 0
    push           pc_genmcl.px_typepun.bx u64 
    push           pc_genmcl.px_typepun.ax u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #6964      
#6962: 
    jump           #6964      
#6963: 
    jump           #6965      
#6964: 
    jump           #6966      
#6958: 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           1          i64 
    casejumpeq     #6967      i64 0
    popstack                  i64 
    jump           #6968      
#6967: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_x64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_typepun.ax u64 
    setargs                   3 0
    push           pc_genmcl.px_typepun.bx u64 
    push           pc_genmcl.px_typepun.ax u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #6969      
#6968: 
    jump           #6965      
#6969: 
    jump           #6966      
#6959: 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           3          i64 
    casejumpeq     #6970      i64 0
    push           1          i64 
    casejumpeq     #6971      i64 0
    popstack                  i64 
    jump           #6972      
#6970: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_d64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_typepun.ax u64 
    setargs                   2 0
    push           4          i64 
    push           pc_genmcl.px_typepun.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    pop            pc_genmcl.px_typepun.cx u64 
    setargs                   3 0
    push           pc_genmcl.px_typepun.bx u64 
    push           pc_genmcl.px_typepun.cx u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   3 0
    push           pc_genmcl.px_typepun.cx u64 
    push           pc_genmcl.px_typepun.ax u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_genmcl.px_typepun.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #6973      i64 
    push           19         i64 
    resetmult                 
    jump           #6974      
#6973: 
    push           20         i64 
    endmult                   
#6974: 
    callproc       &pc_libmcl.genmc 
    jump           #6975      
#6971: 
    jump           #6975      
#6972: 
    jump           #6965      
#6975: 
    jump           #6966      
#6960: 
!error::
#6965: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "PSTDNAMES[P.MODE]=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pc_tables.pstdnames 
    push           pc_genmcl.px_typepun.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "FMTNAMES[PCLSTACK[1].FMT]=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pci_mcl.fmtnames 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "TYPEPUN"  u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           ""         u64 
    push           "TYPEPUN"  u64 
    callproc       &pc_libmcl.merror 
#6966: 
#6976: 
    retproc                   
End


Proc pc_genmcl.px_softconv:
    param          pc_genmcl.px_softconv.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_softconv.p u64 
    callproc       &pc_genmcl.unimpl 
#6978: 
    retproc                   
End


Proc pc_genmcl.px_widen:
    param          pc_genmcl.px_widen.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_widen.p u64 
    callproc       &pc_genmcl.unimpl 
#6980: 
    retproc                   
End


Proc pc_genmcl.px_narrow:
    param          pc_genmcl.px_narrow.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_narrow.p u64 
    callproc       &pc_genmcl.unimpl 
#6982: 
    retproc                   
End


Proc pc_genmcl.px_float:
    param          pc_genmcl.px_float.p u64 
    local          pc_genmcl.px_float.ax u64 
    local          pc_genmcl.px_float.fx u64 
    local          pc_genmcl.px_float.lab i64 
    local          pc_genmcl.px_float.lab2 i64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_float.ax u64 
    push           pc_genmcl.px_float.p u64 
    push           16         
    pushptroff                i32 1 0
    push           9          i64 
    casejumpeq     #6984      i64 0
    push           4          i64 
    casejumpeq     #6985      i64 0
    popstack                  i64 
    jump           #6986      
#6984: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_x64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_float.fx u64 
    setargs                   3 0
    push           pc_genmcl.px_float.ax u64 
    push           pc_genmcl.px_float.fx u64 
    push           85         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    jump           #6987      
#6985: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_x64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_float.fx u64 
    setargs                   0 0
    callfn         &pc_libmcl.mcreatefwdlabel i64 
    pop            pc_genmcl.px_float.lab i64 
    setargs                   0 0
    callfn         &pc_libmcl.mcreatefwdlabel i64 
    pop            pc_genmcl.px_float.lab2 i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           0          i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_float.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_float.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           12         i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.px_float.ax u64 
    push           pc_genmcl.px_float.fx u64 
    push           85         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_float.lab2 i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           26         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           pc_genmcl.px_float.lab i64 
    callproc       &pc_libmcl.mdefinefwdlabel 
    push           pci_mcl.labmask63 i64 
    jumptrue       #6988      i64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pci_mcl.labmask63 i64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pci_mcl.laboffset64 i64 
#6988: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.labmask63 i64 
    callfn         &pc_libmcl.mgenlabelmem u64 
    push           pc_genmcl.px_float.ax u64 
    push           39         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.px_float.ax u64 
    push           pc_genmcl.px_float.fx u64 
    push           85         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.laboffset64 i64 
    callfn         &pc_libmcl.mgenlabelmem u64 
    push           pc_genmcl.px_float.fx u64 
    push           68         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           pc_genmcl.px_float.lab2 i64 
    callproc       &pc_libmcl.mdefinefwdlabel 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    jump           #6987      
#6986: 
    setargs                   2 0
    push           pc_genmcl.px_float.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "float"    u64 
    callproc       &pc_libmcl.merrort 
#6987: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6989: 
    retproc                   
End


Proc pc_genmcl.px_fix:
    param          pc_genmcl.px_fix.p u64 
    local          pc_genmcl.px_fix.fx u64 
    local          pc_genmcl.px_fix.ax u64 
    local          pc_genmcl.px_fix.newmode i64 
    local          pc_genmcl.px_fix.oldmode i64 
    procentry                 
    push           pc_genmcl.px_fix.p u64 
    push           3          
    pushptroff                u8 1 0
    pop            pc_genmcl.px_fix.newmode i64 
    push           pc_genmcl.px_fix.p u64 
    push           16         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_fix.oldmode i64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_fix.newmode i64 
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6991      i64 0
    popstack                  i64 
    jump           #6992      
#6991: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_fix.fx u64 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_d64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_fix.ax u64 
    setargs                   3 0
    push           pc_genmcl.px_fix.fx u64 
    push           pc_genmcl.px_fix.ax u64 
    startmult                 
    push           pc_genmcl.px_fix.oldmode i64 
    push           12         i64 
    jumpne         #6993      i64 
    push           83         i64 
    resetmult                 
    jump           #6994      
#6993: 
    push           82         i64 
    endmult                   
#6994: 
    callproc       &pc_libmcl.genmc 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #6995      
#6992: 
    setargs                   2 0
    push           pc_genmcl.px_fix.newmode i64 
    push           "fix->"    u64 
    callproc       &pc_libmcl.merrort 
#6995: 
#6996: 
    retproc                   
End


Proc pc_genmcl.px_truncate:
    param          pc_genmcl.px_truncate.p u64 
    local          pc_genmcl.px_truncate.ax u64 
    local          pc_genmcl.px_truncate.mask i64 
    procentry                 
    push           &pc_tables.psize 
    push           pc_genmcl.px_truncate.p u64 
    push           16         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6998      i64 0
    push           2          i64 
    casejumpeq     #6999      i64 0
    push           4          i64 
    casejumpeq     #7000      i64 0
    popstack                  i64 
    jump           #7001      
#6998: 
    push           255        i64 
    pop            pc_genmcl.px_truncate.mask i64 
    jump           #7002      
#6999: 
    push           65535      i64 
    pop            pc_genmcl.px_truncate.mask i64 
    jump           #7002      
#7000: 
    push           4294967295 i64 
    pop            pc_genmcl.px_truncate.mask i64 
    jump           #7002      
#7001: 
#7002: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_truncate.ax u64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_truncate.mask i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_truncate.ax u64 
    push           39         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           &pc_tables.psize 
    push           pc_genmcl.px_truncate.p u64 
    push           16         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    push           pc_genmcl.px_truncate.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           pc_genmcl.px_truncate.ax u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_genmcl.px_truncate.p u64 
    push           16         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    jumpfalse      #7003      i64 
    push           19         i64 
    resetmult                 
    jump           #7004      
#7003: 
    push           20         i64 
    endmult                   
#7004: 
    callproc       &pc_libmcl.genmc 
#7005: 
    retproc                   
End


Proc pc_genmcl.px_fwiden:
    param          pc_genmcl.px_fwiden.p u64 
    local          pc_genmcl.px_fwiden.fx u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_fwiden.fx u64 
    setargs                   3 0
    push           pc_genmcl.px_fwiden.fx u64 
    push           pc_genmcl.px_fwiden.fx u64 
    push           87         i64 
    callproc       &pc_libmcl.genmc 
    push           2          i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
#7007: 
    retproc                   
End


Proc pc_genmcl.px_fnarrow:
    param          pc_genmcl.px_fnarrow.p u64 
    local          pc_genmcl.px_fnarrow.ax u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_fnarrow.ax u64 
    setargs                   3 0
    push           pc_genmcl.px_fnarrow.ax u64 
    push           pc_genmcl.px_fnarrow.ax u64 
    push           86         i64 
    callproc       &pc_libmcl.genmc 
    push           3          i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
#7009: 
    retproc                   
End


Proc pc_genmcl.px_softtruncw:
    param          pc_genmcl.px_softtruncw.p u64 
    local          pc_genmcl.px_softtruncw.ax u64 
    local          pc_genmcl.px_softtruncw.bx u64 
    local          pc_genmcl.px_softtruncw.bx2 u64 
    local          pc_genmcl.px_softtruncw.lx u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_softtruncw.ax u64 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.unsetwideopnd 
#7011: 
    retproc                   
End


Proc pc_genmcl.px_widenw:
    param          pc_genmcl.px_widenw.p u64 
    local          pc_genmcl.px_widenw.ax u64 
    local          pc_genmcl.px_widenw.bx u64 
    local          pc_genmcl.px_widenw.bx2 u64 
    local          pc_genmcl.px_widenw.lx u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_widenw.ax u64 
    setargs                   0 0
    callfn         &pc_stackmcl.genopnd_d64 u64 
    pop            pc_genmcl.px_widenw.bx u64 
    setargs                   2 0
    push           4          i64 
    push           pc_genmcl.px_widenw.bx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    pop            pc_genmcl.px_widenw.bx2 u64 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    push           &pc_tables.psigned 
    push           pc_genmcl.px_widenw.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #7013      i64 
    setargs                   3 0
    push           pc_genmcl.px_widenw.bx2 u64 
    push           pc_genmcl.px_widenw.bx2 u64 
    push           41         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           0          i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_widenw.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    callfn         &pc_libmcl.mgenlabel u64 
    store          pc_genmcl.px_widenw.lx u64 
    push           13         i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.px_widenw.bx u64 
    push           52         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.px_widenw.lx u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    jump           #7014      
#7013: 
    setargs                   3 0
    push           pc_genmcl.px_widenw.bx2 u64 
    push           pc_genmcl.px_widenw.bx2 u64 
    push           41         i64 
    callproc       &pc_libmcl.genmc 
#7014: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.setwideopnd 
#7015: 
    retproc                   
End


Proc pc_genmcl.px_len:
    param          pc_genmcl.px_len.p u64 
    procentry                 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.unsetwideopnd 
#7017: 
    retproc                   
End


Proc pc_genmcl.px_lwb:
    param          pc_genmcl.px_lwb.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_lwb.p u64 
    callproc       &pc_genmcl.unimpl 
#7019: 
    retproc                   
End


Proc pc_genmcl.px_upb:
    param          pc_genmcl.px_upb.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_upb.p u64 
    callproc       &pc_genmcl.unimpl 
#7021: 
    retproc                   
End


Proc pc_genmcl.px_bounds:
    param          pc_genmcl.px_bounds.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_bounds.p u64 
    callproc       &pc_genmcl.unimpl 
#7023: 
    retproc                   
End


Proc pc_genmcl.px_lenstr:
    param          pc_genmcl.px_lenstr.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_lenstr.p u64 
    callproc       &pc_genmcl.unimpl 
#7025: 
    retproc                   
End


Proc pc_genmcl.px_bitwidth:
    param          pc_genmcl.px_bitwidth.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_bitwidth.p u64 
    callproc       &pc_genmcl.unimpl 
#7027: 
    retproc                   
End


Proc pc_genmcl.px_bytesize:
    param          pc_genmcl.px_bytesize.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_bytesize.p u64 
    callproc       &pc_genmcl.unimpl 
#7029: 
    retproc                   
End


Proc pc_genmcl.px_bytes:
    param          pc_genmcl.px_bytes.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_bytes.p u64 
    callproc       &pc_genmcl.unimpl 
#7031: 
    retproc                   
End


Proc pc_genmcl.px_minvalue:
    param          pc_genmcl.px_minvalue.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_minvalue.p u64 
    callproc       &pc_genmcl.unimpl 
#7033: 
    retproc                   
End


Proc pc_genmcl.px_maxvalue:
    param          pc_genmcl.px_maxvalue.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_maxvalue.p u64 
    callproc       &pc_genmcl.unimpl 
#7035: 
    retproc                   
End


Proc pc_genmcl.px_typestr:
    param          pc_genmcl.px_typestr.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_typestr.p u64 
    callproc       &pc_genmcl.unimpl 
#7037: 
    retproc                   
End


Proc pc_genmcl.px_error:
    param          pc_genmcl.px_error.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_error.p u64 
    callproc       &pc_genmcl.unimpl 
#7039: 
    retproc                   
End


Proc pc_genmcl.px_arraytoslice:
    param          pc_genmcl.px_arraytoslice.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_arraytoslice.p u64 
    callproc       &pc_genmcl.unimpl 
#7041: 
    retproc                   
End


Proc pc_genmcl.px_ichartoslice:
    param          pc_genmcl.px_ichartoslice.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_ichartoslice.p u64 
    callproc       &pc_genmcl.unimpl 
#7043: 
    retproc                   
End


Proc pc_genmcl.px_softtruncshort:
    param          pc_genmcl.px_softtruncshort.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_softtruncshort.p u64 
    callproc       &pc_genmcl.unimpl 
#7045: 
    retproc                   
End


Proc pc_genmcl.px_charaxtoichar:
    param          pc_genmcl.px_charaxtoichar.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_charaxtoichar.p u64 
    callproc       &pc_genmcl.unimpl 
#7047: 
    retproc                   
End


Proc pc_genmcl.px_sliceptr:
    param          pc_genmcl.px_sliceptr.p u64 
    procentry                 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.unsetwideopnd 
#7049: 
    retproc                   
End


Proc pc_genmcl.px_startmult:
    param          pc_genmcl.px_startmult.p u64 
    procentry                 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.pushallopnds 
#7051: 
    retproc                   
End


Proc pc_genmcl.px_resetmult:
    param          pc_genmcl.px_resetmult.p u64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           3          
    pushptroff                u8 1 0
    jumpfalse      #7053      i64 
    setargs                   2 0
    push           ""         u64 
    push           "RESETMULT/XREG" u64 
    callproc       &pc_libmcl.merror 
    jump           #7054      
#7053: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.movetoreg 
#7054: 
    push           pc_genmcl.px_resetmult.p u64 
    push           1          
    pushptroff                u8 1 0
    push           192        i64 
    jumpne         #7055      i64 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7055: 
#7056: 
    retproc                   
End


Proc pc_genmcl.px_endmult:
    param          pc_genmcl.px_endmult.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_endmult.p u64 
    callproc       &pc_genmcl.px_resetmult 
#7058: 
    retproc                   
End


Proc pc_genmcl.px_setret:
    param          pc_genmcl.px_setret.p u64 
    procentry                 
    setargs                   2 0
    push           1          i64 
    push           1          i64 
    callproc       &pc_genmcl.do_setret 
    push           0          i64 
    push           &pci_mcl.regset 
    push           1          i64 
    popptroff                 u8 1 -1
    push           0          i64 
    push           &pci_mcl.xregset 
    push           1          i64 
    popptroff                 u8 1 -1
#7060: 
    retproc                   
End


Proc pc_genmcl.px_setretmult:
    param          pc_genmcl.px_setretmult.p u64 
    local          pc_genmcl.px_setretmult.k i64 
    local          pc_genmcl.px_setretmult.wide i64 
    local          pc_genmcl.px_setretmult.av_1 i64 
    local          pc_genmcl.px_setretmult.i i64 
    procentry                 
    push           0          i64 
    pop            pc_genmcl.px_setretmult.k i64 
#7062: 
    push           1          i64 
    pop            pc_genmcl.px_setretmult.i i64 
    push           pc_genmcl.px_setretmult.p u64 
    push           16         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_setretmult.av_1 i64 
    push           pc_genmcl.px_setretmult.av_1 i64 
    push           1          i64 
    jumplt         #7063      i64 
#7064: 
    push           &pc_genmcl.px_setretmult.k 
    incr                      i64 1
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           4          
    pushptroff                u8 1 0
    pop            pc_genmcl.px_setretmult.wide i64 
    setargs                   2 0
    push           &pc_genmcl.multxregs 
    push           pc_genmcl.px_setretmult.k i64 
    pushptroff                i64 8 -8
    push           &pc_genmcl.multregs 
    push           pc_genmcl.px_setretmult.k i64 
    pushptroff                i64 8 -8
    callproc       &pc_genmcl.do_setret 
#7065: 
    forup          #7064      i64 1
    opnd           pc_genmcl.px_setretmult.i 
    opnd           pc_genmcl.px_setretmult.av_1 
#7063: 
#7066: 
    push           1          i64 
    pop            pc_genmcl.px_setretmult.i i64 
    push           pc_genmcl.px_setretmult.k i64 
    push           1          i64 
    jumplt         #7067      i64 
#7068: 
    push           0          i64 
    push           &pci_mcl.xregset 
    push           &pc_genmcl.multxregs 
    push           pc_genmcl.px_setretmult.i i64 
    pushptroff                i64 8 -8
    storeptroff               u8 1 -1
    push           &pci_mcl.regset 
    push           &pc_genmcl.multregs 
    push           pc_genmcl.px_setretmult.i i64 
    pushptroff                i64 8 -8
    popptroff                 u8 1 -1
#7069: 
    forup          #7068      i64 1
    opnd           pc_genmcl.px_setretmult.i 
    opnd           pc_genmcl.px_setretmult.k 
#7067: 
#7070: 
    retproc                   
End


Proc pc_genmcl.px_setargs:
    param          pc_genmcl.px_setargs.p u64 
    local          pc_genmcl.px_setargs.nslots i64 
    local          pc_genmcl.px_setargs.shadow i64 
    local          pc_genmcl.px_setargs.align i64 
    local          pc_genmcl.px_setargs.nargs i64 
    local          pc_genmcl.px_setargs.opcode i64 
    local          pc_genmcl.px_setargs.nvars i64 
    procentry                 
    push           pc_genmcl.px_setargs.p u64 
    jumpfalse      #7072      u64 
    push           pc_genmcl.px_setargs.p u64 
    push           16         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_setargs.nargs i64 
    push           pc_genmcl.px_setargs.p u64 
    push           20         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_setargs.nvars i64 
    push           pc_genmcl.px_setargs.p u64 
    push           1          
    pushptroff                u8 1 0
    pop            pc_genmcl.px_setargs.opcode i64 
    jump           #7073      
#7072: 
    push           pci_mcl.sa_nargs i64 
    pop            pc_genmcl.px_setargs.nargs i64 
    push           0          i64 
    pop            pc_genmcl.px_setargs.nvars i64 
    push           0          i64 
    pop            pc_genmcl.px_setargs.opcode i64 
#7073: 
    push           0          i64 
    pop            pc_genmcl.px_setargs.nslots i64 
    push           0          i64 
    pop            pc_genmcl.px_setargs.shadow i64 
    push           0          i64 
    pop            pc_genmcl.px_setargs.align i64 
    push           pc_genmcl.px_setargs.opcode i64 
    push           196        i64 
    casejumpeq     #7074      i64 0
    popstack                  i64 
    jump           #7075      
#7074: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.saveallopnds 
    jump           #7076      
#7075: 
    setargs                   1 0
    push           pc_genmcl.px_setargs.nargs i64 
    push           1          i64 
    add                       i64 
    callproc       &pc_stackmcl.saveallopnds 
#7076: 
    push           pc_genmcl.px_setargs.nargs i64 
    push           4          i64 
    jumpgt         #7077      i64 
    push           pci_mcl.mstackdepth i64 
    push           0          i64 
    jumpne         #7078      i64 
    jump           #7079      
#7078: 
    push           1          i64 
    pop            pc_genmcl.px_setargs.shadow i64 
    push           pci_mcl.mstackdepth i64 
    push           0          i64 
    dotindex                  i64 
    pop            pc_genmcl.px_setargs.align i64 
    push           4          i64 
    pop            pc_genmcl.px_setargs.nslots i64 
#7079: 
    jump           #7080      
#7077: 
    push           1          i64 
    pop            pc_genmcl.px_setargs.shadow i64 
    push           pc_genmcl.px_setargs.nargs i64 
    pop            pc_genmcl.px_setargs.nslots i64 
    push           pci_mcl.mstackdepth i64 
    push           pc_genmcl.px_setargs.nslots i64 
    add                       i64 
    push           0          i64 
    dotindex                  i64 
    pop            pc_genmcl.px_setargs.align i64 
#7080: 
    push           &pc_genmcl.px_setargs.nslots 
    push           pc_genmcl.px_setargs.align i64 
    addto                     i64 
    push           pc_genmcl.px_setargs.align i64 
    jumpfalse      #7081      i64 
    push           pc_genmcl.px_setargs.opcode i64 
    push           196        i64 
    jumpne         #7082      i64 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.pushslots 
    push           0          i64 
    pop            pc_genmcl.px_setargs.align i64 
#7082: 
#7081: 
    push           pci_mcl.ncalldepth i64 
    push           16         i64 
    jumplt         #7083      i64 
    setargs                   2 0
    push           ""         u64 
    push           "Too many nested calls" u64 
    callproc       &pc_libmcl.merror 
#7083: 
    push           &pci_mcl.ncalldepth 
    incr                      i64 1
    push           pci_mcl.ncalldepth i64 
    push           1          i64 
    jumpge         #7084      i64 
    setargs                   1 0
    push           "CALLDEPTH?" u64 
    callproc       &mlibp.abortprogram 
#7084: 
    push           pc_genmcl.px_setargs.nargs i64 
    push           &pci_mcl.callargs 
    push           pci_mcl.ncalldepth i64 
    popptroff                 u8 1 -1
    push           pc_genmcl.px_setargs.nvars i64 
    push           &pci_mcl.callnvars 
    push           pci_mcl.ncalldepth i64 
    popptroff                 u8 1 -1
    push           pc_genmcl.px_setargs.nslots i64 
    push           &pci_mcl.callslots 
    push           pci_mcl.ncalldepth i64 
    popptroff                 i64 8 -8
    push           pc_genmcl.px_setargs.shadow i64 
    push           &pci_mcl.callshadow 
    push           pci_mcl.ncalldepth i64 
    popptroff                 i64 8 -8
    push           pc_genmcl.px_setargs.align i64 
    push           &pci_mcl.callalign 
    push           pci_mcl.ncalldepth i64 
    popptroff                 u8 1 -1
#7085: 
    retproc                   
End


Proc pc_genmcl.px_duplstack:
    param          pc_genmcl.px_duplstack.p u64 
    local          pc_genmcl.px_duplstack.ax u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_duplstack.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           5          i64 
    jumplt         #7087      i64 
    setargs                   2 0
    push           pc_genmcl.px_duplstack.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "duplstack" u64 
    callproc       &pc_libmcl.merrort 
#7087: 
    setargs                   0 0
    callproc       &pc_stackmcl.duploperand 
#7088: 
    retproc                   
End


Proc pc_genmcl.px_swapstack:
    param          pc_genmcl.px_swapstack.p u64 
    procentry                 
    setargs                   2 0
    push           pc_genmcl.px_swapstack.p u64 
    push           16         
    pushptroff                i32 1 0
    push           1          i64 
    add                       i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
#7090: 
    retproc                   
End


Proc pc_genmcl.px_getnprocs:
    param          pc_genmcl.px_getnprocs.p u64 
    procentry                 
    setargs                   0 0
    callproc       &pc_genmcl.dosetfntable 
    setargs                   2 0
    push           0          i64 
    push           pci_mcl.lab_funcnprocs i64 
    callproc       &pc_stackmcl.addlabel 
#7092: 
    retproc                   
End


Proc pc_genmcl.px_getprocname:
    param          pc_genmcl.px_getprocname.p u64 
    local          pc_genmcl.px_getprocname.ax u64 
    procentry                 
    setargs                   0 0
    callproc       &pc_genmcl.dosetfntable 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_getprocname.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #7094      i64 0
    popstack                  i64 
    jump           #7095      
#7094: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_getprocname.ax u64 
    setargs                   3 0
    setargs                   7 0
    push           0          u64 
    push           pci_mcl.lab_funcnametable i64 
    push           0          i64 
    push           -8         i64 
    push           8          i64 
    push           pc_genmcl.px_getprocname.ax u64 
    push           10         
    pushptroff                u8 1 0
    push           0          i64 
    callfn         &pc_libmcl.mgenindex u64 
    push           pc_genmcl.px_getprocname.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #7096      
#7095: 
    setargs                   2 0
    push           pc_genmcl.px_getprocname.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "gpn"      u64 
    callproc       &pc_libmcl.merrort 
#7096: 
#7097: 
    retproc                   
End


Proc pc_genmcl.px_getprocaddr:
    param          pc_genmcl.px_getprocaddr.p u64 
    local          pc_genmcl.px_getprocaddr.ax u64 
    procentry                 
    setargs                   0 0
    callproc       &pc_genmcl.dosetfntable 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_getprocaddr.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #7099      i64 0
    popstack                  i64 
    jump           #7100      
#7099: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_getprocaddr.ax u64 
    setargs                   3 0
    setargs                   7 0
    push           0          u64 
    push           pci_mcl.lab_funcaddrtable i64 
    push           0          i64 
    push           -8         i64 
    push           8          i64 
    push           pc_genmcl.px_getprocaddr.ax u64 
    push           10         
    pushptroff                u8 1 0
    push           0          i64 
    callfn         &pc_libmcl.mgenindex u64 
    push           pc_genmcl.px_getprocaddr.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #7101      
#7100: 
    setargs                   2 0
    push           pc_genmcl.px_getprocaddr.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "gpa"      u64 
    callproc       &pc_libmcl.merrort 
#7101: 
#7102: 
    retproc                   
End


Proc pc_genmcl.px_last:
    param          pc_genmcl.px_last.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_last.p u64 
    callproc       &pc_genmcl.unimpl 
#7104: 
    retproc                   
End


Proc pc_genmcl.dobin_float:
    param          pc_genmcl.dobin_float.opc i64 
    local          pc_genmcl.dobin_float.ax u64 
    local          pc_genmcl.dobin_float.bx u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dobin_float.ax u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dobin_float.bx u64 
    setargs                   3 0
    push           pc_genmcl.dobin_float.bx u64 
    push           pc_genmcl.dobin_float.ax u64 
    push           pc_genmcl.dobin_float.opc i64 
    callproc       &pc_libmcl.genmc 
#7106: 
    retproc                   
End


Proc pc_genmcl.do_pushparams: i64
    param          pc_genmcl.do_pushparams.p u64 
    param          pc_genmcl.do_pushparams.isptr i64 
    local          pc_genmcl.do_pushparams.pushedslots i64 
    local          pc_genmcl.do_pushparams.nparams i64 
    local          pc_genmcl.do_pushparams.nvars i64 
    local          pc_genmcl.do_pushparams.nargs i64 
    procentry                 
    push           pc_genmcl.do_pushparams.p u64 
    jumpfalse      #7108      u64 
    push           &pci_mcl.callargs 
    push           pci_mcl.ncalldepth i64 
    pushptroff                u8 1 -1
    pop            pc_genmcl.do_pushparams.nargs i64 
    push           &pci_mcl.callnvars 
    push           pci_mcl.ncalldepth i64 
    pushptroff                u8 1 -1
    pop            pc_genmcl.do_pushparams.nvars i64 
    jump           #7109      
#7108: 
    push           pci_mcl.sa_nargs i64 
    pop            pc_genmcl.do_pushparams.nargs i64 
    push           0          i64 
    pop            pc_genmcl.do_pushparams.isptr i64 
    push           0          i64 
    pop            pc_genmcl.do_pushparams.nvars i64 
#7109: 
    push           pc_genmcl.do_pushparams.nargs i64 
    push           pci_mcl.inf_maxargs i64 
    jumple         #7110      i64 
    push           pc_genmcl.do_pushparams.nargs i64 
    push           4          i64 
    jumpgt         #7110      i64 
    push           pc_genmcl.do_pushparams.nargs i64 
    pop            pci_mcl.inf_maxargs i64 
#7110: 
    push           pc_genmcl.do_pushparams.nargs i64 
    pop            pc_genmcl.do_pushparams.nparams i64 
    push           pc_genmcl.do_pushparams.nparams i64 
    push           4          i64 
    jumple         #7111      i64 
    setargs                   1 0
    push           pc_genmcl.do_pushparams.isptr i64 
    push           4          i64 
    add                       i64 
    push           1          i64 
    add                       i64 
    callproc       &pc_stackmcl.pushallopnds 
#7111: 
    setargs                   3 0
    push           pc_genmcl.do_pushparams.isptr i64 
    push           pc_genmcl.do_pushparams.nvars i64 
    push           pc_genmcl.do_pushparams.nparams i64 
    callproc       &pc_genmcl.do_pushlowparams 
    push           &pci_mcl.callshadow 
    push           pci_mcl.ncalldepth i64 
    pushptroff                i64 8 -8
    jumpfalse      #7112      i64 
    setargs                   1 0
    push           &pci_mcl.callalign 
    push           pci_mcl.ncalldepth i64 
    pushptroff                u8 1 -1
    push           4          i64 
    add                       i64 
    callproc       &pc_stackmcl.pushslots 
#7112: 
    push           &pci_mcl.callslots 
    push           pci_mcl.ncalldepth i64 
    pushptroff                i64 8 -8
    pop            pc_genmcl.do_pushparams.pushedslots i64 
    push           &pci_mcl.ncalldepth 
    decr                      i64 1
    push           pc_genmcl.do_pushparams.pushedslots i64 
    setret                    i64 
    jump           #7113      
#7113: 
    retfn                     i64 
End


Proc pc_genmcl.do_pushlowparams:
    param          pc_genmcl.do_pushlowparams.nparams i64 
    param          pc_genmcl.do_pushlowparams.nvariadics i64 
    param          pc_genmcl.do_pushlowparams.isptr i64 
    local          pc_genmcl.do_pushlowparams.ireg i64 
    local          pc_genmcl.do_pushlowparams.xreg i64 
    local          pc_genmcl.do_pushlowparams.j i64 
    local          pc_genmcl.do_pushlowparams.i i64 
    procentry                 
    push           pc_genmcl.do_pushlowparams.nparams i64 
    push           0          i64 
    jumpne         #7115      i64 
    jump           #7116      
#7115: 
    push           &pc_genmcl.do_pushlowparams.nparams 
    push           4          i64 
    minto                     i64 
#7117: 
    push           1          i64 
    pop            pc_genmcl.do_pushlowparams.i i64 
    push           pc_genmcl.do_pushlowparams.nparams i64 
    push           1          i64 
    jumplt         #7118      i64 
#7119: 
    push           pc_genmcl.do_pushlowparams.i i64 
    push           pc_genmcl.do_pushlowparams.isptr i64 
    add                       i64 
    pop            pc_genmcl.do_pushlowparams.j i64 
    push           11         i64 
    push           pc_genmcl.do_pushlowparams.i i64 
    add                       i64 
    push           1          i64 
    sub                       i64 
    pop            pc_genmcl.do_pushlowparams.ireg i64 
    push           1          i64 
    push           pc_genmcl.do_pushlowparams.i i64 
    add                       i64 
    push           1          i64 
    sub                       i64 
    pop            pc_genmcl.do_pushlowparams.xreg i64 
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.do_pushlowparams.j i64 
    addrefoff                 block:15 15 -15
    push           3          
    pushptroff                u8 1 0
    jumpfalse      #7120      i64 
    push           pc_genmcl.do_pushlowparams.nvariadics i64 
    jumpfalse      #7121      i64 
    push           pc_genmcl.do_pushlowparams.i i64 
    push           pc_genmcl.do_pushlowparams.nvariadics i64 
    jumpge         #7122      i64 
#7121: 
    push           0          i64 
    pop            pc_genmcl.do_pushlowparams.ireg i64 
#7122: 
    jump           #7123      
#7120: 
    push           0          i64 
    pop            pc_genmcl.do_pushlowparams.xreg i64 
#7123: 
    push           pc_genmcl.do_pushlowparams.ireg i64 
    jumpfalse      #7124      i64 
    setargs                   2 0
    push           pc_genmcl.do_pushlowparams.ireg i64 
    push           pc_genmcl.do_pushlowparams.j i64 
    callproc       &pc_stackmcl.loadparam 
#7124: 
    push           pc_genmcl.do_pushlowparams.xreg i64 
    jumpfalse      #7125      i64 
    setargs                   2 0
    push           pc_genmcl.do_pushlowparams.xreg i64 
    push           pc_genmcl.do_pushlowparams.j i64 
    callproc       &pc_stackmcl.loadxparam 
#7125: 
#7126: 
    forup          #7119      i64 1
    opnd           pc_genmcl.do_pushlowparams.i 
    opnd           pc_genmcl.do_pushlowparams.nparams 
#7118: 
#7116: 
    retproc                   
End


Proc pc_genmcl.do_for:
    param          pc_genmcl.do_for.p u64 
    param          pc_genmcl.do_for.incop i64 
    param          pc_genmcl.do_for.addop i64 
    param          pc_genmcl.do_for.cond i64 
    local          pc_genmcl.do_for.q u64 
    local          pc_genmcl.do_for.r u64 
    local          pc_genmcl.do_for.ax u64 
    local          pc_genmcl.do_for.bx u64 
    local          pc_genmcl.do_for.cx u64 
    local          pc_genmcl.do_for.dx u64 
    local          pc_genmcl.do_for.mx u64 
    local          pc_genmcl.do_for.reg i64 
    procentry                 
    push           pc_genmcl.do_for.p u64 
    push           1          i64 
    addrefoff                 u64 32 0
    pop            pc_genmcl.do_for.q u64 
    push           pc_genmcl.do_for.q u64 
    push           1          i64 
    addrefoff                 u64 32 0
    store          pc_genmcl.currpcl u64 
    pop            pc_genmcl.do_for.r u64 
    setargs                   1 0
    push           pc_genmcl.do_for.q u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    pop            pc_genmcl.do_for.mx u64 
    push           pc_genmcl.do_for.q u64 
    push           8          
    pushptroff                u64 1 0
    push           48         
    pushptroff                u8 1 0
    jumpfalse      #7128      i64 
    push           pc_genmcl.do_for.p u64 
    push           16         
    pushptroff                i32 1 0
    push           1          i64 
    jumpne         #7129      i64 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.do_for.mx u64 
    push           pc_genmcl.do_for.incop i64 
    callproc       &pc_libmcl.genmc 
    jump           #7130      
#7129: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.do_for.p u64 
    push           16         
    pushptroff                i32 1 0
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.do_for.mx u64 
    push           pc_genmcl.do_for.addop i64 
    callproc       &pc_libmcl.genmc 
#7130: 
    push           pc_genmcl.do_for.mx u64 
    pop            pc_genmcl.do_for.ax u64 
    jump           #7131      
#7128: 
    setargs                   2 0
    push           8          i64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_genmcl.do_for.ax u64 
    setargs                   3 0
    push           pc_genmcl.do_for.mx u64 
    push           pc_genmcl.do_for.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_genmcl.do_for.p u64 
    push           16         
    pushptroff                i32 1 0
    push           1          i64 
    jumpne         #7132      i64 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.do_for.ax u64 
    push           pc_genmcl.do_for.incop i64 
    callproc       &pc_libmcl.genmc 
    jump           #7133      
#7132: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.do_for.p u64 
    push           16         
    pushptroff                i32 1 0
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.do_for.ax u64 
    push           pc_genmcl.do_for.addop i64 
    callproc       &pc_libmcl.genmc 
#7133: 
    setargs                   3 0
    push           pc_genmcl.do_for.ax u64 
    push           pc_genmcl.do_for.mx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
#7131: 
    push           pc_genmcl.do_for.r u64 
    pushptr                   u8 
    push           4          i64 
    jumpne         #7134      i64 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.do_for.r u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenint u64 
    pop            pc_genmcl.do_for.bx u64 
    jump           #7135      
#7134: 
    setargs                   1 0
    push           pc_genmcl.do_for.r u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    pop            pc_genmcl.do_for.bx u64 
#7135: 
    setargs                   3 0
    push           pc_genmcl.do_for.bx u64 
    push           pc_genmcl.do_for.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_genmcl.do_for.ax u64 
    push           10         
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_genmcl.do_for.ax u64 
    push           10         
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.do_for.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    push           pc_genmcl.do_for.cond i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
#7136: 
    retproc                   
End


Proc pc_genmcl.dojumpcc:
    param          pc_genmcl.dojumpcc.p u64 
    local          pc_genmcl.dojumpcc.m i64 
    local          pc_genmcl.dojumpcc.cond i64 
    local          pc_genmcl.dojumpcc.ax u64 
    local          pc_genmcl.dojumpcc.bx u64 
    procentry                 
    push           pc_genmcl.dojumpcc.p u64 
    push           3          
    pushptroff                u8 1 0
    pop            pc_genmcl.dojumpcc.m i64 
    push           pc_genmcl.dojumpcc.p u64 
    push           3          
    pushptroff                u8 1 0
    push           10         i64 
    setjumpeq      #7138      i64 
    push           5          i64 
    setjumpne      #7139      i64 
#7138: 
    setargs                   1 0
    push           pc_genmcl.dojumpcc.p u64 
    callproc       &pc_genmcl.dojumpcc_i128 
    jump           #7140      
#7139: 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dojumpcc.ax u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dojumpcc.bx u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.dojumpcc.m i64 
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #7141      i64 0
    push           2          i64 
    casejumpeq     #7142      i64 0
    push           3          i64 
    casejumpeq     #7143      i64 0
    popstack                  i64 
    jump           #7144      
#7141: 
    push           &pc_tables.psigned 
    push           pc_genmcl.dojumpcc.m i64 
    pushptroff                u8 1 0
    jumpfalse      #7145      i64 
    push           &pc_genmcl.scondcodes 
    push           pc_genmcl.dojumpcc.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u8 1 -52
    pop            pc_genmcl.dojumpcc.cond i64 
    jump           #7146      
#7145: 
    push           &pc_genmcl.ucondcodes 
    push           pc_genmcl.dojumpcc.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u8 1 -52
    pop            pc_genmcl.dojumpcc.cond i64 
#7146: 
    setargs                   3 0
    push           pc_genmcl.dojumpcc.bx u64 
    push           pc_genmcl.dojumpcc.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    jump           #7147      
#7142: 
    push           &pc_genmcl.ucondcodes 
    push           pc_genmcl.dojumpcc.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u8 1 -52
    pop            pc_genmcl.dojumpcc.cond i64 
    setargs                   3 0
    push           pc_genmcl.dojumpcc.bx u64 
    push           pc_genmcl.dojumpcc.ax u64 
    push           72         i64 
    callproc       &pc_libmcl.genmc 
    jump           #7147      
#7143: 
    push           &pc_genmcl.ucondcodes 
    push           pc_genmcl.dojumpcc.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u8 1 -52
    pop            pc_genmcl.dojumpcc.cond i64 
    setargs                   3 0
    push           pc_genmcl.dojumpcc.bx u64 
    push           pc_genmcl.dojumpcc.ax u64 
    push           73         i64 
    callproc       &pc_libmcl.genmc 
    jump           #7147      
#7144: 
    setargs                   2 0
    push           pc_genmcl.dojumpcc.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "jumpcc:"  u64 
    callproc       &pc_libmcl.merrort 
#7147: 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.dojumpcc.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    push           pc_genmcl.dojumpcc.cond i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7140: 
    retproc                   
End


Proc pc_genmcl.dosetcc:
    param          pc_genmcl.dosetcc.p u64 
    local          pc_genmcl.dosetcc.m i64 
    local          pc_genmcl.dosetcc.cond i64 
    local          pc_genmcl.dosetcc.ax u64 
    local          pc_genmcl.dosetcc.bx u64 
    procentry                 
    push           pc_genmcl.dosetcc.p u64 
    push           3          
    pushptroff                u8 1 0
    pop            pc_genmcl.dosetcc.m i64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dosetcc.ax u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dosetcc.bx u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.dosetcc.m i64 
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #7149      i64 0
    push           2          i64 
    casejumpeq     #7150      i64 0
    push           3          i64 
    casejumpeq     #7151      i64 0
    popstack                  i64 
    jump           #7152      
#7149: 
    push           &pc_tables.psigned 
    push           pc_genmcl.dosetcc.m i64 
    pushptroff                u8 1 0
    jumpfalse      #7153      i64 
    push           &pc_genmcl.scondcodes 
    push           pc_genmcl.dosetcc.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u8 1 -65
    pop            pc_genmcl.dosetcc.cond i64 
    jump           #7154      
#7153: 
    push           &pc_genmcl.ucondcodes 
    push           pc_genmcl.dosetcc.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u8 1 -65
    pop            pc_genmcl.dosetcc.cond i64 
#7154: 
    setargs                   3 0
    push           pc_genmcl.dosetcc.bx u64 
    push           pc_genmcl.dosetcc.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    jump           #7155      
#7150: 
    push           &pc_genmcl.ucondcodes 
    push           pc_genmcl.dosetcc.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u8 1 -65
    pop            pc_genmcl.dosetcc.cond i64 
    setargs                   3 0
    push           pc_genmcl.dosetcc.bx u64 
    push           pc_genmcl.dosetcc.ax u64 
    push           72         i64 
    callproc       &pc_libmcl.genmc 
    jump           #7155      
#7151: 
    push           &pc_genmcl.ucondcodes 
    push           pc_genmcl.dosetcc.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u8 1 -65
    pop            pc_genmcl.dosetcc.cond i64 
    setargs                   3 0
    push           pc_genmcl.dosetcc.bx u64 
    push           pc_genmcl.dosetcc.ax u64 
    push           73         i64 
    callproc       &pc_libmcl.genmc 
    jump           #7155      
#7152: 
    setargs                   2 0
    push           pc_genmcl.dosetcc.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "setcc:"   u64 
    callproc       &pc_libmcl.merrort 
#7155: 
    setargs                   4 0
    push           0          u64 
    setargs                   2 0
    push           1          i64 
    push           pc_genmcl.dosetcc.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    store          pc_genmcl.dosetcc.bx u64 
    push           pc_genmcl.dosetcc.cond i64 
    push           59         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.dosetcc.bx u64 
    setargs                   2 0
    push           4          i64 
    push           pc_genmcl.dosetcc.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           20         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7156: 
    retproc                   
End


Proc pc_genmcl.do_setretfloat:
    param          pc_genmcl.do_setretfloat.destreg i64 
    local          pc_genmcl.do_setretfloat.currreg i64 
    local          pc_genmcl.do_setretfloat.ax u64 
    local          pc_genmcl.do_setretfloat.rx u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.do_setretfloat.destreg i64 
    callfn         &pc_libmcl.mgenxreg u64 
    pop            pc_genmcl.do_setretfloat.rx u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.do_setretfloat.ax u64 
    push           pc_genmcl.do_setretfloat.ax u64 
    push           10         
    pushptroff                u8 1 0
    pop            pc_genmcl.do_setretfloat.currreg i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           2          i64 
    casejumpeq     #7158      i64 0
    popstack                  i64 
    jump           #7159      
#7158: 
    push           pc_genmcl.do_setretfloat.currreg i64 
    push           pc_genmcl.do_setretfloat.destreg i64 
    jumpeq         #7160      i64 
    push           &pci_mcl.regset 
    push           pc_genmcl.do_setretfloat.destreg i64 
    pushptroff                u8 1 -1
    jumpfalse      #7161      i64 
    setargs                   2 0
    push           ""         u64 
    push           "setretfloat/dest in use" u64 
    callproc       &pc_libmcl.merror 
    jump           #7162      
#7161: 
    setargs                   3 0
    push           pc_genmcl.do_setretfloat.ax u64 
    push           pc_genmcl.do_setretfloat.rx u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    push           1          i64 
    push           &pci_mcl.xregset 
    push           pc_genmcl.do_setretfloat.destreg i64 
    popptroff                 u8 1 -1
#7162: 
#7160: 
    jump           #7163      
#7159: 
    setargs                   2 0
    push           ""         u64 
    push           "setretf?" u64 
    callproc       &pc_libmcl.merror 
#7163: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7164: 
    retproc                   
End


Proc pc_genmcl.do_setret:
    param          pc_genmcl.do_setret.destreg i64 
    param          pc_genmcl.do_setret.destxreg i64 
    local          pc_genmcl.do_setret.currreg i64 
    local          pc_genmcl.do_setret.ax u64 
    local          pc_genmcl.do_setret.rx u64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           3          
    pushptroff                u8 1 0
    jumpfalse      #7166      i64 
    setargs                   1 0
    push           pc_genmcl.do_setret.destxreg i64 
    callproc       &pc_genmcl.do_setretfloat 
    jump           #7167      
#7166: 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.do_setret.destreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_genmcl.do_setret.rx u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.do_setret.ax u64 
    push           pc_genmcl.do_setret.ax u64 
    push           10         
    pushptroff                u8 1 0
    pop            pc_genmcl.do_setret.currreg i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #7168      i64 0
    popstack                  i64 
    jump           #7169      
#7168: 
    push           pc_genmcl.do_setret.currreg i64 
    push           pc_genmcl.do_setret.destreg i64 
    jumpeq         #7170      i64 
    push           &pci_mcl.regset 
    push           pc_genmcl.do_setret.destreg i64 
    pushptroff                u8 1 -1
    jumpfalse      #7171      i64 
    setargs                   1 0
    push           pc_genmcl.do_setret.destreg i64 
    callproc       &pc_stackmcl.swapopndregs 
    setargs                   3 0
    push           pc_genmcl.do_setret.ax u64 
    push           pc_genmcl.do_setret.rx u64 
    push           28         i64 
    callproc       &pc_libmcl.genmc 
    jump           #7172      
#7171: 
    setargs                   3 0
    push           pc_genmcl.do_setret.ax u64 
    push           pc_genmcl.do_setret.rx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
#7172: 
#7170: 
    jump           #7173      
#7169: 
    setargs                   2 0
    push           ""         u64 
    push           "setret?"  u64 
    callproc       &pc_libmcl.merror 
#7173: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    push           1          i64 
    push           &pci_mcl.regset 
    push           pc_genmcl.do_setret.destreg i64 
    popptroff                 u8 1 -1
    push           0          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_genmcl.do_setret.destreg i64 
    popptroff                 u8 1 -1
#7167: 
    retproc                   
End


Proc pc_genmcl.dogetretvalue:
    param          pc_genmcl.dogetretvalue.p u64 
    local          pc_genmcl.dogetretvalue.reg i64 
    local          pc_genmcl.dogetretvalue.xreg i64 
    local          pc_genmcl.dogetretvalue.i i64 
    local          pc_genmcl.dogetretvalue.n i64 
    local          pc_genmcl.dogetretvalue.cats block:80 
    procentry                 
    push           pc_genmcl.dogetretvalue.p u64 
    push           1          i64 
    addrefoff                 u64 32 0
    push           1          
    pushptroff                u8 1 0
    push           27         i64 
    jumpne         #7175      i64 
    push           0          i64 
    pop            pc_genmcl.dogetretvalue.n i64 
    jump           #7176      
#7177: 
    push           &pc_tables.pcat 
    push           pc_genmcl.dogetretvalue.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           &pc_genmcl.dogetretvalue.cats 
    push           &pc_genmcl.dogetretvalue.n 
    incrload                  i64 1
    popptroff                 i64 8 -8
#7176: 
    push           &pc_genmcl.dogetretvalue.p 
    incrload                  u64 32
    push           1          
    pushptroff                u8 1 0
    push           27         i64 
    jumpeq         #7177      i64 
#7178: 
    push           pc_genmcl.dogetretvalue.p u64 
    push           1          i64 
    subrefoff                 u64 32 0
    pop            pc_genmcl.currpcl u64 
#7179: 
    push           pc_genmcl.dogetretvalue.n i64 
    pop            pc_genmcl.dogetretvalue.i i64 
    push           pc_genmcl.dogetretvalue.i i64 
    push           1          i64 
    jumplt         #7180      i64 
#7181: 
    push           &pc_genmcl.dogetretvalue.cats 
    push           pc_genmcl.dogetretvalue.i i64 
    pushptroff                i64 8 -8
    push           4          i64 
    casejumpeq     #7182      i64 0
    push           5          i64 
    casejumpeq     #7182      i64 0
    popstack                  i64 
    jump           #7183      
#7182: 
    setargs                   2 0
    push           ""         u64 
    push           "Short/wide mulret type" u64 
    callproc       &pc_libmcl.merror 
    jump           #7184      
#7183: 
#7184: 
    setargs                   3 0
    push           &pc_genmcl.dogetretvalue.cats 
    push           pc_genmcl.dogetretvalue.i i64 
    pushptroff                i64 8 -8
    push           &pc_genmcl.multxregs 
    push           pc_genmcl.dogetretvalue.i i64 
    pushptroff                i64 8 -8
    push           &pc_genmcl.multregs 
    push           pc_genmcl.dogetretvalue.i i64 
    pushptroff                i64 8 -8
    callproc       &pc_genmcl.dogetretvalue_n 
#7185: 
    fordown        #7181      i64 1
    opnd           pc_genmcl.dogetretvalue.i 
    opnd           1          
#7180: 
    jump           #7186      
#7175: 
    setargs                   3 0
    push           &pc_tables.pcat 
    push           pc_genmcl.dogetretvalue.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    push           1          i64 
    callproc       &pc_genmcl.dogetretvalue_n 
    push           &pc_tables.pcat 
    push           pc_genmcl.dogetretvalue.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           4          i64 
    jumpne         #7187      i64 
    setargs                   3 0
    setargs                   2 0
    push           pc_genmcl.dogetretvalue.p u64 
    push           4          
    pushptroff                i32 1 0
    push           1          i64 
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_libmcl.mgenreg u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_genmcl.dogetretvalue.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #7188      i64 
    push           19         i64 
    resetmult                 
    jump           #7189      
#7188: 
    push           20         i64 
    endmult                   
#7189: 
    callproc       &pc_libmcl.genmc 
#7187: 
#7186: 
#7190: 
    retproc                   
End


Proc pc_genmcl.dogetretvalue_n:
    param          pc_genmcl.dogetretvalue_n.reg i64 
    param          pc_genmcl.dogetretvalue_n.xreg i64 
    param          pc_genmcl.dogetretvalue_n.cat i64 
    procentry                 
    push           pc_genmcl.dogetretvalue_n.cat i64 
    push           1          i64 
    casejumpeq     #7192      i64 0
    push           4          i64 
    casejumpeq     #7192      i64 0
    push           3          i64 
    casejumpeq     #7193      i64 0
    push           2          i64 
    casejumpeq     #7194      i64 0
    push           5          i64 
    casejumpeq     #7195      i64 0
    popstack                  i64 
    jump           #7196      
#7192: 
    setargs                   1 0
    push           pc_genmcl.dogetretvalue_n.reg i64 
    callproc       &pc_stackmcl.addreg0 
    jump           #7197      
#7193: 
    setargs                   2 0
    push           2          i64 
    push           pc_genmcl.dogetretvalue_n.xreg i64 
    callproc       &pc_stackmcl.addxreg0 
    jump           #7197      
#7194: 
    setargs                   2 0
    push           3          i64 
    push           pc_genmcl.dogetretvalue_n.xreg i64 
    callproc       &pc_stackmcl.addxreg0 
    jump           #7197      
#7195: 
    setargs                   1 0
    push           pc_genmcl.dogetretvalue_n.reg i64 
    callproc       &pc_stackmcl.addwidereg0 
    jump           #7197      
#7196: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pc_tables.pstdnames 
    push           pc_genmcl.dogetretvalue_n.cat i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           ""         u64 
    push           "getretval/n?" u64 
    callproc       &pc_libmcl.merror 
#7197: 
#7198: 
    retproc                   
End


Proc pc_genmcl.do_shift:
    param          pc_genmcl.do_shift.p u64 
    param          pc_genmcl.do_shift.opc i64 
    local          pc_genmcl.do_shift.ax u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.do_shift.ax u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #7200      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.do_shift.ax u64 
    push           pc_genmcl.do_shift.opc i64 
    callproc       &pc_libmcl.genmc 
    jump           #7201      
#7200: 
    push           pci_mcl.inf_r10used i64 
    jumpfalse      #7202      i64 
    setargs                   2 0
    push           ""         u64 
    push           "shift:cl in use" u64 
    callproc       &pc_libmcl.merror 
#7202: 
    setargs                   2 0
    push           11         i64 
    push           1          i64 
    callproc       &pc_stackmcl.loadparam 
    setargs                   3 0
    setargs                   2 0
    push           1          i64 
    push           11         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           pc_genmcl.do_shift.ax u64 
    push           pc_genmcl.do_shift.opc i64 
    callproc       &pc_libmcl.genmc 
#7201: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7203: 
    retproc                   
End


Proc pc_genmcl.mulimm:
    param          pc_genmcl.mulimm.ax u64 
    param          pc_genmcl.mulimm.n i64 
    local          pc_genmcl.mulimm.shifts i64 
    local          pc_genmcl.mulimm.m i64 
    procentry                 
    push           pc_genmcl.mulimm.n i64 
    push           0          i64 
    casejumpeq     #7205      i64 0
    push           1          i64 
    casejumpeq     #7206      i64 0
    push           -1         i64 
    casejumpeq     #7207      i64 0
    popstack                  i64 
    jump           #7208      
#7205: 
    setargs                   3 0
    push           pc_genmcl.mulimm.ax u64 
    push           pc_genmcl.mulimm.ax u64 
    push           41         i64 
    callproc       &pc_libmcl.genmc 
    jump           #7209      
    jump           #7210      
#7206: 
    jump           #7209      
    jump           #7210      
#7207: 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.mulimm.ax u64 
    push           51         i64 
    callproc       &pc_libmcl.genmc 
    jump           #7209      
    jump           #7210      
#7208: 
#7210: 
    push           0          i64 
    pop            pc_genmcl.mulimm.shifts i64 
    push           pc_genmcl.mulimm.n i64 
    pop            pc_genmcl.mulimm.m i64 
    jump           #7211      
#7212: 
    push           &pc_genmcl.mulimm.m 
    push           1          i64 
    shrto                     i64 
    push           &pc_genmcl.mulimm.shifts 
    incr                      i64 1
#7211: 
    push           pc_genmcl.mulimm.m i64 
    push           0          i64 
    dotindex                  i64 
    jumpfalse      #7212      i64 
#7213: 
    push           pc_genmcl.mulimm.shifts i64 
    jumpfalse      #7214      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.mulimm.shifts i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.mulimm.ax u64 
    push           44         i64 
    callproc       &pc_libmcl.genmc 
#7214: 
    push           pc_genmcl.mulimm.m i64 
    push           1          i64 
    casejumpeq     #7215      i64 0
    push           3          i64 
    casejumpeq     #7216      i64 0
    push           5          i64 
    casejumpeq     #7216      i64 0
    push           9          i64 
    casejumpeq     #7216      i64 0
    popstack                  i64 
    jump           #7217      
#7215: 
    jump           #7209      
    jump           #7218      
#7216: 
    setargs                   3 0
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           0          i64 
    push           0          i64 
    push           pc_genmcl.mulimm.m i64 
    push           1          i64 
    sub                       i64 
    push           pc_genmcl.mulimm.ax u64 
    push           10         
    pushptroff                u8 1 0
    push           pc_genmcl.mulimm.ax u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenindex u64 
    push           pc_genmcl.mulimm.ax u64 
    push           15         i64 
    callproc       &pc_libmcl.genmc 
    jump           #7218      
#7217: 
    push           pc_genmcl.mulimm.shifts i64 
    jumpfalse      #7219      i64 
    push           35         i64 
    push           pci_mcl.mccodex u64 
    push           24         
    popptroff                 u8 1 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.mulimm.n i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pci_mcl.mccodex u64 
    push           16         
    popptroff                 u64 1 0
    jump           #7220      
#7219: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.mulimm.n i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.mulimm.ax u64 
    push           35         i64 
    callproc       &pc_libmcl.genmc 
#7220: 
#7218: 
#7209: 
    retproc                   
End


Proc pc_genmcl.dojumptruefalse:
    param          pc_genmcl.dojumptruefalse.p u64 
    param          pc_genmcl.dojumptruefalse.cond i64 
    local          pc_genmcl.dojumptruefalse.ax u64 
    local          pc_genmcl.dojumptruefalse.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.dojumptruefalse.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #7222      i64 0
    popstack                  i64 
    jump           #7223      
#7222: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dojumptruefalse.ax u64 
    setargs                   3 0
    push           pc_genmcl.dojumptruefalse.ax u64 
    push           pc_genmcl.dojumptruefalse.ax u64 
    push           42         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.dojumptruefalse.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    push           pc_genmcl.dojumptruefalse.cond i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    jump           #7224      
#7223: 
    setargs                   2 0
    push           pc_genmcl.dojumptruefalse.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "jumptrue/false" u64 
    callproc       &pc_libmcl.merrort 
#7224: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7225: 
    retproc                   
End


Proc pc_genmcl.dobitwise:
    param          pc_genmcl.dobitwise.p u64 
    param          pc_genmcl.dobitwise.opc i64 
    local          pc_genmcl.dobitwise.ax u64 
    local          pc_genmcl.dobitwise.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.dobitwise.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #7227      i64 0
    push           5          i64 
    casejumpeq     #7228      i64 0
    popstack                  i64 
    jump           #7229      
#7227: 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dobitwise.ax u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dobitwise.bx u64 
    setargs                   3 0
    push           pc_genmcl.dobitwise.bx u64 
    push           pc_genmcl.dobitwise.ax u64 
    push           pc_genmcl.dobitwise.opc i64 
    callproc       &pc_libmcl.genmc 
    jump           #7230      
#7228: 
    setargs                   3 0
    push           pc_genmcl.dobitwise.opc i64 
    push           pc_genmcl.dobitwise.opc i64 
    push           pc_genmcl.dobitwise.p u64 
    callproc       &pc_genmcl.dobin_i128 
    jump           #7231      
    jump           #7230      
#7229: 
    setargs                   2 0
    push           pc_genmcl.dobitwise.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "bitwise:" u64 
    callproc       &pc_libmcl.merrort 
#7230: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7231: 
    retproc                   
End


Proc pc_genmcl.do_addrmode: u64
    param          pc_genmcl.do_addrmode.p u64 
    local          pc_genmcl.do_addrmode.px u64 
    local          pc_genmcl.do_addrmode.ax u64 
    local          pc_genmcl.do_addrmode.bx u64 
    local          pc_genmcl.do_addrmode.m i64 
    local          pc_genmcl.do_addrmode.scale i64 
    local          pc_genmcl.do_addrmode.extra i64 
    local          pc_genmcl.do_addrmode.offset i64 
    local          pc_genmcl.do_addrmode.reg i64 
    local          pc_genmcl.do_addrmode.regix i64 
    local          pc_genmcl.do_addrmode.d u64 
    procentry                 
    push           pc_genmcl.do_addrmode.p u64 
    push           16         
    pushptroff                i32 1 0
    pop            pc_genmcl.do_addrmode.scale i64 
    push           pc_genmcl.do_addrmode.p u64 
    push           20         
    pushptroff                i32 1 0
    pop            pc_genmcl.do_addrmode.extra i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    push           pc_genmcl.do_addrmode.scale i64 
    mul                       i64 
    push           pc_genmcl.do_addrmode.extra i64 
    add                       i64 
    pop            pc_genmcl.do_addrmode.offset i64 
    push           pc_genmcl.do_addrmode.p u64 
    push           3          
    pushptroff                u8 1 0
    pop            pc_genmcl.do_addrmode.m i64 
    push           0          u64 
    pop            pc_genmcl.do_addrmode.px u64 
    setargs                   1 0
    push           2          i64 
    callfn         &pc_libmcl.isregvaropnd i64 
    jumpfalse      #7233      i64 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.isregvaropnd i64 
    jumpfalse      #7234      i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_genmcl.do_addrmode.reg i64 
    setargs                   3 0
    push           1          i64 
    push           &pc_genmcl.do_addrmode.scale 
    push           pc_genmcl.do_addrmode.reg i64 
    callfn         &pc_genmcl.scaleregvar i64 
    pop            pc_genmcl.do_addrmode.regix i64 
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           0          i64 
    push           pc_genmcl.do_addrmode.extra i64 
    push           pc_genmcl.do_addrmode.scale i64 
    push           pc_genmcl.do_addrmode.regix i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenindex u64 
    pop            pc_genmcl.do_addrmode.px u64 
    jump           #7235      
#7234: 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.isimm64 i64 
    jumpfalse      #7236      i64 
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           0          i64 
    push           pc_genmcl.do_addrmode.offset i64 
    push           1          i64 
    push           0          i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenindex u64 
    pop            pc_genmcl.do_addrmode.px u64 
    jump           #7235      
#7236: 
    setargs                   2 0
    push           pc_genmcl.do_addrmode.scale i64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    store          pc_genmcl.do_addrmode.bx u64 
    callfn         &pc_genmcl.scaleindex i64 
    pop            pc_genmcl.do_addrmode.scale i64 
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           0          i64 
    push           pc_genmcl.do_addrmode.extra i64 
    push           pc_genmcl.do_addrmode.scale i64 
    push           pc_genmcl.do_addrmode.bx u64 
    push           10         
    pushptroff                u8 1 0
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenindex u64 
    pop            pc_genmcl.do_addrmode.px u64 
#7235: 
    jump           #7237      
#7233: 
    setargs                   1 0
    push           2          i64 
    callfn         &pc_libmcl.ismemaddr i64 
    jumpfalse      #7238      i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    pop            pc_genmcl.do_addrmode.d u64 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.isregvaropnd i64 
    jumpfalse      #7239      i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_genmcl.do_addrmode.reg i64 
    setargs                   3 0
    push           1          i64 
    push           &pc_genmcl.do_addrmode.scale 
    push           pc_genmcl.do_addrmode.reg i64 
    callfn         &pc_genmcl.scaleregvar i64 
    pop            pc_genmcl.do_addrmode.regix i64 
    setargs                   7 0
    push           pc_genmcl.do_addrmode.d u64 
    push           0          i64 
    push           0          i64 
    push           pc_genmcl.do_addrmode.extra i64 
    push           pc_genmcl.do_addrmode.scale i64 
    push           pc_genmcl.do_addrmode.regix i64 
    push           0          i64 
    callfn         &pc_libmcl.mgenindex u64 
    pop            pc_genmcl.do_addrmode.px u64 
    jump           #7240      
#7239: 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.isimm64 i64 
    jumpfalse      #7241      i64 
    setargs                   7 0
    push           pc_genmcl.do_addrmode.d u64 
    push           0          i64 
    push           0          i64 
    push           pc_genmcl.do_addrmode.offset i64 
    push           1          i64 
    push           0          i64 
    push           0          i64 
    callfn         &pc_libmcl.mgenindex u64 
    pop            pc_genmcl.do_addrmode.px u64 
    jump           #7240      
#7241: 
    setargs                   2 0
    push           pc_genmcl.do_addrmode.scale i64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    store          pc_genmcl.do_addrmode.bx u64 
    callfn         &pc_genmcl.scaleindex i64 
    pop            pc_genmcl.do_addrmode.scale i64 
    setargs                   7 0
    push           pc_genmcl.do_addrmode.d u64 
    push           0          i64 
    push           0          i64 
    push           pc_genmcl.do_addrmode.extra i64 
    push           pc_genmcl.do_addrmode.scale i64 
    push           pc_genmcl.do_addrmode.bx u64 
    push           10         
    pushptroff                u8 1 0
    push           0          i64 
    callfn         &pc_libmcl.mgenindex u64 
    pop            pc_genmcl.do_addrmode.px u64 
#7240: 
    jump           #7237      
#7238: 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.do_addrmode.ax u64 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.isregvaropnd i64 
    jumpfalse      #7242      i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_genmcl.do_addrmode.reg i64 
    setargs                   3 0
    push           1          i64 
    push           &pc_genmcl.do_addrmode.scale 
    push           pc_genmcl.do_addrmode.reg i64 
    callfn         &pc_genmcl.scaleregvar i64 
    pop            pc_genmcl.do_addrmode.regix i64 
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           0          i64 
    push           pc_genmcl.do_addrmode.extra i64 
    push           pc_genmcl.do_addrmode.scale i64 
    push           pc_genmcl.do_addrmode.regix i64 
    push           pc_genmcl.do_addrmode.ax u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenindex u64 
    pop            pc_genmcl.do_addrmode.px u64 
    jump           #7243      
#7242: 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.isimm64 i64 
    jumpfalse      #7244      i64 
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           0          i64 
    push           pc_genmcl.do_addrmode.offset i64 
    push           1          i64 
    push           0          i64 
    push           pc_genmcl.do_addrmode.ax u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenindex u64 
    pop            pc_genmcl.do_addrmode.px u64 
    jump           #7243      
#7244: 
    setargs                   2 0
    push           pc_genmcl.do_addrmode.scale i64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    store          pc_genmcl.do_addrmode.bx u64 
    callfn         &pc_genmcl.scaleindex i64 
    pop            pc_genmcl.do_addrmode.scale i64 
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           0          i64 
    push           pc_genmcl.do_addrmode.extra i64 
    push           pc_genmcl.do_addrmode.scale i64 
    push           pc_genmcl.do_addrmode.bx u64 
    push           10         
    pushptroff                u8 1 0
    push           pc_genmcl.do_addrmode.ax u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenindex u64 
    pop            pc_genmcl.do_addrmode.px u64 
#7243: 
#7237: 
    push           pc_genmcl.do_addrmode.px u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #7245      i64 
    push           pc_genmcl.do_addrmode.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_genmcl.do_addrmode.px u64 
    push           8          
    popptroff                 u8 1 0
#7245: 
    push           pc_genmcl.do_addrmode.px u64 
    setret                    u64 
    jump           #7246      
#7246: 
    retfn                     u64 
End


Proc pc_genmcl.scaleregvar: i64
    param          pc_genmcl.scaleregvar.reg i64 
    param          pc_genmcl.scaleregvar.scale u64 
    param          pc_genmcl.scaleregvar.n i64 
    local          pc_genmcl.scaleregvar.regix i64 
    local          pc_genmcl.scaleregvar.ax u64 
    procentry                 
    push           pc_genmcl.scaleregvar.scale u64 
    pushptr                   i64 
    push           1          i64 
    setjumpeq      #7248      i64 
    push           2          i64 
    setjumpeq      #7248      i64 
    push           4          i64 
    setjumpeq      #7248      i64 
    push           8          i64 
    setjumpne      #7249      i64 
#7248: 
    push           pc_genmcl.scaleregvar.reg i64 
    setret                    i64 
    jump           #7250      
#7249: 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    pop            pc_genmcl.scaleregvar.regix i64 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.scaleregvar.regix i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_genmcl.scaleregvar.ax u64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.scaleregvar.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           pc_genmcl.scaleregvar.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.scaleregvar.n i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.scaleregvar.n i64 
    addrefoff                 block:15 15 -15
    push           1          
    popptroff                 u8 1 0
    push           pc_genmcl.scaleregvar.regix i64 
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.scaleregvar.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    setargs                   2 0
    push           pc_genmcl.scaleregvar.scale u64 
    pushptr                   i64 
    push           pc_genmcl.scaleregvar.ax u64 
    callproc       &pc_genmcl.mulimm 
    push           1          i64 
    push           pc_genmcl.scaleregvar.scale u64 
    popptr                    i64 
    push           pc_genmcl.scaleregvar.regix i64 
    setret                    i64 
    jump           #7250      
#7250: 
    retfn                     i64 
End


Proc pc_genmcl.scaleindex: i64
    param          pc_genmcl.scaleindex.ax u64 
    param          pc_genmcl.scaleindex.scale i64 
    local          pc_genmcl.scaleindex.n i64 
    procentry                 
    push           pc_genmcl.scaleindex.scale i64 
    push           1          i64 
    setjumpeq      #7252      i64 
    push           2          i64 
    setjumpeq      #7252      i64 
    push           4          i64 
    setjumpeq      #7252      i64 
    push           8          i64 
    setjumpne      #7253      i64 
#7252: 
    push           pc_genmcl.scaleindex.scale i64 
    setret                    i64 
    jump           #7254      
#7253: 
    setargs                   2 0
    push           pc_genmcl.scaleindex.scale i64 
    push           pc_genmcl.scaleindex.ax u64 
    callproc       &pc_genmcl.mulimm 
    push           1          i64 
    setret                    i64 
    jump           #7254      
#7254: 
    retfn                     i64 
End


Proc pc_genmcl.makeregopnd: u64
    param          pc_genmcl.makeregopnd.n i64 
    local          pc_genmcl.makeregopnd.ax u64 
    procentry                 
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.makeregopnd.n i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.makeregopnd.n i64 
    addrefoff                 block:15 15 -15
    push           1          
    popptroff                 u8 1 0
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.makeregopnd.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.makeregopnd.n i64 
    callfn         &pc_stackmcl.genopnd u64 
    setret                    u64 
    jump           #7256      
#7256: 
    retfn                     u64 
End


Proc pc_genmcl.dobinto_int:
    param          pc_genmcl.dobinto_int.p u64 
    param          pc_genmcl.dobinto_int.opc i64 
    local          pc_genmcl.dobinto_int.ax u64 
    local          pc_genmcl.dobinto_int.bx u64 
    local          pc_genmcl.dobinto_int.rx u64 
    local          pc_genmcl.dobinto_int.reg i64 
    local          pc_genmcl.dobinto_int.size i64 
    procentry                 
    push           pc_genmcl.dobinto_int.p u64 
    push           4          
    pushptroff                i32 1 0
    pop            pc_genmcl.dobinto_int.size i64 
    push           pc_genmcl.dobinto_int.size i64 
    push           8          i64 
    jumpne         #7258      i64 
    setargs                   1 0
    push           2          i64 
    callfn         &pc_libmcl.ismemaddr i64 
    jumpfalse      #7258      i64 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    pop            pc_genmcl.dobinto_int.ax u64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    pop            pc_genmcl.dobinto_int.reg i64 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.dobinto_int.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_genmcl.dobinto_int.rx u64 
    setargs                   3 0
    push           pc_genmcl.dobinto_int.ax u64 
    push           pc_genmcl.dobinto_int.rx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dobinto_int.bx u64 
    setargs                   3 0
    push           pc_genmcl.dobinto_int.bx u64 
    push           pc_genmcl.dobinto_int.rx u64 
    push           pc_genmcl.dobinto_int.opc i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.dobinto_int.rx u64 
    push           pc_genmcl.dobinto_int.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_genmcl.dobinto_int.reg i64 
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_genmcl.dobinto_int.reg i64 
    popptroff                 u8 1 -1
    jump           #7259      
#7258: 
    setargs                   2 0
    push           pc_genmcl.dobinto_int.size i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.dobinto_int.ax u64 
    setargs                   2 0
    push           pc_genmcl.dobinto_int.size i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dobinto_int.bx u64 
    setargs                   3 0
    push           pc_genmcl.dobinto_int.bx u64 
    push           pc_genmcl.dobinto_int.ax u64 
    push           pc_genmcl.dobinto_int.opc i64 
    callproc       &pc_libmcl.genmc 
#7259: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7260: 
    retproc                   
End


Proc pc_genmcl.dobinto_float:
    param          pc_genmcl.dobinto_float.p u64 
    param          pc_genmcl.dobinto_float.opc i64 
    local          pc_genmcl.dobinto_float.ax u64 
    local          pc_genmcl.dobinto_float.bx u64 
    local          pc_genmcl.dobinto_float.cx u64 
    procentry                 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_x64 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.dobinto_float.ax u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dobinto_float.bx u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dobinto_float.cx u64 
    setargs                   3 0
    push           pc_genmcl.dobinto_float.ax u64 
    push           pc_genmcl.dobinto_float.cx u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.dobinto_float.bx u64 
    push           pc_genmcl.dobinto_float.cx u64 
    push           pc_genmcl.dobinto_float.opc i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.dobinto_float.cx u64 
    push           pc_genmcl.dobinto_float.ax u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7262: 
    retproc                   
End


Proc pc_genmcl.dobinto_float32:
    param          pc_genmcl.dobinto_float32.p u64 
    param          pc_genmcl.dobinto_float32.opc i64 
    local          pc_genmcl.dobinto_float32.ax u64 
    local          pc_genmcl.dobinto_float32.bx u64 
    local          pc_genmcl.dobinto_float32.cx u64 
    procentry                 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_x32 
    setargs                   2 0
    push           4          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.dobinto_float32.ax u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dobinto_float32.bx u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dobinto_float32.cx u64 
    setargs                   3 0
    push           pc_genmcl.dobinto_float32.ax u64 
    push           pc_genmcl.dobinto_float32.cx u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.dobinto_float32.bx u64 
    push           pc_genmcl.dobinto_float32.cx u64 
    push           pc_genmcl.dobinto_float32.opc i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.dobinto_float32.cx u64 
    push           pc_genmcl.dobinto_float32.ax u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7264: 
    retproc                   
End


Proc pc_genmcl.doselectcc:
    param          pc_genmcl.doselectcc.p u64 
    local          pc_genmcl.doselectcc.ax u64 
    local          pc_genmcl.doselectcc.bx u64 
    local          pc_genmcl.doselectcc.cx u64 
    local          pc_genmcl.doselectcc.dx u64 
    local          pc_genmcl.doselectcc.cond i64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.doselectcc.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #7266      i64 
    setargs                   2 0
    push           pc_genmcl.doselectcc.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "selectcc" u64 
    callproc       &pc_libmcl.merrort 
#7266: 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.doselectcc.ax u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.doselectcc.bx u64 
    setargs                   3 0
    push           pc_genmcl.doselectcc.bx u64 
    push           pc_genmcl.doselectcc.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    push           1          i64 
    pop            pci_mcl.noxorclear u8 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.doselectcc.dx u64 
    setargs                   2 0
    push           8          i64 
    push           4          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.doselectcc.cx u64 
    push           0          i64 
    pop            pci_mcl.noxorclear u8 
    push           &pc_tables.psigned 
    push           pc_genmcl.doselectcc.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #7267      i64 
    push           &pc_genmcl.scondcodes 
    push           pc_genmcl.doselectcc.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u8 1 -72
    pop            pc_genmcl.doselectcc.cond i64 
    jump           #7268      
#7267: 
    push           &pc_genmcl.ucondcodes 
    push           pc_genmcl.doselectcc.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u8 1 -72
    pop            pc_genmcl.doselectcc.cond i64 
#7268: 
    setargs                   4 0
    push           pc_genmcl.doselectcc.dx u64 
    push           pc_genmcl.doselectcc.cx u64 
    setargs                   1 0
    push           pc_genmcl.doselectcc.cond i64 
    callfn         &pc_genmcl.reversemcond i64 
    push           16         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7269: 
    retproc                   
End


Proc pc_genmcl.reversemcond: i64
    param          pc_genmcl.reversemcond.cond i64 
    procentry                 
    push           pc_genmcl.reversemcond.cond i64 
    push           4          i64 
    casejumpeq     #7271      i64 0
    push           5          i64 
    casejumpeq     #7272      i64 0
    push           12         i64 
    casejumpeq     #7273      i64 0
    push           14         i64 
    casejumpeq     #7274      i64 0
    push           13         i64 
    casejumpeq     #7275      i64 0
    push           15         i64 
    casejumpeq     #7276      i64 0
    push           2          i64 
    casejumpeq     #7277      i64 0
    push           6          i64 
    casejumpeq     #7278      i64 0
    push           3          i64 
    casejumpeq     #7279      i64 0
    push           7          i64 
    casejumpeq     #7280      i64 0
    popstack                  i64 
    jump           #7281      
#7271: 
    push           5          i64 
    setret                    i64 
    jump           #7282      
    jump           #7283      
#7272: 
    push           5          i64 
    setret                    i64 
    jump           #7282      
    jump           #7283      
#7273: 
    push           13         i64 
    setret                    i64 
    jump           #7282      
    jump           #7283      
#7274: 
    push           15         i64 
    setret                    i64 
    jump           #7282      
    jump           #7283      
#7275: 
    push           12         i64 
    setret                    i64 
    jump           #7282      
    jump           #7283      
#7276: 
    push           14         i64 
    setret                    i64 
    jump           #7282      
    jump           #7283      
#7277: 
    push           3          i64 
    setret                    i64 
    jump           #7282      
    jump           #7283      
#7278: 
    push           7          i64 
    setret                    i64 
    jump           #7282      
    jump           #7283      
#7279: 
    push           2          i64 
    setret                    i64 
    jump           #7282      
    jump           #7283      
#7280: 
    push           3          i64 
    setret                    i64 
    jump           #7282      
    jump           #7283      
#7281: 
#7283: 
    push           0          i64 
    setret                    i64 
    jump           #7282      
#7282: 
    retfn                     i64 
End


Proc pc_genmcl.do_divrem:
    param          pc_genmcl.do_divrem.p u64 
    param          pc_genmcl.do_divrem.issigned i64 
    param          pc_genmcl.do_divrem.isdiv i64 
    local          pc_genmcl.do_divrem.opc i64 
    local          pc_genmcl.do_divrem.n i64 
    local          pc_genmcl.do_divrem.shifts i64 
    procentry                 
    setargs                   2 0
    push           0          i64 
    push           2          i64 
    callproc       &pc_stackmcl.loadopnd 
    push           pc_genmcl.do_divrem.isdiv i64 
    jumpfalse      #7285      i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #7285      i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    pop            pc_genmcl.do_divrem.n i64 
    push           pc_genmcl.do_divrem.n i64 
    push           0          i64 
    casejumpeq     #7286      i64 0
    push           1          i64 
    casejumpeq     #7287      i64 0
    popstack                  i64 
    jump           #7288      
#7286: 
    setargs                   2 0
    push           ""         u64 
    push           "Divide by zero" u64 
    callproc       &pc_libmcl.merror 
    jump           #7289      
#7287: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #7290      
    jump           #7289      
#7288: 
    setargs                   1 0
    push           pc_genmcl.do_divrem.n i64 
    callfn         &pc_libmcl.ispoweroftwo i64 
    pop            pc_genmcl.do_divrem.shifts i64 
    push           pc_genmcl.do_divrem.shifts i64 
    jumpfalse      #7291      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.do_divrem.shifts i64 
    callfn         &pc_libmcl.mgenint u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    startmult                 
    push           pc_genmcl.do_divrem.issigned i64 
    jumpfalse      #7292      i64 
    push           45         i64 
    resetmult                 
    jump           #7293      
#7292: 
    push           46         i64 
    endmult                   
#7293: 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #7290      
#7291: 
#7289: 
#7285: 
    setargs                   2 0
    push           0          i64 
    push           1          i64 
    callproc       &pc_stackmcl.loadopnd 
    setargs                   0 0
    callproc       &pc_genmcl.saverdx 
    setargs                   0 0
    callproc       &pc_genmcl.fixdivopnds 
    push           pc_genmcl.do_divrem.issigned i64 
    jumpfalse      #7294      i64 
    setargs                   3 0
    push           0          u64 
    push           0          u64 
    push           58         i64 
    callproc       &pc_libmcl.genmc 
    push           37         i64 
    pop            pc_genmcl.do_divrem.opc i64 
    jump           #7295      
#7294: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           12         i64 
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   2 0
    push           8          i64 
    push           12         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           41         i64 
    callproc       &pc_libmcl.genmc 
    push           38         i64 
    pop            pc_genmcl.do_divrem.opc i64 
#7295: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           pc_genmcl.do_divrem.p u64 
    push           4          
    pushptroff                i32 1 0
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    push           pc_genmcl.do_divrem.opc i64 
    callproc       &pc_libmcl.genmc 
    push           pc_genmcl.do_divrem.isdiv i64 
    jumptrue       #7296      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           12         i64 
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           28         i64 
    callproc       &pc_libmcl.genmc 
#7296: 
    setargs                   0 0
    callproc       &pc_genmcl.restorerdx 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7290: 
    retproc                   
End


Proc pc_genmcl.fixdivopnds:
    local          pc_genmcl.fixdivopnds.regx i64 
    local          pc_genmcl.fixdivopnds.regy i64 
    local          pc_genmcl.fixdivopnds.zop i64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_genmcl.fixdivopnds.regx i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_genmcl.fixdivopnds.regy i64 
    push           pc_genmcl.fixdivopnds.regx i64 
    push           1          i64 
    jumpne         #7298      i64 
    jump           #7299      
#7298: 
    push           pc_genmcl.fixdivopnds.regy i64 
    push           1          i64 
    jumpne         #7300      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    push           28         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    jump           #7299      
#7300: 
    push           &pci_mcl.regset 
    push           1          i64 
    pushptroff                u8 1 -1
    push           0          i64 
    jumpne         #7301      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           28         i64 
    callproc       &pc_libmcl.genmc 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_genmcl.fixdivopnds.regx i64 
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    push           1          i64 
    push           &pci_mcl.regset 
    push           1          i64 
    popptroff                 u8 1 -1
    jump           #7299      
#7301: 
#7302: 
    push           pci_mcl.noperands i64 
    pop            pc_genmcl.fixdivopnds.zop i64 
    push           pc_genmcl.fixdivopnds.zop i64 
    push           1          i64 
    jumplt         #7303      i64 
#7304: 
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.fixdivopnds.zop i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #7305      i64 
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.fixdivopnds.zop i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #7305      i64 
    jump           #7303      
#7305: 
#7306: 
    fordown        #7304      i64 1
    opnd           pc_genmcl.fixdivopnds.zop 
    opnd           1          
#7303: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           28         i64 
    callproc       &pc_libmcl.genmc 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    addrefoff                 u64 1 0
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.fixdivopnds.zop i64 
    addrefoff                 block:15 15 -15
    push           2          
    addrefoff                 u64 1 0
    swap                      u8 
#7299: 
    retproc                   
End


Proc pc_genmcl.saverdx:
    procentry                 
    push           pci_mcl.inf_r11used i64 
    jumpfalse      #7308      i64 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           12         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
#7308: 
#7309: 
    retproc                   
End


Proc pc_genmcl.restorerdx:
    procentry                 
    push           pci_mcl.inf_r11used i64 
    jumpfalse      #7311      i64 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           12         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           14         i64 
    callproc       &pc_libmcl.genmc 
#7311: 
#7312: 
    retproc                   
End


Proc pc_genmcl.doincr:
    param          pc_genmcl.doincr.p u64 
    param          pc_genmcl.doincr.incrop i64 
    param          pc_genmcl.doincr.addop i64 
    procentry                 
    push           pc_genmcl.doincr.p u64 
    push           16         
    pushptroff                i32 1 0
    push           1          i64 
    jumpne         #7314      i64 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.ismemaddr i64 
    jumpfalse      #7315      i64 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           pc_genmcl.doincr.incrop i64 
    callproc       &pc_libmcl.genmc 
    jump           #7316      
#7315: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    push           pc_genmcl.doincr.incrop i64 
    callproc       &pc_libmcl.genmc 
#7316: 
    jump           #7317      
#7314: 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.ismemaddr i64 
    jumpfalse      #7318      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.doincr.p u64 
    push           16         
    pushptroff                i32 1 0
    callfn         &pc_libmcl.mgenint u64 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           pc_genmcl.doincr.addop i64 
    callproc       &pc_libmcl.genmc 
    jump           #7319      
#7318: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.doincr.p u64 
    push           16         
    pushptroff                i32 1 0
    callfn         &pc_libmcl.mgenint u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    push           pc_genmcl.doincr.addop i64 
    callproc       &pc_libmcl.genmc 
#7319: 
#7317: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7320: 
    retproc                   
End


Proc pc_genmcl.doincrload:
    param          pc_genmcl.doincrload.p u64 
    param          pc_genmcl.doincrload.incrop i64 
    param          pc_genmcl.doincrload.addop i64 
    local          pc_genmcl.doincrload.ax u64 
    local          pc_genmcl.doincrload.mx u64 
    procentry                 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.ismemaddr i64 
    jumpfalse      #7322      i64 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    pop            pc_genmcl.doincrload.mx u64 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_genmcl.makeregopnd u64 
    pop            pc_genmcl.doincrload.ax u64 
    jump           #7323      
#7322: 
    setargs                   2 0
    push           pc_genmcl.doincrload.p u64 
    push           4          
    pushptroff                i32 1 0
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.doincrload.mx u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.doincrload.ax u64 
#7323: 
    push           pc_genmcl.doincrload.p u64 
    push           16         
    pushptroff                i32 1 0
    push           1          i64 
    jumpne         #7324      i64 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.doincrload.mx u64 
    push           pc_genmcl.doincrload.incrop i64 
    callproc       &pc_libmcl.genmc 
    jump           #7325      
#7324: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.doincrload.p u64 
    push           16         
    pushptroff                i32 1 0
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.doincrload.mx u64 
    push           pc_genmcl.doincrload.addop i64 
    callproc       &pc_libmcl.genmc 
#7325: 
    push           &pc_tables.pcat 
    push           pc_genmcl.doincrload.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           4          i64 
    jumpne         #7326      i64 
    setargs                   3 0
    push           pc_genmcl.doincrload.mx u64 
    push           pc_genmcl.doincrload.ax u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_genmcl.doincrload.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #7327      i64 
    push           19         i64 
    resetmult                 
    jump           #7328      
#7327: 
    push           20         i64 
    endmult                   
#7328: 
    callproc       &pc_libmcl.genmc 
    jump           #7329      
#7326: 
    setargs                   3 0
    push           pc_genmcl.doincrload.mx u64 
    push           pc_genmcl.doincrload.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
#7329: 
#7330: 
    retproc                   
End


Proc pc_genmcl.doloadincr:
    param          pc_genmcl.doloadincr.p u64 
    param          pc_genmcl.doloadincr.incrop i64 
    param          pc_genmcl.doloadincr.addop i64 
    local          pc_genmcl.doloadincr.ax u64 
    local          pc_genmcl.doloadincr.mx u64 
    procentry                 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.ismemaddr i64 
    jumpfalse      #7332      i64 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    pop            pc_genmcl.doloadincr.mx u64 
    jump           #7333      
#7332: 
    setargs                   2 0
    push           pc_genmcl.doloadincr.p u64 
    push           4          
    pushptroff                i32 1 0
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.doloadincr.mx u64 
#7333: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_d64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.doloadincr.ax u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.doloadincr.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           4          i64 
    jumpne         #7334      i64 
    setargs                   3 0
    push           pc_genmcl.doloadincr.mx u64 
    push           pc_genmcl.doloadincr.ax u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_genmcl.doloadincr.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #7335      i64 
    push           19         i64 
    resetmult                 
    jump           #7336      
#7335: 
    push           20         i64 
    endmult                   
#7336: 
    callproc       &pc_libmcl.genmc 
    jump           #7337      
#7334: 
    setargs                   3 0
    push           pc_genmcl.doloadincr.mx u64 
    push           pc_genmcl.doloadincr.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
#7337: 
    push           pc_genmcl.doloadincr.p u64 
    push           16         
    pushptroff                i32 1 0
    push           1          i64 
    jumpne         #7338      i64 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.doloadincr.mx u64 
    push           pc_genmcl.doloadincr.incrop i64 
    callproc       &pc_libmcl.genmc 
    jump           #7339      
#7338: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.doloadincr.p u64 
    push           16         
    pushptroff                i32 1 0
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.doloadincr.mx u64 
    push           pc_genmcl.doloadincr.addop i64 
    callproc       &pc_libmcl.genmc 
#7339: 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7340: 
    retproc                   
End


Proc pc_genmcl.dobin_i128:
    param          pc_genmcl.dobin_i128.p u64 
    param          pc_genmcl.dobin_i128.opc1 i64 
    param          pc_genmcl.dobin_i128.opc2 i64 
    local          pc_genmcl.dobin_i128.axl u64 
    local          pc_genmcl.dobin_i128.axh u64 
    local          pc_genmcl.dobin_i128.bxl u64 
    local          pc_genmcl.dobin_i128.bxh u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dobin_i128.axl u64 
    setargs                   2 0
    push           8          i64 
    push           4          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dobin_i128.axh u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dobin_i128.bxl u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dobin_i128.bxh u64 
    setargs                   3 0
    push           pc_genmcl.dobin_i128.bxl u64 
    push           pc_genmcl.dobin_i128.axl u64 
    push           pc_genmcl.dobin_i128.opc1 i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.dobin_i128.bxh u64 
    push           pc_genmcl.dobin_i128.axh u64 
    push           pc_genmcl.dobin_i128.opc2 i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7342: 
    retproc                   
End


Proc pc_genmcl.dojumpcc_i128:
    param          pc_genmcl.dojumpcc_i128.p u64 
    local          pc_genmcl.dojumpcc_i128.axlow u64 
    local          pc_genmcl.dojumpcc_i128.axhigh u64 
    local          pc_genmcl.dojumpcc_i128.bxlow u64 
    local          pc_genmcl.dojumpcc_i128.bxhigh u64 
    local          pc_genmcl.dojumpcc_i128.cx u64 
    local          pc_genmcl.dojumpcc_i128.dx u64 
    local          pc_genmcl.dojumpcc_i128.lxtrue u64 
    local          pc_genmcl.dojumpcc_i128.lxfalse u64 
    procentry                 
    push           pc_genmcl.dojumpcc_i128.p u64 
    push           3          
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #7344      i64 
    push           pc_genmcl.dojumpcc_i128.p u64 
    push           1          
    pushptroff                u8 1 0
    push           52         i64 
    setjumpeq      #7344      i64 
    push           53         i64 
    setjumpeqx     #7344      i64 
    setargs                   1 0
    push           pc_genmcl.dojumpcc_i128.p u64 
    callproc       &pc_genmcl.dojumpcc_u128 
    jump           #7345      
#7344: 
    setargs                   1 0
    push           pc_genmcl.dojumpcc_i128.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    pop            pc_genmcl.dojumpcc_i128.lxtrue u64 
    setargs                   2 0
    push           8          i64 
    push           4          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dojumpcc_i128.axhigh u64 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dojumpcc_i128.axlow u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dojumpcc_i128.bxhigh u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dojumpcc_i128.bxlow u64 
    push           pc_genmcl.dojumpcc_i128.p u64 
    push           1          
    pushptroff                u8 1 0
    push           52         i64 
    casejumpeq     #7346      i64 0
    push           53         i64 
    casejumpeq     #7347      i64 0
    popstack                  i64 
    jump           #7348      
#7346: 
    setargs                   3 0
    push           pc_genmcl.dojumpcc_i128.bxlow u64 
    push           pc_genmcl.dojumpcc_i128.axlow u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_libmcl.mgenlabel u64 
    store          pc_genmcl.dojumpcc_i128.lxfalse u64 
    push           5          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.dojumpcc_i128.bxhigh u64 
    push           pc_genmcl.dojumpcc_i128.axhigh u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_i128.lxtrue u64 
    push           4          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_i128.lxfalse u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    jump           #7349      
#7347: 
    setargs                   3 0
    push           pc_genmcl.dojumpcc_i128.bxlow u64 
    push           pc_genmcl.dojumpcc_i128.axlow u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_i128.lxtrue u64 
    push           5          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.dojumpcc_i128.bxhigh u64 
    push           pc_genmcl.dojumpcc_i128.axhigh u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_i128.lxtrue u64 
    push           5          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    jump           #7349      
#7348: 
    setargs                   3 0
    push           pc_genmcl.dojumpcc_i128.bxlow u64 
    push           pc_genmcl.dojumpcc_i128.axlow u64 
    push           30         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.dojumpcc_i128.bxhigh u64 
    push           pc_genmcl.dojumpcc_i128.axhigh u64 
    push           32         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pci_mcl.zero_opnd u64 
    push           pc_genmcl.dojumpcc_i128.axhigh u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_tables.psigned 
    push           pc_genmcl.dojumpcc_i128.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #7350      i64 
    push           pc_genmcl.dojumpcc_i128.p u64 
    push           1          
    pushptroff                u8 1 0
    push           54         i64 
    casejumpeq     #7351      i64 0
    push           55         i64 
    casejumpeq     #7352      i64 0
    push           57         i64 
    casejumpeq     #7353      i64 0
    push           56         i64 
    casejumpeq     #7354      i64 0
    popstack                  i64 
    jump           #7355      
#7351: 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_i128.lxtrue u64 
    push           12         i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    jump           #7356      
#7352: 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_i128.lxtrue u64 
    push           12         i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.dojumpcc_i128.axhigh u64 
    push           pc_genmcl.dojumpcc_i128.axlow u64 
    push           40         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_i128.lxtrue u64 
    push           4          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    jump           #7356      
#7353: 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_libmcl.mgenlabel u64 
    store          pc_genmcl.dojumpcc_i128.lxfalse u64 
    push           12         i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.dojumpcc_i128.axhigh u64 
    push           pc_genmcl.dojumpcc_i128.axlow u64 
    push           40         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_i128.lxtrue u64 
    push           5          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_i128.lxfalse u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    jump           #7356      
#7354: 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_i128.lxtrue u64 
    push           13         i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    jump           #7356      
#7355: 
#7356: 
    jump           #7357      
#7350: 
    setargs                   2 0
    push           pc_genmcl.dojumpcc_i128.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "jumpcc/rel" u64 
    callproc       &pc_libmcl.merrort 
#7357: 
#7349: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7345: 
    retproc                   
End


Proc pc_genmcl.dojumpcc_u128:
    param          pc_genmcl.dojumpcc_u128.p u64 
    local          pc_genmcl.dojumpcc_u128.lxtrue u64 
    local          pc_genmcl.dojumpcc_u128.lxfalse u64 
    local          pc_genmcl.dojumpcc_u128.ax1 u64 
    local          pc_genmcl.dojumpcc_u128.bx1 u64 
    local          pc_genmcl.dojumpcc_u128.ax2 u64 
    local          pc_genmcl.dojumpcc_u128.bx2 u64 
    local          pc_genmcl.dojumpcc_u128.cond1 i64 
    local          pc_genmcl.dojumpcc_u128.cond2 i64 
    local          pc_genmcl.dojumpcc_u128.cond3 i64 
    procentry                 
    push           pc_genmcl.dojumpcc_u128.p u64 
    push           1          
    pushptroff                u8 1 0
    push           57         i64 
    casejumpeq     #7359      i64 0
    push           56         i64 
    casejumpeq     #7360      i64 0
    push           54         i64 
    casejumpeq     #7361      i64 0
    push           55         i64 
    casejumpeq     #7362      i64 0
    popstack                  i64 
    jump           #7363      
#7359: 
    push           7          i64 
    pop            pc_genmcl.dojumpcc_u128.cond1 i64 
    push           2          i64 
    pop            pc_genmcl.dojumpcc_u128.cond2 i64 
    push           7          i64 
    pop            pc_genmcl.dojumpcc_u128.cond3 i64 
    jump           #7364      
#7360: 
    push           7          i64 
    pop            pc_genmcl.dojumpcc_u128.cond1 i64 
    push           2          i64 
    pop            pc_genmcl.dojumpcc_u128.cond2 i64 
    push           3          i64 
    pop            pc_genmcl.dojumpcc_u128.cond3 i64 
    jump           #7364      
#7361: 
    push           2          i64 
    pop            pc_genmcl.dojumpcc_u128.cond1 i64 
    push           7          i64 
    pop            pc_genmcl.dojumpcc_u128.cond2 i64 
    push           2          i64 
    pop            pc_genmcl.dojumpcc_u128.cond3 i64 
    jump           #7364      
#7362: 
    push           2          i64 
    pop            pc_genmcl.dojumpcc_u128.cond1 i64 
    push           7          i64 
    pop            pc_genmcl.dojumpcc_u128.cond2 i64 
    push           6          i64 
    pop            pc_genmcl.dojumpcc_u128.cond3 i64 
    jump           #7364      
#7363: 
    setargs                   2 0
    push           ""         u64 
    push           "JCC/U128" u64 
    callproc       &pc_libmcl.merror 
#7364: 
    setargs                   1 0
    push           pc_genmcl.dojumpcc_u128.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    pop            pc_genmcl.dojumpcc_u128.lxtrue u64 
    setargs                   1 0
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    callfn         &pc_libmcl.mgenlabel u64 
    pop            pc_genmcl.dojumpcc_u128.lxfalse u64 
    setargs                   2 0
    push           8          i64 
    push           4          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dojumpcc_u128.ax2 u64 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dojumpcc_u128.ax1 u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dojumpcc_u128.bx2 u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dojumpcc_u128.bx1 u64 
    setargs                   3 0
    push           pc_genmcl.dojumpcc_u128.bx2 u64 
    push           pc_genmcl.dojumpcc_u128.ax2 u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_u128.lxtrue u64 
    push           pc_genmcl.dojumpcc_u128.cond1 i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_u128.lxfalse u64 
    push           pc_genmcl.dojumpcc_u128.cond2 i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.dojumpcc_u128.bx1 u64 
    push           pc_genmcl.dojumpcc_u128.ax1 u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_u128.lxtrue u64 
    push           pc_genmcl.dojumpcc_u128.cond3 i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_u128.lxfalse u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7365: 
    retproc                   
End


Proc pc_genmcl.do_syscall:
    param          pc_genmcl.do_syscall.fnindex i64 
    param          pc_genmcl.do_syscall.nargs i64 
    param          pc_genmcl.do_syscall.retcat i64 
    local          pc_genmcl.do_syscall.nslots i64 
    local          pc_genmcl.do_syscall.av_1 i64 
    procentry                 
    push           pc_genmcl.do_syscall.nargs i64 
    pop            pci_mcl.sa_nargs i64 
    setargs                   1 0
    push           0          u64 
    callproc       &pc_genmcl.px_setargs 
    setargs                   2 0
    push           0          i64 
    push           0          u64 
    callfn         &pc_genmcl.do_pushparams i64 
    pop            pc_genmcl.do_syscall.nslots i64 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    setargs                   1 0
    push           pc_genmcl.do_syscall.fnindex i64 
    callfn         &pc_libmcl.getrtsproclabel i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           22         i64 
    callproc       &pc_libmcl.genmc 
    push           8          i64 
    push           pci_mcl.mccodex u64 
    push           8          
    pushptroff                u64 1 0
    push           8          
    popptroff                 u8 1 0
#7367: 
    push           pci_mcl.sa_nargs i64 
    pop            pc_genmcl.do_syscall.av_1 i64 
    push           pc_genmcl.do_syscall.av_1 i64 
    push           0          i64 
    jumple         #7368      i64 
#7369: 
    setargs                   0 0
    callproc       &pc_stackmcl.poparg 
#7370: 
    to             #7369      
    opnd           pc_genmcl.do_syscall.av_1 
#7368: 
    setargs                   1 0
    push           pc_genmcl.do_syscall.nslots i64 
    callproc       &pc_stackmcl.popslots 
    setargs                   1 0
    push           pc_genmcl.do_syscall.retcat i64 
    callproc       &pc_genmcl.getretvalue_bycat 
#7371: 
    retproc                   
End


Proc pc_genmcl.getretvalue_bycat:
    param          pc_genmcl.getretvalue_bycat.cat i64 
    procentry                 
    push           pc_genmcl.getretvalue_bycat.cat i64 
    push           0          i64 
    casejumpeq     #7373      i64 0
    push           1          i64 
    casejumpeq     #7374      i64 0
    push           3          i64 
    casejumpeq     #7375      i64 0
    push           2          i64 
    casejumpeq     #7376      i64 0
    push           5          i64 
    casejumpeq     #7377      i64 0
    popstack                  i64 
    jump           #7378      
#7373: 
    jump           #7379      
    jump           #7380      
#7374: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.addreg0 
    jump           #7380      
#7375: 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.addxreg0 
    jump           #7380      
#7376: 
    setargs                   2 0
    push           3          i64 
    push           1          i64 
    callproc       &pc_stackmcl.addxreg0 
    jump           #7380      
#7377: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.addwidereg0 
    jump           #7380      
#7378: 
    setargs                   2 0
    push           ""         u64 
    push           "getval bycat" u64 
    callproc       &pc_libmcl.merror 
#7380: 
#7379: 
    retproc                   
End


Proc pc_genmcl.px_pushlabel:
    param          pc_genmcl.px_pushlabel.p u64 
    procentry                 
    push           pc_genmcl.px_pushlabel.p u64 
    pushptr                   u8 
    push           3          i64 
    jumpeq         #7382      i64 
    setargs                   2 0
    push           ""         u64 
    push           "pushlabel" u64 
    callproc       &pc_libmcl.merror 
#7382: 
    setargs                   1 0
    push           pc_genmcl.px_pushlabel.p u64 
    push           8          
    pushptroff                i64 1 0
    callproc       &pc_stackmcl.addlabeladdr 
#7383: 
    retproc                   
End


Proc pc_genmcl.do_shiftnto:
    param          pc_genmcl.do_shiftnto.p u64 
    param          pc_genmcl.do_shiftnto.opc i64 
    local          pc_genmcl.do_shiftnto.px u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.do_shiftnto.px u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #7385      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.do_shiftnto.px u64 
    push           pc_genmcl.do_shiftnto.opc i64 
    callproc       &pc_libmcl.genmc 
    jump           #7386      
#7385: 
    push           pci_mcl.inf_r10used i64 
    jumpfalse      #7387      i64 
    setargs                   2 0
    push           ""         u64 
    push           "shiftto:cl in use" u64 
    callproc       &pc_libmcl.merror 
#7387: 
    setargs                   2 0
    push           11         i64 
    push           1          i64 
    callproc       &pc_stackmcl.loadparam 
    setargs                   3 0
    setargs                   2 0
    push           1          i64 
    push           11         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           pc_genmcl.do_shiftnto.px u64 
    push           pc_genmcl.do_shiftnto.opc i64 
    callproc       &pc_libmcl.genmc 
#7386: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7388: 
    retproc                   
End


Proc pc_genmcl.domax_float:
    param          pc_genmcl.domax_float.opc i64 
    local          pc_genmcl.domax_float.ax u64 
    local          pc_genmcl.domax_float.bx u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.domax_float.ax u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.domax_float.bx u64 
    setargs                   3 0
    push           pc_genmcl.domax_float.bx u64 
    push           pc_genmcl.domax_float.ax u64 
    push           pc_genmcl.domax_float.opc i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7390: 
    retproc                   
End


Proc pc_genmcl.domax_int:
    param          pc_genmcl.domax_int.cond i64 
    local          pc_genmcl.domax_int.ax u64 
    local          pc_genmcl.domax_int.bx u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.domax_int.ax u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.domax_int.bx u64 
    setargs                   3 0
    push           pc_genmcl.domax_int.bx u64 
    push           pc_genmcl.domax_int.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           pc_genmcl.domax_int.bx u64 
    push           pc_genmcl.domax_int.ax u64 
    push           pc_genmcl.domax_int.cond i64 
    push           16         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7392: 
    retproc                   
End


Proc pc_genmcl.domaxto_r64:
    param          pc_genmcl.domaxto_r64.cond i64 
    local          pc_genmcl.domaxto_r64.px u64 
    local          pc_genmcl.domaxto_r64.ax u64 
    local          pc_genmcl.domaxto_r64.bx u64 
    local          pc_genmcl.domaxto_r64.lx u64 
    local          pc_genmcl.domaxto_r64.lab i64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.domaxto_r64.px u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.domaxto_r64.bx u64 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_x64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.domaxto_r64.ax u64 
    setargs                   3 0
    push           pc_genmcl.domaxto_r64.px u64 
    push           pc_genmcl.domaxto_r64.ax u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.domaxto_r64.bx u64 
    push           pc_genmcl.domaxto_r64.ax u64 
    push           73         i64 
    callproc       &pc_libmcl.genmc 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pc_genmcl.domaxto_r64.lab i64 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.domaxto_r64.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    store          pc_genmcl.domaxto_r64.lx u64 
    push           pc_genmcl.domaxto_r64.cond i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.domaxto_r64.bx u64 
    push           pc_genmcl.domaxto_r64.px u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.domaxto_r64.lx u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7394: 
    retproc                   
End


Proc pc_genmcl.domaxto_r32:
    param          pc_genmcl.domaxto_r32.cond i64 
    local          pc_genmcl.domaxto_r32.px u64 
    local          pc_genmcl.domaxto_r32.ax u64 
    local          pc_genmcl.domaxto_r32.bx u64 
    local          pc_genmcl.domaxto_r32.lx u64 
    local          pc_genmcl.domaxto_r32.lab i64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.domaxto_r32.px u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.domaxto_r32.bx u64 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_x32 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.domaxto_r32.ax u64 
    setargs                   3 0
    push           pc_genmcl.domaxto_r32.px u64 
    push           pc_genmcl.domaxto_r32.ax u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.domaxto_r32.bx u64 
    push           pc_genmcl.domaxto_r32.ax u64 
    push           72         i64 
    callproc       &pc_libmcl.genmc 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pc_genmcl.domaxto_r32.lab i64 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.domaxto_r32.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    store          pc_genmcl.domaxto_r32.lx u64 
    push           pc_genmcl.domaxto_r32.cond i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.domaxto_r32.bx u64 
    push           pc_genmcl.domaxto_r32.px u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.domaxto_r32.lx u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7396: 
    retproc                   
End


Proc pc_genmcl.domaxto_int:
    param          pc_genmcl.domaxto_int.cond i64 
    local          pc_genmcl.domaxto_int.ax u64 
    local          pc_genmcl.domaxto_int.bx u64 
    local          pc_genmcl.domaxto_int.lx u64 
    local          pc_genmcl.domaxto_int.lab i64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.domaxto_int.ax u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.domaxto_int.bx u64 
    setargs                   3 0
    push           pc_genmcl.domaxto_int.bx u64 
    push           pc_genmcl.domaxto_int.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pc_genmcl.domaxto_int.lab i64 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.domaxto_int.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    store          pc_genmcl.domaxto_int.lx u64 
    push           pc_genmcl.domaxto_int.cond i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.domaxto_int.bx u64 
    push           pc_genmcl.domaxto_int.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.domaxto_int.lx u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7398: 
    retproc                   
End


Proc pc_genmcl.dosetfntable:
    procentry                 
    push           pci_mcl.lab_funcnametable i64 
    push           0          i64 
    jumpne         #7400      i64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pci_mcl.lab_funcnametable i64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pci_mcl.lab_funcaddrtable i64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pci_mcl.lab_funcnprocs i64 
#7400: 
#7401: 
    retproc                   
End


Proc pc_genmcl.loadtoreg:
    param          pc_genmcl.loadtoreg.rx u64 
    param          pc_genmcl.loadtoreg.ax u64 
    param          pc_genmcl.loadtoreg.m i64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.loadtoreg.m i64 
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #7403      i64 
    setargs                   3 0
    push           pc_genmcl.loadtoreg.ax u64 
    push           pc_genmcl.loadtoreg.rx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #7404      
#7403: 
    push           &pc_tables.psigned 
    push           pc_genmcl.loadtoreg.m i64 
    pushptroff                u8 1 0
    jumpfalse      #7405      i64 
    setargs                   3 0
    push           pc_genmcl.loadtoreg.ax u64 
    push           pc_genmcl.loadtoreg.rx u64 
    push           19         i64 
    callproc       &pc_libmcl.genmc 
    jump           #7404      
#7405: 
    setargs                   3 0
    push           pc_genmcl.loadtoreg.ax u64 
    push           pc_genmcl.loadtoreg.rx u64 
    push           20         i64 
    callproc       &pc_libmcl.genmc 
#7404: 
#7406: 
    retproc                   
End


Proc pc_genmcl.storefromreg:
    param          pc_genmcl.storefromreg.ax u64 
    param          pc_genmcl.storefromreg.rx u64 
    param          pc_genmcl.storefromreg.size i64 
    procentry                 
    setargs                   3 0
    setargs                   2 0
    push           pc_genmcl.storefromreg.size i64 
    push           pc_genmcl.storefromreg.rx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           pc_genmcl.storefromreg.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
#7408: 
    retproc                   
End


Proc pc_genmcl.domaths:
    param          pc_genmcl.domaths.p u64 
    param          pc_genmcl.domaths.opname u64 
    local          pc_genmcl.domaths.nslots i64 
    procentry                 
    push           1          i64 
    push           pc_genmcl.domaths.p u64 
    push           16         
    popptroff                 i32 1 0
    setargs                   1 0
    push           pc_genmcl.domaths.p u64 
    callproc       &pc_genmcl.px_setargs 
    setargs                   2 0
    push           0          i64 
    push           pc_genmcl.domaths.p u64 
    callfn         &pc_genmcl.do_pushparams i64 
    pop            pc_genmcl.domaths.nslots i64 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.domaths.opname u64 
    callfn         &pc_libmcl.mgenextname u64 
    push           22         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.poparg 
    setargs                   1 0
    push           pc_genmcl.domaths.nslots i64 
    callproc       &pc_stackmcl.popslots 
    setargs                   1 0
    push           pc_genmcl.domaths.p u64 
    callproc       &pc_genmcl.dogetretvalue 
#7410: 
    retproc                   
End


Proc pc_libmcl.mclinit:
    local          pc_libmcl.mclinit.a u64 
    local          pc_libmcl.mclinit.r i64 
    local          pc_libmcl.mclinit.s i64 
    local          pc_libmcl.mclinit.av_1 i64 
    local          pc_libmcl.mclinit.i i64 
    procentry                 
#7412: 
    push           1          i64 
    pop            pc_libmcl.mclinit.r i64 
#7413: 
    setargs                   2 0
    push           1          i64 
    push           pc_libmcl.mclinit.r i64 
    callfn         &pc_libmcl.mgenreg0 u64 
    push           &pci_mcl.regtable 
    push           pc_libmcl.mclinit.r i64 
    addrefoff                 block:128 128 -128
    push           1          i64 
    popptroff                 u64 8 -8
    setargs                   2 0
    push           2          i64 
    push           pc_libmcl.mclinit.r i64 
    callfn         &pc_libmcl.mgenreg0 u64 
    push           &pci_mcl.regtable 
    push           pc_libmcl.mclinit.r i64 
    addrefoff                 block:128 128 -128
    push           2          i64 
    popptroff                 u64 8 -8
    setargs                   2 0
    push           4          i64 
    push           pc_libmcl.mclinit.r i64 
    callfn         &pc_libmcl.mgenreg0 u64 
    push           &pci_mcl.regtable 
    push           pc_libmcl.mclinit.r i64 
    addrefoff                 block:128 128 -128
    push           4          i64 
    popptroff                 u64 8 -8
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.mclinit.r i64 
    callfn         &pc_libmcl.mgenreg0 u64 
    push           &pci_mcl.regtable 
    push           pc_libmcl.mclinit.r i64 
    addrefoff                 block:128 128 -128
    push           8          i64 
    popptroff                 u64 8 -8
    setargs                   2 0
    push           16         i64 
    push           pc_libmcl.mclinit.r i64 
    callfn         &pc_libmcl.mgenreg0 u64 
    push           &pci_mcl.regtable 
    push           pc_libmcl.mclinit.r i64 
    addrefoff                 block:128 128 -128
    push           16         i64 
    popptroff                 u64 8 -8
    push           &pci_mcl.regtable 
    push           pc_libmcl.mclinit.r i64 
    addrefoff                 block:128 128 -128
    push           8          i64 
    pushptroff                u64 8 -8
    push           &pc_libmcl.rd 
    push           pc_libmcl.mclinit.r i64 
    popptroff                 u64 8 -16
#7414: 
    forup          #7413      i64 1
    opnd           pc_libmcl.mclinit.r 
    opnd           16         
#7415: 
    setargs                   2 0
    push           8          i64 
    push           0          i64 
    callfn         &pc_libmcl.mgenint0 u64 
    pop            pci_mcl.zero_opnd u64 
#7416: 
    push           0          i64 
    pop            pc_libmcl.mclinit.i i64 
#7417: 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.mclinit.i i64 
    callfn         &pc_libmcl.mgenint0 u64 
    push           &pci_mcl.smallinttable 
    push           pc_libmcl.mclinit.i i64 
    popptroff                 u64 8 0
#7418: 
    forup          #7417      i64 1
    opnd           pc_libmcl.mclinit.i 
    opnd           32         
#7419: 
#7420: 
    push           -128       i64 
    pop            pc_libmcl.mclinit.i i64 
    push           64         i64 
    pop            pc_libmcl.mclinit.av_1 i64 
    push           pc_libmcl.mclinit.av_1 i64 
    push           -128       i64 
    jumplt         #7421      i64 
#7422: 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mclinit.a u64 
    push           3          i64 
    push           pc_libmcl.mclinit.a u64 
    push           9          
    popptroff                 u8 1 0
    push           15         i64 
    push           pc_libmcl.mclinit.a u64 
    push           10         
    popptroff                 u8 1 0
    push           8          i64 
    push           pc_libmcl.mclinit.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mclinit.i i64 
    push           pc_libmcl.mclinit.a u64 
    push           14         
    popptroff                 i32 1 0
    push           pc_libmcl.mclinit.a u64 
    push           &pci_mcl.frameregtable 
    push           pc_libmcl.mclinit.i i64 
    popptroff                 u64 8 1024
#7423: 
    forup          #7422      i64 1
    opnd           pc_libmcl.mclinit.i 
    opnd           pc_libmcl.mclinit.av_1 
#7421: 
    setargs                   2 0
    push           8          i64 
    push           15         i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pci_mcl.dframeopnd u64 
    setargs                   2 0
    push           8          i64 
    push           16         i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pci_mcl.dstackopnd u64 
    setargs                   0 0
    callproc       &pc_libmcl.initmcdest 
    setargs                   2 0
    push           1          i64 
    push           67         i64 
    callproc       &pc_libmcl.setsegment 
    setargs                   1 0
    push           8192       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pci_mcl.stringtable u64 
    setargs                   1 0
    push           4096       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pci_mcl.stringlabtable u64 
    setargs                   1 0
    push           128        i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pci_mcl.realtable u64 
    setargs                   1 0
    push           64         i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pci_mcl.reallabtable u64 
    push           0          i64 
    pop            pci_mcl.nstrings i64 
    push           0          i64 
    pop            pci_mcl.nreals i64 
    push           1024       i64 
    pop            pci_mcl.stringtablesize i64 
    push           16         i64 
    pop            pci_mcl.realtablesize i64 
    push           &pci_mcl.pclopndstack 
    push           2985       
    addrefoff                 u8 1 0
    pop            pci_mcl.pclstack u64 
    push           0          i64 
    pop            pci_mcl.lab_funcnametable i64 
    push           0          i64 
    pop            pci_mcl.lab_funcaddrtable i64 
#7424: 
    retproc                   
End


Proc pc_libmcl.initmcdest:
    procentry                 
    push           0          u64 
    store          pci_mcl.mccodex u64 
    pop            pci_mcl.mccode u64 
    push           &pci_mcl.rtsproclabels 
    clear                     block:48 
#7426: 
    retproc                   
End


Proc pc_libmcl.genmc:
    param          pc_libmcl.genmc.opcode i64 
    param          pc_libmcl.genmc.a u64 
    param          pc_libmcl.genmc.b u64 
    local          pc_libmcl.genmc.m u64 
    local          pc_libmcl.genmc.oldm u64 
    local          pc_libmcl.genmc.labno i64 
    procentry                 
    setargs                   1 0
    push           59         i64 
    callfn         &mlibp.pcm_allocz u64 
    pop            pc_libmcl.genmc.m u64 
    push           pc_libmcl.genmc.opcode i64 
    push           pc_libmcl.genmc.m u64 
    push           24         
    popptroff                 u8 1 0
    push           pc_libmcl.genmc.a u64 
    push           pc_libmcl.genmc.m u64 
    push           8          
    popptroff                 u64 1 0
    push           pc_libmcl.genmc.b u64 
    push           pc_libmcl.genmc.m u64 
    push           16         
    popptroff                 u64 1 0
    push           pc_libmcl.genmc.opcode i64 
    push           22         i64 
    casejumpeq     #7428      i64 0
    push           15         i64 
    casejumpeq     #7429      i64 0
    push           9          i64 
    casejumpeq     #7430      i64 0
    popstack                  i64 
    jump           #7431      
#7428: 
    push           &pci_mcl.inf_proccalls 
    incr                      i64 1
    jump           #7432      
#7429: 
    push           pc_libmcl.genmc.b u64 
    jumpfalse      #7433      u64 
    push           pc_libmcl.genmc.b u64 
    push           12         
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #7433      i64 
    push           1          u64 
    push           pc_libmcl.genmc.b u64 
    pushptr                   u64 
    push           46         
    addrefoff                 u64 1 0
    push           2          i64 
    popdotindex               u16 
#7433: 
    jump           #7432      
#7430: 
    push           pc_libmcl.genmc.a u64 
    pushptr                   i64 
    pop            pc_libmcl.genmc.labno i64 
    push           pc_libmcl.genmc.labno i64 
    push           80000      i64 
    jumple         #7434      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "LABNO="   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libmcl.genmc.labno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           80000      i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           ""         u64 
    push           "Too many labels" u64 
    callproc       &pc_libmcl.merror 
#7434: 
    push           pc_libmcl.genmc.m u64 
    push           &pci_mcl.labeltable 
    push           pc_libmcl.genmc.labno i64 
    popptroff                 u64 8 -8
    jump           #7432      
#7431: 
#7432: 
    push           pci_mcl.mccode u64 
    jumpfalse      #7435      u64 
    push           pc_libmcl.genmc.m u64 
    push           pci_mcl.mccodex u64 
    push           0          
    popptroff                 u64 1 0
    push           pc_libmcl.genmc.m u64 
    pop            pci_mcl.mccodex u64 
    jump           #7436      
#7435: 
    push           pc_libmcl.genmc.m u64 
    store          pci_mcl.mccodex u64 
    pop            pci_mcl.mccode u64 
#7436: 
#7437: 
    retproc                   
End


Proc pc_libmcl.genmc_cond:
    param          pc_libmcl.genmc_cond.opcode i64 
    param          pc_libmcl.genmc_cond.cond i64 
    param          pc_libmcl.genmc_cond.a u64 
    param          pc_libmcl.genmc_cond.b u64 
    procentry                 
    setargs                   3 0
    push           pc_libmcl.genmc_cond.b u64 
    push           pc_libmcl.genmc_cond.a u64 
    push           pc_libmcl.genmc_cond.opcode i64 
    callproc       &pc_libmcl.genmc 
    push           pc_libmcl.genmc_cond.cond i64 
    push           pci_mcl.mccodex u64 
    push           25         
    popptroff                 u8 1 0
#7439: 
    retproc                   
End


Proc pc_libmcl.genmc_str:
    param          pc_libmcl.genmc_str.opcode i64 
    param          pc_libmcl.genmc_str.s u64 
    procentry                 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           -1         i64 
    push           pc_libmcl.genmc_str.s u64 
    callfn         &pc_libmcl.mgenstring u64 
    push           pc_libmcl.genmc_str.opcode i64 
    callproc       &pc_libmcl.genmc 
#7441: 
    retproc                   
End


Proc pc_libmcl.newmclopnd: u64
    local          pc_libmcl.newmclopnd.a u64 
    procentry                 
    setargs                   1 0
    push           19         i64 
    callfn         &mlibp.pcm_allocz u64 
    pop            pc_libmcl.newmclopnd.a u64 
    push           pc_libmcl.newmclopnd.a u64 
    setret                    u64 
    jump           #7443      
#7443: 
    retfn                     u64 
End


Proc pc_libmcl.duplopnd: u64
    param          pc_libmcl.duplopnd.a u64 
    local          pc_libmcl.duplopnd.b u64 
    procentry                 
    setargs                   1 0
    push           19         i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pc_libmcl.duplopnd.b u64 
    push           pc_libmcl.duplopnd.a u64 
    pushptr                   block:19 
    push           pc_libmcl.duplopnd.b u64 
    popptr                    block:19 
    push           pc_libmcl.duplopnd.b u64 
    setret                    u64 
    jump           #7445      
#7445: 
    retfn                     u64 
End


Proc pc_libmcl.mgenxreg: u64
    param          pc_libmcl.mgenxreg.xreg i64 
    param          pc_libmcl.mgenxreg.size i64 
    local          pc_libmcl.mgenxreg.a u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenxreg.a u64 
    push           5          i64 
    push           pc_libmcl.mgenxreg.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenxreg.xreg i64 
    push           pc_libmcl.mgenxreg.a u64 
    push           10         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenxreg.size i64 
    push           pc_libmcl.mgenxreg.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenxreg.a u64 
    setret                    u64 
    jump           #7447      
#7447: 
    retfn                     u64 
End


Proc pc_libmcl.mgenindex: u64
    param          pc_libmcl.mgenindex.areg i64 
    param          pc_libmcl.mgenindex.ireg i64 
    param          pc_libmcl.mgenindex.scale i64 
    param          pc_libmcl.mgenindex.offset i64 
    param          pc_libmcl.mgenindex.size i64 
    param          pc_libmcl.mgenindex.labno i64 
    param          pc_libmcl.mgenindex.def u64 
    local          pc_libmcl.mgenindex.a u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenindex.a u64 
    push           3          i64 
    push           pc_libmcl.mgenindex.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenindex.areg i64 
    push           pc_libmcl.mgenindex.a u64 
    push           10         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenindex.ireg i64 
    push           pc_libmcl.mgenindex.a u64 
    push           11         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenindex.scale i64 
    push           pc_libmcl.mgenindex.a u64 
    push           13         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenindex.size i64 
    push           pc_libmcl.mgenindex.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenindex.offset i64 
    push           pc_libmcl.mgenindex.a u64 
    push           14         
    popptroff                 i32 1 0
    push           pc_libmcl.mgenindex.labno i64 
    jumpfalse      #7449      i64 
    push           pc_libmcl.mgenindex.labno i64 
    push           pc_libmcl.mgenindex.a u64 
    push           0          
    popptroff                 i64 1 0
    push           7          i64 
    push           pc_libmcl.mgenindex.a u64 
    push           12         
    popptroff                 u8 1 0
    jump           #7450      
#7449: 
    push           pc_libmcl.mgenindex.def u64 
    jumpfalse      #7451      u64 
    push           pc_libmcl.mgenindex.def u64 
    push           pc_libmcl.mgenindex.a u64 
    push           0          
    popptroff                 u64 1 0
    push           pc_libmcl.mgenindex.def u64 
    push           49         
    addrefoff                 u64 1 0
    incr                      i16 1
    push           5          i64 
    push           pc_libmcl.mgenindex.a u64 
    push           12         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenindex.def u64 
    push           27         
    pushptroff                u8 1 0
    push           17         i64 
    setjumpeq      #7452      i64 
    push           18         i64 
    setjumpne      #7453      i64 
#7452: 
    push           15         i64 
    push           pc_libmcl.mgenindex.a u64 
    push           10         
    popptroff                 u8 1 0
#7453: 
#7451: 
#7450: 
    push           pc_libmcl.mgenindex.a u64 
    setret                    u64 
    jump           #7454      
#7454: 
    retfn                     u64 
End


Proc pc_libmcl.getmclstr: u64
    local          pc_libmcl.getmclstr.d u64 
    local          pc_libmcl.getmclstr.e u64 
    local          pc_libmcl.getmclstr.m u64 
    local          pc_libmcl.getmclstr.str2 block:32 
    local          pc_libmcl.getmclstr.str3 block:32 
    local          pc_libmcl.getmclstr.i i64 
    procentry                 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_init 
    push           pci_mcl.mccode u64 
    pop            pc_libmcl.getmclstr.m u64 
    push           1          i64 
    pop            pc_libmcl.getmclstr.i i64 
    jump           #7456      
#7457: 
    setargs                   2 0
    push           pc_libmcl.getmclstr.m u64 
    push           pc_libmcl.getmclstr.i i64 
    callproc       &pc_libmcl.writemcl 
    push           &pc_libmcl.getmclstr.i 
    incr                      i64 1
    push           pc_libmcl.getmclstr.m u64 
    pushptr                   u64 
    pop            pc_libmcl.getmclstr.m u64 
#7456: 
    push           pc_libmcl.getmclstr.m u64 
    jumptrue       #7457      u64 
#7458: 
    push           pci_mcl.dest u64 
    setret                    u64 
    jump           #7459      
#7459: 
    retfn                     u64 
End


Proc pc_libmcl.mgencomment:
    param          pc_libmcl.mgencomment.s u64 
    procentry                 
    push           pc_libmcl.mgencomment.s u64 
    push           0          u64 
    jumpeq         #7461      u64 
    push           pc_libmcl.mgencomment.s u64 
    pushptr                   u8 
    push           0          i64 
    jumpne         #7462      i64 
#7461: 
    setargs                   3 0
    push           0          u64 
    push           0          u64 
    push           4          i64 
    callproc       &pc_libmcl.genmc 
    jump           #7463      
#7462: 
    setargs                   2 0
    push           pc_libmcl.mgencomment.s u64 
    push           3          i64 
    callproc       &pc_libmcl.genmc_str 
#7463: 
#7464: 
    retproc                   
End


Proc pc_libmcl.mgenstring: u64
    param          pc_libmcl.mgenstring.s u64 
    param          pc_libmcl.mgenstring.length i64 
    local          pc_libmcl.mgenstring.a u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenstring.a u64 
    push           2          i64 
    push           pc_libmcl.mgenstring.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenstring.length i64 
    push           0          i64 
    jumpge         #7466      i64 
    setargs                   1 0
    push           pc_libmcl.mgenstring.s u64 
    callfn         &strlen    i64 
    pop            pc_libmcl.mgenstring.length i64 
#7466: 
    setargs                   1 0
    push           pc_libmcl.mgenstring.length i64 
    push           1          i64 
    add                       i64 
    callfn         &mlibp.pcm_alloc u64 
    push           pc_libmcl.mgenstring.a u64 
    push           0          
    popptroff                 u64 1 0
    setargs                   3 0
    push           pc_libmcl.mgenstring.length u64 
    push           pc_libmcl.mgenstring.s u64 
    push           pc_libmcl.mgenstring.a u64 
    pushptr                   u64 
    callproc       &memcpy    
    push           0          u64 
    push           pc_libmcl.mgenstring.a u64 
    pushptr                   u64 
    push           pc_libmcl.mgenstring.length i64 
    popptroff                 u8 1 0
    push           4          i64 
    push           pc_libmcl.mgenstring.a u64 
    push           12         
    popptroff                 u8 1 0
    push           8          i64 
    push           pc_libmcl.mgenstring.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenstring.a u64 
    setret                    u64 
    jump           #7467      
#7467: 
    retfn                     u64 
End


Proc pc_libmcl.mgenname: u64
    param          pc_libmcl.mgenname.s u64 
    local          pc_libmcl.mgenname.str block:64 
    local          pc_libmcl.mgenname.a u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenname.a u64 
    push           2          i64 
    push           pc_libmcl.mgenname.a u64 
    push           9          
    popptroff                 u8 1 0
    setargs                   1 0
    push           pc_libmcl.mgenname.s u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           pc_libmcl.mgenname.a u64 
    push           0          
    popptroff                 u64 1 0
    push           8          i64 
    push           pc_libmcl.mgenname.a u64 
    push           12         
    popptroff                 u8 1 0
    push           8          i64 
    push           pc_libmcl.mgenname.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenname.a u64 
    setret                    u64 
    jump           #7469      
#7469: 
    retfn                     u64 
End


Proc pc_libmcl.writemcl:
    param          pc_libmcl.writemcl.index i64 
    param          pc_libmcl.writemcl.mcl u64 
    procentry                 
    push           pc_libmcl.writemcl.mcl u64 
    push           24         
    pushptroff                u8 1 0
    push           5          i64 
    casejumpeq     #7471      i64 0
    popstack                  i64 
    jump           #7472      
#7471: 
    jump           #7473      
#7472: 
    setargs                   1 0
    push           pc_libmcl.writemcl.mcl u64 
    callproc       &pc_libmcl.strmcl 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_line 
#7473: 
#7474: 
    retproc                   
End


Proc pc_libmcl.strmcl:
    param          pc_libmcl.strmcl.mcl u64 
    local          pc_libmcl.strmcl.opcname block:128 
    local          pc_libmcl.strmcl.a u64 
    local          pc_libmcl.strmcl.b u64 
    local          pc_libmcl.strmcl.opcode i64 
    local          pc_libmcl.strmcl.cond i64 
    local          pc_libmcl.strmcl.sizepref i64 
    local          pc_libmcl.strmcl.s u64 
    local          pc_libmcl.strmcl.comment u64 
    local          pc_libmcl.strmcl.d u64 
    procentry                 
    push           pc_libmcl.strmcl.mcl u64 
    push           24         
    pushptroff                u8 1 0
    pop            pc_libmcl.strmcl.opcode i64 
    push           pc_libmcl.strmcl.mcl u64 
    push           25         
    pushptroff                u8 1 0
    pop            pc_libmcl.strmcl.cond i64 
    push           pc_libmcl.strmcl.mcl u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_libmcl.strmcl.a u64 
    push           pc_libmcl.strmcl.mcl u64 
    push           16         
    pushptroff                u64 1 0
    pop            pc_libmcl.strmcl.b u64 
    push           0          u64 
    pop            pc_libmcl.strmcl.comment u64 
    push           pc_libmcl.strmcl.opcode i64 
    push           1          i64 
    casejumpeq     #7476      i64 0
    push           2          i64 
    casejumpeq     #7477      i64 0
    push           4          i64 
    casejumpeq     #7478      i64 0
    push           3          i64 
    casejumpeq     #7479      i64 0
    push           5          i64 
    casejumpeq     #7480      i64 0
    push           6          i64 
    casejumpeq     #7481      i64 0
    push           9          i64 
    casejumpeq     #7482      i64 0
    push           7          i64 
    casejumpeq     #7483      i64 0
    push           8          i64 
    casejumpeq     #7484      i64 0
    popstack                  i64 
    jump           #7485      
#7476: 
    setargs                   1 0
    push           ";Proc "   u64 
    callproc       &pc_libmcl.asmstr 
    setargs                   1 0
    push           pc_libmcl.strmcl.a u64 
    pushptr                   u64 
    pushptr                   u64 
    callproc       &pc_libmcl.asmstr 
    push           pc_libmcl.strmcl.a u64 
    pushptr                   u64 
    pop            pci_mcl.currasmproc u64 
    jump           #7486      
    jump           #7487      
#7477: 
    setargs                   1 0
    push           ";End "    u64 
    callproc       &pc_libmcl.asmstr 
    push           0          u64 
    pop            pci_mcl.currasmproc u64 
    jump           #7486      
    jump           #7487      
#7478: 
    jump           #7486      
    jump           #7487      
#7479: 
    setargs                   1 0
    push           59         i64 
    callproc       &pc_libmcl.asmchar 
    setargs                   1 0
    push           pc_libmcl.strmcl.a u64 
    pushptr                   u64 
    callproc       &pc_libmcl.asmstr 
    jump           #7488      
    jump           #7486      
    jump           #7487      
#7480: 
    setargs                   1 0
    push           "; <deleted>" u64 
    callproc       &pc_libmcl.asmstr 
    jump           #7488      
    jump           #7486      
    jump           #7487      
#7481: 
    push           pc_libmcl.strmcl.a u64 
    pushptr                   u64 
    pop            pc_libmcl.strmcl.d u64 
    push           pc_libmcl.strmcl.a u64 
    push           12         
    pushptroff                u8 1 0
    push           5          i64 
    casejumpeq     #7489      i64 0
    push           4          i64 
    casejumpeq     #7490      i64 0
    popstack                  i64 
    jump           #7491      
#7489: 
    setargs                   1 0
    setargs                   1 0
    push           pc_libmcl.strmcl.d u64 
    callfn         &pc_libmcl.getfullname u64 
    callproc       &pc_libmcl.asmstr 
    jump           #7492      
#7490: 
    setargs                   1 0
    push           pc_libmcl.strmcl.a u64 
    pushptr                   u64 
    callproc       &pc_libmcl.asmstr 
    jump           #7486      
    jump           #7492      
#7491: 
    setargs                   2 0
    push           ""         u64 
    push           "strmcl/lab" u64 
    callproc       &pc_libmcl.merror 
#7492: 
    setargs                   1 0
    push           ":"        u64 
    callproc       &pc_libmcl.asmstr 
    push           pc_libmcl.strmcl.d u64 
    push           46         
    pushptroff                u16 1 0
    push           3          i64 
    dotindex                  i64 
    jumpfalse      #7493      u64 
    setargs                   1 0
    push           "\n"       u64 
    callproc       &pc_libmcl.asmstr 
    setargs                   1 0
    setargs                   1 0
    push           pc_libmcl.strmcl.d u64 
    pushptr                   u64 
    callfn         &pc_libpcl.getbasename u64 
    callproc       &pc_libmcl.asmstr 
    setargs                   1 0
    push           "::"       u64 
    callproc       &pc_libmcl.asmstr 
#7493: 
    jump           #7486      
    jump           #7487      
#7482: 
    setargs                   1 0
    push           &pc_libmcl.strmcl.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "L#:"      u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           pc_libmcl.strmcl.a u64 
    pushptr                   i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           &pc_libmcl.strmcl.str 
    callproc       &pc_libmcl.asmstr 
    jump           #7486      
    jump           #7487      
#7483: 
    setargs                   1 0
    push           "          " u64 
    callproc       &pc_libmcl.asmstr 
    setargs                   1 0
    push           pc_libmcl.strmcl.a u64 
    pushptr                   u64 
    callproc       &pc_libmcl.asmstr 
    setargs                   1 0
    push           " = "      u64 
    callproc       &pc_libmcl.asmstr 
    setargs                   3 0
    push           0          i64 
    push           0          i64 
    push           pc_libmcl.strmcl.b u64 
    callproc       &pc_libmcl.asmopnd 
    jump           #7486      
    jump           #7487      
#7484: 
    setargs                   1 0
    push           "          " u64 
    callproc       &pc_libmcl.asmstr 
    setargs                   1 0
    push           pc_libmcl.strmcl.a u64 
    pushptr                   u64 
    callproc       &pc_libmcl.asmstr 
    setargs                   1 0
    push           " = "      u64 
    callproc       &pc_libmcl.asmstr 
    push           pc_libmcl.strmcl.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #7494      i64 0
    popstack                  i64 
    jump           #7495      
#7494: 
    setargs                   1 0
    setargs                   2 0
    push           pc_libmcl.strmcl.b u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_libmcl.strmcl.b u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.getregname u64 
    callproc       &pc_libmcl.asmstr 
    jump           #7496      
#7495: 
    setargs                   1 0
    setargs                   2 0
    push           pc_libmcl.strmcl.b u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_libmcl.strmcl.b u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.fgetregname u64 
    callproc       &pc_libmcl.asmstr 
#7496: 
    jump           #7486      
    jump           #7487      
#7485: 
#7487: 
    push           pc_libmcl.strmcl.opcode i64 
    push           27         i64 
    casejumpeq     #7497      i64 0
    push           59         i64 
    casejumpeq     #7498      i64 0
    push           16         i64 
    casejumpeq     #7499      i64 0
    push           22         i64 
    casejumpeq     #7500      i64 0
    push           39         i64 
    casejumpeq     #7501      i64 0
    push           40         i64 
    casejumpeq     #7502      i64 0
    push           41         i64 
    casejumpeq     #7503      i64 0
    push           52         i64 
    casejumpeq     #7504      i64 0
    popstack                  i64 
    jump           #7505      
#7497: 
    setargs                   1 0
    push           &pc_libmcl.strmcl.opcname 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "j"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           &pci_mcl.asmcondnames 
    push           pc_libmcl.strmcl.cond i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #7506      
#7498: 
    setargs                   1 0
    push           &pc_libmcl.strmcl.opcname 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "set"      u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           &pci_mcl.asmcondnames 
    push           pc_libmcl.strmcl.cond i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #7506      
#7499: 
    setargs                   1 0
    push           &pc_libmcl.strmcl.opcname 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "cmov"     u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           &pci_mcl.asmcondnames 
    push           pc_libmcl.strmcl.cond i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #7506      
#7500: 
    setargs                   2 0
    push           "call"     u64 
    push           &pc_libmcl.strmcl.opcname 
    callproc       &strcpy    
    jump           #7506      
#7501: 
    setargs                   2 0
    push           "and"      u64 
    push           &pc_libmcl.strmcl.opcname 
    callproc       &strcpy    
    jump           #7506      
#7502: 
    setargs                   2 0
    push           "or"       u64 
    push           &pc_libmcl.strmcl.opcname 
    callproc       &strcpy    
    jump           #7506      
#7503: 
    setargs                   2 0
    push           "xor"      u64 
    push           &pc_libmcl.strmcl.opcname 
    callproc       &strcpy    
    jump           #7506      
#7504: 
    setargs                   2 0
    push           "not"      u64 
    push           &pc_libmcl.strmcl.opcname 
    callproc       &strcpy    
    jump           #7506      
#7505: 
    push           pc_libmcl.strmcl.opcode i64 
    push           148        i64 
    jumple         #7507      i64 
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_libmcl.strmcl.opcode i64 
    callfn         &msysp.strint u64 
    push           &pc_libmcl.strmcl.opcname 
    callproc       &strcpy    
    jump           #7508      
#7507: 
    setargs                   2 0
    push           &pci_mcl.mclnames 
    push           pc_libmcl.strmcl.opcode i64 
    pushptroff                u64 8 -8
    push           2          i64 
    addrefoff                 u64 1 0
    push           &pc_libmcl.strmcl.opcname 
    callproc       &strcpy    
#7508: 
#7506: 
    setargs                   3 0
    push           " "        u64 
    push           10         i64 
    push           &pc_libmcl.strmcl.opcname 
    callproc       &mlibp.ipadstr 
    setargs                   2 0
    push           "  "       u64 
    push           &pc_libmcl.strmcl.str 
    callproc       &strcpy    
    setargs                   3 0
    push           " "        u64 
    push           10         i64 
    push           &pc_libmcl.strmcl.str 
    callproc       &mlibp.ipadstr 
    setargs                   2 0
    push           &pc_libmcl.strmcl.opcname 
    push           &pc_libmcl.strmcl.str 
    callproc       &strcat    
    setargs                   1 0
    push           &pc_libmcl.strmcl.str 
    callproc       &pc_libmcl.asmstr 
    push           pc_libmcl.strmcl.a u64 
    jumpfalse      #7509      u64 
    push           pc_libmcl.strmcl.b u64 
    jumpfalse      #7509      u64 
    setargs                   3 0
    push           pc_libmcl.strmcl.b u64 
    push           pc_libmcl.strmcl.a u64 
    push           pc_libmcl.strmcl.opcode i64 
    callfn         &pc_libmcl.needsizeprefix i64 
    pop            pc_libmcl.strmcl.sizepref i64 
    setargs                   3 0
    push           0          i64 
    push           pc_libmcl.strmcl.sizepref i64 
    push           pc_libmcl.strmcl.a u64 
    callproc       &pc_libmcl.asmopnd 
    setargs                   1 0
    push           ",\t"      u64 
    callproc       &pc_libmcl.asmstr 
    setargs                   3 0
    push           0          i64 
    push           pc_libmcl.strmcl.sizepref i64 
    push           pc_libmcl.strmcl.b u64 
    callproc       &pc_libmcl.asmopnd 
    jump           #7510      
#7509: 
    push           pc_libmcl.strmcl.a u64 
    jumpfalse      #7511      u64 
    push           pc_libmcl.strmcl.a u64 
    push           9          
    pushptroff                u8 1 0
    jumpfalse      #7511      i64 
    push           pc_libmcl.strmcl.opcode i64 
    push           22         i64 
    jumpne         #7512      i64 
    setargs                   3 0
    push           0          i64 
    push           0          i64 
    push           pc_libmcl.strmcl.a u64 
    callproc       &pc_libmcl.asmopnd 
    jump           #7513      
#7512: 
    setargs                   3 0
    push           0          i64 
    push           1          i64 
    push           pc_libmcl.strmcl.a u64 
    callproc       &pc_libmcl.asmopnd 
#7513: 
#7511: 
#7510: 
!docomments::
#7488: 
#7486: 
    retproc                   
End


Proc pc_libmcl.asmopnd:
    param          pc_libmcl.asmopnd.a u64 
    param          pc_libmcl.asmopnd.sizeprefix i64 
    param          pc_libmcl.asmopnd.debug i64 
    procentry                 
    setargs                   1 0
    setargs                   3 0
    push           pc_libmcl.asmopnd.debug i64 
    push           pc_libmcl.asmopnd.sizeprefix i64 
    push           pc_libmcl.asmopnd.a u64 
    callfn         &pc_libmcl.stropnd u64 
    callproc       &pc_libmcl.asmstr 
#7515: 
    retproc                   
End


Proc pc_libmcl.setsegment:
    param          pc_libmcl.setsegment.seg i64 
    param          pc_libmcl.setsegment.align i64 
    local          pc_libmcl.setsegment.opc i64 
    local          pc_libmcl.setsegment.oldalign i64 
    procentry                 
    push           pc_libmcl.setsegment.seg i64 
    push           pci_mcl.currsegment i64 
    jumpeq         #7517      i64 
    push           pc_libmcl.setsegment.seg i64 
    push           73         i64 
    casejumpeq     #7518      i64 0
    push           90         i64 
    casejumpeq     #7519      i64 0
    push           67         i64 
    casejumpeq     #7520      i64 0
    push           82         i64 
    casejumpeq     #7521      i64 0
    popstack                  i64 
    jump           #7522      
#7518: 
    push           120        i64 
    pop            pc_libmcl.setsegment.opc i64 
    jump           #7523      
#7519: 
    push           121        i64 
    pop            pc_libmcl.setsegment.opc i64 
    jump           #7523      
#7520: 
    push           122        i64 
    pop            pc_libmcl.setsegment.opc i64 
    jump           #7523      
#7521: 
    setargs                   2 0
    push           ""         u64 
    push           "CAN'T DO RODATA SEG" u64 
    callproc       &pc_libmcl.merror 
    jump           #7523      
#7522: 
    setargs                   2 0
    push           ""         u64 
    push           "BAD SEG CODE" u64 
    callproc       &pc_libmcl.merror 
#7523: 
    push           pci_mcl.mccodex u64 
    jumpfalse      #7524      u64 
    push           pci_mcl.mccodex u64 
    push           24         
    pushptroff                u8 1 0
    push           120        i64 
    setjumpeq      #7525      i64 
    push           121        i64 
    setjumpeq      #7525      i64 
    push           122        i64 
    setjumpne      #7524      i64 
#7525: 
    push           pc_libmcl.setsegment.opc i64 
    push           pci_mcl.mccodex u64 
    push           24         
    popptroff                 u8 1 0
    jump           #7526      
#7524: 
    setargs                   3 0
    push           0          u64 
    push           0          u64 
    push           pc_libmcl.setsegment.opc i64 
    callproc       &pc_libmcl.genmc 
#7526: 
    push           pc_libmcl.setsegment.seg i64 
    pop            pci_mcl.currsegment i64 
#7517: 
    push           pc_libmcl.setsegment.align i64 
    push           1          i64 
    jumple         #7527      i64 
    push           pci_mcl.mccodex u64 
    push           24         
    pushptroff                u8 1 0
    push           123        i64 
    jumpne         #7528      i64 
    push           pci_mcl.mccodex u64 
    push           8          
    pushptroff                u64 1 0
    pushptr                   i64 
    pop            pc_libmcl.setsegment.oldalign i64 
    push           pc_libmcl.setsegment.oldalign i64 
    push           pc_libmcl.setsegment.align i64 
    jumplt         #7529      i64 
    jump           #7530      
#7529: 
#7528: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.setsegment.align i64 
    callfn         &pc_libmcl.mgenint u64 
    push           123        i64 
    callproc       &pc_libmcl.genmc 
#7527: 
#7530: 
    retproc                   
End


Proc pc_libmcl.getsizeprefix: u64
    param          pc_libmcl.getsizeprefix.size i64 
    param          pc_libmcl.getsizeprefix.enable i64 
    procentry                 
    push           pc_libmcl.getsizeprefix.enable i64 
    jumptrue       #7532      i64 
    push           ""         u64 
    setret                    u64 
    jump           #7533      
#7532: 
    push           pc_libmcl.getsizeprefix.size i64 
    push           1          i64 
    casejumpeq     #7534      i64 0
    push           2          i64 
    casejumpeq     #7535      i64 0
    push           4          i64 
    casejumpeq     #7536      i64 0
    push           8          i64 
    casejumpeq     #7537      i64 0
    push           16         i64 
    casejumpeq     #7538      i64 0
    popstack                  i64 
    jump           #7539      
#7534: 
    push           "byte "    u64 
    setret                    u64 
    jump           #7533      
    jump           #7540      
#7535: 
    push           "word16 "  u64 
    setret                    u64 
    jump           #7533      
    jump           #7540      
#7536: 
    push           "word32 "  u64 
    setret                    u64 
    jump           #7533      
    jump           #7540      
#7537: 
    push           "word64 "  u64 
    setret                    u64 
    jump           #7533      
    jump           #7540      
#7538: 
    push           "word128 " u64 
    setret                    u64 
    jump           #7533      
    jump           #7540      
#7539: 
#7540: 
    push           ""         u64 
    setret                    u64 
    jump           #7533      
#7533: 
    retfn                     u64 
End


Proc pc_libmcl.needsizeprefix: i64
    param          pc_libmcl.needsizeprefix.opcode i64 
    param          pc_libmcl.needsizeprefix.a u64 
    param          pc_libmcl.needsizeprefix.b u64 
    procentry                 
    push           pc_libmcl.needsizeprefix.opcode i64 
    push           19         i64 
    casejumpeq     #7542      i64 0
    push           20         i64 
    casejumpeq     #7542      i64 0
    push           84         i64 
    casejumpeq     #7542      i64 0
    push           85         i64 
    casejumpeq     #7542      i64 0
    push           80         i64 
    casejumpeq     #7543      i64 0
    push           81         i64 
    casejumpeq     #7543      i64 0
    push           82         i64 
    casejumpeq     #7543      i64 0
    push           83         i64 
    casejumpeq     #7543      i64 0
    push           44         i64 
    casejumpeq     #7544      i64 0
    push           46         i64 
    casejumpeq     #7544      i64 0
    push           45         i64 
    casejumpeq     #7544      i64 0
    popstack                  i64 
    jump           #7545      
#7542: 
    push           1          i64 
    setret                    i64 
    jump           #7546      
    jump           #7547      
#7543: 
    push           1          i64 
    setret                    i64 
    jump           #7546      
    jump           #7547      
#7544: 
    push           pc_libmcl.needsizeprefix.a u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #7548      i64 
    push           1          i64 
    setret                    i64 
    jump           #7546      
#7548: 
    push           0          i64 
    setret                    i64 
    jump           #7546      
    jump           #7547      
#7545: 
#7547: 
    push           pc_libmcl.needsizeprefix.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #7549      i64 
    push           pc_libmcl.needsizeprefix.a u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpeq         #7549      i64 
    push           pc_libmcl.needsizeprefix.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #7549      i64 
    push           pc_libmcl.needsizeprefix.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #7550      i64 
#7549: 
    push           0          i64 
    setret                    i64 
    jump           #7546      
#7550: 
    push           1          i64 
    setret                    i64 
    jump           #7546      
#7546: 
    retfn                     i64 
End


Proc pc_libmcl.changeopndsize: u64
    param          pc_libmcl.changeopndsize.a u64 
    param          pc_libmcl.changeopndsize.size i64 
    local          pc_libmcl.changeopndsize.b u64 
    procentry                 
    push           pc_libmcl.changeopndsize.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_libmcl.changeopndsize.size i64 
    jumpeq         #7552      i64 
    push           pc_libmcl.changeopndsize.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #7553      i64 
    push           &pci_mcl.regtable 
    push           pc_libmcl.changeopndsize.a u64 
    push           10         
    pushptroff                u8 1 0
    addrefoff                 block:128 128 -128
    push           pc_libmcl.changeopndsize.size i64 
    pushptroff                u64 8 -8
    pop            pc_libmcl.changeopndsize.b u64 
    jump           #7554      
#7553: 
    setargs                   1 0
    push           pc_libmcl.changeopndsize.a u64 
    callfn         &pc_libmcl.duplopnd u64 
    pop            pc_libmcl.changeopndsize.b u64 
    push           pc_libmcl.changeopndsize.size i64 
    push           pc_libmcl.changeopndsize.b u64 
    push           8          
    popptroff                 u8 1 0
#7554: 
    push           pc_libmcl.changeopndsize.b u64 
    setret                    u64 
    jump           #7555      
#7552: 
    push           pc_libmcl.changeopndsize.a u64 
    setret                    u64 
    jump           #7555      
#7555: 
    retfn                     u64 
End


Proc pc_libmcl.makeopndind: u64
    param          pc_libmcl.makeopndind.a u64 
    param          pc_libmcl.makeopndind.size i64 
    local          pc_libmcl.makeopndind.b u64 
    procentry                 
    push           pc_libmcl.makeopndind.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #7557      i64 
    setargs                   2 0
    push           ""         u64 
    push           "makeopndind" u64 
    callproc       &pc_libmcl.merror 
#7557: 
    setargs                   3 0
    push           0          i64 
    push           pc_libmcl.makeopndind.size i64 
    push           pc_libmcl.makeopndind.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenireg u64 
    setret                    u64 
    jump           #7558      
#7558: 
    retfn                     u64 
End


Proc pc_libmcl.applyoffset: u64
    param          pc_libmcl.applyoffset.a u64 
    param          pc_libmcl.applyoffset.offset i64 
    param          pc_libmcl.applyoffset.size i64 
    local          pc_libmcl.applyoffset.b u64 
    procentry                 
    push           pc_libmcl.applyoffset.offset i64 
    push           0          i64 
    jumpne         #7560      i64 
    push           pc_libmcl.applyoffset.size i64 
    push           0          i64 
    jumpne         #7560      i64 
    push           pc_libmcl.applyoffset.a u64 
    setret                    u64 
    jump           #7561      
#7560: 
    setargs                   1 0
    push           pc_libmcl.applyoffset.a u64 
    callfn         &pc_libmcl.duplopnd u64 
    pop            pc_libmcl.applyoffset.b u64 
    push           pc_libmcl.applyoffset.b u64 
    push           14         
    addrefoff                 u64 1 0
    push           pc_libmcl.applyoffset.offset i64 
    addto                     i32 
    push           pc_libmcl.applyoffset.size i64 
    jumpfalse      #7562      i64 
    push           pc_libmcl.applyoffset.size i64 
    push           pc_libmcl.applyoffset.b u64 
    push           8          
    popptroff                 u8 1 0
#7562: 
    push           pc_libmcl.applyoffset.b u64 
    setret                    u64 
    jump           #7561      
#7561: 
    retfn                     u64 
End


Proc pc_libmcl.mgenint: u64
    param          pc_libmcl.mgenint.x i64 
    param          pc_libmcl.mgenint.size i64 
    procentry                 
    push           pc_libmcl.mgenint.x i64 
    push           0          i64 
    push           32         i64 
    jumpnotinrange #7564      i64 
    push           pc_libmcl.mgenint.size i64 
    push           8          i64 
    jumpne         #7564      i64 
    push           &pci_mcl.smallinttable 
    push           pc_libmcl.mgenint.x i64 
    pushptroff                u64 8 0
    setret                    u64 
    jump           #7565      
#7564: 
    setargs                   2 0
    push           pc_libmcl.mgenint.size i64 
    push           pc_libmcl.mgenint.x i64 
    callfn         &pc_libmcl.mgenint0 u64 
    setret                    u64 
    jump           #7565      
#7565: 
    retfn                     u64 
End


Proc pc_libmcl.mgenint0: u64
    param          pc_libmcl.mgenint0.x i64 
    param          pc_libmcl.mgenint0.size i64 
    local          pc_libmcl.mgenint0.a u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenint0.a u64 
    push           2          i64 
    push           pc_libmcl.mgenint0.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenint0.x i64 
    push           pc_libmcl.mgenint0.a u64 
    push           0          
    popptroff                 i64 1 0
    push           1          i64 
    push           pc_libmcl.mgenint0.a u64 
    push           12         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenint0.size i64 
    push           pc_libmcl.mgenint0.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenint0.a u64 
    setret                    u64 
    jump           #7567      
#7567: 
    retfn                     u64 
End


Proc pc_libmcl.mgenrealmem: u64
    param          pc_libmcl.mgenrealmem.x r64 
    param          pc_libmcl.mgenrealmem.size i64 
    local          pc_libmcl.mgenrealmem.a u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenrealmem.a u64 
    push           3          i64 
    push           pc_libmcl.mgenrealmem.a u64 
    push           9          
    popptroff                 u8 1 0
    setargs                   2 0
    push           pc_libmcl.mgenrealmem.size i64 
    push           pc_libmcl.mgenrealmem.x r64 
    callfn         &pc_libmcl.getrealindex i64 
    push           pc_libmcl.mgenrealmem.a u64 
    push           0          
    popptroff                 i64 1 0
    push           7          i64 
    push           pc_libmcl.mgenrealmem.a u64 
    push           12         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenrealmem.size i64 
    push           pc_libmcl.mgenrealmem.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenrealmem.a u64 
    setret                    u64 
    jump           #7569      
#7569: 
    retfn                     u64 
End


Proc pc_libmcl.mgenrealimm: u64
    param          pc_libmcl.mgenrealimm.x r64 
    param          pc_libmcl.mgenrealimm.size i64 
    local          pc_libmcl.mgenrealimm.a u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenrealimm.a u64 
    push           2          i64 
    push           pc_libmcl.mgenrealimm.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenrealimm.x r64 
    push           pc_libmcl.mgenrealimm.a u64 
    push           0          
    popptroff                 r64 1 0
    push           2          i64 
    push           pc_libmcl.mgenrealimm.a u64 
    push           12         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenrealimm.size i64 
    push           pc_libmcl.mgenrealimm.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenrealimm.a u64 
    setret                    u64 
    jump           #7571      
#7571: 
    retfn                     u64 
End


Proc pc_libmcl.mgenlabel: u64
    param          pc_libmcl.mgenlabel.x i64 
    local          pc_libmcl.mgenlabel.a u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenlabel.a u64 
    push           2          i64 
    push           pc_libmcl.mgenlabel.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenlabel.x i64 
    push           0          i64 
    jumpne         #7573      i64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pc_libmcl.mgenlabel.x i64 
#7573: 
    push           pc_libmcl.mgenlabel.x i64 
    push           pc_libmcl.mgenlabel.a u64 
    push           0          
    popptroff                 i64 1 0
    push           7          i64 
    push           pc_libmcl.mgenlabel.a u64 
    push           12         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenlabel.a u64 
    setret                    u64 
    jump           #7574      
#7574: 
    retfn                     u64 
End


Proc pc_libmcl.mgenlabelmem: u64
    param          pc_libmcl.mgenlabelmem.x i64 
    local          pc_libmcl.mgenlabelmem.a u64 
    procentry                 
    setargs                   1 0
    push           pc_libmcl.mgenlabelmem.x i64 
    callfn         &pc_libmcl.mgenlabel u64 
    pop            pc_libmcl.mgenlabelmem.a u64 
    push           3          i64 
    push           pc_libmcl.mgenlabelmem.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenlabelmem.a u64 
    setret                    u64 
    jump           #7576      
#7576: 
    retfn                     u64 
End


Proc pc_libmcl.mgenregvar: u64
    param          pc_libmcl.mgenregvar.d u64 
    local          pc_libmcl.mgenregvar.a u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.mgenregvar.d u64 
    push           48         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_libmcl.mgenregvar.a u64 
    push           1          i64 
    push           &pci_mcl.isregvar 
    push           pc_libmcl.mgenregvar.d u64 
    push           48         
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    push           pc_libmcl.mgenregvar.a u64 
    setret                    u64 
    jump           #7578      
#7578: 
    retfn                     u64 
End


Proc pc_libmcl.mgenxregvar: u64
    param          pc_libmcl.mgenxregvar.d u64 
    local          pc_libmcl.mgenxregvar.a u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.mgenxregvar.d u64 
    push           48         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenxreg u64 
    pop            pc_libmcl.mgenxregvar.a u64 
    push           1          i64 
    push           &pci_mcl.isxregvar 
    push           pc_libmcl.mgenxregvar.d u64 
    push           48         
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    push           pc_libmcl.mgenxregvar.a u64 
    setret                    u64 
    jump           #7580      
#7580: 
    retfn                     u64 
End


Proc pc_libmcl.mgenmem: u64
    param          pc_libmcl.mgenmem.d u64 
    local          pc_libmcl.mgenmem.a u64 
    local          pc_libmcl.mgenmem.p u64 
    local          pc_libmcl.mgenmem.reg i64 
    procentry                 
    push           pc_libmcl.mgenmem.d u64 
    push           16         
    pushptroff                u64 1 0
    pop            pc_libmcl.mgenmem.p u64 
    push           pc_libmcl.mgenmem.d u64 
    push           48         
    pushptroff                u8 1 0
    jumpfalse      #7582      i64 
    push           &pc_tables.pfloat 
    push           pc_libmcl.mgenmem.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #7583      i64 
    setargs                   1 0
    push           pc_libmcl.mgenmem.d u64 
    callfn         &pc_libmcl.mgenxregvar u64 
    setret                    u64 
    jump           #7584      
    jump           #7585      
#7583: 
    setargs                   1 0
    push           pc_libmcl.mgenmem.d u64 
    callfn         &pc_libmcl.mgenregvar u64 
    setret                    u64 
    jump           #7584      
#7585: 
#7582: 
    push           0          i64 
    pop            pc_libmcl.mgenmem.reg i64 
    push           pc_libmcl.mgenmem.d u64 
    push           27         
    pushptroff                u8 1 0
    push           17         i64 
    setjumpeq      #7586      i64 
    push           18         i64 
    setjumpne      #7587      i64 
#7586: 
    push           pci_mcl.foptimise u8 
    jumptrue       #7588      i64 
    push           pc_libmcl.mgenmem.d u64 
    push           32         
    pushptroff                i32 1 0
    push           -128       i64 
    push           64         i64 
    jumpnotinrange #7588      i64 
    push           pc_libmcl.mgenmem.p u64 
    push           4          
    pushptroff                i32 1 0
    push           8          i64 
    jumpne         #7588      i64 
    push           &pci_mcl.frameregtable 
    push           pc_libmcl.mgenmem.d u64 
    push           32         
    pushptroff                i32 1 0
    pushptroff                u64 8 1024
    setret                    u64 
    jump           #7584      
#7588: 
    push           15         i64 
    pop            pc_libmcl.mgenmem.reg i64 
#7587: 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenmem.a u64 
    push           3          i64 
    push           pc_libmcl.mgenmem.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenmem.reg i64 
    push           pc_libmcl.mgenmem.a u64 
    push           10         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenmem.d u64 
    push           pc_libmcl.mgenmem.a u64 
    push           0          
    popptroff                 u64 1 0
    push           pc_libmcl.mgenmem.d u64 
    push           49         
    addrefoff                 u64 1 0
    incr                      i16 1
    push           5          i64 
    push           pc_libmcl.mgenmem.a u64 
    push           12         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenmem.p u64 
    push           4          
    pushptroff                i32 1 0
    push           8          i64 
    min                       i64 
    push           pc_libmcl.mgenmem.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenmem.a u64 
    setret                    u64 
    jump           #7584      
#7584: 
    retfn                     u64 
End


Proc pc_libmcl.mgenmemhigh: u64
    param          pc_libmcl.mgenmemhigh.d u64 
    local          pc_libmcl.mgenmemhigh.a u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenmemhigh.a u64 
    push           3          i64 
    push           pc_libmcl.mgenmemhigh.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenmemhigh.d u64 
    push           27         
    pushptroff                u8 1 0
    push           17         i64 
    setjumpeq      #7590      i64 
    push           18         i64 
    setjumpne      #7591      i64 
#7590: 
    push           15         i64 
    push           pc_libmcl.mgenmemhigh.a u64 
    push           10         
    popptroff                 u8 1 0
#7591: 
    push           pc_libmcl.mgenmemhigh.d u64 
    push           49         
    addrefoff                 u64 1 0
    incr                      i16 1
    push           pc_libmcl.mgenmemhigh.d u64 
    push           pc_libmcl.mgenmemhigh.a u64 
    push           0          
    popptroff                 u64 1 0
    push           5          i64 
    push           pc_libmcl.mgenmemhigh.a u64 
    push           12         
    popptroff                 u8 1 0
    push           8          i64 
    push           pc_libmcl.mgenmemhigh.a u64 
    push           14         
    popptroff                 i32 1 0
    push           8          i64 
    push           pc_libmcl.mgenmemhigh.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenmemhigh.a u64 
    setret                    u64 
    jump           #7592      
#7592: 
    retfn                     u64 
End


Proc pc_libmcl.mgenmemaddr: u64
    param          pc_libmcl.mgenmemaddr.d u64 
    local          pc_libmcl.mgenmemaddr.a u64 
    procentry                 
    push           1          u64 
    push           pc_libmcl.mgenmemaddr.d u64 
    push           46         
    addrefoff                 u64 1 0
    push           2          i64 
    popdotindex               u16 
    push           pc_libmcl.mgenmemaddr.d u64 
    push           49         
    addrefoff                 u64 1 0
    incr                      i16 1
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenmemaddr.a u64 
    push           2          i64 
    push           pc_libmcl.mgenmemaddr.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenmemaddr.d u64 
    push           pc_libmcl.mgenmemaddr.a u64 
    push           0          
    popptroff                 u64 1 0
    push           pc_libmcl.mgenmemaddr.d u64 
    push           49         
    addrefoff                 u64 1 0
    incr                      i16 1
    push           5          i64 
    push           pc_libmcl.mgenmemaddr.a u64 
    push           12         
    popptroff                 u8 1 0
    push           8          i64 
    push           pc_libmcl.mgenmemaddr.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenmemaddr.a u64 
    setret                    u64 
    jump           #7594      
#7594: 
    retfn                     u64 
End


Proc pc_libmcl.mgenreg: u64
    param          pc_libmcl.mgenreg.reg i64 
    param          pc_libmcl.mgenreg.size i64 
    procentry                 
    push           &pci_mcl.regtable 
    push           pc_libmcl.mgenreg.reg i64 
    addrefoff                 block:128 128 -128
    push           pc_libmcl.mgenreg.size i64 
    pushptroff                u64 8 -8
    setret                    u64 
    jump           #7596      
    setargs                   2 0
    push           pc_libmcl.mgenreg.size i64 
    push           pc_libmcl.mgenreg.reg i64 
    callfn         &pc_libmcl.mgenreg0 u64 
    setret                    u64 
    jump           #7596      
#7596: 
    retfn                     u64 
End


Proc pc_libmcl.mgenreg0: u64
    param          pc_libmcl.mgenreg0.reg i64 
    param          pc_libmcl.mgenreg0.size i64 
    local          pc_libmcl.mgenreg0.a u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenreg0.a u64 
    push           1          i64 
    push           pc_libmcl.mgenreg0.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenreg0.reg i64 
    push           pc_libmcl.mgenreg0.a u64 
    push           10         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenreg0.size i64 
    push           pc_libmcl.mgenreg0.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenreg0.a u64 
    setret                    u64 
    jump           #7598      
#7598: 
    retfn                     u64 
End


Proc pc_libmcl.mgenireg: u64
    param          pc_libmcl.mgenireg.reg i64 
    param          pc_libmcl.mgenireg.size i64 
    param          pc_libmcl.mgenireg.offset i64 
    local          pc_libmcl.mgenireg.a u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenireg.a u64 
    push           3          i64 
    push           pc_libmcl.mgenireg.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenireg.reg i64 
    push           pc_libmcl.mgenireg.a u64 
    push           10         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenireg.size i64 
    push           pc_libmcl.mgenireg.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenireg.offset i64 
    push           pc_libmcl.mgenireg.a u64 
    push           14         
    popptroff                 i32 1 0
    push           pc_libmcl.mgenireg.a u64 
    setret                    u64 
    jump           #7600      
#7600: 
    retfn                     u64 
End


Proc pc_libmcl.roundsizetg: i64
    param          pc_libmcl.roundsizetg.size i64 
    procentry                 
    jump           #7602      
#7603: 
    push           &pc_libmcl.roundsizetg.size 
    incr                      i64 1
#7602: 
    push           pc_libmcl.roundsizetg.size i64 
    push           7          i64 
    iand                      i64 
    jumptrue       #7603      i64 
#7604: 
    push           pc_libmcl.roundsizetg.size i64 
    setret                    i64 
    jump           #7605      
#7605: 
    retfn                     i64 
End


Proc pc_libmcl.getregname: u64
    param          pc_libmcl.getregname.reg i64 
    param          pc_libmcl.getregname.size i64 
    local          pc_libmcl.getregname.str2 block:16 
    local          pc_libmcl.getregname.rs u64 
    local          pc_libmcl.getregname.size2 i64 
    procentry                 
    push           pc_libmcl.getregname.size i64 
    pop            pc_libmcl.getregname.size2 i64 
    push           pc_libmcl.getregname.size2 i64 
    push           16         i64 
    jumple         #7607      i64 
    push           17         i64 
    pop            pc_libmcl.getregname.size2 i64 
#7607: 
    push           pc_libmcl.getregname.reg i64 
    push           0          i64 
    casejumpeq     #7608      i64 0
    push           15         i64 
    casejumpeq     #7609      i64 0
    push           16         i64 
    casejumpeq     #7610      i64 0
    popstack                  i64 
    jump           #7611      
#7608: 
    push           "-"        u64 
    setret                    u64 
    jump           #7612      
    jump           #7613      
#7609: 
    push           "frame"    u64 
    pop            pc_libmcl.getregname.rs u64 
    jump           #7613      
#7610: 
    push           "stack"    u64 
    pop            pc_libmcl.getregname.rs u64 
    jump           #7613      
#7611: 
    setargs                   2 0
    push           &pc_libmcl.getregname.str2 
    push           pc_libmcl.getregname.reg i64 
    push           1          i64 
    sub                       i64 
    callproc       &msysp.getstrint 
    push           &pc_libmcl.getregname.str2 
    pop            pc_libmcl.getregname.rs u64 
#7613: 
    setargs                   1 0
    push           &pc_libmcl.getregname.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           &pc_libmcl.getregname.prefix 
    push           pc_libmcl.getregname.size2 i64 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           pc_libmcl.getregname.rs u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           &pc_libmcl.getregname.str 
    setret                    u64 
    jump           #7612      
#7612: 
    retfn                     u64 
End


Proc pc_libmcl.fgetregname: u64
    param          pc_libmcl.fgetregname.reg i64 
    param          pc_libmcl.fgetregname.size i64 
    procentry                 
    push           pc_libmcl.fgetregname.reg i64 
    push           0          i64 
    jumpne         #7615      i64 
    push           "-"        u64 
    setret                    u64 
    jump           #7616      
#7615: 
    setargs                   1 0
    push           &pc_libmcl.fgetregname.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "XMM"      u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           pc_libmcl.fgetregname.reg i64 
    push           1          i64 
    sub                       i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           &pc_libmcl.fgetregname.str 
    setret                    u64 
    jump           #7616      
#7616: 
    retfn                     u64 
End


Proc pc_libmcl.sameoperand: i64
    param          pc_libmcl.sameoperand.a u64 
    param          pc_libmcl.sameoperand.b u64 
    procentry                 
    setargs                   3 0
    push           19         u64 
    push           pc_libmcl.sameoperand.b u64 
    push           pc_libmcl.sameoperand.a u64 
    callfn         &memcmp    i32 
    push           0          i64 
    seteq                     i64 
    setret                    i64 
    jump           #7618      
#7618: 
    retfn                     i64 
End


Proc pc_libmcl.sameregopnd: i64
    param          pc_libmcl.sameregopnd.a u64 
    param          pc_libmcl.sameregopnd.b u64 
    procentry                 
    push           pc_libmcl.sameregopnd.a u64 
    push           9          
    pushptroff                u8 1 0
    push           pc_libmcl.sameregopnd.b u64 
    push           9          
    pushptroff                u8 1 0
    jumpne         #7620      i64 
    push           pc_libmcl.sameregopnd.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #7621      i64 
#7620: 
    push           0          i64 
    setret                    i64 
    jump           #7622      
#7621: 
    push           pc_libmcl.sameregopnd.a u64 
    push           10         
    pushptroff                u8 1 0
    push           pc_libmcl.sameregopnd.b u64 
    push           10         
    pushptroff                u8 1 0
    seteq                     i64 
    setret                    i64 
    jump           #7622      
#7622: 
    retfn                     i64 
End


Proc pc_libmcl.getstringindex: i64
    param          pc_libmcl.getstringindex.s u64 
    procentry                 
    push           pc_libmcl.getstringindex.s u64 
    push           0          u64 
    jumpne         #7624      u64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pci_mcl.kk0used i64 
    push           pci_mcl.kk0used i64 
    setret                    i64 
    jump           #7625      
#7624: 
    push           pci_mcl.nstrings i64 
    push           pci_mcl.stringtablesize i64 
    jumplt         #7626      i64 
    setargs                   0 0
    callproc       &pc_libmcl.extendstringtable 
#7626: 
    push           pci_mcl.nstrings i64 
    jumpfalse      #7627      i64 
    setargs                   2 0
    push           pc_libmcl.getstringindex.s u64 
    push           pci_mcl.stringtable u64 
    push           pci_mcl.nstrings i64 
    pushptroff                u64 8 -8
    callfn         &mlibp.eqstring i64 
    jumpfalse      #7627      i64 
    push           pci_mcl.stringlabtable u64 
    push           pci_mcl.nstrings i64 
    pushptroff                i32 4 -4
    setret                    i64 
    jump           #7625      
#7627: 
    push           pc_libmcl.getstringindex.s u64 
    push           pci_mcl.stringtable u64 
    push           &pci_mcl.nstrings 
    incrload                  i64 1
    popptroff                 u64 8 -8
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    push           pci_mcl.stringlabtable u64 
    push           pci_mcl.nstrings i64 
    popptroff                 i32 4 -4
    push           pci_mcl.mlabelno i64 
    setret                    i64 
    jump           #7625      
#7625: 
    retfn                     i64 
End


Proc pc_libmcl.getrealindex: i64
    param          pc_libmcl.getrealindex.x r64 
    param          pc_libmcl.getrealindex.size i64 
    procentry                 
    push           pci_mcl.nreals i64 
    push           pci_mcl.realtablesize i64 
    jumplt         #7629      i64 
    setargs                   0 0
    callproc       &pc_libmcl.extendrealtable 
#7629: 
    push           pc_libmcl.getrealindex.x r64 
    push           pci_mcl.realtable u64 
    push           &pci_mcl.nreals 
    incrload                  i64 1
    popptroff                 r64 8 -8
    push           &pci_mcl.mlabelno 
    incr                      i64 1
    startmult                 
    push           pc_libmcl.getrealindex.size i64 
    push           8          i64 
    jumpne         #7630      i64 
    push           pci_mcl.mlabelno i64 
    resetmult                 
    jump           #7631      
#7630: 
    push           pci_mcl.mlabelno i64 
    neg                       i64 
    endmult                   
#7631: 
    push           pci_mcl.reallabtable u64 
    push           pci_mcl.nreals i64 
    popptroff                 i32 4 -4
    push           pci_mcl.mlabelno i64 
    setret                    i64 
    jump           #7632      
#7632: 
    retfn                     i64 
End


Proc pc_libmcl.extendstringtable:
    local          pc_libmcl.extendstringtable.oldstringtable u64 
    local          pc_libmcl.extendstringtable.oldstringlabtable u64 
    local          pc_libmcl.extendstringtable.oldstringtablesize i64 
    local          pc_libmcl.extendstringtable.i i64 
    procentry                 
    push           pci_mcl.stringtablesize i64 
    pop            pc_libmcl.extendstringtable.oldstringtablesize i64 
    push           pci_mcl.stringtable u64 
    pop            pc_libmcl.extendstringtable.oldstringtable u64 
    push           pci_mcl.stringlabtable u64 
    pop            pc_libmcl.extendstringtable.oldstringlabtable u64 
    push           &pci_mcl.stringtablesize 
    push           2          i64 
    multo                     i64 
    setargs                   1 0
    push           8          i64 
    push           pci_mcl.stringtablesize i64 
    mul                       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pci_mcl.stringtable u64 
    setargs                   1 0
    push           4          i64 
    push           pci_mcl.stringtablesize i64 
    mul                       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pci_mcl.stringlabtable u64 
#7634: 
    push           1          i64 
    pop            pc_libmcl.extendstringtable.i i64 
    push           pci_mcl.nstrings i64 
    push           1          i64 
    jumplt         #7635      i64 
#7636: 
    push           pc_libmcl.extendstringtable.oldstringtable u64 
    push           pc_libmcl.extendstringtable.i i64 
    pushptroff                u64 8 -8
    push           pci_mcl.stringtable u64 
    push           pc_libmcl.extendstringtable.i i64 
    popptroff                 u64 8 -8
    push           pc_libmcl.extendstringtable.oldstringlabtable u64 
    push           pc_libmcl.extendstringtable.i i64 
    pushptroff                i32 4 -4
    push           pci_mcl.stringlabtable u64 
    push           pc_libmcl.extendstringtable.i i64 
    popptroff                 i32 4 -4
#7637: 
    forup          #7636      i64 1
    opnd           pc_libmcl.extendstringtable.i 
    opnd           pci_mcl.nstrings 
#7635: 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.extendstringtable.oldstringtablesize i64 
    mul                       i64 
    push           pc_libmcl.extendstringtable.oldstringtable u64 
    callproc       &mlibp.pcm_free 
    setargs                   2 0
    push           4          i64 
    push           pc_libmcl.extendstringtable.oldstringtablesize i64 
    mul                       i64 
    push           pc_libmcl.extendstringtable.oldstringlabtable u64 
    callproc       &mlibp.pcm_free 
#7638: 
    retproc                   
End


Proc pc_libmcl.extendrealtable:
    local          pc_libmcl.extendrealtable.oldrealtable u64 
    local          pc_libmcl.extendrealtable.oldreallabtable u64 
    local          pc_libmcl.extendrealtable.oldrealtablesize i64 
    local          pc_libmcl.extendrealtable.i i64 
    procentry                 
    push           pci_mcl.realtablesize i64 
    pop            pc_libmcl.extendrealtable.oldrealtablesize i64 
    push           pci_mcl.realtable u64 
    pop            pc_libmcl.extendrealtable.oldrealtable u64 
    push           pci_mcl.reallabtable u64 
    pop            pc_libmcl.extendrealtable.oldreallabtable u64 
    push           &pci_mcl.realtablesize 
    push           2          i64 
    multo                     i64 
    setargs                   1 0
    push           8          i64 
    push           pci_mcl.realtablesize i64 
    mul                       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pci_mcl.realtable u64 
    setargs                   1 0
    push           4          i64 
    push           pci_mcl.realtablesize i64 
    mul                       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pci_mcl.reallabtable u64 
#7640: 
    push           1          i64 
    pop            pc_libmcl.extendrealtable.i i64 
    push           pci_mcl.nreals i64 
    push           1          i64 
    jumplt         #7641      i64 
#7642: 
    push           pc_libmcl.extendrealtable.oldrealtable u64 
    push           pc_libmcl.extendrealtable.i i64 
    pushptroff                r64 8 -8
    push           pci_mcl.realtable u64 
    push           pc_libmcl.extendrealtable.i i64 
    popptroff                 r64 8 -8
    push           pc_libmcl.extendrealtable.oldreallabtable u64 
    push           pc_libmcl.extendrealtable.i i64 
    pushptroff                i32 4 -4
    push           pci_mcl.reallabtable u64 
    push           pc_libmcl.extendrealtable.i i64 
    popptroff                 i32 4 -4
#7643: 
    forup          #7642      i64 1
    opnd           pc_libmcl.extendrealtable.i 
    opnd           pci_mcl.nreals 
#7641: 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.extendrealtable.oldrealtablesize i64 
    mul                       i64 
    push           pc_libmcl.extendrealtable.oldrealtable u64 
    callproc       &mlibp.pcm_free 
    setargs                   2 0
    push           4          i64 
    push           pc_libmcl.extendrealtable.oldrealtablesize i64 
    mul                       i64 
    push           pc_libmcl.extendrealtable.oldreallabtable u64 
    callproc       &mlibp.pcm_free 
#7644: 
    retproc                   
End


Proc pc_libmcl.asmstr:
    param          pc_libmcl.asmstr.s u64 
    procentry                 
    setargs                   2 0
    push           pc_libmcl.asmstr.s u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
#7646: 
    retproc                   
End


Proc pc_libmcl.asmchar:
    param          pc_libmcl.asmchar.c i64 
    procentry                 
    setargs                   2 0
    push           pc_libmcl.asmchar.c i64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_char 
#7648: 
    retproc                   
End


Proc pc_libmcl.getfullname: u64
    param          pc_libmcl.getfullname.d u64 
    local          pc_libmcl.getfullname.name u64 
    procentry                 
    push           pc_libmcl.getfullname.d u64 
    pushptr                   u64 
    pop            pc_libmcl.getfullname.name u64 
    push           pc_libmcl.getfullname.d u64 
    push           48         
    pushptroff                u8 1 0
    jumpfalse      #7650      i64 
    setargs                   1 0
    push           &pc_libmcl.getfullname.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "#.#"      u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    startmult                 
    push           pc_libmcl.getfullname.d u64 
    push           46         
    pushptroff                u16 1 0
    push           4          i64 
    dotindex                  i64 
    jumpfalse      #7651      u64 
    push           "X"        u64 
    resetmult                 
    jump           #7652      
#7651: 
    push           "R"        u64 
    endmult                   
#7652: 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libmcl.getfullname.name u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           &pc_libmcl.getfullname.str 
    setret                    u64 
    jump           #7653      
#7650: 
    startmult                 
    push           pc_libmcl.getfullname.d u64 
    push           46         
    pushptroff                u16 1 0
    push           8          i64 
    dotindex                  i64 
    jumpfalse      #7654      u64 
    push           pc_libmcl.getfullname.d u64 
    push           46         
    pushptroff                u16 1 0
    push           1          i64 
    dotindex                  i64 
    jumpfalse      #7654      u64 
    setargs                   2 0
    push           "`"        u64 
    push           &pc_libmcl.getfullname.str 
    callproc       &strcpy    
    setargs                   2 0
    push           pc_libmcl.getfullname.name u64 
    push           &pc_libmcl.getfullname.str 
    callproc       &strcat    
    setargs                   2 0
    push           "*"        u64 
    push           &pc_libmcl.getfullname.str 
    callfn         &strcat    u64 
    resetmult                 
    jump           #7655      
#7654: 
    push           pc_libmcl.getfullname.d u64 
    push           46         
    pushptroff                u16 1 0
    push           1          i64 
    dotindex                  i64 
    jumpfalse      #7656      u64 
    setargs                   2 0
    push           pc_libmcl.getfullname.name u64 
    push           &pc_libmcl.getfullname.str 
    callproc       &strcpy    
    setargs                   2 0
    push           "*"        u64 
    push           &pc_libmcl.getfullname.str 
    callfn         &strcat    u64 
    resetmult                 
    jump           #7655      
#7656: 
    push           pc_libmcl.getfullname.name u64 
    endmult                   
#7655: 
    setret                    u64 
    jump           #7653      
#7653: 
    retfn                     u64 
End


Proc pc_libmcl.getfulltempname: u64
    param          pc_libmcl.getfulltempname.tempno i64 
    procentry                 
    push           "TEMP"     u64 
    setret                    u64 
    jump           #7658      
#7658: 
    retfn                     u64 
End


Proc pc_libmcl.merror:
    param          pc_libmcl.merror.mess u64 
    param          pc_libmcl.merror.param u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "MCL Error: # (#) [#]" u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           pc_libmcl.merror.mess u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libmcl.merror.param u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.mseqno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#7660: 
    retproc                   
End


Proc pc_libmcl.merrort:
    param          pc_libmcl.merrort.mess u64 
    param          pc_libmcl.merrort.t i64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "MCL Type not supported: # (#) [#]" u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           pc_libmcl.merrort.mess u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pc_tables.pstdnames 
    push           pc_libmcl.merrort.t i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.mseqno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#7662: 
    retproc                   
End


Proc pc_libmcl.merroropnd:
    param          pc_libmcl.merroropnd.mess u64 
    param          pc_libmcl.merroropnd.opndtype i64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "MCL Opnd not supported: # (#) [#]" u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           pc_libmcl.merroropnd.mess u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pc_tables.opndnames 
    push           pc_libmcl.merroropnd.opndtype i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.mseqno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#7664: 
    retproc                   
End


Proc pc_libmcl.genstringtable:
    local          pc_libmcl.genstringtable.i i64 
    local          pc_libmcl.genstringtable.col i64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           73         i64 
    callproc       &pc_libmcl.setsegment 
    push           pci_mcl.kk0used i64 
    jumpfalse      #7666      i64 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.kk0used i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_libmcl.gendb 
#7666: 
    push           pci_mcl.nstrings i64 
    jumptrue       #7667      i64 
    jump           #7668      
#7667: 
#7669: 
    push           1          i64 
    pop            pc_libmcl.genstringtable.i i64 
    push           pci_mcl.nstrings i64 
    push           1          i64 
    jumplt         #7670      i64 
#7671: 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.stringlabtable u64 
    push           pc_libmcl.genstringtable.i i64 
    pushptroff                i32 4 -4
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   2 0
    push           1          i64 
    push           pci_mcl.stringtable u64 
    push           pc_libmcl.genstringtable.i i64 
    pushptroff                u64 8 -8
    callproc       &pc_libmcl.genstring 
#7672: 
    forup          #7671      i64 1
    opnd           pc_libmcl.genstringtable.i 
    opnd           pci_mcl.nstrings 
#7670: 
#7668: 
    retproc                   
End


Proc pc_libmcl.genstring:
    param          pc_libmcl.genstring.s u64 
    param          pc_libmcl.genstring.doterm i64 
    local          pc_libmcl.genstring.i i64 
    local          pc_libmcl.genstring.c i64 
    local          pc_libmcl.genstring.seqlen i64 
    local          pc_libmcl.genstring.length i64 
    local          pc_libmcl.genstring.seq u64 
    local          pc_libmcl.genstring.av_1 i64 
    procentry                 
    setargs                   1 0
    push           pc_libmcl.genstring.s u64 
    callfn         &strlen    i64 
    pop            pc_libmcl.genstring.length i64 
    push           pc_libmcl.genstring.length i64 
    push           0          i64 
    jumpne         #7674      i64 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_libmcl.gendb 
    jump           #7675      
#7674: 
    push           0          i64 
    pop            pc_libmcl.genstring.seqlen i64 
#7676: 
    push           pc_libmcl.genstring.length i64 
    pop            pc_libmcl.genstring.av_1 i64 
    push           pc_libmcl.genstring.av_1 i64 
    push           0          i64 
    jumple         #7677      i64 
#7678: 
    push           &pc_libmcl.genstring.s 
    loadincr                  u64 1
    pushptr                   u8 
    pop            pc_libmcl.genstring.c i64 
    push           pc_libmcl.genstring.c i64 
    push           32         i64 
    jumplt         #7679      i64 
    push           pc_libmcl.genstring.c i64 
    push           127        i64 
    jumpge         #7679      i64 
    push           pc_libmcl.genstring.c i64 
    push           34         i64 
    jumpne         #7680      i64 
#7679: 
    push           pc_libmcl.genstring.seqlen i64 
    jumpfalse      #7681      i64 
    setargs                   2 0
    push           pc_libmcl.genstring.seqlen i64 
    push           pc_libmcl.genstring.seq u64 
    callproc       &pc_libmcl.gendbstring 
    push           0          i64 
    pop            pc_libmcl.genstring.seqlen i64 
#7681: 
    setargs                   1 0
    push           pc_libmcl.genstring.c i64 
    callproc       &pc_libmcl.gendb 
    jump           #7682      
#7680: 
    push           pc_libmcl.genstring.seqlen i64 
    push           0          i64 
    jumpne         #7683      i64 
    push           1          i64 
    pop            pc_libmcl.genstring.seqlen i64 
    push           pc_libmcl.genstring.s u64 
    push           1          i64 
    subrefoff                 u64 1 0
    pop            pc_libmcl.genstring.seq u64 
    jump           #7684      
#7683: 
    push           &pc_libmcl.genstring.seqlen 
    incr                      i64 1
#7684: 
#7682: 
#7685: 
    to             #7678      
    opnd           pc_libmcl.genstring.av_1 
#7677: 
    push           pc_libmcl.genstring.seqlen i64 
    jumpfalse      #7686      i64 
    setargs                   2 0
    push           pc_libmcl.genstring.seqlen i64 
    push           pc_libmcl.genstring.seq u64 
    callproc       &pc_libmcl.gendbstring 
#7686: 
    push           pc_libmcl.genstring.doterm i64 
    jumpfalse      #7687      i64 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_libmcl.gendb 
#7687: 
#7675: 
    retproc                   
End


Proc pc_libmcl.gendb:
    param          pc_libmcl.gendb.a i64 
    procentry                 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.gendb.a i64 
    callfn         &pc_libmcl.mgenint u64 
    push           114        i64 
    callproc       &pc_libmcl.genmc 
#7689: 
    retproc                   
End


Proc pc_libmcl.gendbstring:
    param          pc_libmcl.gendbstring.s u64 
    param          pc_libmcl.gendbstring.length i64 
    procentry                 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           pc_libmcl.gendbstring.length i64 
    push           pc_libmcl.gendbstring.s u64 
    callfn         &pc_libmcl.mgenstring u64 
    push           114        i64 
    callproc       &pc_libmcl.genmc 
#7691: 
    retproc                   
End


Proc pc_libmcl.gendq:
    param          pc_libmcl.gendq.a i64 
    procentry                 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.gendq.a i64 
    callfn         &pc_libmcl.mgenint u64 
    push           117        i64 
    callproc       &pc_libmcl.genmc 
#7693: 
    retproc                   
End


Proc pc_libmcl.gendqname:
    param          pc_libmcl.gendqname.d u64 
    procentry                 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.gendqname.d u64 
    callfn         &pc_libmcl.mgenmemaddr u64 
    push           117        i64 
    callproc       &pc_libmcl.genmc 
#7695: 
    retproc                   
End


Proc pc_libmcl.gendqlabel:
    param          pc_libmcl.gendqlabel.lab i64 
    procentry                 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.gendqlabel.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           117        i64 
    callproc       &pc_libmcl.genmc 
#7697: 
    retproc                   
End


Proc pc_libmcl.genrealtable:
    local          pc_libmcl.genrealtable.x r64 
    local          pc_libmcl.genrealtable.i i64 
    procentry                 
    push           pci_mcl.nreals i64 
    jumptrue       #7699      i64 
    jump           #7700      
#7699: 
    setargs                   1 0
    push           "Real Table" u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   2 0
    push           8          i64 
    push           73         i64 
    callproc       &pc_libmcl.setsegment 
#7701: 
    push           1          i64 
    pop            pc_libmcl.genrealtable.i i64 
    push           pci_mcl.nreals i64 
    push           1          i64 
    jumplt         #7702      i64 
#7703: 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.reallabtable u64 
    push           pc_libmcl.genrealtable.i i64 
    pushptroff                i32 4 -4
    abs                       i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    push           pci_mcl.realtable u64 
    push           pc_libmcl.genrealtable.i i64 
    pushptroff                r64 8 -8
    pop            pc_libmcl.genrealtable.x r64 
    push           pci_mcl.reallabtable u64 
    push           pc_libmcl.genrealtable.i i64 
    pushptroff                i32 4 -4
    push           0          i64 
    jumple         #7704      i64 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.genrealtable.x r64 
    callfn         &pc_libmcl.mgenrealimm u64 
    push           117        i64 
    callproc       &pc_libmcl.genmc 
    jump           #7705      
#7704: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           4          i64 
    push           pc_libmcl.genrealtable.x r64 
    callfn         &pc_libmcl.mgenrealimm u64 
    push           116        i64 
    callproc       &pc_libmcl.genmc 
#7705: 
#7706: 
    forup          #7703      i64 1
    opnd           pc_libmcl.genrealtable.i 
    opnd           pci_mcl.nreals 
#7702: 
#7700: 
    retproc                   
End


Proc pc_libmcl.genabsneg:
    procentry                 
    setargs                   2 0
    push           16         i64 
    push           73         i64 
    callproc       &pc_libmcl.setsegment 
    push           pci_mcl.lababs32 i64 
    jumpfalse      #7708      i64 
    setargs                   1 0
    push           "lababs32" u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.lababs32 i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           9223372034707292159 i64 
    callproc       &pc_libmcl.gendq 
    setargs                   1 0
    push           9223372034707292159 i64 
    callproc       &pc_libmcl.gendq 
#7708: 
    push           pci_mcl.lababs64 i64 
    jumpfalse      #7709      i64 
    setargs                   1 0
    push           "lababs64" u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.lababs64 i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           9223372036854775807 i64 
    callproc       &pc_libmcl.gendq 
    setargs                   1 0
    push           9223372036854775807 i64 
    callproc       &pc_libmcl.gendq 
#7709: 
    push           pci_mcl.labneg32 i64 
    jumpfalse      #7710      i64 
    setargs                   1 0
    push           "labneg32" u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.labneg32 i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           -9223372034707292160 i64 
    callproc       &pc_libmcl.gendq 
    setargs                   1 0
    push           -9223372034707292160 i64 
    callproc       &pc_libmcl.gendq 
#7710: 
    push           pci_mcl.labneg64 i64 
    jumpfalse      #7711      i64 
    setargs                   1 0
    push           "labneg64" u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.labneg64 i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           -9223372036854775808 i64 
    callproc       &pc_libmcl.gendq 
    setargs                   1 0
    push           -9223372036854775808 i64 
    callproc       &pc_libmcl.gendq 
#7711: 
    push           pci_mcl.labzero i64 
    jumpfalse      #7712      i64 
    setargs                   1 0
    push           "labzero"  u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.labzero i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_libmcl.gendq 
#7712: 
    push           pci_mcl.labmask63 i64 
    jumpfalse      #7713      i64 
    setargs                   1 0
    push           "mask63/offset64" u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.labmask63 i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           9223372036854775807 i64 
    callproc       &pc_libmcl.gendq 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.laboffset64 i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           4890909195324358656 i64 
    callproc       &pc_libmcl.gendq 
#7713: 
#7714: 
    retproc                   
End


Proc pc_libmcl.mdefinelabel: i64
    procentry                 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    push           pci_mcl.mlabelno i64 
    setret                    i64 
    jump           #7716      
#7716: 
    retfn                     i64 
End


Proc pc_libmcl.mcreatefwdlabel: i64
    procentry                 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    setret                    i64 
    jump           #7718      
#7718: 
    retfn                     i64 
End


Proc pc_libmcl.mdefinefwdlabel:
    param          pc_libmcl.mdefinefwdlabel.lab i64 
    procentry                 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.mdefinefwdlabel.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
#7720: 
    retproc                   
End


Proc pc_libmcl.stropnd: u64
    param          pc_libmcl.stropnd.a u64 
    param          pc_libmcl.stropnd.sizeprefix i64 
    param          pc_libmcl.stropnd.debug i64 
    local          pc_libmcl.stropnd.str2 block:128 
    local          pc_libmcl.stropnd.plus u64 
    local          pc_libmcl.stropnd.t u64 
    local          pc_libmcl.stropnd.offset i64 
    local          pc_libmcl.stropnd.tc i64 
    procentry                 
    push           0          u64 
    push           &pc_libmcl.stropnd.str 
    push           1          i64 
    popptroff                 u8 1 -1
    push           pc_libmcl.stropnd.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #7722      i64 0
    push           2          i64 
    casejumpeq     #7723      i64 0
    push           3          i64 
    casejumpeq     #7724      i64 0
    push           5          i64 
    casejumpeq     #7725      i64 0
    popstack                  i64 
    jump           #7726      
#7722: 
    setargs                   2 0
    push           pc_libmcl.stropnd.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_libmcl.stropnd.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.strreg u64 
    setret                    u64 
    jump           #7727      
    jump           #7728      
#7723: 
    setargs                   2 0
    setargs                   1 0
    push           pc_libmcl.stropnd.a u64 
    callfn         &pc_libmcl.strvalue u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcpy    
    jump           #7728      
#7724: 
    push           pc_libmcl.stropnd.a u64 
    push           12         
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #7729      i64 0
    push           2          i64 
    casejumpeq     #7730      i64 0
    push           3          i64 
    casejumpeq     #7731      i64 0
    popstack                  i64 
    jump           #7732      
#7729: 
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_libmcl.stropnd.a u64 
    pushptr                   i64 
    callfn         &msysp.strint u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcpy    
    jump           #7733      
#7730: 
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_libmcl.stropnd.a u64 
    pushptr                   r64 
    callfn         &msysp.strreal u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcpy    
    jump           #7733      
#7731: 
    setargs                   1 0
    push           &pc_libmcl.stropnd.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "M#"       u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   2 0
    push           0          i64 
    push           pc_libmcl.stropnd.a u64 
    pushptr                   r64 
    callproc       &msysp.m$print_r64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #7733      
#7732: 
#7733: 
    setargs                   2 0
    setargs                   2 0
    push           pc_libmcl.stropnd.sizeprefix i64 
    push           pc_libmcl.stropnd.a u64 
    push           8          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.getsizeprefix u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcat    
    setargs                   2 0
    push           "["        u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcat    
    push           ""         u64 
    pop            pc_libmcl.stropnd.plus u64 
    push           pc_libmcl.stropnd.a u64 
    push           10         
    pushptroff                u8 1 0
    jumpfalse      #7734      i64 
    setargs                   2 0
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.stropnd.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.strreg u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcat    
    push           "+"        u64 
    pop            pc_libmcl.stropnd.plus u64 
#7734: 
    push           pc_libmcl.stropnd.a u64 
    push           11         
    pushptroff                u8 1 0
    jumpfalse      #7735      i64 
    setargs                   2 0
    push           pc_libmcl.stropnd.plus u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcat    
    setargs                   2 0
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.stropnd.a u64 
    push           11         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.strreg u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcat    
    push           "+"        u64 
    pop            pc_libmcl.stropnd.plus u64 
    push           pc_libmcl.stropnd.a u64 
    push           13         
    pushptroff                u8 1 0
    push           1          i64 
    jumple         #7736      i64 
    setargs                   2 0
    push           "*"        u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcat    
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_libmcl.stropnd.a u64 
    push           13         
    pushptroff                u8 1 0
    callfn         &msysp.strint u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcat    
#7736: 
#7735: 
    push           pc_libmcl.stropnd.a u64 
    push           12         
    pushptroff                u8 1 0
    push           5          i64 
    setjumpeq      #7737      i64 
    push           7          i64 
    setjumpeq      #7737      i64 
    push           6          i64 
    setjumpne      #7738      i64 
#7737: 
    push           pc_libmcl.stropnd.plus u64 
    pushptr                   u8 
    push           43         u64 
    jumpne         #7739      u64 
    setargs                   2 0
    push           pc_libmcl.stropnd.plus u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcat    
#7739: 
    setargs                   2 0
    setargs                   1 0
    push           pc_libmcl.stropnd.a u64 
    callfn         &pc_libmcl.strvalue u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcat    
    jump           #7740      
#7738: 
    push           pc_libmcl.stropnd.a u64 
    push           14         
    pushptroff                i32 1 0
    store          pc_libmcl.stropnd.offset i64 
    jumpfalse      #7741      i64 
    setargs                   1 0
    push           &pc_libmcl.stropnd.str2 
    callproc       &msysp.m$print_startstr 
    setargs                   2 0
    push           "+"        u64 
    push           pc_libmcl.stropnd.offset i64 
    callproc       &msysp.m$print_i64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           &pc_libmcl.stropnd.str2 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcat    
#7741: 
#7740: 
    setargs                   2 0
    push           "]"        u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcat    
    jump           #7728      
#7725: 
    setargs                   2 0
    push           pc_libmcl.stropnd.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_libmcl.stropnd.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.strxreg u64 
    setret                    u64 
    jump           #7727      
    jump           #7728      
#7726: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "BAD OPND" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libmcl.stropnd.a u64 
    push           9          
    pushptroff                u8 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           "<BAD OPND>" u64 
    setret                    u64 
    jump           #7727      
#7728: 
    push           &pc_libmcl.stropnd.str 
    setret                    u64 
    jump           #7727      
#7727: 
    retfn                     u64 
End


Proc pc_libmcl.strreg: u64
    param          pc_libmcl.strreg.reg i64 
    param          pc_libmcl.strreg.size i64 
    local          pc_libmcl.strreg.d u64 
    procentry                 
    setargs                   2 0
    push           0          i64 
    push           pc_libmcl.strreg.reg i64 
    callfn         &pc_libmcl.checkregvar u64 
    pop            pc_libmcl.strreg.d u64 
    startmult                 
    push           pc_libmcl.strreg.size i64 
    push           8          i64 
    jumpne         #7743      i64 
    push           pc_libmcl.strreg.d u64 
    jumpfalse      #7743      u64 
    setargs                   1 0
    push           pc_libmcl.strreg.d u64 
    callfn         &pc_libmcl.getfullname u64 
    resetmult                 
    jump           #7744      
#7743: 
    setargs                   2 0
    push           pc_libmcl.strreg.size i64 
    push           pc_libmcl.strreg.reg i64 
    callfn         &pc_libmcl.getregname u64 
    endmult                   
#7744: 
    setret                    u64 
    jump           #7745      
#7745: 
    retfn                     u64 
End


Proc pc_libmcl.checkregvar: u64
    param          pc_libmcl.checkregvar.reg i64 
    param          pc_libmcl.checkregvar.isfloat i64 
    procentry                 
    push           0          u64 
    setret                    u64 
    jump           #7747      
#7747: 
    retfn                     u64 
End


Proc pc_libmcl.strxreg: u64
    param          pc_libmcl.strxreg.reg i64 
    param          pc_libmcl.strxreg.size i64 
    local          pc_libmcl.strxreg.d u64 
    procentry                 
    setargs                   2 0
    push           1          i64 
    push           pc_libmcl.strxreg.reg i64 
    callfn         &pc_libmcl.checkregvar u64 
    pop            pc_libmcl.strxreg.d u64 
    startmult                 
    push           pc_libmcl.strxreg.size i64 
    push           8          i64 
    jumpne         #7749      i64 
    push           pc_libmcl.strxreg.d u64 
    jumpfalse      #7749      u64 
    setargs                   1 0
    push           pc_libmcl.strxreg.d u64 
    callfn         &pc_libmcl.getfullname u64 
    resetmult                 
    jump           #7750      
#7749: 
    setargs                   2 0
    push           pc_libmcl.strxreg.size i64 
    push           pc_libmcl.strxreg.reg i64 
    callfn         &pc_libmcl.fgetregname u64 
    endmult                   
#7750: 
    setret                    u64 
    jump           #7751      
#7751: 
    retfn                     u64 
End


Proc pc_libmcl.strvalue: u64
    param          pc_libmcl.strvalue.a u64 
    local          pc_libmcl.strvalue.str2 block:128 
    local          pc_libmcl.strvalue.def u64 
    local          pc_libmcl.strvalue.value i64 
    local          pc_libmcl.strvalue.offset i64 
    local          pc_libmcl.strvalue.length i64 
    local          pc_libmcl.strvalue.ss u64 
    procentry                 
    push           pc_libmcl.strvalue.a u64 
    pushptr                   u64 
    pop            pc_libmcl.strvalue.def u64 
    push           pc_libmcl.strvalue.a u64 
    pushptr                   i64 
    pop            pc_libmcl.strvalue.value i64 
    setargs                   2 0
    push           ""         u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcpy    
    push           pc_libmcl.strvalue.a u64 
    push           12         
    pushptroff                u8 1 0
    push           5          i64 
    casejumpeq     #7753      i64 0
    push           6          i64 
    casejumpeq     #7754      i64 0
    push           1          i64 
    casejumpeq     #7755      i64 0
    push           2          i64 
    casejumpeq     #7756      i64 0
    push           3          i64 
    casejumpeq     #7757      i64 0
    push           4          i64 
    casejumpeq     #7758      i64 0
    push           8          i64 
    casejumpeq     #7759      i64 0
    push           9          i64 
    casejumpeq     #7760      i64 0
    push           7          i64 
    casejumpeq     #7761      i64 0
    popstack                  i64 
    jump           #7762      
#7753: 
    setargs                   2 0
    setargs                   1 0
    push           pc_libmcl.strvalue.def u64 
    callfn         &pc_libmcl.getfullname u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
!addoffset::
#7763: 
    push           pc_libmcl.strvalue.a u64 
    push           14         
    pushptroff                i32 1 0
    store          pc_libmcl.strvalue.offset i64 
    jumpfalse      #7764      i64 
    setargs                   1 0
    push           &pc_libmcl.strvalue.str2 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    startmult                 
    push           pc_libmcl.strvalue.offset i64 
    push           0          i64 
    jumple         #7765      i64 
    push           "+"        u64 
    resetmult                 
    jump           #7766      
#7765: 
    push           ""         u64 
    endmult                   
#7766: 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           pc_libmcl.strvalue.offset i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           &pc_libmcl.strvalue.str2 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
#7764: 
    jump           #7767      
#7754: 
    setargs                   2 0
    setargs                   1 0
    push           pc_libmcl.strvalue.a u64 
    pushptr                   i64 
    callfn         &pc_libmcl.getfulltempname u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
    jump           #7767      
#7755: 
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_libmcl.strvalue.value i64 
    callfn         &msysp.strint u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
    jump           #7767      
#7756: 
    setargs                   1 0
    push           &pc_libmcl.strvalue.str 
    callproc       &msysp.m$print_startstr 
    setargs                   2 0
    push           "20.20"    u64 
    push           pc_libmcl.strvalue.a u64 
    pushptr                   r64 
    callproc       &msysp.m$print_r64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #7767      
#7757: 
    setargs                   2 0
    push           "M"        u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_libmcl.strvalue.a u64 
    pushptr                   r64 
    callfn         &msysp.strreal u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
    jump           #7767      
#7758: 
    setargs                   2 0
    push           "\""       u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
    setargs                   2 0
    push           pc_libmcl.strvalue.a u64 
    pushptr                   u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
    setargs                   2 0
    push           "\""       u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
    jump           #7767      
#7759: 
    setargs                   2 0
    push           pc_libmcl.strvalue.a u64 
    pushptr                   u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
    jump           #7767      
#7760: 
    setargs                   2 0
    push           "XXX"      u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
    jump           #7767      
#7761: 
    setargs                   2 0
    push           "L"        u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_libmcl.strvalue.a u64 
    pushptr                   i64 
    callfn         &msysp.strint u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
    jump           #7763      
    jump           #7767      
#7762: 
#7767: 
    push           &pc_libmcl.strvalue.str 
    setret                    u64 
    jump           #7768      
#7768: 
    retfn                     u64 
End


Proc pc_libmcl.writegsfile:
    param          pc_libmcl.writegsfile.filename u64 
    param          pc_libmcl.writegsfile.d u64 
    local          pc_libmcl.writegsfile.f u64 
    procentry                 
    setargs                   2 0
    push           "w"        u64 
    push           pc_libmcl.writegsfile.filename u64 
    callfn         &fopen     u64 
    pop            pc_libmcl.writegsfile.f u64 
    setargs                   2 0
    push           pc_libmcl.writegsfile.f u64 
    push           pc_libmcl.writegsfile.d u64 
    callproc       &mlibp.gs_println 
    setargs                   1 0
    push           pc_libmcl.writegsfile.f u64 
    callproc       &fclose    
#7770: 
    retproc                   
End


Proc pc_libmcl.ismemaddr: i64
    param          pc_libmcl.ismemaddr.n i64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           pc_libmcl.ismemaddr.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           11         i64 
    jumpne         #7772      i64 
    push           1          i64 
    setret                    i64 
    jump           #7773      
#7772: 
    push           0          i64 
    setret                    i64 
    jump           #7773      
#7773: 
    retfn                     i64 
End


Proc pc_libmcl.isimm64: i64
    param          pc_libmcl.isimm64.n i64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           pc_libmcl.isimm64.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #7775      i64 
    push           1          i64 
    setret                    i64 
    jump           #7776      
#7775: 
    push           0          i64 
    setret                    i64 
    jump           #7776      
#7776: 
    retfn                     i64 
End


Proc pc_libmcl.isregvaropnd: i64
    param          pc_libmcl.isregvaropnd.n i64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           pc_libmcl.isregvaropnd.n i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           7          i64 
    jumpne         #7778      i64 
    push           1          i64 
    setret                    i64 
    jump           #7779      
#7778: 
    push           0          i64 
    setret                    i64 
    jump           #7779      
#7779: 
    retfn                     i64 
End


Proc pc_libmcl.copyblock:
    param          pc_libmcl.copyblock.ax u64 
    param          pc_libmcl.copyblock.bx u64 
    param          pc_libmcl.copyblock.n i64 
    local          pc_libmcl.copyblock.rx u64 
    local          pc_libmcl.copyblock.rcount u64 
    local          pc_libmcl.copyblock.nwords i64 
    local          pc_libmcl.copyblock.lab i64 
    local          pc_libmcl.copyblock.oddbytes i64 
    local          pc_libmcl.copyblock.offset i64 
    local          pc_libmcl.copyblock.workreg i64 
    local          pc_libmcl.copyblock.countreg i64 
    local          pc_libmcl.copyblock.av_1 i64 
    procentry                 
    push           pc_libmcl.copyblock.n i64 
    push           8          i64 
    irem                      i64 
    pop            pc_libmcl.copyblock.oddbytes i64 
    push           &pc_libmcl.copyblock.n 
    push           pc_libmcl.copyblock.oddbytes i64 
    subto                     i64 
    push           pc_libmcl.copyblock.n i64 
    push           8          i64 
    idiv                      i64 
    pop            pc_libmcl.copyblock.nwords i64 
    setargs                   2 0
    push           8          i64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    store          pc_libmcl.copyblock.workreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_libmcl.copyblock.rx u64 
    push           0          i64 
    pop            pc_libmcl.copyblock.offset i64 
    push           1          i64 
    push           pc_libmcl.copyblock.nwords i64 
    jumpgt         #7781      i64 
    push           pc_libmcl.copyblock.nwords i64 
    push           4          i64 
    jumpgt         #7781      i64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.copyblock.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    pop            pc_libmcl.copyblock.ax u64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.copyblock.bx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    pop            pc_libmcl.copyblock.bx u64 
#7782: 
    push           pc_libmcl.copyblock.nwords i64 
    pop            pc_libmcl.copyblock.av_1 i64 
    push           pc_libmcl.copyblock.av_1 i64 
    push           0          i64 
    jumple         #7783      i64 
#7784: 
    setargs                   3 0
    setargs                   3 0
    push           0          i64 
    push           pc_libmcl.copyblock.offset i64 
    push           pc_libmcl.copyblock.bx u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           pc_libmcl.copyblock.rx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_libmcl.copyblock.rx u64 
    setargs                   3 0
    push           0          i64 
    push           pc_libmcl.copyblock.offset i64 
    push           pc_libmcl.copyblock.ax u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_libmcl.copyblock.offset 
    push           8          i64 
    addto                     i64 
#7785: 
    to             #7784      
    opnd           pc_libmcl.copyblock.av_1 
#7783: 
    jump           #7786      
#7781: 
    push           pc_libmcl.copyblock.nwords i64 
    push           0          i64 
    jumpeq         #7787      i64 
    setargs                   2 0
    push           8          i64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    store          pc_libmcl.copyblock.countreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_libmcl.copyblock.rcount u64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pc_libmcl.copyblock.lab i64 
    setargs                   1 0
    push           pc_libmcl.copyblock.ax u64 
    callfn         &pc_libmcl.makesimpleaddr u64 
    pop            pc_libmcl.copyblock.ax u64 
    setargs                   1 0
    push           pc_libmcl.copyblock.bx u64 
    callfn         &pc_libmcl.makesimpleaddr u64 
    pop            pc_libmcl.copyblock.bx u64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.copyblock.nwords i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_libmcl.copyblock.rcount u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.copyblock.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_libmcl.copyblock.bx u64 
    push           pc_libmcl.copyblock.rx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_libmcl.copyblock.rx u64 
    push           pc_libmcl.copyblock.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           8          i64 
    callfn         &pc_libmcl.mgenint u64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.copyblock.ax u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           8          i64 
    callfn         &pc_libmcl.mgenint u64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.copyblock.bx u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           pc_libmcl.copyblock.rcount u64 
    push           54         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.copyblock.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           5          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    push           0          i64 
    pop            pc_libmcl.copyblock.offset i64 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_libmcl.copyblock.countreg i64 
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_libmcl.copyblock.countreg i64 
    popptroff                 u8 1 -1
#7787: 
#7786: 
    push           pc_libmcl.copyblock.oddbytes i64 
    jumpfalse      #7788      i64 
    push           pc_libmcl.copyblock.oddbytes i64 
    pop            pc_libmcl.copyblock.n i64 
    push           pc_libmcl.copyblock.n i64 
    push           4          i64 
    jumplt         #7789      i64 
    setargs                   2 0
    push           4          i64 
    push           pc_libmcl.copyblock.rx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    pop            pc_libmcl.copyblock.rx u64 
    setargs                   3 0
    setargs                   3 0
    push           4          i64 
    push           pc_libmcl.copyblock.offset i64 
    push           pc_libmcl.copyblock.bx u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           pc_libmcl.copyblock.rx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_libmcl.copyblock.rx u64 
    setargs                   3 0
    push           4          i64 
    push           pc_libmcl.copyblock.offset i64 
    push           pc_libmcl.copyblock.ax u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_libmcl.copyblock.n 
    push           4          i64 
    subto                     i64 
    push           &pc_libmcl.copyblock.offset 
    push           4          i64 
    addto                     i64 
#7789: 
    push           pc_libmcl.copyblock.n i64 
    push           2          i64 
    jumplt         #7790      i64 
    setargs                   2 0
    push           2          i64 
    push           pc_libmcl.copyblock.rx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    pop            pc_libmcl.copyblock.rx u64 
    setargs                   3 0
    setargs                   3 0
    push           2          i64 
    push           pc_libmcl.copyblock.offset i64 
    push           pc_libmcl.copyblock.bx u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           pc_libmcl.copyblock.rx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_libmcl.copyblock.rx u64 
    setargs                   3 0
    push           2          i64 
    push           pc_libmcl.copyblock.offset i64 
    push           pc_libmcl.copyblock.ax u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_libmcl.copyblock.n 
    push           2          i64 
    subto                     i64 
    push           &pc_libmcl.copyblock.offset 
    push           2          i64 
    addto                     i64 
#7790: 
    push           pc_libmcl.copyblock.n i64 
    push           1          i64 
    jumpne         #7791      i64 
    setargs                   2 0
    push           1          i64 
    push           pc_libmcl.copyblock.rx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    pop            pc_libmcl.copyblock.rx u64 
    setargs                   3 0
    setargs                   3 0
    push           1          i64 
    push           pc_libmcl.copyblock.offset i64 
    push           pc_libmcl.copyblock.bx u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           pc_libmcl.copyblock.rx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_libmcl.copyblock.rx u64 
    setargs                   3 0
    push           1          i64 
    push           pc_libmcl.copyblock.offset i64 
    push           pc_libmcl.copyblock.ax u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
#7791: 
#7788: 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_libmcl.copyblock.workreg i64 
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_libmcl.copyblock.workreg i64 
    popptroff                 u8 1 -1
#7792: 
    retproc                   
End


Proc pc_libmcl.makesimpleaddr: u64
    param          pc_libmcl.makesimpleaddr.ax u64 
    local          pc_libmcl.makesimpleaddr.bx u64 
    local          pc_libmcl.makesimpleaddr.newreg i64 
    procentry                 
    push           pc_libmcl.makesimpleaddr.ax u64 
    push           10         
    pushptroff                u8 1 0
    jumpfalse      #7794      i64 
    push           pc_libmcl.makesimpleaddr.ax u64 
    push           11         
    pushptroff                u8 1 0
    jumptrue       #7794      i64 
    push           pc_libmcl.makesimpleaddr.ax u64 
    setret                    u64 
    jump           #7795      
#7794: 
    startmult                 
    push           pc_libmcl.makesimpleaddr.ax u64 
    push           10         
    pushptroff                u8 1 0
    jumpfalse      #7796      i64 
    push           pc_libmcl.makesimpleaddr.ax u64 
    push           10         
    pushptroff                u8 1 0
    resetmult                 
    jump           #7797      
#7796: 
    startmult                 
    push           pc_libmcl.makesimpleaddr.ax u64 
    push           11         
    pushptroff                u8 1 0
    jumpfalse      #7798      i64 
    push           pc_libmcl.makesimpleaddr.ax u64 
    push           11         
    pushptroff                u8 1 0
    resetmult                 
    jump           #7799      
#7798: 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    endmult                   
#7799: 
    endmult                   
#7797: 
    pop            pc_libmcl.makesimpleaddr.newreg i64 
    setargs                   3 0
    push           0          i64 
    push           8          i64 
    push           pc_libmcl.makesimpleaddr.newreg i64 
    callfn         &pc_libmcl.mgenireg u64 
    pop            pc_libmcl.makesimpleaddr.bx u64 
    setargs                   3 0
    push           pc_libmcl.makesimpleaddr.ax u64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.makesimpleaddr.newreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           15         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_libmcl.makesimpleaddr.bx u64 
    setret                    u64 
    jump           #7795      
#7795: 
    retfn                     u64 
End


Proc pc_libmcl.ispoweroftwo: i64
    param          pc_libmcl.ispoweroftwo.x i64 
    local          pc_libmcl.ispoweroftwo.a i64 
    local          pc_libmcl.ispoweroftwo.n i64 
    local          pc_libmcl.ispoweroftwo.av_1 i64 
    procentry                 
    push           1          i64 
    pop            pc_libmcl.ispoweroftwo.a i64 
    push           0          i64 
    pop            pc_libmcl.ispoweroftwo.n i64 
#7801: 
    push           60         i64 
    pop            pc_libmcl.ispoweroftwo.av_1 i64 
#7802: 
    push           &pc_libmcl.ispoweroftwo.n 
    incr                      i64 1
    push           pc_libmcl.ispoweroftwo.a i64 
    push           1          i64 
    shl                       i64 
    pop            pc_libmcl.ispoweroftwo.a i64 
    push           pc_libmcl.ispoweroftwo.a i64 
    push           pc_libmcl.ispoweroftwo.x i64 
    jumpne         #7803      i64 
    push           pc_libmcl.ispoweroftwo.n i64 
    setret                    i64 
    jump           #7804      
#7803: 
#7805: 
    to             #7802      
    opnd           pc_libmcl.ispoweroftwo.av_1 
#7806: 
    push           0          i64 
    setret                    i64 
    jump           #7804      
#7804: 
    retfn                     i64 
End


Proc pc_libmcl.getrtsproclabel: i64
    param          pc_libmcl.getrtsproclabel.fnindex i64 
    procentry                 
    push           &pci_mcl.rtsproclabels 
    push           pc_libmcl.getrtsproclabel.fnindex i64 
    pushptroff                i64 8 -8
    push           0          i64 
    jumpne         #7808      i64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    push           &pci_mcl.rtsproclabels 
    push           pc_libmcl.getrtsproclabel.fnindex i64 
    popptroff                 i64 8 -8
    push           pci_mcl.mlabelno i64 
    setret                    i64 
    jump           #7809      
#7808: 
    push           &pci_mcl.rtsproclabels 
    push           pc_libmcl.getrtsproclabel.fnindex i64 
    pushptroff                i64 8 -8
    setret                    i64 
    jump           #7809      
#7809: 
    retfn                     i64 
End


Proc pc_libmcl.genrtsproctable:
    local          pc_libmcl.genrtsproctable.str block:256 
    local          pc_libmcl.genrtsproctable.proclab i64 
    local          pc_libmcl.genrtsproctable.d u64 
    local          pc_libmcl.genrtsproctable.av_1 i64 
    local          pc_libmcl.genrtsproctable.i i64 
    procentry                 
    setargs                   2 0
    push           16         i64 
    push           67         i64 
    callproc       &pc_libmcl.setsegment 
#7811: 
    push           1          i64 
    pop            pc_libmcl.genrtsproctable.i i64 
    push           6          i64 
    pop            pc_libmcl.genrtsproctable.av_1 i64 
    push           pc_libmcl.genrtsproctable.av_1 i64 
    push           1          i64 
    jumplt         #7812      i64 
#7813: 
    push           &pci_mcl.rtsproclabels 
    push           pc_libmcl.genrtsproctable.i i64 
    pushptroff                i64 8 -8
    jumpfalse      #7814      i64 
    setargs                   1 0
    push           &pc_libmcl.genrtsproctable.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "Generating code for" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pc_tables.rtsnames 
    push           pc_libmcl.genrtsproctable.i i64 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           &pc_libmcl.genrtsproctable.str 
    callproc       &pc_libmcl.mgencomment 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           &pci_mcl.rtsproclabels 
    push           pc_libmcl.genrtsproctable.i i64 
    pushptroff                i64 8 -8
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_decls.rtsproctable 
    push           pc_libmcl.genrtsproctable.i i64 
    pushptroff                u64 8 -8
    jumptrue       #7815      u64 
    push           pc_libmcl.genrtsproctable.i i64 
    push           4          i64 
    casejumpeq     #7816      i64 0
    push           5          i64 
    casejumpeq     #7817      i64 0
    popstack                  i64 
    jump           #7818      
#7816: 
    setargs                   0 0
    callproc       &pc_libmcl.genrts_mul_i128 
    jump           #7819      
#7817: 
    setargs                   0 0
    callproc       &pc_libmcl.genrts_div_i128 
    jump           #7819      
#7818: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pc_tables.rtsnames 
    push           pc_libmcl.genrtsproctable.i i64 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           ""         u64 
    push           "RTS fn not defined" u64 
    callproc       &pc_libmcl.merror 
#7819: 
    setargs                   1 0
    push           ""         u64 
    callproc       &pc_libmcl.mgencomment 
    jump           #7820      
#7815: 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           &pc_decls.rtsproctable 
    push           pc_libmcl.genrtsproctable.i i64 
    pushptroff                u64 8 -8
    callfn         &pc_libmcl.mgenmemaddr u64 
    push           26         i64 
    callproc       &pc_libmcl.genmc 
#7820: 
#7814: 
#7821: 
    forup          #7813      i64 1
    opnd           pc_libmcl.genrtsproctable.i 
    opnd           pc_libmcl.genrtsproctable.av_1 
#7812: 
#7822: 
    retproc                   
End


Proc pc_libmcl.genrts_mul_i128:
    procentry                 
    setargs                   1 0
    push           "<code for mul-i128>" u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   0 0
    callproc       &pc_libmcl.genrtsentry 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           7          i64 
    pushptroff                u64 8 -16
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           8          i64 
    pushptroff                u64 8 -16
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           10         i64 
    pushptroff                u64 8 -16
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           12         i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           10         i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           11         i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           1          i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           14         i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           1          i64 
    pushptroff                u64 8 -16
    push           35         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           1          i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           7          i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           10         i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           1          i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           13         i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           1          i64 
    pushptroff                u64 8 -16
    push           35         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           1          i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           8          i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           11         i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           1          i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           13         i64 
    pushptroff                u64 8 -16
    push           33         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           7          i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           12         i64 
    pushptroff                u64 8 -16
    push           29         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           8          i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           12         i64 
    pushptroff                u64 8 -16
    push           29         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           12         i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           2          i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           10         i64 
    pushptroff                u64 8 -16
    push           14         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           8          i64 
    pushptroff                u64 8 -16
    push           14         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           7          i64 
    pushptroff                u64 8 -16
    push           14         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_libmcl.genrtsexit 
#7824: 
    retproc                   
End


Proc pc_libmcl.genrts_div_i128:
    procentry                 
    setargs                   1 0
    push           "<code for div-i128>" u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   0 0
    callproc       &pc_libmcl.genrtsentry 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           7          i64 
    pushptroff                u64 8 -16
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           10         i64 
    pushptroff                u64 8 -16
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           12         i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           10         i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           10         i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           1          i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           12         i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           12         i64 
    pushptroff                u64 8 -16
    push           41         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           13         i64 
    pushptroff                u64 8 -16
    push           38         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           1          i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           7          i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           13         i64 
    pushptroff                u64 8 -16
    push           34         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           1          i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           10         i64 
    pushptroff                u64 8 -16
    push           30         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           11         i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           1          i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           10         i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           12         i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           13         i64 
    pushptroff                u64 8 -16
    push           38         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           7          i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           2          i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           10         i64 
    pushptroff                u64 8 -16
    push           14         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           7          i64 
    pushptroff                u64 8 -16
    push           14         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_libmcl.genrtsexit 
#7826: 
    retproc                   
End


Proc pc_libmcl.genrtsentry:
    procentry                 
    setargs                   3 0
    push           0          u64 
    push           pci_mcl.dframeopnd u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pci_mcl.dstackopnd u64 
    push           pci_mcl.dframeopnd u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           32         i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pci_mcl.dstackopnd u64 
    push           30         i64 
    callproc       &pc_libmcl.genmc 
#7828: 
    retproc                   
End


Proc pc_libmcl.genrtsexit:
    procentry                 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           32         i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pci_mcl.dstackopnd u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           pci_mcl.dframeopnd u64 
    push           14         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           0          u64 
    push           23         i64 
    callproc       &pc_libmcl.genmc 
#7830: 
    retproc                   
End


Proc pc_libmcl.clearblock:
    param          pc_libmcl.clearblock.ax u64 
    param          pc_libmcl.clearblock.n i64 
    local          pc_libmcl.clearblock.rx u64 
    local          pc_libmcl.clearblock.rcount u64 
    local          pc_libmcl.clearblock.nwords i64 
    local          pc_libmcl.clearblock.lab i64 
    local          pc_libmcl.clearblock.oddbytes i64 
    local          pc_libmcl.clearblock.offset i64 
    local          pc_libmcl.clearblock.workreg i64 
    local          pc_libmcl.clearblock.countreg i64 
    local          pc_libmcl.clearblock.av_1 i64 
    local          pc_libmcl.clearblock.i i64 
    procentry                 
    push           pc_libmcl.clearblock.n i64 
    push           8          i64 
    irem                      i64 
    pop            pc_libmcl.clearblock.oddbytes i64 
    push           &pc_libmcl.clearblock.n 
    push           pc_libmcl.clearblock.oddbytes i64 
    subto                     i64 
    push           pc_libmcl.clearblock.n i64 
    push           8          i64 
    idiv                      i64 
    pop            pc_libmcl.clearblock.nwords i64 
    setargs                   2 0
    push           8          i64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    store          pc_libmcl.clearblock.workreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_libmcl.clearblock.rx u64 
    setargs                   3 0
    push           pc_libmcl.clearblock.rx u64 
    push           pc_libmcl.clearblock.rx u64 
    push           41         i64 
    callproc       &pc_libmcl.genmc 
    push           0          i64 
    pop            pc_libmcl.clearblock.offset i64 
    push           1          i64 
    push           pc_libmcl.clearblock.nwords i64 
    jumpgt         #7832      i64 
    push           pc_libmcl.clearblock.nwords i64 
    push           8          i64 
    jumpgt         #7832      i64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.clearblock.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    pop            pc_libmcl.clearblock.ax u64 
#7833: 
    push           pc_libmcl.clearblock.nwords i64 
    pop            pc_libmcl.clearblock.av_1 i64 
    push           pc_libmcl.clearblock.av_1 i64 
    push           0          i64 
    jumple         #7834      i64 
#7835: 
    setargs                   3 0
    push           pc_libmcl.clearblock.rx u64 
    setargs                   3 0
    push           0          i64 
    push           pc_libmcl.clearblock.offset i64 
    push           pc_libmcl.clearblock.ax u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_libmcl.clearblock.offset 
    push           8          i64 
    addto                     i64 
#7836: 
    to             #7835      
    opnd           pc_libmcl.clearblock.av_1 
#7834: 
    jump           #7837      
#7832: 
    push           pc_libmcl.clearblock.nwords i64 
    push           0          i64 
    jumpeq         #7838      i64 
    push           pc_libmcl.clearblock.nwords i64 
    push           3          i64 
    iand                      i64 
    jumpfalse      #7839      i64 
    setargs                   2 0
    push           8          i64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    store          pc_libmcl.clearblock.countreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_libmcl.clearblock.rcount u64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pc_libmcl.clearblock.lab i64 
    setargs                   1 0
    push           pc_libmcl.clearblock.ax u64 
    callfn         &pc_libmcl.makesimpleaddr u64 
    pop            pc_libmcl.clearblock.ax u64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.clearblock.nwords i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_libmcl.clearblock.rcount u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.clearblock.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_libmcl.clearblock.rx u64 
    push           pc_libmcl.clearblock.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           8          i64 
    callfn         &pc_libmcl.mgenint u64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.clearblock.ax u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           pc_libmcl.clearblock.rcount u64 
    push           54         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.clearblock.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           5          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    push           0          i64 
    pop            pc_libmcl.clearblock.offset i64 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_libmcl.clearblock.countreg i64 
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_libmcl.clearblock.countreg i64 
    popptroff                 u8 1 -1
    jump           #7840      
#7839: 
    setargs                   2 0
    push           8          i64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    store          pc_libmcl.clearblock.countreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_libmcl.clearblock.rcount u64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pc_libmcl.clearblock.lab i64 
    setargs                   1 0
    push           pc_libmcl.clearblock.ax u64 
    callfn         &pc_libmcl.makesimpleaddr u64 
    pop            pc_libmcl.clearblock.ax u64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.clearblock.nwords i64 
    push           4          i64 
    idiv                      i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_libmcl.clearblock.rcount u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.clearblock.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
#7841: 
    push           1          i64 
    pop            pc_libmcl.clearblock.i i64 
#7842: 
    setargs                   3 0
    push           pc_libmcl.clearblock.rx u64 
    setargs                   3 0
    push           0          i64 
    push           pc_libmcl.clearblock.offset i64 
    push           pc_libmcl.clearblock.ax u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_libmcl.clearblock.offset 
    push           8          i64 
    addto                     i64 
#7843: 
    forup          #7842      i64 1
    opnd           pc_libmcl.clearblock.i 
    opnd           4          
#7844: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           32         i64 
    callfn         &pc_libmcl.mgenint u64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.clearblock.ax u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           pc_libmcl.clearblock.rcount u64 
    push           54         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.clearblock.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           5          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    push           0          i64 
    pop            pc_libmcl.clearblock.offset i64 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_libmcl.clearblock.countreg i64 
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_libmcl.clearblock.countreg i64 
    popptroff                 u8 1 -1
#7840: 
#7838: 
#7837: 
    push           pc_libmcl.clearblock.oddbytes i64 
    jumpfalse      #7845      i64 
    push           pc_libmcl.clearblock.oddbytes i64 
    pop            pc_libmcl.clearblock.n i64 
    push           pc_libmcl.clearblock.n i64 
    push           4          i64 
    jumplt         #7846      i64 
    setargs                   2 0
    push           4          i64 
    push           pc_libmcl.clearblock.rx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    pop            pc_libmcl.clearblock.rx u64 
    setargs                   3 0
    push           pc_libmcl.clearblock.rx u64 
    setargs                   3 0
    push           4          i64 
    push           pc_libmcl.clearblock.offset i64 
    push           pc_libmcl.clearblock.ax u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_libmcl.clearblock.n 
    push           4          i64 
    subto                     i64 
    push           &pc_libmcl.clearblock.offset 
    push           4          i64 
    addto                     i64 
#7846: 
    push           pc_libmcl.clearblock.n i64 
    push           2          i64 
    jumplt         #7847      i64 
    setargs                   2 0
    push           2          i64 
    push           pc_libmcl.clearblock.rx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    pop            pc_libmcl.clearblock.rx u64 
    setargs                   3 0
    push           pc_libmcl.clearblock.rx u64 
    setargs                   3 0
    push           2          i64 
    push           pc_libmcl.clearblock.offset i64 
    push           pc_libmcl.clearblock.ax u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_libmcl.clearblock.n 
    push           2          i64 
    subto                     i64 
    push           &pc_libmcl.clearblock.offset 
    push           2          i64 
    addto                     i64 
#7847: 
    push           pc_libmcl.clearblock.n i64 
    push           1          i64 
    jumpne         #7848      i64 
    setargs                   2 0
    push           1          i64 
    push           pc_libmcl.clearblock.rx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    pop            pc_libmcl.clearblock.rx u64 
    setargs                   3 0
    push           pc_libmcl.clearblock.rx u64 
    setargs                   3 0
    push           1          i64 
    push           pc_libmcl.clearblock.offset i64 
    push           pc_libmcl.clearblock.ax u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
#7848: 
#7845: 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_libmcl.clearblock.workreg i64 
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_libmcl.clearblock.workreg i64 
    popptroff                 u8 1 -1
#7849: 
    retproc                   
End


Proc pc_libmcl.genfunctiontable:
    local          pc_libmcl.genfunctiontable.str block:256 
    local          pc_libmcl.genfunctiontable.s u64 
    local          pc_libmcl.genfunctiontable.t u64 
    local          pc_libmcl.genfunctiontable.currpcl u64 
    local          pc_libmcl.genfunctiontable.firststringlab i64 
    local          pc_libmcl.genfunctiontable.nextlab i64 
    local          pc_libmcl.genfunctiontable.nprocs i64 
    procentry                 
    push           pci_mcl.lab_funcaddrtable i64 
    push           0          i64 
    jumpne         #7851      i64 
    jump           #7852      
#7851: 
    setargs                   1 0
    push           "Function Table" u64 
    callproc       &pc_libmcl.mgencomment 
    push           0          i64 
    pop            pc_libmcl.genfunctiontable.nprocs i64 
    setargs                   2 0
    push           16         i64 
    push           67         i64 
    callproc       &pc_libmcl.setsegment 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.lab_funcaddrtable i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    push           pc_libpcl.pcstart u64 
    pop            pc_libmcl.genfunctiontable.currpcl u64 
#7853: 
    push           pc_libmcl.genfunctiontable.currpcl u64 
    push           1          
    pushptroff                u8 1 0
    push           8          i64 
    jumpne         #7854      i64 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.genfunctiontable.currpcl u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmemaddr u64 
    push           117        i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_libmcl.genfunctiontable.nprocs 
    incr                      i64 1
#7854: 
    push           &pc_libmcl.genfunctiontable.currpcl 
    incr                      u64 32
#7855: 
    push           pc_libmcl.genfunctiontable.currpcl u64 
    push           1          
    pushptroff                u8 1 0
    push           11         i64 
    jumpne         #7853      i64 
#7856: 
    push           0          i64 
    pop            pc_libmcl.genfunctiontable.firststringlab i64 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.lab_funcnametable i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    push           pc_libpcl.pcstart u64 
    pop            pc_libmcl.genfunctiontable.currpcl u64 
#7857: 
    push           pc_libmcl.genfunctiontable.currpcl u64 
    push           1          
    pushptroff                u8 1 0
    push           8          i64 
    jumpne         #7858      i64 
    push           pc_libmcl.genfunctiontable.firststringlab i64 
    push           0          i64 
    jumpne         #7859      i64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    store          pc_libmcl.genfunctiontable.nextlab i64 
    pop            pc_libmcl.genfunctiontable.firststringlab i64 
    jump           #7860      
#7859: 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pc_libmcl.genfunctiontable.nextlab i64 
#7860: 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.genfunctiontable.nextlab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           117        i64 
    callproc       &pc_libmcl.genmc 
#7858: 
    push           &pc_libmcl.genfunctiontable.currpcl 
    incr                      u64 32
#7861: 
    push           pc_libmcl.genfunctiontable.currpcl u64 
    push           1          
    pushptroff                u8 1 0
    push           11         i64 
    jumpne         #7857      i64 
#7862: 
    push           pc_libmcl.genfunctiontable.firststringlab i64 
    pop            pc_libmcl.genfunctiontable.nextlab i64 
    push           pc_libpcl.pcstart u64 
    pop            pc_libmcl.genfunctiontable.currpcl u64 
#7863: 
    push           pc_libmcl.genfunctiontable.currpcl u64 
    push           1          
    pushptroff                u8 1 0
    push           8          i64 
    jumpne         #7864      i64 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.genfunctiontable.nextlab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    push           pc_libmcl.genfunctiontable.currpcl u64 
    push           8          
    pushptroff                u64 1 0
    pushptr                   u64 
    pop            pc_libmcl.genfunctiontable.s u64 
    push           pc_libmcl.genfunctiontable.s u64 
    pop            pc_libmcl.genfunctiontable.t u64 
    jump           #7865      
#7866: 
    push           pc_libmcl.genfunctiontable.s u64 
    pushptr                   u8 
    push           46         u64 
    jumpne         #7867      u64 
    push           pc_libmcl.genfunctiontable.s u64 
    push           1          i64 
    addrefoff                 u64 1 0
    pop            pc_libmcl.genfunctiontable.t u64 
#7867: 
    push           &pc_libmcl.genfunctiontable.s 
    incr                      u64 1
#7865: 
    push           pc_libmcl.genfunctiontable.s u64 
    pushptr                   u8 
    jumptrue       #7866      u64 
#7868: 
    setargs                   2 0
    push           1          i64 
    push           pc_libmcl.genfunctiontable.t u64 
    callproc       &pc_libmcl.genstring 
    push           &pc_libmcl.genfunctiontable.nextlab 
    incr                      i64 1
#7864: 
    push           &pc_libmcl.genfunctiontable.currpcl 
    incr                      u64 32
#7869: 
    push           pc_libmcl.genfunctiontable.currpcl u64 
    push           1          
    pushptroff                u8 1 0
    push           11         i64 
    jumpne         #7863      i64 
#7870: 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.lab_funcnprocs i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.genfunctiontable.nprocs i64 
    callfn         &pc_libmcl.mgenint u64 
    push           117        i64 
    callproc       &pc_libmcl.genmc 
#7852: 
    retproc                   
End


Proc pc_libmcl.mgenextname: u64
    param          pc_libmcl.mgenextname.s u64 
    local          pc_libmcl.mgenextname.str block:64 
    local          pc_libmcl.mgenextname.d u64 
    procentry                 
    setargs                   2 0
    push           pc_libmcl.mgenextname.s u64 
    push           &pc_libmcl.mgenextname.str 
    callproc       &strcpy    
    push           0          u64 
    push           &pc_libmcl.mgenextname.str 
    setargs                   1 0
    push           pc_libmcl.mgenextname.s u64 
    callfn         &strlen    i64 
    popptroff                 u8 1 -1
    setargs                   1 0
    push           51         i64 
    callfn         &mlibp.pcm_allocz u64 
    pop            pc_libmcl.mgenextname.d u64 
    setargs                   1 0
    push           &pc_libmcl.mgenextname.str 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           pc_libmcl.mgenextname.d u64 
    push           0          
    popptroff                 u64 1 0
    push           1          u64 
    push           pc_libmcl.mgenextname.d u64 
    push           46         
    addrefoff                 u64 1 0
    push           1          i64 
    popdotindex               u16 
    setargs                   1 0
    push           pc_libmcl.mgenextname.d u64 
    callfn         &pc_libmcl.mgenmemaddr u64 
    setret                    u64 
    jump           #7872      
#7872: 
    retfn                     u64 
End


Proc pc_stackmcl.resetopnds1:
    local          pc_stackmcl.resetopnds1.av_1 i64 
    local          pc_stackmcl.resetopnds1.i i64 
    procentry                 
    push           pci_mcl.mstackdepth i64 
    jumpfalse      #7874      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "1:HW stack not empty" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.procdef u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "MSTACKDEPTH=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.mstackdepth i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           0          i64 
    pop            pci_mcl.mstackdepth i64 
#7874: 
    push           pci_mcl.noperands i64 
    jumpfalse      #7875      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "1:Reset:pcl stack not empty:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.procdef u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "NOPERANDS=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.noperands i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           0          i64 
    pop            pci_mcl.noperands i64 
#7875: 
#7876: 
    push           1          i64 
    pop            pc_stackmcl.resetopnds1.i i64 
    push           16         i64 
    pop            pc_stackmcl.resetopnds1.av_1 i64 
    push           pc_stackmcl.resetopnds1.av_1 i64 
    push           1          i64 
    jumplt         #7877      i64 
#7878: 
    push           &pci_mcl.regset 
    push           pc_stackmcl.resetopnds1.i i64 
    pushptroff                u8 1 -1
    jumptrue       #7879      i64 
    push           &pci_mcl.xregset 
    push           pc_stackmcl.resetopnds1.i i64 
    pushptroff                u8 1 -1
    jumpfalse      #7880      i64 
#7879: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Reset: reg flag set" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.procdef u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #7877      
#7880: 
#7881: 
    forup          #7878      i64 1
    opnd           pc_stackmcl.resetopnds1.i 
    opnd           pc_stackmcl.resetopnds1.av_1 
#7877: 
    push           pci_mcl.inf_proccalls i64 
    push           0          i64 
    jumpne         #7882      i64 
    push           1          i64 
    pop            pci_mcl.inf_leafproc i64 
#7882: 
    push           &pci_mcl.regset 
    clear                     block:16 
    push           &pci_mcl.xregset 
    clear                     block:16 
    push           &pci_mcl.isregvar 
    clear                     block:16 
    push           &pci_mcl.isxregvar 
    clear                     block:16 
    push           pci_mcl.foptimise u8 
    jumptrue       #7883      i64 
    push           0          i64 
    pop            pci_mcl.inf_proccalls i64 
    push           0          i64 
    pop            pci_mcl.inf_maxargs i64 
    push           0          i64 
    pop            pci_mcl.inf_proclocals i64 
    push           0          i64 
    pop            pci_mcl.inf_procxlocals i64 
    push           0          i64 
    pop            pci_mcl.inf_leafproc i64 
    push           0          i64 
    store          pci_mcl.inf_highxreg i64 
    pop            pci_mcl.inf_highreg i64 
    push           0          i64 
    pop            pci_mcl.inf_assem i64 
    jump           #7884      
#7883: 
    push           0          i64 
    pop            pci_mcl.inf_proccalls i64 
    push           0          i64 
    pop            pci_mcl.inf_maxargs i64 
    push           0          i64 
    pop            pci_mcl.inf_proclocals i64 
    push           0          i64 
    pop            pci_mcl.inf_procxlocals i64 
#7884: 
#7885: 
    retproc                   
End


Proc pc_stackmcl.resetopnds2:
    local          pc_stackmcl.resetopnds2.av_1 i64 
    local          pc_stackmcl.resetopnds2.i i64 
    procentry                 
    push           pci_mcl.mstackdepth i64 
    jumpfalse      #7887      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "2:HW stack not empty" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.procdef u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "MSTACKDEPTH=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.mstackdepth i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#7887: 
    push           pci_mcl.noperands i64 
    jumpfalse      #7888      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "2:Reset:pcl stack not empty:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.procdef u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "NOPERANDS=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.noperands i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           0          i64 
    pop            pci_mcl.noperands i64 
#7888: 
#7889: 
    push           1          i64 
    pop            pc_stackmcl.resetopnds2.i i64 
    push           16         i64 
    pop            pc_stackmcl.resetopnds2.av_1 i64 
    push           pc_stackmcl.resetopnds2.av_1 i64 
    push           1          i64 
    jumplt         #7890      i64 
#7891: 
    push           &pci_mcl.regset 
    push           pc_stackmcl.resetopnds2.i i64 
    pushptroff                u8 1 -1
    jumptrue       #7892      i64 
    push           &pci_mcl.xregset 
    push           pc_stackmcl.resetopnds2.i i64 
    pushptroff                u8 1 -1
    jumpfalse      #7893      i64 
#7892: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "2:Reset: reg flag set" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pci_mcl.regnames 
    push           pc_stackmcl.resetopnds2.i i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.procdef u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #7890      
#7893: 
#7894: 
    forup          #7891      i64 1
    opnd           pc_stackmcl.resetopnds2.i 
    opnd           pc_stackmcl.resetopnds2.av_1 
#7890: 
    push           0          i64 
    pop            pci_mcl.inf_proccalls i64 
    push           0          i64 
    pop            pci_mcl.inf_maxargs i64 
    push           0          i64 
    pop            pci_mcl.inf_proclocals i64 
    push           0          i64 
    pop            pci_mcl.inf_procxlocals i64 
    push           0          i64 
    pop            pci_mcl.inf_leafproc i64 
    push           0          i64 
    store          pci_mcl.inf_highxreg i64 
    pop            pci_mcl.inf_highreg i64 
    push           0          i64 
    pop            pci_mcl.inf_assem i64 
    push           0          i64 
    store          pci_mcl.inf_r13used i64 
    store          pci_mcl.inf_r11used i64 
    pop            pci_mcl.inf_r10used i64 
    push           &pci_mcl.regset 
    clear                     block:16 
    push           &pci_mcl.xregset 
    clear                     block:16 
    push           &pci_mcl.isregvar 
    clear                     block:16 
    push           &pci_mcl.isxregvar 
    clear                     block:16 
#7895: 
    retproc                   
End


Proc pc_stackmcl.newopnd:
    param          pc_stackmcl.newopnd.fmt i64 
    procentry                 
    push           pci_mcl.noperands i64 
    push           200        i64 
    jumplt         #7897      i64 
    setargs                   2 0
    push           ""         u64 
    push           "PCL stack overflow" u64 
    callproc       &pc_libmcl.merror 
#7897: 
    push           &pci_mcl.noperands 
    incr                      i64 1
    push           pci_mcl.pclstack u64 
    push           0          i64 
    addrefoff                 block:15 15 -15
    pop            pci_mcl.pclstack u64 
    push           pci_mcl.pclstackzero block:15 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    popptroff                 block:15 15 -15
    push           pc_stackmcl.newopnd.fmt i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
    push           &pci_mcl.loccodes 
    push           pc_stackmcl.newopnd.fmt i64 
    pushptroff                u8 1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           1          
    popptroff                 u8 1 0
    push           0          i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    push           &pci_mcl.floatloc 
    push           pc_stackmcl.newopnd.fmt i64 
    pushptroff                u8 1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           3          
    popptroff                 u8 1 0
#7898: 
    retproc                   
End


Proc pc_stackmcl.duploperand:
    local          pc_stackmcl.duploperand.reg i64 
    procentry                 
    push           &pci_mcl.noperands 
    incr                      i64 1
    push           pci_mcl.pclstack u64 
    push           0          i64 
    addrefoff                 block:15 15 -15
    pop            pci_mcl.pclstack u64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    pushptroff                block:15 15 -15
    push           pci_mcl.pclstack u64 
    push           1          i64 
    popptroff                 block:15 15 -15
    push           &pci_mcl.loccodes 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u8 1 0
    push           4          i64 
    casejumpeq     #7900      i64 0
    push           5          i64 
    casejumpeq     #7901      i64 0
    push           7          i64 
    casejumpeq     #7902      i64 0
    push           1          i64 
    casejumpeq     #7903      i64 0
    push           2          i64 
    casejumpeq     #7904      i64 0
    push           3          i64 
    casejumpeq     #7905      i64 0
    popstack                  i64 
    jump           #7906      
#7900: 
    jump           #7907      
#7901: 
    jump           #7907      
#7902: 
    jump           #7907      
#7903: 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    pop            pc_stackmcl.duploperand.reg i64 
    push           pc_stackmcl.duploperand.reg i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.duploperand.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #7907      
#7904: 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextxreg i64 
    pop            pc_stackmcl.duploperand.reg i64 
    push           pc_stackmcl.duploperand.reg i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.duploperand.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenxreg u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #7907      
#7905: 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    pop            pc_stackmcl.duploperand.reg i64 
    setargs                   3 0
    push           pci_mcl.dstackopnd u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.duploperand.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.duploperand.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    jump           #7907      
#7906: 
#7907: 
#7908: 
    retproc                   
End


Proc pc_stackmcl.addint:
    param          pc_stackmcl.addint.a i64 
    procentry                 
    setargs                   1 0
    push           7          i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addint.a i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    popptroff                 i64 1 0
#7910: 
    retproc                   
End


Proc pc_stackmcl.addint128:
    param          pc_stackmcl.addint128.p u64 
    procentry                 
    setargs                   1 0
    push           7          i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addint128.p u64 
    push           1          i64 
    pushptroff                i64 8 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    popptroff                 i64 1 0
    setargs                   1 0
    push           7          i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addint128.p u64 
    pushptr                   i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    popptroff                 i64 1 0
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.setwideopnd 
#7912: 
    retproc                   
End


Proc pc_stackmcl.addreal:
    param          pc_stackmcl.addreal.x r64 
    procentry                 
    setargs                   1 0
    push           8          i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addreal.x r64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    popptroff                 r64 1 0
#7914: 
    retproc                   
End


Proc pc_stackmcl.addreal32:
    param          pc_stackmcl.addreal32.x r64 
    procentry                 
    setargs                   1 0
    push           9          i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addreal32.x r64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    popptroff                 r64 1 0
#7916: 
    retproc                   
End


Proc pc_stackmcl.addstring:
    param          pc_stackmcl.addstring.s u64 
    procentry                 
    setargs                   1 0
    push           10         i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addstring.s u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    popptroff                 u64 1 0
#7918: 
    retproc                   
End


Proc pc_stackmcl.addmem:
    param          pc_stackmcl.addmem.p u64 
    local          pc_stackmcl.addmem.ax u64 
    local          pc_stackmcl.addmem.d u64 
    procentry                 
    push           pc_stackmcl.addmem.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_stackmcl.addmem.d u64 
    push           &pc_tables.pcat 
    push           pc_stackmcl.addmem.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #7920      i64 0
    push           3          i64 
    casejumpeq     #7921      i64 0
    push           2          i64 
    casejumpeq     #7922      i64 0
    push           5          i64 
    casejumpeq     #7923      i64 0
    push           6          i64 
    casejumpeq     #7924      i64 0
    push           4          i64 
    casejumpeq     #7925      i64 0
    popstack                  i64 
    jump           #7926      
#7920: 
    push           pc_stackmcl.addmem.d u64 
    push           48         
    pushptroff                u8 1 0
    jumpfalse      #7927      i64 
    setargs                   1 0
    push           18         i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addmem.d u64 
    push           48         
    pushptroff                u8 1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    jump           #7928      
#7927: 
    setargs                   1 0
    push           14         i64 
    callproc       &pc_stackmcl.newopnd 
#7928: 
    jump           #7929      
#7921: 
    push           pc_stackmcl.addmem.d u64 
    push           48         
    pushptroff                u8 1 0
    jumpfalse      #7930      i64 
    setargs                   1 0
    push           19         i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addmem.d u64 
    push           48         
    pushptroff                u8 1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    jump           #7931      
#7930: 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_stackmcl.newopnd 
#7931: 
    jump           #7929      
#7922: 
    setargs                   1 0
    push           16         i64 
    callproc       &pc_stackmcl.newopnd 
    jump           #7929      
#7923: 
    setargs                   1 0
    push           17         i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addmem.d u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    popptroff                 u64 1 0
    push           72         i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           4          
    popptroff                 u8 1 0
    setargs                   1 0
    push           14         i64 
    callproc       &pc_stackmcl.newopnd 
    push           76         i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           4          
    popptroff                 u8 1 0
    jump           #7929      
#7924: 
    setargs                   1 0
    push           11         i64 
    callproc       &pc_stackmcl.newopnd 
    jump           #7929      
#7925: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_d64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_stackmcl.addmem.ax u64 
    setargs                   3 0
    setargs                   1 0
    push           pc_stackmcl.addmem.d u64 
    callfn         &pc_libmcl.mgenmem u64 
    push           pc_stackmcl.addmem.ax u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_stackmcl.addmem.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #7932      i64 
    push           19         i64 
    resetmult                 
    jump           #7933      
#7932: 
    push           20         i64 
    endmult                   
#7933: 
    callproc       &pc_libmcl.genmc 
    jump           #7934      
    jump           #7929      
#7926: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_d64 
    setargs                   2 0
    push           ""         u64 
    push           "ADDMEM?"  u64 
    callproc       &pc_libmcl.merror 
#7929: 
    push           pc_stackmcl.addmem.d u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    popptroff                 u64 1 0
#7934: 
    retproc                   
End


Proc pc_stackmcl.addmemaddr:
    param          pc_stackmcl.addmemaddr.d u64 
    procentry                 
    setargs                   1 0
    push           11         i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addmemaddr.d u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    popptroff                 u64 1 0
#7936: 
    retproc                   
End


Proc pc_stackmcl.addlabeladdr:
    param          pc_stackmcl.addlabeladdr.lab i64 
    procentry                 
    setargs                   1 0
    push           13         i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addlabeladdr.lab i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    popptroff                 i64 1 0
#7938: 
    retproc                   
End


Proc pc_stackmcl.addlabel:
    param          pc_stackmcl.addlabel.lab i64 
    param          pc_stackmcl.addlabel.offset i64 
    procentry                 
    setargs                   1 0
    push           12         i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addlabel.lab i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    popptroff                 i64 1 0
    push           pc_stackmcl.addlabel.offset i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           5          
    popptroff                 i16 1 0
#7940: 
    retproc                   
End


Proc pc_stackmcl.addreg0:
    param          pc_stackmcl.addreg0.reg i64 
    procentry                 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addreg0.reg i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    push           &pci_mcl.regset 
    push           pc_stackmcl.addreg0.reg i64 
    pushptroff                u8 1 -1
    jumpfalse      #7942      i64 
    setargs                   2 0
    push           ""         u64 
    push           "addreg0/reg in use" u64 
    callproc       &pc_libmcl.merror 
#7942: 
    push           1          i64 
    push           &pci_mcl.regset 
    push           pc_stackmcl.addreg0.reg i64 
    popptroff                 u8 1 -1
#7943: 
    retproc                   
End


Proc pc_stackmcl.addwidereg0:
    param          pc_stackmcl.addwidereg0.reg i64 
    local          pc_stackmcl.addwidereg0.reg2 i64 
    procentry                 
    push           pc_stackmcl.addwidereg0.reg i64 
    push           1          i64 
    add                       i64 
    pop            pc_stackmcl.addwidereg0.reg2 i64 
    push           pc_stackmcl.addwidereg0.reg2 i64 
    push           4          i64 
    jumpne         #7945      i64 
    push           11         i64 
    pop            pc_stackmcl.addwidereg0.reg2 i64 
#7945: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.newopnd 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addwidereg0.reg2 i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    push           pc_stackmcl.addwidereg0.reg i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    push           &pci_mcl.regset 
    push           pc_stackmcl.addwidereg0.reg i64 
    pushptroff                u8 1 -1
    jumpfalse      #7946      i64 
    setargs                   2 0
    push           ""         u64 
    push           "addwidereg/reg(s) in use" u64 
    callproc       &pc_libmcl.merror 
#7946: 
    push           1          i64 
    push           &pci_mcl.regset 
    push           pc_stackmcl.addwidereg0.reg i64 
    popptroff                 u8 1 -1
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.setwideopnd 
#7947: 
    retproc                   
End


Proc pc_stackmcl.addxreg0:
    param          pc_stackmcl.addxreg0.reg i64 
    param          pc_stackmcl.addxreg0.fmt i64 
    procentry                 
    setargs                   1 0
    push           pc_stackmcl.addxreg0.fmt i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addxreg0.reg i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    push           &pci_mcl.xregset 
    push           pc_stackmcl.addxreg0.reg i64 
    pushptroff                u8 1 -1
    jumpfalse      #7949      i64 
    setargs                   2 0
    push           ""         u64 
    push           "addxreg0/reg in use" u64 
    callproc       &pc_libmcl.merror 
#7949: 
    push           1          i64 
    push           &pci_mcl.xregset 
    push           pc_stackmcl.addxreg0.reg i64 
    popptroff                 u8 1 -1
#7950: 
    retproc                   
End


Proc pc_stackmcl.addreg_d64:
    procentry                 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.newopnd 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
#7952: 
    retproc                   
End


Proc pc_stackmcl.addreg_x64:
    procentry                 
    setargs                   1 0
    push           2          i64 
    callproc       &pc_stackmcl.newopnd 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextxreg i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
#7954: 
    retproc                   
End


Proc pc_stackmcl.addreg_x32:
    procentry                 
    setargs                   1 0
    push           3          i64 
    callproc       &pc_stackmcl.newopnd 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextxreg i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
#7956: 
    retproc                   
End


Proc pc_stackmcl.stropndstack: u64
    param          pc_stackmcl.stropndstack.indent i64 
    local          pc_stackmcl.stropndstack.str2 block:512 
    local          pc_stackmcl.stropndstack.s u64 
    local          pc_stackmcl.stropndstack.t u64 
    local          pc_stackmcl.stropndstack.pc block:15 
    local          pc_stackmcl.stropndstack.i i64 
    local          pc_stackmcl.stropndstack.r i64 
    procentry                 
    push           &pc_stackmcl.stropndstack.str 
    pop            pc_stackmcl.stropndstack.s u64 
    push           pc_stackmcl.stropndstack.indent i64 
    jumpfalse      #7958      i64 
    setargs                   1 0
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "                                     (" u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #7959      
#7958: 
    setargs                   1 0
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "("        u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#7959: 
#7960: 
    push           pci_mcl.noperands i64 
    pop            pc_stackmcl.stropndstack.i i64 
    push           pc_stackmcl.stropndstack.i i64 
    push           1          i64 
    jumplt         #7961      i64 
#7962: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.stropndstack.i i64 
    pushptroff                block:15 15 -15
    pop            pc_stackmcl.stropndstack.pc block:15 
    push           &pc_stackmcl.stropndstack.pc 
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #7963      i64 0
    push           7          i64 
    casejumpeq     #7964      i64 0
    push           2          i64 
    casejumpeq     #7965      i64 0
    push           8          i64 
    casejumpeq     #7966      i64 0
    push           3          i64 
    casejumpeq     #7967      i64 0
    push           5          i64 
    casejumpeq     #7968      i64 0
    popstack                  i64 
    jump           #7969      
#7963: 
    setargs                   2 0
    push           &pci_mcl.regnames 
    push           &pc_stackmcl.stropndstack.pc 
    push           2          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #7970      
#7964: 
    setargs                   2 0
    push           &pci_mcl.regnames 
    push           &pc_stackmcl.stropndstack.pc 
    push           2          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           "="        u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           &pc_stackmcl.stropndstack.pc 
    push           7          
    pushptroff                u64 1 0
    pushptr                   u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #7970      
#7965: 
    setargs                   2 0
    push           &pci_mcl.xregnames 
    push           &pc_stackmcl.stropndstack.pc 
    push           2          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           ":"        u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           &pci_mcl.fmtnames 
    push           &pc_stackmcl.stropndstack.pc 
    pushptr                   u8 
    pushptroff                u64 8 0
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #7970      
#7966: 
    setargs                   2 0
    push           &pci_mcl.xregnames 
    push           &pc_stackmcl.stropndstack.pc 
    push           2          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           "="        u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           &pc_stackmcl.stropndstack.pc 
    push           7          
    pushptroff                u64 1 0
    pushptr                   u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #7970      
#7967: 
    setargs                   2 0
    push           "T"        u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #7970      
#7968: 
    setargs                   2 0
    push           "M:"       u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           &pc_stackmcl.stropndstack.pc 
    push           7          
    pushptroff                u64 1 0
    pushptr                   u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #7970      
#7969: 
    push           &pc_stackmcl.stropndstack.pc 
    pushptr                   u8 
    push           7          i64 
    casejumpeq     #7971      i64 0
    push           8          i64 
    casejumpeq     #7972      i64 0
    push           10         i64 
    casejumpeq     #7973      i64 0
    push           11         i64 
    casejumpeq     #7974      i64 0
    push           13         i64 
    casejumpeq     #7975      i64 0
    push           12         i64 
    casejumpeq     #7976      i64 0
    popstack                  i64 
    jump           #7977      
#7971: 
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           &pc_stackmcl.stropndstack.pc 
    push           7          
    pushptroff                i64 1 0
    callfn         &msysp.strint u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #7978      
#7972: 
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           &pc_stackmcl.stropndstack.pc 
    push           7          
    pushptroff                r64 1 0
    callfn         &msysp.strreal u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #7978      
#7973: 
    push           &pc_stackmcl.stropndstack.pc 
    push           7          
    pushptroff                u64 1 0
    pop            pc_stackmcl.stropndstack.t u64 
    setargs                   1 0
    push           pc_stackmcl.stropndstack.t u64 
    callfn         &strlen    i64 
    push           20         i64 
    jumple         #7979      i64 
    setargs                   2 0
    push           "LONG STR" u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #7980      
#7979: 
    setargs                   2 0
    push           "\""       u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           pc_stackmcl.stropndstack.s u64 
    setargs                   1 0
    push           pc_stackmcl.stropndstack.s u64 
    callfn         &strlen    i64 
    addrefoff                 u64 1 0
    push           pc_stackmcl.stropndstack.t u64 
    callproc       &pc_libpcl.convertstring 
    setargs                   2 0
    push           "\""       u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
#7980: 
    jump           #7978      
#7974: 
    setargs                   2 0
    push           "&"        u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           &pc_stackmcl.stropndstack.pc 
    push           7          
    pushptroff                u64 1 0
    pushptr                   u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #7978      
#7975: 
    setargs                   2 0
    push           "&#"       u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           &pc_stackmcl.stropndstack.pc 
    push           7          
    pushptroff                i64 1 0
    callfn         &msysp.strint u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #7978      
#7976: 
    setargs                   2 0
    push           "#"        u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           &pc_stackmcl.stropndstack.pc 
    push           7          
    pushptroff                i64 1 0
    callfn         &msysp.strint u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #7978      
#7977: 
    setargs                   2 0
    push           &pci_mcl.fmtnames 
    push           &pc_stackmcl.stropndstack.pc 
    pushptr                   u8 
    pushptroff                u64 8 0
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
#7978: 
#7970: 
    push           &pc_stackmcl.stropndstack.pc 
    push           4          
    pushptroff                u8 1 0
    jumpfalse      #7981      i64 
    setargs                   2 0
    startmult                 
    push           &pc_stackmcl.stropndstack.pc 
    push           4          
    pushptroff                u8 1 0
    push           72         i64 
    jumpne         #7982      i64 
    push           "(H)"      u64 
    resetmult                 
    jump           #7983      
#7982: 
    push           "(L)"      u64 
    endmult                   
#7983: 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
#7981: 
    push           pc_stackmcl.stropndstack.i i64 
    push           1          i64 
    jumple         #7984      i64 
    setargs                   2 0
    push           ","        u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
#7984: 
#7985: 
    fordown        #7962      i64 1
    opnd           pc_stackmcl.stropndstack.i 
    opnd           1          
#7961: 
    setargs                   2 0
    push           ") ("      u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
#7986: 
    push           1          i64 
    pop            pc_stackmcl.stropndstack.r i64 
#7987: 
    setargs                   2 0
    startmult                 
    push           &pci_mcl.regset 
    push           pc_stackmcl.stropndstack.r i64 
    pushptroff                u8 1 -1
    jumpfalse      #7988      i64 
    push           "1 "       u64 
    resetmult                 
    jump           #7989      
#7988: 
    push           "0 "       u64 
    endmult                   
#7989: 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
#7990: 
    forup          #7987      i64 1
    opnd           pc_stackmcl.stropndstack.r 
    opnd           10         
#7991: 
    setargs                   2 0
    push           ") ("      u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
#7992: 
    push           1          i64 
    pop            pc_stackmcl.stropndstack.r i64 
#7993: 
    setargs                   2 0
    startmult                 
    push           &pci_mcl.xregset 
    push           pc_stackmcl.stropndstack.r i64 
    pushptroff                u8 1 -1
    jumpfalse      #7994      i64 
    push           "1 "       u64 
    resetmult                 
    jump           #7995      
#7994: 
    push           "0 "       u64 
    endmult                   
#7995: 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
#7996: 
    forup          #7993      i64 1
    opnd           pc_stackmcl.stropndstack.r 
    opnd           7          
#7997: 
    setargs                   2 0
    push           ") hwstack:" u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pci_mcl.mstackdepth i64 
    callfn         &msysp.strint u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           " noperands:" u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pci_mcl.noperands i64 
    callfn         &msysp.strint u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           " ncalldepth:" u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pci_mcl.ncalldepth i64 
    callfn         &msysp.strint u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           " callslots[]:" u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           &pci_mcl.callslots 
    push           pci_mcl.ncalldepth i64 
    pushptroff                i64 8 -8
    callfn         &msysp.strint u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    push           pc_stackmcl.stropndstack.s u64 
    setret                    u64 
    jump           #7998      
#7998: 
    retfn                     u64 
End


Proc pc_stackmcl.loadopnd:
    param          pc_stackmcl.loadopnd.n i64 
    param          pc_stackmcl.loadopnd.nvreg i64 
    local          pc_stackmcl.loadopnd.reg i64 
    local          pc_stackmcl.loadopnd.value i64 
    local          pc_stackmcl.loadopnd.ax u64 
    procentry                 
    push           pc_stackmcl.loadopnd.n i64 
    push           pci_mcl.noperands i64 
    jumple         #8000      i64 
    setargs                   1 0
    push           "UNDERFLOW" u64 
    callproc       &pc_libmcl.mgencomment 
    jump           #8001      
    setargs                   2 0
    push           ""         u64 
    push           "loadopnd/underflow" u64 
    callproc       &pc_libmcl.merror 
#8000: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8002      i64 
    jump           #8001      
#8002: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #8003      i64 
    jump           #8001      
#8003: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           3          
    pushptroff                u8 1 0
    jumpfalse      #8004      i64 
    setargs                   1 0
    push           pc_stackmcl.loadopnd.nvreg i64 
    callfn         &pc_stackmcl.getnextxreg i64 
    pop            pc_stackmcl.loadopnd.reg i64 
    jump           #8005      
#8004: 
    setargs                   1 0
    push           pc_stackmcl.loadopnd.nvreg i64 
    callfn         &pc_stackmcl.getnextreg i64 
    pop            pc_stackmcl.loadopnd.reg i64 
#8005: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           2          i64 
    casejumpeq     #8006      i64 0
    popstack                  i64 
    jump           #8007      
#8006: 
    setargs                   2 0
    push           ""         u64 
    push           "LOADOPND/XREG" u64 
    callproc       &pc_libmcl.merror 
    jump           #8008      
#8007: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    casejumpeq     #8009      i64 0
    push           8          i64 
    casejumpeq     #8010      i64 0
    push           9          i64 
    casejumpeq     #8011      i64 0
    push           10         i64 
    casejumpeq     #8012      i64 0
    push           13         i64 
    casejumpeq     #8013      i64 0
    push           12         i64 
    casejumpeq     #8014      i64 0
    push           14         i64 
    casejumpeq     #8015      i64 0
    push           15         i64 
    casejumpeq     #8016      i64 0
    push           16         i64 
    casejumpeq     #8017      i64 0
    push           17         i64 
    casejumpeq     #8018      i64 0
    push           18         i64 
    casejumpeq     #8019      i64 0
    push           19         i64 
    casejumpeq     #8020      i64 0
    push           4          i64 
    casejumpeq     #8021      i64 0
    push           5          i64 
    casejumpeq     #8022      i64 0
    push           6          i64 
    casejumpeq     #8023      i64 0
    push           11         i64 
    casejumpeq     #8024      i64 0
    popstack                  i64 
    jump           #8025      
#8009: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    pop            pc_stackmcl.loadopnd.value i64 
    push           pc_stackmcl.loadopnd.value i64 
    push           0          i64 
    jumpne         #8026      i64 
    push           pci_mcl.noxorclear u8 
    jumptrue       #8026      i64 
    setargs                   2 0
    push           4          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_stackmcl.loadopnd.ax u64 
    setargs                   3 0
    push           pc_stackmcl.loadopnd.ax u64 
    push           pc_stackmcl.loadopnd.ax u64 
    push           41         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8027      
#8026: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenint u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
#8027: 
    jump           #8028      
#8010: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                r64 1 0
    callfn         &pc_libmcl.mgenrealmem u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenxreg u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8028      
#8011: 
    setargs                   3 0
    setargs                   2 0
    push           4          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                r64 1 0
    callfn         &pc_libmcl.mgenrealmem u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenxreg u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8028      
#8012: 
    setargs                   3 0
    setargs                   1 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.getstringindex i64 
    callfn         &pc_libmcl.mgenlabel u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8028      
#8013: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8028      
#8014: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabelmem u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           5          
    pushptroff                i16 1 0
    push           pci_mcl.mccodex u64 
    push           16         
    pushptroff                u64 1 0
    push           14         
    popptroff                 i32 1 0
    jump           #8028      
#8015: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8028      
#8016: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenxreg u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8028      
#8017: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenxreg u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8028      
#8018: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmemhigh u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8028      
#8019: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenregvar u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8028      
#8020: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenxregvar u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenxreg u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8028      
#8021: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           14         i64 
    callproc       &pc_libmcl.genmc 
    push           &pci_mcl.mstackdepth 
    decr                      i64 1
    jump           #8028      
#8022: 
    push           pci_mcl.inf_r13used i64 
    jumpfalse      #8029      i64 
    setargs                   2 0
    push           ""         u64 
    push           "R13 in use" u64 
    callproc       &pc_libmcl.merror 
#8029: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           14         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           14         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           14         i64 
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenxreg u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    push           &pci_mcl.mstackdepth 
    decr                      i64 1
    jump           #8028      
#8023: 
    push           pci_mcl.inf_r13used i64 
    jumpfalse      #8030      i64 
    setargs                   2 0
    push           ""         u64 
    push           "R13 in use" u64 
    callproc       &pc_libmcl.merror 
#8030: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           14         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           14         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           4          i64 
    push           14         i64 
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenxreg u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    push           &pci_mcl.mstackdepth 
    decr                      i64 1
    jump           #8028      
#8024: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           15         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8028      
#8025: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.stropndstack u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           &pci_mcl.fmtnames 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u64 8 0
    push           "LOADOPND??" u64 
    callproc       &pc_libmcl.merror 
#8028: 
#8008: 
    push           pc_stackmcl.loadopnd.reg i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    push           &pci_mcl.loadfmt 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u8 1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
    push           &pci_mcl.loccodes 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u8 1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           1          
    popptroff                 u8 1 0
#8001: 
    retproc                   
End


Proc pc_stackmcl.loadparam:
    param          pc_stackmcl.loadparam.n i64 
    param          pc_stackmcl.loadparam.reg i64 
    local          pc_stackmcl.loadparam.oldreg i64 
    local          pc_stackmcl.loadparam.value i64 
    local          pc_stackmcl.loadparam.ax u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadparam.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_stackmcl.loadparam.ax u64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_stackmcl.loadparam.oldreg i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           1          i64 
    casejumpeq     #8032      i64 0
    push           18         i64 
    casejumpeq     #8032      i64 0
    push           2          i64 
    casejumpeq     #8033      i64 0
    push           19         i64 
    casejumpeq     #8033      i64 0
    push           3          i64 
    casejumpeq     #8034      i64 0
    push           7          i64 
    casejumpeq     #8035      i64 0
    push           8          i64 
    casejumpeq     #8036      i64 0
    push           10         i64 
    casejumpeq     #8037      i64 0
    push           14         i64 
    casejumpeq     #8038      i64 0
    push           17         i64 
    casejumpeq     #8039      i64 0
    push           11         i64 
    casejumpeq     #8040      i64 0
    push           15         i64 
    casejumpeq     #8041      i64 0
    push           4          i64 
    casejumpeq     #8042      i64 0
    popstack                  i64 
    jump           #8043      
#8032: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadparam.oldreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           pc_stackmcl.loadparam.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_stackmcl.loadparam.oldreg i64 
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_stackmcl.loadparam.oldreg i64 
    popptroff                 u8 1 -1
    jump           #8044      
#8033: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadparam.oldreg i64 
    callfn         &pc_libmcl.mgenxreg u64 
    push           pc_stackmcl.loadparam.ax u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8045      
    jump           #8044      
#8034: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadparam.oldreg i64 
    callfn         &pc_libmcl.mgenxreg u64 
    setargs                   2 0
    push           4          i64 
    push           pc_stackmcl.loadparam.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8045      
    jump           #8044      
#8035: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    pop            pc_stackmcl.loadparam.value i64 
    push           pc_stackmcl.loadparam.value i64 
    push           0          i64 
    jumpne         #8046      i64 
    setargs                   2 0
    push           4          i64 
    push           pc_stackmcl.loadparam.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_stackmcl.loadparam.ax u64 
    setargs                   3 0
    push           pc_stackmcl.loadparam.ax u64 
    push           pc_stackmcl.loadparam.ax u64 
    push           41         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8047      
#8046: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenint u64 
    push           pc_stackmcl.loadparam.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
#8047: 
    jump           #8044      
#8036: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                r64 1 0
    callfn         &pc_libmcl.mgenrealmem u64 
    push           pc_stackmcl.loadparam.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8044      
#8037: 
    setargs                   3 0
    setargs                   1 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.getstringindex i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           pc_stackmcl.loadparam.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8044      
#8038: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           pc_stackmcl.loadparam.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8044      
#8039: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmemhigh u64 
    push           pc_stackmcl.loadparam.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8044      
#8040: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           pc_stackmcl.loadparam.ax u64 
    push           15         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8044      
#8041: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           pc_stackmcl.loadparam.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8044      
#8042: 
    setargs                   3 0
    push           0          u64 
    push           pc_stackmcl.loadparam.ax u64 
    push           14         i64 
    callproc       &pc_libmcl.genmc 
    push           &pci_mcl.mstackdepth 
    decr                      i64 1
    jump           #8044      
#8043: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "LOADPARAM:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pci_mcl.fmtnames 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "LOADPARAM??" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "****LOADPARAM??" u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   2 0
    push           &pci_mcl.fmtnames 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u64 8 0
    push           "LOADPARAM??" u64 
    callproc       &pc_libmcl.merror 
#8044: 
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    push           1          
    popptroff                 u8 1 0
    push           pc_stackmcl.loadparam.reg i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
#8045: 
    retproc                   
End


Proc pc_stackmcl.loadxparam:
    param          pc_stackmcl.loadxparam.n i64 
    param          pc_stackmcl.loadxparam.reg i64 
    local          pc_stackmcl.loadxparam.ax u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadxparam.reg i64 
    callfn         &pc_libmcl.mgenxreg u64 
    pop            pc_stackmcl.loadxparam.ax u64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadxparam.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           1          i64 
    casejumpeq     #8049      i64 0
    push           18         i64 
    casejumpeq     #8049      i64 0
    push           2          i64 
    casejumpeq     #8050      i64 0
    push           19         i64 
    casejumpeq     #8050      i64 0
    push           3          i64 
    casejumpeq     #8051      i64 0
    push           8          i64 
    casejumpeq     #8052      i64 0
    push           9          i64 
    casejumpeq     #8053      i64 0
    push           14         i64 
    casejumpeq     #8054      i64 0
    push           15         i64 
    casejumpeq     #8054      i64 0
    push           16         i64 
    casejumpeq     #8055      i64 0
    popstack                  i64 
    jump           #8056      
#8049: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadxparam.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    push           pc_stackmcl.loadxparam.ax u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8057      
#8050: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadxparam.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenxreg u64 
    push           pc_stackmcl.loadxparam.ax u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8057      
#8051: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadxparam.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenxreg u64 
    push           pc_stackmcl.loadxparam.ax u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8057      
#8052: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadxparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                r64 1 0
    callfn         &pc_libmcl.mgenrealmem u64 
    push           pc_stackmcl.loadxparam.ax u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8057      
#8053: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadxparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                r64 1 0
    callfn         &pc_libmcl.mgenrealmem u64 
    push           pc_stackmcl.loadxparam.ax u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8057      
#8054: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadxparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           pc_stackmcl.loadxparam.ax u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8057      
#8055: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadxparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           pc_stackmcl.loadxparam.ax u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8057      
#8056: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "??LOADXPARAM" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_stackmcl.loadxparam.n i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           pci_mcl.noperands i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "****LOADXPARAM??" u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   2 0
    push           &pci_mcl.fmtnames 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadxparam.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u64 8 0
    push           "LOADXPARAM??" u64 
    callproc       &pc_libmcl.merror 
#8057: 
#8058: 
    retproc                   
End


Proc pc_stackmcl.genopnd: u64
    param          pc_stackmcl.genopnd.index i64 
    param          pc_stackmcl.genopnd.size i64 
    local          pc_stackmcl.genopnd.ax u64 
    local          pc_stackmcl.genopnd.reg i64 
    local          pc_stackmcl.genopnd.value i64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8060      i64 0
    push           7          i64 
    casejumpeq     #8061      i64 0
    push           2          i64 
    casejumpeq     #8062      i64 0
    push           8          i64 
    casejumpeq     #8063      i64 0
    popstack                  i64 
    jump           #8064      
#8060: 
    setargs                   2 0
    push           pc_stackmcl.genopnd.size i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    setret                    u64 
    jump           #8065      
    jump           #8066      
#8061: 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenregvar u64 
    setret                    u64 
    jump           #8065      
    jump           #8066      
#8062: 
    setargs                   2 0
    push           pc_stackmcl.genopnd.size i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenxreg u64 
    setret                    u64 
    jump           #8065      
    jump           #8066      
#8063: 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenxregvar u64 
    setret                    u64 
    jump           #8065      
    jump           #8066      
#8064: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           14         i64 
    casejumpeq     #8067      i64 0
    push           15         i64 
    casejumpeq     #8067      i64 0
    push           16         i64 
    casejumpeq     #8067      i64 0
    push           17         i64 
    casejumpeq     #8068      i64 0
    push           7          i64 
    casejumpeq     #8069      i64 0
    push           8          i64 
    casejumpeq     #8070      i64 0
    push           9          i64 
    casejumpeq     #8071      i64 0
    push           11         i64 
    casejumpeq     #8072      i64 0
    push           10         i64 
    casejumpeq     #8073      i64 0
    popstack                  i64 
    jump           #8074      
#8067: 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    setret                    u64 
    jump           #8065      
    jump           #8075      
#8068: 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmemhigh u64 
    setret                    u64 
    jump           #8065      
    jump           #8075      
#8069: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    pop            pc_stackmcl.genopnd.value i64 
    push           -2147483648 i64 
    push           pc_stackmcl.genopnd.value i64 
    jumpgt         #8076      i64 
    push           pc_stackmcl.genopnd.value i64 
    push           2147483647 i64 
    jumpgt         #8076      i64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.genopnd.value i64 
    callfn         &pc_libmcl.mgenint u64 
    setret                    u64 
    jump           #8065      
#8076: 
    setargs                   2 0
    push           8          i64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_stackmcl.genopnd.ax u64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.genopnd.value i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_stackmcl.genopnd.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_stackmcl.genopnd.ax u64 
    push           10         
    pushptroff                u8 1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           1          
    popptroff                 u8 1 0
    push           pc_stackmcl.genopnd.ax u64 
    setret                    u64 
    jump           #8065      
    jump           #8075      
#8070: 
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                r64 1 0
    callfn         &pc_libmcl.mgenrealmem u64 
    setret                    u64 
    jump           #8065      
    jump           #8075      
#8071: 
    setargs                   2 0
    push           4          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                r64 1 0
    callfn         &pc_libmcl.mgenrealmem u64 
    setret                    u64 
    jump           #8065      
    jump           #8075      
#8072: 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    pop            pc_stackmcl.genopnd.reg i64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.genopnd.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_stackmcl.genopnd.ax u64 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           pc_stackmcl.genopnd.ax u64 
    push           15         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_stackmcl.genopnd.ax u64 
    push           10         
    pushptroff                u8 1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           1          
    popptroff                 u8 1 0
    push           pc_stackmcl.genopnd.ax u64 
    setret                    u64 
    jump           #8065      
    jump           #8075      
#8073: 
    setargs                   3 0
    setargs                   1 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.getstringindex i64 
    callfn         &pc_libmcl.mgenlabel u64 
    setargs                   2 0
    push           8          i64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    store          pc_stackmcl.genopnd.ax u64 
    push           15         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_stackmcl.genopnd.ax u64 
    push           10         
    pushptroff                u8 1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           1          
    popptroff                 u8 1 0
    push           pc_stackmcl.genopnd.ax u64 
    setret                    u64 
    jump           #8065      
    jump           #8075      
#8074: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "LOCNAMES[PCLSTACK[INDEX].LOC]=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pci_mcl.locnames 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "FMTNAMES[PCLSTACK[INDEX].FMT]=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pci_mcl.fmtnames 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "GENOPND??" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "****GENOPND??" u64 
    callproc       &pc_libmcl.mgencomment 
#8075: 
#8066: 
    push           0          u64 
    setret                    u64 
    jump           #8065      
#8065: 
    retfn                     u64 
End


Proc pc_stackmcl.genopnd_ld: u64
    param          pc_stackmcl.genopnd_ld.index i64 
    param          pc_stackmcl.genopnd_ld.size i64 
    procentry                 
    setargs                   2 0
    push           0          i64 
    push           pc_stackmcl.genopnd_ld.index i64 
    callproc       &pc_stackmcl.loadopnd 
    setargs                   2 0
    push           pc_stackmcl.genopnd_ld.size i64 
    push           pc_stackmcl.genopnd_ld.index i64 
    callfn         &pc_stackmcl.genopnd u64 
    setret                    u64 
    jump           #8078      
#8078: 
    retfn                     u64 
End


Proc pc_stackmcl.genopnd_ind: u64
    param          pc_stackmcl.genopnd_ind.index i64 
    param          pc_stackmcl.genopnd_ind.size i64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd_ind.index i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8080      i64 0
    popstack                  i64 
    jump           #8081      
#8080: 
    setargs                   3 0
    push           0          i64 
    push           pc_stackmcl.genopnd_ind.size i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd_ind.index i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenireg u64 
    setret                    u64 
    jump           #8082      
    setargs                   3 0
    push           0          i64 
    push           pc_stackmcl.genopnd_ind.size i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd_ind.index i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenireg u64 
    setret                    u64 
    jump           #8082      
    setargs                   3 0
    push           0          i64 
    push           pc_stackmcl.genopnd_ind.size i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd_ind.index i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenireg u64 
    setret                    u64 
    jump           #8082      
    jump           #8083      
#8081: 
#8083: 
    setargs                   2 0
    push           0          i64 
    push           pc_stackmcl.genopnd_ind.index i64 
    callproc       &pc_stackmcl.loadopnd 
    setargs                   2 0
    push           pc_stackmcl.genopnd_ind.size i64 
    push           pc_stackmcl.genopnd_ind.index i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    setret                    u64 
    jump           #8082      
#8082: 
    retfn                     u64 
End


Proc pc_stackmcl.genopnd_d64: u64
    procentry                 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_d64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    setret                    u64 
    jump           #8085      
#8085: 
    retfn                     u64 
End


Proc pc_stackmcl.setwideopnd:
    param          pc_stackmcl.setwideopnd.n i64 
    procentry                 
    push           76         i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.setwideopnd.n i64 
    addrefoff                 block:15 15 -15
    push           4          
    popptroff                 u8 1 0
    push           72         i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.setwideopnd.n i64 
    addrefoff                 block:15 15 0
    push           4          
    popptroff                 u8 1 0
#8087: 
    retproc                   
End


Proc pc_stackmcl.unsetwideopnd:
    param          pc_stackmcl.unsetwideopnd.n i64 
    procentry                 
    push           0          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.unsetwideopnd.n i64 
    addrefoff                 block:15 15 -15
    push           4          
    popptroff                 u8 1 0
#8089: 
    retproc                   
End


Proc pc_stackmcl.getnextreg: i64
    param          pc_stackmcl.getnextreg.nvreg i64 
    local          pc_stackmcl.getnextreg.reg i64 
    local          pc_stackmcl.getnextreg.firstreg i64 
    local          pc_stackmcl.getnextreg.r i64 
    local          pc_stackmcl.getnextreg.i i64 
    procentry                 
    startmult                 
    push           pc_stackmcl.getnextreg.nvreg i64 
    jumpfalse      #8091      i64 
    push           4          i64 
    resetmult                 
    jump           #8092      
#8091: 
    push           1          i64 
    endmult                   
#8092: 
    pop            pc_stackmcl.getnextreg.firstreg i64 
#8093: 
    push           pc_stackmcl.getnextreg.firstreg i64 
    pop            pc_stackmcl.getnextreg.r i64 
    push           pc_stackmcl.getnextreg.r i64 
    push           10         i64 
    jumpgt         #8094      i64 
#8095: 
    push           &pci_mcl.regset 
    push           pc_stackmcl.getnextreg.r i64 
    pushptroff                u8 1 -1
    push           0          i64 
    jumpne         #8096      i64 
    push           1          i64 
    push           &pci_mcl.regset 
    push           pc_stackmcl.getnextreg.r i64 
    popptroff                 u8 1 -1
    push           &pci_mcl.inf_highreg 
    push           pc_stackmcl.getnextreg.r i64 
    maxto                     i64 
    push           pc_stackmcl.getnextreg.r i64 
    setret                    i64 
    jump           #8097      
#8096: 
#8098: 
    forup          #8095      i64 1
    opnd           pc_stackmcl.getnextreg.r 
    opnd           10         
#8094: 
#8099: 
    push           pci_mcl.noperands i64 
    pop            pc_stackmcl.getnextreg.i i64 
    push           pc_stackmcl.getnextreg.i i64 
    push           1          i64 
    jumplt         #8100      i64 
#8101: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.getnextreg.i i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8102      i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.getnextreg.i i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_stackmcl.getnextreg.reg i64 
    push           pc_stackmcl.getnextreg.reg i64 
    push           pc_stackmcl.getnextreg.firstreg i64 
    jumplt         #8103      i64 
    setargs                   1 0
    push           pc_stackmcl.getnextreg.i i64 
    callproc       &pc_stackmcl.pushopnd 
    setargs                   1 0
    push           pc_stackmcl.getnextreg.nvreg i64 
    callfn         &pc_stackmcl.getnextreg i64 
    setret                    i64 
    jump           #8097      
#8103: 
#8102: 
#8104: 
    fordown        #8101      i64 1
    opnd           pc_stackmcl.getnextreg.i 
    opnd           1          
#8100: 
    setargs                   2 0
    push           ""         u64 
    push           "NO FREE REGS" u64 
    callproc       &pc_libmcl.merror 
    push           0          i64 
    setret                    i64 
    jump           #8097      
#8097: 
    retfn                     i64 
End


Proc pc_stackmcl.getnextxreg: i64
    param          pc_stackmcl.getnextxreg.nvreg i64 
    local          pc_stackmcl.getnextxreg.reg i64 
    local          pc_stackmcl.getnextxreg.firstreg i64 
    local          pc_stackmcl.getnextxreg.r i64 
    local          pc_stackmcl.getnextxreg.i i64 
    procentry                 
    startmult                 
    push           pc_stackmcl.getnextxreg.nvreg i64 
    jumpfalse      #8106      i64 
    push           7          i64 
    resetmult                 
    jump           #8107      
#8106: 
    push           5          i64 
    endmult                   
#8107: 
    pop            pc_stackmcl.getnextxreg.firstreg i64 
#8108: 
    push           pc_stackmcl.getnextxreg.firstreg i64 
    pop            pc_stackmcl.getnextxreg.r i64 
    push           pc_stackmcl.getnextxreg.r i64 
    push           10         i64 
    jumpgt         #8109      i64 
#8110: 
    push           &pci_mcl.xregset 
    push           pc_stackmcl.getnextxreg.r i64 
    pushptroff                u8 1 -1
    push           0          i64 
    jumpne         #8111      i64 
    push           1          i64 
    push           &pci_mcl.xregset 
    push           pc_stackmcl.getnextxreg.r i64 
    popptroff                 u8 1 -1
    push           &pci_mcl.inf_highxreg 
    push           pc_stackmcl.getnextxreg.r i64 
    maxto                     i64 
    push           pc_stackmcl.getnextxreg.r i64 
    setret                    i64 
    jump           #8112      
#8111: 
#8113: 
    forup          #8110      i64 1
    opnd           pc_stackmcl.getnextxreg.r 
    opnd           10         
#8109: 
#8114: 
    push           pci_mcl.noperands i64 
    pop            pc_stackmcl.getnextxreg.i i64 
    push           pc_stackmcl.getnextxreg.i i64 
    push           1          i64 
    jumplt         #8115      i64 
#8116: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.getnextxreg.i i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8117      i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.getnextxreg.i i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_stackmcl.getnextxreg.reg i64 
    push           pc_stackmcl.getnextxreg.reg i64 
    push           pc_stackmcl.getnextxreg.firstreg i64 
    jumplt         #8118      i64 
    setargs                   1 0
    push           pc_stackmcl.getnextxreg.i i64 
    callproc       &pc_stackmcl.pushopnd 
    setargs                   1 0
    push           pc_stackmcl.getnextxreg.nvreg i64 
    callfn         &pc_stackmcl.getnextxreg i64 
    setret                    i64 
    jump           #8112      
#8118: 
#8117: 
#8119: 
    fordown        #8116      i64 1
    opnd           pc_stackmcl.getnextxreg.i 
    opnd           1          
#8115: 
    setargs                   2 0
    push           ""         u64 
    push           "NO FREE XREGS" u64 
    callproc       &pc_libmcl.merror 
    push           0          i64 
    setret                    i64 
    jump           #8112      
#8112: 
    retfn                     i64 
End


Proc pc_stackmcl.delopnd:
    procentry                 
    push           pci_mcl.noperands i64 
    push           0          i64 
    jumpgt         #8121      i64 
    setargs                   1 0
    push           "****DELND/UNDERFLOW" u64 
    callproc       &pc_libmcl.mgencomment 
    jump           #8122      
    setargs                   2 0
    push           ""         u64 
    push           "popopnd/underflow" u64 
    callproc       &pc_libmcl.merror 
#8121: 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8123      i64 0
    push           7          i64 
    casejumpeq     #8123      i64 0
    push           2          i64 
    casejumpeq     #8124      i64 0
    push           8          i64 
    casejumpeq     #8124      i64 0
    push           5          i64 
    casejumpeq     #8125      i64 0
    push           4          i64 
    casejumpeq     #8126      i64 0
    popstack                  i64 
    jump           #8127      
#8123: 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    jump           #8128      
#8124: 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callproc       &pc_stackmcl.freexreg 
    jump           #8128      
#8125: 
    jump           #8128      
#8126: 
    jump           #8128      
#8127: 
    setargs                   2 0
    push           &pci_mcl.locnames 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    push           "Can't pop opnd: #" u64 
    callproc       &pc_libmcl.merror 
#8128: 
    push           &pci_mcl.noperands 
    decr                      i64 1
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    pop            pci_mcl.pclstack u64 
#8122: 
    retproc                   
End


Proc pc_stackmcl.freexreg:
    param          pc_stackmcl.freexreg.xr i64 
    procentry                 
    push           0          i64 
    push           &pci_mcl.xregset 
    push           pc_stackmcl.freexreg.xr i64 
    popptroff                 u8 1 -1
#8130: 
    retproc                   
End


Proc pc_stackmcl.pushopnd:
    param          pc_stackmcl.pushopnd.n i64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8132      i64 0
    push           7          i64 
    casejumpeq     #8133      i64 0
    push           2          i64 
    casejumpeq     #8134      i64 0
    push           3          i64 
    casejumpeq     #8135      i64 0
    popstack                  i64 
    jump           #8136      
#8132: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    jump           #8137      
#8133: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8137      
#8134: 
    push           pci_mcl.inf_r13used i64 
    jumpfalse      #8138      i64 
    setargs                   2 0
    push           ""         u64 
    push           "2:R13 in use" u64 
    callproc       &pc_libmcl.merror 
#8138: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenxreg u64 
    setargs                   2 0
    push           8          i64 
    push           14         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           14         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callproc       &pc_stackmcl.freexreg 
    jump           #8137      
#8135: 
    jump           #8139      
    jump           #8137      
#8136: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           17         i64 
    casejumpeq     #8140      i64 0
    push           14         i64 
    casejumpeq     #8141      i64 0
    push           15         i64 
    casejumpeq     #8141      i64 0
    push           16         i64 
    casejumpeq     #8142      i64 0
    push           7          i64 
    casejumpeq     #8143      i64 0
    push           8          i64 
    casejumpeq     #8144      i64 0
    push           10         i64 
    casejumpeq     #8145      i64 0
    push           11         i64 
    casejumpeq     #8146      i64 0
    popstack                  i64 
    jump           #8147      
#8140: 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmemhigh u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8148      
#8141: 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8148      
#8142: 
    push           pci_mcl.inf_r13used i64 
    jumpfalse      #8149      i64 
    setargs                   2 0
    push           ""         u64 
    push           "4:R13 in use" u64 
    callproc       &pc_libmcl.merror 
#8149: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    setargs                   2 0
    push           4          i64 
    push           14         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           14         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8148      
#8143: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenint u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8148      
#8144: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                r64 1 0
    callfn         &pc_libmcl.mgenrealmem u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8148      
#8145: 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.getstringindex i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8148      
#8146: 
    push           pci_mcl.inf_r13used i64 
    jumpfalse      #8150      i64 
    setargs                   2 0
    push           ""         u64 
    push           "3:R13 in use" u64 
    callproc       &pc_libmcl.merror 
#8150: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    setargs                   2 0
    push           8          i64 
    push           14         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           15         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           14         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8148      
#8147: 
    setargs                   2 0
    push           &pci_mcl.fmtnames 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u64 8 0
    push           "Can't push opnd: #" u64 
    callproc       &pc_libmcl.merror 
#8148: 
#8137: 
    push           3          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           1          
    popptroff                 u8 1 0
    push           &pci_mcl.pushfmt 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u8 1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
    push           &pci_mcl.mstackdepth 
    incr                      i64 1
#8139: 
    retproc                   
End


Proc pc_stackmcl.pushallopnds:
    param          pc_stackmcl.pushallopnds.n i64 
    local          pc_stackmcl.pushallopnds.i i64 
    procentry                 
#8152: 
    push           pci_mcl.noperands i64 
    pop            pc_stackmcl.pushallopnds.i i64 
    push           pc_stackmcl.pushallopnds.i i64 
    push           pc_stackmcl.pushallopnds.n i64 
    jumplt         #8153      i64 
#8154: 
    setargs                   1 0
    push           pc_stackmcl.pushallopnds.i i64 
    callproc       &pc_stackmcl.pushopnd 
#8155: 
    fordown        #8154      i64 1
    opnd           pc_stackmcl.pushallopnds.i 
    opnd           pc_stackmcl.pushallopnds.n 
#8153: 
#8156: 
    retproc                   
End


Proc pc_stackmcl.poparg:
    procentry                 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8158      i64 0
    push           2          i64 
    casejumpeq     #8159      i64 0
    push           3          i64 
    casejumpeq     #8160      i64 0
    push           4          i64 
    casejumpeq     #8161      i64 0
    push           5          i64 
    casejumpeq     #8162      i64 0
    push           7          i64 
    casejumpeq     #8163      i64 0
    push           8          i64 
    casejumpeq     #8164      i64 0
    popstack                  i64 
    jump           #8165      
#8158: 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    jump           #8166      
#8159: 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callproc       &pc_stackmcl.freexreg 
    jump           #8166      
#8160: 
    jump           #8166      
#8161: 
    jump           #8166      
#8162: 
    jump           #8166      
#8163: 
    jump           #8166      
#8164: 
    jump           #8166      
#8165: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "POPARG:"  u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pci_mcl.locnames 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "****POPARG?" u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   2 0
    push           &pci_mcl.locnames 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    push           "poparg? #" u64 
    callproc       &pc_libmcl.merror 
#8166: 
    push           &pci_mcl.noperands 
    decr                      i64 1
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    pop            pci_mcl.pclstack u64 
#8167: 
    retproc                   
End


Proc pc_stackmcl.pushslots:
    param          pc_stackmcl.pushslots.nslots i64 
    procentry                 
    setargs                   1 0
    push           pc_stackmcl.pushslots.nslots i64 
    push           8          i64 
    mul                       i64 
    callproc       &pc_stackmcl.pushstack 
    push           &pci_mcl.mstackdepth 
    push           pc_stackmcl.pushslots.nslots i64 
    addto                     i64 
#8169: 
    retproc                   
End


Proc pc_stackmcl.popslots:
    param          pc_stackmcl.popslots.nslots i64 
    procentry                 
    setargs                   1 0
    push           pc_stackmcl.popslots.nslots i64 
    push           8          i64 
    mul                       i64 
    callproc       &pc_stackmcl.popstack 
    push           &pci_mcl.mstackdepth 
    push           pc_stackmcl.popslots.nslots i64 
    subto                     i64 
#8171: 
    retproc                   
End


Proc pc_stackmcl.pushstack:
    param          pc_stackmcl.pushstack.n i64 
    procentry                 
    push           pc_stackmcl.pushstack.n i64 
    jumpfalse      #8173      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.pushstack.n i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pci_mcl.dstackopnd u64 
    push           30         i64 
    callproc       &pc_libmcl.genmc 
#8173: 
#8174: 
    retproc                   
End


Proc pc_stackmcl.popstack:
    param          pc_stackmcl.popstack.n i64 
    procentry                 
    push           pc_stackmcl.popstack.n i64 
    jumpfalse      #8176      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.popstack.n i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pci_mcl.dstackopnd u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
#8176: 
#8177: 
    retproc                   
End


Proc pc_stackmcl.saveopnd:
    param          pc_stackmcl.saveopnd.n i64 
    local          pc_stackmcl.saveopnd.reg i64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.saveopnd.n i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8179      i64 0
    push           2          i64 
    casejumpeq     #8180      i64 0
    push           3          i64 
    casejumpeq     #8181      i64 0
    push           7          i64 
    casejumpeq     #8182      i64 0
    push           8          i64 
    casejumpeq     #8182      i64 0
    push           4          i64 
    casejumpeq     #8183      i64 0
    popstack                  i64 
    jump           #8184      
#8179: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.saveopnd.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_stackmcl.saveopnd.reg i64 
    push           pc_stackmcl.saveopnd.reg i64 
    push           1          i64 
    push           3          i64 
    jumpnotinrange #8185      i64 
    setargs                   1 0
    push           pc_stackmcl.saveopnd.n i64 
    callproc       &pc_stackmcl.pushopnd 
#8185: 
    jump           #8186      
#8180: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.saveopnd.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_stackmcl.saveopnd.reg i64 
    push           pc_stackmcl.saveopnd.reg i64 
    push           1          i64 
    push           6          i64 
    jumpnotinrange #8187      i64 
    setargs                   1 0
    push           pc_stackmcl.saveopnd.n i64 
    callproc       &pc_stackmcl.pushopnd 
#8187: 
    jump           #8186      
#8181: 
    jump           #8186      
#8182: 
    jump           #8186      
#8183: 
    setargs                   1 0
    push           pc_stackmcl.saveopnd.n i64 
    callproc       &pc_stackmcl.pushopnd 
    jump           #8186      
#8184: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.saveopnd.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           17         i64 
    casejumpeq     #8188      i64 0
    push           14         i64 
    casejumpeq     #8189      i64 0
    push           15         i64 
    casejumpeq     #8189      i64 0
    push           16         i64 
    casejumpeq     #8189      i64 0
    popstack                  i64 
    jump           #8190      
#8188: 
    setargs                   1 0
    push           pc_stackmcl.saveopnd.n i64 
    callproc       &pc_stackmcl.pushopnd 
    jump           #8191      
#8189: 
    setargs                   1 0
    push           pc_stackmcl.saveopnd.n i64 
    callproc       &pc_stackmcl.pushopnd 
    jump           #8191      
#8190: 
    setargs                   2 0
    push           &pci_mcl.fmtnames 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.saveopnd.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u64 8 0
    push           "Can't save opnd: #" u64 
    callproc       &pc_libmcl.merror 
#8191: 
#8186: 
#8192: 
    retproc                   
End


Proc pc_stackmcl.saveallopnds:
    param          pc_stackmcl.saveallopnds.n i64 
    local          pc_stackmcl.saveallopnds.i i64 
    procentry                 
#8194: 
    push           pci_mcl.noperands i64 
    pop            pc_stackmcl.saveallopnds.i i64 
    push           pc_stackmcl.saveallopnds.i i64 
    push           pc_stackmcl.saveallopnds.n i64 
    jumplt         #8195      i64 
#8196: 
    setargs                   1 0
    push           pc_stackmcl.saveallopnds.i i64 
    callproc       &pc_stackmcl.saveopnd 
#8197: 
    fordown        #8196      i64 1
    opnd           pc_stackmcl.saveallopnds.i 
    opnd           pc_stackmcl.saveallopnds.n 
#8195: 
#8198: 
    retproc                   
End


Proc pc_stackmcl.movetoreg:
    param          pc_stackmcl.movetoreg.newreg i64 
    local          pc_stackmcl.movetoreg.oldreg i64 
    procentry                 
    setargs                   2 0
    push           0          i64 
    push           1          i64 
    callproc       &pc_stackmcl.loadopnd 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_stackmcl.movetoreg.oldreg i64 
    push           pc_stackmcl.movetoreg.oldreg i64 
    push           pc_stackmcl.movetoreg.newreg i64 
    jumpne         #8200      i64 
    jump           #8201      
#8200: 
    push           &pci_mcl.regset 
    push           pc_stackmcl.movetoreg.newreg i64 
    pushptroff                u8 1 -1
    jumpfalse      #8202      i64 
    setargs                   2 0
    push           ""         u64 
    push           "movereg/reg in use" u64 
    callproc       &pc_libmcl.merror 
#8202: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.movetoreg.oldreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.movetoreg.newreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_stackmcl.movetoreg.oldreg i64 
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_stackmcl.movetoreg.oldreg i64 
    popptroff                 u8 1 -1
    push           pc_stackmcl.movetoreg.newreg i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    push           1          i64 
    push           &pci_mcl.regset 
    push           pc_stackmcl.movetoreg.newreg i64 
    popptroff                 u8 1 -1
    push           pc_stackmcl.movetoreg.newreg i64 
    push           11         i64 
    jumplt         #8203      i64 
    push           &pci_mcl.inf_highreg 
    push           pc_stackmcl.movetoreg.newreg i64 
    maxto                     i64 
#8203: 
#8201: 
    retproc                   
End


Proc pc_stackmcl.swapopnds:
    param          pc_stackmcl.swapopnds.m i64 
    param          pc_stackmcl.swapopnds.n i64 
    local          pc_stackmcl.swapopnds.t block:15 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.swapopnds.m i64 
    pushptroff                block:15 15 -15
    pop            pc_stackmcl.swapopnds.t block:15 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.swapopnds.n i64 
    pushptroff                block:15 15 -15
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.swapopnds.m i64 
    popptroff                 block:15 15 -15
    push           pc_stackmcl.swapopnds.t block:15 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.swapopnds.n i64 
    popptroff                 block:15 15 -15
#8205: 
    retproc                   
End


Proc pc_stackmcl.swapopndregs:
    param          pc_stackmcl.swapopndregs.reg2 i64 
    local          pc_stackmcl.swapopndregs.reg1 i64 
    local          pc_stackmcl.swapopndregs.i i64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_stackmcl.swapopndregs.reg1 i64 
#8207: 
    push           2          i64 
    pop            pc_stackmcl.swapopndregs.i i64 
    push           pci_mcl.noperands i64 
    push           2          i64 
    jumplt         #8208      i64 
#8209: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.swapopndregs.i i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8210      i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.swapopndregs.i i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    push           pc_stackmcl.swapopndregs.reg2 i64 
    jumpne         #8210      i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    addrefoff                 u64 1 0
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    addrefoff                 u64 1 0
    swap                      u8 
    jump           #8211      
#8210: 
#8212: 
    forup          #8209      i64 1
    opnd           pc_stackmcl.swapopndregs.i 
    opnd           pci_mcl.noperands 
#8208: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           pci_mcl.procdef u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           ""         u64 
    push           "swapopndregs/reg not found" u64 
    callproc       &pc_libmcl.merror 
#8213: 
#8211: 
    retproc                   
End


Proc pc_stackmcl.showopndstack:
    procentry                 
    setargs                   1 0
    setargs                   1 0
    push           1          i64 
    callfn         &pc_stackmcl.stropndstack u64 
    callproc       &pc_libmcl.mgencomment 
#8215: 
    retproc                   
End


Proc pc_genss.genss:
    local          pc_genss.genss.index i64 
    local          pc_genss.genss.m u64 
    procentry                 
    setargs                   1 0
    push           pci_mcl.mlabelno i64 
    callproc       &pc_genss.initlib 
    push           0          i64 
    pop            pci_mcl.ss_zdatalen i64 
    setargs                   1 0
    push           1024       i64 
    callfn         &pc_genss.buffercreate u64 
    pop            pci_mcl.ss_zdata u64 
    setargs                   1 0
    push           1024       i64 
    callfn         &pc_genss.buffercreate u64 
    pop            pci_mcl.ss_idata u64 
    setargs                   1 0
    push           1024       i64 
    callfn         &pc_genss.buffercreate u64 
    pop            pci_mcl.ss_code u64 
    push           0          u64 
    pop            pci_mcl.ss_idatarelocs u64 
    push           0          u64 
    pop            pci_mcl.ss_coderelocs u64 
    push           0          i64 
    pop            pci_mcl.ss_nsymbols i64 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_genss.switchseg 
    push           9999       i64 
    pop            pci_mcl.alineno i64 
    push           0          u64 
    pop            pc_genss.extraparam u64 
    setargs                   0 0
    callproc       &pc_genss.fixregvar 
    push           pci_mcl.mccode u64 
    pop            pc_genss.genss.m u64 
    push           0          i64 
    pop            pc_genss.genss.index i64 
    jump           #8217      
#8218: 
    setargs                   2 0
    push           &pc_genss.genss.index 
    incrload                  i64 1
    push           pc_genss.genss.m u64 
    callproc       &pc_genss.doinstr 
    push           pc_genss.genss.m u64 
    pushptr                   u64 
    pop            pc_genss.genss.m u64 
#8217: 
    push           pc_genss.genss.m u64 
    jumptrue       #8218      u64 
#8219: 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_genss.switchseg 
    setargs                   1 0
    push           pci_mcl.ss_zdata u64 
    callfn         &pc_genss.bufferlength i64 
    jumpfalse      #8220      i64 
    setargs                   1 0
    push           "Zdata contains code or data" u64 
    callproc       &pci_mcl.axerror 
#8220: 
#8221: 
    retproc                   
End


Proc pc_genss.doinstr:
    param          pc_genss.doinstr.m u64 
    param          pc_genss.doinstr.index i64 
    local          pc_genss.doinstr.a u64 
    local          pc_genss.doinstr.b u64 
    local          pc_genss.doinstr.d u64 
    local          pc_genss.doinstr.e u64 
    local          pc_genss.doinstr.x i64 
    local          pc_genss.doinstr.offset i64 
    local          pc_genss.doinstr.shortjmp i64 
    local          pc_genss.doinstr.n i64 
    local          pc_genss.doinstr.av_1 i64 
    local          pc_genss.doinstr.av_2 i64 
    procentry                 
    setargs                   2 0
    push           1024       i64 
    push           pc_genss.currdata u64 
    callproc       &pc_genss.buffercheck 
    push           0          i64 
    store          pc_genss.f3override i64 
    store          pc_genss.f2override i64 
    store          pc_genss.addroverride i64 
    store          pc_genss.sizeoverride i64 
    pop            pc_genss.rex i64 
    push           pc_genss.doinstr.m u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_genss.doinstr.a u64 
    push           pc_genss.doinstr.m u64 
    push           16         
    pushptroff                u64 1 0
    pop            pc_genss.doinstr.b u64 
    push           &pc_genss.instrno 
    incr                      i64 1
    push           pc_genss.instrno i64 
    pop            pci_mcl.alineno i64 
    push           pc_genss.doinstr.m u64 
    pop            pc_genss.currmcl u64 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    switch         #8223      1 148
    opnd           #8224      
#8223: 
    switchlabel    #8225      
    switchlabel    #8226      
    switchlabel    #8227      
    switchlabel    #8228      
    switchlabel    #8229      
    switchlabel    #8230      
    switchlabel    #8231      
    switchlabel    #8232      
    switchlabel    #8233      
    switchlabel    #8234      
    switchlabel    #8235      
    switchlabel    #8236      
    switchlabel    #8237      
    switchlabel    #8238      
    switchlabel    #8239      
    switchlabel    #8240      
    switchlabel    #8241      
    switchlabel    #8242      
    switchlabel    #8243      
    switchlabel    #8244      
    switchlabel    #8245      
    switchlabel    #8246      
    switchlabel    #8247      
    switchlabel    #8224      
    switchlabel    #8248      
    switchlabel    #8249      
    switchlabel    #8250      
    switchlabel    #8251      
    switchlabel    #8252      
    switchlabel    #8252      
    switchlabel    #8252      
    switchlabel    #8252      
    switchlabel    #8253      
    switchlabel    #8253      
    switchlabel    #8254      
    switchlabel    #8224      
    switchlabel    #8253      
    switchlabel    #8253      
    switchlabel    #8252      
    switchlabel    #8252      
    switchlabel    #8252      
    switchlabel    #8255      
    switchlabel    #8252      
    switchlabel    #8256      
    switchlabel    #8256      
    switchlabel    #8256      
    switchlabel    #8256      
    switchlabel    #8256      
    switchlabel    #8256      
    switchlabel    #8256      
    switchlabel    #8253      
    switchlabel    #8253      
    switchlabel    #8257      
    switchlabel    #8257      
    switchlabel    #8258      
    switchlabel    #8259      
    switchlabel    #8260      
    switchlabel    #8261      
    switchlabel    #8262      
    switchlabel    #8263      
    switchlabel    #8263      
    switchlabel    #8264      
    switchlabel    #8265      
    switchlabel    #8265      
    switchlabel    #8265      
    switchlabel    #8265      
    switchlabel    #8265      
    switchlabel    #8264      
    switchlabel    #8264      
    switchlabel    #8264      
    switchlabel    #8264      
    switchlabel    #8266      
    switchlabel    #8267      
    switchlabel    #8268      
    switchlabel    #8269      
    switchlabel    #8268      
    switchlabel    #8269      
    switchlabel    #8268      
    switchlabel    #8268      
    switchlabel    #8270      
    switchlabel    #8271      
    switchlabel    #8272      
    switchlabel    #8273      
    switchlabel    #8274      
    switchlabel    #8275      
    switchlabel    #8276      
    switchlabel    #8277      
    switchlabel    #8278      
    switchlabel    #8278      
    switchlabel    #8224      
    switchlabel    #8224      
    switchlabel    #8279      
    switchlabel    #8279      
    switchlabel    #8279      
    switchlabel    #8280      
    switchlabel    #8280      
    switchlabel    #8280      
    switchlabel    #8281      
    switchlabel    #8281      
    switchlabel    #8281      
    switchlabel    #8281      
    switchlabel    #8282      
    switchlabel    #8282      
    switchlabel    #8282      
    switchlabel    #8282      
    switchlabel    #8282      
    switchlabel    #8282      
    switchlabel    #8282      
    switchlabel    #8282      
    switchlabel    #8265      
    switchlabel    #8265      
    switchlabel    #8264      
    switchlabel    #8264      
    switchlabel    #8283      
    switchlabel    #8284      
    switchlabel    #8285      
    switchlabel    #8286      
    switchlabel    #8287      
    switchlabel    #8288      
    switchlabel    #8289      
    switchlabel    #8290      
    switchlabel    #8291      
    switchlabel    #8292      
    switchlabel    #8293      
    switchlabel    #8293      
    switchlabel    #8293      
    switchlabel    #8293      
    switchlabel    #8294      
    switchlabel    #8295      
    switchlabel    #8295      
    switchlabel    #8295      
    switchlabel    #8296      
    switchlabel    #8297      
    switchlabel    #8298      
    switchlabel    #8299      
    switchlabel    #8300      
    switchlabel    #8301      
    switchlabel    #8302      
    switchlabel    #8303      
    switchlabel    #8304      
    switchlabel    #8305      
    switchlabel    #8305      
    switchlabel    #8305      
    switchlabel    #8305      
    switchlabel    #8305      
    switchlabel    #8305      
    switchlabel    #8305      
    switchlabel    #8234      
    endswitch                 
#8225: 
    jump           #8306      
#8226: 
    jump           #8306      
#8231: 
    jump           #8306      
#8232: 
    jump           #8306      
#8229: 
    push           &pc_genss.ndeleted 
    incr                      i64 1
    jump           #8306      
#8230: 
    push           pc_genss.doinstr.a u64 
    push           12         
    pushptroff                u8 1 0
    push           4          i64 
    casejumpeq     #8307      i64 0
    push           5          i64 
    casejumpeq     #8308      i64 0
    popstack                  i64 
    jump           #8309      
#8307: 
    jump           #8310      
#8308: 
    push           pc_genss.doinstr.a u64 
    pushptr                   u64 
    pop            pc_genss.doinstr.d u64 
    push           2          i64 
    push           pc_genss.doinstr.d u64 
    push           29         
    popptroff                 u8 1 0
    push           pc_genss.currseg i64 
    push           pc_genss.doinstr.d u64 
    push           30         
    popptroff                 u8 1 0
    setargs                   1 0
    push           6          i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           pc_genss.doinstr.d u64 
    push           32         
    popptroff                 i32 1 0
    push           pc_genss.doinstr.d u64 
    push           46         
    pushptroff                u16 1 0
    push           3          i64 
    dotindex                  i64 
    jumpfalse      #8311      u64 
    setargs                   1 0
    push           pc_genss.doinstr.d u64 
    callproc       &pc_genss.getstindex 
#8311: 
    setargs                   1 0
    push           pc_genss.doinstr.d u64 
    callproc       &pc_genss.dofwdrefs 
    jump           #8310      
#8309: 
#8310: 
    jump           #8306      
#8233: 
    push           pci_mcl.labeldeftable u64 
    push           pc_genss.doinstr.a u64 
    pushptr                   i64 
    pushptroff                u64 8 -8
    pop            pc_genss.doinstr.d u64 
    push           2          i64 
    push           pc_genss.doinstr.d u64 
    push           29         
    popptroff                 u8 1 0
    push           pc_genss.currseg i64 
    push           pc_genss.doinstr.d u64 
    push           30         
    popptroff                 u8 1 0
    setargs                   1 0
    push           6          i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           pc_genss.doinstr.d u64 
    push           32         
    popptroff                 i32 1 0
    setargs                   1 0
    push           pc_genss.doinstr.d u64 
    callproc       &pc_genss.dofwdrefs 
    jump           #8306      
#8246: 
    setargs                   1 0
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_call 
    jump           #8306      
#8249: 
    setargs                   2 0
    push           pc_genss.doinstr.m u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_jmp 
    jump           #8306      
#8250: 
    setargs                   2 0
    push           1          i64 
    push           pc_genss.doinstr.a u64 
    callfn         &pc_genss.getdef u64 
    pop            pc_genss.doinstr.d u64 
    setargs                   2 0
    setargs                   1 0
    push           7          i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           1          i64 
    add                       i64 
    push           pc_genss.doinstr.d u64 
    callfn         &pc_genss.getrel32 i64 
    pop            pc_genss.doinstr.offset i64 
    push           pc_genss.doinstr.offset i64 
    push           0          i64 
    jumpge         #8312      i64 
    push           pc_genss.doinstr.offset i64 
    push           -126       i64 
    jumpge         #8313      i64 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           128        i64 
    push           pc_genss.doinstr.m u64 
    push           25         
    pushptroff                u8 1 0
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.doinstr.offset i64 
    push           4          i64 
    sub                       i64 
    callproc       &pc_genss.gendword 
    jump           #8314      
#8313: 
    setargs                   1 0
    push           112        i64 
    push           pc_genss.doinstr.m u64 
    push           25         
    pushptroff                u8 1 0
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.doinstr.offset i64 
    callproc       &pc_genss.genbyte 
#8314: 
    jump           #8315      
#8312: 
    setargs                   2 0
    push           pc_genss.doinstr.d u64 
    push           pc_genss.doinstr.m u64 
    callfn         &pc_genss.checkshortjump i64 
    pop            pc_genss.doinstr.shortjmp i64 
    push           pc_genss.doinstr.shortjmp i64 
    jumptrue       #8316      i64 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           128        i64 
    push           pc_genss.doinstr.m u64 
    push           25         
    pushptroff                u8 1 0
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.genrel32 
    jump           #8317      
#8316: 
    setargs                   1 0
    push           112        i64 
    push           pc_genss.doinstr.m u64 
    push           25         
    pushptroff                u8 1 0
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.genrel8 
#8317: 
#8315: 
    jump           #8306      
#8283: 
    setargs                   2 0
    push           1          i64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.genopnd 
    jump           #8306      
#8284: 
    setargs                   2 0
    push           2          i64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.genopnd 
    jump           #8306      
#8285: 
    setargs                   2 0
    push           4          i64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.genopnd 
    jump           #8306      
#8286: 
    setargs                   2 0
    push           8          i64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.genopnd 
    jump           #8306      
#8287: 
    setargs                   1 0
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.genrel32 
    jump           #8306      
#8288: 
    setargs                   1 0
    push           pc_genss.doinstr.a u64 
    pushptr                   i64 
    callproc       &pc_genss.switchseg 
    jump           #8306      
#8291: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_genss.switchseg 
    jump           #8306      
#8289: 
    setargs                   1 0
    push           2          i64 
    callproc       &pc_genss.switchseg 
    jump           #8306      
#8290: 
    setargs                   1 0
    push           3          i64 
    callproc       &pc_genss.switchseg 
    jump           #8306      
#8234: 
    setargs                   1 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    callproc       &pc_genss.genbyte 
    jump           #8306      
#8258: 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           152        i64 
    callproc       &pc_genss.genbyte 
    jump           #8306      
#8259: 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           153        i64 
    callproc       &pc_genss.genbyte 
    jump           #8306      
#8260: 
    setargs                   1 0
    push           153        i64 
    callproc       &pc_genss.genbyte 
    jump           #8306      
#8261: 
    setargs                   1 0
    push           72         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           153        i64 
    callproc       &pc_genss.genbyte 
    jump           #8306      
#8247: 
    setargs                   1 0
    push           195        i64 
    callproc       &pc_genss.genbyte 
    jump           #8306      
#8248: 
    push           pc_genss.doinstr.a u64 
    push           9          
    pushptroff                u8 1 0
    push           2          i64 
    jumpeq         #8318      i64 
    setargs                   1 0
    push           "retn?"    u64 
    callproc       &pci_mcl.axerror 
#8318: 
    setargs                   1 0
    push           194        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.doinstr.a u64 
    pushptr                   i64 
    callproc       &pc_genss.genword 
    jump           #8306      
#8237: 
    setargs                   1 0
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_push 
    jump           #8306      
#8238: 
    setargs                   1 0
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_pop 
    jump           #8306      
#8257: 
    setargs                   2 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_inc 
    jump           #8306      
#8253: 
    setargs                   2 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_neg 
    jump           #8306      
#8252: 
    setargs                   3 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_arith 
    jump           #8306      
#8236: 
    setargs                   2 0
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_mov 
    jump           #8306      
#8239: 
    setargs                   2 0
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_lea 
    jump           #8306      
#8243: 
    setargs                   3 0
    push           190        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_movsx 
    jump           #8306      
#8244: 
    setargs                   3 0
    push           182        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_movsx 
    jump           #8306      
#8245: 
    setargs                   2 0
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_movsxd 
    jump           #8306      
#8251: 
    setargs                   2 0
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_exch 
    jump           #8306      
#8254: 
    setargs                   2 0
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_imul2 
    jump           #8306      
#8293: 
    push           pc_genss.doinstr.a u64 
    push           9          
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #8319      i64 
    push           pc_genss.doinstr.a u64 
    pushptr                   i64 
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    mul                       i64 
    pop            pc_genss.doinstr.n i64 
    push           pc_genss.currseg i64 
    push           1          i64 
    casejumpeq     #8320      i64 0
    push           2          i64 
    casejumpeq     #8321      i64 0
    popstack                  i64 
    jump           #8322      
#8320: 
#8323: 
    push           pc_genss.doinstr.n i64 
    pop            pc_genss.doinstr.av_1 i64 
    push           pc_genss.doinstr.av_1 i64 
    push           0          i64 
    jumple         #8324      i64 
#8325: 
    setargs                   1 0
    push           144        i64 
    callproc       &pc_genss.genbyte 
#8326: 
    to             #8325      
    opnd           pc_genss.doinstr.av_1 
#8324: 
    jump           #8327      
#8321: 
#8328: 
    push           pc_genss.doinstr.n i64 
    pop            pc_genss.doinstr.av_2 i64 
    push           pc_genss.doinstr.av_2 i64 
    push           0          i64 
    jumple         #8329      i64 
#8330: 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_genss.genbyte 
#8331: 
    to             #8330      
    opnd           pc_genss.doinstr.av_2 
#8329: 
    jump           #8327      
#8322: 
    push           &pci_mcl.ss_zdatalen 
    push           pc_genss.doinstr.n i64 
    addto                     i64 
#8327: 
    jump           #8332      
#8319: 
    setargs                   1 0
    push           "resb?"    u64 
    callproc       &pci_mcl.axerror 
#8332: 
    jump           #8306      
#8292: 
    push           pc_genss.doinstr.a u64 
    push           9          
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #8333      i64 
    push           pc_genss.doinstr.a u64 
    pushptr                   i64 
    pop            pc_genss.doinstr.x i64 
    push           pc_genss.doinstr.x i64 
    push           1          i64 
    jumplt         #8334      i64 
    push           pc_genss.doinstr.x i64 
    push           16384      i64 
    jumple         #8335      i64 
#8334: 
    setargs                   1 0
    push           "align2"   u64 
    callproc       &pci_mcl.axerror 
#8335: 
    push           pc_genss.currseg i64 
    push           3          i64 
    jumpeq         #8336      i64 
    jump           #8337      
#8338: 
    setargs                   1 0
    startmult                 
    push           pc_genss.currseg i64 
    push           1          i64 
    jumpne         #8339      i64 
    push           144        i64 
    resetmult                 
    jump           #8340      
#8339: 
    push           0          i64 
    endmult                   
#8340: 
    callproc       &pc_genss.genbyte 
#8337: 
    setargs                   1 0
    push           pc_genss.currdata u64 
    callfn         &pc_genss.bufferlength i64 
    push           pc_genss.doinstr.x i64 
    irem                      i64 
    jumptrue       #8338      i64 
#8341: 
    jump           #8342      
#8336: 
    jump           #8343      
#8344: 
    push           &pci_mcl.ss_zdatalen 
    incr                      i64 1
#8343: 
    push           pci_mcl.ss_zdatalen i64 
    push           pc_genss.doinstr.x i64 
    irem                      i64 
    jumptrue       #8344      i64 
#8345: 
#8342: 
    jump           #8346      
#8333: 
    setargs                   1 0
    push           "align?"   u64 
    callproc       &pci_mcl.axerror 
#8346: 
    jump           #8306      
#8256: 
    setargs                   3 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_shift 
    jump           #8306      
#8255: 
    setargs                   2 0
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_test 
    jump           #8306      
#8295: 
    setargs                   2 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_loop 
    jump           #8306      
#8296: 
    setargs                   2 0
    push           4          i64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_jcxz 
    jump           #8306      
#8297: 
    setargs                   2 0
    push           8          i64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_jcxz 
    jump           #8306      
#8294: 
    setargs                   1 0
    push           215        i64 
    callproc       &pc_genss.genbyte 
    jump           #8306      
#8262: 
    setargs                   2 0
    push           pc_genss.doinstr.a u64 
    push           pc_genss.doinstr.m u64 
    push           25         
    pushptroff                u8 1 0
    callproc       &pc_genss.do_setcc 
    jump           #8306      
#8241: 
    setargs                   3 0
    push           4          i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_movxmm 
    jump           #8306      
#8242: 
    setargs                   3 0
    push           8          i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_movxmm 
    jump           #8306      
#8265: 
    setargs                   4 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           243        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_arithxmm 
    jump           #8306      
#8264: 
    setargs                   4 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           242        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_arithxmm 
    jump           #8306      
#8269: 
    setargs                   4 0
    push           4          i64 
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_logicxmm 
    jump           #8306      
#8268: 
    setargs                   4 0
    push           8          i64 
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_logicxmm 
    jump           #8306      
#8266: 
    setargs                   4 0
    push           47         i64 
    push           0          i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_arithxmm 
    jump           #8306      
#8267: 
    setargs                   4 0
    push           47         i64 
    push           102        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_arithxmm 
    jump           #8306      
#8277: 
    setargs                   3 0
    push           243        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_convertfloat 
    jump           #8306      
#8276: 
    setargs                   3 0
    push           242        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_convertfloat 
    jump           #8306      
#8270: 
    setargs                   4 0
    push           45         i64 
    push           243        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_fix 
    jump           #8306      
#8271: 
    setargs                   4 0
    push           45         i64 
    push           242        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_fix 
    jump           #8306      
#8272: 
    setargs                   4 0
    push           44         i64 
    push           243        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_fix 
    jump           #8306      
#8273: 
    setargs                   4 0
    push           44         i64 
    push           242        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_fix 
    jump           #8306      
#8274: 
    setargs                   3 0
    push           243        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_float 
    jump           #8306      
#8275: 
    setargs                   3 0
    push           242        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_float 
    jump           #8306      
#8235: 
    push           pc_genss.doinstr.a u64 
    pop            pc_genss.extraparam u64 
    jump           #8306      
#8240: 
    setargs                   3 0
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    push           pc_genss.doinstr.m u64 
    push           25         
    pushptroff                u8 1 0
    callproc       &pc_genss.do_cmovcc 
    jump           #8306      
#8282: 
    setargs                   1 0
    push           217        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    callproc       &pc_genss.genbyte 
    jump           #8306      
#8279: 
    setargs                   3 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           1          i64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_fmem 
    jump           #8306      
#8280: 
    setargs                   3 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           0          i64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_fmem 
    jump           #8306      
#8281: 
    setargs                   1 0
    push           222        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    callproc       &pc_genss.genbyte 
    jump           #8306      
#8298: 
    setargs                   1 0
    push           166        i64 
    callproc       &pc_genss.genbyte 
    jump           #8306      
#8299: 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           167        i64 
    callproc       &pc_genss.genbyte 
    jump           #8306      
#8300: 
    setargs                   1 0
    push           167        i64 
    callproc       &pc_genss.genbyte 
    jump           #8306      
#8301: 
    setargs                   1 0
    push           72         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           167        i64 
    callproc       &pc_genss.genbyte 
    jump           #8306      
#8302: 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    callproc       &pc_genss.genbyte 
    jump           #8306      
#8278: 
    setargs                   3 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_movdqx 
    jump           #8306      
#8304: 
    setargs                   1 0
    push           219        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           227        i64 
    callproc       &pc_genss.genbyte 
    jump           #8306      
#8305: 
    setargs                   1 0
    push           217        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    callproc       &pc_genss.genbyte 
    jump           #8306      
#8303: 
    setargs                   2 0
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_popcnt 
    jump           #8306      
#8263: 
    setargs                   3 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_bsf 
    jump           #8306      
#8227: 
    push           &pc_genss.ncomments 
    incr                      i64 1
    jump           #8306      
#8228: 
    push           &pc_genss.nblanks 
    incr                      i64 1
    jump           #8306      
#8224: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "*** Can't do opcode" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pci_mcl.mclnames 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "line"     u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.alineno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           "M.OPCODE=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           "M_HALT="  u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           148        i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "STOPPING" u64 
    callproc       &pci_mcl.axerror 
#8306: 
#8347: 
    retproc                   
End


Proc pc_genss.genbyte:
    param          pc_genss.genbyte.x i64 
    procentry                 
    push           pc_genss.genbyte.x i64 
    push           pc_genss.currdata u64 
    push           8          
    addrefoff                 u64 1 0
    loadincr                  u64 1
    popptr                    u8 
#8349: 
    retproc                   
End


Proc pc_genss.genword:
    param          pc_genss.genword.x i64 
    procentry                 
    setargs                   2 0
    push           pc_genss.genword.x i64 
    push           pc_genss.currdata u64 
    callproc       &pc_genss.addword 
#8351: 
    retproc                   
End


Proc pc_genss.gendword:
    param          pc_genss.gendword.x i64 
    procentry                 
    setargs                   2 0
    push           pc_genss.gendword.x i64 
    push           pc_genss.currdata u64 
    callproc       &pc_genss.adddword 
#8353: 
    retproc                   
End


Proc pc_genss.genqword:
    param          pc_genss.genqword.x i64 
    procentry                 
    setargs                   2 0
    push           pc_genss.genqword.x i64 
    push           pc_genss.currdata u64 
    callproc       &pc_genss.addqword 
#8355: 
    retproc                   
End


Proc pc_genss.genopnd:
    param          pc_genss.genopnd.a u64 
    param          pc_genss.genopnd.size i64 
    local          pc_genss.genopnd.s u64 
    local          pc_genss.genopnd.x i64 
    local          pc_genss.genopnd.length i64 
    local          pc_genss.genopnd.x32 r32 
    procentry                 
    push           pc_genss.genopnd.size i64 
    push           0          i64 
    jumpne         #8357      i64 
    push           pc_genss.genopnd.a u64 
    push           8          
    pushptroff                u8 1 0
    pop            pc_genss.genopnd.size i64 
#8357: 
    push           pc_genss.genopnd.a u64 
    push           12         
    pushptroff                u8 1 0
    push           4          i64 
    casejumpeq     #8358      i64 0
    push           8          i64 
    casejumpeq     #8359      i64 0
    popstack                  i64 
    jump           #8360      
#8358: 
    push           pc_genss.genopnd.a u64 
    pushptr                   u64 
    pop            pc_genss.genopnd.s u64 
    setargs                   1 0
    push           pc_genss.genopnd.s u64 
    callfn         &strlen    i64 
    pop            pc_genss.genopnd.length i64 
    push           pc_genss.genopnd.length i64 
    push           100        i64 
    jumple         #8361      i64 
    setargs                   2 0
    push           1024       i64 
    push           pc_genss.genopnd.length i64 
    push           1          i64 
    add                       i64 
    max                       i64 
    push           pc_genss.currdata u64 
    callproc       &pc_genss.buffercheck 
#8361: 
    jump           #8362      
#8363: 
    setargs                   1 0
    push           &pc_genss.genopnd.s 
    loadincr                  u64 1
    pushptr                   u8 
    callproc       &pc_genss.genbyte 
#8362: 
    push           pc_genss.genopnd.s u64 
    pushptr                   u8 
    jumptrue       #8363      u64 
#8364: 
    jump           #8365      
    jump           #8366      
#8359: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "GENSS/NAME OPND" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #8366      
#8360: 
#8366: 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.genopnd.a u64 
    callfn         &pc_genss.getdef u64 
    jumpfalse      #8367      u64 
    push           pc_genss.genopnd.size i64 
    push           2          i64 
    jumpgt         #8367      i64 
    setargs                   1 0
    push           "8/16-BIT RELOC" u64 
    callproc       &pci_mcl.axerror 
#8367: 
    push           pc_genss.genopnd.size i64 
    push           1          i64 
    casejumpeq     #8368      i64 0
    push           2          i64 
    casejumpeq     #8369      i64 0
    push           4          i64 
    casejumpeq     #8370      i64 0
    push           8          i64 
    casejumpeq     #8371      i64 0
    popstack                  i64 
    jump           #8372      
#8368: 
    setargs                   1 0
    push           pc_genss.genopnd.a u64 
    pushptr                   i64 
    callproc       &pc_genss.genbyte 
    jump           #8373      
#8369: 
    setargs                   1 0
    push           pc_genss.genopnd.a u64 
    pushptr                   i64 
    callproc       &pc_genss.genword 
    jump           #8373      
#8370: 
    push           pc_genss.genopnd.a u64 
    push           12         
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8374      i64 0
    push           2          i64 
    casejumpeq     #8375      i64 0
    push           3          i64 
    casejumpeq     #8376      i64 0
    push           4          i64 
    casejumpeq     #8377      i64 0
    push           5          i64 
    casejumpeq     #8378      i64 0
    push           7          i64 
    casejumpeq     #8378      i64 0
    push           8          i64 
    casejumpeq     #8379      i64 0
    popstack                  i64 
    jump           #8380      
#8374: 
    setargs                   1 0
    push           pc_genss.genopnd.a u64 
    pushptr                   i64 
    callproc       &pc_genss.gendword 
    jump           #8381      
#8375: 
    push           pc_genss.genopnd.a u64 
    pushptr                   r64 
    fnarrow                   r32 r64 
    pop            pc_genss.genopnd.x32 r32 
    setargs                   1 0
    push           pc_genss.genopnd.x32 r32 
    typepun                   i32 void 0
    callproc       &pc_genss.gendword 
    jump           #8381      
#8376: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "\t\tOPND/REALMEM4" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #8381      
#8377: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "\t\tOPND/STRINGIMM4" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #8381      
#8378: 
    setargs                   1 0
    push           pc_genss.genopnd.a u64 
    callproc       &pc_genss.genabs32 
    jump           #8381      
#8379: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "\t\tOPND/NAME4" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #8381      
#8380: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pci_mcl.valtypenames 
    push           pc_genss.genopnd.a u64 
    push           12         
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "OPND/4/VALTYPE?" u64 
    callproc       &pci_mcl.axerror 
#8381: 
    jump           #8373      
#8371: 
    push           pc_genss.genopnd.a u64 
    push           12         
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8382      i64 0
    push           2          i64 
    casejumpeq     #8383      i64 0
    push           3          i64 
    casejumpeq     #8384      i64 0
    push           4          i64 
    casejumpeq     #8385      i64 0
    push           5          i64 
    casejumpeq     #8386      i64 0
    push           7          i64 
    casejumpeq     #8386      i64 0
    push           8          i64 
    casejumpeq     #8387      i64 0
    popstack                  i64 
    jump           #8388      
#8382: 
    setargs                   1 0
    push           pc_genss.genopnd.a u64 
    pushptr                   i64 
    callproc       &pc_genss.genqword 
    jump           #8389      
#8383: 
    setargs                   1 0
    push           pc_genss.genopnd.a u64 
    pushptr                   r64 
    typepun                   i64 void 0
    callproc       &pc_genss.genqword 
    jump           #8389      
#8384: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "\t\tOPND/REALMEM8" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.alineno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #8389      
#8385: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "\t\tOPND/STRINGIMM8" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #8389      
#8386: 
    setargs                   1 0
    push           pc_genss.genopnd.a u64 
    callproc       &pc_genss.genabs64 
    jump           #8389      
#8387: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "\t\tOPND/NAME8" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #8389      
#8388: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "HERE"     u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pci_mcl.valtypenames 
    push           pc_genss.genopnd.a u64 
    push           12         
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "OPND/8/VALTYPE?" u64 
    callproc       &pci_mcl.axerror 
#8389: 
    jump           #8373      
#8372: 
#8373: 
#8365: 
    retproc                   
End


Proc pc_genss.addrelocitem:
    param          pc_genss.addrelocitem.reloctype i64 
    param          pc_genss.addrelocitem.d u64 
    local          pc_genss.addrelocitem.r u64 
    local          pc_genss.addrelocitem.stindex i64 
    local          pc_genss.addrelocitem.adjust i64 
    procentry                 
    setargs                   1 0
    push           pc_genss.addrelocitem.d u64 
    callfn         &pc_genss.getstindex i64 
    pop            pc_genss.addrelocitem.stindex i64 
    push           4          i64 
    pop            pc_genss.addrelocitem.adjust i64 
    push           pc_genss.addrelocitem.reloctype i64 
    push           1          i64 
    jumpne         #8391      i64 
    push           8          i64 
    pop            pc_genss.addrelocitem.adjust i64 
#8391: 
    setargs                   1 0
    push           32         i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pc_genss.addrelocitem.r u64 
    push           pc_genss.currrelocs u64 
    push           pc_genss.addrelocitem.r u64 
    push           0          
    popptroff                 u64 1 0
    push           pc_genss.addrelocitem.reloctype i64 
    push           pc_genss.addrelocitem.r u64 
    push           8          
    popptroff                 i64 1 0
    setargs                   1 0
    push           1          i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           pc_genss.addrelocitem.adjust i64 
    sub                       i64 
    push           pc_genss.addrelocitem.r u64 
    push           16         
    popptroff                 i64 1 0
    push           pc_genss.addrelocitem.stindex i64 
    push           pc_genss.addrelocitem.r u64 
    push           24         
    popptroff                 i64 1 0
    push           &pc_genss.nrelocs 
    incr                      i64 1
    push           pc_genss.addrelocitem.r u64 
    pop            pc_genss.currrelocs u64 
#8392: 
    retproc                   
End


Proc pc_genss.getstindex: i64
    param          pc_genss.getstindex.d u64 
    procentry                 
    push           pc_genss.getstindex.d u64 
    push           36         
    pushptroff                i32 1 0
    push           0          i64 
    jumpne         #8394      i64 
    push           pci_mcl.ss_nsymbols i64 
    push           pci_mcl.ss_symboltablesize i64 
    jumplt         #8395      i64 
    setargs                   0 0
    callproc       &pc_genss.extendsymboltable 
#8395: 
    push           &pci_mcl.ss_nsymbols 
    incrload                  i64 1
    push           pc_genss.getstindex.d u64 
    push           36         
    popptroff                 i32 1 0
    push           pc_genss.getstindex.d u64 
    push           pci_mcl.ss_symboltable u64 
    push           pc_genss.getstindex.d u64 
    push           36         
    pushptroff                i32 1 0
    popptroff                 u64 8 -8
    push           pc_genss.getstindex.d u64 
    push           30         
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #8396      i64 
    push           pc_genss.getstindex.d u64 
    push           46         
    pushptroff                u16 1 0
    push           1          i64 
    dotindex                  i64 
    jumpfalse      #8397      u64 
    push           1          i64 
    push           pc_genss.getstindex.d u64 
    push           30         
    popptroff                 u8 1 0
#8397: 
#8396: 
#8394: 
    push           pc_genss.getstindex.d u64 
    push           36         
    pushptroff                i32 1 0
    setret                    i64 
    jump           #8398      
#8398: 
    retfn                     i64 
End


Proc pc_genss.genrel32:
    param          pc_genss.genrel32.a u64 
    local          pc_genss.genrel32.d u64 
    procentry                 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.genrel32.a u64 
    callfn         &pc_genss.getdef u64 
    pop            pc_genss.genrel32.d u64 
    push           pc_genss.genrel32.d u64 
    push           0          u64 
    jumpne         #8400      u64 
    setargs                   1 0
    push           pc_genss.genrel32.a u64 
    pushptr                   i64 
    callproc       &pc_genss.gendword 
    jump           #8401      
#8400: 
    push           pc_genss.genrel32.d u64 
    push           29         
    pushptroff                u8 1 0
    push           2          i64 
    casejumpeq     #8402      i64 0
    push           1          i64 
    casejumpeq     #8403      i64 0
    popstack                  i64 
    jump           #8404      
#8402: 
    push           pc_genss.genrel32.d u64 
    push           30         
    pushptroff                u8 1 0
    push           pc_genss.currseg i64 
    jumpeq         #8405      i64 
    setargs                   1 0
    push           "Rel label across segments" u64 
    callproc       &pci_mcl.axerror 
#8405: 
    setargs                   1 0
    push           pc_genss.genrel32.d u64 
    push           32         
    pushptroff                i32 1 0
    setargs                   1 0
    push           2          i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           4          i64 
    add                       i64 
    sub                       i64 
    push           pc_genss.genrel32.a u64 
    push           14         
    pushptroff                i32 1 0
    add                       i64 
    callproc       &pc_genss.gendword 
    jump           #8406      
#8403: 
    setargs                   4 0
    push           0          i64 
    push           4          i64 
    setargs                   1 0
    push           3          i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           pc_genss.genrel32.d u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_genss.addfwdref u64 
    push           pc_genss.genrel32.d u64 
    push           8          
    popptroff                 u64 1 0
    setargs                   1 0
    push           pc_genss.genrel32.a u64 
    push           14         
    pushptroff                i32 1 0
    callproc       &pc_genss.gendword 
    jump           #8406      
#8404: 
    setargs                   1 0
    push           pc_genss.genrel32.a u64 
    push           14         
    pushptroff                i32 1 0
    callproc       &pc_genss.gendword 
    setargs                   2 0
    push           pc_genss.genrel32.d u64 
    push           4          i64 
    callproc       &pc_genss.addrelocitem 
#8406: 
#8401: 
    retproc                   
End


Proc pc_genss.getdef: u64
    param          pc_genss.getdef.a u64 
    param          pc_genss.getdef.dneeded i64 
    local          pc_genss.getdef.d u64 
    procentry                 
    push           pc_genss.getdef.a u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    setjumpeq      #8408      i64 
    push           2          i64 
    setjumpne      #8409      i64 
#8408: 
    push           pc_genss.getdef.a u64 
    push           12         
    pushptroff                u8 1 0
    push           7          i64 
    casejumpeq     #8410      i64 0
    push           5          i64 
    casejumpeq     #8411      i64 0
    popstack                  i64 
    jump           #8412      
#8410: 
    push           pci_mcl.labeldeftable u64 
    push           pc_genss.getdef.a u64 
    pushptr                   i64 
    pushptroff                u64 8 -8
    setret                    u64 
    jump           #8413      
    jump           #8414      
#8411: 
    push           pc_genss.getdef.a u64 
    pushptr                   u64 
    pop            pc_genss.getdef.d u64 
    push           pc_genss.getdef.d u64 
    push           29         
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #8415      i64 
    push           pc_genss.getdef.d u64 
    push           46         
    pushptroff                u16 1 0
    push           1          i64 
    dotindex                  i64 
    jumptrue       #8416      u64 
    push           1          i64 
    push           pc_genss.getdef.d u64 
    push           29         
    popptroff                 u8 1 0
#8416: 
#8415: 
    push           pc_genss.getdef.d u64 
    setret                    u64 
    jump           #8413      
    jump           #8414      
#8412: 
#8414: 
#8409: 
    push           pc_genss.getdef.dneeded i64 
    jumpfalse      #8417      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pci_mcl.opndnames_ma 
    push           pc_genss.getdef.a u64 
    push           9          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pci_mcl.valtypenames 
    push           pc_genss.getdef.a u64 
    push           12         
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "getdef/no def" u64 
    callproc       &pci_mcl.axerror 
#8417: 
    push           0          u64 
    setret                    u64 
    jump           #8413      
#8413: 
    retfn                     u64 
End


Proc pc_genss.genabs32:
    param          pc_genss.genabs32.a u64 
    local          pc_genss.genabs32.d u64 
    procentry                 
    setargs                   2 0
    push           1          i64 
    push           pc_genss.genabs32.a u64 
    callfn         &pc_genss.getdef u64 
    pop            pc_genss.genabs32.d u64 
    push           pc_genss.genabs32.d u64 
    push           29         
    pushptroff                u8 1 0
    push           2          i64 
    casejumpeq     #8419      i64 0
    push           1          i64 
    casejumpeq     #8420      i64 0
    popstack                  i64 
    jump           #8421      
#8419: 
    setargs                   1 0
    push           pc_genss.genabs32.d u64 
    push           32         
    pushptroff                i32 1 0
    push           pc_genss.genabs32.a u64 
    push           14         
    pushptroff                i32 1 0
    add                       i64 
    callproc       &pc_genss.gendword 
    setargs                   2 0
    push           pc_genss.genabs32.d u64 
    push           2          i64 
    callproc       &pc_genss.addrelocitem 
    jump           #8422      
#8420: 
    setargs                   4 0
    push           pc_genss.currseg i64 
    push           2          i64 
    setargs                   1 0
    push           4          i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           pc_genss.genabs32.d u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_genss.addfwdref u64 
    push           pc_genss.genabs32.d u64 
    push           8          
    popptroff                 u64 1 0
    push           pc_genss.genabs32.d u64 
    push           16         
    pushptroff                u64 1 0
    jumpfalse      #8423      u64 
    push           pc_genss.genabs32.d u64 
    push           16         
    pushptroff                u64 1 0
    push           1          
    pushptroff                u8 1 0
    push           17         i64 
    setjumpeq      #8424      i64 
    push           18         i64 
    setjumpne      #8423      i64 
#8424: 
    setargs                   1 0
    push           pc_genss.genabs32.d u64 
    push           32         
    pushptroff                i32 1 0
    push           pc_genss.genabs32.a u64 
    push           14         
    pushptroff                i32 1 0
    add                       i64 
    callproc       &pc_genss.gendword 
    jump           #8425      
#8423: 
    setargs                   1 0
    push           pc_genss.genabs32.a u64 
    push           14         
    pushptroff                i32 1 0
    callproc       &pc_genss.gendword 
    setargs                   2 0
    push           pc_genss.genabs32.d u64 
    push           2          i64 
    callproc       &pc_genss.addrelocitem 
#8425: 
    jump           #8422      
#8421: 
    setargs                   1 0
    push           pc_genss.genabs32.a u64 
    push           14         
    pushptroff                i32 1 0
    callproc       &pc_genss.gendword 
    setargs                   2 0
    push           pc_genss.genabs32.d u64 
    push           2          i64 
    callproc       &pc_genss.addrelocitem 
#8422: 
#8426: 
    retproc                   
End


Proc pc_genss.genabs64:
    param          pc_genss.genabs64.a u64 
    local          pc_genss.genabs64.d u64 
    procentry                 
    setargs                   2 0
    push           1          i64 
    push           pc_genss.genabs64.a u64 
    callfn         &pc_genss.getdef u64 
    pop            pc_genss.genabs64.d u64 
    push           pc_genss.genabs64.d u64 
    push           29         
    pushptroff                u8 1 0
    push           2          i64 
    casejumpeq     #8428      i64 0
    push           1          i64 
    casejumpeq     #8429      i64 0
    popstack                  i64 
    jump           #8430      
#8428: 
    setargs                   1 0
    push           pc_genss.genabs64.d u64 
    push           32         
    pushptroff                i32 1 0
    push           pc_genss.genabs64.a u64 
    push           14         
    pushptroff                i32 1 0
    add                       i64 
    callproc       &pc_genss.genqword 
    setargs                   2 0
    push           pc_genss.genabs64.d u64 
    push           1          i64 
    callproc       &pc_genss.addrelocitem 
    jump           #8431      
#8429: 
    setargs                   4 0
    push           pc_genss.currseg i64 
    push           1          i64 
    setargs                   1 0
    push           5          i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           pc_genss.genabs64.d u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_genss.addfwdref u64 
    push           pc_genss.genabs64.d u64 
    push           8          
    popptroff                 u64 1 0
    push           pc_genss.genabs64.d u64 
    push           16         
    pushptroff                u64 1 0
    jumpfalse      #8432      u64 
    push           pc_genss.genabs64.d u64 
    push           16         
    pushptroff                u64 1 0
    push           1          
    pushptroff                u8 1 0
    push           17         i64 
    setjumpeq      #8433      i64 
    push           18         i64 
    setjumpne      #8432      i64 
#8433: 
    setargs                   1 0
    push           pc_genss.genabs64.d u64 
    push           32         
    pushptroff                i32 1 0
    push           pc_genss.genabs64.a u64 
    push           14         
    pushptroff                i32 1 0
    add                       i64 
    callproc       &pc_genss.genqword 
    jump           #8434      
#8432: 
    setargs                   1 0
    push           pc_genss.genabs64.a u64 
    push           14         
    pushptroff                i32 1 0
    callproc       &pc_genss.genqword 
    setargs                   2 0
    push           pc_genss.genabs64.d u64 
    push           1          i64 
    callproc       &pc_genss.addrelocitem 
#8434: 
    jump           #8431      
#8430: 
    setargs                   1 0
    push           pc_genss.genabs64.a u64 
    push           14         
    pushptroff                i32 1 0
    callproc       &pc_genss.genqword 
    setargs                   2 0
    push           pc_genss.genabs64.d u64 
    push           1          i64 
    callproc       &pc_genss.addrelocitem 
#8431: 
#8435: 
    retproc                   
End


Proc pc_genss.getrel32: i64
    param          pc_genss.getrel32.d u64 
    param          pc_genss.getrel32.offset i64 
    procentry                 
    startmult                 
    push           pc_genss.getrel32.d u64 
    push           29         
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #8437      i64 
    push           pc_genss.getrel32.d u64 
    push           30         
    pushptroff                u8 1 0
    push           pc_genss.currseg i64 
    jumpeq         #8438      i64 
    setargs                   1 0
    push           "Rel label across segments2" u64 
    callproc       &pci_mcl.axerror 
#8438: 
    push           pc_genss.getrel32.d u64 
    push           32         
    pushptroff                i32 1 0
    push           pc_genss.getrel32.offset i64 
    push           1          i64 
    add                       i64 
    sub                       i64 
    resetmult                 
    jump           #8439      
#8437: 
    push           2147483647 i64 
    endmult                   
#8439: 
    setret                    i64 
    jump           #8440      
#8440: 
    retfn                     i64 
End


Proc pc_genss.dofwdrefs:
    param          pc_genss.dofwdrefs.d u64 
    local          pc_genss.dofwdrefs.f u64 
    local          pc_genss.dofwdrefs.offset i64 
    local          pc_genss.dofwdrefs.seg i64 
    local          pc_genss.dofwdrefs.p8 u64 
    local          pc_genss.dofwdrefs.p32 u64 
    local          pc_genss.dofwdrefs.p64 u64 
    local          pc_genss.dofwdrefs.data u64 
    procentry                 
    push           pc_genss.dofwdrefs.d u64 
    push           8          
    pushptroff                u64 1 0
    push           0          u64 
    jumpne         #8442      u64 
    jump           #8443      
#8442: 
    push           pc_genss.dofwdrefs.d u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_genss.dofwdrefs.f u64 
    jump           #8444      
#8445: 
    push           pc_genss.dofwdrefs.f u64 
    push           8          
    pushptroff                i32 1 0
    pop            pc_genss.dofwdrefs.offset i64 
    push           pc_genss.dofwdrefs.f u64 
    push           12         
    pushptroff                i16 1 0
    push           4          i64 
    casejumpeq     #8446      i64 0
    push           2          i64 
    casejumpeq     #8447      i64 0
    push           1          i64 
    casejumpeq     #8447      i64 0
    push           6          i64 
    casejumpeq     #8448      i64 0
    popstack                  i64 
    jump           #8449      
#8446: 
    setargs                   2 0
    push           pc_genss.dofwdrefs.offset i64 
    push           pc_genss.currdata u64 
    callfn         &pc_genss.bufferelemptr u64 
    pop            pc_genss.dofwdrefs.p32 u64 
    push           pc_genss.dofwdrefs.d u64 
    push           32         
    pushptroff                i32 1 0
    push           pc_genss.dofwdrefs.offset i64 
    sub                       i64 
    push           4          i64 
    sub                       i64 
    push           pc_genss.dofwdrefs.p32 u64 
    popptr                    i32 
    jump           #8450      
#8447: 
    push           pc_genss.dofwdrefs.f u64 
    push           14         
    pushptroff                i16 1 0
    push           1          i64 
    casejumpeq     #8451      i64 0
    push           3          i64 
    casejumpeq     #8452      i64 0
    push           2          i64 
    casejumpeq     #8453      i64 0
    popstack                  i64 
    jump           #8454      
#8451: 
    push           pci_mcl.ss_code u64 
    pop            pc_genss.dofwdrefs.data u64 
    jump           #8455      
#8452: 
    setargs                   1 0
    push           "Fwd ref in zdata" u64 
    callproc       &pci_mcl.axerror 
    jump           #8455      
#8453: 
    push           pci_mcl.ss_idata u64 
    pop            pc_genss.dofwdrefs.data u64 
    jump           #8455      
#8454: 
#8455: 
    setargs                   2 0
    push           pc_genss.dofwdrefs.offset i64 
    push           pc_genss.dofwdrefs.data u64 
    callfn         &pc_genss.bufferelemptr u64 
    pop            pc_genss.dofwdrefs.p32 u64 
    push           pc_genss.dofwdrefs.f u64 
    push           12         
    pushptroff                i16 1 0
    push           2          i64 
    jumpne         #8456      i64 
    push           pc_genss.dofwdrefs.p32 u64 
    pushptr                   i32 
    push           pc_genss.dofwdrefs.d u64 
    push           32         
    pushptroff                i32 1 0
    add                       i64 
    push           pc_genss.dofwdrefs.p32 u64 
    popptr                    i32 
    jump           #8457      
#8456: 
    push           pc_genss.dofwdrefs.p32 u64 
    pop            pc_genss.dofwdrefs.p64 u64 
    push           pc_genss.dofwdrefs.p64 u64 
    pushptr                   i64 
    push           pc_genss.dofwdrefs.d u64 
    push           32         
    pushptroff                i32 1 0
    add                       i64 
    push           pc_genss.dofwdrefs.p64 u64 
    popptr                    i64 
#8457: 
    jump           #8450      
#8448: 
    setargs                   2 0
    push           pc_genss.dofwdrefs.offset i64 
    push           pc_genss.currdata u64 
    callfn         &pc_genss.bufferelemptr u64 
    pop            pc_genss.dofwdrefs.p8 u64 
    push           pc_genss.dofwdrefs.d u64 
    push           32         
    pushptroff                i32 1 0
    push           pc_genss.dofwdrefs.offset i64 
    sub                       i64 
    push           1          i64 
    sub                       i64 
    push           pc_genss.dofwdrefs.p8 u64 
    popptr                    u8 
    jump           #8450      
#8449: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pc_objdecls.relocnames 
    push           pc_genss.dofwdrefs.f u64 
    push           12         
    pushptroff                i16 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "DOFWDREFS/CAN'T DO RELTYPE" u64 
    callproc       &pci_mcl.axerror 
#8450: 
    push           pc_genss.dofwdrefs.f u64 
    pushptr                   u64 
    pop            pc_genss.dofwdrefs.f u64 
#8444: 
    push           pc_genss.dofwdrefs.f u64 
    jumptrue       #8445      u64 
#8458: 
#8443: 
    retproc                   
End


Proc pc_genss.genrex:
    procentry                 
    push           pc_genss.sizeoverride i64 
    jumpfalse      #8460      i64 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
#8460: 
    push           pc_genss.addroverride i64 
    jumpfalse      #8461      i64 
    setargs                   1 0
    push           103        i64 
    callproc       &pc_genss.genbyte 
#8461: 
    push           pc_genss.rex i64 
    jumpfalse      #8462      i64 
    push           pc_genss.rex i64 
    push           64         i64 
    jumpge         #8463      i64 
    setargs                   1 0
    push           64         i64 
    push           pc_genss.rex i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    jump           #8464      
#8463: 
    setargs                   1 0
    push           pc_genss.rex i64 
    callproc       &pc_genss.genbyte 
#8464: 
#8462: 
#8465: 
    retproc                   
End


Proc pc_genss.isbytesized: i64
    param          pc_genss.isbytesized.x i64 
    procentry                 
    startmult                 
    push           -128       i64 
    push           pc_genss.isbytesized.x i64 
    jumpgt         #8467      i64 
    push           pc_genss.isbytesized.x i64 
    push           127        i64 
    jumpgt         #8467      i64 
    push           1          
    resetmult                 
    jump           #8468      
#8467: 
    push           0          
    endmult                   
#8468: 
    setret                    i64 
    jump           #8469      
#8469: 
    retfn                     i64 
End


Proc pc_genss.isdwordsized: i64
    param          pc_genss.isdwordsized.x i64 
    procentry                 
    startmult                 
    push           -2147483648 i64 
    push           pc_genss.isdwordsized.x i64 
    jumpgt         #8471      i64 
    push           pc_genss.isdwordsized.x i64 
    push           2147483647 i64 
    jumpgt         #8471      i64 
    push           1          
    resetmult                 
    jump           #8472      
#8471: 
    push           0          
    endmult                   
#8472: 
    setret                    i64 
    jump           #8473      
#8473: 
    retfn                     i64 
End


Proc pc_genss.do_push:
    param          pc_genss.do_push.a u64 
    local          pc_genss.do_push.code i64 
    local          pc_genss.do_push.am i64 
    procentry                 
    push           pc_genss.do_push.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8475      i64 0
    push           2          i64 
    casejumpeq     #8476      i64 0
    push           3          i64 
    casejumpeq     #8477      i64 0
    popstack                  i64 
    jump           #8478      
#8475: 
    push           pc_genss.do_push.a u64 
    push           8          
    pushptroff                u8 1 0
    push           8          i64 
    jumpeq         #8479      i64 
    setargs                   1 0
    push           "pushreg not 64-bit" u64 
    callproc       &pci_mcl.axerror 
#8479: 
    push           &pci_mcl.regcodes 
    push           pc_genss.do_push.a u64 
    push           10         
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    pop            pc_genss.do_push.code i64 
    push           pc_genss.do_push.code i64 
    push           8          i64 
    jumplt         #8480      i64 
    push           1          i64 
    pop            pc_genss.rex i64 
    push           &pc_genss.do_push.code 
    push           7          i64 
    iandto                    i64 
#8480: 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           80         i64 
    push           pc_genss.do_push.code i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    jump           #8481      
#8476: 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_push.a u64 
    callfn         &pc_genss.getdef u64 
    jumpfalse      #8482      u64 
    setargs                   1 0
    push           104        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           4          i64 
    push           pc_genss.do_push.a u64 
    callproc       &pc_genss.genopnd 
    jump           #8483      
#8482: 
    setargs                   1 0
    push           pc_genss.do_push.a u64 
    pushptr                   i64 
    callfn         &pc_genss.isbytesized i64 
    jumpfalse      #8484      i64 
    setargs                   1 0
    push           106        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_push.a u64 
    pushptr                   i64 
    callproc       &pc_genss.genbyte 
    jump           #8483      
#8484: 
    setargs                   1 0
    push           pc_genss.do_push.a u64 
    pushptr                   i64 
    callfn         &pc_genss.isdwordsized i64 
    jumpfalse      #8485      i64 
    setargs                   1 0
    push           104        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_push.a u64 
    pushptr                   i64 
    callproc       &pc_genss.gendword 
    jump           #8483      
#8485: 
    setargs                   1 0
    push           "push imm value too large" u64 
    callproc       &pci_mcl.axerror 
#8483: 
    jump           #8481      
#8477: 
    push           pc_genss.do_push.a u64 
    push           8          
    pushptroff                u8 1 0
    push           8          i64 
    jumpeq         #8486      i64 
    setargs                   1 0
    push           "push not 64-bit" u64 
    callproc       &pci_mcl.axerror 
#8486: 
    setargs                   2 0
    push           6          i64 
    push           pc_genss.do_push.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_push.am i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           255        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_push.am i64 
    push           pc_genss.do_push.a u64 
    callproc       &pc_genss.genamode 
    jump           #8481      
#8478: 
    setargs                   1 0
    push           "push opnd?" u64 
    callproc       &pci_mcl.axerror 
#8481: 
#8487: 
    retproc                   
End


Proc pc_genss.do_pop:
    param          pc_genss.do_pop.a u64 
    local          pc_genss.do_pop.code i64 
    local          pc_genss.do_pop.am i64 
    procentry                 
    push           pc_genss.do_pop.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8489      i64 0
    push           3          i64 
    casejumpeq     #8490      i64 0
    popstack                  i64 
    jump           #8491      
#8489: 
    push           pc_genss.do_pop.a u64 
    push           8          
    pushptroff                u8 1 0
    push           8          i64 
    jumpeq         #8492      i64 
    setargs                   1 0
    push           "popreg not 64-bit" u64 
    callproc       &pci_mcl.axerror 
#8492: 
    push           &pci_mcl.regcodes 
    push           pc_genss.do_pop.a u64 
    push           10         
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    pop            pc_genss.do_pop.code i64 
    push           pc_genss.do_pop.code i64 
    push           8          i64 
    jumplt         #8493      i64 
    push           1          i64 
    pop            pc_genss.rex i64 
    push           &pc_genss.do_pop.code 
    push           7          i64 
    iandto                    i64 
#8493: 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           88         i64 
    push           pc_genss.do_pop.code i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    jump           #8494      
#8490: 
    push           pc_genss.do_pop.a u64 
    push           8          
    pushptroff                u8 1 0
    push           8          i64 
    jumpeq         #8495      i64 
    setargs                   1 0
    push           "pop not 64-bit" u64 
    callproc       &pci_mcl.axerror 
#8495: 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_pop.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_pop.am i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           143        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_pop.am i64 
    push           pc_genss.do_pop.a u64 
    callproc       &pc_genss.genamode 
    jump           #8494      
#8491: 
    setargs                   1 0
    push           "pop opnd?" u64 
    callproc       &pci_mcl.axerror 
#8494: 
#8496: 
    retproc                   
End


Proc pc_genss.do_inc:
    param          pc_genss.do_inc.a u64 
    param          pc_genss.do_inc.code i64 
    local          pc_genss.do_inc.opc i64 
    local          pc_genss.do_inc.am i64 
    procentry                 
    startmult                 
    push           pc_genss.do_inc.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8498      i64 
    push           254        i64 
    resetmult                 
    jump           #8499      
#8498: 
    push           255        i64 
    endmult                   
#8499: 
    pop            pc_genss.do_inc.opc i64 
    push           pc_genss.do_inc.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8500      i64 0
    push           3          i64 
    casejumpeq     #8500      i64 0
    popstack                  i64 
    jump           #8501      
#8500: 
    setargs                   2 0
    push           pc_genss.do_inc.code i64 
    push           pc_genss.do_inc.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_inc.am i64 
    setargs                   1 0
    push           pc_genss.do_inc.a u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_inc.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           pc_genss.do_inc.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_inc.am i64 
    push           pc_genss.do_inc.a u64 
    callproc       &pc_genss.genamode 
    jump           #8502      
#8501: 
    setargs                   1 0
    push           "inc/opnd?" u64 
    callproc       &pci_mcl.axerror 
#8502: 
#8503: 
    retproc                   
End


Proc pc_genss.do_neg:
    param          pc_genss.do_neg.a u64 
    param          pc_genss.do_neg.code i64 
    local          pc_genss.do_neg.opc i64 
    local          pc_genss.do_neg.am i64 
    procentry                 
    startmult                 
    push           pc_genss.do_neg.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8505      i64 
    push           246        i64 
    resetmult                 
    jump           #8506      
#8505: 
    push           247        i64 
    endmult                   
#8506: 
    pop            pc_genss.do_neg.opc i64 
    push           pc_genss.do_neg.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8507      i64 0
    push           3          i64 
    casejumpeq     #8507      i64 0
    popstack                  i64 
    jump           #8508      
#8507: 
    setargs                   2 0
    push           pc_genss.do_neg.code i64 
    push           pc_genss.do_neg.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_neg.am i64 
    setargs                   1 0
    push           pc_genss.do_neg.a u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_neg.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           pc_genss.do_neg.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_neg.am i64 
    push           pc_genss.do_neg.a u64 
    callproc       &pc_genss.genamode 
    jump           #8509      
#8508: 
    setargs                   1 0
    push           "neg/div/etc opnd?" u64 
    callproc       &pci_mcl.axerror 
#8509: 
#8510: 
    retproc                   
End


Proc pc_genss.genamode:
    param          pc_genss.genamode.a u64 
    param          pc_genss.genamode.am i64 
    local          pc_genss.genamode.sib i64 
    local          pc_genss.genamode.mode i64 
    local          pc_genss.genamode.dispsize i64 
    local          pc_genss.genamode.offset i64 
    local          pc_genss.genamode.d u64 
    procentry                 
    push           pc_genss.genamode.am i64 
    push           16         i64 
    shr                       i64 
    pop            pc_genss.genamode.sib i64 
    push           pc_genss.genamode.am i64 
    push           8          i64 
    shr                       i64 
    push           255        i64 
    iand                      i64 
    pop            pc_genss.genamode.mode i64 
    push           pc_genss.genamode.am i64 
    push           255        i64 
    iand                      i64 
    pop            pc_genss.genamode.dispsize i64 
    setargs                   1 0
    push           pc_genss.genamode.mode i64 
    callproc       &pc_genss.genbyte 
    push           pc_genss.genamode.sib i64 
    push           0          i64 
    jumplt         #8512      i64 
    setargs                   1 0
    push           pc_genss.genamode.sib i64 
    callproc       &pc_genss.genbyte 
#8512: 
    push           pc_genss.genamode.dispsize i64 
    push           0          i64 
    casejumpeq     #8513      i64 0
    push           1          i64 
    casejumpeq     #8514      i64 0
    push           4          i64 
    casejumpeq     #8515      i64 0
    popstack                  i64 
    jump           #8516      
#8513: 
    jump           #8517      
#8514: 
    setargs                   2 0
    push           &pc_genss.genamode.offset 
    push           pc_genss.genamode.a u64 
    callproc       &pc_genss.getdispsize 
    setargs                   1 0
    push           pc_genss.genamode.offset i64 
    callproc       &pc_genss.genbyte 
    jump           #8517      
#8515: 
    push           pc_genss.genamode.a u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    casejumpeq     #8518      i64 0
    popstack                  i64 
    jump           #8519      
#8518: 
    push           pc_genss.genamode.a u64 
    push           12         
    pushptroff                u8 1 0
    push           5          i64 
    casejumpeq     #8520      i64 0
    push           7          i64 
    casejumpeq     #8520      i64 0
    push           0          i64 
    casejumpeq     #8521      i64 0
    popstack                  i64 
    jump           #8522      
#8520: 
    setargs                   1 0
    push           pc_genss.genamode.a u64 
    callproc       &pc_genss.genabs32 
    jump           #8523      
#8521: 
    setargs                   2 0
    push           &pc_genss.genamode.offset 
    push           pc_genss.genamode.a u64 
    callproc       &pc_genss.getdispsize 
    setargs                   1 0
    push           pc_genss.genamode.offset i64 
    callproc       &pc_genss.gendword 
    jump           #8523      
#8522: 
    setargs                   1 0
    push           "genam/3"  u64 
    callproc       &pci_mcl.axerror 
#8523: 
    jump           #8524      
#8519: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pci_mcl.opndnames_ma 
    push           pc_genss.genamode.a u64 
    push           9          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "GENAMODE/MODE?" u64 
    callproc       &pci_mcl.axerror 
#8524: 
    jump           #8517      
#8516: 
    setargs                   1 0
    push           "genamode size 2/8" u64 
    callproc       &pci_mcl.axerror 
#8517: 
#8525: 
    retproc                   
End


Proc pc_genss.makemodrm: i64
    param          pc_genss.makemodrm.mode i64 
    param          pc_genss.makemodrm.opc i64 
    param          pc_genss.makemodrm.rm i64 
    procentry                 
    push           pc_genss.makemodrm.mode i64 
    push           6          i64 
    shl                       i64 
    push           pc_genss.makemodrm.opc i64 
    push           3          i64 
    shl                       i64 
    add                       i64 
    push           pc_genss.makemodrm.rm i64 
    add                       i64 
    setret                    i64 
    jump           #8527      
#8527: 
    retfn                     i64 
End


Proc pc_genss.setopsize:
    param          pc_genss.setopsize.a u64 
    procentry                 
    push           pc_genss.setopsize.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8529      i64 0
    push           2          i64 
    casejumpeq     #8530      i64 0
    push           8          i64 
    casejumpeq     #8531      i64 0
    push           4          i64 
    casejumpeq     #8532      i64 0
    popstack                  i64 
    jump           #8533      
#8529: 
    jump           #8534      
#8530: 
    push           1          i64 
    pop            pc_genss.sizeoverride i64 
    jump           #8534      
#8531: 
    push           &pc_genss.rex 
    push           8          i64 
    iorto                     i64 
    jump           #8534      
#8532: 
    jump           #8534      
#8533: 
    setargs                   1 0
    push           "Operand size not set" u64 
    callproc       &pci_mcl.axerror 
#8534: 
#8535: 
    retproc                   
End


Proc pc_genss.setaddrsize:
    param          pc_genss.setaddrsize.a u64 
    procentry                 
    push           pc_genss.setaddrsize.a u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #8537      i64 
    push           pc_genss.setaddrsize.a u64 
    push           18         
    pushptroff                u8 1 0
    push           4          i64 
    jumpne         #8537      i64 
    push           1          i64 
    pop            pc_genss.addroverride i64 
#8537: 
#8538: 
    retproc                   
End


Proc pc_genss.getdispsize: i64
    param          pc_genss.getdispsize.a u64 
    param          pc_genss.getdispsize.offset u64 
    local          pc_genss.getdispsize.d u64 
    procentry                 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.getdispsize.a u64 
    callfn         &pc_genss.getdef u64 
    pop            pc_genss.getdispsize.d u64 
    push           pc_genss.getdispsize.a u64 
    push           14         
    pushptroff                i32 1 0
    push           pc_genss.getdispsize.offset u64 
    popptr                    i64 
    push           pc_genss.getdispsize.d u64 
    jumpfalse      #8540      u64 
    push           pc_genss.getdispsize.d u64 
    push           16         
    pushptroff                u64 1 0
    jumpfalse      #8541      u64 
    push           pc_genss.getdispsize.d u64 
    push           16         
    pushptroff                u64 1 0
    push           1          
    pushptroff                u8 1 0
    push           17         i64 
    setjumpeq      #8542      i64 
    push           18         i64 
    setjumpne      #8541      i64 
#8542: 
    push           pc_genss.getdispsize.offset u64 
    push           pc_genss.getdispsize.d u64 
    push           32         
    pushptroff                i32 1 0
    addto                     i64 
    jump           #8543      
#8541: 
    push           4          i64 
    setret                    i64 
    jump           #8544      
#8543: 
#8540: 
    startmult                 
    push           pc_genss.getdispsize.offset u64 
    pushptr                   i64 
    jumpfalse      #8545      i64 
    startmult                 
    setargs                   1 0
    push           pc_genss.getdispsize.offset u64 
    pushptr                   i64 
    callfn         &pc_genss.isbytesized i64 
    jumpfalse      #8546      i64 
    push           1          i64 
    resetmult                 
    jump           #8547      
#8546: 
    push           4          i64 
    endmult                   
#8547: 
    resetmult                 
    jump           #8548      
#8545: 
    push           0          i64 
    endmult                   
#8548: 
    setret                    i64 
    jump           #8544      
#8544: 
    retfn                     i64 
End


Proc pc_genss.genrm: i64
    param          pc_genss.genrm.a u64 
    param          pc_genss.genrm.opc i64 
    local          pc_genss.genrm.mode i64 
    local          pc_genss.genrm.rm i64 
    local          pc_genss.genrm.scale i64 
    local          pc_genss.genrm.dispsize i64 
    local          pc_genss.genrm.sib i64 
    local          pc_genss.genrm.index i64 
    local          pc_genss.genrm.base i64 
    local          pc_genss.genrm.reg i64 
    local          pc_genss.genrm.regix i64 
    local          pc_genss.genrm.code i64 
    local          pc_genss.genrm.offset i64 
    procentry                 
    push           0          i64 
    store          pc_genss.genrm.rm i64 
    pop            pc_genss.genrm.mode i64 
    push           0          i64 
    pop            pc_genss.genrm.scale i64 
    push           0          i64 
    pop            pc_genss.genrm.dispsize i64 
    push           -1         i64 
    pop            pc_genss.genrm.sib i64 
    push           pc_genss.genrm.a u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #8550      i64 
    push           pc_genss.genrm.a u64 
    push           18         
    pushptroff                u8 1 0
    push           4          i64 
    jumpne         #8550      i64 
    push           1          i64 
    pop            pc_genss.addroverride i64 
#8550: 
    push           pc_genss.genrm.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8551      i64 0
    push           3          i64 
    casejumpeq     #8552      i64 0
    push           5          i64 
    casejumpeq     #8553      i64 0
    popstack                  i64 
    jump           #8554      
#8551: 
    setargs                   1 0
    push           pc_genss.genrm.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcodeb i64 
    pop            pc_genss.genrm.code i64 
    setargs                   3 0
    push           pc_genss.genrm.dispsize i64 
    push           pc_genss.genrm.sib i64 
    setargs                   3 0
    push           pc_genss.genrm.code i64 
    push           pc_genss.genrm.opc i64 
    push           3          i64 
    callfn         &pc_genss.makemodrm i64 
    callfn         &pc_genss.makeam i64 
    setret                    i64 
    jump           #8555      
    jump           #8556      
#8552: 
    jump           #8556      
#8553: 
    setargs                   1 0
    push           pc_genss.genrm.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcodebx i64 
    pop            pc_genss.genrm.code i64 
    setargs                   3 0
    push           pc_genss.genrm.dispsize i64 
    push           pc_genss.genrm.sib i64 
    setargs                   3 0
    push           pc_genss.genrm.code i64 
    push           pc_genss.genrm.opc i64 
    push           3          i64 
    callfn         &pc_genss.makemodrm i64 
    callfn         &pc_genss.makeam i64 
    setret                    i64 
    jump           #8555      
    jump           #8556      
#8554: 
    setargs                   1 0
    push           "genrm not mem" u64 
    callproc       &pci_mcl.axerror 
#8556: 
    push           pc_genss.genrm.a u64 
    push           10         
    pushptroff                u8 1 0
    pop            pc_genss.genrm.reg i64 
    push           pc_genss.genrm.a u64 
    push           11         
    pushptroff                u8 1 0
    pop            pc_genss.genrm.regix i64 
    push           pc_genss.genrm.reg i64 
    push           pc_genss.genrm.regix i64 
    jumpne         #8557      i64 
    push           pc_genss.genrm.regix i64 
    push           0          i64 
    jumpne         #8557      i64 
    push           0          i64 
    pop            pc_genss.genrm.mode i64 
    push           4          i64 
    pop            pc_genss.genrm.rm i64 
    push           1          i64 
    pop            pc_genss.genrm.scale i64 
    push           4          i64 
    pop            pc_genss.genrm.index i64 
    push           5          i64 
    pop            pc_genss.genrm.base i64 
    push           4          i64 
    pop            pc_genss.genrm.dispsize i64 
    jump           #8558      
#8557: 
    push           pc_genss.genrm.a u64 
    push           13         
    pushptroff                u8 1 0
    push           1          i64 
    jumpgt         #8559      i64 
    push           pc_genss.genrm.regix i64 
    push           0          i64 
    jumpne         #8559      i64 
    setargs                   2 0
    push           &pc_genss.genrm.offset 
    push           pc_genss.genrm.a u64 
    callfn         &pc_genss.getdispsize i64 
    pop            pc_genss.genrm.dispsize i64 
    push           pc_genss.genrm.dispsize i64 
    jumpfalse      #8560      i64 
    startmult                 
    push           pc_genss.genrm.dispsize i64 
    push           1          i64 
    jumpne         #8561      i64 
    push           1          i64 
    resetmult                 
    jump           #8562      
#8561: 
    push           2          i64 
    endmult                   
#8562: 
    pop            pc_genss.genrm.mode i64 
#8560: 
    push           &pci_mcl.regcodes 
    push           pc_genss.genrm.reg i64 
    pushptroff                u8 1 0
    pop            pc_genss.genrm.rm i64 
    push           pc_genss.genrm.rm i64 
    push           4          i64 
    jumpeq         #8563      i64 
    push           pc_genss.genrm.rm i64 
    push           12         i64 
    jumpeq         #8563      i64 
    push           pc_genss.genrm.rm i64 
    pop            pc_genss.genrm.base i64 
    push           pc_genss.genrm.rm i64 
    push           5          i64 
    jumpeq         #8564      i64 
    push           pc_genss.genrm.rm i64 
    push           13         i64 
    jumpne         #8565      i64 
#8564: 
    push           pc_genss.genrm.dispsize i64 
    push           0          i64 
    jumpne         #8565      i64 
    push           1          i64 
    pop            pc_genss.genrm.mode i64 
    push           1          i64 
    pop            pc_genss.genrm.dispsize i64 
#8565: 
    push           0          i64 
    pop            pc_genss.genrm.index i64 
    jump           #8566      
#8563: 
    push           4          i64 
    pop            pc_genss.genrm.index i64 
    push           pc_genss.genrm.rm i64 
    pop            pc_genss.genrm.base i64 
    push           1          i64 
    pop            pc_genss.genrm.scale i64 
#8566: 
    jump           #8558      
#8559: 
    push           pc_genss.genrm.regix i64 
    jumpfalse      #8567      i64 
    push           pc_genss.genrm.reg i64 
    push           0          i64 
    jumpne         #8567      i64 
    push           4          i64 
    pop            pc_genss.genrm.dispsize i64 
    push           0          i64 
    pop            pc_genss.genrm.mode i64 
    push           4          i64 
    pop            pc_genss.genrm.rm i64 
    startmult                 
    push           pc_genss.genrm.a u64 
    push           13         
    pushptroff                u8 1 0
    jumpfalse      #8568      i64 
    push           pc_genss.genrm.a u64 
    push           13         
    pushptroff                u8 1 0
    resetmult                 
    jump           #8569      
#8568: 
    push           1          i64 
    endmult                   
#8569: 
    pop            pc_genss.genrm.scale i64 
    push           5          i64 
    pop            pc_genss.genrm.base i64 
    push           &pci_mcl.regcodes 
    push           pc_genss.genrm.regix i64 
    pushptroff                u8 1 0
    pop            pc_genss.genrm.index i64 
    push           pc_genss.genrm.regix i64 
    push           16         i64 
    jumpne         #8570      i64 
    setargs                   1 0
    push           "Scaled rstack?" u64 
    callproc       &pci_mcl.axerror 
#8570: 
    jump           #8558      
#8567: 
    setargs                   2 0
    push           &pc_genss.genrm.offset 
    push           pc_genss.genrm.a u64 
    callfn         &pc_genss.getdispsize i64 
    pop            pc_genss.genrm.dispsize i64 
    push           pc_genss.genrm.dispsize i64 
    jumpfalse      #8571      i64 
    startmult                 
    push           pc_genss.genrm.dispsize i64 
    push           1          i64 
    jumpne         #8572      i64 
    push           1          i64 
    resetmult                 
    jump           #8573      
#8572: 
    push           2          i64 
    endmult                   
#8573: 
    pop            pc_genss.genrm.mode i64 
#8571: 
    push           4          i64 
    pop            pc_genss.genrm.rm i64 
    startmult                 
    push           pc_genss.genrm.a u64 
    push           13         
    pushptroff                u8 1 0
    jumpfalse      #8574      i64 
    push           pc_genss.genrm.a u64 
    push           13         
    pushptroff                u8 1 0
    resetmult                 
    jump           #8575      
#8574: 
    push           1          i64 
    endmult                   
#8575: 
    pop            pc_genss.genrm.scale i64 
    push           pc_genss.genrm.reg i64 
    push           0          i64 
    jumpne         #8576      i64 
    push           5          i64 
    pop            pc_genss.genrm.base i64 
    jump           #8577      
#8576: 
    push           pc_genss.genrm.reg i64 
    push           15         i64 
    setjumpeq      #8578      i64 
    push           8          i64 
    setjumpne      #8579      i64 
#8578: 
    push           pc_genss.genrm.dispsize i64 
    push           0          i64 
    jumpne         #8579      i64 
    push           1          i64 
    pop            pc_genss.genrm.mode i64 
    push           1          i64 
    pop            pc_genss.genrm.dispsize i64 
#8579: 
    push           &pci_mcl.regcodes 
    push           pc_genss.genrm.reg i64 
    pushptroff                u8 1 0
    pop            pc_genss.genrm.base i64 
#8577: 
    push           pc_genss.genrm.regix i64 
    push           0          i64 
    jumpne         #8580      i64 
    push           4          i64 
    pop            pc_genss.genrm.index i64 
    jump           #8581      
#8580: 
    push           &pci_mcl.regcodes 
    push           pc_genss.genrm.regix i64 
    pushptroff                u8 1 0
    pop            pc_genss.genrm.index i64 
#8581: 
    push           pc_genss.genrm.regix i64 
    jumpfalse      #8582      i64 
    push           pc_genss.genrm.reg i64 
    jumptrue       #8582      i64 
    push           4          i64 
    pop            pc_genss.genrm.dispsize i64 
#8582: 
    push           pc_genss.genrm.regix i64 
    push           16         i64 
    jumpne         #8583      i64 
    push           pc_genss.genrm.scale i64 
    push           1          i64 
    jumple         #8583      i64 
    setargs                   1 0
    push           "Can't scale rstack" u64 
    callproc       &pci_mcl.axerror 
#8583: 
#8558: 
    push           pc_genss.genrm.index i64 
    push           8          i64 
    jumplt         #8584      i64 
    push           &pc_genss.rex 
    push           2          i64 
    iorto                     i64 
    push           &pc_genss.genrm.index 
    push           7          i64 
    iandto                    i64 
#8584: 
    push           pc_genss.genrm.base i64 
    push           8          i64 
    jumplt         #8585      i64 
    push           &pc_genss.rex 
    push           1          i64 
    iorto                     i64 
    push           &pc_genss.genrm.base 
    push           7          i64 
    iandto                    i64 
#8585: 
    push           pc_genss.genrm.scale i64 
    jumpfalse      #8586      i64 
    push           &pc_genss.genrm.scaletable 
    push           pc_genss.genrm.scale i64 
    pushptroff                i64 8 -8
    push           6          i64 
    shl                       i64 
    push           pc_genss.genrm.index i64 
    push           3          i64 
    shl                       i64 
    add                       i64 
    push           pc_genss.genrm.base i64 
    add                       i64 
    pop            pc_genss.genrm.sib i64 
#8586: 
    push           &pc_genss.genrm.rm 
    push           7          i64 
    iandto                    i64 
    setargs                   3 0
    push           pc_genss.genrm.dispsize i64 
    push           pc_genss.genrm.sib i64 
    setargs                   3 0
    push           pc_genss.genrm.rm i64 
    push           pc_genss.genrm.opc i64 
    push           pc_genss.genrm.mode i64 
    callfn         &pc_genss.makemodrm i64 
    callfn         &pc_genss.makeam i64 
    setret                    i64 
    jump           #8555      
#8555: 
    retfn                     i64 
End


Proc pc_genss.makeam: i64
    param          pc_genss.makeam.m i64 
    param          pc_genss.makeam.s i64 
    param          pc_genss.makeam.d i64 
    procentry                 
    push           pc_genss.makeam.s i64 
    push           16         i64 
    shl                       i64 
    push           pc_genss.makeam.m i64 
    push           8          i64 
    shl                       i64 
    add                       i64 
    push           pc_genss.makeam.d i64 
    add                       i64 
    setret                    i64 
    jump           #8588      
#8588: 
    retfn                     i64 
End


Proc pc_genss.do_arith:
    param          pc_genss.do_arith.a u64 
    param          pc_genss.do_arith.b u64 
    param          pc_genss.do_arith.code i64 
    local          pc_genss.do_arith.am i64 
    local          pc_genss.do_arith.regcode i64 
    local          pc_genss.do_arith.opc i64 
    local          pc_genss.do_arith.dispsize i64 
    local          pc_genss.do_arith.x i64 
    procentry                 
    push           pc_genss.do_arith.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8590      i64 0
    push           3          i64 
    casejumpeq     #8591      i64 0
    popstack                  i64 
    jump           #8592      
#8590: 
    push           pc_genss.do_arith.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8593      i64 0
    push           3          i64 
    casejumpeq     #8593      i64 0
    push           2          i64 
    casejumpeq     #8594      i64 0
    popstack                  i64 
    jump           #8595      
#8593: 
    setargs                   1 0
    push           pc_genss.do_arith.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_arith.regcode i64 
    setargs                   2 0
    push           pc_genss.do_arith.regcode i64 
    push           pc_genss.do_arith.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_arith.am i64 
    setargs                   1 0
    push           pc_genss.do_arith.a u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_arith.b u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_arith.a u64 
    callproc       &pc_genss.setopsize 
    push           pc_genss.do_arith.code i64 
    push           3          i64 
    shl                       i64 
    startmult                 
    push           pc_genss.do_arith.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8596      i64 
    push           2          i64 
    resetmult                 
    jump           #8597      
#8596: 
    push           3          i64 
    endmult                   
#8597: 
    ior                       i64 
    pop            pc_genss.do_arith.opc i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           pc_genss.do_arith.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_arith.am i64 
    push           pc_genss.do_arith.b u64 
    callproc       &pc_genss.genamode 
    jump           #8598      
#8594: 
!doregimm::
#8599: 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_arith.b u64 
    callfn         &pc_genss.getdef u64 
    jumpfalse      #8600      u64 
    push           pc_genss.do_arith.code i64 
    push           0          i64 
    jumplt         #8601      i64 
    push           pc_genss.do_arith.code i64 
    push           7          i64 
    jumple         #8602      i64 
#8601: 
    setargs                   1 0
    push           "non-add arith/label" u64 
    callproc       &pci_mcl.axerror 
#8602: 
    push           pc_genss.do_arith.a u64 
    push           8          
    pushptroff                u8 1 0
    push           4          i64 
    jumpge         #8603      i64 
    setargs                   1 0
    push           "add imm/size" u64 
    callproc       &pci_mcl.axerror 
#8603: 
    setargs                   2 0
    push           pc_genss.do_arith.code i64 
    push           pc_genss.do_arith.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_arith.am i64 
    setargs                   1 0
    push           pc_genss.do_arith.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           129        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_arith.am i64 
    push           pc_genss.do_arith.a u64 
    callproc       &pc_genss.genamode 
    setargs                   2 0
    push           4          i64 
    push           pc_genss.do_arith.b u64 
    callproc       &pc_genss.genopnd 
    jump           #8604      
#8600: 
    push           pc_genss.do_arith.b u64 
    pushptr                   i64 
    pop            pc_genss.do_arith.x i64 
    push           1          i64 
    pop            pc_genss.do_arith.dispsize i64 
    push           pc_genss.do_arith.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8605      i64 
    push           128        i64 
    pop            pc_genss.do_arith.opc i64 
    jump           #8606      
#8605: 
    push           -128       i64 
    push           pc_genss.do_arith.x i64 
    jumpgt         #8607      i64 
    push           pc_genss.do_arith.x i64 
    push           127        i64 
    jumpgt         #8607      i64 
    push           131        i64 
    pop            pc_genss.do_arith.opc i64 
    jump           #8606      
#8607: 
    push           -2147483648 i64 
    push           pc_genss.do_arith.x i64 
    jumpgt         #8608      i64 
    push           pc_genss.do_arith.x i64 
    push           4294967295 i64 
    jumple         #8609      i64 
#8608: 
    setargs                   1 0
    push           "3:exceeding word32 value" u64 
    callproc       &pci_mcl.axerror 
#8609: 
    push           129        i64 
    pop            pc_genss.do_arith.opc i64 
    startmult                 
    push           pc_genss.do_arith.a u64 
    push           8          
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #8610      i64 
    push           2          i64 
    resetmult                 
    jump           #8611      
#8610: 
    push           4          i64 
    endmult                   
#8611: 
    pop            pc_genss.do_arith.dispsize i64 
#8606: 
    setargs                   2 0
    push           pc_genss.do_arith.code i64 
    push           pc_genss.do_arith.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_arith.am i64 
    setargs                   1 0
    push           pc_genss.do_arith.a u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_arith.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           pc_genss.do_arith.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_arith.am i64 
    push           pc_genss.do_arith.a u64 
    callproc       &pc_genss.genamode 
    push           pc_genss.do_arith.dispsize i64 
    push           1          i64 
    casejumpeq     #8612      i64 0
    push           2          i64 
    casejumpeq     #8613      i64 0
    push           4          i64 
    casejumpeq     #8614      i64 0
    popstack                  i64 
    jump           #8615      
#8612: 
    setargs                   1 0
    push           pc_genss.do_arith.x i64 
    callproc       &pc_genss.genbyte 
    jump           #8616      
#8613: 
    setargs                   1 0
    push           pc_genss.do_arith.x i64 
    callproc       &pc_genss.genword 
    jump           #8616      
#8614: 
    setargs                   1 0
    push           pc_genss.do_arith.x i64 
    callproc       &pc_genss.gendword 
    jump           #8616      
#8615: 
#8616: 
    jump           #8598      
#8595: 
    setargs                   1 0
    push           "ADD reg,???" u64 
    callproc       &pci_mcl.axerror 
#8598: 
    jump           #8617      
#8591: 
    push           pc_genss.do_arith.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8618      i64 0
    push           2          i64 
    casejumpeq     #8619      i64 0
    popstack                  i64 
    jump           #8620      
#8618: 
    setargs                   1 0
    push           pc_genss.do_arith.b u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_arith.regcode i64 
    setargs                   2 0
    push           pc_genss.do_arith.regcode i64 
    push           pc_genss.do_arith.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_arith.am i64 
    setargs                   1 0
    push           pc_genss.do_arith.b u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_arith.b u64 
    callproc       &pc_genss.setopsize 
    push           pc_genss.do_arith.code i64 
    push           3          i64 
    shl                       i64 
    startmult                 
    push           pc_genss.do_arith.b u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8621      i64 
    push           0          i64 
    resetmult                 
    jump           #8622      
#8621: 
    push           1          i64 
    endmult                   
#8622: 
    ior                       i64 
    pop            pc_genss.do_arith.opc i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           pc_genss.do_arith.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_arith.am i64 
    push           pc_genss.do_arith.a u64 
    callproc       &pc_genss.genamode 
    jump           #8623      
#8619: 
    jump           #8599      
    jump           #8623      
#8620: 
    setargs                   1 0
    push           "ADD mem,???" u64 
    callproc       &pci_mcl.axerror 
#8623: 
    jump           #8617      
#8592: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pci_mcl.opndnames_ma 
    push           pc_genss.do_arith.a u64 
    push           9          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Can't add to this opnd" u64 
    callproc       &pci_mcl.axerror 
#8617: 
#8604: 
    retproc                   
End


Proc pc_genss.do_mov:
    param          pc_genss.do_mov.a u64 
    param          pc_genss.do_mov.b u64 
    local          pc_genss.do_mov.regcode i64 
    local          pc_genss.do_mov.am i64 
    local          pc_genss.do_mov.value i64 
    procentry                 
    push           pc_genss.do_mov.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8625      i64 0
    push           3          i64 
    casejumpeq     #8626      i64 0
    popstack                  i64 
    jump           #8627      
#8625: 
    push           pc_genss.do_mov.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8628      i64 0
    push           3          i64 
    casejumpeq     #8628      i64 0
    push           2          i64 
    casejumpeq     #8629      i64 0
    popstack                  i64 
    jump           #8630      
#8628: 
    push           pc_genss.do_mov.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_mov.b u64 
    push           8          
    pushptroff                u8 1 0
    jumpeq         #8631      i64 
    push           pc_genss.do_mov.b u64 
    push           8          
    pushptroff                u8 1 0
    jumpfalse      #8631      i64 
    setargs                   1 0
    push           "1:Opnd size mismatch" u64 
    callproc       &pci_mcl.axerror 
#8631: 
    setargs                   1 0
    push           pc_genss.do_mov.a u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_mov.b u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_mov.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_mov.regcode i64 
    setargs                   2 0
    push           pc_genss.do_mov.regcode i64 
    push           pc_genss.do_mov.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_mov.am i64 
    setargs                   1 0
    push           pc_genss.do_mov.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    startmult                 
    push           pc_genss.do_mov.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8632      i64 
    push           138        i64 
    resetmult                 
    jump           #8633      
#8632: 
    push           139        i64 
    endmult                   
#8633: 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_mov.am i64 
    push           pc_genss.do_mov.b u64 
    callproc       &pc_genss.genamode 
    jump           #8634      
#8629: 
    push           pc_genss.do_mov.b u64 
    pushptr                   i64 
    pop            pc_genss.do_mov.value i64 
    setargs                   1 0
    push           pc_genss.do_mov.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcodeb i64 
    pop            pc_genss.do_mov.regcode i64 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_mov.b u64 
    callfn         &pc_genss.getdef u64 
    jumpfalse      #8635      u64 
    push           pc_genss.do_mov.a u64 
    push           8          
    pushptroff                u8 1 0
    push           2          i64 
    jumpgt         #8635      i64 
    setargs                   1 0
    push           "mov imm?" u64 
    callproc       &pci_mcl.axerror 
#8635: 
    push           pc_genss.do_mov.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8636      i64 0
    push           2          i64 
    casejumpeq     #8637      i64 0
    push           4          i64 
    casejumpeq     #8638      i64 0
    popstack                  i64 
    jump           #8639      
#8636: 
    setargs                   1 0
    push           pc_genss.do_mov.a u64 
    callproc       &pc_genss.checkhighreg 
    push           pc_genss.do_mov.a u64 
    push           10         
    pushptroff                u8 1 0
    push           6          i64 
    casejumpeq     #8640      i64 0
    push           4          i64 
    casejumpeq     #8640      i64 0
    push           15         i64 
    casejumpeq     #8640      i64 0
    push           16         i64 
    casejumpeq     #8640      i64 0
    popstack                  i64 
    jump           #8641      
#8640: 
    push           &pc_genss.rex 
    push           64         i64 
    iorto                     i64 
    jump           #8642      
#8641: 
#8642: 
    push           -128       i64 
    push           pc_genss.do_mov.value i64 
    jumpgt         #8643      i64 
    push           pc_genss.do_mov.value i64 
    push           255        i64 
    jumple         #8644      i64 
#8643: 
    setargs                   1 0
    push           "exceeding byte value" u64 
    callproc       &pci_mcl.axerror 
#8644: 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           176        i64 
    push           pc_genss.do_mov.regcode i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_mov.value i64 
    callproc       &pc_genss.genbyte 
    jump           #8645      
#8637: 
    push           -32768     i64 
    push           pc_genss.do_mov.value i64 
    jumpgt         #8646      i64 
    push           pc_genss.do_mov.value i64 
    push           65535      i64 
    jumple         #8647      i64 
#8646: 
    setargs                   1 0
    push           "exceeding word16 value" u64 
    callproc       &pci_mcl.axerror 
#8647: 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           184        i64 
    push           pc_genss.do_mov.regcode i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_mov.value i64 
    callproc       &pc_genss.genword 
    jump           #8645      
#8638: 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_mov.b u64 
    callfn         &pc_genss.getdef u64 
    jumpfalse      #8648      u64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           184        i64 
    push           pc_genss.do_mov.regcode i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           4          i64 
    push           pc_genss.do_mov.b u64 
    callproc       &pc_genss.genopnd 
    jump           #8649      
#8648: 
    push           -2147483648 i64 
    push           pc_genss.do_mov.value i64 
    jumpgt         #8650      i64 
    push           pc_genss.do_mov.value i64 
    push           4294967295 i64 
    truncate                  i64 u32 
    jumple         #8651      i64 
#8650: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           pc_genss.do_mov.value i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           pc_genss.do_mov.value u64 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "1:exceeding word32 value" u64 
    callproc       &pci_mcl.axerror 
#8651: 
!doreg32::
#8652: 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           184        i64 
    push           pc_genss.do_mov.regcode i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_mov.value i64 
    callproc       &pc_genss.gendword 
#8649: 
    jump           #8645      
#8639: 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_mov.b u64 
    callfn         &pc_genss.getdef u64 
    jumpfalse      #8653      u64 
    push           &pc_genss.rex 
    push           8          i64 
    iorto                     i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           184        i64 
    push           pc_genss.do_mov.regcode i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           8          i64 
    push           pc_genss.do_mov.b u64 
    callproc       &pc_genss.genopnd 
    jump           #8654      
#8653: 
    push           pc_genss.do_mov.value i64 
    push           0          i64 
    jumplt         #8655      i64 
    push           pc_genss.do_mov.value i64 
    push           4294967295 i64 
    jumpgt         #8655      i64 
    jump           #8652      
#8655: 
    push           &pc_genss.rex 
    push           8          i64 
    iorto                     i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           184        i64 
    push           pc_genss.do_mov.regcode i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_mov.value i64 
    callproc       &pc_genss.genqword 
#8654: 
#8645: 
    jump           #8634      
#8630: 
    setargs                   1 0
    push           "MOV REG/??" u64 
    callproc       &pci_mcl.axerror 
#8634: 
    jump           #8656      
#8626: 
    push           pc_genss.do_mov.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8657      i64 0
    push           2          i64 
    casejumpeq     #8658      i64 0
    popstack                  i64 
    jump           #8659      
#8657: 
    push           pc_genss.do_mov.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_mov.b u64 
    push           8          
    pushptroff                u8 1 0
    jumpeq         #8660      i64 
    push           pc_genss.do_mov.a u64 
    push           8          
    pushptroff                u8 1 0
    jumpfalse      #8660      i64 
    setargs                   1 0
    push           "2:Opnd size mismatch" u64 
    callproc       &pci_mcl.axerror 
#8660: 
    setargs                   1 0
    push           pc_genss.do_mov.b u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_mov.regcode i64 
    setargs                   1 0
    push           pc_genss.do_mov.b u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   2 0
    push           pc_genss.do_mov.regcode i64 
    push           pc_genss.do_mov.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_mov.am i64 
    setargs                   1 0
    push           pc_genss.do_mov.b u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    startmult                 
    push           pc_genss.do_mov.b u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8661      i64 
    push           136        i64 
    resetmult                 
    jump           #8662      
#8661: 
    push           137        i64 
    endmult                   
#8662: 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_mov.am i64 
    push           pc_genss.do_mov.a u64 
    callproc       &pc_genss.genamode 
    jump           #8663      
#8658: 
    push           pc_genss.do_mov.b u64 
    pushptr                   i64 
    pop            pc_genss.do_mov.value i64 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_mov.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_mov.am i64 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_mov.b u64 
    callfn         &pc_genss.getdef u64 
    jumpfalse      #8664      u64 
    push           pc_genss.do_mov.a u64 
    push           8          
    pushptroff                u8 1 0
    push           2          i64 
    jumpgt         #8664      i64 
    setargs                   1 0
    push           "mov imm?" u64 
    callproc       &pci_mcl.axerror 
#8664: 
    push           pc_genss.do_mov.a u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #8665      i64 
    push           1          i64 
    push           pc_genss.do_mov.a u64 
    push           8          
    popptroff                 u8 1 0
#8665: 
    push           pc_genss.do_mov.a u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    casejumpeq     #8666      i64 0
    push           1          i64 
    casejumpeq     #8666      i64 0
    push           2          i64 
    casejumpeq     #8667      i64 0
    push           4          i64 
    casejumpeq     #8668      i64 0
    push           8          i64 
    casejumpeq     #8668      i64 0
    popstack                  i64 
    jump           #8669      
#8666: 
    push           -128       i64 
    push           pc_genss.do_mov.value i64 
    jumpgt         #8670      i64 
    push           pc_genss.do_mov.value i64 
    push           255        i64 
    jumple         #8671      i64 
#8670: 
    setargs                   1 0
    push           "exceeding byte value" u64 
    callproc       &pci_mcl.axerror 
#8671: 
    setargs                   1 0
    push           pc_genss.do_mov.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           198        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_mov.am i64 
    push           pc_genss.do_mov.a u64 
    callproc       &pc_genss.genamode 
    setargs                   1 0
    push           pc_genss.do_mov.value i64 
    callproc       &pc_genss.genbyte 
    jump           #8672      
#8667: 
    push           -32768     i64 
    push           pc_genss.do_mov.value i64 
    jumpgt         #8673      i64 
    push           pc_genss.do_mov.value i64 
    push           65535      i64 
    jumple         #8674      i64 
#8673: 
    setargs                   1 0
    push           "exceeding word16 value" u64 
    callproc       &pci_mcl.axerror 
#8674: 
    setargs                   1 0
    push           pc_genss.do_mov.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           199        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_mov.am i64 
    push           pc_genss.do_mov.a u64 
    callproc       &pc_genss.genamode 
    setargs                   1 0
    push           pc_genss.do_mov.value i64 
    callproc       &pc_genss.genword 
    jump           #8672      
#8668: 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_mov.b u64 
    callfn         &pc_genss.getdef u64 
    jumptrue       #8675      u64 
    push           -2147483648 i64 
    push           pc_genss.do_mov.value i64 
    jumpgt         #8676      i64 
    push           pc_genss.do_mov.value i64 
    push           4294967295 i64 
    jumple         #8677      i64 
#8676: 
    setargs                   1 0
    push           "2:exceeding word32 value" u64 
    callproc       &pci_mcl.axerror 
#8677: 
#8675: 
    setargs                   1 0
    push           pc_genss.do_mov.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           199        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_mov.am i64 
    push           pc_genss.do_mov.a u64 
    callproc       &pc_genss.genamode 
    setargs                   2 0
    push           4          i64 
    push           pc_genss.do_mov.b u64 
    callproc       &pc_genss.genopnd 
    jump           #8672      
#8669: 
#8672: 
    jump           #8663      
#8659: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pci_mcl.opndnames_ma 
    push           pc_genss.do_mov.a u64 
    push           9          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pci_mcl.opndnames_ma 
    push           pc_genss.do_mov.b u64 
    push           9          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "MOV MEM/?" u64 
    callproc       &pci_mcl.axerror 
#8663: 
    jump           #8656      
#8627: 
    setargs                   1 0
    push           "MOV ?/.." u64 
    callproc       &pci_mcl.axerror 
#8656: 
#8678: 
    retproc                   
End


Proc pc_genss.getregcoder: i64
    param          pc_genss.getregcoder.reg i64 
    local          pc_genss.getregcoder.regcode i64 
    procentry                 
    push           &pci_mcl.regcodes 
    push           pc_genss.getregcoder.reg i64 
    pushptroff                u8 1 0
    pop            pc_genss.getregcoder.regcode i64 
    push           pc_genss.getregcoder.regcode i64 
    push           8          i64 
    jumplt         #8680      i64 
    push           &pc_genss.getregcoder.regcode 
    push           8          i64 
    subto                     i64 
    push           &pc_genss.rex 
    push           4          i64 
    iorto                     i64 
#8680: 
    push           pc_genss.getregcoder.regcode i64 
    setret                    i64 
    jump           #8681      
#8681: 
    retfn                     i64 
End


Proc pc_genss.getregcodeb: i64
    param          pc_genss.getregcodeb.reg i64 
    local          pc_genss.getregcodeb.regcode i64 
    procentry                 
    push           &pci_mcl.regcodes 
    push           pc_genss.getregcodeb.reg i64 
    pushptroff                u8 1 0
    pop            pc_genss.getregcodeb.regcode i64 
    push           pc_genss.getregcodeb.regcode i64 
    push           8          i64 
    jumplt         #8683      i64 
    push           &pc_genss.getregcodeb.regcode 
    push           8          i64 
    subto                     i64 
    push           &pc_genss.rex 
    push           1          i64 
    iorto                     i64 
#8683: 
    push           pc_genss.getregcodeb.regcode i64 
    setret                    i64 
    jump           #8684      
#8684: 
    retfn                     i64 
End


Proc pc_genss.getregcodebx: i64
    param          pc_genss.getregcodebx.reg i64 
    local          pc_genss.getregcodebx.regcode i64 
    procentry                 
    push           pc_genss.getregcodebx.reg i64 
    push           1          i64 
    sub                       i64 
    pop            pc_genss.getregcodebx.regcode i64 
    push           pc_genss.getregcodebx.regcode i64 
    push           8          i64 
    jumplt         #8686      i64 
    push           &pc_genss.getregcodebx.regcode 
    push           8          i64 
    subto                     i64 
    push           &pc_genss.rex 
    push           1          i64 
    iorto                     i64 
#8686: 
    push           pc_genss.getregcodebx.regcode i64 
    setret                    i64 
    jump           #8687      
#8687: 
    retfn                     i64 
End


Proc pc_genss.getregcoderx: i64
    param          pc_genss.getregcoderx.reg i64 
    local          pc_genss.getregcoderx.regcode i64 
    procentry                 
    push           pc_genss.getregcoderx.reg i64 
    push           1          i64 
    sub                       i64 
    pop            pc_genss.getregcoderx.regcode i64 
    push           pc_genss.getregcoderx.regcode i64 
    push           8          i64 
    jumplt         #8689      i64 
    push           &pc_genss.getregcoderx.regcode 
    push           8          i64 
    subto                     i64 
    push           &pc_genss.rex 
    push           4          i64 
    iorto                     i64 
#8689: 
    push           pc_genss.getregcoderx.regcode i64 
    setret                    i64 
    jump           #8690      
#8690: 
    retfn                     i64 
End


Proc pc_genss.do_lea:
    param          pc_genss.do_lea.a u64 
    param          pc_genss.do_lea.b u64 
    local          pc_genss.do_lea.regcode i64 
    local          pc_genss.do_lea.am i64 
    procentry                 
    push           pc_genss.do_lea.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8692      i64 
    push           pc_genss.do_lea.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpeq         #8693      i64 
#8692: 
    setargs                   1 0
    push           "LEA not reg/mem" u64 
    callproc       &pci_mcl.axerror 
#8693: 
    push           pc_genss.do_lea.a u64 
    push           8          
    pushptroff                u8 1 0
    push           4          i64 
    jumpge         #8694      i64 
    setargs                   1 0
    push           "LEA size error" u64 
    callproc       &pci_mcl.axerror 
#8694: 
    setargs                   1 0
    push           pc_genss.do_lea.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_lea.regcode i64 
    setargs                   2 0
    push           pc_genss.do_lea.regcode i64 
    push           pc_genss.do_lea.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_lea.am i64 
    setargs                   1 0
    push           pc_genss.do_lea.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           141        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_lea.am i64 
    push           pc_genss.do_lea.b u64 
    callproc       &pc_genss.genamode 
#8695: 
    retproc                   
End


Proc pc_genss.do_movsx:
    param          pc_genss.do_movsx.a u64 
    param          pc_genss.do_movsx.b u64 
    param          pc_genss.do_movsx.opc i64 
    local          pc_genss.do_movsx.am i64 
    local          pc_genss.do_movsx.regcode i64 
    procentry                 
    push           pc_genss.do_movsx.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #8697      i64 
    setargs                   1 0
    push           "movsx not reg" u64 
    callproc       &pci_mcl.axerror 
#8697: 
    push           pc_genss.do_movsx.a u64 
    push           8          
    pushptroff                u8 1 0
    push           8          i64 
    jumpne         #8698      i64 
    push           pc_genss.do_movsx.b u64 
    push           8          
    pushptroff                u8 1 0
    push           4          i64 
    jumpne         #8698      i64 
    push           pc_genss.do_movsx.opc i64 
    push           190        i64 
    jumpne         #8699      i64 
    setargs                   2 0
    push           pc_genss.do_movsx.b u64 
    push           pc_genss.do_movsx.a u64 
    callproc       &pc_genss.do_movsxd 
    jump           #8700      
#8699: 
    push           &pci_mcl.regtable 
    push           pc_genss.do_movsx.a u64 
    push           10         
    pushptroff                u8 1 0
    addrefoff                 block:128 128 -128
    push           4          i64 
    pushptroff                u64 8 -8
    pop            pc_genss.do_movsx.a u64 
    setargs                   2 0
    push           pc_genss.do_movsx.b u64 
    push           pc_genss.do_movsx.a u64 
    callproc       &pc_genss.do_mov 
#8700: 
    jump           #8701      
#8698: 
    push           pc_genss.do_movsx.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #8702      i64 
    push           pc_genss.do_movsx.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_movsx.b u64 
    push           8          
    pushptroff                u8 1 0
    jumpgt         #8703      i64 
#8702: 
    setargs                   1 0
    push           "movsx size error" u64 
    callproc       &pci_mcl.axerror 
#8703: 
    push           pc_genss.do_movsx.opc i64 
    push           182        i64 
    jumpne         #8704      i64 
    push           pc_genss.do_movsx.b u64 
    push           8          
    pushptroff                u8 1 0
    push           4          i64 
    jumpne         #8704      i64 
    setargs                   1 0
    push           "movsx 4=>8 bytes?" u64 
    callproc       &pci_mcl.axerror 
#8704: 
    push           pc_genss.do_movsx.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8705      i64 0
    push           3          i64 
    casejumpeq     #8706      i64 0
    popstack                  i64 
    jump           #8707      
#8705: 
    jump           #8708      
#8706: 
    push           pc_genss.do_movsx.b u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #8709      i64 
    setargs                   1 0
    push           "movsx need size prefix" u64 
    callproc       &pci_mcl.axerror 
#8709: 
    push           pc_genss.do_movsx.b u64 
    push           8          
    pushptroff                u8 1 0
    push           8          i64 
    jumpne         #8710      i64 
    setargs                   1 0
    push           "movsx size 8" u64 
    callproc       &pci_mcl.axerror 
#8710: 
    jump           #8708      
#8707: 
    setargs                   1 0
    push           "movsx not reg/mem" u64 
    callproc       &pci_mcl.axerror 
#8708: 
    setargs                   1 0
    push           pc_genss.do_movsx.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_movsx.regcode i64 
    setargs                   2 0
    push           pc_genss.do_movsx.regcode i64 
    push           pc_genss.do_movsx.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_movsx.am i64 
    setargs                   1 0
    push           pc_genss.do_movsx.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   1 0
    push           pc_genss.do_movsx.b u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    startmult                 
    push           pc_genss.do_movsx.b u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8711      i64 
    push           pc_genss.do_movsx.opc i64 
    resetmult                 
    jump           #8712      
#8711: 
    push           pc_genss.do_movsx.opc i64 
    push           1          i64 
    add                       i64 
    endmult                   
#8712: 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_movsx.am i64 
    push           pc_genss.do_movsx.b u64 
    callproc       &pc_genss.genamode 
#8701: 
    retproc                   
End


Proc pc_genss.checkhighreg:
    param          pc_genss.checkhighreg.a u64 
    procentry                 
    push           pc_genss.checkhighreg.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8714      i64 
    push           pc_genss.checkhighreg.a u64 
    push           10         
    pushptroff                u8 1 0
    push           6          i64 
    casejumpeq     #8715      i64 0
    push           4          i64 
    casejumpeq     #8715      i64 0
    push           15         i64 
    casejumpeq     #8715      i64 0
    push           16         i64 
    casejumpeq     #8715      i64 0
    popstack                  i64 
    jump           #8716      
#8715: 
    push           &pc_genss.rex 
    push           64         i64 
    iorto                     i64 
    jump           #8717      
#8716: 
#8717: 
#8714: 
#8718: 
    retproc                   
End


Proc pc_genss.do_exch:
    param          pc_genss.do_exch.a u64 
    param          pc_genss.do_exch.b u64 
    local          pc_genss.do_exch.regcode i64 
    local          pc_genss.do_exch.am i64 
    procentry                 
    push           pc_genss.do_exch.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8720      i64 
    push           pc_genss.do_exch.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8720      i64 
    push           pc_genss.do_exch.a u64 
    push           10         
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #8721      i64 
    push           pc_genss.do_exch.b u64 
    push           10         
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8720      i64 
#8721: 
    push           pc_genss.do_exch.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #8720      i64 
    push           pc_genss.do_exch.a u64 
    push           10         
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #8722      i64 
    push           &pc_genss.do_exch.a 
    push           &pc_genss.do_exch.b 
    swap                      u64 
#8722: 
    push           pc_genss.do_exch.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_exch.b u64 
    push           8          
    pushptroff                u8 1 0
    jumpeq         #8723      i64 
    setargs                   1 0
    push           "exch size" u64 
    callproc       &pci_mcl.axerror 
#8723: 
    setargs                   1 0
    push           pc_genss.do_exch.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   1 0
    push           pc_genss.do_exch.b u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcodeb i64 
    pop            pc_genss.do_exch.regcode i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           144        i64 
    push           pc_genss.do_exch.regcode i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    jump           #8724      
#8720: 
    push           pc_genss.do_exch.a u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #8725      i64 
    push           &pc_genss.do_exch.a 
    push           &pc_genss.do_exch.b 
    swap                      u64 
#8725: 
    push           pc_genss.do_exch.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8726      i64 
    push           pc_genss.do_exch.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #8727      i64 
    push           pc_genss.do_exch.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpeq         #8727      i64 
#8726: 
    setargs                   1 0
    push           "exch opnds" u64 
    callproc       &pci_mcl.axerror 
#8727: 
    push           pc_genss.do_exch.b u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #8728      i64 
    push           pc_genss.do_exch.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #8728      i64 
    push           pc_genss.do_exch.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_exch.b u64 
    push           8          
    popptroff                 u8 1 0
#8728: 
    push           pc_genss.do_exch.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_exch.b u64 
    push           8          
    pushptroff                u8 1 0
    jumpeq         #8729      i64 
    setargs                   1 0
    push           "exch size" u64 
    callproc       &pci_mcl.axerror 
#8729: 
    push           pc_genss.do_exch.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8730      i64 
    setargs                   1 0
    push           pc_genss.do_exch.a u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_exch.b u64 
    callproc       &pc_genss.checkhighreg 
#8730: 
    setargs                   1 0
    push           pc_genss.do_exch.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_exch.regcode i64 
    setargs                   2 0
    push           pc_genss.do_exch.regcode i64 
    push           pc_genss.do_exch.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_exch.am i64 
    setargs                   1 0
    push           pc_genss.do_exch.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    startmult                 
    push           pc_genss.do_exch.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8731      i64 
    push           134        i64 
    resetmult                 
    jump           #8732      
#8731: 
    push           135        i64 
    endmult                   
#8732: 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_exch.am i64 
    push           pc_genss.do_exch.b u64 
    callproc       &pc_genss.genamode 
#8724: 
    retproc                   
End


Proc pc_genss.do_movsxd:
    param          pc_genss.do_movsxd.a u64 
    param          pc_genss.do_movsxd.b u64 
    local          pc_genss.do_movsxd.regcode i64 
    local          pc_genss.do_movsxd.am i64 
    procentry                 
    push           pc_genss.do_movsxd.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #8734      i64 
    push           pc_genss.do_movsxd.b u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #8734      i64 
    push           4          i64 
    push           pc_genss.do_movsxd.b u64 
    push           8          
    popptroff                 u8 1 0
#8734: 
    push           pc_genss.do_movsxd.a u64 
    push           8          
    pushptroff                u8 1 0
    push           8          i64 
    jumpne         #8735      i64 
    push           pc_genss.do_movsxd.b u64 
    push           8          
    pushptroff                u8 1 0
    push           4          i64 
    jumple         #8736      i64 
#8735: 
    setargs                   1 0
    push           "movsxd size" u64 
    callproc       &pci_mcl.axerror 
#8736: 
    push           pc_genss.do_movsxd.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8737      i64 
    push           pc_genss.do_movsxd.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #8738      i64 
    push           pc_genss.do_movsxd.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpeq         #8738      i64 
#8737: 
    setargs                   1 0
    push           "movsxd opnds" u64 
    callproc       &pci_mcl.axerror 
#8738: 
    setargs                   1 0
    push           pc_genss.do_movsxd.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_movsxd.regcode i64 
    setargs                   2 0
    push           pc_genss.do_movsxd.regcode i64 
    push           pc_genss.do_movsxd.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_movsxd.am i64 
    setargs                   1 0
    push           pc_genss.do_movsxd.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           99         i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_movsxd.am i64 
    push           pc_genss.do_movsxd.b u64 
    callproc       &pc_genss.genamode 
#8739: 
    retproc                   
End


Proc pc_genss.do_imul2:
    param          pc_genss.do_imul2.a u64 
    param          pc_genss.do_imul2.b u64 
    local          pc_genss.do_imul2.regcode i64 
    local          pc_genss.do_imul2.am i64 
    local          pc_genss.do_imul2.opc i64 
    local          pc_genss.do_imul2.value i64 
    procentry                 
    push           pc_genss.do_imul2.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #8741      i64 
    setargs                   1 0
    push           "imul2 opnds" u64 
    callproc       &pci_mcl.axerror 
#8741: 
    push           pc_genss.do_imul2.b u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #8742      i64 
    push           pc_genss.do_imul2.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_imul2.b u64 
    push           8          
    popptroff                 u8 1 0
#8742: 
    push           pc_genss.do_imul2.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8743      i64 
    setargs                   1 0
    push           "imul2 byte" u64 
    callproc       &pci_mcl.axerror 
#8743: 
    push           pc_genss.do_imul2.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8744      i64 0
    push           3          i64 
    casejumpeq     #8744      i64 0
    push           2          i64 
    casejumpeq     #8745      i64 0
    popstack                  i64 
    jump           #8746      
#8744: 
    push           pc_genss.do_imul2.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_imul2.b u64 
    push           8          
    pushptroff                u8 1 0
    jumpeq         #8747      i64 
    setargs                   1 0
    push           "imul2 size" u64 
    callproc       &pci_mcl.axerror 
#8747: 
    setargs                   1 0
    push           pc_genss.do_imul2.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_imul2.regcode i64 
    setargs                   2 0
    push           pc_genss.do_imul2.regcode i64 
    push           pc_genss.do_imul2.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_imul2.am i64 
    setargs                   1 0
    push           pc_genss.do_imul2.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           175        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_imul2.am i64 
    push           pc_genss.do_imul2.b u64 
    callproc       &pc_genss.genamode 
    jump           #8748      
#8745: 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_imul2.b u64 
    callfn         &pc_genss.getdef u64 
    jumpfalse      #8749      u64 
    setargs                   1 0
    push           "mul/label" u64 
    callproc       &pci_mcl.axerror 
#8749: 
    push           pc_genss.do_imul2.b u64 
    pushptr                   i64 
    pop            pc_genss.do_imul2.value i64 
    setargs                   1 0
    push           pc_genss.do_imul2.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_imul2.regcode i64 
    setargs                   1 0
    push           pc_genss.do_imul2.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcodeb i64 
    pop            pc_genss.do_imul2.regcode i64 
    push           192        i64 
    push           pc_genss.do_imul2.regcode i64 
    push           3          i64 
    shl                       i64 
    add                       i64 
    push           pc_genss.do_imul2.regcode i64 
    add                       i64 
    pop            pc_genss.do_imul2.opc i64 
    setargs                   1 0
    push           pc_genss.do_imul2.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    push           -128       i64 
    push           pc_genss.do_imul2.value i64 
    jumpgt         #8750      i64 
    push           pc_genss.do_imul2.value i64 
    push           127        i64 
    jumpgt         #8750      i64 
    setargs                   1 0
    push           107        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_imul2.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_imul2.value i64 
    callproc       &pc_genss.genbyte 
    jump           #8751      
#8750: 
    push           pc_genss.do_imul2.a u64 
    push           8          
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #8752      i64 
    setargs                   1 0
    push           105        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_imul2.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_imul2.value i64 
    callproc       &pc_genss.genword 
    jump           #8751      
#8752: 
    setargs                   1 0
    push           105        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_imul2.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_imul2.value i64 
    callproc       &pc_genss.gendword 
#8751: 
    jump           #8748      
#8746: 
    setargs                   1 0
    push           "imul2 opnds" u64 
    callproc       &pci_mcl.axerror 
#8748: 
#8753: 
    retproc                   
End


Proc pc_genss.do_shift:
    param          pc_genss.do_shift.a u64 
    param          pc_genss.do_shift.b u64 
    param          pc_genss.do_shift.opc i64 
    local          pc_genss.do_shift.am i64 
    local          pc_genss.do_shift.w i64 
    procentry                 
    push           pc_genss.do_shift.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #8755      i64 
    push           pc_genss.do_shift.a u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpeq         #8755      i64 
    setargs                   1 0
    push           "shift opnds1?" u64 
    callproc       &pci_mcl.axerror 
#8755: 
    setargs                   2 0
    push           pc_genss.do_shift.opc i64 
    push           pc_genss.do_shift.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_shift.am i64 
    setargs                   1 0
    push           pc_genss.do_shift.a u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_shift.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    startmult                 
    push           pc_genss.do_shift.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8756      i64 
    push           0          i64 
    resetmult                 
    jump           #8757      
#8756: 
    push           1          i64 
    endmult                   
#8757: 
    pop            pc_genss.do_shift.w i64 
    push           pc_genss.do_shift.b u64 
    push           9          
    pushptroff                u8 1 0
    push           2          i64 
    casejumpeq     #8758      i64 0
    push           1          i64 
    casejumpeq     #8759      i64 0
    popstack                  i64 
    jump           #8760      
#8758: 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_shift.b u64 
    callfn         &pc_genss.getdef u64 
    jumpfalse      #8761      u64 
    setargs                   1 0
    push           "shift/label" u64 
    callproc       &pci_mcl.axerror 
#8761: 
    push           pc_genss.do_shift.b u64 
    pushptr                   i64 
    push           1          i64 
    jumpne         #8762      i64 
    setargs                   1 0
    push           208        i64 
    push           pc_genss.do_shift.w i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_shift.am i64 
    push           pc_genss.do_shift.a u64 
    callproc       &pc_genss.genamode 
    jump           #8763      
#8762: 
    setargs                   1 0
    push           192        i64 
    push           pc_genss.do_shift.w i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_shift.am i64 
    push           pc_genss.do_shift.a u64 
    callproc       &pc_genss.genamode 
    setargs                   1 0
    push           pc_genss.do_shift.b u64 
    pushptr                   i64 
    callproc       &pc_genss.genbyte 
#8763: 
    jump           #8764      
#8759: 
    push           pc_genss.do_shift.b u64 
    push           10         
    pushptroff                u8 1 0
    push           11         i64 
    jumpne         #8765      i64 
    push           pc_genss.do_shift.b u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #8766      i64 
#8765: 
    setargs                   1 0
    push           "cl or b10 needed" u64 
    callproc       &pci_mcl.axerror 
#8766: 
    setargs                   1 0
    push           210        i64 
    push           pc_genss.do_shift.w i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_shift.am i64 
    push           pc_genss.do_shift.a u64 
    callproc       &pc_genss.genamode 
    jump           #8764      
#8760: 
    setargs                   1 0
    push           "shift opnds2?" u64 
    callproc       &pci_mcl.axerror 
#8764: 
#8767: 
    retproc                   
End


Proc pc_genss.do_test:
    param          pc_genss.do_test.a u64 
    param          pc_genss.do_test.b u64 
    local          pc_genss.do_test.value i64 
    local          pc_genss.do_test.opc i64 
    local          pc_genss.do_test.am i64 
    local          pc_genss.do_test.regcode i64 
    procentry                 
    push           pc_genss.do_test.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8769      i64 
    push           pc_genss.do_test.a u64 
    push           10         
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8769      i64 
    push           pc_genss.do_test.b u64 
    push           9          
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #8769      i64 
    push           pc_genss.do_test.b u64 
    pushptr                   i64 
    pop            pc_genss.do_test.value i64 
    push           pc_genss.do_test.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8770      i64 0
    push           2          i64 
    casejumpeq     #8771      i64 0
    push           4          i64 
    casejumpeq     #8772      i64 0
    popstack                  i64 
    jump           #8773      
#8770: 
    setargs                   1 0
    push           168        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_test.value i64 
    callproc       &pc_genss.genbyte 
    jump           #8774      
#8771: 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           169        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_test.value i64 
    callproc       &pc_genss.genword 
    jump           #8774      
#8772: 
    setargs                   1 0
    push           169        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_test.value i64 
    callproc       &pc_genss.gendword 
    jump           #8774      
#8773: 
    setargs                   1 0
    push           72         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           169        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_test.value i64 
    callproc       &pc_genss.gendword 
#8774: 
    jump           #8775      
#8769: 
    push           pc_genss.do_test.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #8776      i64 
    push           pc_genss.do_test.a u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #8777      i64 
#8776: 
    push           pc_genss.do_test.b u64 
    push           9          
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #8777      i64 
    startmult                 
    push           pc_genss.do_test.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8778      i64 
    push           246        i64 
    resetmult                 
    jump           #8779      
#8778: 
    push           247        i64 
    endmult                   
#8779: 
    pop            pc_genss.do_test.opc i64 
    push           pc_genss.do_test.b u64 
    pushptr                   i64 
    pop            pc_genss.do_test.value i64 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_test.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_test.am i64 
    setargs                   1 0
    push           pc_genss.do_test.a u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_test.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           pc_genss.do_test.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_test.am i64 
    push           pc_genss.do_test.a u64 
    callproc       &pc_genss.genamode 
    push           pc_genss.do_test.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8780      i64 0
    push           2          i64 
    casejumpeq     #8781      i64 0
    popstack                  i64 
    jump           #8782      
#8780: 
    setargs                   1 0
    push           pc_genss.do_test.value i64 
    callproc       &pc_genss.genbyte 
    jump           #8783      
#8781: 
    setargs                   1 0
    push           pc_genss.do_test.value i64 
    callproc       &pc_genss.genword 
    jump           #8783      
#8782: 
    setargs                   1 0
    push           pc_genss.do_test.value i64 
    callproc       &pc_genss.gendword 
#8783: 
    jump           #8775      
#8777: 
    push           pc_genss.do_test.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8784      i64 
    push           pc_genss.do_test.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #8785      i64 
    push           pc_genss.do_test.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #8784      i64 
#8785: 
!doregmem::
#8786: 
    setargs                   1 0
    push           pc_genss.do_test.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_test.regcode i64 
    setargs                   2 0
    push           pc_genss.do_test.regcode i64 
    push           pc_genss.do_test.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_test.am i64 
    setargs                   1 0
    push           pc_genss.do_test.a u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_test.b u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_test.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    startmult                 
    push           pc_genss.do_test.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8787      i64 
    push           132        i64 
    resetmult                 
    jump           #8788      
#8787: 
    push           133        i64 
    endmult                   
#8788: 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_test.am i64 
    push           pc_genss.do_test.b u64 
    callproc       &pc_genss.genamode 
    jump           #8775      
#8784: 
    push           pc_genss.do_test.a u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #8789      i64 
    push           pc_genss.do_test.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8789      i64 
    push           &pc_genss.do_test.a 
    push           &pc_genss.do_test.b 
    swap                      u64 
    jump           #8786      
    jump           #8775      
#8789: 
    setargs                   1 0
    push           "test opnds" u64 
    callproc       &pci_mcl.axerror 
#8775: 
#8790: 
    retproc                   
End


Proc pc_genss.do_loop:
    param          pc_genss.do_loop.a u64 
    param          pc_genss.do_loop.opc i64 
    local          pc_genss.do_loop.offset i64 
    procentry                 
    setargs                   2 0
    setargs                   1 0
    push           9          i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           1          i64 
    add                       i64 
    setargs                   2 0
    push           1          i64 
    push           pc_genss.do_loop.a u64 
    callfn         &pc_genss.getdef u64 
    callfn         &pc_genss.getrel32 i64 
    pop            pc_genss.do_loop.offset i64 
    push           pc_genss.do_loop.offset i64 
    push           0          i64 
    jumpge         #8792      i64 
    push           pc_genss.do_loop.offset i64 
    push           -126       i64 
    jumpge         #8793      i64 
    setargs                   1 0
    push           "loop jmp out of range" u64 
    callproc       &pci_mcl.axerror 
#8793: 
    setargs                   1 0
    push           pc_genss.do_loop.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_loop.offset i64 
    callproc       &pc_genss.genbyte 
    jump           #8794      
#8792: 
    setargs                   1 0
    push           "Can't do loopxx fwd jump" u64 
    callproc       &pci_mcl.axerror 
#8794: 
#8795: 
    retproc                   
End


Proc pc_genss.do_jcxz:
    param          pc_genss.do_jcxz.a u64 
    param          pc_genss.do_jcxz.opsize i64 
    local          pc_genss.do_jcxz.offset i64 
    procentry                 
    setargs                   2 0
    setargs                   1 0
    push           10         i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           1          i64 
    add                       i64 
    setargs                   2 0
    push           1          i64 
    push           pc_genss.do_jcxz.a u64 
    callfn         &pc_genss.getdef u64 
    callfn         &pc_genss.getrel32 i64 
    pop            pc_genss.do_jcxz.offset i64 
    push           pc_genss.do_jcxz.offset i64 
    push           0          i64 
    jumpge         #8797      i64 
    push           pc_genss.do_jcxz.offset i64 
    push           -126       i64 
    jumpge         #8798      i64 
    setargs                   1 0
    push           "jcxz jmp out of range" u64 
    callproc       &pci_mcl.axerror 
#8798: 
    push           pc_genss.do_jcxz.opsize i64 
    push           4          i64 
    jumpne         #8799      i64 
    setargs                   1 0
    push           103        i64 
    callproc       &pc_genss.genbyte 
#8799: 
    setargs                   1 0
    push           227        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_jcxz.offset i64 
    callproc       &pc_genss.genbyte 
    jump           #8800      
#8797: 
    setargs                   1 0
    push           "Can't do jcxz fwd jump" u64 
    callproc       &pci_mcl.axerror 
#8800: 
#8801: 
    retproc                   
End


Proc pc_genss.do_setcc:
    param          pc_genss.do_setcc.cond i64 
    param          pc_genss.do_setcc.a u64 
    local          pc_genss.do_setcc.am i64 
    procentry                 
    push           pc_genss.do_setcc.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #8803      i64 
    push           pc_genss.do_setcc.a u64 
    push           10         
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #8804      i64 
#8803: 
    push           pc_genss.do_setcc.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumple         #8805      i64 
#8804: 
    setargs                   1 0
    push           "setcc opnd/size" u64 
    callproc       &pci_mcl.axerror 
#8805: 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_setcc.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_setcc.am i64 
    setargs                   1 0
    push           pc_genss.do_setcc.a u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           144        i64 
    push           pc_genss.do_setcc.cond i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_setcc.am i64 
    push           pc_genss.do_setcc.a u64 
    callproc       &pc_genss.genamode 
#8806: 
    retproc                   
End


Proc pc_genss.do_movxmm:
    param          pc_genss.do_movxmm.a u64 
    param          pc_genss.do_movxmm.b u64 
    param          pc_genss.do_movxmm.size i64 
    local          pc_genss.do_movxmm.am i64 
    local          pc_genss.do_movxmm.regcode i64 
    local          pc_genss.do_movxmm.regcode1 i64 
    local          pc_genss.do_movxmm.regcode2 i64 
    procentry                 
    push           pc_genss.do_movxmm.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8808      i64 0
    push           5          i64 
    casejumpeq     #8809      i64 0
    push           3          i64 
    casejumpeq     #8810      i64 0
    popstack                  i64 
    jump           #8811      
#8808: 
    push           pc_genss.do_movxmm.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    casejumpeq     #8812      i64 0
    popstack                  i64 
    jump           #8813      
#8812: 
    push           pc_genss.do_movxmm.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_movxmm.size i64 
    jumpeq         #8814      i64 
    setargs                   1 0
    push           "1:movdq size" u64 
    callproc       &pci_mcl.axerror 
#8814: 
    setargs                   1 0
    push           pc_genss.do_movxmm.b u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_movxmm.regcode i64 
    setargs                   2 0
    push           pc_genss.do_movxmm.regcode i64 
    push           pc_genss.do_movxmm.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_movxmm.am i64 
    setargs                   1 0
    push           pc_genss.do_movxmm.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           126        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_movxmm.am i64 
    push           pc_genss.do_movxmm.b u64 
    callproc       &pc_genss.genamode 
    jump           #8815      
#8813: 
    setargs                   1 0
    push           "movdq reg,?" u64 
    callproc       &pci_mcl.axerror 
#8815: 
    jump           #8816      
#8809: 
    push           pc_genss.do_movxmm.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8817      i64 0
    push           5          i64 
    casejumpeq     #8818      i64 0
    push           3          i64 
    casejumpeq     #8819      i64 0
    popstack                  i64 
    jump           #8820      
#8817: 
    push           pc_genss.do_movxmm.b u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_movxmm.size i64 
    jumpeq         #8821      i64 
    setargs                   1 0
    push           "3:movdq size" u64 
    callproc       &pci_mcl.axerror 
#8821: 
    setargs                   1 0
    push           pc_genss.do_movxmm.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_movxmm.regcode i64 
    setargs                   2 0
    push           pc_genss.do_movxmm.regcode i64 
    push           pc_genss.do_movxmm.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_movxmm.am i64 
    setargs                   1 0
    push           pc_genss.do_movxmm.b u64 
    callproc       &pc_genss.setopsize 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           110        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_movxmm.am i64 
    push           pc_genss.do_movxmm.a u64 
    callproc       &pc_genss.genamode 
    jump           #8822      
#8818: 
    setargs                   1 0
    push           pc_genss.do_movxmm.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_movxmm.regcode1 i64 
    setargs                   1 0
    push           pc_genss.do_movxmm.b u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcodebx i64 
    pop            pc_genss.do_movxmm.regcode2 i64 
    setargs                   1 0
    push           243        i64 
    callproc       &pc_genss.genbyte 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           126        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           192        i64 
    push           pc_genss.do_movxmm.regcode1 i64 
    push           3          i64 
    shl                       i64 
    add                       i64 
    push           pc_genss.do_movxmm.regcode2 i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    jump           #8822      
#8819: 
    push           pc_genss.do_movxmm.b u64 
    push           8          
    pushptroff                u8 1 0
    jumpfalse      #8823      i64 
    push           pc_genss.do_movxmm.b u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_movxmm.size i64 
    jumpeq         #8823      i64 
    setargs                   1 0
    push           "4:movdq size" u64 
    callproc       &pci_mcl.axerror 
#8823: 
    setargs                   1 0
    push           pc_genss.do_movxmm.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_movxmm.regcode i64 
    setargs                   2 0
    push           pc_genss.do_movxmm.regcode i64 
    push           pc_genss.do_movxmm.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_movxmm.am i64 
    push           pc_genss.do_movxmm.size i64 
    push           4          i64 
    jumpne         #8824      i64 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           110        i64 
    callproc       &pc_genss.genbyte 
    jump           #8825      
#8824: 
    setargs                   1 0
    push           243        i64 
    callproc       &pc_genss.genbyte 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           126        i64 
    callproc       &pc_genss.genbyte 
#8825: 
    setargs                   2 0
    push           pc_genss.do_movxmm.am i64 
    push           pc_genss.do_movxmm.b u64 
    callproc       &pc_genss.genamode 
    jump           #8822      
#8820: 
    setargs                   1 0
    push           "movdq xreg,?" u64 
    callproc       &pci_mcl.axerror 
#8822: 
    jump           #8816      
#8810: 
    push           pc_genss.do_movxmm.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    casejumpeq     #8826      i64 0
    popstack                  i64 
    jump           #8827      
#8826: 
    push           pc_genss.do_movxmm.a u64 
    push           8          
    pushptroff                u8 1 0
    jumpfalse      #8828      i64 
    push           pc_genss.do_movxmm.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_movxmm.size i64 
    jumpeq         #8828      i64 
    setargs                   1 0
    push           "5:movdq size" u64 
    callproc       &pci_mcl.axerror 
#8828: 
    setargs                   1 0
    push           pc_genss.do_movxmm.b u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_movxmm.regcode i64 
    setargs                   2 0
    push           pc_genss.do_movxmm.regcode i64 
    push           pc_genss.do_movxmm.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_movxmm.am i64 
    push           pc_genss.do_movxmm.size i64 
    push           4          i64 
    jumpne         #8829      i64 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           126        i64 
    callproc       &pc_genss.genbyte 
    jump           #8830      
#8829: 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           214        i64 
    callproc       &pc_genss.genbyte 
#8830: 
    setargs                   2 0
    push           pc_genss.do_movxmm.am i64 
    push           pc_genss.do_movxmm.a u64 
    callproc       &pc_genss.genamode 
    jump           #8831      
#8827: 
    setargs                   1 0
    push           "movdq mem,?" u64 
    callproc       &pci_mcl.axerror 
#8831: 
    jump           #8816      
#8811: 
    setargs                   1 0
    push           "movdq opnds" u64 
    callproc       &pci_mcl.axerror 
#8816: 
#8832: 
    retproc                   
End


Proc pc_genss.do_arithxmm:
    param          pc_genss.do_arithxmm.a u64 
    param          pc_genss.do_arithxmm.b u64 
    param          pc_genss.do_arithxmm.prefix i64 
    param          pc_genss.do_arithxmm.opc i64 
    local          pc_genss.do_arithxmm.am i64 
    local          pc_genss.do_arithxmm.regcode i64 
    procentry                 
    push           pc_genss.do_arithxmm.a u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #8834      i64 
    push           pc_genss.do_arithxmm.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpeq         #8835      i64 
    push           pc_genss.do_arithxmm.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpeq         #8835      i64 
#8834: 
    setargs                   1 0
    push           "arithxmm opnds" u64 
    callproc       &pci_mcl.axerror 
#8835: 
    push           pc_genss.do_arithxmm.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #8836      i64 
    setargs                   1 0
    push           pc_genss.do_arithxmm.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_arithxmm.regcode i64 
    setargs                   2 0
    push           pc_genss.do_arithxmm.regcode i64 
    push           pc_genss.do_arithxmm.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_arithxmm.am i64 
    push           pc_genss.do_arithxmm.prefix i64 
    jumpfalse      #8837      i64 
    setargs                   1 0
    push           pc_genss.do_arithxmm.prefix i64 
    callproc       &pc_genss.genbyte 
#8837: 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_arithxmm.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_arithxmm.am i64 
    push           pc_genss.do_arithxmm.a u64 
    callproc       &pc_genss.genamode 
    jump           #8838      
#8836: 
    setargs                   1 0
    push           pc_genss.do_arithxmm.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_arithxmm.regcode i64 
    setargs                   2 0
    push           pc_genss.do_arithxmm.regcode i64 
    push           pc_genss.do_arithxmm.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_arithxmm.am i64 
    push           pc_genss.do_arithxmm.prefix i64 
    jumpfalse      #8839      i64 
    setargs                   1 0
    push           pc_genss.do_arithxmm.prefix i64 
    callproc       &pc_genss.genbyte 
#8839: 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_arithxmm.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_arithxmm.am i64 
    push           pc_genss.do_arithxmm.b u64 
    callproc       &pc_genss.genamode 
#8838: 
#8840: 
    retproc                   
End


Proc pc_genss.do_logicxmm:
    param          pc_genss.do_logicxmm.a u64 
    param          pc_genss.do_logicxmm.b u64 
    param          pc_genss.do_logicxmm.opc i64 
    param          pc_genss.do_logicxmm.size i64 
    local          pc_genss.do_logicxmm.am i64 
    local          pc_genss.do_logicxmm.regcode i64 
    procentry                 
    push           pc_genss.do_logicxmm.a u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #8842      i64 
    push           pc_genss.do_logicxmm.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpeq         #8843      i64 
    push           pc_genss.do_logicxmm.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpeq         #8843      i64 
#8842: 
    setargs                   1 0
    push           "logicxmm opnds" u64 
    callproc       &pci_mcl.axerror 
#8843: 
    push           pc_genss.do_logicxmm.size i64 
    push           8          i64 
    jumpne         #8844      i64 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
#8844: 
    push           pc_genss.do_logicxmm.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #8845      i64 
    setargs                   1 0
    push           pc_genss.do_logicxmm.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_logicxmm.regcode i64 
    setargs                   2 0
    push           pc_genss.do_logicxmm.regcode i64 
    push           pc_genss.do_logicxmm.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_logicxmm.am i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_logicxmm.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_logicxmm.am i64 
    push           pc_genss.do_logicxmm.b u64 
    callproc       &pc_genss.genamode 
    jump           #8846      
#8845: 
    setargs                   1 0
    push           pc_genss.do_logicxmm.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_logicxmm.regcode i64 
    setargs                   2 0
    push           pc_genss.do_logicxmm.regcode i64 
    push           pc_genss.do_logicxmm.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_logicxmm.am i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_logicxmm.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_logicxmm.am i64 
    push           pc_genss.do_logicxmm.b u64 
    callproc       &pc_genss.genamode 
#8846: 
#8847: 
    retproc                   
End


Proc pc_genss.do_convertfloat:
    param          pc_genss.do_convertfloat.a u64 
    param          pc_genss.do_convertfloat.b u64 
    param          pc_genss.do_convertfloat.prefix i64 
    local          pc_genss.do_convertfloat.am i64 
    local          pc_genss.do_convertfloat.regcode i64 
    procentry                 
    push           pc_genss.do_convertfloat.a u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #8849      i64 
    push           pc_genss.do_convertfloat.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpeq         #8850      i64 
    push           pc_genss.do_convertfloat.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpeq         #8850      i64 
#8849: 
    setargs                   1 0
    push           "convertfloat opnds" u64 
    callproc       &pci_mcl.axerror 
#8850: 
    setargs                   1 0
    push           pc_genss.do_convertfloat.prefix i64 
    callproc       &pc_genss.genbyte 
    push           pc_genss.do_convertfloat.a u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #8851      i64 
    setargs                   1 0
    push           pc_genss.do_convertfloat.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_convertfloat.regcode i64 
    setargs                   2 0
    push           pc_genss.do_convertfloat.regcode i64 
    push           pc_genss.do_convertfloat.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_convertfloat.am i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           90         i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_convertfloat.am i64 
    push           pc_genss.do_convertfloat.b u64 
    callproc       &pc_genss.genamode 
    jump           #8852      
#8851: 
    setargs                   1 0
    push           pc_genss.do_convertfloat.b u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_convertfloat.regcode i64 
    setargs                   2 0
    push           pc_genss.do_convertfloat.regcode i64 
    push           pc_genss.do_convertfloat.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_convertfloat.am i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           90         i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_convertfloat.am i64 
    push           pc_genss.do_convertfloat.b u64 
    callproc       &pc_genss.genamode 
#8852: 
#8853: 
    retproc                   
End


Proc pc_genss.do_fix:
    param          pc_genss.do_fix.a u64 
    param          pc_genss.do_fix.b u64 
    param          pc_genss.do_fix.prefix i64 
    param          pc_genss.do_fix.opc i64 
    local          pc_genss.do_fix.am i64 
    local          pc_genss.do_fix.regcode i64 
    procentry                 
    push           pc_genss.do_fix.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8855      i64 
    push           pc_genss.do_fix.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpeq         #8856      i64 
    push           pc_genss.do_fix.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpeq         #8856      i64 
#8855: 
    setargs                   1 0
    push           "fix opnds" u64 
    callproc       &pci_mcl.axerror 
#8856: 
    setargs                   1 0
    push           pc_genss.do_fix.prefix i64 
    callproc       &pc_genss.genbyte 
    push           pc_genss.do_fix.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #8857      i64 
    setargs                   1 0
    push           pc_genss.do_fix.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_fix.regcode i64 
    setargs                   2 0
    push           pc_genss.do_fix.regcode i64 
    push           pc_genss.do_fix.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_fix.am i64 
    setargs                   1 0
    push           pc_genss.do_fix.a u64 
    callproc       &pc_genss.setopsize 
    jump           #8858      
#8857: 
    setargs                   1 0
    push           pc_genss.do_fix.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_fix.regcode i64 
    setargs                   2 0
    push           pc_genss.do_fix.regcode i64 
    push           pc_genss.do_fix.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_fix.am i64 
    setargs                   1 0
    push           pc_genss.do_fix.a u64 
    callproc       &pc_genss.setopsize 
#8858: 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_fix.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_fix.am i64 
    push           pc_genss.do_fix.b u64 
    callproc       &pc_genss.genamode 
#8859: 
    retproc                   
End


Proc pc_genss.do_float:
    param          pc_genss.do_float.a u64 
    param          pc_genss.do_float.b u64 
    param          pc_genss.do_float.prefix i64 
    local          pc_genss.do_float.am i64 
    local          pc_genss.do_float.regcode i64 
    procentry                 
    push           pc_genss.do_float.a u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #8861      i64 
    push           pc_genss.do_float.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #8862      i64 
    push           pc_genss.do_float.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpeq         #8862      i64 
#8861: 
    setargs                   1 0
    push           "float opnds" u64 
    callproc       &pci_mcl.axerror 
#8862: 
    push           pc_genss.do_float.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #8863      i64 
    push           pc_genss.do_float.b u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #8864      i64 
    push           4          i64 
    push           pc_genss.do_float.b u64 
    push           8          
    popptroff                 u8 1 0
#8864: 
    push           pc_genss.do_float.b u64 
    push           8          
    pushptroff                u8 1 0
    push           4          i64 
    jumpeq         #8865      i64 
    push           pc_genss.do_float.b u64 
    push           8          
    pushptroff                u8 1 0
    push           8          i64 
    jumpeq         #8865      i64 
    setargs                   1 0
    push           "float size" u64 
    callproc       &pci_mcl.axerror 
#8865: 
#8863: 
    setargs                   1 0
    push           pc_genss.do_float.prefix i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_float.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_float.regcode i64 
    setargs                   2 0
    push           pc_genss.do_float.regcode i64 
    push           pc_genss.do_float.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_float.am i64 
    setargs                   1 0
    push           pc_genss.do_float.b u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           42         i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_float.am i64 
    push           pc_genss.do_float.b u64 
    callproc       &pc_genss.genamode 
#8866: 
    retproc                   
End


Proc pc_genss.do_call:
    param          pc_genss.do_call.a u64 
    local          pc_genss.do_call.am i64 
    local          pc_genss.do_call.regcode i64 
    procentry                 
    push           pc_genss.do_call.a u64 
    push           9          
    pushptroff                u8 1 0
    push           2          i64 
    casejumpeq     #8868      i64 0
    popstack                  i64 
    jump           #8869      
#8868: 
    setargs                   1 0
    push           232        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_call.a u64 
    callproc       &pc_genss.genrel32 
    jump           #8870      
#8869: 
    push           pc_genss.do_call.a u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    casejumpeq     #8871      i64 0
    push           1          i64 
    casejumpeq     #8872      i64 0
    push           2          i64 
    casejumpeq     #8872      i64 0
    push           4          i64 
    casejumpeq     #8872      i64 0
    popstack                  i64 
    jump           #8873      
#8871: 
    push           8          i64 
    push           pc_genss.do_call.a u64 
    push           8          
    popptroff                 u8 1 0
    jump           #8874      
#8872: 
    setargs                   1 0
    push           "call[]size" u64 
    callproc       &pci_mcl.axerror 
    jump           #8874      
#8873: 
#8874: 
    setargs                   2 0
    push           2          i64 
    push           pc_genss.do_call.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_call.am i64 
    setargs                   1 0
    push           pc_genss.do_call.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   1 0
    push           pc_genss.do_call.a u64 
    callproc       &pc_genss.setaddrsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           255        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_call.am i64 
    push           pc_genss.do_call.a u64 
    callproc       &pc_genss.genamode 
#8870: 
#8875: 
    retproc                   
End


Proc pc_genss.do_jmp:
    param          pc_genss.do_jmp.a u64 
    param          pc_genss.do_jmp.m u64 
    local          pc_genss.do_jmp.am i64 
    local          pc_genss.do_jmp.regcode i64 
    local          pc_genss.do_jmp.offset i64 
    local          pc_genss.do_jmp.shortjmp i64 
    local          pc_genss.do_jmp.d u64 
    procentry                 
    push           pc_genss.do_jmp.a u64 
    push           9          
    pushptroff                u8 1 0
    push           2          i64 
    casejumpeq     #8877      i64 0
    popstack                  i64 
    jump           #8878      
#8877: 
    push           pc_genss.do_jmp.a u64 
    push           12         
    pushptroff                u8 1 0
    push           7          i64 
    casejumpeq     #8879      i64 0
    push           5          i64 
    casejumpeq     #8879      i64 0
    popstack                  i64 
    jump           #8880      
#8879: 
    setargs                   2 0
    push           1          i64 
    push           pc_genss.do_jmp.a u64 
    callfn         &pc_genss.getdef u64 
    pop            pc_genss.do_jmp.d u64 
    setargs                   2 0
    setargs                   1 0
    push           11         i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           1          i64 
    add                       i64 
    push           pc_genss.do_jmp.d u64 
    callfn         &pc_genss.getrel32 i64 
    push           pc_genss.do_jmp.a u64 
    push           14         
    pushptroff                i32 1 0
    add                       i64 
    pop            pc_genss.do_jmp.offset i64 
    push           pc_genss.do_jmp.offset i64 
    push           0          i64 
    jumpge         #8881      i64 
    push           pc_genss.do_jmp.offset i64 
    push           -126       i64 
    jumple         #8881      i64 
    setargs                   1 0
    push           235        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_jmp.offset i64 
    callproc       &pc_genss.genbyte 
    jump           #8882      
#8881: 
    push           0          i64 
    pop            pc_genss.do_jmp.shortjmp i64 
    push           pc_genss.do_jmp.offset i64 
    push           0          i64 
    jumple         #8883      i64 
    setargs                   2 0
    push           pc_genss.do_jmp.d u64 
    push           pc_genss.do_jmp.m u64 
    callfn         &pc_genss.checkshortjump i64 
    pop            pc_genss.do_jmp.shortjmp i64 
#8883: 
    push           pc_genss.do_jmp.shortjmp i64 
    jumptrue       #8884      i64 
    setargs                   1 0
    push           233        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_jmp.a u64 
    callproc       &pc_genss.genrel32 
    jump           #8885      
#8884: 
    setargs                   1 0
    push           235        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_jmp.a u64 
    callproc       &pc_genss.genrel8 
#8885: 
#8882: 
    jump           #8886      
#8880: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pci_mcl.valtypenames 
    push           pc_genss.do_jmp.a u64 
    push           12         
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "JMP/IMM NOT LABELNO" u64 
    callproc       &pci_mcl.axerror 
#8886: 
    jump           #8887      
#8878: 
    push           pc_genss.do_jmp.a u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    casejumpeq     #8888      i64 0
    push           1          i64 
    casejumpeq     #8889      i64 0
    push           2          i64 
    casejumpeq     #8889      i64 0
    push           4          i64 
    casejumpeq     #8889      i64 0
    popstack                  i64 
    jump           #8890      
#8888: 
    push           8          i64 
    push           pc_genss.do_jmp.a u64 
    push           8          
    popptroff                 u8 1 0
    jump           #8891      
#8889: 
    setargs                   1 0
    push           "jmp[]size" u64 
    callproc       &pci_mcl.axerror 
    jump           #8891      
#8890: 
#8891: 
    setargs                   2 0
    push           4          i64 
    push           pc_genss.do_jmp.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_jmp.am i64 
    setargs                   1 0
    push           pc_genss.do_jmp.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   1 0
    push           pc_genss.do_jmp.a u64 
    callproc       &pc_genss.setaddrsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           255        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_jmp.am i64 
    push           pc_genss.do_jmp.a u64 
    callproc       &pc_genss.genamode 
#8887: 
#8892: 
    retproc                   
End


Proc pc_genss.getcurrdatalen: i64
    param          pc_genss.getcurrdatalen.id i64 
    procentry                 
    push           pc_genss.currseg i64 
    push           3          i64 
    jumpne         #8894      i64 
    push           pci_mcl.ss_zdatalen i64 
    setret                    i64 
    jump           #8895      
#8894: 
    setargs                   1 0
    push           pc_genss.currdata u64 
    callfn         &pc_genss.bufferlength i64 
    setret                    i64 
    jump           #8895      
#8895: 
    retfn                     i64 
End


Proc pc_genss.do_cmovcc:
    param          pc_genss.do_cmovcc.cond i64 
    param          pc_genss.do_cmovcc.a u64 
    param          pc_genss.do_cmovcc.b u64 
    local          pc_genss.do_cmovcc.am i64 
    local          pc_genss.do_cmovcc.regcode i64 
    procentry                 
    push           pc_genss.do_cmovcc.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_cmovcc.b u64 
    push           8          
    pushptroff                u8 1 0
    jumpeq         #8897      i64 
    push           pc_genss.do_cmovcc.b u64 
    push           8          
    pushptroff                u8 1 0
    jumpfalse      #8897      i64 
    setargs                   1 0
    push           "3:Opnd size mismatch" u64 
    callproc       &pci_mcl.axerror 
#8897: 
    push           pc_genss.do_cmovcc.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8898      i64 
    setargs                   1 0
    push           "cmov/byte" u64 
    callproc       &pci_mcl.axerror 
#8898: 
    setargs                   1 0
    push           pc_genss.do_cmovcc.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_cmovcc.regcode i64 
    setargs                   2 0
    push           pc_genss.do_cmovcc.regcode i64 
    push           pc_genss.do_cmovcc.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_cmovcc.am i64 
    setargs                   1 0
    push           pc_genss.do_cmovcc.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           64         i64 
    push           pc_genss.do_cmovcc.cond i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_cmovcc.am i64 
    push           pc_genss.do_cmovcc.b u64 
    callproc       &pc_genss.genamode 
#8899: 
    retproc                   
End


Proc pc_genss.do_fmem:
    param          pc_genss.do_fmem.a u64 
    param          pc_genss.do_fmem.freal i64 
    param          pc_genss.do_fmem.code i64 
    local          pc_genss.do_fmem.am i64 
    local          pc_genss.do_fmem.regcode i64 
    local          pc_genss.do_fmem.mf i64 
    procentry                 
    push           pc_genss.do_fmem.a u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpeq         #8901      i64 
    setargs                   1 0
    push           "fmem/not mem" u64 
    callproc       &pci_mcl.axerror 
#8901: 
    push           pc_genss.do_fmem.freal i64 
    jumpfalse      #8902      i64 
    push           pc_genss.do_fmem.a u64 
    push           8          
    pushptroff                u8 1 0
    push           4          i64 
    casejumpeq     #8903      i64 0
    push           8          i64 
    casejumpeq     #8904      i64 0
    push           16         i64 
    casejumpeq     #8905      i64 0
    popstack                  i64 
    jump           #8906      
#8903: 
    push           0          i64 
    pop            pc_genss.do_fmem.mf i64 
    jump           #8907      
#8904: 
    push           2          i64 
    pop            pc_genss.do_fmem.mf i64 
    jump           #8907      
#8905: 
    push           1          i64 
    pop            pc_genss.do_fmem.mf i64 
    push           pc_genss.do_fmem.code i64 
    push           0          i64 
    casejumpeq     #8908      i64 0
    push           3          i64 
    casejumpeq     #8909      i64 0
    popstack                  i64 
    jump           #8910      
#8908: 
    push           5          i64 
    pop            pc_genss.do_fmem.code i64 
    jump           #8911      
#8909: 
    push           7          i64 
    pop            pc_genss.do_fmem.code i64 
    jump           #8911      
#8910: 
    setargs                   1 0
    push           "r80 not allowed" u64 
    callproc       &pci_mcl.axerror 
#8911: 
    jump           #8907      
#8906: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "SIZE="    u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_genss.do_fmem.a u64 
    push           8          
    pushptroff                u8 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "fmem size" u64 
    callproc       &pci_mcl.axerror 
#8907: 
    jump           #8912      
#8902: 
    push           pc_genss.do_fmem.a u64 
    push           8          
    pushptroff                u8 1 0
    push           2          i64 
    casejumpeq     #8913      i64 0
    push           4          i64 
    casejumpeq     #8914      i64 0
    push           8          i64 
    casejumpeq     #8915      i64 0
    popstack                  i64 
    jump           #8916      
#8913: 
    push           3          i64 
    pop            pc_genss.do_fmem.mf i64 
    jump           #8917      
#8914: 
    push           1          i64 
    pop            pc_genss.do_fmem.mf i64 
    jump           #8917      
#8915: 
    push           3          i64 
    pop            pc_genss.do_fmem.mf i64 
    push           pc_genss.do_fmem.code i64 
    push           0          i64 
    casejumpeq     #8918      i64 0
    push           3          i64 
    casejumpeq     #8919      i64 0
    popstack                  i64 
    jump           #8920      
#8918: 
    push           5          i64 
    pop            pc_genss.do_fmem.code i64 
    jump           #8921      
#8919: 
    push           7          i64 
    pop            pc_genss.do_fmem.code i64 
    jump           #8921      
#8920: 
    setargs                   1 0
    push           "fst i64?" u64 
    callproc       &pci_mcl.axerror 
#8921: 
    jump           #8917      
#8916: 
    setargs                   1 0
    push           "fmem int size" u64 
    callproc       &pci_mcl.axerror 
#8917: 
#8912: 
    setargs                   2 0
    push           pc_genss.do_fmem.code i64 
    push           pc_genss.do_fmem.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_fmem.am i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           217        i64 
    push           pc_genss.do_fmem.mf i64 
    push           1          i64 
    shl                       i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_fmem.am i64 
    push           pc_genss.do_fmem.a u64 
    callproc       &pc_genss.genamode 
#8922: 
    retproc                   
End


Proc pc_genss.genrel8:
    param          pc_genss.genrel8.a u64 
    local          pc_genss.genrel8.d u64 
    procentry                 
    setargs                   2 0
    push           1          i64 
    push           pc_genss.genrel8.a u64 
    callfn         &pc_genss.getdef u64 
    pop            pc_genss.genrel8.d u64 
    push           pc_genss.genrel8.d u64 
    push           29         
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8924      i64 
    setargs                   4 0
    push           0          i64 
    push           6          i64 
    setargs                   1 0
    push           3          i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           pc_genss.genrel8.d u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_genss.addfwdref u64 
    push           pc_genss.genrel8.d u64 
    push           8          
    popptroff                 u64 1 0
    setargs                   1 0
    push           0          i64 
    callproc       &pc_genss.genbyte 
    jump           #8925      
#8924: 
    setargs                   1 0
    push           "genrel8"  u64 
    callproc       &pci_mcl.axerror 
#8925: 
#8926: 
    retproc                   
End


Proc pc_genss.checkshortjump: i64
    param          pc_genss.checkshortjump.m u64 
    param          pc_genss.checkshortjump.d u64 
    local          pc_genss.checkshortjump.n i64 
    procentry                 
    push           0          i64 
    pop            pc_genss.checkshortjump.n i64 
    push           pc_genss.checkshortjump.m u64 
    pushptr                   u64 
    pop            pc_genss.checkshortjump.m u64 
    jump           #8928      
#8929: 
    push           pc_genss.checkshortjump.m u64 
    push           24         
    pushptroff                u8 1 0
    push           9          i64 
    casejumpeq     #8930      i64 0
    push           3          i64 
    casejumpeq     #8931      i64 0
    push           4          i64 
    casejumpeq     #8931      i64 0
    popstack                  i64 
    jump           #8932      
#8930: 
    push           pc_genss.checkshortjump.m u64 
    push           8          
    pushptroff                u64 1 0
    pushptr                   i64 
    push           pc_genss.checkshortjump.d u64 
    push           40         
    pushptroff                i32 1 0
    jumpne         #8933      i64 
    push           1          i64 
    setret                    i64 
    jump           #8934      
#8933: 
    jump           #8935      
#8931: 
    jump           #8935      
#8932: 
    push           &pc_genss.checkshortjump.n 
    incr                      i64 1
#8935: 
    push           pc_genss.checkshortjump.m u64 
    pushptr                   u64 
    pop            pc_genss.checkshortjump.m u64 
#8928: 
    push           pc_genss.checkshortjump.m u64 
    jumpfalse      #8936      u64 
    push           pc_genss.checkshortjump.n i64 
    push           8          i64 
    jumple         #8929      i64 
#8936: 
#8937: 
    push           0          i64 
    setret                    i64 
    jump           #8934      
#8934: 
    retfn                     i64 
End


Proc pc_genss.addfwdref: u64
    param          pc_genss.addfwdref.p u64 
    param          pc_genss.addfwdref.offset i64 
    param          pc_genss.addfwdref.reltype i64 
    param          pc_genss.addfwdref.seg i64 
    local          pc_genss.addfwdref.q u64 
    procentry                 
    setargs                   1 0
    push           16         i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pc_genss.addfwdref.q u64 
    push           pc_genss.addfwdref.p u64 
    push           pc_genss.addfwdref.q u64 
    push           0          
    popptroff                 u64 1 0
    push           pc_genss.addfwdref.offset i64 
    push           pc_genss.addfwdref.q u64 
    push           8          
    popptroff                 i32 1 0
    push           pc_genss.addfwdref.reltype i64 
    push           pc_genss.addfwdref.q u64 
    push           12         
    popptroff                 i16 1 0
    push           pc_genss.addfwdref.seg i64 
    push           pc_genss.addfwdref.q u64 
    push           14         
    popptroff                 i16 1 0
    push           pc_genss.addfwdref.q u64 
    setret                    u64 
    jump           #8939      
#8939: 
    retfn                     u64 
End


Proc pc_genss.switchseg:
    param          pc_genss.switchseg.newseg i64 
    procentry                 
    push           pc_genss.switchseg.newseg i64 
    push           pc_genss.currseg i64 
    jumpne         #8941      i64 
    jump           #8942      
#8941: 
    push           pc_genss.currseg i64 
    push           1          i64 
    casejumpeq     #8943      i64 0
    push           2          i64 
    casejumpeq     #8944      i64 0
    popstack                  i64 
    jump           #8945      
#8943: 
    push           pc_genss.currrelocs u64 
    pop            pci_mcl.ss_coderelocs u64 
    push           pc_genss.nrelocs i64 
    pop            pci_mcl.ss_ncoderelocs i64 
    jump           #8946      
#8944: 
    push           pc_genss.currrelocs u64 
    pop            pci_mcl.ss_idatarelocs u64 
    push           pc_genss.nrelocs i64 
    pop            pci_mcl.ss_nidatarelocs i64 
    jump           #8946      
#8945: 
#8946: 
    push           pc_genss.switchseg.newseg i64 
    pop            pc_genss.currseg i64 
    push           pc_genss.currseg i64 
    push           1          i64 
    casejumpeq     #8947      i64 0
    push           2          i64 
    casejumpeq     #8948      i64 0
    push           3          i64 
    casejumpeq     #8949      i64 0
    popstack                  i64 
    jump           #8950      
#8947: 
    push           pci_mcl.ss_code u64 
    pop            pc_genss.currdata u64 
    push           pci_mcl.ss_coderelocs u64 
    pop            pc_genss.currrelocs u64 
    push           pci_mcl.ss_ncoderelocs i64 
    pop            pc_genss.nrelocs i64 
    jump           #8951      
#8948: 
    push           pci_mcl.ss_idata u64 
    pop            pc_genss.currdata u64 
    push           pci_mcl.ss_idatarelocs u64 
    pop            pc_genss.currrelocs u64 
    push           pci_mcl.ss_nidatarelocs i64 
    pop            pc_genss.nrelocs i64 
    jump           #8951      
#8949: 
    push           pci_mcl.ss_zdata u64 
    pop            pc_genss.currdata u64 
    jump           #8951      
#8950: 
#8951: 
#8942: 
    retproc                   
End


Proc pc_genss.do_movdqx:
    param          pc_genss.do_movdqx.a u64 
    param          pc_genss.do_movdqx.b u64 
    param          pc_genss.do_movdqx.opc i64 
    local          pc_genss.do_movdqx.am i64 
    local          pc_genss.do_movdqx.regcode i64 
    procentry                 
    push           pc_genss.do_movdqx.a u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    casejumpeq     #8953      i64 0
    push           3          i64 
    casejumpeq     #8954      i64 0
    popstack                  i64 
    jump           #8955      
#8953: 
    push           pc_genss.do_movdqx.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    casejumpeq     #8956      i64 0
    push           3          i64 
    casejumpeq     #8957      i64 0
    popstack                  i64 
    jump           #8958      
#8956: 
    setargs                   1 0
    push           pc_genss.do_movdqx.b u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcodebx i64 
    pop            pc_genss.do_movdqx.regcode i64 
    setargs                   2 0
    push           pc_genss.do_movdqx.regcode i64 
    push           pc_genss.do_movdqx.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_movdqx.am i64 
    setargs                   1 0
    push           pc_genss.do_movdqx.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           111        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_movdqx.am i64 
    push           pc_genss.do_movdqx.a u64 
    callproc       &pc_genss.genamode 
    jump           #8959      
#8957: 
    setargs                   1 0
    push           pc_genss.do_movdqx.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_movdqx.regcode i64 
    setargs                   2 0
    push           pc_genss.do_movdqx.regcode i64 
    push           pc_genss.do_movdqx.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_movdqx.am i64 
    setargs                   1 0
    push           pc_genss.do_movdqx.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           111        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_movdqx.am i64 
    push           pc_genss.do_movdqx.b u64 
    callproc       &pc_genss.genamode 
    jump           #8959      
#8958: 
    setargs                   1 0
    push           "movdqx?"  u64 
    callproc       &pci_mcl.axerror 
#8959: 
    jump           #8960      
#8954: 
    push           pc_genss.do_movdqx.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    casejumpeq     #8961      i64 0
    popstack                  i64 
    jump           #8962      
#8961: 
    setargs                   1 0
    push           pc_genss.do_movdqx.b u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_movdqx.regcode i64 
    setargs                   2 0
    push           pc_genss.do_movdqx.regcode i64 
    push           pc_genss.do_movdqx.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_movdqx.am i64 
    setargs                   1 0
    push           pc_genss.do_movdqx.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           127        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_movdqx.am i64 
    push           pc_genss.do_movdqx.a u64 
    callproc       &pc_genss.genamode 
    jump           #8963      
#8962: 
    setargs                   1 0
    push           "movdqx"   u64 
    callproc       &pci_mcl.axerror 
#8963: 
    jump           #8960      
#8955: 
    setargs                   1 0
    push           "movdqx"   u64 
    callproc       &pci_mcl.axerror 
#8960: 
#8964: 
    retproc                   
End


Proc pc_genss.do_popcnt:
    param          pc_genss.do_popcnt.a u64 
    param          pc_genss.do_popcnt.b u64 
    local          pc_genss.do_popcnt.am i64 
    local          pc_genss.do_popcnt.regcode i64 
    procentry                 
    push           pc_genss.do_popcnt.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #8966      i64 
    push           pc_genss.do_popcnt.b u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #8967      i64 
    push           8          i64 
    push           pc_genss.do_popcnt.b u64 
    push           8          
    popptroff                 u8 1 0
#8967: 
#8966: 
    setargs                   1 0
    push           243        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_popcnt.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcodebx i64 
    pop            pc_genss.do_popcnt.regcode i64 
    setargs                   2 0
    push           pc_genss.do_popcnt.regcode i64 
    push           pc_genss.do_popcnt.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_popcnt.am i64 
    setargs                   1 0
    push           pc_genss.do_popcnt.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           184        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_popcnt.am i64 
    push           pc_genss.do_popcnt.b u64 
    callproc       &pc_genss.genamode 
#8968: 
    retproc                   
End


Proc pc_genss.do_bsf:
    param          pc_genss.do_bsf.a u64 
    param          pc_genss.do_bsf.b u64 
    param          pc_genss.do_bsf.opc i64 
    local          pc_genss.do_bsf.am i64 
    local          pc_genss.do_bsf.regcode i64 
    procentry                 
    push           pc_genss.do_bsf.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #8970      i64 
    push           pc_genss.do_bsf.b u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #8971      i64 
    push           8          i64 
    push           pc_genss.do_bsf.b u64 
    push           8          
    popptroff                 u8 1 0
#8971: 
#8970: 
    push           pc_genss.do_bsf.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_bsf.b u64 
    push           8          
    pushptroff                u8 1 0
    jumpeq         #8972      i64 
    setargs                   1 0
    push           "bsf size" u64 
    callproc       &pci_mcl.axerror 
#8972: 
    setargs                   1 0
    push           pc_genss.do_bsf.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcodebx i64 
    pop            pc_genss.do_bsf.regcode i64 
    setargs                   2 0
    push           pc_genss.do_bsf.regcode i64 
    push           pc_genss.do_bsf.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_bsf.am i64 
    setargs                   1 0
    push           pc_genss.do_bsf.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_bsf.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_bsf.am i64 
    push           pc_genss.do_bsf.b u64 
    callproc       &pc_genss.genamode 
#8973: 
    retproc                   
End


Proc pc_genss.extendsymboltable:
    local          pc_genss.extendsymboltable.oldsymboltable u64 
    local          pc_genss.extendsymboltable.oldsymboltablesize i64 
    local          pc_genss.extendsymboltable.i i64 
    procentry                 
    push           pci_mcl.ss_symboltablesize i64 
    pop            pc_genss.extendsymboltable.oldsymboltablesize i64 
    push           pci_mcl.ss_symboltable u64 
    pop            pc_genss.extendsymboltable.oldsymboltable u64 
    push           &pci_mcl.ss_symboltablesize 
    push           2          i64 
    multo                     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "EXTENDING SYMBOL TABLE TO" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.ss_symboltablesize i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           8          i64 
    push           pci_mcl.ss_symboltablesize i64 
    mul                       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pci_mcl.ss_symboltable u64 
#8975: 
    push           1          i64 
    pop            pc_genss.extendsymboltable.i i64 
    push           pci_mcl.ss_nsymbols i64 
    push           1          i64 
    jumplt         #8976      i64 
#8977: 
    push           pc_genss.extendsymboltable.oldsymboltable u64 
    push           pc_genss.extendsymboltable.i i64 
    pushptroff                u64 8 -8
    push           pci_mcl.ss_symboltable u64 
    push           pc_genss.extendsymboltable.i i64 
    popptroff                 u64 8 -8
#8978: 
    forup          #8977      i64 1
    opnd           pc_genss.extendsymboltable.i 
    opnd           pci_mcl.ss_nsymbols 
#8976: 
    setargs                   2 0
    push           8          i64 
    push           pc_genss.extendsymboltable.oldsymboltablesize i64 
    mul                       i64 
    push           pc_genss.extendsymboltable.oldsymboltable u64 
    callproc       &mlibp.pcm_free 
#8979: 
    retproc                   
End


Proc pc_genss.fixregvar:
    local          pc_genss.fixregvar.m u64 
    procentry                 
    push           pci_mcl.mccode u64 
    pop            pc_genss.fixregvar.m u64 
#8981: 
    retproc                   
End


Proc pc_genss.initlib:
    param          pc_genss.initlib.nlabels i64 
    local          pc_genss.initlib.str block:256 
    local          pc_genss.initlib.i i64 
    procentry                 
    setargs                   1 0
    push           262144     i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pci_mcl.ss_symboltable u64 
    push           32768      i64 
    pop            pci_mcl.ss_symboltablesize i64 
    push           0          i64 
    pop            pci_mcl.ss_nsymbols i64 
    setargs                   1 0
    push           pc_genss.initlib.nlabels i64 
    push           8          i64 
    mul                       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pci_mcl.labeldeftable u64 
#8983: 
    push           1          i64 
    pop            pc_genss.initlib.i i64 
    push           pc_genss.initlib.nlabels i64 
    push           1          i64 
    jumplt         #8984      i64 
#8985: 
    setargs                   1 0
    push           51         i64 
    callfn         &mlibp.pcm_allocz u64 
    push           pci_mcl.labeldeftable u64 
    push           pc_genss.initlib.i i64 
    popptroff                 u64 8 -8
    push           pc_genss.initlib.i i64 
    push           pci_mcl.labeldeftable u64 
    push           pc_genss.initlib.i i64 
    pushptroff                u64 8 -8
    push           40         
    popptroff                 i32 1 0
    setargs                   1 0
    push           &pc_genss.initlib.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "(L#)"     u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           pc_genss.initlib.i i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           &pc_genss.initlib.str 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           pci_mcl.labeldeftable u64 
    push           pc_genss.initlib.i i64 
    pushptroff                u64 8 -8
    push           0          
    popptroff                 u64 1 0
    push           1          i64 
    push           pci_mcl.labeldeftable u64 
    push           pc_genss.initlib.i i64 
    pushptroff                u64 8 -8
    push           29         
    popptroff                 u8 1 0
#8986: 
    forup          #8985      i64 1
    opnd           pc_genss.initlib.i 
    opnd           pc_genss.initlib.nlabels 
#8984: 
#8987: 
    retproc                   
End


Proc pc_genss.buffercreate: u64
    param          pc_genss.buffercreate.size i64 
    local          pc_genss.buffercreate.a u64 
    procentry                 
    setargs                   1 0
    push           32         i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pc_genss.buffercreate.a u64 
    push           pc_genss.buffercreate.size i64 
    push           pc_genss.buffercreate.a u64 
    push           24         
    popptroff                 i64 1 0
    setargs                   1 0
    push           pc_genss.buffercreate.a u64 
    push           24         
    pushptroff                i64 1 0
    callfn         &mlibp.pcm_alloc u64 
    push           pc_genss.buffercreate.a u64 
    push           8          
    storeptroff               u64 1 0
    push           pc_genss.buffercreate.a u64 
    push           0          
    popptroff                 u64 1 0
    push           pc_genss.buffercreate.a u64 
    pushptr                   u64 
    push           pc_genss.buffercreate.a u64 
    push           24         
    pushptroff                i64 1 0
    addrefoff                 u64 1 0
    push           pc_genss.buffercreate.a u64 
    push           16         
    popptroff                 u64 1 0
    push           pc_genss.buffercreate.a u64 
    setret                    u64 
    jump           #8989      
#8989: 
    retfn                     u64 
End


Proc pc_genss.bufferexpand:
    param          pc_genss.bufferexpand.a u64 
    local          pc_genss.bufferexpand.newalloc i64 
    local          pc_genss.bufferexpand.usedbytes i64 
    local          pc_genss.bufferexpand.p u64 
    procentry                 
    push           pc_genss.bufferexpand.a u64 
    push           24         
    pushptroff                i64 1 0
    push           2          i64 
    mul                       i64 
    pop            pc_genss.bufferexpand.newalloc i64 
    push           pc_genss.bufferexpand.a u64 
    push           8          
    pushptroff                u64 1 0
    push           pc_genss.bufferexpand.a u64 
    pushptr                   u64 
    subref                    i64 1
    pop            pc_genss.bufferexpand.usedbytes i64 
    push           pc_genss.bufferexpand.usedbytes i64 
    push           pc_genss.bufferexpand.a u64 
    push           24         
    pushptroff                i64 1 0
    jumple         #8991      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "dbuffer error" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           0          
    stop                      
#8991: 
    setargs                   1 0
    push           pc_genss.bufferexpand.newalloc i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pc_genss.bufferexpand.p u64 
    setargs                   3 0
    push           pc_genss.bufferexpand.usedbytes u64 
    push           pc_genss.bufferexpand.a u64 
    pushptr                   u64 
    push           pc_genss.bufferexpand.p u64 
    callproc       &memcpy    
    push           pc_genss.bufferexpand.p u64 
    push           pc_genss.bufferexpand.a u64 
    push           0          
    popptroff                 u64 1 0
    push           pc_genss.bufferexpand.p u64 
    push           pc_genss.bufferexpand.usedbytes i64 
    addrefoff                 u64 1 0
    push           pc_genss.bufferexpand.a u64 
    push           8          
    popptroff                 u64 1 0
    push           pc_genss.bufferexpand.newalloc i64 
    push           pc_genss.bufferexpand.a u64 
    push           24         
    popptroff                 i64 1 0
    push           pc_genss.bufferexpand.p u64 
    push           pc_genss.bufferexpand.newalloc i64 
    addrefoff                 u64 1 0
    push           pc_genss.bufferexpand.a u64 
    push           16         
    popptroff                 u64 1 0
#8992: 
    retproc                   
End


Proc pc_genss.buffercheck:
    param          pc_genss.buffercheck.a u64 
    param          pc_genss.buffercheck.n i64 
    procentry                 
    jump           #8994      
#8995: 
    setargs                   1 0
    push           pc_genss.buffercheck.a u64 
    callproc       &pc_genss.bufferexpand 
#8994: 
    push           pc_genss.buffercheck.a u64 
    push           16         
    pushptroff                u64 1 0
    push           pc_genss.buffercheck.a u64 
    push           8          
    pushptroff                u64 1 0
    subref                    i64 1
    push           pc_genss.buffercheck.n i64 
    jumplt         #8995      i64 
#8996: 
#8997: 
    retproc                   
End


Proc pc_genss.bufferlength: i64
    param          pc_genss.bufferlength.a u64 
    procentry                 
    push           pc_genss.bufferlength.a u64 
    push           8          
    pushptroff                u64 1 0
    push           pc_genss.bufferlength.a u64 
    pushptr                   u64 
    subref                    i64 1
    setret                    i64 
    jump           #8999      
#8999: 
    retfn                     i64 
End


Proc pc_genss.bufferelemptr: u64
    param          pc_genss.bufferelemptr.a u64 
    param          pc_genss.bufferelemptr.offset i64 
    procentry                 
    push           pc_genss.bufferelemptr.a u64 
    pushptr                   u64 
    push           pc_genss.bufferelemptr.offset i64 
    addrefoff                 u64 1 0
    setret                    u64 
    jump           #9001      
#9001: 
    retfn                     u64 
End


Proc pc_genss.addword:
    param          pc_genss.addword.a u64 
    param          pc_genss.addword.x i64 
    procentry                 
    push           pc_genss.addword.x i64 
    push           pc_genss.addword.a u64 
    push           8          
    pushptroff                u64 1 0
    popptr                    u16 
    push           pc_genss.addword.a u64 
    push           8          
    addrefoff                 u64 1 0
    incr                      u64 2
#9003: 
    retproc                   
End


Proc pc_genss.adddword:
    param          pc_genss.adddword.a u64 
    param          pc_genss.adddword.x i64 
    procentry                 
    push           pc_genss.adddword.x i64 
    push           pc_genss.adddword.a u64 
    push           8          
    pushptroff                u64 1 0
    popptr                    u32 
    push           pc_genss.adddword.a u64 
    push           8          
    addrefoff                 u64 1 0
    incr                      u64 4
#9005: 
    retproc                   
End


Proc pc_genss.addqword:
    param          pc_genss.addqword.a u64 
    param          pc_genss.addqword.x i64 
    procentry                 
    push           pc_genss.addqword.x u64 
    push           pc_genss.addqword.a u64 
    push           8          
    pushptroff                u64 1 0
    popptr                    u64 
    push           pc_genss.addqword.a u64 
    push           8          
    addrefoff                 u64 1 0
    incr                      u64 8
#9007: 
    retproc                   
End


Proc pc_writeexe.writeexe:
    param          pc_writeexe.writeexe.outfile u64 
    param          pc_writeexe.writeexe.dodll i64 
    local          pc_writeexe.writeexe.header block:20 
    local          pc_writeexe.writeexe.optheader block:240 
    local          pc_writeexe.writeexe.offset i64 
    local          pc_writeexe.writeexe.i i64 
    local          pc_writeexe.writeexe.aa i64 
    procentry                 
    push           pc_writeexe.writeexe.outfile u64 
    pop            pc_writeexe.dllfilename u64 
    push           pc_writeexe.writeexe.dodll i64 
    pop            pc_writeexe.isdll i64 
    setargs                   1 0
    push           pc_writeexe.filesize i64 
    callfn         &mlibp.pcm_allocz u64 
    store          pc_writeexe.dataptr u64 
    pop            pc_writeexe.datastart u64 
    setargs                   0 0
    callproc       &pc_writeexe.writedosstub 
    setargs                   0 0
    callproc       &pc_writeexe.writepesig 
    setargs                   0 0
    callproc       &pc_writeexe.writefileheader 
    setargs                   0 0
    callproc       &pc_writeexe.writeoptheader 
#9009: 
    push           1          i64 
    pop            pc_writeexe.writeexe.i i64 
    push           pc_writeexe.nsections i64 
    push           1          i64 
    jumplt         #9010      i64 
#9011: 
    setargs                   1 0
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.writeexe.i i64 
    addrefoff                 block:72 72 -72
    callproc       &pc_writeexe.writesectionheader 
#9012: 
    forup          #9011      i64 1
    opnd           pc_writeexe.writeexe.i 
    opnd           pc_writeexe.nsections 
#9010: 
    setargs                   1 0
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           32         
    pushptroff                i64 1 0
    callproc       &pc_writeexe.writepadding 
#9013: 
    push           1          i64 
    pop            pc_writeexe.writeexe.i i64 
    push           pc_writeexe.nsections i64 
    push           1          i64 
    jumplt         #9014      i64 
#9015: 
    setargs                   1 0
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.writeexe.i i64 
    addrefoff                 block:72 72 -72
    callproc       &pc_writeexe.writesectiondata 
#9016: 
    forup          #9015      i64 1
    opnd           pc_writeexe.writeexe.i 
    opnd           pc_writeexe.nsections 
#9014: 
    setargs                   3 0
    push           pc_writeexe.dataptr u64 
    push           pc_writeexe.datastart u64 
    subref                    i64 1
    push           pc_writeexe.datastart u64 
    push           pc_writeexe.writeexe.outfile u64 
    callfn         &mlibp.writefile i64 
    push           0          i64 
    jumpne         #9017      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Error writing exe file (possibly still running)" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#9017: 
#9018: 
    retproc                   
End


Proc pc_writeexe.genexe:
    param          pc_writeexe.genexe.entrypoint u64 
    param          pc_writeexe.genexe.outfile u64 
    param          pc_writeexe.genexe.dodll i64 
    procentry                 
    push           pc_writeexe.genexe.outfile u64 
    pop            pc_writeexe.dllfilename u64 
    push           pc_writeexe.genexe.dodll i64 
    pop            pc_writeexe.isdll i64 
    setargs                   0 0
    callproc       &pc_writeexe.setuplibfiles 
    startmult                 
    push           pc_writeexe.isdll i64 
    jumpfalse      #9020      i64 
    push           1713635328 i64 
    resetmult                 
    jump           #9021      
#9020: 
    push           4194304    i64 
    endmult                   
#9021: 
    pop            pc_writeexe.imagebase i64 
    push           pc_writeexe.genexe.entrypoint u64 
    pop            pc_writeexe.userentrypoint u64 
    setargs                   0 0
    callproc       &pc_writeexe.loadlibs 
    setargs                   0 0
    callproc       &pc_writeexe.scanst 
    setargs                   0 0
    callproc       &pc_writeexe.getoffsets 
    setargs                   1 0
    push           &pc_writeexe.sectiontable 
    push           0          
    addrefoff                 u8 1 0
    callproc       &pc_writeexe.relocdata 
    setargs                   1 0
    push           &pc_writeexe.sectiontable 
    push           72         
    addrefoff                 u8 1 0
    callproc       &pc_writeexe.relocdata 
#9022: 
    retproc                   
End


Proc pc_writeexe.loadlibs:
    local          pc_writeexe.loadlibs.i i64 
    local          pc_writeexe.loadlibs.hinst i64 
    local          pc_writeexe.loadlibs.file u64 
    local          pc_writeexe.loadlibs.filename block:300 
    procentry                 
#9024: 
    push           1          i64 
    pop            pc_writeexe.loadlibs.i i64 
    push           pci_mcl.npsearchlibs i64 
    push           1          i64 
    jumplt         #9025      i64 
#9026: 
    setargs                   2 0
    push           &pci_mcl.psearchlibs 
    push           pc_writeexe.loadlibs.i i64 
    pushptroff                u64 8 -8
    push           &pc_writeexe.loadlibs.filename 
    callproc       &strcpy    
    setargs                   1 0
    push           &pc_writeexe.loadlibs.filename 
    callfn         &mwindowsp.os_getdllinst i64 
    pop            pc_writeexe.loadlibs.hinst i64 
    push           pc_writeexe.loadlibs.hinst i64 
    push           0          i64 
    jumpne         #9027      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "File:"    u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pc_writeexe.loadlibs.filename 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Can't load search lib" u64 
    callproc       &pci_mcl.axerror 
#9027: 
    push           pc_writeexe.loadlibs.hinst i64 
    push           &pc_writeexe.libinsttable 
    push           pc_writeexe.loadlibs.i i64 
    popptroff                 i64 8 -8
    setargs                   1 0
    push           &pc_writeexe.loadlibs.filename 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &pc_writeexe.libinstnames 
    push           pc_writeexe.loadlibs.i i64 
    popptroff                 u64 8 -8
#9028: 
    forup          #9026      i64 1
    opnd           pc_writeexe.loadlibs.i 
    opnd           pci_mcl.npsearchlibs 
#9025: 
#9029: 
    retproc                   
End


Proc pc_writeexe.initsectiontable:
    procentry                 
    push           ".text"    u64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           8          
    popptroff                 u64 1 0
    push           1          i64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           16         
    popptroff                 i64 1 0
    push           pci_mcl.ss_code u64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           0          
    popptroff                 u64 1 0
    setargs                   1 0
    push           pci_mcl.ss_code u64 
    callfn         &pc_genss.bufferlength i64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           40         
    popptroff                 i64 1 0
    setargs                   1 0
    push           pci_mcl.ss_idata u64 
    callfn         &pc_genss.bufferlength i64 
    push           0          i64 
    jumpne         #9031      i64 
    setargs                   2 0
    push           0          i64 
    push           pci_mcl.ss_idata u64 
    callproc       &pc_genss.addqword 
#9031: 
    push           ".data"    u64 
    push           &pc_writeexe.sectiontable 
    push           2          i64 
    addrefoff                 block:72 72 -72
    push           8          
    popptroff                 u64 1 0
    push           2          i64 
    push           &pc_writeexe.sectiontable 
    push           2          i64 
    addrefoff                 block:72 72 -72
    push           16         
    popptroff                 i64 1 0
    push           pci_mcl.ss_idata u64 
    push           &pc_writeexe.sectiontable 
    push           2          i64 
    addrefoff                 block:72 72 -72
    push           0          
    popptroff                 u64 1 0
    setargs                   1 0
    push           pci_mcl.ss_idata u64 
    callfn         &pc_genss.bufferlength i64 
    push           &pc_writeexe.sectiontable 
    push           2          i64 
    addrefoff                 block:72 72 -72
    push           40         
    popptroff                 i64 1 0
    setargs                   2 0
    push           512        i64 
    push           &pc_writeexe.sectiontable 
    push           2          i64 
    addrefoff                 block:72 72 -72
    push           40         
    pushptroff                i64 1 0
    callfn         &pc_writeexe.roundtoblock i64 
    push           &pc_writeexe.sectiontable 
    push           2          i64 
    addrefoff                 block:72 72 -72
    push           24         
    popptroff                 i64 1 0
    push           pci_mcl.ss_nidatarelocs i64 
    push           &pc_writeexe.sectiontable 
    push           2          i64 
    addrefoff                 block:72 72 -72
    push           64         
    popptroff                 i64 1 0
    push           pci_mcl.ss_idatarelocs u64 
    push           &pc_writeexe.sectiontable 
    push           2          i64 
    addrefoff                 block:72 72 -72
    push           56         
    popptroff                 u64 1 0
    push           pci_mcl.ss_zdatalen i64 
    push           0          i64 
    jumpne         #9032      i64 
    push           16         i64 
    pop            pci_mcl.ss_zdatalen i64 
#9032: 
    push           ".bss"     u64 
    push           &pc_writeexe.sectiontable 
    push           3          i64 
    addrefoff                 block:72 72 -72
    push           8          
    popptroff                 u64 1 0
    push           3          i64 
    push           &pc_writeexe.sectiontable 
    push           3          i64 
    addrefoff                 block:72 72 -72
    push           16         
    popptroff                 i64 1 0
    push           pci_mcl.ss_zdatalen i64 
    push           &pc_writeexe.sectiontable 
    push           3          i64 
    addrefoff                 block:72 72 -72
    push           40         
    popptroff                 i64 1 0
    setargs                   2 0
    push           512        i64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           40         
    pushptroff                i64 1 0
    callfn         &pc_writeexe.roundtoblock i64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           24         
    popptroff                 i64 1 0
    push           pci_mcl.ss_ncoderelocs i64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           64         
    popptroff                 i64 1 0
    push           pci_mcl.ss_coderelocs u64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           56         
    popptroff                 u64 1 0
    push           ".idata"   u64 
    push           &pc_writeexe.sectiontable 
    push           4          i64 
    addrefoff                 block:72 72 -72
    push           8          
    popptroff                 u64 1 0
    push           5          i64 
    push           &pc_writeexe.sectiontable 
    push           4          i64 
    addrefoff                 block:72 72 -72
    push           16         
    popptroff                 i64 1 0
    push           0          i64 
    push           &pc_writeexe.sectiontable 
    push           4          i64 
    addrefoff                 block:72 72 -72
    push           40         
    popptroff                 i64 1 0
    push           0          i64 
    push           &pc_writeexe.sectiontable 
    push           4          i64 
    addrefoff                 block:72 72 -72
    push           24         
    popptroff                 i64 1 0
    push           4          i64 
    pop            pc_writeexe.nsections i64 
#9033: 
    retproc                   
End


Proc pc_writeexe.roundtoblock: i64
    param          pc_writeexe.roundtoblock.n i64 
    param          pc_writeexe.roundtoblock.align i64 
    procentry                 
    push           pc_writeexe.roundtoblock.n i64 
    push           pc_writeexe.roundtoblock.align i64 
    push           1          i64 
    sub                       i64 
    iand                      i64 
    push           0          i64 
    jumpne         #9035      i64 
    push           pc_writeexe.roundtoblock.n i64 
    setret                    i64 
    jump           #9036      
#9035: 
    push           pc_writeexe.roundtoblock.n i64 
    push           pc_writeexe.roundtoblock.align i64 
    push           pc_writeexe.roundtoblock.n i64 
    push           pc_writeexe.roundtoblock.align i64 
    push           1          i64 
    sub                       i64 
    iand                      i64 
    sub                       i64 
    add                       i64 
    setret                    i64 
    jump           #9036      
#9036: 
    retfn                     i64 
End


Proc pc_writeexe.extractlibname: u64
    param          pc_writeexe.extractlibname.name u64 
    param          pc_writeexe.extractlibname.libno u64 
    param          pc_writeexe.extractlibname.moduleno i64 
    local          pc_writeexe.extractlibname.s u64 
    local          pc_writeexe.extractlibname.name2 u64 
    local          pc_writeexe.extractlibname.str block:256 
    local          pc_writeexe.extractlibname.str2 block:256 
    local          pc_writeexe.extractlibname.i i64 
    local          pc_writeexe.extractlibname.n i64 
    procentry                 
    push           0          u64 
    pop            pc_writeexe.extractlibname.name2 u64 
!reenter::
#9038: 
    push           pc_writeexe.extractlibname.name u64 
    pop            pc_writeexe.extractlibname.s u64 
    push           0          i64 
    push           pc_writeexe.extractlibname.libno u64 
    popptr                    i64 
    jump           #9039      
#9040: 
    push           pc_writeexe.extractlibname.s u64 
    pushptr                   u8 
    push           46         u64 
    jumpne         #9041      u64 
    setargs                   3 0
    push           pc_writeexe.extractlibname.s u64 
    push           pc_writeexe.extractlibname.name u64 
    subref                    u64 1
    push           pc_writeexe.extractlibname.name u64 
    push           &pc_writeexe.extractlibname.str 
    callproc       &memcpy    
    push           0          u64 
    push           &pc_writeexe.extractlibname.str 
    push           pc_writeexe.extractlibname.s u64 
    push           pc_writeexe.extractlibname.name u64 
    subref                    i64 1
    popptroff                 u8 1 0
    setargs                   2 0
    push           ".dll"     u64 
    push           &pc_writeexe.extractlibname.str 
    callproc       &strcat    
#9042: 
    push           1          i64 
    pop            pc_writeexe.extractlibname.i i64 
    push           pc_writeexe.ndlls i64 
    push           1          i64 
    jumplt         #9043      i64 
#9044: 
    setargs                   2 0
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.extractlibname.i i64 
    addrefoff                 block:48 48 -48
    pushptr                   u64 
    push           &pc_writeexe.extractlibname.str 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #9045      i64 
    push           pc_writeexe.extractlibname.i i64 
    push           pc_writeexe.extractlibname.libno u64 
    popptr                    i64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.extractlibname.libno u64 
    pushptr                   i64 
    addrefoff                 block:48 48 -48
    push           8          
    addrefoff                 u64 1 0
    incr                      i64 1
    startmult                 
    push           pc_writeexe.extractlibname.name2 u64 
    jumpfalse      #9046      u64 
    push           pc_writeexe.extractlibname.name2 u64 
    resetmult                 
    jump           #9047      
#9046: 
    push           pc_writeexe.extractlibname.s u64 
    push           1          i64 
    addrefoff                 u64 1 0
    endmult                   
#9047: 
    setret                    u64 
    jump           #9048      
#9045: 
#9049: 
    forup          #9044      i64 1
    opnd           pc_writeexe.extractlibname.i 
    opnd           pc_writeexe.ndlls 
#9043: 
    push           pc_writeexe.ndlls i64 
    push           50         i64 
    jumplt         #9050      i64 
    setargs                   1 0
    push           "Too many libs" u64 
    callproc       &pci_mcl.axerror 
#9050: 
    push           &pc_writeexe.ndlls 
    incrload                  i64 1
    push           pc_writeexe.extractlibname.libno u64 
    popptr                    i64 
    setargs                   1 0
    push           &pc_writeexe.extractlibname.str 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.extractlibname.libno u64 
    pushptr                   i64 
    addrefoff                 block:48 48 -48
    push           0          
    popptroff                 u64 1 0
    push           1          i64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.extractlibname.libno u64 
    pushptr                   i64 
    addrefoff                 block:48 48 -48
    push           8          
    popptroff                 i64 1 0
    startmult                 
    push           pc_writeexe.extractlibname.name2 u64 
    jumpfalse      #9051      u64 
    push           pc_writeexe.extractlibname.name2 u64 
    resetmult                 
    jump           #9052      
#9051: 
    push           pc_writeexe.extractlibname.s u64 
    push           1          i64 
    addrefoff                 u64 1 0
    endmult                   
#9052: 
    setret                    u64 
    jump           #9048      
#9041: 
    push           &pc_writeexe.extractlibname.s 
    incr                      u64 1
#9039: 
    push           pc_writeexe.extractlibname.s u64 
    pushptr                   u8 
    jumptrue       #9040      u64 
#9053: 
#9054: 
    push           1          i64 
    pop            pc_writeexe.extractlibname.i i64 
    push           pci_mcl.npsearchlibs i64 
    push           1          i64 
    jumplt         #9055      i64 
#9056: 
    setargs                   2 0
    push           pc_writeexe.extractlibname.name u64 
    push           &pc_writeexe.libinsttable 
    push           pc_writeexe.extractlibname.i i64 
    pushptroff                i64 8 -8
    callfn         &mwindowsp.os_getdllprocaddr u64 
    jumpfalse      #9057      u64 
    push           pc_writeexe.extractlibname.i i64 
    pop            pc_writeexe.extractlibname.n i64 
    jump           #9058      
#9057: 
#9059: 
    forup          #9056      i64 1
    opnd           pc_writeexe.extractlibname.i 
    opnd           pci_mcl.npsearchlibs 
#9055: 
    setargs                   1 0
    push           "Can't find external function" u64 
    callproc       &pci_mcl.axerror 
#9058: 
    push           &pc_writeexe.libnotable 
    push           pc_writeexe.extractlibname.n i64 
    pushptroff                i64 8 -8
    push           pc_writeexe.extractlibname.libno u64 
    storeptr                  i64 
    jumpfalse      #9060      i64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.extractlibname.libno u64 
    pushptr                   i64 
    addrefoff                 block:48 48 -48
    push           8          
    addrefoff                 u64 1 0
    incr                      i64 1
    push           pc_writeexe.extractlibname.name u64 
    setret                    u64 
    jump           #9048      
#9060: 
    setargs                   2 0
    push           &pci_mcl.psearchlibs 
    push           pc_writeexe.extractlibname.n i64 
    pushptroff                u64 8 -8
    push           &pc_writeexe.extractlibname.str 
    callproc       &strcpy    
    setargs                   2 0
    push           ".dll"     u64 
    push           &pc_writeexe.extractlibname.str 
    callproc       &strcat    
    push           pc_writeexe.ndlls i64 
    push           50         i64 
    jumplt         #9061      i64 
    setargs                   1 0
    push           "2:Too many libs" u64 
    callproc       &pci_mcl.axerror 
#9061: 
    push           &pc_writeexe.ndlls 
    incrload                  i64 1
    push           pc_writeexe.extractlibname.libno u64 
    popptr                    i64 
    setargs                   1 0
    push           &pc_writeexe.extractlibname.str 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.extractlibname.libno u64 
    pushptr                   i64 
    addrefoff                 block:48 48 -48
    push           0          
    popptroff                 u64 1 0
    push           1          i64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.extractlibname.libno u64 
    pushptr                   i64 
    addrefoff                 block:48 48 -48
    push           8          
    popptroff                 i64 1 0
    push           pc_writeexe.extractlibname.libno u64 
    pushptr                   i64 
    push           &pc_writeexe.libnotable 
    push           pc_writeexe.extractlibname.n i64 
    popptroff                 i64 8 -8
    push           pc_writeexe.extractlibname.name u64 
    setret                    u64 
    jump           #9048      
#9048: 
    retfn                     u64 
End


Proc pc_writeexe.scanst:
    local          pc_writeexe.scanst.i i64 
    local          pc_writeexe.scanst.libno i64 
    local          pc_writeexe.scanst.d u64 
    local          pc_writeexe.scanst.name u64 
    local          pc_writeexe.scanst.libname u64 
    local          pc_writeexe.scanst.dname u64 
    local          pc_writeexe.scanst.basename u64 
    procentry                 
#9063: 
    push           1          i64 
    pop            pc_writeexe.scanst.i i64 
    push           pci_mcl.ss_nsymbols i64 
    push           1          i64 
    jumplt         #9064      i64 
#9065: 
    push           pci_mcl.ss_symboltable u64 
    push           pc_writeexe.scanst.i i64 
    pushptroff                u64 8 -8
    pop            pc_writeexe.scanst.d u64 
    push           pc_writeexe.scanst.d u64 
    push           46         
    pushptroff                u16 1 0
    push           1          i64 
    dotindex                  i64 
    jumpfalse      #9066      u64 
    push           pc_writeexe.nimports i64 
    push           3000       i64 
    jumplt         #9067      i64 
    setargs                   1 0
    push           "genexe: Too many imports" u64 
    callproc       &pci_mcl.axerror 
#9067: 
    push           &pc_writeexe.nimports 
    incr                      i64 1
    push           pc_writeexe.scanst.d u64 
    pushptr                   u64 
    pop            pc_writeexe.scanst.dname u64 
    setargs                   3 0
    push           1          i64 
    push           &pc_writeexe.scanst.libno 
    push           pc_writeexe.scanst.dname u64 
    callfn         &pc_writeexe.extractlibname u64 
    pop            pc_writeexe.scanst.name u64 
    push           pc_writeexe.scanst.libno i64 
    push           &pc_writeexe.importtable 
    push           pc_writeexe.nimports i64 
    addrefoff                 block:48 48 -48
    push           8          
    popptroff                 i64 1 0
    push           pc_writeexe.scanst.name u64 
    push           &pc_writeexe.importtable 
    push           pc_writeexe.nimports i64 
    addrefoff                 block:48 48 -48
    push           16         
    popptroff                 u64 1 0
    push           pc_writeexe.scanst.d u64 
    push           &pc_writeexe.importtable 
    push           pc_writeexe.nimports i64 
    addrefoff                 block:48 48 -48
    push           0          
    popptroff                 u64 1 0
    push           pc_writeexe.nimports i64 
    push           pc_writeexe.scanst.d u64 
    push           44         
    popptroff                 i16 1 0
    jump           #9068      
#9066: 
    push           pc_writeexe.scanst.d u64 
    push           46         
    pushptroff                u16 1 0
    push           3          i64 
    dotindex                  i64 
    jumpfalse      #9069      u64 
    setargs                   1 0
    push           pc_writeexe.scanst.d u64 
    pushptr                   u64 
    callfn         &pc_libpcl.getbasename u64 
    pop            pc_writeexe.scanst.basename u64 
    push           pc_writeexe.userentrypoint u64 
    jumpfalse      #9070      u64 
    setargs                   2 0
    push           pc_writeexe.userentrypoint u64 
    push           pc_writeexe.scanst.basename u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #9071      i64 
    push           pc_writeexe.scanst.d u64 
    pop            pc_writeexe.stentrypoint u64 
#9071: 
    jump           #9072      
#9070: 
    setargs                   2 0
    push           "main"     u64 
    push           pc_writeexe.scanst.basename u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #9073      i64 
    push           pc_writeexe.isdll i64 
    jumptrue       #9073      i64 
    push           pc_writeexe.scanst.d u64 
    pop            pc_writeexe.stentrypoint u64 
    jump           #9074      
#9073: 
    setargs                   2 0
    push           "start"    u64 
    push           pc_writeexe.scanst.basename u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #9075      i64 
    push           pc_writeexe.isdll i64 
    jumptrue       #9075      i64 
    push           pc_writeexe.scanst.d u64 
    pop            pc_writeexe.stentrypoint2 u64 
    jump           #9074      
#9075: 
    setargs                   2 0
    push           "dllmain"  u64 
    push           pc_writeexe.scanst.basename u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #9076      i64 
    push           pc_writeexe.isdll i64 
    jumpfalse      #9076      i64 
    push           pc_writeexe.scanst.d u64 
    pop            pc_writeexe.stentrypoint u64 
#9076: 
#9074: 
#9072: 
    push           pc_writeexe.nexports i64 
    push           1000       i64 
    jumplt         #9077      i64 
    setargs                   1 0
    push           "gendll: Too many exports" u64 
    callproc       &pci_mcl.axerror 
#9077: 
    push           &pc_writeexe.nexports 
    incr                      i64 1
    push           pc_writeexe.scanst.d u64 
    push           &pc_writeexe.exporttable 
    push           pc_writeexe.nexports i64 
    addrefoff                 block:16 16 -16
    push           0          
    popptroff                 u64 1 0
    push           pc_writeexe.scanst.dname u64 
    push           &pc_writeexe.exporttable 
    push           pc_writeexe.nexports i64 
    addrefoff                 block:16 16 -16
    push           8          
    popptroff                 u64 1 0
#9069: 
#9068: 
#9078: 
    forup          #9065      i64 1
    opnd           pc_writeexe.scanst.i 
    opnd           pci_mcl.ss_nsymbols 
#9064: 
#9079: 
    retproc                   
End


Proc pc_writeexe.relocdata:
    param          pc_writeexe.relocdata.s u64 
    local          pc_writeexe.relocdata.u u64 
    local          pc_writeexe.relocdata.r u64 
    local          pc_writeexe.relocdata.p u64 
    local          pc_writeexe.relocdata.p32 u64 
    local          pc_writeexe.relocdata.p64 u64 
    local          pc_writeexe.relocdata.d u64 
    local          pc_writeexe.relocdata.offset i64 
    local          pc_writeexe.relocdata.index i64 
    local          pc_writeexe.relocdata.thunkoffset i64 
    local          pc_writeexe.relocdata.iatoffset i64 
    procentry                 
    setargs                   2 0
    push           0          i64 
    push           pc_writeexe.relocdata.s u64 
    pushptr                   u64 
    callfn         &pc_genss.bufferelemptr u64 
    pop            pc_writeexe.relocdata.p u64 
    push           pc_writeexe.relocdata.s u64 
    push           56         
    pushptroff                u64 1 0
    pop            pc_writeexe.relocdata.r u64 
    jump           #9081      
#9082: 
    push           pci_mcl.ss_symboltable u64 
    push           pc_writeexe.relocdata.r u64 
    push           24         
    pushptroff                i64 1 0
    pushptroff                u64 8 -8
    pop            pc_writeexe.relocdata.d u64 
    push           pc_writeexe.relocdata.d u64 
    push           44         
    pushptroff                i16 1 0
    pop            pc_writeexe.relocdata.index i64 
    push           &pc_writeexe.importtable 
    push           pc_writeexe.relocdata.index i64 
    addrefoff                 block:48 48 -48
    push           40         
    pushptroff                i64 1 0
    pop            pc_writeexe.relocdata.thunkoffset i64 
    push           pc_writeexe.relocdata.r u64 
    push           8          
    pushptroff                i64 1 0
    push           4          i64 
    casejumpeq     #9083      i64 0
    push           2          i64 
    casejumpeq     #9084      i64 0
    push           1          i64 
    casejumpeq     #9084      i64 0
    popstack                  i64 
    jump           #9085      
#9083: 
    push           pc_writeexe.relocdata.d u64 
    push           46         
    pushptroff                u16 1 0
    push           1          i64 
    dotindex                  i64 
    jumptrue       #9086      u64 
    setargs                   1 0
    push           "rel32/not imported" u64 
    callproc       &pci_mcl.axerror 
#9086: 
    push           pc_writeexe.relocdata.thunkoffset i64 
    push           pc_writeexe.relocdata.r u64 
    push           16         
    pushptroff                i64 1 0
    sub                       i64 
    push           4          i64 
    sub                       i64 
    push           pc_writeexe.relocdata.p u64 
    push           pc_writeexe.relocdata.r u64 
    push           16         
    pushptroff                i64 1 0
    popptroff                 u32 1 0
    jump           #9087      
#9084: 
    push           pc_writeexe.relocdata.d u64 
    push           46         
    pushptroff                u16 1 0
    push           1          i64 
    dotindex                  i64 
    jumpfalse      #9088      u64 
    push           pc_writeexe.imagebase i64 
    push           pc_writeexe.relocdata.thunkoffset i64 
    add                       i64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           48         
    pushptroff                i64 1 0
    add                       i64 
    push           pc_writeexe.relocdata.p u64 
    push           pc_writeexe.relocdata.r u64 
    push           16         
    pushptroff                i64 1 0
    popptroff                 u32 1 0
    jump           #9089      
#9088: 
    push           0          u64 
    pop            pc_writeexe.relocdata.u u64 
    push           pc_writeexe.relocdata.d u64 
    push           30         
    pushptroff                u8 1 0
    push           3          i64 
    casejumpeq     #9090      i64 0
    push           2          i64 
    casejumpeq     #9091      i64 0
    push           1          i64 
    casejumpeq     #9092      i64 0
    popstack                  i64 
    jump           #9093      
#9090: 
    push           &pc_writeexe.sectiontable 
    push           144        
    addrefoff                 u8 1 0
    pop            pc_writeexe.relocdata.u u64 
    jump           #9094      
#9091: 
    push           &pc_writeexe.sectiontable 
    push           72         
    addrefoff                 u8 1 0
    pop            pc_writeexe.relocdata.u u64 
    jump           #9094      
#9092: 
    push           &pc_writeexe.sectiontable 
    push           0          
    addrefoff                 u8 1 0
    pop            pc_writeexe.relocdata.u u64 
    jump           #9094      
#9093: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           pc_writeexe.relocdata.d u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_writeexe.relocdata.d u64 
    push           30         
    pushptroff                u8 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "RELOCDATA/SEG?" u64 
    callproc       &pci_mcl.axerror 
#9094: 
    push           pc_writeexe.relocdata.p u64 
    push           pc_writeexe.relocdata.r u64 
    push           16         
    pushptroff                i64 1 0
    addrefoff                 u64 1 0
    pop            pc_writeexe.relocdata.p32 u64 
    push           pc_writeexe.relocdata.r u64 
    push           8          
    pushptroff                i64 1 0
    push           2          i64 
    jumpne         #9095      i64 
    push           pc_writeexe.relocdata.p32 u64 
    pushptr                   u32 
    push           pc_writeexe.relocdata.u u64 
    push           48         
    pushptroff                i64 1 0
    add                       i64 
    push           pc_writeexe.imagebase i64 
    add                       i64 
    push           pc_writeexe.relocdata.p32 u64 
    popptr                    u32 
    jump           #9096      
#9095: 
    push           pc_writeexe.relocdata.p32 u64 
    pop            pc_writeexe.relocdata.p64 u64 
    push           pc_writeexe.relocdata.p64 u64 
    pushptr                   i64 
    push           pc_writeexe.relocdata.u u64 
    push           48         
    pushptroff                i64 1 0
    add                       i64 
    push           pc_writeexe.imagebase i64 
    add                       u64 
    push           pc_writeexe.relocdata.p64 u64 
    popptr                    u64 
#9096: 
#9089: 
    jump           #9087      
#9085: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pc_objdecls.relocnames 
    push           pc_writeexe.relocdata.r u64 
    push           8          
    pushptroff                i64 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Can't do this rel type" u64 
    callproc       &pci_mcl.axerror 
#9087: 
    push           pc_writeexe.relocdata.r u64 
    pushptr                   u64 
    pop            pc_writeexe.relocdata.r u64 
#9081: 
    push           pc_writeexe.relocdata.r u64 
    jumptrue       #9082      u64 
#9097: 
#9098: 
    retproc                   
End


Proc pc_writeexe.getbaserelocs:
    param          pc_writeexe.getbaserelocs.s u64 
    local          pc_writeexe.getbaserelocs.u u64 
    local          pc_writeexe.getbaserelocs.r u64 
    local          pc_writeexe.getbaserelocs.p u64 
    local          pc_writeexe.getbaserelocs.d u64 
    local          pc_writeexe.getbaserelocs.index i64 
    procentry                 
    setargs                   2 0
    push           0          i64 
    push           pc_writeexe.getbaserelocs.s u64 
    pushptr                   u64 
    callfn         &pc_genss.bufferelemptr u64 
    pop            pc_writeexe.getbaserelocs.p u64 
    push           pc_writeexe.getbaserelocs.s u64 
    push           56         
    pushptroff                u64 1 0
    pop            pc_writeexe.getbaserelocs.r u64 
    jump           #9100      
#9101: 
    push           pci_mcl.ss_symboltable u64 
    push           pc_writeexe.getbaserelocs.r u64 
    push           24         
    pushptroff                i64 1 0
    pushptroff                u64 8 -8
    pop            pc_writeexe.getbaserelocs.d u64 
    push           pc_writeexe.getbaserelocs.r u64 
    push           8          
    pushptroff                i64 1 0
    push           2          i64 
    casejumpeq     #9102      i64 0
    push           1          i64 
    casejumpeq     #9102      i64 0
    popstack                  i64 
    jump           #9103      
#9102: 
    push           pc_writeexe.getbaserelocs.d u64 
    push           46         
    pushptroff                u16 1 0
    push           1          i64 
    dotindex                  i64 
    jumpfalse      #9104      u64 
    jump           #9105      
#9104: 
    push           pc_writeexe.getbaserelocs.d u64 
    push           30         
    pushptroff                u8 1 0
    push           3          i64 
    casejumpeq     #9106      i64 0
    push           2          i64 
    casejumpeq     #9107      i64 0
    push           1          i64 
    casejumpeq     #9108      i64 0
    popstack                  i64 
    jump           #9109      
#9106: 
    push           &pc_writeexe.sectiontable 
    push           144        
    addrefoff                 u8 1 0
    pop            pc_writeexe.getbaserelocs.u u64 
    jump           #9110      
#9107: 
    push           &pc_writeexe.sectiontable 
    push           72         
    addrefoff                 u8 1 0
    pop            pc_writeexe.getbaserelocs.u u64 
    jump           #9110      
#9108: 
    push           &pc_writeexe.sectiontable 
    push           0          
    addrefoff                 u8 1 0
    pop            pc_writeexe.getbaserelocs.u u64 
    jump           #9110      
#9109: 
#9110: 
    setargs                   2 0
    push           pc_writeexe.getbaserelocs.r u64 
    push           8          
    pushptroff                i64 1 0
    push           pc_writeexe.getbaserelocs.u u64 
    push           48         
    pushptroff                i64 1 0
    push           pc_writeexe.getbaserelocs.r u64 
    push           16         
    pushptroff                i64 1 0
    add                       i64 
    callproc       &pc_writeexe.newbasereloc 
#9105: 
    jump           #9111      
#9103: 
#9111: 
    push           pc_writeexe.getbaserelocs.r u64 
    pushptr                   u64 
    pop            pc_writeexe.getbaserelocs.r u64 
#9100: 
    push           pc_writeexe.getbaserelocs.r u64 
    jumptrue       #9101      u64 
#9112: 
#9113: 
    retproc                   
End


Proc pc_writeexe.writerecordx:
    param          pc_writeexe.writerecordx.r u64 
    param          pc_writeexe.writerecordx.length i64 
    procentry                 
    setargs                   3 0
    push           pc_writeexe.writerecordx.length u64 
    push           pc_writeexe.writerecordx.r u64 
    push           pc_writeexe.dataptr u64 
    callproc       &memcpy    
    push           &pc_writeexe.dataptr 
    push           pc_writeexe.writerecordx.length i64 
    addrefoffto               u64 1 0
#9115: 
    retproc                   
End


Proc pc_writeexe.writedosstub:
    procentry                 
    setargs                   2 0
    push           128        i64 
    push           &pc_writeexe.writedosstub.stubdata 
    callproc       &pc_writeexe.writerecordx 
#9117: 
    retproc                   
End


Proc pc_writeexe.writepesig:
    procentry                 
    push           80         i64 
    push           &pc_writeexe.dataptr 
    loadincr                  u64 1
    popptr                    u8 
    push           69         i64 
    push           &pc_writeexe.dataptr 
    loadincr                  u64 1
    popptr                    u8 
    push           0          i64 
    push           &pc_writeexe.dataptr 
    loadincr                  u64 1
    popptr                    u8 
    push           0          i64 
    push           &pc_writeexe.dataptr 
    loadincr                  u64 1
    popptr                    u8 
#9119: 
    retproc                   
End


Proc pc_writeexe.writepadding:
    param          pc_writeexe.writepadding.offset i64 
    procentry                 
    push           pc_writeexe.datastart u64 
    push           pc_writeexe.writepadding.offset i64 
    addrefoff                 u64 1 0
    pop            pc_writeexe.dataptr u64 
#9121: 
    retproc                   
End


Proc pc_writeexe.writefileheader:
    local          pc_writeexe.writefileheader.header block:20 
    procentry                 
    push           &pc_writeexe.writefileheader.header 
    clear                     block:20 
    push           34404      i64 
    push           &pc_writeexe.writefileheader.header 
    push           0          
    popptroff                 u16 1 0
    push           pc_writeexe.nsections i64 
    push           &pc_writeexe.writefileheader.header 
    push           2          
    popptroff                 u16 1 0
    push           240        i64 
    push           &pc_writeexe.writefileheader.header 
    push           16         
    popptroff                 u16 1 0
    push           559        i64 
    push           &pc_writeexe.writefileheader.header 
    push           18         
    popptroff                 u16 1 0
    setargs                   2 0
    push           20         i64 
    push           &pc_writeexe.writefileheader.header 
    callproc       &pc_writeexe.writerecordx 
#9123: 
    retproc                   
End


Proc pc_writeexe.writeoptheader:
    local          pc_writeexe.writeoptheader.header block:240 
    procentry                 
    push           &pc_writeexe.writeoptheader.header 
    clear                     block:240 
    push           523        i64 
    push           &pc_writeexe.writeoptheader.header 
    push           0          
    popptroff                 u16 1 0
    push           1          i64 
    push           &pc_writeexe.writeoptheader.header 
    push           2          
    popptroff                 u8 1 0
    push           0          i64 
    push           &pc_writeexe.writeoptheader.header 
    push           3          
    popptroff                 u8 1 0
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           24         
    pushptroff                i64 1 0
    push           &pc_writeexe.writeoptheader.header 
    push           4          
    popptroff                 u32 1 0
    push           &pc_writeexe.sectiontable 
    push           2          i64 
    addrefoff                 block:72 72 -72
    push           24         
    pushptroff                i64 1 0
    push           &pc_writeexe.sectiontable 
    push           4          i64 
    addrefoff                 block:72 72 -72
    push           24         
    pushptroff                i64 1 0
    add                       i64 
    push           &pc_writeexe.writeoptheader.header 
    push           8          
    popptroff                 u32 1 0
    setargs                   2 0
    push           512        i64 
    push           &pc_writeexe.sectiontable 
    push           3          i64 
    addrefoff                 block:72 72 -72
    push           40         
    pushptroff                i64 1 0
    callfn         &pc_writeexe.roundtoblock i64 
    push           &pc_writeexe.writeoptheader.header 
    push           12         
    popptroff                 u32 1 0
    push           pc_writeexe.stentrypoint u64 
    push           0          u64 
    jumpne         #9125      u64 
    push           pc_writeexe.stentrypoint2 u64 
    pop            pc_writeexe.stentrypoint u64 
#9125: 
    push           pc_writeexe.stentrypoint u64 
    push           0          u64 
    jumpne         #9126      u64 
    push           pc_writeexe.userentrypoint u64 
    jumpfalse      #9127      u64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           pc_writeexe.userentrypoint u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "User entry point not found" u64 
    callproc       &pci_mcl.axerror 
    jump           #9128      
#9127: 
    push           pc_writeexe.isdll i64 
    jumptrue       #9129      i64 
    setargs                   1 0
    push           "Entry point not found: main or start" u64 
    callproc       &pci_mcl.axerror 
#9129: 
#9128: 
    jump           #9130      
#9126: 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           48         
    pushptroff                i64 1 0
    push           pc_writeexe.stentrypoint u64 
    push           32         
    pushptroff                i32 1 0
    add                       i64 
    push           &pc_writeexe.writeoptheader.header 
    push           16         
    popptroff                 u32 1 0
#9130: 
    push           4096       i64 
    push           &pc_writeexe.writeoptheader.header 
    push           20         
    popptroff                 u32 1 0
    push           pc_writeexe.imagebase u64 
    push           &pc_writeexe.writeoptheader.header 
    push           24         
    popptroff                 u64 1 0
    push           4096       i64 
    push           &pc_writeexe.writeoptheader.header 
    push           32         
    popptroff                 u32 1 0
    push           512        i64 
    push           &pc_writeexe.writeoptheader.header 
    push           36         
    popptroff                 u32 1 0
    push           4          i64 
    push           &pc_writeexe.writeoptheader.header 
    push           40         
    popptroff                 u16 1 0
    push           0          i64 
    push           &pc_writeexe.writeoptheader.header 
    push           42         
    popptroff                 u16 1 0
    push           5          i64 
    push           &pc_writeexe.writeoptheader.header 
    push           48         
    popptroff                 u16 1 0
    push           2          i64 
    push           &pc_writeexe.writeoptheader.header 
    push           50         
    popptroff                 u16 1 0
    push           pc_writeexe.imagesize i64 
    push           &pc_writeexe.writeoptheader.header 
    push           56         
    popptroff                 u32 1 0
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           32         
    pushptroff                i64 1 0
    push           &pc_writeexe.writeoptheader.header 
    push           60         
    popptroff                 u32 1 0
    push           3          i64 
    push           &pc_writeexe.writeoptheader.header 
    push           68         
    popptroff                 u16 1 0
    push           4194304    u64 
    push           &pc_writeexe.writeoptheader.header 
    push           72         
    popptroff                 u64 1 0
    push           2097152    u64 
    push           &pc_writeexe.writeoptheader.header 
    push           80         
    popptroff                 u64 1 0
    push           1048576    u64 
    push           &pc_writeexe.writeoptheader.header 
    push           88         
    popptroff                 u64 1 0
    push           4096       u64 
    push           &pc_writeexe.writeoptheader.header 
    push           96         
    popptroff                 u64 1 0
    push           16         i64 
    push           &pc_writeexe.writeoptheader.header 
    push           108        
    popptroff                 u32 1 0
    push           &pc_writeexe.sectiontable 
    push           4          i64 
    addrefoff                 block:72 72 -72
    push           48         
    pushptroff                i64 1 0
    push           &pc_writeexe.writeoptheader.header 
    push           120        
    popptroff                 u32 1 0
    push           &pc_writeexe.sectiontable 
    push           4          i64 
    addrefoff                 block:72 72 -72
    push           40         
    pushptroff                i64 1 0
    push           pc_writeexe.exportdirvirtsize i64 
    sub                       i64 
    push           pc_writeexe.blockdirvirtsize i64 
    sub                       i64 
    push           &pc_writeexe.writeoptheader.header 
    push           124        
    popptroff                 u32 1 0
    push           pc_writeexe.isdll i64 
    jumpfalse      #9131      i64 
    push           64         i64 
    push           &pc_writeexe.writeoptheader.header 
    push           70         
    popptroff                 u16 1 0
    push           pc_writeexe.exportdirvirtaddr i64 
    push           &pc_writeexe.writeoptheader.header 
    push           112        
    popptroff                 u32 1 0
    push           pc_writeexe.exportdirvirtsize i64 
    push           &pc_writeexe.writeoptheader.header 
    push           116        
    popptroff                 u32 1 0
    push           pc_writeexe.blockdirvirtaddr i64 
    push           &pc_writeexe.writeoptheader.header 
    push           152        
    popptroff                 u32 1 0
    push           pc_writeexe.blockdirvirtsize i64 
    push           &pc_writeexe.writeoptheader.header 
    push           156        
    popptroff                 u32 1 0
#9131: 
    push           pc_writeexe.fileiatoffset i64 
    push           &pc_writeexe.writeoptheader.header 
    push           208        
    popptroff                 u32 1 0
    push           pc_writeexe.fileiatsize i64 
    push           &pc_writeexe.writeoptheader.header 
    push           212        
    popptroff                 u32 1 0
    setargs                   2 0
    push           240        i64 
    push           &pc_writeexe.writeoptheader.header 
    callproc       &pc_writeexe.writerecordx 
#9132: 
    retproc                   
End


Proc pc_writeexe.writesectionheader:
    param          pc_writeexe.writesectionheader.s u64 
    local          pc_writeexe.writesectionheader.sheader block:40 
    local          pc_writeexe.writesectionheader.aa i64 
    procentry                 
    push           &pc_writeexe.writesectionheader.sheader 
    clear                     block:40 
    setargs                   2 0
    push           pc_writeexe.writesectionheader.s u64 
    push           8          
    pushptroff                u64 1 0
    push           &pc_writeexe.writesectionheader.sheader 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcpy    
    push           pc_writeexe.writesectionheader.s u64 
    push           40         
    pushptroff                i64 1 0
    push           &pc_writeexe.writesectionheader.sheader 
    push           8          
    popptroff                 u32 1 0
    push           pc_writeexe.writesectionheader.s u64 
    push           48         
    pushptroff                i64 1 0
    push           &pc_writeexe.writesectionheader.sheader 
    push           12         
    popptroff                 u32 1 0
    push           pc_writeexe.writesectionheader.s u64 
    push           32         
    pushptroff                i64 1 0
    push           &pc_writeexe.writesectionheader.sheader 
    push           20         
    popptroff                 u32 1 0
    push           pc_writeexe.writesectionheader.s u64 
    push           24         
    pushptroff                i64 1 0
    push           &pc_writeexe.writesectionheader.sheader 
    push           16         
    popptroff                 u32 1 0
    push           pc_writeexe.writesectionheader.s u64 
    push           16         
    pushptroff                i64 1 0
    push           3          i64 
    casejumpeq     #9134      i64 0
    push           2          i64 
    casejumpeq     #9135      i64 0
    push           1          i64 
    casejumpeq     #9136      i64 0
    push           5          i64 
    casejumpeq     #9137      i64 0
    popstack                  i64 
    jump           #9138      
#9134: 
    push           3226468480 i64 
    pop            pc_writeexe.writesectionheader.aa i64 
    push           pc_writeexe.writesectionheader.aa i64 
    push           &pc_writeexe.writesectionheader.sheader 
    push           36         
    popptroff                 u32 1 0
    jump           #9139      
#9135: 
    push           3226468416 i64 
    pop            pc_writeexe.writesectionheader.aa i64 
    push           pc_writeexe.writesectionheader.aa i64 
    push           &pc_writeexe.writesectionheader.sheader 
    push           36         
    popptroff                 u32 1 0
    jump           #9139      
#9136: 
    push           1615855648 i64 
    pop            pc_writeexe.writesectionheader.aa i64 
    push           pc_writeexe.writesectionheader.aa i64 
    push           &pc_writeexe.writesectionheader.sheader 
    push           36         
    popptroff                 u32 1 0
    jump           #9139      
#9137: 
    push           3224371264 i64 
    pop            pc_writeexe.writesectionheader.aa i64 
    push           pc_writeexe.writesectionheader.aa i64 
    push           &pc_writeexe.writesectionheader.sheader 
    push           36         
    popptroff                 u32 1 0
    jump           #9139      
#9138: 
#9139: 
    setargs                   2 0
    push           40         i64 
    push           &pc_writeexe.writesectionheader.sheader 
    callproc       &pc_writeexe.writerecordx 
#9140: 
    retproc                   
End


Proc pc_writeexe.writesectiondata:
    param          pc_writeexe.writesectiondata.s u64 
    procentry                 
    push           pc_writeexe.writesectiondata.s u64 
    push           16         
    pushptroff                i64 1 0
    push           5          i64 
    casejumpeq     #9142      i64 0
    push           3          i64 
    casejumpeq     #9143      i64 0
    popstack                  i64 
    jump           #9144      
#9142: 
    setargs                   2 0
    push           pc_writeexe.writesectiondata.s u64 
    push           40         
    pushptroff                i64 1 0
    push           pc_writeexe.writesectiondata.s u64 
    pushptr                   u64 
    callproc       &pc_writeexe.writerecordx 
    push           pc_writeexe.writesectiondata.s u64 
    push           24         
    pushptroff                i64 1 0
    push           pc_writeexe.writesectiondata.s u64 
    push           40         
    pushptroff                i64 1 0
    jumple         #9145      i64 
    push           &pc_writeexe.dataptr 
    push           pc_writeexe.writesectiondata.s u64 
    push           24         
    pushptroff                i64 1 0
    push           pc_writeexe.writesectiondata.s u64 
    push           40         
    pushptroff                i64 1 0
    sub                       i64 
    addrefoffto               u64 1 0
#9145: 
    jump           #9146      
#9143: 
    jump           #9146      
#9144: 
    setargs                   2 0
    push           pc_writeexe.writesectiondata.s u64 
    push           24         
    pushptroff                i64 1 0
    setargs                   2 0
    push           0          i64 
    push           pc_writeexe.writesectiondata.s u64 
    pushptr                   u64 
    callfn         &pc_genss.bufferelemptr u64 
    callproc       &pc_writeexe.writerecordx 
#9146: 
#9147: 
    retproc                   
End


Proc pc_writeexe.getoffsets:
    local          pc_writeexe.getoffsets.fileoffset i64 
    local          pc_writeexe.getoffsets.imageoffset i64 
    local          pc_writeexe.getoffsets.i i64 
    local          pc_writeexe.getoffsets.diroffset i64 
    local          pc_writeexe.getoffsets.impdirno i64 
    local          pc_writeexe.getoffsets.hinttableoffset i64 
    local          pc_writeexe.getoffsets.j i64 
    local          pc_writeexe.getoffsets.n i64 
    local          pc_writeexe.getoffsets.codesize i64 
    local          pc_writeexe.getoffsets.length i64 
    local          pc_writeexe.getoffsets.thunkoffset i64 
    local          pc_writeexe.getoffsets.offset i64 
    local          pc_writeexe.getoffsets.dirstartoffset i64 
    local          pc_writeexe.getoffsets.pcode u64 
    local          pc_writeexe.getoffsets.pimpdir u64 
    local          pc_writeexe.getoffsets.pdir u64 
    local          pc_writeexe.getoffsets.paddr u64 
    local          pc_writeexe.getoffsets.pname u64 
    local          pc_writeexe.getoffsets.iatoffset i64 
    local          pc_writeexe.getoffsets.phint u64 
    local          pc_writeexe.getoffsets.pextra u64 
    local          pc_writeexe.getoffsets.xxx i64 
    local          pc_writeexe.getoffsets.av_1 i64 
    local          pc_writeexe.getoffsets.thunkptr u64 
    local          pc_writeexe.getoffsets.codebase u64 
    local          pc_writeexe.getoffsets.thunkaddr i64 
    procentry                 
    push           392        i64 
    pop            pc_writeexe.getoffsets.fileoffset i64 
    push           &pc_writeexe.getoffsets.fileoffset 
    push           40         i64 
    push           pc_writeexe.nsections i64 
    mul                       i64 
    addto                     i64 
    setargs                   2 0
    push           512        i64 
    push           pc_writeexe.getoffsets.fileoffset i64 
    callfn         &pc_writeexe.roundtoblock i64 
    pop            pc_writeexe.getoffsets.fileoffset i64 
    push           4096       i64 
    pop            pc_writeexe.getoffsets.imageoffset i64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           40         
    pushptroff                i64 1 0
    pop            pc_writeexe.getoffsets.codesize i64 
    setargs                   2 0
    push           pc_writeexe.getoffsets.codesize i64 
    push           pci_mcl.ss_code u64 
    callfn         &pc_genss.bufferelemptr u64 
    pop            pc_writeexe.getoffsets.pcode u64 
    jump           #9149      
#9150: 
    push           144        i64 
    push           &pc_writeexe.getoffsets.pcode 
    loadincr                  u64 1
    popptr                    u8 
    push           &pc_writeexe.getoffsets.codesize 
    incr                      i64 1
#9149: 
    push           pc_writeexe.getoffsets.codesize i64 
    push           7          i64 
    iand                      i64 
    jumptrue       #9150      i64 
#9151: 
    push           pc_writeexe.getoffsets.codesize i64 
    pop            pc_writeexe.getoffsets.thunkoffset i64 
    push           &pc_writeexe.getoffsets.codesize 
    push           pc_writeexe.nimports i64 
    push           8          i64 
    mul                       i64 
    addto                     i64 
    push           pc_writeexe.getoffsets.codesize i64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           40         
    popptroff                 i64 1 0
    setargs                   2 0
    push           512        i64 
    push           pc_writeexe.getoffsets.codesize i64 
    callfn         &pc_writeexe.roundtoblock i64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           24         
    popptroff                 i64 1 0
    setargs                   2 0
    push           pc_writeexe.getoffsets.codesize i64 
    push           pc_writeexe.getoffsets.thunkoffset i64 
    sub                       i64 
    push           16         i64 
    add                       i64 
    push           pci_mcl.ss_code u64 
    callproc       &pc_genss.buffercheck 
#9152: 
    push           1          i64 
    pop            pc_writeexe.getoffsets.i i64 
    push           pc_writeexe.nsections i64 
    push           1          i64 
    jumplt         #9153      i64 
#9154: 
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:72 72 -72
    push           16         
    pushptroff                i64 1 0
    push           3          i64 
    jumpeq         #9155      i64 
    push           pc_writeexe.getoffsets.fileoffset i64 
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:72 72 -72
    push           32         
    popptroff                 i64 1 0
#9155: 
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:72 72 -72
    push           16         
    pushptroff                i64 1 0
    push           3          i64 
    jumpeq         #9156      i64 
    setargs                   2 0
    push           512        i64 
    push           pc_writeexe.getoffsets.fileoffset i64 
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:72 72 -72
    push           40         
    pushptroff                i64 1 0
    add                       i64 
    callfn         &pc_writeexe.roundtoblock i64 
    pop            pc_writeexe.getoffsets.fileoffset i64 
#9156: 
    push           pc_writeexe.getoffsets.imageoffset i64 
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:72 72 -72
    push           48         
    popptroff                 i64 1 0
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:72 72 -72
    push           16         
    pushptroff                i64 1 0
    push           5          i64 
    jumpne         #9157      i64 
    push           pc_writeexe.getoffsets.imageoffset i64 
    pop            pc_writeexe.getoffsets.diroffset i64 
    push           pc_writeexe.getoffsets.i i64 
    pop            pc_writeexe.getoffsets.impdirno i64 
#9157: 
    setargs                   2 0
    push           4096       i64 
    push           pc_writeexe.getoffsets.imageoffset i64 
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:72 72 -72
    push           40         
    pushptroff                i64 1 0
    add                       i64 
    callfn         &pc_writeexe.roundtoblock i64 
    pop            pc_writeexe.getoffsets.imageoffset i64 
#9158: 
    forup          #9154      i64 1
    opnd           pc_writeexe.getoffsets.i 
    opnd           pc_writeexe.nsections 
#9153: 
    push           pc_writeexe.isdll i64 
    jumpfalse      #9159      i64 
    setargs                   1 0
    push           &pc_writeexe.sectiontable 
    push           0          
    addrefoff                 u8 1 0
    callproc       &pc_writeexe.getbaserelocs 
    setargs                   1 0
    push           &pc_writeexe.sectiontable 
    push           72         
    addrefoff                 u8 1 0
    callproc       &pc_writeexe.getbaserelocs 
#9159: 
    push           &pc_writeexe.getoffsets.diroffset 
    push           pc_writeexe.ndlls i64 
    push           1          i64 
    add                       i64 
    push           20         i64 
    mul                       i64 
    addto                     i64 
#9160: 
    push           1          i64 
    pop            pc_writeexe.getoffsets.i i64 
    push           pc_writeexe.ndlls i64 
    push           1          i64 
    jumplt         #9161      i64 
#9162: 
    push           pc_writeexe.getoffsets.diroffset i64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           16         
    popptroff                 i64 1 0
    push           &pc_writeexe.getoffsets.diroffset 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           8          
    pushptroff                i64 1 0
    push           1          i64 
    add                       i64 
    push           8          i64 
    mul                       i64 
    addto                     i64 
#9163: 
    forup          #9162      i64 1
    opnd           pc_writeexe.getoffsets.i 
    opnd           pc_writeexe.ndlls 
#9161: 
    push           pc_writeexe.getoffsets.diroffset i64 
    pop            pc_writeexe.fileiatoffset i64 
#9164: 
    push           1          i64 
    pop            pc_writeexe.getoffsets.i i64 
    push           pc_writeexe.ndlls i64 
    push           1          i64 
    jumplt         #9165      i64 
#9166: 
    push           pc_writeexe.getoffsets.diroffset i64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           24         
    popptroff                 i64 1 0
    push           &pc_writeexe.getoffsets.diroffset 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           8          
    pushptroff                i64 1 0
    push           1          i64 
    add                       i64 
    push           8          i64 
    mul                       i64 
    addto                     i64 
#9167: 
    forup          #9166      i64 1
    opnd           pc_writeexe.getoffsets.i 
    opnd           pc_writeexe.ndlls 
#9165: 
    push           pc_writeexe.getoffsets.diroffset i64 
    push           pc_writeexe.fileiatoffset i64 
    sub                       i64 
    pop            pc_writeexe.fileiatsize i64 
    push           pc_writeexe.getoffsets.diroffset i64 
    pop            pc_writeexe.getoffsets.hinttableoffset i64 
#9168: 
    push           1          i64 
    pop            pc_writeexe.getoffsets.i i64 
    push           pc_writeexe.nimports i64 
    push           1          i64 
    jumplt         #9169      i64 
#9170: 
    setargs                   1 0
    push           &pc_writeexe.importtable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           16         
    pushptroff                u64 1 0
    callfn         &strlen    i64 
    push           3          i64 
    add                       i64 
    pop            pc_writeexe.getoffsets.length i64 
    push           pc_writeexe.getoffsets.length i64 
    push           1          i64 
    iand                      i64 
    jumpfalse      #9171      i64 
    push           &pc_writeexe.getoffsets.length 
    incr                      i64 1
#9171: 
    push           pc_writeexe.getoffsets.diroffset i64 
    push           &pc_writeexe.importtable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           24         
    popptroff                 i64 1 0
    push           &pc_writeexe.getoffsets.diroffset 
    push           pc_writeexe.getoffsets.length i64 
    addto                     i64 
#9172: 
    forup          #9170      i64 1
    opnd           pc_writeexe.getoffsets.i 
    opnd           pc_writeexe.nimports 
#9169: 
    setargs                   2 0
    push           4          i64 
    push           pc_writeexe.getoffsets.diroffset i64 
    callfn         &pc_writeexe.roundtoblock i64 
    pop            pc_writeexe.getoffsets.diroffset i64 
#9173: 
    push           1          i64 
    pop            pc_writeexe.getoffsets.i i64 
    push           pc_writeexe.ndlls i64 
    push           1          i64 
    jumplt         #9174      i64 
#9175: 
    setargs                   1 0
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    pushptr                   u64 
    callfn         &strlen    i64 
    push           1          i64 
    add                       i64 
    pop            pc_writeexe.getoffsets.length i64 
    push           pc_writeexe.getoffsets.length i64 
    push           1          i64 
    iand                      i64 
    jumpfalse      #9176      i64 
    push           &pc_writeexe.getoffsets.length 
    incr                      i64 1
#9176: 
    push           pc_writeexe.getoffsets.diroffset i64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           40         
    popptroff                 i64 1 0
    push           &pc_writeexe.getoffsets.diroffset 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           8          
    pushptroff                i64 1 0
    push           4          i64 
    mul                       i64 
    addto                     i64 
    push           pc_writeexe.getoffsets.diroffset i64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           32         
    popptroff                 i64 1 0
    push           &pc_writeexe.getoffsets.diroffset 
    push           pc_writeexe.getoffsets.length i64 
    addto                     i64 
#9177: 
    forup          #9175      i64 1
    opnd           pc_writeexe.getoffsets.i 
    opnd           pc_writeexe.ndlls 
#9174: 
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.getoffsets.impdirno i64 
    addrefoff                 block:72 72 -72
    push           48         
    pushptroff                i64 1 0
    pop            pc_writeexe.getoffsets.dirstartoffset i64 
    push           pc_writeexe.isdll i64 
    jumpfalse      #9178      i64 
    push           pc_writeexe.getoffsets.diroffset i64 
    pop            pc_writeexe.exportdirvirtaddr i64 
    push           pc_writeexe.getoffsets.diroffset i64 
    push           pc_writeexe.getoffsets.dirstartoffset i64 
    sub                       i64 
    pop            pc_writeexe.exportdiroffset i64 
    setargs                   0 0
    callfn         &pc_writeexe.getexporttablesize i64 
    pop            pc_writeexe.exportdirvirtsize i64 
    push           &pc_writeexe.getoffsets.diroffset 
    push           pc_writeexe.exportdirvirtsize i64 
    addto                     i64 
    setargs                   0 0
    callproc       &pc_writeexe.scanbaserelocs 
    push           pc_writeexe.getoffsets.diroffset i64 
    pop            pc_writeexe.blockdirvirtaddr i64 
    push           pc_writeexe.getoffsets.diroffset i64 
    push           pc_writeexe.getoffsets.dirstartoffset i64 
    sub                       i64 
    pop            pc_writeexe.blockdiroffset i64 
    push           pc_writeexe.basetablesize i64 
    pop            pc_writeexe.blockdirvirtsize i64 
    push           &pc_writeexe.getoffsets.diroffset 
    push           pc_writeexe.blockdirvirtsize i64 
    addto                     i64 
#9178: 
    push           pc_writeexe.getoffsets.diroffset i64 
    push           pc_writeexe.getoffsets.dirstartoffset i64 
    sub                       i64 
    pop            pc_writeexe.getoffsets.offset i64 
    push           pc_writeexe.getoffsets.offset i64 
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.getoffsets.impdirno i64 
    addrefoff                 block:72 72 -72
    push           40         
    popptroff                 i64 1 0
    setargs                   2 0
    push           512        i64 
    push           pc_writeexe.getoffsets.offset i64 
    callfn         &pc_writeexe.roundtoblock i64 
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.getoffsets.impdirno i64 
    addrefoff                 block:72 72 -72
    push           24         
    popptroff                 i64 1 0
    setargs                   2 0
    push           512        i64 
    push           pc_writeexe.getoffsets.fileoffset i64 
    push           pc_writeexe.getoffsets.offset i64 
    add                       i64 
    callfn         &pc_writeexe.roundtoblock i64 
    pop            pc_writeexe.filesize i64 
    setargs                   2 0
    push           4096       i64 
    push           pc_writeexe.getoffsets.imageoffset i64 
    push           pc_writeexe.getoffsets.diroffset i64 
    push           pc_writeexe.getoffsets.dirstartoffset i64 
    sub                       i64 
    add                       i64 
    callfn         &pc_writeexe.roundtoblock i64 
    pop            pc_writeexe.imagesize i64 
    setargs                   1 0
    push           pc_writeexe.getoffsets.offset i64 
    callfn         &mlibp.pcm_allocz u64 
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.getoffsets.impdirno i64 
    addrefoff                 block:72 72 -72
    push           0          
    storeptroff               u64 1 0
    pop            pc_writeexe.getoffsets.pimpdir u64 
    push           pc_writeexe.getoffsets.pimpdir u64 
    pop            pc_writeexe.getoffsets.pdir u64 
#9179: 
    push           1          i64 
    pop            pc_writeexe.getoffsets.i i64 
    push           pc_writeexe.ndlls i64 
    push           1          i64 
    jumplt         #9180      i64 
#9181: 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           16         
    pushptroff                i64 1 0
    push           pc_writeexe.getoffsets.pdir u64 
    push           0          
    popptroff                 u32 1 0
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           24         
    pushptroff                i64 1 0
    push           pc_writeexe.getoffsets.pdir u64 
    push           16         
    popptroff                 u32 1 0
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           32         
    pushptroff                i64 1 0
    push           pc_writeexe.getoffsets.pdir u64 
    push           12         
    popptroff                 u32 1 0
    push           &pc_writeexe.getoffsets.pdir 
    incr                      u64 20
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           24         
    pushptroff                i64 1 0
    pop            pc_writeexe.getoffsets.iatoffset i64 
    push           pc_writeexe.getoffsets.pimpdir u64 
    push           pc_writeexe.getoffsets.iatoffset i64 
    addrefoff                 u64 1 0
    push           pc_writeexe.getoffsets.dirstartoffset i64 
    subrefoff                 u64 1 0
    pop            pc_writeexe.getoffsets.paddr u64 
    push           pc_writeexe.getoffsets.pimpdir u64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           16         
    pushptroff                i64 1 0
    addrefoff                 u64 1 0
    push           pc_writeexe.getoffsets.dirstartoffset i64 
    subrefoff                 u64 1 0
    pop            pc_writeexe.getoffsets.pname u64 
#9182: 
    push           1          i64 
    pop            pc_writeexe.getoffsets.j i64 
    push           pc_writeexe.nimports i64 
    push           1          i64 
    jumplt         #9183      i64 
#9184: 
    push           &pc_writeexe.importtable 
    push           pc_writeexe.getoffsets.j i64 
    addrefoff                 block:48 48 -48
    push           8          
    pushptroff                i64 1 0
    push           pc_writeexe.getoffsets.i i64 
    jumpne         #9185      i64 
    push           &pc_writeexe.importtable 
    push           pc_writeexe.getoffsets.j i64 
    addrefoff                 block:48 48 -48
    push           24         
    pushptroff                i64 1 0
    push           pc_writeexe.getoffsets.paddr u64 
    storeptr                  i64 
    push           pc_writeexe.getoffsets.pname u64 
    popptr                    i64 
    push           pc_writeexe.getoffsets.iatoffset i64 
    push           &pc_writeexe.importtable 
    push           pc_writeexe.getoffsets.j i64 
    addrefoff                 block:48 48 -48
    push           32         
    popptroff                 i64 1 0
    push           &pc_writeexe.getoffsets.iatoffset 
    push           8          i64 
    addto                     i64 
    push           &pc_writeexe.getoffsets.pname 
    incr                      u64 8
    push           &pc_writeexe.getoffsets.paddr 
    incr                      u64 8
#9185: 
#9186: 
    forup          #9184      i64 1
    opnd           pc_writeexe.getoffsets.j 
    opnd           pc_writeexe.nimports 
#9183: 
#9187: 
    forup          #9181      i64 1
    opnd           pc_writeexe.getoffsets.i 
    opnd           pc_writeexe.ndlls 
#9180: 
#9188: 
    push           1          i64 
    pop            pc_writeexe.getoffsets.i i64 
    push           pc_writeexe.nimports i64 
    push           1          i64 
    jumplt         #9189      i64 
#9190: 
    push           pc_writeexe.getoffsets.pimpdir u64 
    push           &pc_writeexe.importtable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           24         
    pushptroff                i64 1 0
    addrefoff                 u64 1 0
    push           pc_writeexe.getoffsets.dirstartoffset i64 
    subrefoff                 u64 1 0
    pop            pc_writeexe.getoffsets.phint u64 
    push           &pc_writeexe.getoffsets.phint 
    push           2          i64 
    addrefoffto               u64 1 0
    setargs                   2 0
    push           &pc_writeexe.importtable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           16         
    pushptroff                u64 1 0
    push           pc_writeexe.getoffsets.phint u64 
    callproc       &strcpy    
#9191: 
    forup          #9190      i64 1
    opnd           pc_writeexe.getoffsets.i 
    opnd           pc_writeexe.nimports 
#9189: 
    push           pc_writeexe.getoffsets.dirstartoffset i64 
    pop            pc_writeexe.getoffsets.xxx i64 
#9192: 
    push           1          i64 
    pop            pc_writeexe.getoffsets.i i64 
    push           pc_writeexe.ndlls i64 
    push           1          i64 
    jumplt         #9193      i64 
#9194: 
    push           pc_writeexe.getoffsets.pimpdir u64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           40         
    pushptroff                i64 1 0
    addrefoff                 u64 1 0
    push           pc_writeexe.getoffsets.dirstartoffset i64 
    subrefoff                 u64 1 0
    pop            pc_writeexe.getoffsets.pextra u64 
#9195: 
    push           1          i64 
    pop            pc_writeexe.getoffsets.j i64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           8          
    pushptroff                i64 1 0
    pop            pc_writeexe.getoffsets.av_1 i64 
    push           pc_writeexe.getoffsets.av_1 i64 
    push           1          i64 
    jumplt         #9196      i64 
#9197: 
    push           pc_writeexe.getoffsets.xxx i64 
    push           pc_writeexe.getoffsets.pextra u64 
    popptr                    u32 
    push           &pc_writeexe.getoffsets.pextra 
    incr                      u64 4
#9198: 
    forup          #9197      i64 1
    opnd           pc_writeexe.getoffsets.j 
    opnd           pc_writeexe.getoffsets.av_1 
#9196: 
    push           &pc_writeexe.getoffsets.xxx 
    push           20         i64 
    addto                     i64 
    push           pc_writeexe.getoffsets.pimpdir u64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           32         
    pushptroff                i64 1 0
    addrefoff                 u64 1 0
    push           pc_writeexe.getoffsets.dirstartoffset i64 
    subrefoff                 u64 1 0
    pop            pc_writeexe.getoffsets.phint u64 
    setargs                   2 0
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    pushptr                   u64 
    push           pc_writeexe.getoffsets.phint u64 
    callproc       &strcpy    
#9199: 
    forup          #9194      i64 1
    opnd           pc_writeexe.getoffsets.i 
    opnd           pc_writeexe.ndlls 
#9193: 
    push           pc_writeexe.isdll i64 
    jumpfalse      #9200      i64 
    setargs                   1 0
    push           pc_writeexe.getoffsets.pimpdir u64 
    push           pc_writeexe.exportdiroffset i64 
    addrefoff                 u64 1 0
    callproc       &pc_writeexe.writeexporttable 
    setargs                   1 0
    push           pc_writeexe.getoffsets.pimpdir u64 
    push           pc_writeexe.blockdiroffset i64 
    addrefoff                 u64 1 0
    callproc       &pc_writeexe.writebasereloctable 
#9200: 
    setargs                   2 0
    push           pc_writeexe.getoffsets.thunkoffset i64 
    push           pci_mcl.ss_code u64 
    callfn         &pc_genss.bufferelemptr u64 
    pop            pc_writeexe.getoffsets.thunkptr u64 
    setargs                   2 0
    push           0          i64 
    push           pci_mcl.ss_code u64 
    callfn         &pc_genss.bufferelemptr u64 
    pop            pc_writeexe.getoffsets.codebase u64 
#9201: 
    push           1          i64 
    pop            pc_writeexe.getoffsets.i i64 
    push           pc_writeexe.nimports i64 
    push           1          i64 
    jumplt         #9202      i64 
#9203: 
    push           pc_writeexe.getoffsets.thunkptr u64 
    push           pc_writeexe.getoffsets.codebase u64 
    subref                    i64 1
    push           &pc_writeexe.importtable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           40         
    popptroff                 i64 1 0
    push           72         i64 
    push           &pc_writeexe.getoffsets.thunkptr 
    loadincr                  u64 1
    popptr                    u8 
    push           255        i64 
    push           &pc_writeexe.getoffsets.thunkptr 
    loadincr                  u64 1
    popptr                    u8 
    push           36         i64 
    push           &pc_writeexe.getoffsets.thunkptr 
    loadincr                  u64 1
    popptr                    u8 
    push           37         i64 
    push           &pc_writeexe.getoffsets.thunkptr 
    loadincr                  u64 1
    popptr                    u8 
    push           pc_writeexe.imagebase i64 
    push           &pc_writeexe.importtable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           32         
    pushptroff                i64 1 0
    add                       i64 
    pop            pc_writeexe.getoffsets.thunkaddr i64 
    push           pc_writeexe.getoffsets.thunkaddr i64 
    push           pc_writeexe.getoffsets.thunkptr u64 
    popptr                    i32 
    push           &pc_writeexe.getoffsets.thunkptr 
    push           4          i64 
    addrefoffto               u64 1 0
#9204: 
    forup          #9203      i64 1
    opnd           pc_writeexe.getoffsets.i 
    opnd           pc_writeexe.nimports 
#9202: 
#9205: 
    retproc                   
End


Proc pc_writeexe.addsearchlib:
    param          pc_writeexe.addsearchlib.name u64 
    local          pc_writeexe.addsearchlib.i i64 
    procentry                 
    setargs                   2 0
    push           ""         u64 
    push           pc_writeexe.addsearchlib.name u64 
    callfn         &mlibp.changeext u64 
    pop            pc_writeexe.addsearchlib.name u64 
#9207: 
    push           1          i64 
    pop            pc_writeexe.addsearchlib.i i64 
    push           pci_mcl.npsearchlibs i64 
    push           1          i64 
    jumplt         #9208      i64 
#9209: 
    setargs                   2 0
    push           pc_writeexe.addsearchlib.name u64 
    push           &pci_mcl.psearchlibs 
    push           pc_writeexe.addsearchlib.i i64 
    pushptroff                u64 8 -8
    callfn         &mlibp.eqstring i64 
    jumpfalse      #9210      i64 
    jump           #9211      
#9210: 
#9212: 
    forup          #9209      i64 1
    opnd           pc_writeexe.addsearchlib.i 
    opnd           pci_mcl.npsearchlibs 
#9208: 
    push           pci_mcl.npsearchlibs i64 
    push           30         i64 
    jumplt         #9213      i64 
    setargs                   1 0
    push           "Too many LIB files" u64 
    callproc       &pci_mcl.axerror 
#9213: 
    setargs                   1 0
    push           pc_writeexe.addsearchlib.name u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &pci_mcl.psearchlibs 
    push           &pci_mcl.npsearchlibs 
    incrload                  i64 1
    popptroff                 u64 8 -8
#9211: 
    retproc                   
End


Proc pc_writeexe.setuplibfiles:
    local          pc_writeexe.setuplibfiles.i i64 
    procentry                 
    push           0          i64 
    pop            pci_mcl.npsearchlibs i64 
    push           "msvcrt"   u64 
    push           &pci_mcl.psearchlibs 
    push           1          i64 
    popptroff                 u64 8 -8
    push           "gdi32"    u64 
    push           &pci_mcl.psearchlibs 
    push           2          i64 
    popptroff                 u64 8 -8
    push           "user32"   u64 
    push           &pci_mcl.psearchlibs 
    push           3          i64 
    popptroff                 u64 8 -8
    push           "kernel32" u64 
    push           &pci_mcl.psearchlibs 
    push           4          i64 
    popptroff                 u64 8 -8
    push           4          i64 
    pop            pci_mcl.npsearchlibs i64 
#9215: 
    push           1          i64 
    pop            pc_writeexe.setuplibfiles.i i64 
    push           pci_mcl.nplibfiles i64 
    push           1          i64 
    jumplt         #9216      i64 
#9217: 
    setargs                   1 0
    push           &pci_mcl.plibfiles 
    push           pc_writeexe.setuplibfiles.i i64 
    pushptroff                u64 8 0
    callproc       &pc_writeexe.addsearchlib 
#9218: 
    forup          #9217      i64 1
    opnd           pc_writeexe.setuplibfiles.i 
    opnd           pci_mcl.nplibfiles 
#9216: 
#9219: 
    push           1          i64 
    pop            pc_writeexe.setuplibfiles.i i64 
    push           pc_decls.npdllnametable i64 
    push           1          i64 
    jumplt         #9220      i64 
#9221: 
    push           &pc_decls.pdllnametable 
    push           pc_writeexe.setuplibfiles.i i64 
    pushptroff                u64 8 -8
    pushptr                   u8 
    push           36         u64 
    jumpeq         #9222      u64 
    setargs                   1 0
    push           &pc_decls.pdllnametable 
    push           pc_writeexe.setuplibfiles.i i64 
    pushptroff                u64 8 -8
    callproc       &pc_writeexe.addsearchlib 
#9222: 
#9223: 
    forup          #9221      i64 1
    opnd           pc_writeexe.setuplibfiles.i 
    opnd           pc_decls.npdllnametable 
#9220: 
#9224: 
    retproc                   
End


Proc pc_writeexe.writeexporttable:
    param          pc_writeexe.writeexporttable.pstart u64 
    local          pc_writeexe.writeexporttable.sortindex block:16000 
    local          pc_writeexe.writeexporttable.phdr u64 
    local          pc_writeexe.writeexporttable.paddrtable u64 
    local          pc_writeexe.writeexporttable.pnametable u64 
    local          pc_writeexe.writeexporttable.pordtable u64 
    local          pc_writeexe.writeexporttable.pdllname u64 
    local          pc_writeexe.writeexporttable.pnames u64 
    local          pc_writeexe.writeexporttable.addrtableoffset i64 
    local          pc_writeexe.writeexporttable.nametableoffset i64 
    local          pc_writeexe.writeexporttable.ordtableoffset i64 
    local          pc_writeexe.writeexporttable.dllnameoffset i64 
    local          pc_writeexe.writeexporttable.namesoffset i64 
    local          pc_writeexe.writeexporttable.virtoffset i64 
    local          pc_writeexe.writeexporttable.sectionno i64 
    local          pc_writeexe.writeexporttable.d u64 
    local          pc_writeexe.writeexporttable.i i64 
    procentry                 
    push           pc_writeexe.writeexporttable.pstart u64 
    pop            pc_writeexe.writeexporttable.phdr u64 
    push           1602876664 i64 
    push           pc_writeexe.writeexporttable.phdr u64 
    push           4          
    popptroff                 u32 1 0
    push           1          i64 
    push           pc_writeexe.writeexporttable.phdr u64 
    push           16         
    popptroff                 u32 1 0
    push           pc_writeexe.nexports i64 
    push           pc_writeexe.writeexporttable.phdr u64 
    push           20         
    popptroff                 u32 1 0
    push           pc_writeexe.nexports i64 
    push           pc_writeexe.writeexporttable.phdr u64 
    push           24         
    popptroff                 u32 1 0
    push           40         i64 
    pop            pc_writeexe.writeexporttable.addrtableoffset i64 
    push           pc_writeexe.writeexporttable.addrtableoffset i64 
    push           pc_writeexe.nexports i64 
    push           4          i64 
    mul                       i64 
    add                       i64 
    pop            pc_writeexe.writeexporttable.nametableoffset i64 
    push           pc_writeexe.writeexporttable.nametableoffset i64 
    push           pc_writeexe.nexports i64 
    push           4          i64 
    mul                       i64 
    add                       i64 
    pop            pc_writeexe.writeexporttable.ordtableoffset i64 
    push           pc_writeexe.writeexporttable.ordtableoffset i64 
    push           pc_writeexe.nexports i64 
    push           2          i64 
    mul                       i64 
    add                       i64 
    pop            pc_writeexe.writeexporttable.dllnameoffset i64 
    push           pc_writeexe.writeexporttable.dllnameoffset i64 
    setargs                   1 0
    push           pc_writeexe.dllfilename u64 
    callfn         &strlen    i64 
    add                       i64 
    push           1          i64 
    add                       i64 
    pop            pc_writeexe.writeexporttable.namesoffset i64 
    push           &pc_writeexe.sectiontable 
    push           4          i64 
    addrefoff                 block:72 72 -72
    push           48         
    pushptroff                i64 1 0
    push           pc_writeexe.exportdiroffset i64 
    add                       i64 
    pop            pc_writeexe.writeexporttable.virtoffset i64 
    push           pc_writeexe.writeexporttable.pstart u64 
    push           pc_writeexe.writeexporttable.addrtableoffset i64 
    addrefoff                 u64 1 0
    pop            pc_writeexe.writeexporttable.paddrtable u64 
    push           pc_writeexe.writeexporttable.pstart u64 
    push           pc_writeexe.writeexporttable.nametableoffset i64 
    addrefoff                 u64 1 0
    pop            pc_writeexe.writeexporttable.pnametable u64 
    push           pc_writeexe.writeexporttable.pstart u64 
    push           pc_writeexe.writeexporttable.ordtableoffset i64 
    addrefoff                 u64 1 0
    pop            pc_writeexe.writeexporttable.pordtable u64 
    push           pc_writeexe.writeexporttable.pstart u64 
    push           pc_writeexe.writeexporttable.dllnameoffset i64 
    addrefoff                 u64 1 0
    pop            pc_writeexe.writeexporttable.pdllname u64 
    push           pc_writeexe.writeexporttable.pstart u64 
    push           pc_writeexe.writeexporttable.namesoffset i64 
    addrefoff                 u64 1 0
    pop            pc_writeexe.writeexporttable.pnames u64 
    push           pc_writeexe.writeexporttable.dllnameoffset i64 
    push           pc_writeexe.writeexporttable.virtoffset i64 
    add                       i64 
    push           pc_writeexe.writeexporttable.phdr u64 
    push           12         
    popptroff                 u32 1 0
    push           pc_writeexe.writeexporttable.addrtableoffset i64 
    push           pc_writeexe.writeexporttable.virtoffset i64 
    add                       i64 
    push           pc_writeexe.writeexporttable.phdr u64 
    push           28         
    popptroff                 u32 1 0
    push           pc_writeexe.writeexporttable.nametableoffset i64 
    push           pc_writeexe.writeexporttable.virtoffset i64 
    add                       i64 
    push           pc_writeexe.writeexporttable.phdr u64 
    push           32         
    popptroff                 u32 1 0
    push           pc_writeexe.writeexporttable.ordtableoffset i64 
    push           pc_writeexe.writeexporttable.virtoffset i64 
    add                       i64 
    push           pc_writeexe.writeexporttable.phdr u64 
    push           36         
    popptroff                 u32 1 0
    setargs                   2 0
    push           pc_writeexe.dllfilename u64 
    push           pc_writeexe.writeexporttable.pdllname u64 
    callproc       &strcpy    
    push           pc_writeexe.nexports i64 
    push           2000       i64 
    jumple         #9226      i64 
    setargs                   1 0
    push           "Too many exports - can't sort" u64 
    callproc       &pci_mcl.axerror 
#9226: 
    setargs                   1 0
    push           &pc_writeexe.writeexporttable.sortindex 
    callproc       &pc_writeexe.sortexports 
#9227: 
    push           1          i64 
    pop            pc_writeexe.writeexporttable.i i64 
    push           pc_writeexe.nexports i64 
    push           1          i64 
    jumplt         #9228      i64 
#9229: 
    push           &pc_writeexe.exporttable 
    push           &pc_writeexe.writeexporttable.sortindex 
    push           pc_writeexe.writeexporttable.i i64 
    pushptroff                i64 8 -8
    addrefoff                 block:16 16 -16
    pushptr                   u64 
    pop            pc_writeexe.writeexporttable.d u64 
    setargs                   1 0
    push           pc_writeexe.writeexporttable.d u64 
    push           30         
    pushptroff                u8 1 0
    callfn         &pc_writeexe.getsectionno i64 
    pop            pc_writeexe.writeexporttable.sectionno i64 
    setargs                   2 0
    push           pc_writeexe.writeexporttable.d u64 
    pushptr                   u64 
    push           pc_writeexe.writeexporttable.pnames u64 
    callproc       &strcpy    
    push           pc_writeexe.writeexporttable.namesoffset i64 
    push           pc_writeexe.writeexporttable.virtoffset i64 
    add                       i64 
    push           pc_writeexe.writeexporttable.pnametable u64 
    popptr                    u32 
    push           &pc_writeexe.writeexporttable.pnametable 
    incr                      u64 4
    push           &pc_writeexe.writeexporttable.namesoffset 
    setargs                   1 0
    push           pc_writeexe.writeexporttable.d u64 
    pushptr                   u64 
    callfn         &strlen    i64 
    push           1          i64 
    add                       i64 
    addto                     i64 
    push           &pc_writeexe.writeexporttable.pnames 
    setargs                   1 0
    push           pc_writeexe.writeexporttable.d u64 
    pushptr                   u64 
    callfn         &strlen    i64 
    push           1          i64 
    add                       i64 
    addrefoffto               u64 1 0
    push           pc_writeexe.writeexporttable.d u64 
    push           32         
    pushptroff                i32 1 0
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.writeexporttable.sectionno i64 
    addrefoff                 block:72 72 -72
    push           48         
    pushptroff                i64 1 0
    add                       i64 
    push           pc_writeexe.writeexporttable.paddrtable u64 
    popptr                    u32 
    push           &pc_writeexe.writeexporttable.paddrtable 
    incr                      u64 4
    push           pc_writeexe.writeexporttable.i i64 
    push           1          i64 
    sub                       i64 
    push           pc_writeexe.writeexporttable.pordtable u64 
    popptr                    u16 
    push           &pc_writeexe.writeexporttable.pordtable 
    incr                      u64 2
#9230: 
    forup          #9229      i64 1
    opnd           pc_writeexe.writeexporttable.i 
    opnd           pc_writeexe.nexports 
#9228: 
#9231: 
    retproc                   
End


Proc pc_writeexe.getexporttablesize: i64
    local          pc_writeexe.getexporttablesize.size i64 
    local          pc_writeexe.getexporttablesize.i i64 
    procentry                 
    push           40         i64 
    pop            pc_writeexe.getexporttablesize.size i64 
    push           &pc_writeexe.getexporttablesize.size 
    push           pc_writeexe.nexports i64 
    push           4          i64 
    mul                       i64 
    addto                     i64 
    push           &pc_writeexe.getexporttablesize.size 
    push           pc_writeexe.nexports i64 
    push           4          i64 
    mul                       i64 
    addto                     i64 
    push           &pc_writeexe.getexporttablesize.size 
    push           pc_writeexe.nexports i64 
    push           2          i64 
    mul                       i64 
    addto                     i64 
    push           &pc_writeexe.getexporttablesize.size 
    setargs                   1 0
    push           pc_writeexe.dllfilename u64 
    callfn         &strlen    i64 
    push           1          i64 
    add                       i64 
    addto                     i64 
#9233: 
    push           1          i64 
    pop            pc_writeexe.getexporttablesize.i i64 
    push           pc_writeexe.nexports i64 
    push           1          i64 
    jumplt         #9234      i64 
#9235: 
    push           &pc_writeexe.getexporttablesize.size 
    setargs                   1 0
    push           &pc_writeexe.exporttable 
    push           pc_writeexe.getexporttablesize.i i64 
    addrefoff                 block:16 16 -16
    pushptr                   u64 
    pushptr                   u64 
    callfn         &strlen    i64 
    push           1          i64 
    add                       i64 
    addto                     i64 
#9236: 
    forup          #9235      i64 1
    opnd           pc_writeexe.getexporttablesize.i 
    opnd           pc_writeexe.nexports 
#9234: 
    push           pc_writeexe.getexporttablesize.size i64 
    setret                    i64 
    jump           #9237      
#9237: 
    retfn                     i64 
End


Proc pc_writeexe.newbasereloc:
    param          pc_writeexe.newbasereloc.addr i64 
    param          pc_writeexe.newbasereloc.reltype i64 
    local          pc_writeexe.newbasereloc.p u64 
    procentry                 
    setargs                   1 0
    push           16         i64 
    callfn         &mlibp.pcm_allocz u64 
    pop            pc_writeexe.newbasereloc.p u64 
    push           pc_writeexe.newbasereloc.addr i64 
    push           pc_writeexe.newbasereloc.p u64 
    push           8          
    popptroff                 u32 1 0
    push           pc_writeexe.newbasereloc.reltype i64 
    push           pc_writeexe.newbasereloc.p u64 
    push           12         
    popptroff                 i32 1 0
    push           pc_writeexe.basereloclist u64 
    push           pc_writeexe.newbasereloc.p u64 
    push           0          
    popptroff                 u64 1 0
    push           pc_writeexe.newbasereloc.p u64 
    pop            pc_writeexe.basereloclist u64 
    push           &pc_writeexe.nbaserelocs 
    incr                      i64 1
    push           &pc_writeexe.maxrelocaddr 
    push           pc_writeexe.newbasereloc.addr i64 
    maxto                     i64 
#9239: 
    retproc                   
End


Proc pc_writeexe.scanbaserelocs:
    local          pc_writeexe.scanbaserelocs.baseaddr i64 
    local          pc_writeexe.scanbaserelocs.addr i64 
    local          pc_writeexe.scanbaserelocs.nextblock i64 
    local          pc_writeexe.scanbaserelocs.p u64 
    local          pc_writeexe.scanbaserelocs.i i64 
    procentry                 
    push           4096       i64 
    pop            pc_writeexe.scanbaserelocs.baseaddr i64 
    push           0          i64 
    pop            pc_writeexe.nbaseblocks i64 
#9241: 
    push           pc_writeexe.scanbaserelocs.baseaddr i64 
    push           4096       i64 
    add                       i64 
    pop            pc_writeexe.scanbaserelocs.nextblock i64 
    push           pc_writeexe.nbaseblocks i64 
    push           500        i64 
    jumplt         #9242      i64 
    setargs                   1 0
    push           "Too many blocks" u64 
    callproc       &pci_mcl.axerror 
#9242: 
    push           &pc_writeexe.nbaseblocks 
    incr                      i64 1
    push           pc_writeexe.scanbaserelocs.baseaddr i64 
    push           &pc_writeexe.blockbases 
    push           pc_writeexe.nbaseblocks i64 
    popptroff                 i64 8 -8
    push           0          i64 
    push           &pc_writeexe.blockcounts 
    push           pc_writeexe.nbaseblocks i64 
    popptroff                 i32 4 -4
    push           pc_writeexe.basereloclist u64 
    pop            pc_writeexe.scanbaserelocs.p u64 
    jump           #9243      
#9244: 
    push           pc_writeexe.scanbaserelocs.p u64 
    push           8          
    pushptroff                u32 1 0
    pop            pc_writeexe.scanbaserelocs.addr i64 
    push           pc_writeexe.scanbaserelocs.addr i64 
    push           pc_writeexe.scanbaserelocs.baseaddr i64 
    jumplt         #9245      i64 
    push           pc_writeexe.scanbaserelocs.addr i64 
    push           pc_writeexe.scanbaserelocs.nextblock i64 
    jumpge         #9245      i64 
    push           &pc_writeexe.blockcounts 
    push           pc_writeexe.nbaseblocks i64 
    addrefoff                 i32 4 -4
    incr                      i32 1
#9245: 
    push           pc_writeexe.scanbaserelocs.p u64 
    pushptr                   u64 
    pop            pc_writeexe.scanbaserelocs.p u64 
#9243: 
    push           pc_writeexe.scanbaserelocs.p u64 
    jumptrue       #9244      u64 
#9246: 
    push           pc_writeexe.scanbaserelocs.nextblock i64 
    pop            pc_writeexe.scanbaserelocs.baseaddr i64 
#9247: 
    push           pc_writeexe.scanbaserelocs.baseaddr i64 
    push           pc_writeexe.maxrelocaddr i64 
    jumple         #9241      i64 
#9248: 
#9249: 
    push           1          i64 
    pop            pc_writeexe.scanbaserelocs.i i64 
    push           pc_writeexe.nbaseblocks i64 
    push           1          i64 
    jumplt         #9250      i64 
#9251: 
    push           &pc_writeexe.blockcounts 
    push           pc_writeexe.scanbaserelocs.i i64 
    pushptroff                i32 4 -4
    jumpfalse      #9252      i64 
    push           &pc_writeexe.blockcounts 
    push           pc_writeexe.scanbaserelocs.i i64 
    pushptroff                i32 4 -4
    push           0          i64 
    dotindex                  i64 
    jumpfalse      #9253      u64 
    push           &pc_writeexe.blockcounts 
    push           pc_writeexe.scanbaserelocs.i i64 
    addrefoff                 i32 4 -4
    incr                      i32 1
    push           &pc_writeexe.blockpadding 
    push           pc_writeexe.scanbaserelocs.i i64 
    addrefoff                 u8 1 -1
    incr                      u8 1
#9253: 
    push           &pc_writeexe.blockcounts 
    push           pc_writeexe.scanbaserelocs.i i64 
    pushptroff                i32 4 -4
    push           2          i64 
    mul                       i64 
    push           8          i64 
    add                       i64 
    push           &pc_writeexe.blockbytes 
    push           pc_writeexe.scanbaserelocs.i i64 
    popptroff                 i32 4 -4
    push           &pc_writeexe.basetablesize 
    push           &pc_writeexe.blockbytes 
    push           pc_writeexe.scanbaserelocs.i i64 
    pushptroff                i32 4 -4
    addto                     i64 
#9252: 
#9254: 
    forup          #9251      i64 1
    opnd           pc_writeexe.scanbaserelocs.i 
    opnd           pc_writeexe.nbaseblocks 
#9250: 
#9255: 
    retproc                   
End


Proc pc_writeexe.writebasereloctable:
    param          pc_writeexe.writebasereloctable.pstart u64 
    local          pc_writeexe.writebasereloctable.p32 u64 
    local          pc_writeexe.writebasereloctable.p16 u64 
    local          pc_writeexe.writebasereloctable.baseaddr i64 
    local          pc_writeexe.writebasereloctable.addr i64 
    local          pc_writeexe.writebasereloctable.nextblock i64 
    local          pc_writeexe.writebasereloctable.q u64 
    local          pc_writeexe.writebasereloctable.i i64 
    procentry                 
    push           pc_writeexe.writebasereloctable.pstart u64 
    pop            pc_writeexe.writebasereloctable.p32 u64 
#9257: 
    push           1          i64 
    pop            pc_writeexe.writebasereloctable.i i64 
    push           pc_writeexe.nbaseblocks i64 
    push           1          i64 
    jumplt         #9258      i64 
#9259: 
    push           &pc_writeexe.blockcounts 
    push           pc_writeexe.writebasereloctable.i i64 
    pushptroff                i32 4 -4
    jumpfalse      #9260      i64 
    push           &pc_writeexe.blockbases 
    push           pc_writeexe.writebasereloctable.i i64 
    pushptroff                i64 8 -8
    push           pc_writeexe.writebasereloctable.p32 u64 
    popptr                    u32 
    push           &pc_writeexe.writebasereloctable.p32 
    incr                      u64 4
    push           &pc_writeexe.blockbytes 
    push           pc_writeexe.writebasereloctable.i i64 
    pushptroff                i32 4 -4
    push           pc_writeexe.writebasereloctable.p32 u64 
    popptr                    u32 
    push           &pc_writeexe.writebasereloctable.p32 
    incr                      u64 4
    push           pc_writeexe.writebasereloctable.p32 u64 
    pop            pc_writeexe.writebasereloctable.p16 u64 
    push           pc_writeexe.basereloclist u64 
    pop            pc_writeexe.writebasereloctable.q u64 
    push           &pc_writeexe.blockbases 
    push           pc_writeexe.writebasereloctable.i i64 
    pushptroff                i64 8 -8
    pop            pc_writeexe.writebasereloctable.baseaddr i64 
    push           pc_writeexe.writebasereloctable.baseaddr i64 
    push           4096       i64 
    add                       i64 
    pop            pc_writeexe.writebasereloctable.nextblock i64 
    jump           #9261      
#9262: 
    push           pc_writeexe.writebasereloctable.q u64 
    push           8          
    pushptroff                u32 1 0
    pop            pc_writeexe.writebasereloctable.addr i64 
    push           pc_writeexe.writebasereloctable.addr i64 
    push           pc_writeexe.writebasereloctable.baseaddr i64 
    jumplt         #9263      i64 
    push           pc_writeexe.writebasereloctable.addr i64 
    push           pc_writeexe.writebasereloctable.nextblock i64 
    jumpge         #9263      i64 
    push           pc_writeexe.writebasereloctable.addr i64 
    push           pc_writeexe.writebasereloctable.baseaddr i64 
    sub                       i64 
    startmult                 
    push           pc_writeexe.writebasereloctable.q u64 
    push           12         
    pushptroff                i32 1 0
    push           2          i64 
    jumpne         #9264      i64 
    push           3          i64 
    resetmult                 
    jump           #9265      
#9264: 
    push           10         i64 
    endmult                   
#9265: 
    push           12         i64 
    shl                       i64 
    add                       i64 
    push           pc_writeexe.writebasereloctable.p16 u64 
    popptr                    u16 
    push           &pc_writeexe.writebasereloctable.p16 
    incr                      u64 2
#9263: 
    push           pc_writeexe.writebasereloctable.q u64 
    pushptr                   u64 
    pop            pc_writeexe.writebasereloctable.q u64 
#9261: 
    push           pc_writeexe.writebasereloctable.q u64 
    jumptrue       #9262      u64 
#9266: 
    push           &pc_writeexe.blockpadding 
    push           pc_writeexe.writebasereloctable.i i64 
    pushptroff                u8 1 -1
    jumpfalse      #9267      i64 
    push           0          i64 
    push           &pc_writeexe.writebasereloctable.p16 
    loadincr                  u64 2
    popptr                    u16 
#9267: 
    push           pc_writeexe.writebasereloctable.p16 u64 
    pop            pc_writeexe.writebasereloctable.p32 u64 
#9260: 
#9268: 
    forup          #9259      i64 1
    opnd           pc_writeexe.writebasereloctable.i 
    opnd           pc_writeexe.nbaseblocks 
#9258: 
#9269: 
    retproc                   
End


Proc pc_writeexe.sortexports:
    param          pc_writeexe.sortexports.sortindex u64 
    local          pc_writeexe.sortexports.d u64 
    local          pc_writeexe.sortexports.e u64 
    local          pc_writeexe.sortexports.swapped i64 
    local          pc_writeexe.sortexports.av_1 i64 
    local          pc_writeexe.sortexports.i i64 
    procentry                 
#9271: 
    push           1          i64 
    pop            pc_writeexe.sortexports.i i64 
    push           pc_writeexe.nexports i64 
    push           1          i64 
    jumplt         #9272      i64 
#9273: 
    push           pc_writeexe.sortexports.i i64 
    push           pc_writeexe.sortexports.sortindex u64 
    push           pc_writeexe.sortexports.i i64 
    popptroff                 i64 8 -8
#9274: 
    forup          #9273      i64 1
    opnd           pc_writeexe.sortexports.i 
    opnd           pc_writeexe.nexports 
#9272: 
#9275: 
    push           0          i64 
    pop            pc_writeexe.sortexports.swapped i64 
#9276: 
    push           1          i64 
    pop            pc_writeexe.sortexports.i i64 
    push           pc_writeexe.nexports i64 
    push           1          i64 
    sub                       i64 
    pop            pc_writeexe.sortexports.av_1 i64 
    push           pc_writeexe.sortexports.av_1 i64 
    push           1          i64 
    jumplt         #9277      i64 
#9278: 
    push           &pc_writeexe.exporttable 
    push           pc_writeexe.sortexports.sortindex u64 
    push           pc_writeexe.sortexports.i i64 
    pushptroff                i64 8 -8
    addrefoff                 block:16 16 -16
    pushptr                   u64 
    pop            pc_writeexe.sortexports.d u64 
    push           &pc_writeexe.exporttable 
    push           pc_writeexe.sortexports.sortindex u64 
    push           pc_writeexe.sortexports.i i64 
    pushptroff                i64 8 0
    addrefoff                 block:16 16 -16
    pushptr                   u64 
    pop            pc_writeexe.sortexports.e u64 
    setargs                   2 0
    push           pc_writeexe.sortexports.e u64 
    pushptr                   u64 
    push           pc_writeexe.sortexports.d u64 
    pushptr                   u64 
    callfn         &strcmp    i32 
    push           0          i64 
    jumple         #9279      i64 
    push           1          i64 
    pop            pc_writeexe.sortexports.swapped i64 
    push           pc_writeexe.sortexports.sortindex u64 
    push           pc_writeexe.sortexports.i i64 
    addrefoff                 i64 8 -8
    push           pc_writeexe.sortexports.sortindex u64 
    push           pc_writeexe.sortexports.i i64 
    addrefoff                 i64 8 0
    swap                      i64 
#9279: 
#9280: 
    forup          #9278      i64 1
    opnd           pc_writeexe.sortexports.i 
    opnd           pc_writeexe.sortexports.av_1 
#9277: 
#9281: 
    push           pc_writeexe.sortexports.swapped i64 
    jumptrue       #9275      i64 
#9282: 
#9283: 
    retproc                   
End


Proc pc_writeexe.getsectionno: i64
    param          pc_writeexe.getsectionno.segment i64 
    procentry                 
    startmult                 
    push           pc_writeexe.getsectionno.segment i64 
    push           3          i64 
    casejumpeq     #9285      i64 0
    push           2          i64 
    casejumpeq     #9286      i64 0
    push           1          i64 
    casejumpeq     #9287      i64 0
    popstack                  i64 
    jump           #9288      
#9285: 
    push           3          i64 
    resetmult                 
    jump           #9289      
#9286: 
    push           2          i64 
    resetmult                 
    jump           #9289      
#9287: 
    push           1          i64 
    resetmult                 
    jump           #9289      
#9288: 
    setargs                   1 0
    push           "GSN"      u64 
    callproc       &pci_mcl.axerror 
    push           0          i64 
    endmult                   
#9289: 
    setret                    i64 
    jump           #9290      
#9290: 
    retfn                     i64 
End


Proc pc_writessx.writessdata: u64
    param          pc_writessx.writessdata.fexe i64 
    procentry                 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_init 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_line 
    push           pci_mcl.dest u64 
    setret                    u64 
    jump           #9292      
#9292: 
    retfn                     u64 
End


Proc pci_clangx.genclang:
    param          pci_clangx.genclang.filename u64 
    procentry                 
    setargs                   1 0
    push           "-CLANG Target Not Included" u64 
    callproc       &mlibp.abortprogram 
#9294: 
    retproc                   
End


Proc pc.start::
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$init 
    setargs                   0 0
    callproc       &pc.getinputoptions 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Processing" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc.infile  u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "to"       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc.destfile u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           pc.freadpcl u8 
    jumpfalse      #9296      i64 
    setargs                   2 0
    startmult                 
    push           pc.freadrts u8 
    jumpfalse      #9297      i64 
    push           "rts.pcl"  u64 
    resetmult                 
    jump           #9298      
#9297: 
    push           0          u64 
    endmult                   
#9298: 
    push           pc.infile  u64 
    callfn         &pc_parse.pcl_readpclfile i64 
    jumptrue       #9299      i64 
    setargs                   2 0
    push           pc.infile  u64 
    setargs                   0 0
    callfn         &pc_libpcl.pcl_lasterror u64 
    callproc       &pc.loaderror 
#9299: 
    jump           #9300      
#9296: 
    setargs                   2 0
    push           ""         u64 
    push           "Can't load .pcl files yet" u64 
    callproc       &pc.loaderror 
#9300: 
    push           pc.target  i64 
    push           1          i64 
    casejumpeq     #9301      i64 0
    push           2          i64 
    casejumpeq     #9302      i64 0
    push           3          i64 
    casejumpeq     #9303      i64 0
    push           4          i64 
    casejumpeq     #9304      i64 0
    push           9          i64 
    casejumpeq     #9305      i64 0
    push           7          i64 
    casejumpeq     #9306      i64 0
    push           5          i64 
    casejumpeq     #9307      i64 0
    push           6          i64 
    casejumpeq     #9308      i64 0
    popstack                  i64 
    jump           #9309      
#9301: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Done"     u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #9310      
#9302: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Writing to:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc.destfile u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           pc.destfile u64 
    callproc       &pc_libpcl.pcl_writepclfile 
    setargs                   1 0
    push           pc.fshowpcl u8 
    callproc       &pc.showoutputfile 
    jump           #9310      
#9303: 
    setargs                   2 0
    push           ""         u64 
    push           "PCB writing not ready" u64 
    callproc       &pc.loaderror 
    jump           #9310      
#9304: 
    setargs                   1 0
    push           pc.destfile u64 
    callproc       &pc_win64.pcl_writeclangfile 
    setargs                   1 0
    push           pc.fshowc  u8 
    callproc       &pc.showoutputfile 
    jump           #9310      
#9305: 
    setargs                   2 0
    push           ""         u64 
    push           "RunVM target not ready" u64 
    callproc       &pc.loaderror 
    jump           #9310      
#9306: 
    setargs                   2 0
    push           pc.foptim  u8 
    push           pc.destfile u64 
    callproc       &pc_win64.pcl_writeasmfile 
    setargs                   1 0
    push           pc.fshowmcl u8 
    callproc       &pc.showoutputfile 
    jump           #9310      
#9307: 
    setargs                   2 0
    push           pc.foptim  u8 
    push           pc.destfile u64 
    callproc       &pc_win64.pcl_writeexefile 
    push           pc.fshowss u8 
    jumpfalse      #9311      i64 
    setargs                   2 0
    push           1          i64 
    push           "SS"       u64 
    callproc       &pc_win64.pcl_showss 
    push           "SS"       u64 
    pop            pc.destfile u64 
    setargs                   1 0
    push           1          i64 
    callproc       &pc.showoutputfile 
#9311: 
    jump           #9310      
#9308: 
    setargs                   2 0
    push           pc.foptim  u8 
    push           pc.destfile u64 
    callproc       &pc_win64.pcl_writedllfile 
    jump           #9310      
#9309: 
#9310: 
#9312: 
    push           0          
    stop                      
    retproc                   
End


Proc pc.showoutputfile:
    param          pc.showoutputfile.flag i64 
    local          pc.showoutputfile.str block:300 
    procentry                 
    push           pc.showoutputfile.flag i64 
    jumpfalse      #9314      i64 
    setargs                   1 0
    push           &pc.showoutputfile.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "\\m\\olded.bat -w " u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc.destfile u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   3 0
    push           0          u64 
    push           1          i64 
    push           &pc.showoutputfile.str 
    callproc       &mwindowsp.os_execwait 
#9314: 
#9315: 
    retproc                   
End


Proc pc.getinputoptions:
    local          pc.getinputoptions.paramno i64 
    local          pc.getinputoptions.pmtype i64 
    local          pc.getinputoptions.name u64 
    local          pc.getinputoptions.value u64 
    local          pc.getinputoptions.ext u64 
    local          pc.getinputoptions.filespec block:300 
    local          pc.getinputoptions.av_1 i64 
    local          pc.getinputoptions.sw i64 
    procentry                 
    push           2          i64 
    pop            pc.getinputoptions.paramno i64 
    jump           #9317      
#9318: 
    push           pc.getinputoptions.pmtype i64 
    push           1          i64 
    casejumpeq     #9319      i64 0
    push           2          i64 
    casejumpeq     #9320      i64 0
    push           3          i64 
    casejumpeq     #9321      i64 0
    popstack                  i64 
    jump           #9322      
#9319: 
    setargs                   1 0
    push           pc.getinputoptions.name u64 
    callproc       &mlibp.convlcstring 
#9323: 
    push           1          i64 
    pop            pc.getinputoptions.sw i64 
    push           28         i64 
    pop            pc.getinputoptions.av_1 i64 
    push           pc.getinputoptions.av_1 i64 
    push           1          i64 
    jumplt         #9324      i64 
#9325: 
    setargs                   2 0
    push           &pc.optionnames 
    push           pc.getinputoptions.sw i64 
    pushptroff                u64 8 -8
    push           pc.getinputoptions.name u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #9326      i64 
    setargs                   2 0
    push           pc.getinputoptions.value u64 
    push           pc.getinputoptions.sw i64 
    callproc       &pc.do_option 
    jump           #9327      
#9326: 
#9328: 
    forup          #9325      i64 1
    opnd           pc.getinputoptions.sw 
    opnd           pc.getinputoptions.av_1 
#9324: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Unknown option:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc.getinputoptions.name u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           99         i64 
    stop                      
#9327: 
    jump           #9329      
#9320: 
    push           pc.ninputfiles i64 
    push           20         i64 
    jumplt         #9330      i64 
    setargs                   2 0
    push           ""         u64 
    push           "Too many input files" u64 
    callproc       &pc.loaderror 
#9330: 
    setargs                   1 0
    push           pc.getinputoptions.name u64 
    callproc       &mlibp.convlcstring 
    setargs                   1 0
    push           pc.getinputoptions.name u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &pc.inputfiles 
    push           &pc.ninputfiles 
    incrload                  i64 1
    popptroff                 u64 8 0
    jump           #9329      
#9321: 
    push           pc.nlibfiles i64 
    push           20         i64 
    jumplt         #9331      i64 
    setargs                   2 0
    push           ""         u64 
    push           "Too many lib files" u64 
    callproc       &pc.loaderror 
#9331: 
    setargs                   1 0
    push           pc.getinputoptions.name u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &pc.libfiles 
    push           &pc.nlibfiles 
    incrload                  i64 1
    popptroff                 u64 8 0
    jump           #9329      
#9322: 
#9329: 
#9317: 
    setargs                   4 0
    push           "pcl"      u64 
    push           &pc.getinputoptions.value 
    push           &pc.getinputoptions.name 
    push           &pc.getinputoptions.paramno 
    callfn         &mlibp.nextcmdparam i64 
    store          pc.getinputoptions.pmtype i64 
    jumptrue       #9318      i64 
#9332: 
    push           pc.target  i64 
    push           0          i64 
    jumpne         #9333      i64 
    push           5          i64 
    pop            pc.target  i64 
    push           "exe"      u64 
    pop            pc.destext u64 
#9333: 
    push           pc.ninputfiles i64 
    push           0          i64 
    jumpne         #9334      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Usage:"   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "\t"       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           &msysp.sysparams 
    push           1          i64 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "filename[.pcl/.pcb]    # Compile to executable" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "\t"       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           &msysp.sysparams 
    push           1          i64 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "-help                  # Show other options" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           0          
    stop                      
    jump           #9335      
#9334: 
    push           pc.ninputfiles i64 
    push           1          i64 
    jumpne         #9336      i64 
    push           &pc.inputfiles 
    push           1          i64 
    pushptroff                u64 8 0
    pop            pc.infile  u64 
    setargs                   2 0
    push           0          i64 
    push           pc.infile  u64 
    callfn         &mlibp.extractext u64 
    pop            pc.getinputoptions.ext u64 
    setargs                   1 0
    setargs                   2 0
    push           pc.destext u64 
    push           pc.infile  u64 
    callfn         &mlibp.changeext u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    pop            pc.destfile u64 
    push           pc.destfilename u64 
    jumpfalse      #9337      u64 
    setargs                   1 0
    setargs                   2 0
    push           pc.destext u64 
    push           pc.destfilename u64 
    callfn         &mlibp.addext u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    pop            pc.destfile u64 
    jump           #9338      
#9337: 
    push           pc.destfilepath u64 
    jumpfalse      #9339      u64 
    setargs                   2 0
    push           pc.destfilepath u64 
    push           &pc.getinputoptions.filespec 
    callproc       &strcpy    
    setargs                   2 0
    push           pc.destfile u64 
    setargs                   1 0
    push           &pc.getinputoptions.filespec 
    callfn         &mlibp.extractfile u64 
    callproc       &strcat    
    setargs                   1 0
    push           &pc.getinputoptions.filespec 
    callfn         &mlibp.pcm_copyheapstring u64 
    pop            pc.destfile u64 
#9339: 
#9338: 
    setargs                   2 0
    push           &pc.inputfiles 
    push           1          i64 
    pushptroff                u64 8 0
    push           pc.destfile u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #9340      i64 
    setargs                   2 0
    push           pc.destfile u64 
    push           "Overwriting input file:" u64 
    callproc       &pc.loaderror 
#9340: 
    setargs                   2 0
    push           "pcl"      u64 
    setargs                   1 0
    setargs                   2 0
    push           0          i64 
    push           &pc.inputfiles 
    push           1          i64 
    pushptroff                u64 8 0
    callfn         &mlibp.extractext u64 
    callfn         &mlibp.convlcstring u64 
    callfn         &mlibp.eqstring i64 
    pop            pc.freadpcl u8 
    jump           #9335      
#9336: 
    setargs                   2 0
    push           ""         u64 
    push           "Can't do multiple pcl/pcb modules yet" u64 
    callproc       &pc.loaderror 
#9335: 
    push           pc.target  i64 
    push           5          i64 
    setjumpeq      #9341      i64 
    push           6          i64 
    setjumpeq      #9341      i64 
    push           7          i64 
    setjumpeq      #9341      i64 
    push           10         i64 
    setjumpne      #9342      i64 
#9341: 
    push           1          i64 
    pop            pc.mcltarget u8 
#9342: 
#9343: 
    retproc                   
End


Proc pc.do_option:
    param          pc.do_option.sw i64 
    param          pc.do_option.value u64 
    procentry                 
    push           pc.do_option.sw i64 
    switch         #9345      1 28
    opnd           #9346      
#9345: 
    switchlabel    #9347      
    switchlabel    #9348      
    switchlabel    #9346      
    switchlabel    #9349      
    switchlabel    #9350      
    switchlabel    #9351      
    switchlabel    #9352      
    switchlabel    #9353      
    switchlabel    #9354      
    switchlabel    #9355      
    switchlabel    #9356      
    switchlabel    #9357      
    switchlabel    #9358      
    switchlabel    #9359      
    switchlabel    #9360      
    switchlabel    #9361      
    switchlabel    #9362      
    switchlabel    #9363      
    switchlabel    #9364      
    switchlabel    #9365      
    switchlabel    #9366      
    switchlabel    #9367      
    switchlabel    #9368      
    switchlabel    #9346      
    switchlabel    #9369      
    switchlabel    #9369      
    switchlabel    #9370      
    switchlabel    #9371      
    endswitch                 
#9347: 
    push           5          i64 
    pop            pc.target  i64 
    push           "exe"      u64 
    pop            pc.destext u64 
    jump           #9372      
#9348: 
    push           6          i64 
    pop            pc.target  i64 
    push           "dll"      u64 
    pop            pc.destext u64 
    jump           #9372      
#9349: 
    push           7          i64 
    pop            pc.target  i64 
    push           "asm"      u64 
    pop            pc.destext u64 
    jump           #9372      
#9350: 
    push           4          i64 
    pop            pc.target  i64 
    push           "c"        u64 
    pop            pc.destext u64 
    jump           #9372      
#9351: 
    push           2          i64 
    pop            pc.target  i64 
    push           "pcl"      u64 
    pop            pc.destext u64 
    jump           #9372      
#9352: 
    push           3          i64 
    pop            pc.target  i64 
    push           "pcb"      u64 
    pop            pc.destext u64 
    jump           #9372      
#9354: 
    push           9          i64 
    pop            pc.target  i64 
    push           ""         u64 
    pop            pc.destext u64 
    jump           #9372      
#9355: 
    push           10         i64 
    pop            pc.target  i64 
    push           ""         u64 
    pop            pc.destext u64 
    jump           #9372      
#9353: 
    push           1          i64 
    pop            pc.target  i64 
    push           ""         u64 
    pop            pc.destext u64 
    jump           #9372      
#9356: 
    push           2          i64 
    pop            pc.foptim  u8 
    jump           #9372      
#9357: 
    push           1          i64 
    pop            pc.foptim  u8 
    jump           #9372      
#9358: 
    push           2          i64 
    pop            pc.foptim  u8 
    jump           #9372      
#9359: 
    push           1          i64 
    pop            pc.freadrts u8 
    jump           #9372      
#9360: 
    push           0          i64 
    pop            pc.freadrts u8 
    jump           #9372      
#9367: 
    push           1          i64 
    pop            pc.fshowtiming u8 
    jump           #9372      
#9368: 
    push           1          i64 
    pop            pc.fverbose u8 
    jump           #9372      
#9369: 
    setargs                   0 0
    callproc       &pc.showhelp 
    push           0          
    stop                      
    jump           #9372      
#9370: 
    push           pc.do_option.outpathused u8 
    jumpfalse      #9373      i64 
    setargs                   2 0
    push           ""         u64 
    push           "mixed out/path" u64 
    callproc       &pc.loaderror 
#9373: 
    setargs                   1 0
    push           pc.do_option.value u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    pop            pc.destfilename u64 
    push           1          i64 
    pop            pc.do_option.outused u8 
    jump           #9372      
#9371: 
    push           pc.do_option.outused u8 
    jumpfalse      #9374      i64 
    setargs                   2 0
    push           ""         u64 
    push           "mixed out/path" u64 
    callproc       &pc.loaderror 
#9374: 
    push           pc.do_option.value u64 
    setargs                   1 0
    push           pc.do_option.value u64 
    callfn         &strlen    i64 
    pushptroff                u8 1 -1
    push           92         i64 
    setjumpeq      #9375      u64 
    push           47         i64 
    setjumpeqx     #9375      u64 
    setargs                   2 0
    push           ""         u64 
    push           "Path needs to end with \\ or /" u64 
    callproc       &pc.loaderror 
#9375: 
    setargs                   1 0
    push           pc.do_option.value u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    pop            pc.destfilepath u64 
    push           1          i64 
    pop            pc.do_option.outpathused u8 
    jump           #9372      
#9361: 
    push           1          i64 
    pop            pc.fshowpcl u8 
    jump           #9372      
#9362: 
    push           1          i64 
    pop            pc.fshowmcl u8 
    jump           #9372      
#9363: 
    push           1          i64 
    pop            pc.fshowc  u8 
    jump           #9372      
#9364: 
    push           1          i64 
    pop            pc.fshowss u8 
    jump           #9372      
#9365: 
    push           1          i64 
    pop            pc.fshowst u8 
    jump           #9372      
#9366: 
    push           1          i64 
    pop            pc.fshowstflat u8 
    jump           #9372      
#9346: 
#9372: 
#9376: 
    retproc                   
End


Proc pc.showhelp:
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Help not ready" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           0          
    stop                      
#9378: 
    retproc                   
End


Proc pc.loaderror:
    param          pc.loaderror.mess u64 
    param          pc.loaderror.param u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Load error:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc.loaderror.mess u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc.loaderror.param u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#9380: 
    retproc                   
End


Endprogram
