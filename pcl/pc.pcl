Extproc malloc u64
    extparam                  u64 
Endext

Extproc realloc u64
    extparam                  u64 
    extparam                  u64 
Endext

Extproc free
    extparam                  u64 
Endext

Extproc memset
    extparam                  u64 
    extparam                  i32 
    extparam                  u64 
Endext

Extproc memcpy
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
Endext

Extproc clock i32
Endext

Extproc ftell i32
    extparam                  u64 
Endext

Extproc fseek i32
    extparam                  u64 
    extparam                  i32 
    extparam                  i32 
Endext

Extproc fread u64
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
Endext

Extproc fwrite u64
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
Endext

Extproc ungetc i32
    extparam                  i32 
    extparam                  u64 
Endext

Extproc fopen u64
    extparam                  u64 
    extparam                  u64 
Endext

Extproc fclose i32
    extparam                  u64 
Endext

Extproc fgets u64
    extparam                  u64 
    extparam                  i64 
    extparam                  u64 
Endext

Extproc getchar i32
Endext

Extproc strlen i64
    extparam                  u64 
Endext

Extproc strcpy u64
    extparam                  u64 
    extparam                  u64 
Endext

Extproc strcmp i32
    extparam                  u64 
    extparam                  u64 
Endext

Extproc strncmp i32
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
Endext

Extproc strncpy u64
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
Endext

Extproc memcmp i32
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
Endext

Extproc strcat u64
    extparam                  u64 
    extparam                  u64 
Endext

Extproc tolower i32
    extparam                  i32 
Endext

Extproc toupper i32
    extparam                  i32 
Endext

Extproc strtod r64
    extparam                  u64 
    extparam                  u64 
Endext

Extproc puts i32
    extparam                  u64 
Endext

Extproc printf i32
    extparam                  u64 
    extvariadics              
Endext

Extproc sprintf i32
    extparam                  u64 
    extparam                  u64 
    extvariadics              
Endext

Extproc sscanf i32
    extparam                  u64 
    extparam                  u64 
    extvariadics              
Endext

Extproc system i32
    extparam                  u64 
Endext

Extproc fgetc i32
    extparam                  u64 
Endext

Extproc fprintf i32
    extparam                  u64 
    extparam                  u64 
    extvariadics              
Endext

Extproc strchr u64
    extparam                  u64 
    extparam                  i32 
Endext

Extproc __getmainargs i32
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
    extparam                  i64 
    extparam                  u64 
Endext

Extproc `GetStdHandle u64
    extparam                  u32 
Endext

Extproc `SetConsoleCtrlHandler i64
    extparam                  u64 
    extparam                  i64 
Endext

Extproc `SetConsoleMode i64
    extparam                  u64 
    extparam                  u32 
Endext

Extproc `CreateProcessA i64
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
    extparam                  i64 
    extparam                  u32 
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
Endext

Extproc `GetLastError u32
Endext

Extproc `WaitForSingleObject u32
    extparam                  u64 
    extparam                  u32 
Endext

Extproc `GetExitCodeProcess i64
    extparam                  u64 
    extparam                  u64 
Endext

Extproc `CloseHandle i64
    extparam                  u64 
Endext

Extproc `GetNumberOfConsoleInputEvents i64
    extparam                  u64 
    extparam                  u64 
Endext

Extproc `FlushConsoleInputBuffer i64
    extparam                  u64 
Endext

Extproc `LoadLibraryA u64
    extparam                  u64 
Endext

Extproc `GetProcAddress u64
    extparam                  u64 
    extparam                  u64 
Endext

Extproc `LoadCursorA u64
    extparam                  u64 
    extparam                  u64 
Endext

Extproc `RegisterClassExA u32
    extparam                  u64 
Endext

Extproc `DefWindowProcA i64
    extparam                  u64 
    extparam                  u32 
    extparam                  u64 
    extparam                  u64 
Endext

Extproc `ReadConsoleInputA i64
    extparam                  u64 
    extparam                  u64 
    extparam                  u32 
    extparam                  u64 
Endext

Extproc `Sleep
    extparam                  u32 
Endext

Extproc `GetModuleFileNameA u32
    extparam                  u64 
    extparam                  u64 
    extparam                  u32 
Endext

Extproc `MessageBoxA
    extparam                  i32 
    extparam                  u64 
    extparam                  u64 
    extparam                  i32 
Endext

Extproc `QueryPerformanceCounter u32
    extparam                  u64 
Endext

Extproc `QueryPerformanceFrequency u32
    extparam                  u64 
Endext

Extproc `CreateFileA u64
    extparam                  u64 
    extparam                  u32 
    extparam                  u32 
    extparam                  u64 
    extparam                  u32 
    extparam                  u32 
    extparam                  u64 
Endext

Extproc `GetFileTime u32
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
Endext

Extproc `GetLocalTime
    extparam                  u64 
Endext

Extproc `GetTickCount64 u64
Endext

Extproc `PeekMessageA u32
    extparam                  u64 
    extparam                  u64 
    extparam                  u32 
    extparam                  u32 
    extparam                  u32 
Endext

    zstatic        msysp.fmtparam: i64 
    istatic        msysp.needgap: i64 
    data           0          u64 
    istatic        msysp.outdev: i64 
    data           1          u64 
    istatic        msysp.outchan: u64 
    data           0          u64 
    istatic        msysp.fmtstr: u64 
    data           0          u64 
    zstatic        msysp.outchan_stack: block:80 
    zstatic        msysp.outdev_stack: block:80 
    zstatic        msysp.fmtstr_stack: block:80 
    zstatic        msysp.needgap_stack: block:10 
    zstatic        msysp.ptr_stack: block:80 
    istatic        msysp.niostack: i64 
    data           0          u64 
    istatic        msysp.digits: block:16 
    data           48         u8 
    data           49         u8 
    data           50         u8 
    data           51         u8 
    data           52         u8 
    data           53         u8 
    data           54         u8 
    data           55         u8 
    data           56         u8 
    data           57         u8 
    data           65         u8 
    data           66         u8 
    data           67         u8 
    data           68         u8 
    data           69         u8 
    data           70         u8 
    istatic        msysp.defaultfmt: block:16 
    data           0          u8 
    data           0          u8 
    data           10         u8 
    data           0          u8 
    data           32         u8 
    data           102        u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           82         u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    zstatic        msysp.rd_buffer: u64 
    zstatic        msysp.rd_length: i64 
    zstatic        msysp.rd_pos: u64 
    zstatic        msysp.rd_lastpos: u64 
    zstatic        msysp.termchar: i64 
    zstatic        msysp.itemerror: i64 
    zstatic        msysp.nsysparams: i64 
    zstatic        msysp.nenvstrings: i64 
    zstatic        msysp.sysparams: block:1024 
    zstatic        msysp.envstrings: block:1024 
    zstatic        msysp.callbackstack: block:576 
    istatic        msysp.ncallbacks: i64 
    data           0          u64 
    istatic        msysp.mask63: u64 
    data           9223372036854775807 u64 
    istatic        msysp.offset64: r64 
    data           9.2233720368547758e+018 u64 
    istatic        msysp.offset32: r64 
    data           9.2233720368547758e+018 u64 
    zstatic        msysp.m$init.startupinfo: block:128 
    zstatic        msysp.getfmt.fmt: block:16 
    zstatic        msysp.strint.str: block:100 
    zstatic        msysp.strword.str: block:100 
    zstatic        msysp.strreal.str: block:320 
    zstatic        mlibp.mdebug: i64 
    zstatic        mlibp.npcmalloc: i64 
    zstatic        mlibp.allocupper: block:2408 
    zstatic        mlibp.alloccode: i64 
    zstatic        mlibp.allocbytes: i64 
    istatic        mlibp.fdebug: i64 
    data           0          u64 
    zstatic        mlibp.rfsize: i64 
    zstatic        mlibp.maxmemory: u64 
    zstatic        mlibp.maxalloccode: i64 
    istatic        mlibp.pcm_setup: u8 
    data           0          u8 
    istatic        mlibp.show: i64 
    data           0          u64 
    zstatic        mlibp.allocbase: u64 
    istatic        mlibp.memtotal: i64 
    data           0          u64 
    istatic        mlibp.smallmemtotal: i64 
    data           0          u64 
    istatic        mlibp.smallmemobjs: i64 
    data           0          u64 
    istatic        mlibp.maxmemtotal: i64 
    data           0          u64 
    zstatic        mlibp.memalloctable: block:24 
    zstatic        mlibp.memallocsize: block:12 
    zstatic        mlibp.pcheapstart: u64 
    zstatic        mlibp.pcheapend: u64 
    zstatic        mlibp.pcheapptr: u64 
    zstatic        mlibp.sizeindextable: block:2049 
    zstatic        mlibp.freelist: block:72 
    istatic        mlibp.pmnames: block:48 
    data           "pm_end"   u64 
    data           "pm_option" u64 
    data           "pm_sourcefile" u64 
    data           "pm_libfile" u64 
    data           "pm_colon" u64 
    data           "pm_extra" u64 
    istatic        mlibp.seed: block:16 
    data           2993073034246558322 u64 
    data           1617678968452121188 u64 
    zstatic        mlibp.pcm_newblock.totalheapsize: i64 
    istatic        mlibp.pcm_round.allocbytes: block:36 
    data           0          u32 
    data           16         u32 
    data           32         u32 
    data           64         u32 
    data           128        u32 
    data           256        u32 
    data           512        u32 
    data           1024       u32 
    data           2048       u32 
    zstatic        mlibp.changeext.newfile: block:260 
    zstatic        mlibp.extractpath.str: block:260 
    zstatic        mlibp.extractbasefile.str: block:100 
    istatic        mlibp.nextcmdparam.infile: i64 
    data           0          u64 
    istatic        mlibp.nextcmdparam.filestart: u64 
    data           0          u64 
    istatic        mlibp.nextcmdparam.fileptr: u64 
    data           0          u64 
    istatic        mlibp.nextcmdparam.colonseen: u8 
    data           0          u8 
    zstatic        mlibp.nextcmdparam.str: block:300 
    zstatic        mlibp.readnextfileitem.str: block:256 
    zstatic        mlibp.padstr.str: block:256 
    zstatic        mlibp.chr.str: block:8 
    zstatic        mwindowsp.hconsole: u64 
    zstatic        mwindowsp.hconsolein: u64 
    zstatic        mwindowsp.lastkey: block:20 
    zstatic        mwindowsp.pendkey: block:20 
    zstatic        mwindowsp.keypending: i64 
    istatic        mwindowsp.wndproc_callbackfn: u64 
    data           0          u64 
    istatic        mwindowsp.init_flag: i64 
    data           0          u64 
    zstatic        mwindowsp.os_gxregisterclass.registered: u8 
    istatic        mwindowsp.mainwndproc.count: i64 
    data           0          u64 
    zstatic        mwindowsp.os_gethostname.name: block:300 
    zstatic        mwindowsp.os_gethostname.n: i64 
    zstatic        mwindowsp.os_peek.lastticks: i64 
    zstatic        pc_decls.optimflag: i64 
    zstatic        pc_decls.rtsproctable: block:48 
    zstatic        pc_decls.npdllnametable: i64 
    zstatic        pc_decls.pdllnametable: block:400 
    zstatic        pc_libpcl.pcstart: u64 
    zstatic        pc_libpcl.pccurr: u64 
    zstatic        pc_libpcl.pcend: u64 
    zstatic        pc_libpcl.pcalloc: i64 
    zstatic        pc_libpcl.pcfixed: u8 
    zstatic        pc_libpcl.pcseqno: i64 
    zstatic        pc_libpcl.pcneedfntable: i64 
    istatic        pc_libpcl.initpcalloc: i64 
    data           65536      u64 
    zstatic        pc_libpcl.sbuffer: block:16 
    istatic        pc_libpcl.dest: u64 
    data           &pc_libpcl.sbuffer u64 
    zstatic        pc_libpcl.destlinestart: i64 
    zstatic        pc_libpcl.labelmap: block:400000 
    zstatic        pc_libpcl.labelno: i64 
    zstatic        pc_libpcl.maxuserlabel: i64 
    zstatic        pc_libpcl.labelnooffset: i64 
    zstatic        pc_libpcl.npcl: i64 
    zstatic        pc_libpcl.labeloffset: block:800000 
    zstatic        pc_libpcl.longstring: u64 
    zstatic        pc_libpcl.longstringlen: i64 
    zstatic        pc_libpcl.errormess: u64 
    zstatic        pc_libpcl.mcldone: i64 
    zstatic        pc_libpcl.stropnd.str: block:512 
    zstatic        pc_libpcl.strpmode.str: block:64 
    istatic        pc_lex.symbolnames: block:176 
    data           "errorsym" u64 
    data           "commasym" u64 
    data           "colonsym" u64 
    data           "dcolonsym" u64 
    data           "lsqsym"   u64 
    data           "rsqsym"   u64 
    data           "addsym"   u64 
    data           "subsym"   u64 
    data           "mulsym"   u64 
    data           "addrsym"  u64 
    data           "eqsym"    u64 
    data           "eolsym"   u64 
    data           "eofsym"   u64 
    data           "labelsym" u64 
    data           "intconstsym" u64 
    data           "realconstsym" u64 
    data           "stringconstsym" u64 
    data           "int128constsym" u64 
    data           "namesym"  u64 
    data           "kopcodesym" u64 
    data           "typesym"  u64 
    data           "kdummysym" u64 
    zstatic        pc_lex.lexhashtable: block:2097152 
    zstatic        pc_lex.nsymbols: i64 
    istatic        pc_lex.lxfileno: i64 
    data           0          u64 
    istatic        pc_lex.lxlineno: i64 
    data           0          u64 
    istatic        pc_lex.nsourcefiles: i64 
    data           0          u64 
    zstatic        pc_lex.lxsymbol: i64 
    zstatic        pc_lex.lxsubcode: i64 
    zstatic        pc_lex.lxvalue: i64 
    zstatic        pc_lex.lxuvalue128: u128 
    zstatic        pc_lex.lxxvalue: r64 
    zstatic        pc_lex.lxsvalue: u64 
    zstatic        pc_lex.lxlength: i64 
    zstatic        pc_lex.lxtruename: u8 
    zstatic        pc_lex.lxhashvalue: i64 
    zstatic        pc_lex.lxsptr: u64 
    zstatic        pc_lex.lxstart: u64 
    zstatic        pc_lex.lxsymptr: u64 
    zstatic        pc_lex.commentmap: block:256 
    istatic        pc_lex.initlex.done: u8 
    data           0          u8 
    zstatic        pc_parse.insideproc: i64 
    istatic        pc_parse.parse_readrts.source: u64 
    data           "!\c\nProcrts rts.$power_i64: i64\c\n    param          rts.$power_i64.a i64 \c\n    param          rts.$power_i64.n i64 \c\n    procentry                 \c\n!-------------------------------------------------\c\n    startmult                 \c\n    push           rts.$power_i64.n i64 \c\n    push           0          i64 \c\n    jumpge         #8         i64 \c\n    push           0          i64 \c\n    resetmult                 \c\n    jump           #9         \c\n#8: \c\n    push           rts.$power_i64.n i64 \c\n    push           0          i64 \c\n    jumpne         #10        i64 \c\n    push           1          i64 \c\n    resetmult                 \c\n    jump           #9         \c\n#10: \c\n    push           rts.$power_i64.n i64 \c\n    push           1          i64 \c\n    jumpne         #11        i64 \c\n    push           rts.$power_i64.a i64 \c\n    resetmult                 \c\n    jump           #9         \c\n#11: \c\n    push           rts.$power_i64.n i64 \c\n    push           0          i64 \c\n    dotindex                  i64 \c\n    jumptrue       #12        i64 \c\n    setargs                   2 0\c\n    push           rts.$power_i64.n i64 \c\n    push           2          i64 \c\n    idiv                      i64 \c\n    push           rts.$power_i64.a i64 \c\n    sqr                       i64 \c\n    callfn         &rts.$power_i64 i64 \c\n    resetmult                 \c\n    jump           #9         \c\n#12: \c\n    setargs                   2 0\c\n    push           rts.$power_i64.n i64 \c\n    push           1          i64 \c\n    sub                       i64 \c\n    push           2          i64 \c\n    idiv                      i64 \c\n    push           rts.$power_i64.a i64 \c\n    sqr                       i64 \c\n    callfn         &rts.$power_i64 i64 \c\n    push           rts.$power_i64.a i64 \c\n    mul                       i64 \c\n    endmult                   \c\n#9: \c\n    setret                    i64 \c\n    jump           #13        \c\n!-------------------------------------------------\c\n#13: \c\n    retfn                     i64 \c\nEnd\c\n\c\n!\c\n    endprogram                \c\n" u64 
    istatic        pc_tables.pstdnames: block:120 
    data           "void"     u64 
    data           "u8"       u64 
    data           "u16"      u64 
    data           "u32"      u64 
    data           "u64"      u64 
    data           "u128"     u64 
    data           "i8"       u64 
    data           "i16"      u64 
    data           "i32"      u64 
    data           "i64"      u64 
    data           "i128"     u64 
    data           "r32"      u64 
    data           "r64"      u64 
    data           "block"    u64 
    data           "$last"    u64 
    istatic        pc_tables.psize: block:15 
    data           0          u8 
    data           1          u8 
    data           2          u8 
    data           4          u8 
    data           8          u8 
    data           16         u8 
    data           1          u8 
    data           2          u8 
    data           4          u8 
    data           8          u8 
    data           16         u8 
    data           4          u8 
    data           8          u8 
    data           0          u8 
    data           0          u8 
    istatic        pc_tables.psigned: block:15 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    istatic        pc_tables.pfloat: block:15 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    istatic        pc_tables.pcat: block:15 
    data           0          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           1          u8 
    data           5          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           1          u8 
    data           5          u8 
    data           2          u8 
    data           3          u8 
    data           6          u8 
    data           0          u8 
    istatic        pc_tables.catnames: block:56 
    data           "voidcat"  u64 
    data           "d64cat"   u64 
    data           "x32cat"   u64 
    data           "x64cat"   u64 
    data           "shortcat" u64 
    data           "widecat"  u64 
    data           "blockcat" u64 
    istatic        pc_tables.opndnames: block:80 
    data           "no_opnd"  u64 
    data           "mem_opnd" u64 
    data           "memaddr_opnd" u64 
    data           "label_opnd" u64 
    data           "int_opnd" u64 
    data           "real_opnd" u64 
    data           "int128_opnd" u64 
    data           "real32_opnd" u64 
    data           "string_opnd" u64 
    data           "assem_opnd" u64 
    istatic        pc_tables.pclnames: block:1752 
    data           "kzero"    u64 
    data           "knop"     u64 
    data           "kstop"    u64 
    data           "kcomment" u64 
    data           "kimportdll" u64 
    data           "kistatic" u64 
    data           "kzstatic" u64 
    data           "kequiv"   u64 
    data           "kprocdef" u64 
    data           "kprocentry" u64 
    data           "kendproc" u64 
    data           "kendprogram" u64 
    data           "kextproc" u64 
    data           "kextparam" u64 
    data           "kextvariadics" u64 
    data           "kendextproc" u64 
    data           "kthreadedproc" u64 
    data           "kprocrts" u64 
    data           "klocal"   u64 
    data           "kparam"   u64 
    data           "klabel"   u64 
    data           "klabelname" u64 
    data           "kpush"    u64 
    data           "kpop"     u64 
    data           "kstore"   u64 
    data           "kpushnc"  u64 
    data           "kpushlabel" u64 
    data           "kopnd"    u64 
    data           "ktype"    u64 
    data           "kduplstack" u64 
    data           "kswapstack" u64 
    data           "kpushptroff" u64 
    data           "kpopptroff" u64 
    data           "kstoreptroff" u64 
    data           "kpushptr" u64 
    data           "kpopptr"  u64 
    data           "kstoreptr" u64 
    data           "kdotindex" u64 
    data           "kpopdotindex" u64 
    data           "kstoredotindex" u64 
    data           "kdotslice" u64 
    data           "kpopdotslice" u64 
    data           "kstoredotslice" u64 
    data           "kpopstack" u64 
    data           "keval"    u64 
    data           "kcallproc" u64 
    data           "kcallprocptr" u64 
    data           "kretproc" u64 
    data           "kcallfn"  u64 
    data           "kcallfnptr" u64 
    data           "kretfn"   u64 
    data           "kjump"    u64 
    data           "kjumpptr" u64 
    data           "kjumpeq"  u64 
    data           "kjumpne"  u64 
    data           "kjumplt"  u64 
    data           "kjumple"  u64 
    data           "kjumpge"  u64 
    data           "kjumpgt"  u64 
    data           "kjumptrue" u64 
    data           "kjumpfalse" u64 
    data           "kjumpinrange" u64 
    data           "kjumpnotinrange" u64 
    data           "ksetjumpeq" u64 
    data           "ksetjumpeqx" u64 
    data           "ksetjumpne" u64 
    data           "kseteq"   u64 
    data           "ksetne"   u64 
    data           "ksetlt"   u64 
    data           "ksetle"   u64 
    data           "ksetge"   u64 
    data           "ksetgt"   u64 
    data           "kcasejumpeq" u64 
    data           "kselecteq" u64 
    data           "kselectne" u64 
    data           "kselectlt" u64 
    data           "kselectle" u64 
    data           "kselectge" u64 
    data           "kselectgt" u64 
    data           "kselecttrue" u64 
    data           "kto"      u64 
    data           "kforup"   u64 
    data           "kfordown" u64 
    data           "kswap"    u64 
    data           "kmakeslice" u64 
    data           "kswitch"  u64 
    data           "kswitchlabel" u64 
    data           "kendswitch" u64 
    data           "kclear"   u64 
    data           "kcsegment" u64 
    data           "kisegment" u64 
    data           "kzsegment" u64 
    data           "krosegment" u64 
    data           "kdata"    u64 
    data           "kdb"      u64 
    data           "kdw"      u64 
    data           "kdd"      u64 
    data           "kdq"      u64 
    data           "kdstring" u64 
    data           "kdstringz" u64 
    data           "kreserve" u64 
    data           "kassem"   u64 
    data           "kadd"     u64 
    data           "ksub"     u64 
    data           "kmul"     u64 
    data           "kdiv"     u64 
    data           "kidiv"    u64 
    data           "kirem"    u64 
    data           "kiand"    u64 
    data           "kior"     u64 
    data           "kixor"    u64 
    data           "kshl"     u64 
    data           "kshr"     u64 
    data           "kin"      u64 
    data           "knotin"   u64 
    data           "kmin"     u64 
    data           "kmax"     u64 
    data           "keq"      u64 
    data           "kne"      u64 
    data           "klt"      u64 
    data           "kle"      u64 
    data           "kge"      u64 
    data           "kgt"      u64 
    data           "ksame"    u64 
    data           "kandl"    u64 
    data           "korl"     u64 
    data           "kaddrefoff" u64 
    data           "ksubrefoff" u64 
    data           "ksubref"  u64 
    data           "kneg"     u64 
    data           "kabs"     u64 
    data           "kinot"    u64 
    data           "knotl"    u64 
    data           "kistruel" u64 
    data           "ksqr"     u64 
    data           "ksqrt"    u64 
    data           "ksin"     u64 
    data           "kcos"     u64 
    data           "ktan"     u64 
    data           "kasin"    u64 
    data           "kacos"    u64 
    data           "katan"    u64 
    data           "kln"      u64 
    data           "klog"     u64 
    data           "kexp"     u64 
    data           "kround"   u64 
    data           "kfloor"   u64 
    data           "kceil"    u64 
    data           "kfract"   u64 
    data           "ksign"    u64 
    data           "katan2"   u64 
    data           "kpower"   u64 
    data           "kfmod"    u64 
    data           "kincr"    u64 
    data           "kdecr"    u64 
    data           "kincrload" u64 
    data           "kdecrload" u64 
    data           "kloadincr" u64 
    data           "kloaddecr" u64 
    data           "kaddto"   u64 
    data           "ksubto"   u64 
    data           "kmulto"   u64 
    data           "kdivto"   u64 
    data           "kidivto"  u64 
    data           "kiremto"  u64 
    data           "kiandto"  u64 
    data           "kiorto"   u64 
    data           "kixorto"  u64 
    data           "kshlto"   u64 
    data           "kshrto"   u64 
    data           "kminto"   u64 
    data           "kmaxto"   u64 
    data           "kandlto"  u64 
    data           "korlto"   u64 
    data           "kaddrefoffto" u64 
    data           "ksubrefoffto" u64 
    data           "knegto"   u64 
    data           "kabsto"   u64 
    data           "kinotto"  u64 
    data           "knotlto"  u64 
    data           "kistruelto" u64 
    data           "ktypepun" u64 
    data           "ksoftconv" u64 
    data           "kwiden"   u64 
    data           "knarrow"  u64 
    data           "kfloat"   u64 
    data           "kfix"     u64 
    data           "ktruncate" u64 
    data           "kfwiden"  u64 
    data           "kfnarrow" u64 
    data           "ksofttruncw" u64 
    data           "kwidenw"  u64 
    data           "kstartmult" u64 
    data           "kresetmult" u64 
    data           "kendmult" u64 
    data           "ksetret"  u64 
    data           "ksetretmult" u64 
    data           "ksetargs" u64 
    data           "kgetnprocs" u64 
    data           "kgetprocname" u64 
    data           "kgetprocaddr" u64 
    data           "klen"     u64 
    data           "klwb"     u64 
    data           "kupb"     u64 
    data           "kbounds"  u64 
    data           "klenstr"  u64 
    data           "kbitwidth" u64 
    data           "kbytesize" u64 
    data           "kbytes"   u64 
    data           "kminvalue" u64 
    data           "kmaxvalue" u64 
    data           "ktypestr" u64 
    data           "kerror"   u64 
    data           "karraytoslice" u64 
    data           "kichartoslice" u64 
    data           "ksofttruncshort" u64 
    data           "kcharaxtoichar" u64 
    data           "ksliceptr" u64 
    data           "klast"    u64 
    istatic        pc_tables.pclhasopnd: block:219 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           4          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           2          u8 
    data           2          u8 
    data           3          u8 
    data           3          u8 
    data           1          u8 
    data           2          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    istatic        pc_tables.pclhastype: block:219 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    istatic        pc_tables.pclextra: block:219 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           2          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           2          u8 
    data           2          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           2          u8 
    data           2          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           2          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    istatic        pc_tables.rtsnames: block:48 
    data           "rts_rts_unimpl" u64 
    data           "rts_power_i64" u64 
    data           "rts_float_u64r64" u64 
    data           "rts_mul_i128" u64 
    data           "rts_div_i128" u64 
    data           "rts_div_u128" u64 
    istatic        pci_mcl.valtypenames: block:80 
    data           "no_val"   u64 
    data           "intimm_val" u64 
    data           "realimm_val" u64 
    data           "realmem_val" u64 
    data           "stringimm_val" u64 
    data           "def_val"  u64 
    data           "temp_val" u64 
    data           "label_val" u64 
    data           "name_val" u64 
    data           "syscall_val" u64 
    istatic        pci_mcl.mclnames: block:1184 
    data           "m_procstart" u64 
    data           "m_procend" u64 
    data           "m_comment" u64 
    data           "m_blank"  u64 
    data           "m_deleted" u64 
    data           "m_labelname" u64 
    data           "m_define" u64 
    data           "m_definereg" u64 
    data           "m_label"  u64 
    data           "m_nop"    u64 
    data           "m_param"  u64 
    data           "m_mov"    u64 
    data           "m_push"   u64 
    data           "m_pop"    u64 
    data           "m_lea"    u64 
    data           "m_cmovcc" u64 
    data           "m_movd"   u64 
    data           "m_movq"   u64 
    data           "m_movsx"  u64 
    data           "m_movzx"  u64 
    data           "m_movsxd" u64 
    data           "m_call"   u64 
    data           "m_ret"    u64 
    data           "m_leave"  u64 
    data           "m_retn"   u64 
    data           "m_jmp"    u64 
    data           "m_jmpcc"  u64 
    data           "m_xchg"   u64 
    data           "m_add"    u64 
    data           "m_sub"    u64 
    data           "m_adc"    u64 
    data           "m_sbb"    u64 
    data           "m_imul"   u64 
    data           "m_mul"    u64 
    data           "m_imul2"  u64 
    data           "m_imul3"  u64 
    data           "m_idiv"   u64 
    data           "m_div"    u64 
    data           "m_andx"   u64 
    data           "m_orx"    u64 
    data           "m_xorx"   u64 
    data           "m_test"   u64 
    data           "m_cmp"    u64 
    data           "m_shl"    u64 
    data           "m_sar"    u64 
    data           "m_shr"    u64 
    data           "m_rol"    u64 
    data           "m_ror"    u64 
    data           "m_rcl"    u64 
    data           "m_rcr"    u64 
    data           "m_neg"    u64 
    data           "m_notx"   u64 
    data           "m_inc"    u64 
    data           "m_dec"    u64 
    data           "m_cbw"    u64 
    data           "m_cwd"    u64 
    data           "m_cdq"    u64 
    data           "m_cqo"    u64 
    data           "m_setcc"  u64 
    data           "m_bsf"    u64 
    data           "m_bsr"    u64 
    data           "m_sqrtsd" u64 
    data           "m_sqrtss" u64 
    data           "m_addss"  u64 
    data           "m_subss"  u64 
    data           "m_mulss"  u64 
    data           "m_divss"  u64 
    data           "m_addsd"  u64 
    data           "m_subsd"  u64 
    data           "m_mulsd"  u64 
    data           "m_divsd"  u64 
    data           "m_comiss" u64 
    data           "m_comisd" u64 
    data           "m_xorpd"  u64 
    data           "m_xorps"  u64 
    data           "m_andpd"  u64 
    data           "m_andps"  u64 
    data           "m_pxor"   u64 
    data           "m_pand"   u64 
    data           "m_cvtss2si" u64 
    data           "m_cvtsd2si" u64 
    data           "m_cvttss2si" u64 
    data           "m_cvttsd2si" u64 
    data           "m_cvtsi2ss" u64 
    data           "m_cvtsi2sd" u64 
    data           "m_cvtsd2ss" u64 
    data           "m_cvtss2sd" u64 
    data           "m_movdqa" u64 
    data           "m_movdqu" u64 
    data           "m_pcmpistri" u64 
    data           "m_pcmpistrm" u64 
    data           "m_fld"    u64 
    data           "m_fst"    u64 
    data           "m_fstp"   u64 
    data           "m_fild"   u64 
    data           "m_fist"   u64 
    data           "m_fistp"  u64 
    data           "m_fadd"   u64 
    data           "m_fsub"   u64 
    data           "m_fmul"   u64 
    data           "m_fdiv"   u64 
    data           "m_fsqrt"  u64 
    data           "m_fsin"   u64 
    data           "m_fcos"   u64 
    data           "m_fsincos" u64 
    data           "m_fptan"  u64 
    data           "m_fpatan" u64 
    data           "m_fabs"   u64 
    data           "m_fchs"   u64 
    data           "m_minss"  u64 
    data           "m_maxss"  u64 
    data           "m_minsd"  u64 
    data           "m_maxsd"  u64 
    data           "m_db"     u64 
    data           "m_dw"     u64 
    data           "m_dd"     u64 
    data           "m_dq"     u64 
    data           "m_ddoffset" u64 
    data           "m_segment" u64 
    data           "m_isegment" u64 
    data           "m_zsegment" u64 
    data           "m_csegment" u64 
    data           "m_align"  u64 
    data           "m_resb"   u64 
    data           "m_resw"   u64 
    data           "m_resd"   u64 
    data           "m_resq"   u64 
    data           "m_xlat"   u64 
    data           "m_loopnz" u64 
    data           "m_loopz"  u64 
    data           "m_loopcx" u64 
    data           "m_jecxz"  u64 
    data           "m_jrcxz"  u64 
    data           "m_cmpsb"  u64 
    data           "m_cmpsw"  u64 
    data           "m_cmpsd"  u64 
    data           "m_cmpsq"  u64 
    data           "m_rdtsc"  u64 
    data           "m_popcnt" u64 
    data           "m_finit"  u64 
    data           "m_fldz"   u64 
    data           "m_fld1"   u64 
    data           "m_fldpi"  u64 
    data           "m_fld2t"  u64 
    data           "m_fld2e"  u64 
    data           "m_fldlg2" u64 
    data           "m_fldln2" u64 
    data           "m_halt"   u64 
    istatic        pci_mcl.mclnopnds: block:148 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           1          u8 
    data           2          u8 
    data           1          u8 
    data           1          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           1          u8 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           1          u8 
    data           1          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           3          u8 
    data           3          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           2          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    istatic        pci_mcl.mclcodes: block:148 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           144        u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           232        u8 
    data           195        u8 
    data           201        u8 
    data           0          u8 
    data           233        u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           5          u8 
    data           2          u8 
    data           3          u8 
    data           5          u8 
    data           4          u8 
    data           0          u8 
    data           0          u8 
    data           7          u8 
    data           6          u8 
    data           4          u8 
    data           1          u8 
    data           6          u8 
    data           0          u8 
    data           7          u8 
    data           4          u8 
    data           7          u8 
    data           5          u8 
    data           0          u8 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           3          u8 
    data           2          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           188        u8 
    data           189        u8 
    data           81         u8 
    data           81         u8 
    data           88         u8 
    data           92         u8 
    data           89         u8 
    data           94         u8 
    data           88         u8 
    data           92         u8 
    data           89         u8 
    data           94         u8 
    data           0          u8 
    data           0          u8 
    data           87         u8 
    data           87         u8 
    data           84         u8 
    data           84         u8 
    data           239        u8 
    data           219        u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           102        u8 
    data           243        u8 
    data           99         u8 
    data           98         u8 
    data           0          u8 
    data           2          u8 
    data           3          u8 
    data           0          u8 
    data           2          u8 
    data           3          u8 
    data           193        u8 
    data           233        u8 
    data           201        u8 
    data           249        u8 
    data           250        u8 
    data           254        u8 
    data           255        u8 
    data           251        u8 
    data           242        u8 
    data           243        u8 
    data           225        u8 
    data           224        u8 
    data           93         u8 
    data           95         u8 
    data           93         u8 
    data           95         u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           2          u8 
    data           4          u8 
    data           8          u8 
    data           215        u8 
    data           224        u8 
    data           225        u8 
    data           226        u8 
    data           227        u8 
    data           227        u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           49         u8 
    data           0          u8 
    data           0          u8 
    data           238        u8 
    data           232        u8 
    data           235        u8 
    data           233        u8 
    data           234        u8 
    data           236        u8 
    data           237        u8 
    data           244        u8 
    istatic        pci_mcl.regnames: block:168 
    data           "rnone"    u64 
    data           "r0"       u64 
    data           "r1"       u64 
    data           "r2"       u64 
    data           "r3"       u64 
    data           "r4"       u64 
    data           "r5"       u64 
    data           "r6"       u64 
    data           "r7"       u64 
    data           "r8"       u64 
    data           "r9"       u64 
    data           "r10"      u64 
    data           "r11"      u64 
    data           "r12"      u64 
    data           "r13"      u64 
    data           "r14"      u64 
    data           "r15"      u64 
    data           "r16"      u64 
    data           "r17"      u64 
    data           "r18"      u64 
    data           "r19"      u64 
    istatic        pci_mcl.regcodes: block:21 
    data           0          u8 
    data           0          u8 
    data           10         u8 
    data           11         u8 
    data           7          u8 
    data           3          u8 
    data           6          u8 
    data           12         u8 
    data           13         u8 
    data           14         u8 
    data           15         u8 
    data           1          u8 
    data           2          u8 
    data           8          u8 
    data           9          u8 
    data           5          u8 
    data           4          u8 
    data           4          u8 
    data           7          u8 
    data           5          u8 
    data           6          u8 
    istatic        pci_mcl.condnames: block:160 
    data           "ov"       u64 
    data           "nov"      u64 
    data           "ltu"      u64 
    data           "geu"      u64 
    data           "eq"       u64 
    data           "ne"       u64 
    data           "leu"      u64 
    data           "gtu"      u64 
    data           "s"        u64 
    data           "ns"       u64 
    data           "p"        u64 
    data           "np"       u64 
    data           "lt"       u64 
    data           "ge"       u64 
    data           "le"       u64 
    data           "gt"       u64 
    data           "flt"      u64 
    data           "fge"      u64 
    data           "fle"      u64 
    data           "fgt"      u64 
    istatic        pci_mcl.asmcondnames: block:160 
    data           "o"        u64 
    data           "no"       u64 
    data           "b"        u64 
    data           "ae"       u64 
    data           "z"        u64 
    data           "nz"       u64 
    data           "be"       u64 
    data           "a"        u64 
    data           "s"        u64 
    data           "ns"       u64 
    data           "p"        u64 
    data           "np"       u64 
    data           "l"        u64 
    data           "ge"       u64 
    data           "le"       u64 
    data           "g"        u64 
    data           "b"        u64 
    data           "ae"       u64 
    data           "be"       u64 
    data           "a"        u64 
    istatic        pci_mcl.asmrevcond: block:160 
    data           1          u64 
    data           0          u64 
    data           3          u64 
    data           2          u64 
    data           5          u64 
    data           4          u64 
    data           7          u64 
    data           6          u64 
    data           9          u64 
    data           8          u64 
    data           11         u64 
    data           10         u64 
    data           13         u64 
    data           12         u64 
    data           15         u64 
    data           14         u64 
    data           17         u64 
    data           16         u64 
    data           19         u64 
    data           18         u64 
    istatic        pci_mcl.dregnames: block:1088 
    data           "d0"       u64 
    data           "d1"       u64 
    data           "d2"       u64 
    data           "d3"       u64 
    data           "d4"       u64 
    data           "d5"       u64 
    data           "d6"       u64 
    data           "d7"       u64 
    data           "d8"       u64 
    data           "d9"       u64 
    data           "d10"      u64 
    data           "d11"      u64 
    data           "d12"      u64 
    data           "d13"      u64 
    data           "d14"      u64 
    data           "d15"      u64 
    data           "a0"       u64 
    data           "a1"       u64 
    data           "a2"       u64 
    data           "a3"       u64 
    data           "a4"       u64 
    data           "a5"       u64 
    data           "a6"       u64 
    data           "a7"       u64 
    data           "a8"       u64 
    data           "a9"       u64 
    data           "a10"      u64 
    data           "a11"      u64 
    data           "a12"      u64 
    data           "a13"      u64 
    data           "a14"      u64 
    data           "a15"      u64 
    data           "w0"       u64 
    data           "w1"       u64 
    data           "w2"       u64 
    data           "w3"       u64 
    data           "w4"       u64 
    data           "w5"       u64 
    data           "w6"       u64 
    data           "w7"       u64 
    data           "w8"       u64 
    data           "w9"       u64 
    data           "w10"      u64 
    data           "w11"      u64 
    data           "w12"      u64 
    data           "w13"      u64 
    data           "w14"      u64 
    data           "w15"      u64 
    data           "b0"       u64 
    data           "b1"       u64 
    data           "b2"       u64 
    data           "b3"       u64 
    data           "b4"       u64 
    data           "b5"       u64 
    data           "b6"       u64 
    data           "b7"       u64 
    data           "b8"       u64 
    data           "b9"       u64 
    data           "b10"      u64 
    data           "b11"      u64 
    data           "b12"      u64 
    data           "b13"      u64 
    data           "b14"      u64 
    data           "b15"      u64 
    data           "b16"      u64 
    data           "b17"      u64 
    data           "b18"      u64 
    data           "b19"      u64 
    data           "rax"      u64 
    data           "rbx"      u64 
    data           "rcx"      u64 
    data           "rdx"      u64 
    data           "rsi"      u64 
    data           "rdi"      u64 
    data           "rbp"      u64 
    data           "rsp"      u64 
    data           "r8"       u64 
    data           "r9"       u64 
    data           "r10"      u64 
    data           "r11"      u64 
    data           "r12"      u64 
    data           "r13"      u64 
    data           "r14"      u64 
    data           "r15"      u64 
    data           "eax"      u64 
    data           "ebx"      u64 
    data           "ecx"      u64 
    data           "edx"      u64 
    data           "esi"      u64 
    data           "edi"      u64 
    data           "ebp"      u64 
    data           "esp"      u64 
    data           "r8d"      u64 
    data           "r9d"      u64 
    data           "r10d"     u64 
    data           "r11d"     u64 
    data           "r12d"     u64 
    data           "r13d"     u64 
    data           "r14d"     u64 
    data           "r15d"     u64 
    data           "ax"       u64 
    data           "bx"       u64 
    data           "cx"       u64 
    data           "dx"       u64 
    data           "si"       u64 
    data           "di"       u64 
    data           "bp"       u64 
    data           "sp"       u64 
    data           "r8w"      u64 
    data           "r9w"      u64 
    data           "r10w"     u64 
    data           "r11w"     u64 
    data           "r12w"     u64 
    data           "r13w"     u64 
    data           "r14w"     u64 
    data           "r15w"     u64 
    data           "al"       u64 
    data           "bl"       u64 
    data           "cl"       u64 
    data           "dl"       u64 
    data           "ah"       u64 
    data           "bh"       u64 
    data           "ch"       u64 
    data           "dh"       u64 
    data           "sil"      u64 
    data           "dil"      u64 
    data           "bpl"      u64 
    data           "spl"      u64 
    data           "r8b"      u64 
    data           "r9b"      u64 
    data           "r10b"     u64 
    data           "r11b"     u64 
    data           "r12b"     u64 
    data           "r13b"     u64 
    data           "r14b"     u64 
    data           "r15b"     u64 
    istatic        pci_mcl.regsizes: block:136 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    istatic        pci_mcl.regindices: block:136 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           4          u8 
    data           5          u8 
    data           6          u8 
    data           7          u8 
    data           8          u8 
    data           9          u8 
    data           10         u8 
    data           11         u8 
    data           12         u8 
    data           13         u8 
    data           14         u8 
    data           15         u8 
    data           16         u8 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           4          u8 
    data           5          u8 
    data           6          u8 
    data           7          u8 
    data           8          u8 
    data           9          u8 
    data           10         u8 
    data           11         u8 
    data           12         u8 
    data           13         u8 
    data           14         u8 
    data           15         u8 
    data           16         u8 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           4          u8 
    data           5          u8 
    data           6          u8 
    data           7          u8 
    data           8          u8 
    data           9          u8 
    data           10         u8 
    data           11         u8 
    data           12         u8 
    data           13         u8 
    data           14         u8 
    data           15         u8 
    data           16         u8 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           4          u8 
    data           5          u8 
    data           6          u8 
    data           7          u8 
    data           8          u8 
    data           9          u8 
    data           10         u8 
    data           11         u8 
    data           12         u8 
    data           13         u8 
    data           14         u8 
    data           15         u8 
    data           16         u8 
    data           17         u8 
    data           18         u8 
    data           19         u8 
    data           20         u8 
    data           1          u8 
    data           5          u8 
    data           11         u8 
    data           12         u8 
    data           6          u8 
    data           4          u8 
    data           15         u8 
    data           16         u8 
    data           13         u8 
    data           14         u8 
    data           2          u8 
    data           3          u8 
    data           7          u8 
    data           8          u8 
    data           9          u8 
    data           10         u8 
    data           1          u8 
    data           5          u8 
    data           11         u8 
    data           12         u8 
    data           6          u8 
    data           4          u8 
    data           15         u8 
    data           16         u8 
    data           13         u8 
    data           14         u8 
    data           2          u8 
    data           3          u8 
    data           7          u8 
    data           8          u8 
    data           9          u8 
    data           10         u8 
    data           1          u8 
    data           5          u8 
    data           11         u8 
    data           12         u8 
    data           6          u8 
    data           4          u8 
    data           15         u8 
    data           16         u8 
    data           13         u8 
    data           14         u8 
    data           2          u8 
    data           3          u8 
    data           7          u8 
    data           8          u8 
    data           9          u8 
    data           10         u8 
    data           1          u8 
    data           5          u8 
    data           11         u8 
    data           12         u8 
    data           17         u8 
    data           18         u8 
    data           19         u8 
    data           20         u8 
    data           6          u8 
    data           4          u8 
    data           15         u8 
    data           16         u8 
    data           13         u8 
    data           14         u8 
    data           2          u8 
    data           3          u8 
    data           7          u8 
    data           8          u8 
    data           9          u8 
    data           10         u8 
    istatic        pci_mcl.xmmregnames: block:128 
    data           "xmm0"     u64 
    data           "xmm1"     u64 
    data           "xmm2"     u64 
    data           "xmm3"     u64 
    data           "xmm4"     u64 
    data           "xmm5"     u64 
    data           "xmm6"     u64 
    data           "xmm7"     u64 
    data           "xmm8"     u64 
    data           "xmm9"     u64 
    data           "xmm10"    u64 
    data           "xmm11"    u64 
    data           "xmm12"    u64 
    data           "xmm13"    u64 
    data           "xmm14"    u64 
    data           "xmm15"    u64 
    istatic        pci_mcl.fregnames: block:64 
    data           "st0"      u64 
    data           "st1"      u64 
    data           "st2"      u64 
    data           "st3"      u64 
    data           "st4"      u64 
    data           "st5"      u64 
    data           "st6"      u64 
    data           "st7"      u64 
    istatic        pci_mcl.mregnames: block:64 
    data           "mmx0"     u64 
    data           "mmx1"     u64 
    data           "mmx2"     u64 
    data           "mmx3"     u64 
    data           "mmx4"     u64 
    data           "mmx5"     u64 
    data           "mmx6"     u64 
    data           "mmx7"     u64 
    istatic        pci_mcl.jmpccnames: block:128 
    data           "jo"       u64 
    data           "jno"      u64 
    data           "jb"       u64 
    data           "jae"      u64 
    data           "jz"       u64 
    data           "jnz"      u64 
    data           "jbe"      u64 
    data           "ja"       u64 
    data           "js"       u64 
    data           "jns"      u64 
    data           "jp"       u64 
    data           "jnp"      u64 
    data           "jl"       u64 
    data           "jge"      u64 
    data           "jle"      u64 
    data           "jg"       u64 
    istatic        pci_mcl.jmpcccodes: block:16 
    data           0          u8 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           4          u8 
    data           5          u8 
    data           6          u8 
    data           7          u8 
    data           8          u8 
    data           9          u8 
    data           10         u8 
    data           11         u8 
    data           12         u8 
    data           13         u8 
    data           14         u8 
    data           15         u8 
    istatic        pci_mcl.setccnames: block:128 
    data           "seto"     u64 
    data           "setno"    u64 
    data           "setb"     u64 
    data           "setae"    u64 
    data           "setz"     u64 
    data           "setnz"    u64 
    data           "setbe"    u64 
    data           "seta"     u64 
    data           "sets"     u64 
    data           "setns"    u64 
    data           "setp"     u64 
    data           "setnp"    u64 
    data           "setl"     u64 
    data           "setge"    u64 
    data           "setle"    u64 
    data           "setg"     u64 
    istatic        pci_mcl.setcccodes: block:16 
    data           0          u8 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           4          u8 
    data           5          u8 
    data           6          u8 
    data           7          u8 
    data           8          u8 
    data           9          u8 
    data           10         u8 
    data           11         u8 
    data           12         u8 
    data           13         u8 
    data           14         u8 
    data           15         u8 
    istatic        pci_mcl.cmovccnames: block:128 
    data           "cmovo"    u64 
    data           "cmovno"   u64 
    data           "cmovb"    u64 
    data           "cmovae"   u64 
    data           "cmovz"    u64 
    data           "cmovnz"   u64 
    data           "cmovbe"   u64 
    data           "cmova"    u64 
    data           "cmovs"    u64 
    data           "cmovns"   u64 
    data           "cmovp"    u64 
    data           "cmovnp"   u64 
    data           "cmovl"    u64 
    data           "cmovge"   u64 
    data           "cmovle"   u64 
    data           "cmovg"    u64 
    istatic        pci_mcl.cmovcccodes: block:16 
    data           0          u8 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           4          u8 
    data           5          u8 
    data           6          u8 
    data           7          u8 
    data           8          u8 
    data           9          u8 
    data           10         u8 
    data           11         u8 
    data           12         u8 
    data           13         u8 
    data           14         u8 
    data           15         u8 
    istatic        pci_mcl.segmentnames: block:48 
    data           "no_seg"   u64 
    data           "code_seg" u64 
    data           "idata_seg" u64 
    data           "zdata_seg" u64 
    data           "rodata_seg" u64 
    data           "impdata_seg" u64 
    istatic        pci_mcl.reftypenames: block:24 
    data           "extern_ref" u64 
    data           "fwd_ref"  u64 
    data           "back_ref" u64 
    istatic        pci_mcl.opndnames_ma: block:56 
    data           "a_none"   u64 
    data           "a_reg"    u64 
    data           "a_imm"    u64 
    data           "a_mem"    u64 
    data           "a_cond"   u64 
    data           "a_xreg"   u64 
    data           "a_wreg"   u64 
    zstatic        pci_mcl.mlabelno: i64 
    zstatic        pci_mcl.pclopndstack: block:3150 
    zstatic        pci_mcl.noperands: i64 
    zstatic        pci_mcl.mstackdepth: i64 
    zstatic        pci_mcl.pclstack: u64 
    zstatic        pci_mcl.pclstackzero: block:15 
    istatic        pci_mcl.locnames: block:72 
    data           "no_loc"   u64 
    data           "reg_loc"  u64 
    data           "xreg_loc" u64 
    data           "stack_loc" u64 
    data           "imm_loc"  u64 
    data           "mem_loc"  u64 
    data           "memhigh_loc" u64 
    data           "regvar_loc" u64 
    data           "xregvar_loc" u64 
    istatic        pci_mcl.fmtnames: block:160 
    data           "nofmt_void" u64 
    data           "reg_d64"  u64 
    data           "xreg_x64" u64 
    data           "xreg_x32" u64 
    data           "stack_d64" u64 
    data           "stack_x64" u64 
    data           "stack_x32" u64 
    data           "imm_d64"  u64 
    data           "imm_x64"  u64 
    data           "imm_x32"  u64 
    data           "imm_str"  u64 
    data           "imm_memaddr" u64 
    data           "imm_label" u64 
    data           "imm_labaddr" u64 
    data           "mem_d64"  u64 
    data           "mem_x64"  u64 
    data           "mem_x32"  u64 
    data           "memhigh_d64" u64 
    data           "regvar_d64" u64 
    data           "xregvar_x64" u64 
    istatic        pci_mcl.loccodes: block:20 
    data           0          u8 
    data           1          u8 
    data           2          u8 
    data           2          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           5          u8 
    data           5          u8 
    data           5          u8 
    data           5          u8 
    data           7          u8 
    data           8          u8 
    istatic        pci_mcl.floatloc: block:20 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    istatic        pci_mcl.loadfmt: block:20 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           1          u8 
    data           1          u8 
    data           2          u8 
    istatic        pci_mcl.pushfmt: block:20 
    data           0          u8 
    data           4          u8 
    data           5          u8 
    data           6          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           4          u8 
    data           5          u8 
    data           6          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           5          u8 
    data           6          u8 
    data           4          u8 
    data           4          u8 
    data           5          u8 
    zstatic        pci_mcl.regset: block:16 
    zstatic        pci_mcl.xregset: block:16 
    zstatic        pci_mcl.isregvar: block:16 
    zstatic        pci_mcl.isxregvar: block:16 
    zstatic        pci_mcl.inf_proccalls: i64 
    zstatic        pci_mcl.inf_proclocals: i64 
    zstatic        pci_mcl.inf_procxlocals: i64 
    zstatic        pci_mcl.inf_leafproc: i64 
    zstatic        pci_mcl.inf_highreg: i64 
    zstatic        pci_mcl.inf_highxreg: i64 
    zstatic        pci_mcl.inf_maxargs: i64 
    zstatic        pci_mcl.inf_assem: i64 
    zstatic        pci_mcl.inf_r10used: i64 
    zstatic        pci_mcl.inf_r11used: i64 
    zstatic        pci_mcl.inf_r13used: i64 
    zstatic        pci_mcl.dsaveregs: block:128 
    zstatic        pci_mcl.xsaveregs: block:128 
    zstatic        pci_mcl.ndsaveregs: i64 
    zstatic        pci_mcl.ndsavepush: i64 
    zstatic        pci_mcl.nxsaveregs: i64 
    zstatic        pci_mcl.dsaveoffset: i64 
    zstatic        pci_mcl.xsaveoffset: i64 
    zstatic        pci_mcl.needstackframe: i64 
    zstatic        pci_mcl.framebytes: i64 
    zstatic        pci_mcl.needshadow48: i64 
    zstatic        pci_mcl.needshadow32: i64 
    zstatic        pci_mcl.noxorclear: u8 
    istatic        pci_mcl.xregnames: block:136 
    data           "xnone"    u64 
    data           "xr0"      u64 
    data           "xr1"      u64 
    data           "xr2"      u64 
    data           "xr3"      u64 
    data           "xr4"      u64 
    data           "xr5"      u64 
    data           "xr6"      u64 
    data           "xr7"      u64 
    data           "xr8"      u64 
    data           "xr9"      u64 
    data           "xr10"     u64 
    data           "xr11"     u64 
    data           "xr12"     u64 
    data           "xr13"     u64 
    data           "xr14"     u64 
    data           "xr15"     u64 
    zstatic        pci_mcl.procdefpcl: u64 
    zstatic        pci_mcl.procdef: u64 
    zstatic        pci_mcl.callshadow: block:128 
    zstatic        pci_mcl.callslots: block:128 
    zstatic        pci_mcl.callalign: block:16 
    zstatic        pci_mcl.callargs: block:16 
    zstatic        pci_mcl.callnvars: block:16 
    zstatic        pci_mcl.ncalldepth: i64 
    zstatic        pci_mcl.paramdefs: block:256 
    zstatic        pci_mcl.localdefs: block:2048 
    zstatic        pci_mcl.nparams: i64 
    zstatic        pci_mcl.nlocals: i64 
    zstatic        pci_mcl.retmode: i64 
    zstatic        pci_mcl.passno: i64 
    zstatic        pci_mcl.sa_nargs: i64 
    istatic        pci_mcl.multregs: block:48 
    data           1          u64 
    data           2          u64 
    data           3          u64 
    data           11         u64 
    data           12         u64 
    data           13         u64 
    istatic        pci_mcl.multxregs: block:48 
    data           1          u64 
    data           2          u64 
    data           3          u64 
    data           4          u64 
    data           5          u64 
    data           6          u64 
    zstatic        pci_mcl.paramoffset: i64 
    zstatic        pci_mcl.lababs32: i64 
    zstatic        pci_mcl.lababs64: i64 
    zstatic        pci_mcl.labneg32: i64 
    zstatic        pci_mcl.labneg64: i64 
    zstatic        pci_mcl.labmask63: i64 
    zstatic        pci_mcl.laboffset64: i64 
    zstatic        pci_mcl.labzero: i64 
    istatic        pci_mcl.kk0used: i64 
    data           0          u64 
    zstatic        pci_mcl.stackaligned: i64 
    zstatic        pci_mcl.mccode: u64 
    zstatic        pci_mcl.mccodex: u64 
    istatic        pci_mcl.currsegment: i64 
    data           0          u64 
    istatic        pci_mcl.currzdataalign: i64 
    data           0          u64 
    istatic        pci_mcl.curridataalign: i64 
    data           0          u64 
    zstatic        pci_mcl.frameoffset: i64 
    zstatic        pci_mcl.isthreadedproc: i64 
    zstatic        pci_mcl.iscallbackproc: i64 
    zstatic        pci_mcl.structretoffset: i64 
    zstatic        pci_mcl.stacksetinstr: u64 
    zstatic        pci_mcl.currblocksize: i64 
    zstatic        pci_mcl.allasmstr: u64 
    zstatic        pci_mcl.allasmstrlen: i64 
    zstatic        pci_mcl.dstackopnd: u64 
    zstatic        pci_mcl.dframeopnd: u64 
    istatic        pci_mcl.zero_opnd: u64 
    data           0          u64 
    zstatic        pci_mcl.regtable: block:2048 
    zstatic        pci_mcl.smallinttable: block:264 
    zstatic        pci_mcl.frameregtable: block:1544 
    zstatic        pci_mcl.stringtable: u64 
    zstatic        pci_mcl.stringlabtable: u64 
    zstatic        pci_mcl.realtable: u64 
    zstatic        pci_mcl.reallabtable: u64 
    zstatic        pci_mcl.stringtablesize: i64 
    zstatic        pci_mcl.realtablesize: i64 
    istatic        pci_mcl.nstrings: i64 
    data           0          u64 
    istatic        pci_mcl.nreals: i64 
    data           0          u64 
    zstatic        pci_mcl.labeltable: block:6400000 
    zstatic        pci_mcl.sbuffer: block:16 
    istatic        pci_mcl.dest: u64 
    data           &pci_mcl.sbuffer u64 
    zstatic        pci_mcl.destlinestart: i64 
    zstatic        pci_mcl.currasmproc: u64 
    zstatic        pci_mcl.noregvar: i64 
    zstatic        pci_mcl.mseqno: i64 
    zstatic        pci_mcl.rtsproclabels: block:48 
    zstatic        pci_mcl.lab_funcnametable: i64 
    zstatic        pci_mcl.lab_funcaddrtable: i64 
    zstatic        pci_mcl.lab_funcnprocs: i64 
    zstatic        pci_mcl.ss_zdatalen: i64 
    zstatic        pci_mcl.ss_zdata: u64 
    zstatic        pci_mcl.ss_idata: u64 
    zstatic        pci_mcl.ss_code: u64 
    zstatic        pci_mcl.ss_idatarelocs: u64 
    zstatic        pci_mcl.ss_coderelocs: u64 
    zstatic        pci_mcl.ss_nidatarelocs: i64 
    zstatic        pci_mcl.ss_ncoderelocs: i64 
    zstatic        pci_mcl.ss_symboltable: u64 
    zstatic        pci_mcl.ss_nsymbols: i64 
    zstatic        pci_mcl.ss_symboltablesize: i64 
    zstatic        pci_mcl.labeldeftable: u64 
    zstatic        pci_mcl.alineno: i64 
    zstatic        pci_mcl.psearchlibs: block:240 
    zstatic        pci_mcl.npsearchlibs: i64 
    zstatic        pci_mcl.plibfiles: block:408 
    zstatic        pci_mcl.nplibfiles: i64 
    zstatic        pci_mcl.hostasmhandler: u64 
    zstatic        pc_genmcl.procdefmcl: u64 
    zstatic        pc_genmcl.currpcl: u64 
    zstatic        pc_genmcl.px_handlertable: block:1752 
    istatic        pc_genmcl.scondcodes: block:6 
    data           4          u8 
    data           5          u8 
    data           12         u8 
    data           14         u8 
    data           13         u8 
    data           15         u8 
    istatic        pc_genmcl.ucondcodes: block:6 
    data           4          u8 
    data           5          u8 
    data           2          u8 
    data           6          u8 
    data           3          u8 
    data           7          u8 
    istatic        pc_genmcl.multregs: block:48 
    data           1          u64 
    data           2          u64 
    data           3          u64 
    data           11         u64 
    data           12         u64 
    data           13         u64 
    istatic        pc_genmcl.multxregs: block:48 
    data           1          u64 
    data           2          u64 
    data           3          u64 
    data           4          u64 
    data           5          u64 
    data           6          u64 
    istatic        pc_genmcl.inithandlers.initdone: u8 
    data           0          u8 
    istatic        pc_libmcl.fshowmsource: i64 
    data           0          u64 
    zstatic        pc_libmcl.rd: block:120 
    zstatic        pc_libmcl.strmcl.str: block:512 
    istatic        pc_libmcl.getregname.prefix: block:136 
    data           "B"        u64 
    data           "W"        u64 
    data           ""         u64 
    data           "A"        u64 
    data           ""         u64 
    data           ""         u64 
    data           ""         u64 
    data           "D"        u64 
    data           ""         u64 
    data           ""         u64 
    data           ""         u64 
    data           ""         u64 
    data           ""         u64 
    data           ""         u64 
    data           ""         u64 
    data           "Q"        u64 
    data           "N"        u64 
    zstatic        pc_libmcl.getregname.str: block:32 
    zstatic        pc_libmcl.fgetregname.str: block:32 
    zstatic        pc_libmcl.getfullname.str: block:256 
    zstatic        pc_libmcl.stropnd.str: block:512 
    zstatic        pc_libmcl.strvalue.str: block:512 
    zstatic        pc_stackmcl.stropndstack.str: block:512 
    zstatic        pc_genss.rex: i64 
    zstatic        pc_genss.sizeoverride: i64 
    zstatic        pc_genss.addroverride: i64 
    zstatic        pc_genss.f2override: i64 
    zstatic        pc_genss.f3override: i64 
    zstatic        pc_genss.ddd: u64 
    zstatic        pc_genss.extraparam: u64 
    istatic        pc_genss.currseg: i64 
    data           0          u64 
    zstatic        pc_genss.currdata: u64 
    zstatic        pc_genss.currrelocs: u64 
    zstatic        pc_genss.nrelocs: i64 
    istatic        pc_genss.instrno: i64 
    data           2          u64 
    zstatic        pc_genss.currmcl: u64 
    istatic        pc_genss.genrm.scaletable: block:64 
    data           0          u64 
    data           1          u64 
    data           0          u64 
    data           2          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           3          u64 
    istatic        pc_objdecls.relocnames: block:56 
    data           "abs_rel"  u64 
    data           "addr64_rel" u64 
    data           "addr32_rel" u64 
    data           "addr32nb_rel" u64 
    data           "rel32_rel" u64 
    data           "rel321_rel" u64 
    data           "rel8_rel" u64 
    zstatic        pc_writeexe.libinsttable: block:240 
    zstatic        pc_writeexe.libinstnames: block:240 
    zstatic        pc_writeexe.libnotable: block:240 
    zstatic        pc_writeexe.basereloclist: u64 
    zstatic        pc_writeexe.nbaserelocs: i64 
    zstatic        pc_writeexe.maxrelocaddr: i64 
    zstatic        pc_writeexe.blockbases: block:4000 
    zstatic        pc_writeexe.blockcounts: block:2000 
    zstatic        pc_writeexe.blockbytes: block:2000 
    zstatic        pc_writeexe.blockpadding: block:500 
    zstatic        pc_writeexe.nbaseblocks: i64 
    zstatic        pc_writeexe.basetablesize: i64 
    zstatic        pc_writeexe.imagebase: i64 
    zstatic        pc_writeexe.imagesize: i64 
    zstatic        pc_writeexe.filesize: i64 
    zstatic        pc_writeexe.thunktable: u64 
    zstatic        pc_writeexe.fileiatoffset: i64 
    zstatic        pc_writeexe.fileiatsize: i64 
    zstatic        pc_writeexe.stentrypoint: u64 
    zstatic        pc_writeexe.stentrypoint2: u64 
    zstatic        pc_writeexe.stentrypoint3: u64 
    zstatic        pc_writeexe.sectiontable: block:720 
    zstatic        pc_writeexe.nsections: i64 
    zstatic        pc_writeexe.importdir: u64 
    zstatic        pc_writeexe.importtable: block:144000 
    zstatic        pc_writeexe.nimports: i64 
    zstatic        pc_writeexe.exporttable: block:16000 
    zstatic        pc_writeexe.nexports: i64 
    zstatic        pc_writeexe.dllfilename: u64 
    zstatic        pc_writeexe.isdll: i64 
    zstatic        pc_writeexe.dlltable: block:2400 
    zstatic        pc_writeexe.ndlls: i64 
    zstatic        pc_writeexe.datastart: u64 
    zstatic        pc_writeexe.dataptr: u64 
    zstatic        pc_writeexe.userentrypoint: u64 
    zstatic        pc_writeexe.exportdirvirtaddr: i64 
    zstatic        pc_writeexe.exportdirvirtsize: i64 
    zstatic        pc_writeexe.exportdiroffset: i64 
    zstatic        pc_writeexe.blockdirvirtaddr: i64 
    zstatic        pc_writeexe.blockdirvirtsize: i64 
    zstatic        pc_writeexe.blockdiroffset: i64 
    istatic        pc_writeexe.writedosstub.stubdata: block:128 
    data           77         u8 
    data           90         u8 
    data           144        u8 
    data           0          u8 
    data           3          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           4          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           255        u8 
    data           255        u8 
    data           0          u8 
    data           0          u8 
    data           184        u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           64         u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           128        u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           14         u8 
    data           31         u8 
    data           186        u8 
    data           14         u8 
    data           0          u8 
    data           180        u8 
    data           9          u8 
    data           205        u8 
    data           33         u8 
    data           184        u8 
    data           1          u8 
    data           76         u8 
    data           205        u8 
    data           33         u8 
    data           84         u8 
    data           104        u8 
    data           105        u8 
    data           115        u8 
    data           32         u8 
    data           112        u8 
    data           114        u8 
    data           111        u8 
    data           103        u8 
    data           114        u8 
    data           97         u8 
    data           109        u8 
    data           32         u8 
    data           99         u8 
    data           97         u8 
    data           110        u8 
    data           110        u8 
    data           111        u8 
    data           116        u8 
    data           32         u8 
    data           98         u8 
    data           101        u8 
    data           32         u8 
    data           114        u8 
    data           117        u8 
    data           110        u8 
    data           32         u8 
    data           105        u8 
    data           110        u8 
    data           32         u8 
    data           68         u8 
    data           79         u8 
    data           83         u8 
    data           32         u8 
    data           109        u8 
    data           111        u8 
    data           100        u8 
    data           101        u8 
    data           46         u8 
    data           13         u8 
    data           13         u8 
    data           10         u8 
    data           36         u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    zstatic        pc.target: i64 
    zstatic        pc.fshowc: u8 
    zstatic        pc.fshowpcl: u8 
    zstatic        pc.fshowmcl: u8 
    zstatic        pc.fshowss: u8 
    zstatic        pc.fshowst: u8 
    zstatic        pc.fshowstflat: u8 
    zstatic        pc.fshowtiming: u8 
    zstatic        pc.fverbose: u8 
    zstatic        pc.freadpcl: u8 
    istatic        pc.freadrts: u8 
    data           1          u8 
    zstatic        pc.mcltarget: u8 
    zstatic        pc.foptim: u8 
    zstatic        pc.destfile: u64 
    zstatic        pc.destext: u64 
    zstatic        pc.destfilename: u64 
    zstatic        pc.destfilepath: u64 
    zstatic        pc.infile: u64 
    istatic        pc.targetnames: block:80 
    data           "load_target" u64 
    data           "pcl_target" u64 
    data           "pcb_target" u64 
    data           "clang_target" u64 
    data           "exe_target" u64 
    data           "dll_target" u64 
    data           "asm_target" u64 
    data           "run_target" u64 
    data           "runvm_target" u64 
    data           "runjit_target" u64 
    istatic        pc.optionnames: block:224 
    data           "exe"      u64 
    data           "dll"      u64 
    data           "obj"      u64 
    data           "asm"      u64 
    data           "clang"    u64 
    data           "pcl"      u64 
    data           "pcb"      u64 
    data           "load"     u64 
    data           "runvm"    u64 
    data           "runjit"   u64 
    data           "opt"      u64 
    data           "opt1"     u64 
    data           "opt2"     u64 
    data           "rts"      u64 
    data           "norts"    u64 
    data           "showpcl"  u64 
    data           "showmcl"  u64 
    data           "showc"    u64 
    data           "showss"   u64 
    data           "st"       u64 
    data           "stflat"   u64 
    data           "time"     u64 
    data           "v"        u64 
    data           "q"        u64 
    data           "h"        u64 
    data           "help"     u64 
    data           "out"      u64 
    data           "outpath"  u64 
    zstatic        pc.progsource: u64 
    zstatic        pc.error:  u64 
    zstatic        pc.inputfiles: block:168 
    zstatic        pc.libfiles: block:168 
    zstatic        pc.ninputfiles: i64 
    zstatic        pc.nlibfiles: i64 
    zstatic        pc.do_option.outused: u8 
    zstatic        pc.do_option.outpathused: u8 

Proc msysp.m$init:
    local          msysp.m$init.nargs i32 
    local          msysp.m$init.nargs64 i64 
    local          msysp.m$init.args u64 
    local          msysp.m$init.env u64 
    local          msysp.m$init.res i64 
    local          msysp.m$init.s u64 
    local          msysp.m$init.j i64 
    local          msysp.m$init.i i64 
    procentry                 
    setargs                   5 0
    push           &msysp.m$init.startupinfo 
    push           0          i64 
    push           &msysp.m$init.env 
    push           &msysp.m$init.args 
    push           &msysp.m$init.nargs 
    callfn         &__getmainargs i32 
    pop            msysp.m$init.res i64 
    push           msysp.m$init.nargs i32 
    pop            msysp.nsysparams i64 
    push           msysp.nsysparams i64 
    push           128        i64 
    jumple         #4500      i64 
    setargs                   1 0
    push           "Too many params\n" u64 
    callproc       &printf    
    push           50         i64 
    stop                      
#4500: 
    push           msysp.m$init.nargs i32 
    pop            msysp.m$init.nargs64 i64 
#4501: 
    push           1          i64 
    pop            msysp.m$init.i i64 
    push           msysp.m$init.nargs64 i64 
    push           1          i64 
    jumplt         #4502      i64 
#4503: 
    push           msysp.m$init.args u64 
    push           msysp.m$init.i i64 
    pushptroff                u64 8 -8
    push           &msysp.sysparams 
    push           msysp.m$init.i i64 
    popptroff                 u64 8 -8
#4504: 
    forup          #4503      i64 1
    opnd           msysp.m$init.i 
    opnd           msysp.m$init.nargs64 
#4502: 
    push           1          i64 
    pop            msysp.m$init.j i64 
    push           0          i64 
    pop            msysp.nenvstrings i64 
    jump           #4505      
#4506: 
    push           msysp.m$init.env u64 
    push           msysp.m$init.j i64 
    pushptroff                u64 8 -8
    push           &msysp.envstrings 
    push           &msysp.nenvstrings 
    incrload                  i64 1
    popptroff                 u64 8 -8
    push           &msysp.m$init.j 
    incr                      i64 1
#4505: 
    push           msysp.m$init.env u64 
    push           msysp.m$init.j i64 
    pushptroff                u64 8 -8
    jumptrue       #4506      u64 
#4507: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
#4508: 
    retproc                   
End


Proc msysp.pushio:
    procentry                 
    push           msysp.niostack i64 
    push           10         i64 
    jumplt         #4510      i64 
    setargs                   1 0
    push           "Too many io levels\n" u64 
    callproc       &printf    
    push           53         i64 
    stop                      
#4510: 
    push           &msysp.niostack 
    incr                      i64 1
    push           msysp.outchan u64 
    push           &msysp.outchan_stack 
    push           msysp.niostack i64 
    popptroff                 u64 8 -8
    push           msysp.outdev i64 
    push           &msysp.outdev_stack 
    push           msysp.niostack i64 
    popptroff                 i64 8 -8
    push           msysp.fmtstr u64 
    push           &msysp.fmtstr_stack 
    push           msysp.niostack i64 
    popptroff                 u64 8 -8
    push           msysp.needgap i64 
    push           &msysp.needgap_stack 
    push           msysp.niostack i64 
    popptroff                 u8 1 -1
    push           0          i64 
    pop            msysp.needgap i64 
    push           0          u64 
    pop            msysp.fmtstr u64 
    push           0          u64 
    pop            msysp.outchan u64 
#4511: 
    retproc                   
End


Proc msysp.m$print_startfile:
    param          msysp.m$print_startfile.dev u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.pushio 
    push           msysp.m$print_startfile.dev u64 
    pop            msysp.outchan u64 
    push           msysp.m$print_startfile.dev u64 
    jumpfalse      #4513      u64 
    push           2          i64 
    pop            msysp.outdev i64 
    jump           #4514      
#4513: 
    push           1          i64 
    pop            msysp.outdev i64 
#4514: 
#4515: 
    retproc                   
End


Proc msysp.m$print_startstr:
    param          msysp.m$print_startstr.s u64 
    local          msysp.m$print_startstr.p u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.pushio 
    push           msysp.m$print_startstr.s u64 
    push           &msysp.ptr_stack 
    push           msysp.niostack i64 
    popptroff                 u64 8 -8
    push           &msysp.ptr_stack 
    push           msysp.niostack i64 
    addrefoff                 u64 8 -8
    pop            msysp.m$print_startstr.p u64 
    push           msysp.m$print_startstr.p u64 
    pop            msysp.outchan u64 
    push           3          i64 
    pop            msysp.outdev i64 
#4517: 
    retproc                   
End


Proc msysp.m$print_startptr:
    param          msysp.m$print_startptr.p u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.pushio 
    push           msysp.m$print_startptr.p u64 
    pop            msysp.outchan u64 
    push           3          i64 
    pop            msysp.outdev i64 
#4519: 
    retproc                   
End


Proc msysp.m$print_startcon:
    procentry                 
    setargs                   0 0
    callproc       &msysp.pushio 
    push           1          i64 
    pop            msysp.outdev i64 
#4521: 
    retproc                   
End


Proc msysp.m$freddy:
    procentry                 
    setargs                   0 0
    callproc       &msysp.pushio 
    push           1          i64 
    pop            msysp.outdev i64 
#4523: 
    retproc                   
End


Proc msysp.m$print_setfmt:
    param          msysp.m$print_setfmt.format u64 
    procentry                 
    push           msysp.m$print_setfmt.format u64 
    pop            msysp.fmtstr u64 
#4525: 
    retproc                   
End


Proc msysp.m$print_end:
    procentry                 
    push           0          i64 
    pop            msysp.needgap i64 
    setargs                   1 0
    push           1          i64 
    callproc       &msysp.nextfmtchars 
    push           msysp.niostack i64 
    push           0          i64 
    jumpne         #4527      i64 
    jump           #4528      
#4527: 
    push           &msysp.outchan_stack 
    push           msysp.niostack i64 
    pushptroff                u64 8 -8
    pop            msysp.outchan u64 
    push           &msysp.outdev_stack 
    push           msysp.niostack i64 
    pushptroff                i64 8 -8
    pop            msysp.outdev i64 
    push           &msysp.fmtstr_stack 
    push           msysp.niostack i64 
    pushptroff                u64 8 -8
    pop            msysp.fmtstr u64 
    push           &msysp.needgap_stack 
    push           msysp.niostack i64 
    pushptroff                u8 1 -1
    pop            msysp.needgap i64 
    push           &msysp.niostack 
    decr                      i64 1
#4528: 
    retproc                   
End


Proc msysp.m$print_ptr:
    param          msysp.m$print_ptr.a u64 
    param          msysp.m$print_ptr.fmtstyle u64 
    local          msysp.m$print_ptr.s block:20 
    procentry                 
    push           msysp.m$print_ptr.fmtstyle u64 
    push           0          u64 
    jumpne         #4530      u64 
    push           "z8H"      u64 
    pop            msysp.m$print_ptr.fmtstyle u64 
#4530: 
    setargs                   2 0
    push           msysp.m$print_ptr.fmtstyle u64 
    push           msysp.m$print_ptr.a u64 
    callproc       &msysp.m$print_u64 
#4531: 
    retproc                   
End


Proc msysp.m$print_ptr_nf:
    param          msysp.m$print_ptr_nf.a u64 
    procentry                 
    setargs                   2 0
    push           0          u64 
    push           msysp.m$print_ptr_nf.a u64 
    callproc       &msysp.m$print_ptr 
#4533: 
    retproc                   
End


Proc msysp.m$print_i64:
    param          msysp.m$print_i64.a i64 
    param          msysp.m$print_i64.fmtstyle u64 
    local          msysp.m$print_i64.s block:40 
    local          msysp.m$print_i64.fmt block:16 
    local          msysp.m$print_i64.n i64 
    procentry                 
    setargs                   1 0
    push           0          i64 
    callproc       &msysp.nextfmtchars 
    push           msysp.m$print_i64.fmtstyle u64 
    push           0          u64 
    jumpne         #4535      u64 
    push           msysp.m$print_i64.a i64 
    push           0          i64 
    jumplt         #4536      i64 
    setargs                   4 0
    push           0          i64 
    push           10         u64 
    push           &msysp.m$print_i64.s 
    push           msysp.m$print_i64.a u64 
    callfn         &msysp.u64tostr i64 
    pop            msysp.m$print_i64.n i64 
    jump           #4537      
#4536: 
    push           45         u64 
    push           &msysp.m$print_i64.s 
    push           1          i64 
    popptroff                 u8 1 -1
    setargs                   4 0
    push           0          i64 
    push           10         u64 
    push           &msysp.m$print_i64.s 
    push           1          
    addrefoff                 u8 1 0
    push           msysp.m$print_i64.a i64 
    neg                       u64 
    callfn         &msysp.u64tostr i64 
    push           1          i64 
    add                       i64 
    pop            msysp.m$print_i64.n i64 
#4537: 
    setargs                   2 0
    push           msysp.m$print_i64.n i64 
    push           &msysp.m$print_i64.s 
    callproc       &msysp.printstr_n 
    jump           #4538      
#4535: 
    setargs                   3 0
    push           &msysp.m$print_i64.fmt 
    push           -1         i64 
    push           msysp.m$print_i64.fmtstyle u64 
    callproc       &msysp.strtofmt 
    push           &msysp.m$print_i64.fmt 
    push           14         
    pushptroff                u8 1 0
    push           86         u64 
    jumpne         #4539      u64 
    push           msysp.m$print_i64.a i64 
    pop            msysp.fmtparam i64 
    push           0          i64 
    pop            msysp.needgap i64 
    jump           #4540      
#4539: 
    setargs                   2 0
    push           &msysp.m$print_i64.fmt 
    push           msysp.m$print_i64.a i64 
    callproc       &msysp.tostr_i64 
#4540: 
#4538: 
    push           1          i64 
    pop            msysp.needgap i64 
#4541: 
    retproc                   
End


Proc msysp.m$print_i64_nf:
    param          msysp.m$print_i64_nf.a i64 
    procentry                 
    setargs                   2 0
    push           0          u64 
    push           msysp.m$print_i64_nf.a i64 
    callproc       &msysp.m$print_i64 
#4543: 
    retproc                   
End


Proc msysp.m$print_u64:
    param          msysp.m$print_u64.a u64 
    param          msysp.m$print_u64.fmtstyle u64 
    local          msysp.m$print_u64.s block:40 
    local          msysp.m$print_u64.fmt block:16 
    procentry                 
    setargs                   1 0
    push           0          i64 
    callproc       &msysp.nextfmtchars 
    push           msysp.m$print_u64.fmtstyle u64 
    push           0          u64 
    jumpne         #4545      u64 
    setargs                   3 3
    push           msysp.m$print_u64.a u64 
    push           "%llu"     u64 
    push           &msysp.m$print_u64.s 
    callproc       &sprintf   
    setargs                   1 0
    push           &msysp.m$print_u64.s 
    callproc       &msysp.printstr 
    jump           #4546      
#4545: 
    setargs                   3 0
    push           &msysp.m$print_u64.fmt 
    push           -1         i64 
    push           msysp.m$print_u64.fmtstyle u64 
    callproc       &msysp.strtofmt 
    setargs                   2 0
    push           &msysp.m$print_u64.fmt 
    push           msysp.m$print_u64.a u64 
    callproc       &msysp.tostr_u64 
#4546: 
    push           1          i64 
    pop            msysp.needgap i64 
#4547: 
    retproc                   
End


Proc msysp.m$print_i128:
    param          msysp.m$print_i128.a i128 
    param          msysp.m$print_i128.fmtstyle u64 
    local          msysp.m$print_i128.s block:40 
    local          msysp.m$print_i128.fmt block:16 
    procentry                 
    setargs                   1 0
    push           0          i64 
    callproc       &msysp.nextfmtchars 
    setargs                   3 0
    push           &msysp.m$print_i128.fmt 
    push           -1         i64 
    push           msysp.m$print_i128.fmtstyle u64 
    callproc       &msysp.strtofmt 
    push           msysp.m$print_i128.a i128 
    push           0          i64 
    widenw                    i128 i64 
    jumplt         #4549      i128 
    setargs                   4 0
    push           0          i64 
    push           &msysp.m$print_i128.fmt 
    push           msysp.m$print_i128.a u128 
    callproc       &msysp.tostr_u128 
    jump           #4550      
#4549: 
    setargs                   4 0
    push           1          i64 
    push           &msysp.m$print_i128.fmt 
    push           msysp.m$print_i128.a i128 
    neg                       u128 
    callproc       &msysp.tostr_u128 
#4550: 
    push           1          i64 
    pop            msysp.needgap i64 
#4551: 
    retproc                   
End


Proc msysp.m$print_u128:
    param          msysp.m$print_u128.a u128 
    param          msysp.m$print_u128.fmtstyle u64 
    local          msysp.m$print_u128.s block:40 
    local          msysp.m$print_u128.fmt block:16 
    procentry                 
    setargs                   1 0
    push           0          i64 
    callproc       &msysp.nextfmtchars 
    setargs                   3 0
    push           &msysp.m$print_u128.fmt 
    push           -1         i64 
    push           msysp.m$print_u128.fmtstyle u64 
    callproc       &msysp.strtofmt 
    setargs                   4 0
    push           0          i64 
    push           &msysp.m$print_u128.fmt 
    push           msysp.m$print_u128.a u128 
    callproc       &msysp.tostr_u128 
    push           1          i64 
    pop            msysp.needgap i64 
#4553: 
    retproc                   
End


Proc msysp.m$print_r64:
    param          msysp.m$print_r64.x r64 
    param          msysp.m$print_r64.fmtstyle u64 
    local          msysp.m$print_r64.s block:360 
    local          msysp.m$print_r64.fmt block:16 
    procentry                 
    setargs                   1 0
    push           0          i64 
    callproc       &msysp.nextfmtchars 
    push           msysp.m$print_r64.fmtstyle u64 
    push           0          u64 
    jumpne         #4555      u64 
    setargs                   3 3
    push           msysp.m$print_r64.x r64 
    push           "%f"       u64 
    push           &msysp.m$print_r64.s 
    callproc       &sprintf   
    setargs                   1 0
    push           &msysp.m$print_r64.s 
    callproc       &msysp.printstr 
    jump           #4556      
#4555: 
    setargs                   3 0
    push           &msysp.m$print_r64.fmt 
    push           -1         i64 
    push           msysp.m$print_r64.fmtstyle u64 
    callproc       &msysp.strtofmt 
    setargs                   2 0
    push           &msysp.m$print_r64.fmt 
    push           msysp.m$print_r64.x r64 
    callproc       &msysp.tostr_r64 
#4556: 
    push           1          i64 
    pop            msysp.needgap i64 
#4557: 
    retproc                   
End


Proc msysp.m$print_r32:
    param          msysp.m$print_r32.x r32 
    param          msysp.m$print_r32.fmtstyle u64 
    procentry                 
    setargs                   2 0
    push           msysp.m$print_r32.fmtstyle u64 
    push           msysp.m$print_r32.x r32 
    fwiden                    r64 r32 
    callproc       &msysp.m$print_r64 
#4559: 
    retproc                   
End


Proc msysp.m$print_c8:
    param          msysp.m$print_c8.a i64 
    param          msysp.m$print_c8.fmtstyle u64 
    local          msysp.m$print_c8.s block:40 
    local          msysp.m$print_c8.fmt block:16 
    local          msysp.m$print_c8.n i64 
    procentry                 
    setargs                   1 0
    push           0          i64 
    callproc       &msysp.nextfmtchars 
    push           msysp.m$print_c8.a u64 
    push           &msysp.m$print_c8.s 
    push           1          i64 
    popptroff                 u8 1 -1
    push           0          u64 
    push           &msysp.m$print_c8.s 
    push           2          i64 
    popptroff                 u8 1 -1
    setargs                   1 0
    push           &msysp.m$print_c8.s 
    callproc       &msysp.printstr 
    push           1          i64 
    pop            msysp.needgap i64 
#4561: 
    retproc                   
End


Proc msysp.m$print_str:
    param          msysp.m$print_str.s u64 
    param          msysp.m$print_str.fmtstyle u64 
    local          msysp.m$print_str.fmt block:16 
    procentry                 
    setargs                   1 0
    push           0          i64 
    callproc       &msysp.nextfmtchars 
    push           msysp.m$print_str.s u64 
    push           0          u64 
    jumpne         #4563      u64 
    setargs                   1 0
    push           "<null>"   u64 
    callproc       &msysp.printstr 
    jump           #4564      
#4563: 
    push           msysp.m$print_str.fmtstyle u64 
    push           0          u64 
    jumpne         #4565      u64 
    setargs                   1 0
    push           msysp.m$print_str.s u64 
    callproc       &msysp.printstr 
    jump           #4566      
#4565: 
    setargs                   3 0
    push           &msysp.m$print_str.fmt 
    push           -1         i64 
    push           msysp.m$print_str.fmtstyle u64 
    callproc       &msysp.strtofmt 
    setargs                   2 0
    push           &msysp.m$print_str.fmt 
    push           msysp.m$print_str.s u64 
    callproc       &msysp.tostr_str 
#4566: 
    push           1          i64 
    pop            msysp.needgap i64 
#4564: 
    retproc                   
End


Proc msysp.m$print_str_nf:
    param          msysp.m$print_str_nf.s u64 
    procentry                 
    setargs                   2 0
    push           0          u64 
    push           msysp.m$print_str_nf.s u64 
    callproc       &msysp.m$print_str 
#4568: 
    retproc                   
End


Proc msysp.m$print_strsl:
    param          msysp.m$print_strsl.s u128 
    param          msysp.m$print_strsl.fmtstyle u64 
    local          msysp.m$print_strsl.fmt block:16 
    procentry                 
    setargs                   1 0
    push           0          i64 
    callproc       &msysp.nextfmtchars 
    setargs                   1 0
    push           "FORMATED PRINT SLICE NOT READY" u64 
    callproc       &mlibp.abortprogram 
    push           1          i64 
    pop            msysp.needgap i64 
#4570: 
    retproc                   
End


Proc msysp.m$print_newline:
    procentry                 
    push           0          i64 
    pop            msysp.needgap i64 
    setargs                   1 0
    push           1          i64 
    callproc       &msysp.nextfmtchars 
    setargs                   1 0
    push           "\c\n"     u64 
    callproc       &msysp.printstr 
#4572: 
    retproc                   
End


Proc msysp.m$print_nogap:
    procentry                 
    push           0          i64 
    pop            msysp.needgap i64 
#4574: 
    retproc                   
End


Proc msysp.m$print_space:
    procentry                 
    push           0          i64 
    pop            msysp.needgap i64 
    setargs                   1 0
    push           " "        u64 
    callproc       &msysp.printstr 
#4576: 
    retproc                   
End


Proc msysp.printstr:
    param          msysp.printstr.s u64 
    local          msysp.printstr.n i64 
    local          msysp.printstr.p u64 
    procentry                 
    push           msysp.outdev i64 
    push           1          i64 
    casejumpeq     #4578      i64 0
    push           2          i64 
    casejumpeq     #4579      i64 0
    push           3          i64 
    casejumpeq     #4580      i64 0
    popstack                  i64 
    jump           #4581      
#4578: 
    setargs                   2 2
    push           msysp.printstr.s u64 
    push           "%s"       u64 
    callproc       &printf    
    jump           #4582      
#4579: 
    setargs                   3 3
    push           msysp.printstr.s u64 
    push           "%s"       u64 
    push           msysp.outchan u64 
    callproc       &fprintf   
    jump           #4582      
#4580: 
    push           msysp.outchan u64 
    pop            msysp.printstr.p u64 
    setargs                   2 0
    push           msysp.printstr.s u64 
    push           msysp.printstr.p u64 
    pushptr                   u64 
    callproc       &strcpy    
    push           msysp.printstr.p u64 
    setargs                   1 0
    push           msysp.printstr.s u64 
    callfn         &strlen    i64 
    addrefoffto               u64 1 0
    push           0          u64 
    push           msysp.printstr.p u64 
    pushptr                   u64 
    popptr                    u8 
    jump           #4582      
#4581: 
#4582: 
#4583: 
    retproc                   
End


Proc msysp.printstr_n:
    param          msysp.printstr_n.s u64 
    param          msysp.printstr_n.n i64 
    local          msysp.printstr_n.p u64 
    procentry                 
    push           msysp.printstr_n.n i64 
    push           -1         i64 
    casejumpeq     #4585      i64 0
    push           0          i64 
    casejumpeq     #4586      i64 0
    popstack                  i64 
    jump           #4587      
#4585: 
    setargs                   1 0
    push           msysp.printstr_n.s u64 
    callfn         &strlen    i64 
    pop            msysp.printstr_n.n i64 
    jump           #4588      
#4586: 
    jump           #4589      
    jump           #4588      
#4587: 
#4588: 
    push           msysp.outdev i64 
    push           1          i64 
    casejumpeq     #4590      i64 0
    push           2          i64 
    casejumpeq     #4591      i64 0
    push           3          i64 
    casejumpeq     #4592      i64 0
    popstack                  i64 
    jump           #4593      
#4590: 
    setargs                   3 2
    push           msysp.printstr_n.s u64 
    push           msysp.printstr_n.n i64 
    push           "%.*s"     u64 
    callproc       &printf    
    jump           #4594      
#4591: 
    setargs                   4 3
    push           msysp.printstr_n.s u64 
    push           msysp.printstr_n.n i64 
    push           "%.*s"     u64 
    push           msysp.outchan u64 
    callproc       &fprintf   
    jump           #4594      
#4592: 
    push           msysp.outchan u64 
    pop            msysp.printstr_n.p u64 
    setargs                   3 0
    push           msysp.printstr_n.n u64 
    push           msysp.printstr_n.s u64 
    push           msysp.printstr_n.p u64 
    pushptr                   u64 
    callproc       &memcpy    
    push           msysp.printstr_n.p u64 
    push           msysp.printstr_n.n i64 
    addrefoffto               u64 1 0
    push           0          u64 
    push           msysp.printstr_n.p u64 
    pushptr                   u64 
    popptr                    u8 
    jump           #4594      
#4593: 
#4594: 
#4589: 
    retproc                   
End


Proc msysp.printstrn_app:
    param          msysp.printstrn_app.s u64 
    param          msysp.printstrn_app.length i64 
    param          msysp.printstrn_app.f u64 
    procentry                 
    push           msysp.printstrn_app.length i64 
    jumpfalse      #4596      i64 
    push           msysp.printstrn_app.f u64 
    push           0          u64 
    jumpne         #4597      u64 
    setargs                   3 2
    push           msysp.printstrn_app.s u64 
    push           msysp.printstrn_app.length i64 
    push           "%.*s"     u64 
    callproc       &printf    
    jump           #4598      
#4597: 
    setargs                   4 3
    push           msysp.printstrn_app.s u64 
    push           msysp.printstrn_app.length i64 
    push           "%.*s"     u64 
    push           msysp.printstrn_app.f u64 
    callproc       &fprintf   
#4598: 
#4596: 
#4599: 
    retproc                   
End


Proc msysp.printchar:
    param          msysp.printchar.ch i64 
    local          msysp.printchar.p u64 
    procentry                 
    push           msysp.outdev i64 
    push           1          i64 
    casejumpeq     #4601      i64 0
    push           2          i64 
    casejumpeq     #4602      i64 0
    push           3          i64 
    casejumpeq     #4603      i64 0
    popstack                  i64 
    jump           #4604      
#4601: 
    setargs                   2 2
    push           msysp.printchar.ch i64 
    push           "%c"       u64 
    callproc       &printf    
    jump           #4605      
#4602: 
    setargs                   3 3
    push           msysp.printchar.ch i64 
    push           "%c"       u64 
    push           msysp.outchan u64 
    callproc       &fprintf   
    jump           #4605      
#4603: 
    push           msysp.outchan u64 
    pop            msysp.printchar.p u64 
    push           msysp.printchar.ch u64 
    push           msysp.printchar.p u64 
    pushptr                   u64 
    popptr                    u8 
    push           msysp.printchar.p u64 
    push           1          i64 
    addrefoffto               u64 1 0
    push           0          u64 
    push           msysp.printchar.p u64 
    pushptr                   u64 
    popptr                    u8 
    jump           #4605      
#4604: 
#4605: 
#4606: 
    retproc                   
End


Proc msysp.nextfmtchars:
    param          msysp.nextfmtchars.lastx i64 
    local          msysp.nextfmtchars.c u8 
    local          msysp.nextfmtchars.pstart u64 
    local          msysp.nextfmtchars.n i64 
    procentry                 
    push           msysp.fmtstr u64 
    jumptrue       #4608      u64 
    push           msysp.needgap i64 
    jumpfalse      #4609      i64 
    setargs                   1 0
    push           32         i64 
    callproc       &msysp.printchar 
#4609: 
    push           0          i64 
    pop            msysp.needgap i64 
    jump           #4610      
#4608: 
    push           msysp.fmtstr u64 
    pop            msysp.nextfmtchars.pstart u64 
    push           0          i64 
    pop            msysp.nextfmtchars.n i64 
#4611: 
    push           msysp.fmtstr u64 
    pushptr                   u8 
    pop            msysp.nextfmtchars.c u8 
    push           msysp.nextfmtchars.c u8 
    switch         #4612      0 126
    opnd           #4613      
#4612: 
    switchlabel    #4614      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4615      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4613      
    switchlabel    #4616      
    endswitch                 
#4615: 
    push           msysp.nextfmtchars.lastx i64 
    jumpfalse      #4617      i64 
    jump           #4618      
#4617: 
    push           &msysp.fmtstr 
    incr                      u64 1
    push           msysp.nextfmtchars.n i64 
    jumpfalse      #4619      i64 
    setargs                   2 0
    push           msysp.nextfmtchars.n i64 
    push           msysp.nextfmtchars.pstart u64 
    callproc       &msysp.printstr_n 
#4619: 
    jump           #4610      
    jump           #4620      
#4614: 
    push           msysp.nextfmtchars.n i64 
    jumpfalse      #4621      i64 
    setargs                   2 0
    push           msysp.nextfmtchars.n i64 
    push           msysp.nextfmtchars.pstart u64 
    callproc       &msysp.printstr_n 
    jump           #4622      
#4621: 
    push           msysp.nextfmtchars.lastx i64 
    jumptrue       #4623      i64 
    setargs                   2 0
    push           1          i64 
    push           "|"        u64 
    callproc       &msysp.printstr_n 
#4623: 
#4622: 
    jump           #4610      
    jump           #4620      
#4616: 
    push           msysp.nextfmtchars.n i64 
    jumpfalse      #4624      i64 
    setargs                   2 0
    push           msysp.nextfmtchars.n i64 
    push           msysp.nextfmtchars.pstart u64 
    callproc       &msysp.printstr_n 
    push           0          i64 
    pop            msysp.nextfmtchars.n i64 
#4624: 
    push           &msysp.fmtstr 
    incr                      u64 1
    push           msysp.fmtstr u64 
    pushptr                   u8 
    pop            msysp.nextfmtchars.c u8 
    push           msysp.nextfmtchars.c u8 
    jumpfalse      #4625      u64 
    push           &msysp.fmtstr 
    incr                      u64 1
    setargs                   1 0
    push           msysp.nextfmtchars.c u8 
    callproc       &msysp.printchar 
#4625: 
    push           msysp.fmtstr u64 
    pop            msysp.nextfmtchars.pstart u64 
    jump           #4620      
#4613: 
!skip::
#4618: 
    push           &msysp.nextfmtchars.n 
    incr                      i64 1
    push           &msysp.fmtstr 
    incr                      u64 1
#4620: 
    jump           #4611      
#4626: 
#4610: 
    retproc                   
End


Proc msysp.strtofmt:
    param          msysp.strtofmt.s u64 
    param          msysp.strtofmt.slen i64 
    param          msysp.strtofmt.fmt u64 
    local          msysp.strtofmt.c i64 
    local          msysp.strtofmt.wset u8 
    local          msysp.strtofmt.n i64 
    local          msysp.strtofmt.str block:100 
    procentry                 
    push           msysp.defaultfmt block:16 
    push           msysp.strtofmt.fmt u64 
    popptr                    block:16 
    push           msysp.strtofmt.s u64 
    push           0          u64 
    jumpne         #4628      u64 
    jump           #4629      
#4628: 
    push           msysp.strtofmt.slen i64 
    push           -1         i64 
    jumpne         #4630      i64 
    setargs                   1 0
    push           msysp.strtofmt.s u64 
    callfn         &strlen    i64 
    pop            msysp.strtofmt.slen i64 
#4630: 
    setargs                   3 0
    push           msysp.strtofmt.slen u64 
    push           msysp.strtofmt.s u64 
    push           &msysp.strtofmt.str 
    callproc       &memcpy    
    push           0          u64 
    push           &msysp.strtofmt.str 
    push           msysp.strtofmt.slen i64 
    popptroff                 u8 1 0
    push           &msysp.strtofmt.str 
    pop            msysp.strtofmt.s u64 
    push           0          i64 
    pop            msysp.strtofmt.wset u8 
    jump           #4631      
#4632: 
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    pop            msysp.strtofmt.c i64 
    push           &msysp.strtofmt.s 
    incr                      u64 1
    push           msysp.strtofmt.c i64 
    switch         #4633      42 126
    opnd           #4634      
#4633: 
    switchlabel    #4635      
    switchlabel    #4636      
    switchlabel    #4637      
    switchlabel    #4634      
    switchlabel    #4638      
    switchlabel    #4634      
    switchlabel    #4634      
    switchlabel    #4634      
    switchlabel    #4634      
    switchlabel    #4634      
    switchlabel    #4634      
    switchlabel    #4634      
    switchlabel    #4634      
    switchlabel    #4634      
    switchlabel    #4634      
    switchlabel    #4634      
    switchlabel    #4634      
    switchlabel    #4634      
    switchlabel    #4634      
    switchlabel    #4634      
    switchlabel    #4634      
    switchlabel    #4634      
    switchlabel    #4634      
    switchlabel    #4639      
    switchlabel    #4640      
    switchlabel    #4641      
    switchlabel    #4642      
    switchlabel    #4643      
    switchlabel    #4644      
    switchlabel    #4645      
    switchlabel    #4646      
    switchlabel    #4634      
    switchlabel    #4647      
    switchlabel    #4634      
    switchlabel    #4634      
    switchlabel    #4648      
    switchlabel    #4634      
    switchlabel    #4649      
    switchlabel    #4650      
    switchlabel    #4651      
    switchlabel    #4634      
    switchlabel    #4652      
    switchlabel    #4653      
    switchlabel    #4634      
    switchlabel    #4654      
    switchlabel    #4655      
    switchlabel    #4656      
    switchlabel    #4634      
    switchlabel    #4657      
    switchlabel    #4634      
    switchlabel    #4634      
    switchlabel    #4634      
    switchlabel    #4634      
    switchlabel    #4637      
    switchlabel    #4634      
    switchlabel    #4658      
    switchlabel    #4640      
    switchlabel    #4641      
    switchlabel    #4642      
    switchlabel    #4643      
    switchlabel    #4644      
    switchlabel    #4645      
    switchlabel    #4646      
    switchlabel    #4634      
    switchlabel    #4647      
    switchlabel    #4634      
    switchlabel    #4634      
    switchlabel    #4648      
    switchlabel    #4634      
    switchlabel    #4649      
    switchlabel    #4650      
    switchlabel    #4651      
    switchlabel    #4634      
    switchlabel    #4652      
    switchlabel    #4653      
    switchlabel    #4634      
    switchlabel    #4654      
    switchlabel    #4655      
    switchlabel    #4656      
    switchlabel    #4634      
    switchlabel    #4657      
    switchlabel    #4634      
    switchlabel    #4634      
    switchlabel    #4634      
    switchlabel    #4659      
    endswitch                 
#4640: 
    push           2          i64 
    push           msysp.strtofmt.fmt u64 
    push           2          
    popptroff                 u8 1 0
    jump           #4660      
#4646: 
    push           16         i64 
    push           msysp.strtofmt.fmt u64 
    push           2          
    popptroff                 u8 1 0
    jump           #4660      
#4649: 
    push           8          i64 
    push           msysp.strtofmt.fmt u64 
    push           2          
    popptroff                 u8 1 0
    jump           #4660      
#4656: 
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    pop            msysp.strtofmt.c i64 
    push           msysp.strtofmt.c i64 
    jumpfalse      #4661      i64 
    push           msysp.strtofmt.c i64 
    switch         #4662      48 102
    opnd           #4663      
#4662: 
    switchlabel    #4664      
    switchlabel    #4664      
    switchlabel    #4664      
    switchlabel    #4664      
    switchlabel    #4664      
    switchlabel    #4664      
    switchlabel    #4664      
    switchlabel    #4664      
    switchlabel    #4664      
    switchlabel    #4664      
    switchlabel    #4663      
    switchlabel    #4663      
    switchlabel    #4663      
    switchlabel    #4663      
    switchlabel    #4663      
    switchlabel    #4663      
    switchlabel    #4663      
    switchlabel    #4665      
    switchlabel    #4665      
    switchlabel    #4665      
    switchlabel    #4665      
    switchlabel    #4665      
    switchlabel    #4665      
    switchlabel    #4663      
    switchlabel    #4663      
    switchlabel    #4663      
    switchlabel    #4663      
    switchlabel    #4663      
    switchlabel    #4663      
    switchlabel    #4663      
    switchlabel    #4663      
    switchlabel    #4663      
    switchlabel    #4663      
    switchlabel    #4663      
    switchlabel    #4663      
    switchlabel    #4663      
    switchlabel    #4663      
    switchlabel    #4663      
    switchlabel    #4663      
    switchlabel    #4663      
    switchlabel    #4663      
    switchlabel    #4663      
    switchlabel    #4663      
    switchlabel    #4663      
    switchlabel    #4663      
    switchlabel    #4663      
    switchlabel    #4663      
    switchlabel    #4663      
    switchlabel    #4663      
    switchlabel    #4666      
    switchlabel    #4666      
    switchlabel    #4666      
    switchlabel    #4666      
    switchlabel    #4666      
    switchlabel    #4666      
    endswitch                 
#4664: 
    push           msysp.strtofmt.c i64 
    push           48         i64 
    sub                       i64 
    pop            msysp.strtofmt.c i64 
    jump           #4667      
#4665: 
    push           msysp.strtofmt.c i64 
    push           65         i64 
    sub                       i64 
    push           10         i64 
    add                       i64 
    pop            msysp.strtofmt.c i64 
    jump           #4667      
#4666: 
    push           msysp.strtofmt.c i64 
    push           97         i64 
    sub                       i64 
    push           10         i64 
    add                       i64 
    pop            msysp.strtofmt.c i64 
    jump           #4667      
#4663: 
    push           10         i64 
    pop            msysp.strtofmt.c i64 
#4667: 
    push           msysp.strtofmt.c i64 
    push           msysp.strtofmt.fmt u64 
    push           2          
    popptroff                 u8 1 0
    push           &msysp.strtofmt.s 
    incr                      u64 1
#4661: 
    jump           #4660      
#4651: 
    push           34         u64 
    push           msysp.strtofmt.fmt u64 
    push           3          
    popptroff                 u8 1 0
    jump           #4660      
#4659: 
    push           126        u64 
    push           msysp.strtofmt.fmt u64 
    push           3          
    popptroff                 u8 1 0
    jump           #4660      
#4647: 
    setargs                   1 0
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    callfn         &toupper   i32 
    push           msysp.strtofmt.fmt u64 
    push           9          
    popptroff                 u8 1 0
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    jumpfalse      #4668      u64 
    push           &msysp.strtofmt.s 
    incr                      u64 1
#4668: 
    jump           #4660      
#4639: 
    push           65         u64 
    push           msysp.strtofmt.fmt u64 
    push           8          
    popptroff                 u8 1 0
    jump           #4660      
#4658: 
    push           97         u64 
    push           msysp.strtofmt.fmt u64 
    push           8          
    popptroff                 u8 1 0
    jump           #4660      
#4657: 
    push           48         u64 
    push           msysp.strtofmt.fmt u64 
    push           4          
    popptroff                 u8 1 0
    jump           #4660      
#4652: 
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    push           msysp.strtofmt.fmt u64 
    push           7          
    popptroff                 u8 1 0
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    jumpfalse      #4669      u64 
    push           &msysp.strtofmt.s 
    incr                      u64 1
#4669: 
    jump           #4660      
#4650: 
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    push           msysp.strtofmt.fmt u64 
    push           4          
    popptroff                 u8 1 0
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    jumpfalse      #4670      u64 
    push           &msysp.strtofmt.s 
    incr                      u64 1
#4670: 
    jump           #4660      
#4653: 
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    push           msysp.strtofmt.fmt u64 
    push           10         
    popptroff                 u8 1 0
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    jumpfalse      #4671      u64 
    push           &msysp.strtofmt.s 
    incr                      u64 1
#4671: 
    jump           #4660      
#4655: 
    push           87         u64 
    push           msysp.strtofmt.fmt u64 
    push           11         
    popptroff                 u8 1 0
    jump           #4660      
#4643: 
    push           101        u64 
    push           msysp.strtofmt.fmt u64 
    push           5          
    popptroff                 u8 1 0
    jump           #4660      
#4644: 
    push           102        u64 
    push           msysp.strtofmt.fmt u64 
    push           5          
    popptroff                 u8 1 0
    jump           #4660      
#4645: 
    push           103        u64 
    push           msysp.strtofmt.fmt u64 
    push           5          
    popptroff                 u8 1 0
    jump           #4660      
#4638: 
    push           1          i64 
    pop            msysp.strtofmt.wset u8 
    jump           #4660      
#4637: 
    push           msysp.strtofmt.c u64 
    push           msysp.strtofmt.fmt u64 
    push           7          
    popptroff                 u8 1 0
    jump           #4660      
#4636: 
    push           43         u64 
    push           msysp.strtofmt.fmt u64 
    push           6          
    popptroff                 u8 1 0
    jump           #4660      
#4642: 
    push           68         u64 
    push           msysp.strtofmt.fmt u64 
    push           12         
    popptroff                 u8 1 0
    jump           #4660      
#4641: 
    push           67         u64 
    push           msysp.strtofmt.fmt u64 
    push           12         
    popptroff                 u8 1 0
    jump           #4660      
#4648: 
    push           77         u64 
    push           msysp.strtofmt.fmt u64 
    push           13         
    popptroff                 u8 1 0
    jump           #4660      
#4654: 
    push           86         u64 
    push           msysp.strtofmt.fmt u64 
    push           14         
    popptroff                 u8 1 0
    jump           #4660      
#4635: 
    push           msysp.fmtparam i64 
    pop            msysp.strtofmt.n i64 
    jump           #4672      
    jump           #4660      
#4634: 
    push           msysp.strtofmt.c i64 
    push           48         i64 
    jumplt         #4673      i64 
    push           msysp.strtofmt.c i64 
    push           57         i64 
    jumpgt         #4673      i64 
    push           msysp.strtofmt.c i64 
    push           48         i64 
    sub                       i64 
    pop            msysp.strtofmt.n i64 
#4674: 
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    pop            msysp.strtofmt.c i64 
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    push           0          i64 
    jumpne         #4675      i64 
    jump           #4676      
#4675: 
    push           msysp.strtofmt.c i64 
    push           48         i64 
    jumplt         #4677      i64 
    push           msysp.strtofmt.c i64 
    push           57         i64 
    jumpgt         #4677      i64 
    push           &msysp.strtofmt.s 
    incr                      u64 1
    push           msysp.strtofmt.n i64 
    push           10         i64 
    mul                       i64 
    push           msysp.strtofmt.c i64 
    add                       i64 
    push           48         i64 
    sub                       i64 
    pop            msysp.strtofmt.n i64 
    jump           #4678      
#4677: 
    jump           #4676      
#4678: 
    jump           #4674      
#4676: 
!gotwidth::
#4672: 
    push           msysp.strtofmt.wset u8 
    jumptrue       #4679      i64 
    push           msysp.strtofmt.n i64 
    push           msysp.strtofmt.fmt u64 
    push           0          
    popptroff                 u8 1 0
    push           1          i64 
    pop            msysp.strtofmt.wset u8 
    jump           #4680      
#4679: 
    push           msysp.strtofmt.n i64 
    push           msysp.strtofmt.fmt u64 
    push           1          
    popptroff                 i8 1 0
#4680: 
#4673: 
#4660: 
#4631: 
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    jumptrue       #4632      u64 
#4681: 
#4629: 
    retproc                   
End


Proc msysp.domultichar: i64
    param          msysp.domultichar.p u64 
    param          msysp.domultichar.n i64 
    param          msysp.domultichar.dest u64 
    param          msysp.domultichar.fmt u64 
    local          msysp.domultichar.str block:20 
    local          msysp.domultichar.q u64 
    local          msysp.domultichar.i i64 
    local          msysp.domultichar.nchars i64 
    local          msysp.domultichar.av_1 i64 
    procentry                 
    push           &msysp.domultichar.str 
    pop            msysp.domultichar.q u64 
    push           msysp.domultichar.n i64 
    pop            msysp.domultichar.nchars i64 
#4683: 
    push           msysp.domultichar.n i64 
    pop            msysp.domultichar.av_1 i64 
    push           msysp.domultichar.av_1 i64 
    push           0          i64 
    jumple         #4684      i64 
#4685: 
    push           msysp.domultichar.p u64 
    pushptr                   u8 
    push           0          i64 
    jumpne         #4686      i64 
    jump           #4684      
#4686: 
    push           msysp.domultichar.p u64 
    pushptr                   u8 
    push           msysp.domultichar.q u64 
    popptr                    u8 
    push           &msysp.domultichar.q 
    incr                      u64 1
    push           &msysp.domultichar.p 
    incr                      u64 1
#4687: 
    to             #4685      
    opnd           msysp.domultichar.av_1 
#4684: 
    push           0          u64 
    push           msysp.domultichar.q u64 
    popptr                    u8 
    setargs                   4 0
    push           msysp.domultichar.fmt u64 
    setargs                   1 0
    push           &msysp.domultichar.str 
    callfn         &strlen    i64 
    push           msysp.domultichar.dest u64 
    push           &msysp.domultichar.str 
    callfn         &msysp.expandstr i64 
    setret                    i64 
    jump           #4688      
#4688: 
    retfn                     i64 
End


Proc msysp.expandstr: i64
    param          msysp.expandstr.s u64 
    param          msysp.expandstr.t u64 
    param          msysp.expandstr.n i64 
    param          msysp.expandstr.fmt u64 
    local          msysp.expandstr.i i64 
    local          msysp.expandstr.w i64 
    local          msysp.expandstr.m i64 
    local          msysp.expandstr.av_1 i64 
    local          msysp.expandstr.av_2 i64 
    local          msysp.expandstr.av_3 i64 
    local          msysp.expandstr.av_4 i64 
    local          msysp.expandstr.av_5 i64 
    procentry                 
    push           msysp.expandstr.fmt u64 
    pushptr                   u8 
    pop            msysp.expandstr.w i64 
    push           msysp.expandstr.w i64 
    push           0          i64 
    jumpeq         #4690      i64 
    push           msysp.expandstr.w i64 
    push           msysp.expandstr.n i64 
    jumpgt         #4691      i64 
#4690: 
    setargs                   3 0
    push           msysp.expandstr.n u64 
    push           msysp.expandstr.s u64 
    push           msysp.expandstr.t u64 
    callproc       &strncpy   
    push           0          u64 
    push           msysp.expandstr.t u64 
    push           msysp.expandstr.n i64 
    popptroff                 u8 1 0
    push           msysp.expandstr.n i64 
    setret                    i64 
    jump           #4692      
#4691: 
    push           msysp.expandstr.fmt u64 
    push           9          
    pushptroff                u8 1 0
    push           76         u64 
    jumpne         #4693      u64 
    setargs                   3 0
    push           msysp.expandstr.n u64 
    push           msysp.expandstr.s u64 
    push           msysp.expandstr.t u64 
    callproc       &strncpy   
    push           &msysp.expandstr.t 
    push           msysp.expandstr.n i64 
    addrefoffto               u64 1 0
#4694: 
    push           1          i64 
    pop            msysp.expandstr.i i64 
    push           msysp.expandstr.w i64 
    push           msysp.expandstr.n i64 
    sub                       i64 
    pop            msysp.expandstr.av_1 i64 
    push           msysp.expandstr.av_1 i64 
    push           1          i64 
    jumplt         #4695      i64 
#4696: 
    push           msysp.expandstr.fmt u64 
    push           4          
    pushptroff                u8 1 0
    push           msysp.expandstr.t u64 
    popptr                    u8 
    push           &msysp.expandstr.t 
    incr                      u64 1
#4697: 
    forup          #4696      i64 1
    opnd           msysp.expandstr.i 
    opnd           msysp.expandstr.av_1 
#4695: 
    push           0          u64 
    push           msysp.expandstr.t u64 
    popptr                    u8 
    jump           #4698      
#4693: 
    push           msysp.expandstr.fmt u64 
    push           9          
    pushptroff                u8 1 0
    push           82         u64 
    jumpne         #4699      u64 
    push           msysp.expandstr.fmt u64 
    push           4          
    pushptroff                u8 1 0
    push           48         u64 
    jumpne         #4700      u64 
    push           msysp.expandstr.fmt u64 
    push           2          
    pushptroff                u8 1 0
    jumpfalse      #4700      i64 
    push           msysp.expandstr.s u64 
    pushptr                   u8 
    push           45         u64 
    jumpeq         #4701      u64 
    push           msysp.expandstr.s u64 
    pushptr                   u8 
    push           43         u64 
    jumpne         #4700      u64 
#4701: 
    push           msysp.expandstr.s u64 
    pushptr                   u8 
    push           msysp.expandstr.t u64 
    popptr                    u8 
    push           &msysp.expandstr.t 
    incr                      u64 1
#4702: 
    push           msysp.expandstr.w i64 
    push           msysp.expandstr.n i64 
    sub                       i64 
    pop            msysp.expandstr.av_2 i64 
    push           msysp.expandstr.av_2 i64 
    push           0          i64 
    jumple         #4703      i64 
#4704: 
    push           msysp.expandstr.fmt u64 
    push           4          
    pushptroff                u8 1 0
    push           msysp.expandstr.t u64 
    popptr                    u8 
    push           &msysp.expandstr.t 
    incr                      u64 1
#4705: 
    to             #4704      
    opnd           msysp.expandstr.av_2 
#4703: 
    setargs                   3 0
    push           msysp.expandstr.n i64 
    push           1          i64 
    sub                       u64 
    push           msysp.expandstr.s u64 
    push           1          i64 
    addrefoff                 u64 1 0
    push           msysp.expandstr.t u64 
    callproc       &strncpy   
    push           0          u64 
    push           msysp.expandstr.t u64 
    push           msysp.expandstr.n i64 
    popptroff                 u8 1 -1
    jump           #4706      
#4700: 
#4707: 
    push           msysp.expandstr.w i64 
    push           msysp.expandstr.n i64 
    sub                       i64 
    pop            msysp.expandstr.av_3 i64 
    push           msysp.expandstr.av_3 i64 
    push           0          i64 
    jumple         #4708      i64 
#4709: 
    push           msysp.expandstr.fmt u64 
    push           4          
    pushptroff                u8 1 0
    push           msysp.expandstr.t u64 
    popptr                    u8 
    push           &msysp.expandstr.t 
    incr                      u64 1
#4710: 
    to             #4709      
    opnd           msysp.expandstr.av_3 
#4708: 
    setargs                   3 0
    push           msysp.expandstr.n u64 
    push           msysp.expandstr.s u64 
    push           msysp.expandstr.t u64 
    callproc       &strncpy   
    push           0          u64 
    push           msysp.expandstr.t u64 
    push           msysp.expandstr.n i64 
    popptroff                 u8 1 0
#4706: 
    jump           #4698      
#4699: 
    push           msysp.expandstr.w i64 
    push           msysp.expandstr.n i64 
    sub                       i64 
    push           1          i64 
    add                       i64 
    push           2          i64 
    idiv                      i64 
    pop            msysp.expandstr.m i64 
#4711: 
    push           msysp.expandstr.m i64 
    pop            msysp.expandstr.av_4 i64 
    push           msysp.expandstr.av_4 i64 
    push           0          i64 
    jumple         #4712      i64 
#4713: 
    push           msysp.expandstr.fmt u64 
    push           4          
    pushptroff                u8 1 0
    push           msysp.expandstr.t u64 
    popptr                    u8 
    push           &msysp.expandstr.t 
    incr                      u64 1
#4714: 
    to             #4713      
    opnd           msysp.expandstr.av_4 
#4712: 
    setargs                   3 0
    push           msysp.expandstr.n u64 
    push           msysp.expandstr.s u64 
    push           msysp.expandstr.t u64 
    callproc       &strncpy   
    push           &msysp.expandstr.t 
    push           msysp.expandstr.n i64 
    addrefoffto               u64 1 0
#4715: 
    push           msysp.expandstr.w i64 
    push           msysp.expandstr.n i64 
    sub                       i64 
    push           msysp.expandstr.m i64 
    sub                       i64 
    pop            msysp.expandstr.av_5 i64 
    push           msysp.expandstr.av_5 i64 
    push           0          i64 
    jumple         #4716      i64 
#4717: 
    push           msysp.expandstr.fmt u64 
    push           4          
    pushptroff                u8 1 0
    push           msysp.expandstr.t u64 
    popptr                    u8 
    push           &msysp.expandstr.t 
    incr                      u64 1
#4718: 
    to             #4717      
    opnd           msysp.expandstr.av_5 
#4716: 
    push           0          u64 
    push           msysp.expandstr.t u64 
    popptr                    u8 
#4698: 
    push           msysp.expandstr.w i64 
    setret                    i64 
    jump           #4692      
#4692: 
    retfn                     i64 
End


Proc msysp.u64tostr: i64
    param          msysp.u64tostr.aa u64 
    param          msysp.u64tostr.s u64 
    param          msysp.u64tostr.base u64 
    param          msysp.u64tostr.sep i64 
    local          msysp.u64tostr.t block:360 
    local          msysp.u64tostr.dd u64 
    local          msysp.u64tostr.i i64 
    local          msysp.u64tostr.j i64 
    local          msysp.u64tostr.k i64 
    local          msysp.u64tostr.g i64 
    local          msysp.u64tostr.cc i64 
    local          msysp.u64tostr.dummy i64 
    local          msysp.u64tostr.s0 u64 
    procentry                 
    push           0          i64 
    pop            msysp.u64tostr.i i64 
    push           0          i64 
    pop            msysp.u64tostr.k i64 
    startmult                 
    push           msysp.u64tostr.base i64 
    push           10         i64 
    jumpne         #4720      i64 
    push           3          i64 
    resetmult                 
    jump           #4721      
#4720: 
    push           4          i64 
    endmult                   
#4721: 
    pop            msysp.u64tostr.g i64 
#4722: 
    push           msysp.u64tostr.aa u64 
    push           msysp.u64tostr.base u64 
    irem                      u64 
    pop            msysp.u64tostr.dd u64 
    push           msysp.u64tostr.aa u64 
    push           msysp.u64tostr.base u64 
    idiv                      u64 
    pop            msysp.u64tostr.aa u64 
    push           &msysp.digits 
    push           msysp.u64tostr.dd i64 
    pushptroff                u8 1 0
    push           &msysp.u64tostr.t 
    push           &msysp.u64tostr.i 
    incrload                  i64 1
    popptroff                 u8 1 0
    push           &msysp.u64tostr.k 
    incr                      i64 1
    push           msysp.u64tostr.sep i64 
    jumpfalse      #4723      i64 
    push           msysp.u64tostr.aa i64 
    push           0          i64 
    jumpeq         #4723      i64 
    push           msysp.u64tostr.k i64 
    push           msysp.u64tostr.g i64 
    jumpne         #4723      i64 
    push           msysp.u64tostr.sep u64 
    push           &msysp.u64tostr.t 
    push           &msysp.u64tostr.i 
    incrload                  i64 1
    popptroff                 u8 1 0
    push           0          i64 
    pop            msysp.u64tostr.k i64 
#4723: 
#4724: 
    push           msysp.u64tostr.aa i64 
    push           0          i64 
    jumpne         #4722      i64 
#4725: 
    push           msysp.u64tostr.i i64 
    pop            msysp.u64tostr.j i64 
    push           msysp.u64tostr.s u64 
    pop            msysp.u64tostr.s0 u64 
    jump           #4726      
#4727: 
    push           &msysp.u64tostr.t 
    push           &msysp.u64tostr.i 
    loaddecr                  i64 1
    pushptroff                u8 1 0
    push           msysp.u64tostr.s u64 
    popptr                    u8 
    push           &msysp.u64tostr.s 
    incr                      u64 1
#4726: 
    push           msysp.u64tostr.i i64 
    jumptrue       #4727      i64 
#4728: 
    push           0          u64 
    push           msysp.u64tostr.s u64 
    popptr                    u8 
    push           msysp.u64tostr.j i64 
    setret                    i64 
    jump           #4729      
#4729: 
    retfn                     i64 
End


Proc msysp.u128tostr: i64
    param          msysp.u128tostr.aa u128 
    param          msysp.u128tostr.s u64 
    param          msysp.u128tostr.base u64 
    param          msysp.u128tostr.sep i64 
    local          msysp.u128tostr.t block:160 
    local          msysp.u128tostr.dd u64 
    local          msysp.u128tostr.i i64 
    local          msysp.u128tostr.j i64 
    local          msysp.u128tostr.k i64 
    local          msysp.u128tostr.g i64 
    local          msysp.u128tostr.dummy i64 
    local          msysp.u128tostr.s0 u64 
    procentry                 
    push           0          i64 
    pop            msysp.u128tostr.i i64 
    push           0          i64 
    pop            msysp.u128tostr.k i64 
    startmult                 
    push           msysp.u128tostr.base i64 
    push           10         i64 
    jumpne         #4731      i64 
    push           3          i64 
    resetmult                 
    jump           #4732      
#4731: 
    push           4          i64 
    endmult                   
#4732: 
    pop            msysp.u128tostr.g i64 
#4733: 
    setargs                   4 0
    push           &msysp.u128tostr.dd 
    push           msysp.u128tostr.base u64 
    push           msysp.u128tostr.aa u128 
    callfn         &msysp.xdivrem128 u128 
    pop            msysp.u128tostr.aa u128 
    push           &msysp.digits 
    push           msysp.u128tostr.dd i64 
    pushptroff                u8 1 0
    push           &msysp.u128tostr.t 
    push           &msysp.u128tostr.i 
    incrload                  i64 1
    popptroff                 u8 1 0
    push           &msysp.u128tostr.k 
    incr                      i64 1
    push           msysp.u128tostr.sep i64 
    jumpfalse      #4734      i64 
    push           msysp.u128tostr.aa u128 
    push           0          i64 
    widenw                    u128 i64 
    jumpeq         #4734      u128 
    push           msysp.u128tostr.k i64 
    push           msysp.u128tostr.g i64 
    jumpne         #4734      i64 
    push           msysp.u128tostr.sep u64 
    push           &msysp.u128tostr.t 
    push           &msysp.u128tostr.i 
    incrload                  i64 1
    popptroff                 u8 1 0
    push           0          i64 
    pop            msysp.u128tostr.k i64 
#4734: 
#4735: 
    push           msysp.u128tostr.aa u128 
    push           0          i64 
    widenw                    u128 i64 
    jumpne         #4733      u128 
#4736: 
    push           msysp.u128tostr.i i64 
    pop            msysp.u128tostr.j i64 
    push           msysp.u128tostr.s u64 
    pop            msysp.u128tostr.s0 u64 
    jump           #4737      
#4738: 
    push           &msysp.u128tostr.t 
    push           &msysp.u128tostr.i 
    loaddecr                  i64 1
    pushptroff                u8 1 0
    push           msysp.u128tostr.s u64 
    popptr                    u8 
    push           &msysp.u128tostr.s 
    incr                      u64 1
#4737: 
    push           msysp.u128tostr.i i64 
    jumptrue       #4738      i64 
#4739: 
    push           0          u64 
    push           msysp.u128tostr.s u64 
    popptr                    u8 
    push           msysp.u128tostr.j i64 
    setret                    i64 
    jump           #4740      
#4740: 
    retfn                     i64 
End


Proc msysp.xdivrem128: u128
    param          msysp.xdivrem128.a u128 
    param          msysp.xdivrem128.b u64 
    param          msysp.xdivrem128.remainder u64 
    local          msysp.xdivrem128.d u128 
    local          msysp.xdivrem128.e u128 
    local          msysp.xdivrem128.r u128 
    local          msysp.xdivrem128.rlow u64 
    local          msysp.xdivrem128.dlow u64 
    local          msysp.xdivrem128.p u64 
    local          msysp.xdivrem128.q u64 
    procentry                 
    push           &msysp.xdivrem128.d 
    pop            msysp.xdivrem128.p u64 
    push           &msysp.xdivrem128.d 
    pop            msysp.xdivrem128.q u64 
    push           msysp.xdivrem128.a u128 
    push           msysp.xdivrem128.b u64 
    widenw                    u128 u64 
    idiv                      u128 
    pop            msysp.xdivrem128.d u128 
    push           msysp.xdivrem128.a u128 
    push           msysp.xdivrem128.d u128 
    push           msysp.xdivrem128.b u64 
    widenw                    u128 u64 
    mul                       u128 
    sub                       u128 
    pop            msysp.xdivrem128.r u128 
    push           msysp.xdivrem128.r u128 
    softtruncw                u64 u128 
    pop            msysp.xdivrem128.rlow u64 
    push           msysp.xdivrem128.d u128 
    softtruncw                u64 u128 
    pop            msysp.xdivrem128.dlow u64 
    push           msysp.xdivrem128.rlow u64 
    push           msysp.xdivrem128.remainder u64 
    popptr                    u64 
    push           msysp.xdivrem128.d u128 
    setretmult                u128 2
    jump           #4742      
#4742: 
    retfn                     u128 
End


Proc msysp.i64tostrfmt: i64
    param          msysp.i64tostrfmt.aa i64 
    param          msysp.i64tostrfmt.s u64 
    param          msysp.i64tostrfmt.fmt u64 
    local          msysp.i64tostrfmt.str block:360 
    local          msysp.i64tostrfmt.i i64 
    local          msysp.i64tostrfmt.j i64 
    local          msysp.i64tostrfmt.k i64 
    local          msysp.i64tostrfmt.n i64 
    local          msysp.i64tostrfmt.w i64 
    local          msysp.i64tostrfmt.usigned i64 
    procentry                 
    push           0          i64 
    pop            msysp.i64tostrfmt.usigned i64 
    push           msysp.i64tostrfmt.fmt u64 
    push           11         
    pushptroff                u8 1 0
    jumpfalse      #4744      u64 
    push           1          i64 
    pop            msysp.i64tostrfmt.usigned i64 
#4744: 
    push           msysp.i64tostrfmt.aa i64 
    push           -9223372036854775808 i64 
    jumpne         #4745      i64 
    push           msysp.i64tostrfmt.usigned i64 
    jumptrue       #4745      i64 
    push           45         u64 
    push           &msysp.i64tostrfmt.str 
    push           0          i64 
    popptroff                 u8 1 0
    setargs                   3 0
    push           msysp.i64tostrfmt.fmt u64 
    push           7          
    pushptroff                u8 1 0
    push           msysp.i64tostrfmt.fmt u64 
    push           2          
    pushptroff                u8 1 0
    push           &msysp.i64tostrfmt.str 
    push           1          
    addrefoff                 u8 1 0
    callfn         &msysp.i64mintostr i64 
    push           1          i64 
    add                       i64 
    pop            msysp.i64tostrfmt.n i64 
    jump           #4746      
#4745: 
    push           msysp.i64tostrfmt.usigned i64 
    jumptrue       #4747      i64 
    push           msysp.i64tostrfmt.aa i64 
    push           0          i64 
    jumplt         #4748      i64 
#4747: 
    push           msysp.i64tostrfmt.fmt u64 
    push           6          
    pushptroff                u8 1 0
    jumpfalse      #4749      u64 
#4748: 
    push           msysp.i64tostrfmt.aa i64 
    push           0          i64 
    jumpge         #4750      i64 
    push           msysp.i64tostrfmt.aa i64 
    neg                       i64 
    pop            msysp.i64tostrfmt.aa i64 
    push           45         u64 
    push           &msysp.i64tostrfmt.str 
    push           0          i64 
    popptroff                 u8 1 0
    jump           #4751      
#4750: 
    push           43         u64 
    push           &msysp.i64tostrfmt.str 
    push           0          i64 
    popptroff                 u8 1 0
#4751: 
    setargs                   4 0
    push           msysp.i64tostrfmt.fmt u64 
    push           7          
    pushptroff                u8 1 0
    push           msysp.i64tostrfmt.fmt u64 
    push           2          
    pushptroff                u8 1 0
    push           &msysp.i64tostrfmt.str 
    push           1          
    addrefoff                 u8 1 0
    push           msysp.i64tostrfmt.aa u64 
    callfn         &msysp.u64tostr i64 
    push           1          i64 
    add                       i64 
    pop            msysp.i64tostrfmt.n i64 
    jump           #4752      
#4749: 
    setargs                   4 0
    push           msysp.i64tostrfmt.fmt u64 
    push           7          
    pushptroff                u8 1 0
    push           msysp.i64tostrfmt.fmt u64 
    push           2          
    pushptroff                u8 1 0
    push           &msysp.i64tostrfmt.str 
    push           msysp.i64tostrfmt.aa u64 
    callfn         &msysp.u64tostr i64 
    pop            msysp.i64tostrfmt.n i64 
#4752: 
#4746: 
    push           msysp.i64tostrfmt.fmt u64 
    push           10         
    pushptroff                u8 1 0
    jumpfalse      #4753      u64 
    push           msysp.i64tostrfmt.fmt u64 
    push           10         
    pushptroff                u8 1 0
    push           &msysp.i64tostrfmt.str 
    push           msysp.i64tostrfmt.n i64 
    popptroff                 u8 1 0
    push           0          u64 
    push           &msysp.i64tostrfmt.str 
    push           &msysp.i64tostrfmt.n 
    incrload                  i64 1
    popptroff                 u8 1 0
#4753: 
    push           msysp.i64tostrfmt.fmt u64 
    push           2          
    pushptroff                u8 1 0
    push           10         i64 
    jumpgt         #4754      i64 
    push           msysp.i64tostrfmt.fmt u64 
    push           10         
    pushptroff                u8 1 0
    jumpfalse      #4755      u64 
#4754: 
    push           msysp.i64tostrfmt.fmt u64 
    push           8          
    pushptroff                u8 1 0
    push           97         u64 
    jumpne         #4755      u64 
    setargs                   1 0
    push           &msysp.i64tostrfmt.str 
    callproc       &mlibp.convlcstring 
#4755: 
    setargs                   4 0
    push           msysp.i64tostrfmt.fmt u64 
    push           msysp.i64tostrfmt.n i64 
    push           msysp.i64tostrfmt.s u64 
    push           &msysp.i64tostrfmt.str 
    callfn         &msysp.expandstr i64 
    setret                    i64 
    jump           #4756      
#4756: 
    retfn                     i64 
End


Proc msysp.u64tostrfmt: i64
    param          msysp.u64tostrfmt.aa i64 
    param          msysp.u64tostrfmt.s u64 
    param          msysp.u64tostrfmt.fmt u64 
    local          msysp.u64tostrfmt.str block:360 
    local          msysp.u64tostrfmt.i i64 
    local          msysp.u64tostrfmt.j i64 
    local          msysp.u64tostrfmt.k i64 
    local          msysp.u64tostrfmt.n i64 
    local          msysp.u64tostrfmt.w i64 
    procentry                 
    setargs                   4 0
    push           msysp.u64tostrfmt.fmt u64 
    push           7          
    pushptroff                u8 1 0
    push           msysp.u64tostrfmt.fmt u64 
    push           2          
    pushptroff                u8 1 0
    push           &msysp.u64tostrfmt.str 
    push           msysp.u64tostrfmt.aa u64 
    callfn         &msysp.u64tostr i64 
    pop            msysp.u64tostrfmt.n i64 
    push           msysp.u64tostrfmt.fmt u64 
    push           10         
    pushptroff                u8 1 0
    jumpfalse      #4758      u64 
    push           msysp.u64tostrfmt.fmt u64 
    push           10         
    pushptroff                u8 1 0
    push           &msysp.u64tostrfmt.str 
    push           msysp.u64tostrfmt.n i64 
    popptroff                 u8 1 0
    push           0          u64 
    push           &msysp.u64tostrfmt.str 
    push           &msysp.u64tostrfmt.n 
    incrload                  i64 1
    popptroff                 u8 1 0
#4758: 
    push           msysp.u64tostrfmt.fmt u64 
    push           2          
    pushptroff                u8 1 0
    push           10         i64 
    jumpgt         #4759      i64 
    push           msysp.u64tostrfmt.fmt u64 
    push           10         
    pushptroff                u8 1 0
    jumpfalse      #4760      u64 
    push           msysp.u64tostrfmt.fmt u64 
    push           8          
    pushptroff                u8 1 0
    push           97         u64 
    jumpne         #4760      u64 
#4759: 
#4760: 
    setargs                   4 0
    push           msysp.u64tostrfmt.fmt u64 
    push           msysp.u64tostrfmt.n i64 
    push           msysp.u64tostrfmt.s u64 
    push           &msysp.u64tostrfmt.str 
    callfn         &msysp.expandstr i64 
    setret                    i64 
    jump           #4761      
#4761: 
    retfn                     i64 
End


Proc msysp.u128tostrfmt: i64
    param          msysp.u128tostrfmt.aa i128 
    param          msysp.u128tostrfmt.s u64 
    param          msysp.u128tostrfmt.fmt u64 
    local          msysp.u128tostrfmt.str block:360 
    local          msysp.u128tostrfmt.i i64 
    local          msysp.u128tostrfmt.j i64 
    local          msysp.u128tostrfmt.k i64 
    local          msysp.u128tostrfmt.n i64 
    local          msysp.u128tostrfmt.w i64 
    procentry                 
    setargs                   5 0
    push           msysp.u128tostrfmt.fmt u64 
    push           7          
    pushptroff                u8 1 0
    push           msysp.u128tostrfmt.fmt u64 
    push           2          
    pushptroff                u8 1 0
    push           &msysp.u128tostrfmt.str 
    push           msysp.u128tostrfmt.aa u128 
    callfn         &msysp.u128tostr i64 
    pop            msysp.u128tostrfmt.n i64 
    push           msysp.u128tostrfmt.fmt u64 
    push           10         
    pushptroff                u8 1 0
    jumpfalse      #4763      u64 
    push           msysp.u128tostrfmt.fmt u64 
    push           10         
    pushptroff                u8 1 0
    push           &msysp.u128tostrfmt.str 
    push           msysp.u128tostrfmt.n i64 
    popptroff                 u8 1 0
    push           0          u64 
    push           &msysp.u128tostrfmt.str 
    push           &msysp.u128tostrfmt.n 
    incrload                  i64 1
    popptroff                 u8 1 0
#4763: 
    push           msysp.u128tostrfmt.fmt u64 
    push           2          
    pushptroff                u8 1 0
    push           10         i64 
    jumpgt         #4764      i64 
    push           msysp.u128tostrfmt.fmt u64 
    push           10         
    pushptroff                u8 1 0
    jumpfalse      #4765      u64 
    push           msysp.u128tostrfmt.fmt u64 
    push           8          
    pushptroff                u8 1 0
    push           97         u64 
    jumpne         #4765      u64 
#4764: 
    setargs                   1 0
    push           &msysp.u128tostrfmt.str 
    callproc       &mlibp.convlcstring 
#4765: 
    setargs                   4 0
    push           msysp.u128tostrfmt.fmt u64 
    push           msysp.u128tostrfmt.n i64 
    push           msysp.u128tostrfmt.s u64 
    push           &msysp.u128tostrfmt.str 
    callfn         &msysp.expandstr i64 
    setret                    i64 
    jump           #4766      
#4766: 
    retfn                     i64 
End


Proc msysp.i64mintostr: i64
    param          msysp.i64mintostr.s u64 
    param          msysp.i64mintostr.base i64 
    param          msysp.i64mintostr.sep i64 
    local          msysp.i64mintostr.t block:360 
    local          msysp.i64mintostr.i i64 
    local          msysp.i64mintostr.j i64 
    local          msysp.i64mintostr.k i64 
    local          msysp.i64mintostr.g i64 
    local          msysp.i64mintostr.neg i64 
    procentry                 
    push           msysp.i64mintostr.base i64 
    switch         #4768      2 16
    opnd           #4769      
#4768: 
    switchlabel    #4770      
    switchlabel    #4769      
    switchlabel    #4769      
    switchlabel    #4769      
    switchlabel    #4769      
    switchlabel    #4769      
    switchlabel    #4769      
    switchlabel    #4769      
    switchlabel    #4771      
    switchlabel    #4769      
    switchlabel    #4769      
    switchlabel    #4769      
    switchlabel    #4769      
    switchlabel    #4769      
    switchlabel    #4772      
    endswitch                 
#4771: 
    setargs                   2 0
    push           "9223372036854775808" u64 
    push           &msysp.i64mintostr.t 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcpy    
    push           3          i64 
    pop            msysp.i64mintostr.j i64 
    jump           #4773      
#4772: 
    setargs                   2 0
    push           "8000000000000000" u64 
    push           &msysp.i64mintostr.t 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcpy    
    push           1          i64 
    pop            msysp.i64mintostr.j i64 
    jump           #4773      
#4770: 
    setargs                   2 0
    push           "1000000000000000000000000000000000000000000000000000000000000000" u64 
    push           &msysp.i64mintostr.t 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcpy    
    push           7          i64 
    pop            msysp.i64mintostr.j i64 
    jump           #4773      
#4769: 
    setargs                   2 0
    push           "<mindint>" u64 
    push           &msysp.i64mintostr.t 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcpy    
#4773: 
    setargs                   1 0
    push           &msysp.i64mintostr.t 
    push           0          
    addrefoff                 u8 1 0
    callfn         &strlen    i64 
    pop            msysp.i64mintostr.i i64 
    push           &msysp.i64mintostr.s 
    push           msysp.i64mintostr.i i64 
    addrefoffto               u64 1 0
    push           msysp.i64mintostr.sep i64 
    jumpfalse      #4774      i64 
    push           &msysp.i64mintostr.s 
    push           msysp.i64mintostr.j i64 
    addrefoffto               u64 1 0
#4774: 
    push           0          u64 
    push           msysp.i64mintostr.s u64 
    popptr                    u8 
    push           0          i64 
    pop            msysp.i64mintostr.k i64 
    startmult                 
    push           msysp.i64mintostr.base i64 
    push           10         i64 
    jumpne         #4775      i64 
    push           3          i64 
    resetmult                 
    jump           #4776      
#4775: 
    push           4          i64 
    endmult                   
#4776: 
    pop            msysp.i64mintostr.g i64 
    jump           #4777      
#4778: 
    push           &msysp.i64mintostr.s 
    decr                      u64 1
    push           &msysp.i64mintostr.t 
    push           &msysp.i64mintostr.i 
    loaddecr                  i64 1
    pushptroff                u8 1 -1
    push           msysp.i64mintostr.s u64 
    popptr                    u8 
    push           msysp.i64mintostr.sep i64 
    jumpfalse      #4779      i64 
    push           msysp.i64mintostr.i i64 
    jumpfalse      #4779      i64 
    push           &msysp.i64mintostr.k 
    incrload                  i64 1
    push           msysp.i64mintostr.g i64 
    jumpne         #4779      i64 
    push           &msysp.i64mintostr.s 
    decr                      u64 1
    push           msysp.i64mintostr.sep u64 
    push           msysp.i64mintostr.s u64 
    popptr                    u8 
    push           0          i64 
    pop            msysp.i64mintostr.k i64 
#4779: 
#4777: 
    push           msysp.i64mintostr.i i64 
    jumptrue       #4778      i64 
#4780: 
    setargs                   1 0
    push           msysp.i64mintostr.s u64 
    callfn         &strlen    i64 
    setret                    i64 
    jump           #4781      
#4781: 
    retfn                     i64 
End


Proc msysp.strtostrfmt: i64
    param          msysp.strtostrfmt.s u64 
    param          msysp.strtostrfmt.t u64 
    param          msysp.strtostrfmt.n i64 
    param          msysp.strtostrfmt.fmt u64 
    local          msysp.strtostrfmt.u u64 
    local          msysp.strtostrfmt.v u64 
    local          msysp.strtostrfmt.str block:256 
    local          msysp.strtostrfmt.w i64 
    local          msysp.strtostrfmt.nheap i64 
    procentry                 
    push           0          i64 
    pop            msysp.strtostrfmt.nheap i64 
    push           msysp.strtostrfmt.fmt u64 
    push           3          
    pushptroff                u8 1 0
    jumptrue       #4783      u64 
    push           msysp.strtostrfmt.fmt u64 
    push           8          
    pushptroff                u8 1 0
    jumpfalse      #4784      u64 
#4783: 
    push           msysp.strtostrfmt.n i64 
    push           256        i64 
    jumpge         #4785      i64 
    push           &msysp.strtostrfmt.str 
    pop            msysp.strtostrfmt.u u64 
    jump           #4786      
#4785: 
    push           msysp.strtostrfmt.n i64 
    push           3          i64 
    add                       i64 
    pop            msysp.strtostrfmt.nheap i64 
    setargs                   1 0
    push           msysp.strtostrfmt.nheap i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            msysp.strtostrfmt.u u64 
#4786: 
    push           msysp.strtostrfmt.fmt u64 
    push           3          
    pushptroff                u8 1 0
    jumpfalse      #4787      u64 
    push           msysp.strtostrfmt.u u64 
    pop            msysp.strtostrfmt.v u64 
    push           msysp.strtostrfmt.fmt u64 
    push           3          
    pushptroff                u8 1 0
    push           msysp.strtostrfmt.v u64 
    popptr                    u8 
    push           &msysp.strtostrfmt.v 
    incr                      u64 1
    push           msysp.strtostrfmt.n i64 
    jumpfalse      #4788      i64 
    setargs                   2 0
    push           msysp.strtostrfmt.s u64 
    push           msysp.strtostrfmt.v u64 
    callproc       &strcpy    
    push           &msysp.strtostrfmt.v 
    push           msysp.strtostrfmt.n i64 
    addrefoffto               u64 1 0
#4788: 
    push           msysp.strtostrfmt.fmt u64 
    push           3          
    pushptroff                u8 1 0
    push           msysp.strtostrfmt.v u64 
    popptr                    u8 
    push           &msysp.strtostrfmt.v 
    incr                      u64 1
    push           0          u64 
    push           msysp.strtostrfmt.v u64 
    popptr                    u8 
    push           &msysp.strtostrfmt.n 
    push           2          i64 
    addto                     i64 
    jump           #4789      
#4787: 
    setargs                   3 0
    push           msysp.strtostrfmt.n u64 
    push           msysp.strtostrfmt.s u64 
    push           msysp.strtostrfmt.u u64 
    callproc       &memcpy    
#4789: 
    push           msysp.strtostrfmt.fmt u64 
    push           8          
    pushptroff                u8 1 0
    switch         #4790      65 97
    opnd           #4791      
#4790: 
    switchlabel    #4792      
    switchlabel    #4791      
    switchlabel    #4791      
    switchlabel    #4791      
    switchlabel    #4791      
    switchlabel    #4791      
    switchlabel    #4791      
    switchlabel    #4791      
    switchlabel    #4791      
    switchlabel    #4791      
    switchlabel    #4791      
    switchlabel    #4791      
    switchlabel    #4791      
    switchlabel    #4791      
    switchlabel    #4791      
    switchlabel    #4791      
    switchlabel    #4791      
    switchlabel    #4791      
    switchlabel    #4791      
    switchlabel    #4791      
    switchlabel    #4791      
    switchlabel    #4791      
    switchlabel    #4791      
    switchlabel    #4791      
    switchlabel    #4791      
    switchlabel    #4791      
    switchlabel    #4791      
    switchlabel    #4791      
    switchlabel    #4791      
    switchlabel    #4791      
    switchlabel    #4791      
    switchlabel    #4791      
    switchlabel    #4793      
    endswitch                 
#4793: 
    setargs                   1 0
    push           msysp.strtostrfmt.u u64 
    callproc       &mlibp.convlcstring 
    jump           #4794      
#4792: 
    setargs                   1 0
    push           msysp.strtostrfmt.u u64 
    callproc       &mlibp.convucstring 
    jump           #4794      
#4791: 
#4794: 
    push           msysp.strtostrfmt.u u64 
    pop            msysp.strtostrfmt.s u64 
#4784: 
    push           msysp.strtostrfmt.fmt u64 
    pushptr                   u8 
    pop            msysp.strtostrfmt.w i64 
    push           msysp.strtostrfmt.w i64 
    push           msysp.strtostrfmt.n i64 
    jumple         #4795      i64 
    setargs                   4 0
    push           msysp.strtostrfmt.fmt u64 
    push           msysp.strtostrfmt.n i64 
    push           msysp.strtostrfmt.t u64 
    push           msysp.strtostrfmt.s u64 
    callfn         &msysp.expandstr i64 
    pop            msysp.strtostrfmt.n i64 
    jump           #4796      
#4795: 
    setargs                   3 0
    push           msysp.strtostrfmt.n u64 
    push           msysp.strtostrfmt.s u64 
    push           msysp.strtostrfmt.t u64 
    callproc       &memcpy    
#4796: 
    push           msysp.strtostrfmt.nheap i64 
    jumpfalse      #4797      i64 
    setargs                   2 0
    push           msysp.strtostrfmt.nheap i64 
    push           msysp.strtostrfmt.u u64 
    callproc       &mlibp.pcm_free 
#4797: 
    push           msysp.strtostrfmt.n i64 
    setret                    i64 
    jump           #4798      
#4798: 
    retfn                     i64 
End


Proc msysp.tostr_i64:
    param          msysp.tostr_i64.a i64 
    param          msysp.tostr_i64.fmt u64 
    local          msysp.tostr_i64.str block:360 
    local          msysp.tostr_i64.n i64 
    procentry                 
    push           msysp.tostr_i64.fmt u64 
    push           12         
    pushptroff                u8 1 0
    push           0          u64 
    casejumpeq     #4800      u64 0
    push           68         u64 
    casejumpeq     #4801      u64 0
    push           100        u64 
    casejumpeq     #4801      u64 0
    popstack                  u64 
    jump           #4802      
#4800: 
    setargs                   3 0
    push           msysp.tostr_i64.fmt u64 
    push           &msysp.tostr_i64.str 
    push           msysp.tostr_i64.a i64 
    callfn         &msysp.i64tostrfmt i64 
    pop            msysp.tostr_i64.n i64 
    jump           #4803      
#4801: 
    setargs                   4 0
    push           msysp.tostr_i64.fmt u64 
    push           &msysp.tostr_i64.str 
    push           8          i64 
    push           &msysp.tostr_i64.a 
    callfn         &msysp.domultichar i64 
    pop            msysp.tostr_i64.n i64 
    jump           #4803      
#4802: 
    setargs                   1 0
    push           msysp.tostr_i64.a i64 
    callproc       &msysp.printchar 
    jump           #4804      
#4803: 
    setargs                   2 0
    push           msysp.tostr_i64.n i64 
    push           &msysp.tostr_i64.str 
    callproc       &msysp.printstr_n 
#4804: 
    retproc                   
End


Proc msysp.tostr_u64:
    param          msysp.tostr_u64.a u64 
    param          msysp.tostr_u64.fmt u64 
    local          msysp.tostr_u64.str block:360 
    local          msysp.tostr_u64.n i64 
    procentry                 
    push           msysp.tostr_u64.fmt u64 
    push           12         
    pushptroff                u8 1 0
    push           68         u64 
    casejumpeq     #4806      u64 0
    push           100        u64 
    casejumpeq     #4806      u64 0
    push           67         u64 
    casejumpeq     #4807      u64 0
    push           99         u64 
    casejumpeq     #4807      u64 0
    popstack                  u64 
    jump           #4808      
#4806: 
    setargs                   4 0
    push           msysp.tostr_u64.fmt u64 
    push           &msysp.tostr_u64.str 
    push           8          i64 
    push           &msysp.tostr_u64.a 
    callfn         &msysp.domultichar i64 
    pop            msysp.tostr_u64.n i64 
    jump           #4809      
#4807: 
    setargs                   1 0
    push           msysp.tostr_u64.a i64 
    callproc       &msysp.printchar 
    jump           #4810      
    jump           #4809      
#4808: 
    setargs                   3 0
    push           msysp.tostr_u64.fmt u64 
    push           &msysp.tostr_u64.str 
    push           msysp.tostr_u64.a i64 
    callfn         &msysp.u64tostrfmt i64 
    pop            msysp.tostr_u64.n i64 
#4809: 
    setargs                   2 0
    push           msysp.tostr_u64.n i64 
    push           &msysp.tostr_u64.str 
    callproc       &msysp.printstr_n 
#4810: 
    retproc                   
End


Proc msysp.tostr_u128:
    param          msysp.tostr_u128.a u128 
    param          msysp.tostr_u128.fmt u64 
    param          msysp.tostr_u128.neg i64 
    local          msysp.tostr_u128.str block:360 
    local          msysp.tostr_u128.n i64 
    procentry                 
    push           msysp.tostr_u128.fmt u64 
    push           12         
    pushptroff                u8 1 0
    push           68         u64 
    casejumpeq     #4812      u64 0
    push           100        u64 
    casejumpeq     #4812      u64 0
    push           67         u64 
    casejumpeq     #4813      u64 0
    push           99         u64 
    casejumpeq     #4813      u64 0
    popstack                  u64 
    jump           #4814      
#4812: 
    setargs                   4 0
    push           msysp.tostr_u128.fmt u64 
    push           &msysp.tostr_u128.str 
    push           8          i64 
    push           &msysp.tostr_u128.a 
    callfn         &msysp.domultichar i64 
    pop            msysp.tostr_u128.n i64 
    jump           #4815      
#4813: 
    setargs                   1 0
    push           msysp.tostr_u128.a u128 
    softtruncw                i64 u128 
    callproc       &msysp.printchar 
    jump           #4816      
    jump           #4815      
#4814: 
    push           msysp.tostr_u128.neg i64 
    jumpfalse      #4817      i64 
    push           45         u64 
    push           &msysp.tostr_u128.str 
    push           1          i64 
    popptroff                 u8 1 -1
    setargs                   4 0
    push           msysp.tostr_u128.fmt u64 
    push           &msysp.tostr_u128.str 
    push           1          
    addrefoff                 u8 1 0
    push           msysp.tostr_u128.a i128 
    callfn         &msysp.u128tostrfmt i64 
    push           1          i64 
    add                       i64 
    pop            msysp.tostr_u128.n i64 
    jump           #4818      
#4817: 
    setargs                   4 0
    push           msysp.tostr_u128.fmt u64 
    push           &msysp.tostr_u128.str 
    push           msysp.tostr_u128.a i128 
    callfn         &msysp.u128tostrfmt i64 
    pop            msysp.tostr_u128.n i64 
#4818: 
#4815: 
    setargs                   2 0
    push           msysp.tostr_u128.n i64 
    push           &msysp.tostr_u128.str 
    callproc       &msysp.printstr_n 
#4816: 
    retproc                   
End


Proc msysp.tostr_r64:
    param          msysp.tostr_r64.x r64 
    param          msysp.tostr_r64.fmt u64 
    local          msysp.tostr_r64.str block:360 
    local          msysp.tostr_r64.str2 block:360 
    local          msysp.tostr_r64.cfmt block:10 
    local          msysp.tostr_r64.n i64 
    procentry                 
    push           37         u64 
    push           &msysp.tostr_r64.cfmt 
    push           0          i64 
    popptroff                 u8 1 0
    push           msysp.tostr_r64.fmt u64 
    push           1          
    pushptroff                i8 1 0
    jumpfalse      #4820      i64 
    push           46         u64 
    push           &msysp.tostr_r64.cfmt 
    push           1          i64 
    popptroff                 u8 1 0
    push           42         u64 
    push           &msysp.tostr_r64.cfmt 
    push           2          i64 
    popptroff                 u8 1 0
    push           msysp.tostr_r64.fmt u64 
    push           5          
    pushptroff                u8 1 0
    push           &msysp.tostr_r64.cfmt 
    push           3          i64 
    popptroff                 u8 1 0
    push           0          u64 
    push           &msysp.tostr_r64.cfmt 
    push           4          i64 
    popptroff                 u8 1 0
    setargs                   4 3
    push           msysp.tostr_r64.x r64 
    push           msysp.tostr_r64.fmt u64 
    push           1          
    pushptroff                i8 1 0
    push           &msysp.tostr_r64.cfmt 
    push           &msysp.tostr_r64.str 
    callproc       &sprintf   
    jump           #4821      
#4820: 
    push           msysp.tostr_r64.fmt u64 
    push           5          
    pushptroff                u8 1 0
    push           &msysp.tostr_r64.cfmt 
    push           1          i64 
    popptroff                 u8 1 0
    push           0          u64 
    push           &msysp.tostr_r64.cfmt 
    push           2          i64 
    popptroff                 u8 1 0
    setargs                   3 3
    push           msysp.tostr_r64.x r64 
    push           &msysp.tostr_r64.cfmt 
    push           &msysp.tostr_r64.str 
    callproc       &sprintf   
#4821: 
    setargs                   1 0
    push           &msysp.tostr_r64.str 
    callfn         &strlen    i64 
    pop            msysp.tostr_r64.n i64 
    push           msysp.tostr_r64.n i64 
    push           msysp.tostr_r64.fmt u64 
    pushptr                   u8 
    jumpge         #4822      i64 
    setargs                   4 0
    push           msysp.tostr_r64.fmt u64 
    push           msysp.tostr_r64.n i64 
    push           &msysp.tostr_r64.str2 
    push           &msysp.tostr_r64.str 
    callfn         &msysp.expandstr i64 
    pop            msysp.tostr_r64.n i64 
    setargs                   2 0
    push           &msysp.tostr_r64.str2 
    push           &msysp.tostr_r64.str 
    callproc       &strcpy    
#4822: 
    setargs                   2 0
    push           msysp.tostr_r64.n i64 
    push           &msysp.tostr_r64.str 
    callproc       &msysp.printstr_n 
#4823: 
    retproc                   
End


Proc msysp.tostr_str:
    param          msysp.tostr_str.s u64 
    param          msysp.tostr_str.fmt u64 
    local          msysp.tostr_str.oldlen i64 
    local          msysp.tostr_str.newlen i64 
    local          msysp.tostr_str.n i64 
    local          msysp.tostr_str.t u64 
    procentry                 
    setargs                   1 0
    push           msysp.tostr_str.s u64 
    callfn         &strlen    i64 
    pop            msysp.tostr_str.oldlen i64 
    push           msysp.tostr_str.oldlen i64 
    pop            msysp.tostr_str.newlen i64 
    push           msysp.tostr_str.fmt u64 
    push           3          
    pushptroff                u8 1 0
    jumptrue       #4825      u64 
    push           msysp.tostr_str.fmt u64 
    pushptr                   u8 
    push           msysp.tostr_str.newlen i64 
    jumpgt         #4825      i64 
    push           msysp.tostr_str.fmt u64 
    push           8          
    pushptroff                u8 1 0
    jumptrue       #4825      u64 
    push           msysp.tostr_str.fmt u64 
    push           1          
    pushptroff                i8 1 0
    jumpfalse      #4826      i64 
#4825: 
    push           msysp.tostr_str.fmt u64 
    push           3          
    pushptroff                u8 1 0
    jumpfalse      #4827      u64 
    push           &msysp.tostr_str.newlen 
    push           2          i64 
    addto                     i64 
#4827: 
    push           msysp.tostr_str.fmt u64 
    pushptr                   u8 
    push           msysp.tostr_str.newlen i64 
    jumple         #4828      i64 
    push           msysp.tostr_str.fmt u64 
    pushptr                   u8 
    pop            msysp.tostr_str.newlen i64 
#4828: 
    setargs                   1 0
    push           msysp.tostr_str.newlen i64 
    push           1          i64 
    add                       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            msysp.tostr_str.t u64 
    setargs                   4 0
    push           msysp.tostr_str.fmt u64 
    push           msysp.tostr_str.oldlen i64 
    push           msysp.tostr_str.t u64 
    push           msysp.tostr_str.s u64 
    callfn         &msysp.strtostrfmt i64 
    pop            msysp.tostr_str.n i64 
    push           msysp.tostr_str.fmt u64 
    push           1          
    pushptroff                i8 1 0
    jumpfalse      #4829      i64 
    push           &msysp.tostr_str.n 
    push           msysp.tostr_str.fmt u64 
    push           1          
    pushptroff                i8 1 0
    minto                     i64 
#4829: 
    setargs                   2 0
    push           msysp.tostr_str.n i64 
    push           msysp.tostr_str.t u64 
    callproc       &msysp.printstr_n 
    setargs                   2 0
    push           msysp.tostr_str.newlen i64 
    push           1          i64 
    add                       i64 
    push           msysp.tostr_str.t u64 
    callproc       &mlibp.pcm_free 
    jump           #4830      
#4826: 
    setargs                   2 0
    push           msysp.tostr_str.oldlen i64 
    push           msysp.tostr_str.s u64 
    callproc       &msysp.printstr_n 
#4830: 
#4831: 
    retproc                   
End


Proc msysp.getfmt: u64
    param          msysp.getfmt.fmtstyle u64 
    procentry                 
    startmult                 
    push           msysp.getfmt.fmtstyle u64 
    jumpfalse      #4833      u64 
    setargs                   3 0
    push           &msysp.getfmt.fmt 
    push           -1         i64 
    push           msysp.getfmt.fmtstyle u64 
    callproc       &msysp.strtofmt 
    push           &msysp.getfmt.fmt 
    resetmult                 
    jump           #4834      
#4833: 
    push           &msysp.defaultfmt 
    endmult                   
#4834: 
    setret                    u64 
    jump           #4835      
#4835: 
    retfn                     u64 
End


Proc msysp.strint: u64
    param          msysp.strint.a i64 
    param          msysp.strint.fmtstyle u64 
    local          msysp.strint.fmt u64 
    procentry                 
    setargs                   1 0
    push           &msysp.strint.str 
    callproc       &msysp.m$print_startstr 
    setargs                   2 0
    setargs                   1 0
    push           msysp.strint.fmtstyle u64 
    callfn         &msysp.getfmt u64 
    store          msysp.strint.fmt u64 
    push           msysp.strint.a i64 
    callproc       &msysp.tostr_i64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           msysp.strint.fmt u64 
    push           &msysp.strint.str 
    callfn         &msysp.getstr u64 
    setret                    u64 
    jump           #4837      
#4837: 
    retfn                     u64 
End


Proc msysp.getstrint:
    param          msysp.getstrint.a i64 
    param          msysp.getstrint.dest u64 
    procentry                 
    setargs                   1 0
    push           msysp.getstrint.dest u64 
    callproc       &msysp.m$print_startstr 
    setargs                   2 0
    setargs                   1 0
    push           0          u64 
    callfn         &msysp.getfmt u64 
    push           msysp.getstrint.a i64 
    callproc       &msysp.tostr_i64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#4839: 
    retproc                   
End


Proc msysp.strword: u64
    param          msysp.strword.a u64 
    param          msysp.strword.fmtstyle u64 
    local          msysp.strword.fmt u64 
    procentry                 
    setargs                   1 0
    push           &msysp.strword.str 
    callproc       &msysp.m$print_startstr 
    setargs                   2 0
    setargs                   1 0
    push           msysp.strword.fmtstyle u64 
    callfn         &msysp.getfmt u64 
    store          msysp.strword.fmt u64 
    push           msysp.strword.a u64 
    callproc       &msysp.tostr_u64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           msysp.strword.fmt u64 
    push           &msysp.strword.str 
    callfn         &msysp.getstr u64 
    setret                    u64 
    jump           #4841      
#4841: 
    retfn                     u64 
End


Proc msysp.strreal: u64
    param          msysp.strreal.a r64 
    param          msysp.strreal.fmtstyle u64 
    local          msysp.strreal.fmt u64 
    procentry                 
    setargs                   1 0
    push           &msysp.strreal.str 
    callproc       &msysp.m$print_startstr 
    setargs                   2 0
    setargs                   1 0
    push           msysp.strreal.fmtstyle u64 
    callfn         &msysp.getfmt u64 
    store          msysp.strreal.fmt u64 
    push           msysp.strreal.a r64 
    callproc       &msysp.tostr_r64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           msysp.strreal.fmt u64 
    push           &msysp.strreal.str 
    callfn         &msysp.getstr u64 
    setret                    u64 
    jump           #4843      
#4843: 
    retfn                     u64 
End


Proc msysp.getstr: u64
    param          msysp.getstr.s u64 
    param          msysp.getstr.fmt u64 
    procentry                 
    startmult                 
    push           msysp.getstr.fmt u64 
    push           13         
    pushptroff                u8 1 0
    jumpfalse      #4845      u64 
    setargs                   1 0
    push           msysp.getstr.s u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    resetmult                 
    jump           #4846      
#4845: 
    push           msysp.getstr.s u64 
    endmult                   
#4846: 
    setret                    u64 
    jump           #4847      
#4847: 
    retfn                     u64 
End


Proc msysp.initreadbuffer:
    procentry                 
    push           msysp.rd_buffer u64 
    jumpfalse      #4849      u64 
    jump           #4850      
#4849: 
    setargs                   1 0
    push           524288     i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            msysp.rd_buffer u64 
    push           0          u64 
    push           msysp.rd_buffer u64 
    popptr                    u8 
    push           msysp.rd_buffer u64 
    store          msysp.rd_lastpos u64 
    pop            msysp.rd_pos u64 
#4850: 
    retproc                   
End


Proc msysp.m$read_conline:
    procentry                 
    setargs                   0 0
    callproc       &msysp.initreadbuffer 
    setargs                   3 0
    push           524288     i64 
    push           msysp.rd_buffer u64 
    push           0          u64 
    callproc       &mlibp.readlinen 
    setargs                   1 0
    push           msysp.rd_buffer u64 
    callfn         &strlen    i64 
    pop            msysp.rd_length i64 
    push           msysp.rd_buffer u64 
    pop            msysp.rd_pos u64 
    push           0          u64 
    pop            msysp.rd_lastpos u64 
#4852: 
    retproc                   
End


Proc msysp.m$read_fileline:
    param          msysp.m$read_fileline.f u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.initreadbuffer 
    setargs                   3 0
    push           524288     i64 
    push           msysp.rd_buffer u64 
    push           msysp.m$read_fileline.f u64 
    callproc       &mlibp.readlinen 
    setargs                   1 0
    push           msysp.rd_buffer u64 
    callfn         &strlen    i64 
    pop            msysp.rd_length i64 
    push           msysp.rd_buffer u64 
    pop            msysp.rd_pos u64 
    push           0          u64 
    pop            msysp.rd_lastpos u64 
#4854: 
    retproc                   
End


Proc msysp.m$read_strline:
    param          msysp.m$read_strline.s u64 
    local          msysp.m$read_strline.n i64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.initreadbuffer 
    setargs                   1 0
    push           msysp.m$read_strline.s u64 
    callfn         &strlen    i64 
    pop            msysp.m$read_strline.n i64 
    push           msysp.m$read_strline.n i64 
    push           524288     i64 
    jumpge         #4856      i64 
    setargs                   2 0
    push           msysp.m$read_strline.s u64 
    push           msysp.rd_buffer u64 
    callproc       &strcpy    
    jump           #4857      
#4856: 
    setargs                   3 0
    push           524287     u64 
    push           msysp.m$read_strline.s u64 
    push           msysp.rd_buffer u64 
    callproc       &memcpy    
    push           0          u64 
    push           msysp.rd_buffer u64 
    push           524288     i64 
    popptroff                 u8 1 -1
#4857: 
    push           msysp.m$read_strline.n i64 
    pop            msysp.rd_length i64 
    push           msysp.rd_buffer u64 
    pop            msysp.rd_pos u64 
    push           0          u64 
    pop            msysp.rd_lastpos u64 
#4858: 
    retproc                   
End


Proc msysp.readitem: u64
    param          msysp.readitem.itemlength u64 
    local          msysp.readitem.p u64 
    local          msysp.readitem.s u64 
    local          msysp.readitem.itemstr u64 
    local          msysp.readitem.quotechar u8 
    local          msysp.readitem.c u8 
    procentry                 
    push           msysp.rd_buffer u64 
    jumptrue       #4860      u64 
    setargs                   0 0
    callproc       &msysp.initreadbuffer 
#4860: 
    push           msysp.rd_pos u64 
    pop            msysp.readitem.s u64 
    jump           #4861      
#4862: 
    push           &msysp.readitem.s 
    incr                      u64 1
#4861: 
    push           msysp.readitem.s u64 
    pushptr                   u8 
    push           32         u64 
    jumpeq         #4862      u64 
    push           msysp.readitem.s u64 
    pushptr                   u8 
    push           9          i64 
    jumpeq         #4862      i64 
#4863: 
    push           msysp.readitem.s u64 
    pop            msysp.readitem.itemstr u64 
    push           msysp.readitem.s u64 
    store          msysp.rd_pos u64 
    pop            msysp.rd_lastpos u64 
    push           msysp.readitem.s u64 
    pushptr                   u8 
    push           0          i64 
    jumpne         #4864      i64 
    push           0          i64 
    pop            msysp.termchar i64 
    push           0          i64 
    push           msysp.readitem.itemlength u64 
    popptr                    i64 
    push           msysp.readitem.s u64 
    setret                    u64 
    jump           #4865      
#4864: 
    push           0          u64 
    pop            msysp.readitem.quotechar u8 
    push           msysp.readitem.s u64 
    pushptr                   u8 
    push           34         u64 
    jumpne         #4866      u64 
    push           34         u64 
    pop            msysp.readitem.quotechar u8 
    push           &msysp.readitem.s 
    incr                      u64 1
    jump           #4867      
#4866: 
    push           msysp.readitem.s u64 
    pushptr                   u8 
    push           39         u64 
    jumpne         #4868      u64 
    push           39         u64 
    pop            msysp.readitem.quotechar u8 
    push           &msysp.readitem.s 
    incr                      u64 1
#4868: 
#4867: 
    push           msysp.readitem.s u64 
    store          msysp.readitem.itemstr u64 
    pop            msysp.readitem.p u64 
    jump           #4869      
#4870: 
    push           &msysp.readitem.s 
    loadincr                  u64 1
    pushptr                   u8 
    pop            msysp.readitem.c u8 
    push           msysp.readitem.c u8 
    switch         #4871      9 61
    opnd           #4872      
#4871: 
    switchlabel    #4873      
    switchlabel    #4872      
    switchlabel    #4872      
    switchlabel    #4872      
    switchlabel    #4872      
    switchlabel    #4872      
    switchlabel    #4872      
    switchlabel    #4872      
    switchlabel    #4872      
    switchlabel    #4872      
    switchlabel    #4872      
    switchlabel    #4872      
    switchlabel    #4872      
    switchlabel    #4872      
    switchlabel    #4872      
    switchlabel    #4872      
    switchlabel    #4872      
    switchlabel    #4872      
    switchlabel    #4872      
    switchlabel    #4872      
    switchlabel    #4872      
    switchlabel    #4872      
    switchlabel    #4872      
    switchlabel    #4873      
    switchlabel    #4872      
    switchlabel    #4872      
    switchlabel    #4872      
    switchlabel    #4872      
    switchlabel    #4872      
    switchlabel    #4872      
    switchlabel    #4872      
    switchlabel    #4872      
    switchlabel    #4872      
    switchlabel    #4872      
    switchlabel    #4872      
    switchlabel    #4873      
    switchlabel    #4872      
    switchlabel    #4872      
    switchlabel    #4872      
    switchlabel    #4872      
    switchlabel    #4872      
    switchlabel    #4872      
    switchlabel    #4872      
    switchlabel    #4872      
    switchlabel    #4872      
    switchlabel    #4872      
    switchlabel    #4872      
    switchlabel    #4872      
    switchlabel    #4872      
    switchlabel    #4872      
    switchlabel    #4872      
    switchlabel    #4872      
    switchlabel    #4873      
    endswitch                 
#4873: 
    push           msysp.readitem.quotechar u8 
    jumptrue       #4874      u64 
    push           msysp.readitem.p u64 
    push           msysp.readitem.s u64 
    jumpne         #4875      u64 
#4874: 
    jump           #4876      
#4875: 
    push           msysp.readitem.c u8 
    pop            msysp.termchar i64 
    jump           #4877      
    jump           #4878      
#4872: 
!normalchar::
#4876: 
    push           msysp.readitem.c u8 
    push           msysp.readitem.quotechar u8 
    jumpne         #4879      u64 
    push           msysp.readitem.s u64 
    pushptr                   u8 
    push           msysp.readitem.quotechar u8 
    jumpne         #4880      u64 
    push           msysp.readitem.c u8 
    push           msysp.readitem.p u64 
    popptr                    u8 
    push           &msysp.readitem.s 
    incr                      u64 1
    push           &msysp.readitem.p 
    incr                      u64 1
    jump           #4881      
#4880: 
    push           msysp.readitem.s u64 
    pushptr                   u8 
    pop            msysp.termchar i64 
    push           msysp.termchar i64 
    push           44         i64 
    jumpeq         #4882      i64 
    push           msysp.termchar i64 
    push           61         i64 
    jumpne         #4883      i64 
#4882: 
    push           &msysp.readitem.s 
    incr                      u64 1
    push           msysp.readitem.s u64 
    pushptr                   u8 
    pop            msysp.termchar i64 
#4883: 
    jump           #4877      
#4881: 
    jump           #4884      
#4879: 
    push           msysp.readitem.c u8 
    push           msysp.readitem.p u64 
    popptr                    u8 
    push           &msysp.readitem.p 
    incr                      u64 1
#4884: 
#4878: 
#4869: 
    push           msysp.readitem.s u64 
    pushptr                   u8 
    jumptrue       #4870      u64 
#4877: 
    push           msysp.readitem.s u64 
    pushptr                   u8 
    push           0          i64 
    jumpne         #4885      i64 
    push           0          i64 
    pop            msysp.termchar i64 
#4885: 
    push           msysp.readitem.p u64 
    push           msysp.readitem.itemstr u64 
    subref                    i64 1
    push           msysp.readitem.itemlength u64 
    popptr                    i64 
    push           msysp.readitem.s u64 
    pop            msysp.rd_pos u64 
    push           msysp.readitem.itemstr u64 
    setret                    u64 
    jump           #4865      
#4865: 
    retfn                     u64 
End


Proc msysp.strtoint: i64
    param          msysp.strtoint.s u64 
    param          msysp.strtoint.length i64 
    param          msysp.strtoint.base u64 
    local          msysp.strtoint.signd u8 
    local          msysp.strtoint.aa u64 
    local          msysp.strtoint.c u64 
    local          msysp.strtoint.d u64 
    procentry                 
    push           0          i64 
    pop            msysp.itemerror i64 
    push           msysp.strtoint.length i64 
    push           -1         i64 
    jumpne         #4887      i64 
    setargs                   1 0
    push           msysp.strtoint.s u64 
    callfn         &strlen    i64 
    pop            msysp.strtoint.length i64 
#4887: 
    push           0          i64 
    pop            msysp.strtoint.signd u8 
    push           msysp.strtoint.length i64 
    jumpfalse      #4888      i64 
    push           msysp.strtoint.s u64 
    pushptr                   u8 
    push           45         u64 
    jumpne         #4888      u64 
    push           1          i64 
    pop            msysp.strtoint.signd u8 
    push           &msysp.strtoint.s 
    incr                      u64 1
    push           &msysp.strtoint.length 
    decr                      i64 1
    jump           #4889      
#4888: 
    push           msysp.strtoint.length i64 
    jumpfalse      #4890      i64 
    push           msysp.strtoint.s u64 
    pushptr                   u8 
    push           43         u64 
    jumpne         #4890      u64 
    push           &msysp.strtoint.s 
    incr                      u64 1
    push           &msysp.strtoint.length 
    decr                      i64 1
#4890: 
#4889: 
    push           0          u64 
    pop            msysp.strtoint.aa u64 
    jump           #4891      
#4892: 
    push           &msysp.strtoint.s 
    loadincr                  u64 1
    pushptr                   u8 
    pop            msysp.strtoint.c u64 
    push           &msysp.strtoint.length 
    decr                      i64 1
    push           msysp.strtoint.c i64 
    switch         #4893      39 102
    opnd           #4894      
#4893: 
    switchlabel    #4895      
    switchlabel    #4894      
    switchlabel    #4894      
    switchlabel    #4894      
    switchlabel    #4894      
    switchlabel    #4894      
    switchlabel    #4894      
    switchlabel    #4894      
    switchlabel    #4894      
    switchlabel    #4896      
    switchlabel    #4896      
    switchlabel    #4896      
    switchlabel    #4896      
    switchlabel    #4896      
    switchlabel    #4896      
    switchlabel    #4896      
    switchlabel    #4896      
    switchlabel    #4896      
    switchlabel    #4896      
    switchlabel    #4894      
    switchlabel    #4894      
    switchlabel    #4894      
    switchlabel    #4894      
    switchlabel    #4894      
    switchlabel    #4894      
    switchlabel    #4894      
    switchlabel    #4897      
    switchlabel    #4897      
    switchlabel    #4897      
    switchlabel    #4897      
    switchlabel    #4897      
    switchlabel    #4897      
    switchlabel    #4894      
    switchlabel    #4894      
    switchlabel    #4894      
    switchlabel    #4894      
    switchlabel    #4894      
    switchlabel    #4894      
    switchlabel    #4894      
    switchlabel    #4894      
    switchlabel    #4894      
    switchlabel    #4894      
    switchlabel    #4894      
    switchlabel    #4894      
    switchlabel    #4894      
    switchlabel    #4894      
    switchlabel    #4894      
    switchlabel    #4894      
    switchlabel    #4894      
    switchlabel    #4894      
    switchlabel    #4894      
    switchlabel    #4894      
    switchlabel    #4894      
    switchlabel    #4894      
    switchlabel    #4894      
    switchlabel    #4894      
    switchlabel    #4895      
    switchlabel    #4894      
    switchlabel    #4898      
    switchlabel    #4898      
    switchlabel    #4898      
    switchlabel    #4898      
    switchlabel    #4898      
    switchlabel    #4898      
    endswitch                 
#4897: 
    push           msysp.strtoint.c u64 
    push           65         u64 
    sub                       i64 
    push           10         i64 
    add                       u64 
    pop            msysp.strtoint.d u64 
    jump           #4899      
#4898: 
    push           msysp.strtoint.c u64 
    push           97         u64 
    sub                       i64 
    push           10         i64 
    add                       u64 
    pop            msysp.strtoint.d u64 
    jump           #4899      
#4896: 
    push           msysp.strtoint.c u64 
    push           48         u64 
    sub                       u64 
    pop            msysp.strtoint.d u64 
    jump           #4899      
#4895: 
    jump           #4891      
    jump           #4899      
#4894: 
    push           1          i64 
    pop            msysp.itemerror i64 
    jump           #4900      
#4899: 
    push           msysp.strtoint.d u64 
    push           msysp.strtoint.base u64 
    jumplt         #4901      u64 
    push           1          i64 
    pop            msysp.itemerror i64 
    jump           #4900      
#4901: 
    push           msysp.strtoint.aa u64 
    push           msysp.strtoint.base u64 
    mul                       u64 
    push           msysp.strtoint.d u64 
    add                       u64 
    pop            msysp.strtoint.aa u64 
#4891: 
    push           msysp.strtoint.length i64 
    jumptrue       #4892      i64 
#4900: 
    startmult                 
    push           msysp.strtoint.signd u8 
    jumpfalse      #4902      i64 
    push           msysp.strtoint.aa u64 
    neg                       i64 
    resetmult                 
    jump           #4903      
#4902: 
    push           msysp.strtoint.aa i64 
    endmult                   
#4903: 
    setret                    i64 
    jump           #4904      
#4904: 
    retfn                     i64 
End


Proc msysp.m$read_i64: i64
    param          msysp.m$read_i64.fmt i64 
    local          msysp.m$read_i64.s u64 
    local          msysp.m$read_i64.length i64 
    local          msysp.m$read_i64.c i64 
    local          msysp.m$read_i64.aa i64 
    procentry                 
    push           msysp.m$read_i64.fmt i64 
    push           67         i64 
    casejumpeq     #4906      i64 0
    push           99         i64 
    casejumpeq     #4906      i64 0
    push           84         i64 
    casejumpeq     #4907      i64 0
    push           116        i64 
    casejumpeq     #4907      i64 0
    push           69         i64 
    casejumpeq     #4908      i64 0
    push           101        i64 
    casejumpeq     #4908      i64 0
    popstack                  i64 
    jump           #4909      
#4906: 
    push           msysp.rd_pos u64 
    pop            msysp.rd_lastpos u64 
    push           msysp.rd_pos u64 
    pushptr                   u8 
    jumpfalse      #4910      u64 
    push           &msysp.rd_pos 
    loadincr                  u64 1
    pushptr                   u8 
    setret                    i64 
    jump           #4911      
    jump           #4912      
#4910: 
    push           0          i64 
    setret                    i64 
    jump           #4911      
#4912: 
    jump           #4913      
#4907: 
    push           msysp.termchar i64 
    setret                    i64 
    jump           #4911      
    jump           #4913      
#4908: 
    push           msysp.itemerror i64 
    setret                    i64 
    jump           #4911      
    jump           #4913      
#4909: 
#4913: 
    setargs                   1 0
    push           &msysp.m$read_i64.length 
    callfn         &msysp.readitem u64 
    pop            msysp.m$read_i64.s u64 
    push           msysp.m$read_i64.fmt i64 
    push           0          i64 
    casejumpeq     #4914      i64 0
    push           73         i64 
    casejumpeq     #4914      i64 0
    push           105        i64 
    casejumpeq     #4914      i64 0
    push           66         i64 
    casejumpeq     #4915      i64 0
    push           98         i64 
    casejumpeq     #4915      i64 0
    push           72         i64 
    casejumpeq     #4916      i64 0
    push           104        i64 
    casejumpeq     #4916      i64 0
    popstack                  i64 
    jump           #4917      
#4914: 
    setargs                   3 0
    push           10         u64 
    push           msysp.m$read_i64.length i64 
    push           msysp.m$read_i64.s u64 
    callfn         &msysp.strtoint i64 
    setret                    i64 
    jump           #4911      
    jump           #4918      
#4915: 
    setargs                   3 0
    push           2          u64 
    push           msysp.m$read_i64.length i64 
    push           msysp.m$read_i64.s u64 
    callfn         &msysp.strtoint i64 
    setret                    i64 
    jump           #4911      
    jump           #4918      
#4916: 
    setargs                   3 0
    push           16         u64 
    push           msysp.m$read_i64.length i64 
    push           msysp.m$read_i64.s u64 
    callfn         &msysp.strtoint i64 
    setret                    i64 
    jump           #4911      
    jump           #4918      
#4917: 
#4918: 
    push           0          i64 
    setret                    i64 
    jump           #4911      
#4911: 
    retfn                     i64 
End


Proc msysp.m$read_r64: r64
    param          msysp.m$read_r64.fmt i64 
    local          msysp.m$read_r64.str block:512 
    local          msysp.m$read_r64.s u64 
    local          msysp.m$read_r64.length i64 
    local          msysp.m$read_r64.numlength i32 
    local          msysp.m$read_r64.x r64 
    procentry                 
    setargs                   1 0
    push           &msysp.m$read_r64.length 
    callfn         &msysp.readitem u64 
    pop            msysp.m$read_r64.s u64 
    push           msysp.m$read_r64.length i64 
    push           0          i64 
    jumpeq         #4920      i64 
    push           msysp.m$read_r64.length i64 
    push           512        i64 
    jumplt         #4921      i64 
#4920: 
    push           0.0000000000000000e+000 r64 
    setret                    r64 
    jump           #4922      
#4921: 
    setargs                   3 0
    push           msysp.m$read_r64.length u64 
    push           msysp.m$read_r64.s u64 
    push           &msysp.m$read_r64.str 
    callproc       &memcpy    
    push           0          u64 
    push           &msysp.m$read_r64.str 
    push           msysp.m$read_r64.length i64 
    popptroff                 u8 1 0
    push           0          i64 
    pop            msysp.itemerror i64 
    setargs                   4 3
    push           &msysp.m$read_r64.numlength 
    push           &msysp.m$read_r64.x 
    push           "%lf%n"    u64 
    push           &msysp.m$read_r64.str 
    callfn         &sscanf    i32 
    push           0          i64 
    jumpeq         #4923      i64 
    push           msysp.m$read_r64.numlength i32 
    push           msysp.m$read_r64.length i64 
    jumpeq         #4924      i64 
#4923: 
    push           0.0000000000000000e+000 r64 
    pop            msysp.m$read_r64.x r64 
    push           1          i64 
    pop            msysp.itemerror i64 
#4924: 
    push           msysp.m$read_r64.x r64 
    setret                    r64 
    jump           #4922      
#4922: 
    retfn                     r64 
End


Proc msysp.m$read_str:
    param          msysp.m$read_str.dest u64 
    param          msysp.m$read_str.destlen i64 
    param          msysp.m$read_str.fmt i64 
    local          msysp.m$read_str.s u64 
    local          msysp.m$read_str.length i64 
    local          msysp.m$read_str.numlength i64 
    local          msysp.m$read_str.x r64 
    procentry                 
    push           0          i64 
    pop            msysp.itemerror i64 
    push           msysp.m$read_str.fmt i64 
    push           76         i64 
    jumpeq         #4926      i64 
    push           msysp.m$read_str.fmt i64 
    push           108        i64 
    jumpne         #4927      i64 
#4926: 
    push           msysp.rd_pos u64 
    pop            msysp.m$read_str.s u64 
    push           msysp.rd_buffer u64 
    push           msysp.rd_length i64 
    addrefoff                 u64 1 0
    push           msysp.rd_pos u64 
    subref                    i64 1
    pop            msysp.m$read_str.length i64 
    jump           #4928      
#4927: 
    setargs                   1 0
    push           &msysp.m$read_str.length 
    callfn         &msysp.readitem u64 
    pop            msysp.m$read_str.s u64 
    push           msysp.m$read_str.fmt i64 
    push           78         i64 
    jumpeq         #4929      i64 
    push           msysp.m$read_str.fmt i64 
    push           110        i64 
    jumpne         #4930      i64 
#4929: 
    setargs                   2 0
    push           msysp.m$read_str.length i64 
    push           msysp.m$read_str.s u64 
    callproc       &mlibp.iconvlcn 
#4930: 
#4928: 
    push           msysp.m$read_str.destlen i64 
    push           0          i64 
    jumple         #4931      i64 
    push           msysp.m$read_str.length i64 
    push           msysp.m$read_str.destlen i64 
    jumplt         #4932      i64 
    push           msysp.m$read_str.destlen i64 
    push           1          i64 
    sub                       i64 
    pop            msysp.m$read_str.length i64 
    push           1          i64 
    pop            msysp.itemerror i64 
#4932: 
#4931: 
    setargs                   3 0
    push           msysp.m$read_str.length u64 
    push           msysp.m$read_str.s u64 
    push           msysp.m$read_str.dest u64 
    callproc       &memcpy    
    push           0          u64 
    push           msysp.m$read_str.dest u64 
    push           msysp.m$read_str.length i64 
    popptroff                 u8 1 0
#4933: 
    retproc                   
End


Proc msysp.readstr:
    param          msysp.readstr.dest u64 
    param          msysp.readstr.fmt i64 
    param          msysp.readstr.destlen i64 
    procentry                 
    setargs                   3 0
    push           msysp.readstr.fmt i64 
    push           msysp.readstr.destlen i64 
    push           msysp.readstr.dest u64 
    callproc       &msysp.m$read_str 
#4935: 
    retproc                   
End


Proc msysp.rereadln:
    procentry                 
    push           msysp.rd_buffer u64 
    pop            msysp.rd_pos u64 
    push           msysp.rd_pos u64 
    pop            msysp.rd_lastpos u64 
#4937: 
    retproc                   
End


Proc msysp.reread:
    procentry                 
    push           msysp.rd_lastpos u64 
    pop            msysp.rd_pos u64 
#4939: 
    retproc                   
End


Proc msysp.valint: i64
    param          msysp.valint.s u64 
    param          msysp.valint.fmt i64 
    local          msysp.valint.old_pos u64 
    local          msysp.valint.old_lastpos u64 
    local          msysp.valint.aa i64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.initreadbuffer 
    push           msysp.rd_pos u64 
    pop            msysp.valint.old_pos u64 
    push           msysp.rd_lastpos u64 
    pop            msysp.valint.old_lastpos u64 
    push           msysp.valint.s u64 
    pop            msysp.rd_pos u64 
    setargs                   1 0
    push           msysp.valint.fmt i64 
    callfn         &msysp.m$read_i64 i64 
    pop            msysp.valint.aa i64 
    push           msysp.valint.old_pos u64 
    pop            msysp.rd_pos u64 
    push           msysp.valint.old_lastpos u64 
    pop            msysp.rd_lastpos u64 
    push           msysp.valint.aa i64 
    setret                    i64 
    jump           #4941      
#4941: 
    retfn                     i64 
End


Proc msysp.valreal: r64
    param          msysp.valreal.s u64 
    local          msysp.valreal.old_pos u64 
    local          msysp.valreal.old_lastpos u64 
    local          msysp.valreal.x r64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.initreadbuffer 
    push           msysp.rd_pos u64 
    pop            msysp.valreal.old_pos u64 
    push           msysp.rd_lastpos u64 
    pop            msysp.valreal.old_lastpos u64 
    push           msysp.valreal.s u64 
    pop            msysp.rd_pos u64 
    setargs                   1 0
    push           0          i64 
    callfn         &msysp.m$read_r64 r64 
    pop            msysp.valreal.x r64 
    push           msysp.valreal.old_pos u64 
    pop            msysp.rd_pos u64 
    push           msysp.valreal.old_lastpos u64 
    pop            msysp.rd_lastpos u64 
    push           msysp.valreal.x r64 
    setret                    r64 
    jump           #4943      
#4943: 
    retfn                     r64 
End


Proc msysp.mclunimpl:
    param          msysp.mclunimpl.mess u64 
    procentry                 
    setargs                   2 2
    push           msysp.mclunimpl.mess u64 
    push           "MCL-UNIMPL: %s\n" u64 
    callproc       &printf    
    push           1          i64 
    stop                      
#4945: 
    retproc                   
End


Proc mlibp.pcm_alloc: u64
    param          mlibp.pcm_alloc.n i64 
    local          mlibp.pcm_alloc.p u64 
    procentry                 
    push           mlibp.pcm_setup u8 
    jumptrue       #4947      i64 
    setargs                   0 0
    callproc       &mlibp.pcm_init 
#4947: 
    push           mlibp.pcm_alloc.n i64 
    push           2048       i64 
    jumple         #4948      i64 
    setargs                   1 0
    push           mlibp.pcm_alloc.n i64 
    callfn         &mlibp.pcm_getac i64 
    pop            mlibp.alloccode i64 
    push           &mlibp.allocupper 
    push           mlibp.alloccode i64 
    pushptroff                i64 8 0
    pop            mlibp.allocbytes i64 
    setargs                   1 0
    push           mlibp.allocbytes i64 
    callfn         &mlibp.allocmem u64 
    pop            mlibp.pcm_alloc.p u64 
    push           mlibp.pcm_alloc.p u64 
    jumptrue       #4949      u64 
    setargs                   1 0
    push           "pcm_alloc failure" u64 
    callproc       &mlibp.abortprogram 
#4949: 
    push           mlibp.pcm_alloc.p u64 
    setret                    u64 
    jump           #4950      
#4948: 
    push           &mlibp.sizeindextable 
    push           mlibp.pcm_alloc.n i64 
    pushptroff                u8 1 0
    pop            mlibp.alloccode i64 
    push           &mlibp.allocupper 
    push           mlibp.alloccode i64 
    pushptroff                i64 8 0
    pop            mlibp.allocbytes i64 
    push           &mlibp.smallmemtotal 
    push           mlibp.allocbytes i64 
    addto                     i64 
    push           &mlibp.freelist 
    push           mlibp.alloccode i64 
    pushptroff                u64 8 0
    store          mlibp.pcm_alloc.p u64 
    jumpfalse      #4951      u64 
    push           &mlibp.freelist 
    push           mlibp.alloccode i64 
    pushptroff                u64 8 0
    pushptr                   u64 
    push           &mlibp.freelist 
    push           mlibp.alloccode i64 
    popptroff                 u64 8 0
    push           mlibp.pcm_alloc.p u64 
    setret                    u64 
    jump           #4950      
#4951: 
    push           mlibp.pcheapptr u64 
    pop            mlibp.pcm_alloc.p u64 
    push           &mlibp.pcheapptr 
    push           mlibp.allocbytes i64 
    addrefoffto               u64 1 0
    push           mlibp.pcheapptr u64 
    push           mlibp.pcheapend u64 
    jumplt         #4952      u64 
    setargs                   1 0
    push           mlibp.allocbytes i64 
    callfn         &mlibp.pcm_newblock u64 
    pop            mlibp.pcm_alloc.p u64 
    push           mlibp.pcm_alloc.p u64 
    setret                    u64 
    jump           #4950      
#4952: 
    push           mlibp.pcm_alloc.p u64 
    setret                    u64 
    jump           #4950      
#4950: 
    retfn                     u64 
End


Proc mlibp.pcm_free:
    param          mlibp.pcm_free.p u64 
    param          mlibp.pcm_free.n i64 
    local          mlibp.pcm_free.acode i64 
    procentry                 
    push           mlibp.pcm_free.n i64 
    push           0          i64 
    jumpne         #4954      i64 
    jump           #4955      
#4954: 
    push           mlibp.pcm_free.n i64 
    push           2048       i64 
    jumple         #4956      i64 
    setargs                   1 0
    push           mlibp.pcm_free.p u64 
    callproc       &free      
    jump           #4955      
#4956: 
    push           mlibp.pcm_free.p u64 
    jumpfalse      #4957      u64 
    push           &mlibp.sizeindextable 
    push           mlibp.pcm_free.n i64 
    pushptroff                u8 1 0
    pop            mlibp.pcm_free.acode i64 
    push           &mlibp.smallmemtotal 
    push           &mlibp.allocupper 
    push           mlibp.pcm_free.acode i64 
    pushptroff                i64 8 0
    subto                     i64 
    push           &mlibp.freelist 
    push           mlibp.pcm_free.acode i64 
    pushptroff                u64 8 0
    push           mlibp.pcm_free.p u64 
    popptr                    u64 
    push           mlibp.pcm_free.p u64 
    push           &mlibp.freelist 
    push           mlibp.pcm_free.acode i64 
    popptroff                 u64 8 0
#4957: 
#4955: 
    retproc                   
End


Proc mlibp.pcm_freeac:
    param          mlibp.pcm_freeac.p u64 
    param          mlibp.pcm_freeac.alloc i64 
    procentry                 
    setargs                   2 0
    push           &mlibp.allocupper 
    push           mlibp.pcm_freeac.alloc i64 
    pushptroff                i64 8 0
    push           mlibp.pcm_freeac.p u64 
    callproc       &mlibp.pcm_free 
#4959: 
    retproc                   
End


Proc mlibp.pcm_copymem4:
    param          mlibp.pcm_copymem4.p u64 
    param          mlibp.pcm_copymem4.q u64 
    param          mlibp.pcm_copymem4.n i64 
    procentry                 
    setargs                   3 0
    push           mlibp.pcm_copymem4.n u64 
    push           mlibp.pcm_copymem4.q u64 
    push           mlibp.pcm_copymem4.p u64 
    callproc       &memcpy    
#4961: 
    retproc                   
End


Proc mlibp.pcm_clearmem:
    param          mlibp.pcm_clearmem.p u64 
    param          mlibp.pcm_clearmem.n i64 
    procentry                 
    setargs                   3 0
    push           mlibp.pcm_clearmem.n u64 
    push           0          i64 
    push           mlibp.pcm_clearmem.p u64 
    callproc       &memset    
#4963: 
    retproc                   
End


Proc mlibp.pcm_init:
    local          mlibp.pcm_init.j i64 
    local          mlibp.pcm_init.k i64 
    local          mlibp.pcm_init.k1 i64 
    local          mlibp.pcm_init.k2 i64 
    local          mlibp.pcm_init.size i64 
    local          mlibp.pcm_init.av_1 i64 
    local          mlibp.pcm_init.i i64 
    procentry                 
    push           0          i64 
    pop            mlibp.alloccode i64 
    push           mlibp.pcm_setup u8 
    jumpfalse      #4965      i64 
    jump           #4966      
#4965: 
    setargs                   1 0
    push           0          i64 
    callproc       &mlibp.pcm_newblock 
    push           mlibp.pcheapptr u64 
    pop            mlibp.allocbase u64 
#4967: 
    push           1          i64 
    pop            mlibp.pcm_init.i i64 
#4968: 
    push           1          i64 
    pop            mlibp.pcm_init.j i64 
    push           16         i64 
    pop            mlibp.pcm_init.k i64 
    jump           #4969      
#4970: 
    push           mlibp.pcm_init.k i64 
    push           1          i64 
    shl                       i64 
    pop            mlibp.pcm_init.k i64 
    push           &mlibp.pcm_init.j 
    incr                      i64 1
#4969: 
    push           mlibp.pcm_init.i i64 
    push           mlibp.pcm_init.k i64 
    jumpgt         #4970      i64 
#4971: 
    push           mlibp.pcm_init.j i64 
    push           &mlibp.sizeindextable 
    push           mlibp.pcm_init.i i64 
    popptroff                 u8 1 0
#4972: 
    forup          #4968      i64 1
    opnd           mlibp.pcm_init.i 
    opnd           2048       
#4973: 
    push           16         u64 
    push           &mlibp.allocupper 
    push           1          i64 
    popptroff                 u64 8 0
    push           16         i64 
    pop            mlibp.pcm_init.size i64 
#4974: 
    push           2          i64 
    pop            mlibp.pcm_init.i i64 
#4975: 
    push           &mlibp.pcm_init.size 
    push           2          i64 
    multo                     i64 
    push           mlibp.pcm_init.size u64 
    push           &mlibp.allocupper 
    push           mlibp.pcm_init.i i64 
    popptroff                 u64 8 0
    push           mlibp.pcm_init.size i64 
    push           33554432   i64 
    jumplt         #4976      i64 
    push           mlibp.pcm_init.i i64 
    pop            mlibp.pcm_init.k i64 
    jump           #4977      
#4976: 
#4978: 
    forup          #4975      i64 1
    opnd           mlibp.pcm_init.i 
    opnd           27         
#4977: 
#4979: 
    push           mlibp.pcm_init.k i64 
    push           1          i64 
    add                       i64 
    pop            mlibp.pcm_init.i i64 
    push           300        i64 
    pop            mlibp.pcm_init.av_1 i64 
    push           mlibp.pcm_init.i i64 
    push           mlibp.pcm_init.av_1 i64 
    jumpgt         #4980      i64 
#4981: 
    push           &mlibp.pcm_init.size 
    push           33554432   i64 
    addto                     i64 
    push           mlibp.pcm_init.size i64 
    push           8589934592 i64 
    jumpge         #4982      i64 
    push           mlibp.pcm_init.size u64 
    push           &mlibp.allocupper 
    push           mlibp.pcm_init.i i64 
    popptroff                 u64 8 0
    push           mlibp.pcm_init.size u64 
    pop            mlibp.maxmemory u64 
    jump           #4983      
#4982: 
    push           mlibp.pcm_init.i i64 
    push           1          i64 
    sub                       i64 
    pop            mlibp.maxalloccode i64 
    jump           #4980      
#4983: 
#4984: 
    forup          #4981      i64 1
    opnd           mlibp.pcm_init.i 
    opnd           mlibp.pcm_init.av_1 
#4980: 
    push           1          i64 
    pop            mlibp.pcm_setup u8 
#4966: 
    retproc                   
End


Proc mlibp.pcm_getac: i64
    param          mlibp.pcm_getac.size i64 
    procentry                 
    push           mlibp.pcm_getac.size i64 
    push           2048       i64 
    jumpgt         #4986      i64 
    push           &mlibp.sizeindextable 
    push           mlibp.pcm_getac.size i64 
    pushptroff                u8 1 0
    setret                    i64 
    jump           #4987      
#4986: 
    push           mlibp.pcm_getac.size i64 
    push           255        i64 
    add                       i64 
    push           8          i64 
    shr                       i64 
    pop            mlibp.pcm_getac.size i64 
    push           mlibp.pcm_getac.size i64 
    push           2048       i64 
    jumpgt         #4988      i64 
    push           &mlibp.sizeindextable 
    push           mlibp.pcm_getac.size i64 
    pushptroff                u8 1 0
    push           8          i64 
    add                       i64 
    setret                    i64 
    jump           #4987      
#4988: 
    push           mlibp.pcm_getac.size i64 
    push           63         i64 
    add                       i64 
    push           6          i64 
    shr                       i64 
    pop            mlibp.pcm_getac.size i64 
    push           mlibp.pcm_getac.size i64 
    push           2048       i64 
    jumpgt         #4989      i64 
    push           &mlibp.sizeindextable 
    push           mlibp.pcm_getac.size i64 
    pushptroff                u8 1 0
    push           14         i64 
    add                       i64 
    setret                    i64 
    jump           #4987      
#4989: 
    push           mlibp.pcm_getac.size i64 
    push           2048       i64 
    sub                       i64 
    push           2047       i64 
    add                       i64 
    push           2048       i64 
    idiv                      i64 
    push           22         i64 
    add                       i64 
    pop            mlibp.pcm_getac.size i64 
    push           mlibp.pcm_getac.size i64 
    setret                    i64 
    jump           #4987      
#4987: 
    retfn                     i64 
End


Proc mlibp.pcm_newblock: u64
    param          mlibp.pcm_newblock.itemsize i64 
    local          mlibp.pcm_newblock.p u64 
    procentry                 
    push           &mlibp.pcm_newblock.totalheapsize 
    push           2097152    i64 
    addto                     i64 
    push           0          i64 
    pop            mlibp.alloccode i64 
    setargs                   1 0
    push           2097152    i64 
    callfn         &mlibp.allocmem u64 
    pop            mlibp.pcm_newblock.p u64 
    push           mlibp.pcm_newblock.p u64 
    push           0          u64 
    jumpne         #4991      u64 
    setargs                   1 0
    push           "Can't alloc pc heap" u64 
    callproc       &mlibp.abortprogram 
#4991: 
    push           mlibp.pcm_newblock.p u64 
    pop            mlibp.pcheapptr u64 
    push           mlibp.pcm_newblock.p u64 
    push           2097152    i64 
    addrefoff                 u64 1 0
    pop            mlibp.pcheapend u64 
    push           mlibp.pcheapstart u64 
    push           0          u64 
    jumpne         #4992      u64 
    push           mlibp.pcm_newblock.p u64 
    pop            mlibp.pcheapstart u64 
#4992: 
    push           &mlibp.pcheapptr 
    push           mlibp.pcm_newblock.itemsize i64 
    addrefoffto               u64 1 0
    push           mlibp.pcm_newblock.p u64 
    setret                    u64 
    jump           #4993      
#4993: 
    retfn                     u64 
End


Proc mlibp.pcm_round: i64
    param          mlibp.pcm_round.n i64 
    procentry                 
    startmult                 
    push           mlibp.pcm_round.n i64 
    push           2048       i64 
    jumple         #4995      i64 
    push           mlibp.pcm_round.n i64 
    resetmult                 
    jump           #4996      
#4995: 
    push           &mlibp.pcm_round.allocbytes 
    push           &mlibp.sizeindextable 
    push           mlibp.pcm_round.n i64 
    pushptroff                u8 1 0
    pushptroff                i32 4 0
    endmult                   
#4996: 
    setret                    i64 
    jump           #4997      
#4997: 
    retfn                     i64 
End


Proc mlibp.pcm_array: i64
    param          mlibp.pcm_array.n i64 
    local          mlibp.pcm_array.m i64 
    procentry                 
    startmult                 
    push           mlibp.pcm_array.n i64 
    push           2048       i64 
    jumpgt         #4999      i64 
    setargs                   1 0
    push           mlibp.pcm_array.n i64 
    callfn         &mlibp.pcm_round i64 
    resetmult                 
    jump           #5000      
#4999: 
    push           2048       i64 
    pop            mlibp.pcm_array.m i64 
    jump           #5001      
#5002: 
    push           &mlibp.pcm_array.m 
    push           1          i64 
    shlto                     i64 
#5001: 
    push           mlibp.pcm_array.n i64 
    push           mlibp.pcm_array.m i64 
    jumpgt         #5002      i64 
#5003: 
    push           mlibp.pcm_array.m i64 
    endmult                   
#5000: 
    setret                    i64 
    jump           #5004      
#5004: 
    retfn                     i64 
End


Proc mlibp.pcm_printfreelist:
    param          mlibp.pcm_printfreelist.size i64 
    param          mlibp.pcm_printfreelist.p u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Size: "   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mlibp.pcm_printfreelist.size i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #5006      
#5007: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           " "        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   2 0
    push           "h"        u64 
    push           mlibp.pcm_printfreelist.p u64 
    callproc       &msysp.m$print_ptr 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           mlibp.pcm_printfreelist.p u64 
    pushptr                   u64 
    pop            mlibp.pcm_printfreelist.p u64 
#5006: 
    push           mlibp.pcm_printfreelist.p u64 
    jumptrue       #5007      u64 
#5008: 
    setargs                   1 0
    push           ""         u64 
    callproc       &puts      
#5009: 
    retproc                   
End


Proc mlibp.pcm_diags:
    param          mlibp.pcm_diags.caption u64 
    local          mlibp.pcm_diags.m i64 
    local          mlibp.pcm_diags.i i64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "HEAP FREELISTS:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mlibp.pcm_diags.caption u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           16         i64 
    pop            mlibp.pcm_diags.m i64 
#5011: 
    push           1          i64 
    pop            mlibp.pcm_diags.i i64 
#5012: 
    setargs                   2 0
    push           &mlibp.freelist 
    push           mlibp.pcm_diags.i i64 
    pushptroff                u64 8 0
    push           mlibp.pcm_diags.m i64 
    callproc       &mlibp.pcm_printfreelist 
    push           &mlibp.pcm_diags.m 
    push           1          i64 
    shlto                     i64 
#5013: 
    forup          #5012      i64 1
    opnd           mlibp.pcm_diags.i 
    opnd           8          
#5014: 
#5015: 
    retproc                   
End


Proc mlibp.pcm_allocz: u64
    param          mlibp.pcm_allocz.n i64 
    local          mlibp.pcm_allocz.p u64 
    procentry                 
    setargs                   1 0
    push           mlibp.pcm_allocz.n i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            mlibp.pcm_allocz.p u64 
    setargs                   3 0
    push           mlibp.pcm_allocz.n u64 
    push           0          i64 
    push           mlibp.pcm_allocz.p u64 
    callproc       &memset    
    push           mlibp.pcm_allocz.p u64 
    setret                    u64 
    jump           #5017      
#5017: 
    retfn                     u64 
End


Proc mlibp.pcm_copyheapstring: u64
    param          mlibp.pcm_copyheapstring.s u64 
    local          mlibp.pcm_copyheapstring.q u64 
    local          mlibp.pcm_copyheapstring.n i64 
    procentry                 
    push           mlibp.pcm_copyheapstring.s u64 
    push           0          u64 
    jumpne         #5019      u64 
    push           0          u64 
    setret                    u64 
    jump           #5020      
#5019: 
    setargs                   1 0
    push           mlibp.pcm_copyheapstring.s u64 
    callfn         &strlen    i64 
    push           1          i64 
    add                       i64 
    pop            mlibp.pcm_copyheapstring.n i64 
    setargs                   1 0
    push           mlibp.pcm_copyheapstring.n i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            mlibp.pcm_copyheapstring.q u64 
    setargs                   3 0
    push           mlibp.pcm_copyheapstring.n u64 
    push           mlibp.pcm_copyheapstring.s u64 
    push           mlibp.pcm_copyheapstring.q u64 
    callproc       &memcpy    
    push           mlibp.pcm_copyheapstring.q u64 
    setret                    u64 
    jump           #5020      
#5020: 
    retfn                     u64 
End


Proc mlibp.pcm_copyheapstringn: u64
    param          mlibp.pcm_copyheapstringn.s u64 
    param          mlibp.pcm_copyheapstringn.n i64 
    local          mlibp.pcm_copyheapstringn.q u64 
    procentry                 
    push           mlibp.pcm_copyheapstringn.s u64 
    push           0          u64 
    jumpne         #5022      u64 
    push           0          u64 
    setret                    u64 
    jump           #5023      
#5022: 
    setargs                   1 0
    push           mlibp.pcm_copyheapstringn.n i64 
    push           1          i64 
    add                       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            mlibp.pcm_copyheapstringn.q u64 
    setargs                   3 0
    push           mlibp.pcm_copyheapstringn.n u64 
    push           mlibp.pcm_copyheapstringn.s u64 
    push           mlibp.pcm_copyheapstringn.q u64 
    callproc       &memcpy    
    push           0          u64 
    push           mlibp.pcm_copyheapstringn.q u64 
    push           mlibp.pcm_copyheapstringn.n i64 
    popptroff                 u8 1 0
    push           mlibp.pcm_copyheapstringn.q u64 
    setret                    u64 
    jump           #5023      
#5023: 
    retfn                     u64 
End


Proc mlibp.pcm_copyheapblock: u64
    param          mlibp.pcm_copyheapblock.s u64 
    param          mlibp.pcm_copyheapblock.length i64 
    local          mlibp.pcm_copyheapblock.q u64 
    procentry                 
    push           mlibp.pcm_copyheapblock.length i64 
    push           0          i64 
    jumpne         #5025      i64 
    push           0          u64 
    setret                    u64 
    jump           #5026      
#5025: 
    setargs                   1 0
    push           mlibp.pcm_copyheapblock.length i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            mlibp.pcm_copyheapblock.q u64 
    setargs                   3 0
    push           mlibp.pcm_copyheapblock.length u64 
    push           mlibp.pcm_copyheapblock.s u64 
    push           mlibp.pcm_copyheapblock.q u64 
    callproc       &memcpy    
    push           mlibp.pcm_copyheapblock.q u64 
    setret                    u64 
    jump           #5026      
#5026: 
    retfn                     u64 
End


Proc mlibp.addtomemalloc:
    param          mlibp.addtomemalloc.ptr u64 
    param          mlibp.addtomemalloc.size i64 
    local          mlibp.addtomemalloc.i i64 
    procentry                 
#5028: 
    push           1          i64 
    pop            mlibp.addtomemalloc.i i64 
#5029: 
    push           &mlibp.memalloctable 
    push           mlibp.addtomemalloc.i i64 
    pushptroff                u64 8 -8
    push           mlibp.addtomemalloc.ptr u64 
    jumpne         #5030      u64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "ALLOC ERROR:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mlibp.addtomemalloc.ptr u64 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   1 0
    push           "ALREADY ALLOCATED\n\n\n" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           2          i64 
    stop                      
#5030: 
    push           &mlibp.memalloctable 
    push           mlibp.addtomemalloc.i i64 
    pushptroff                u64 8 -8
    push           0          u64 
    jumpne         #5031      u64 
    push           mlibp.addtomemalloc.ptr u64 
    push           &mlibp.memalloctable 
    push           mlibp.addtomemalloc.i i64 
    popptroff                 u64 8 -8
    push           mlibp.addtomemalloc.size i64 
    push           &mlibp.memallocsize 
    push           mlibp.addtomemalloc.i i64 
    popptroff                 i32 4 -4
    jump           #5032      
#5031: 
#5033: 
    forup          #5029      i64 1
    opnd           mlibp.addtomemalloc.i 
    opnd           2          
#5034: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "MEMALLOCTABLE FULL\n\n\n\n" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &mwindowsp.os_getch 
    push           3          i64 
    stop                      
#5032: 
    retproc                   
End


Proc mlibp.removefrommemalloc:
    param          mlibp.removefrommemalloc.ptr u64 
    param          mlibp.removefrommemalloc.size i64 
    local          mlibp.removefrommemalloc.i i64 
    procentry                 
#5036: 
    push           1          i64 
    pop            mlibp.removefrommemalloc.i i64 
#5037: 
    push           &mlibp.memalloctable 
    push           mlibp.removefrommemalloc.i i64 
    pushptroff                u64 8 -8
    push           mlibp.removefrommemalloc.ptr u64 
    jumpne         #5038      u64 
    push           &mlibp.memallocsize 
    push           mlibp.removefrommemalloc.i i64 
    pushptroff                i32 4 -4
    push           mlibp.removefrommemalloc.size i64 
    jumpeq         #5039      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "REMOVE:FOUND" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mlibp.removefrommemalloc.ptr u64 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   1 0
    push           "IN MEMALLOCTABLE, FREESIZE=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mlibp.removefrommemalloc.size i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           ", BUT STORED AS BLOCK SIZE:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mlibp.memallocsize 
    push           mlibp.removefrommemalloc.i i64 
    pushptroff                i32 4 -4
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "MEMSIZE"  u64 
    callproc       &mlibp.abortprogram 
#5039: 
    push           0          u64 
    push           &mlibp.memalloctable 
    push           mlibp.removefrommemalloc.i i64 
    popptroff                 u64 8 -8
    jump           #5040      
#5038: 
#5041: 
    forup          #5037      i64 1
    opnd           mlibp.removefrommemalloc.i 
    opnd           2          
#5042: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "CAN'T FIND" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mlibp.removefrommemalloc.ptr u64 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   1 0
    push           "IN MEMALLOCTABLE" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mlibp.removefrommemalloc.size i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "MEM"      u64 
    callproc       &mlibp.abortprogram 
    push           4          i64 
    stop                      
#5040: 
    retproc                   
End


Proc mlibp.allocmem: u64
    param          mlibp.allocmem.n i64 
    local          mlibp.allocmem.p u64 
    procentry                 
    setargs                   1 0
    push           mlibp.allocmem.n u64 
    callfn         &malloc    u64 
    pop            mlibp.allocmem.p u64 
    push           mlibp.allocmem.p u64 
    jumpfalse      #5044      u64 
    push           mlibp.allocmem.p u64 
    setret                    u64 
    jump           #5045      
#5044: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mlibp.allocmem.n i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           mlibp.memtotal i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Alloc mem failure" u64 
    callproc       &mlibp.abortprogram 
    push           0          u64 
    setret                    u64 
    jump           #5045      
#5045: 
    retfn                     u64 
End


Proc mlibp.reallocmem: u64
    param          mlibp.reallocmem.p u64 
    param          mlibp.reallocmem.n i64 
    procentry                 
    setargs                   2 0
    push           mlibp.reallocmem.n u64 
    push           mlibp.reallocmem.p u64 
    callfn         &realloc   u64 
    pop            mlibp.reallocmem.p u64 
    push           mlibp.reallocmem.p u64 
    jumpfalse      #5047      u64 
    push           mlibp.reallocmem.p u64 
    setret                    u64 
    jump           #5048      
#5047: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mlibp.reallocmem.n i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Realloc mem failure" u64 
    callproc       &mlibp.abortprogram 
    push           0          u64 
    setret                    u64 
    jump           #5048      
#5048: 
    retfn                     u64 
End


Proc mlibp.abortprogram:
    param          mlibp.abortprogram.s u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mlibp.abortprogram.s u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "ABORTING: Press key..." u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           5          i64 
    stop                      
#5050: 
    retproc                   
End


Proc mlibp.getfilesize: i64
    param          mlibp.getfilesize.handlex u64 
    local          mlibp.getfilesize.p u32 
    local          mlibp.getfilesize.size u32 
    procentry                 
    setargs                   1 0
    push           mlibp.getfilesize.handlex u64 
    callfn         &ftell     i32 
    pop            mlibp.getfilesize.p u32 
    setargs                   3 0
    push           2          i64 
    push           0          i64 
    push           mlibp.getfilesize.handlex u64 
    callproc       &fseek     
    setargs                   1 0
    push           mlibp.getfilesize.handlex u64 
    callfn         &ftell     i32 
    pop            mlibp.getfilesize.size u32 
    setargs                   3 0
    push           0          i64 
    push           mlibp.getfilesize.p u32 
    push           mlibp.getfilesize.handlex u64 
    callproc       &fseek     
    push           mlibp.getfilesize.size u32 
    setret                    i64 
    jump           #5052      
#5052: 
    retfn                     i64 
End


Proc mlibp.readrandom:
    param          mlibp.readrandom.handlex u64 
    param          mlibp.readrandom.mem u64 
    param          mlibp.readrandom.offset i64 
    param          mlibp.readrandom.size i64 
    local          mlibp.readrandom.a i64 
    procentry                 
    setargs                   3 0
    push           0          i64 
    push           mlibp.readrandom.offset i64 
    push           mlibp.readrandom.handlex u64 
    callproc       &fseek     
    setargs                   4 0
    push           mlibp.readrandom.handlex u64 
    push           mlibp.readrandom.size u64 
    push           1          u64 
    push           mlibp.readrandom.mem u64 
    callfn         &fread     i64 
    pop            mlibp.readrandom.a i64 
#5054: 
    retproc                   
End


Proc mlibp.writerandom: i64
    param          mlibp.writerandom.handlex u64 
    param          mlibp.writerandom.mem u64 
    param          mlibp.writerandom.offset i64 
    param          mlibp.writerandom.size i64 
    procentry                 
    setargs                   3 0
    push           0          i64 
    push           mlibp.writerandom.offset i64 
    push           mlibp.writerandom.handlex u64 
    callproc       &fseek     
    setargs                   4 0
    push           mlibp.writerandom.handlex u64 
    push           mlibp.writerandom.size u64 
    push           1          u64 
    push           mlibp.writerandom.mem u64 
    callfn         &fwrite    i64 
    setret                    i64 
    jump           #5056      
#5056: 
    retfn                     i64 
End


Proc mlibp.setfilepos: i64
    param          mlibp.setfilepos.file u64 
    param          mlibp.setfilepos.offset i64 
    procentry                 
    setargs                   3 0
    push           0          i64 
    push           mlibp.setfilepos.offset i64 
    push           mlibp.setfilepos.file u64 
    callfn         &fseek     i32 
    setret                    i64 
    jump           #5058      
#5058: 
    retfn                     i64 
End


Proc mlibp.getfilepos: i64
    param          mlibp.getfilepos.file u64 
    procentry                 
    setargs                   1 0
    push           mlibp.getfilepos.file u64 
    callfn         &ftell     i32 
    setret                    i64 
    jump           #5060      
#5060: 
    retfn                     i64 
End


Proc mlibp.readfile: u64
    param          mlibp.readfile.filename u64 
    local          mlibp.readfile.f u64 
    local          mlibp.readfile.size i64 
    local          mlibp.readfile.m u64 
    local          mlibp.readfile.p u64 
    procentry                 
    setargs                   2 0
    push           "rb"       u64 
    push           mlibp.readfile.filename u64 
    callfn         &fopen     u64 
    pop            mlibp.readfile.f u64 
    push           mlibp.readfile.f u64 
    push           0          u64 
    jumpne         #5062      u64 
    push           0          u64 
    setret                    u64 
    jump           #5063      
#5062: 
    setargs                   1 0
    push           mlibp.readfile.f u64 
    callfn         &mlibp.getfilesize i64 
    store          mlibp.readfile.size i64 
    pop            mlibp.rfsize i64 
    setargs                   1 0
    push           mlibp.readfile.size i64 
    push           4          i64 
    add                       u64 
    callfn         &malloc    u64 
    pop            mlibp.readfile.m u64 
    push           mlibp.readfile.m u64 
    push           0          u64 
    jumpne         #5064      u64 
    push           0          u64 
    setret                    u64 
    jump           #5063      
#5064: 
    setargs                   4 0
    push           mlibp.readfile.size i64 
    push           0          i64 
    push           mlibp.readfile.m u64 
    push           mlibp.readfile.f u64 
    callproc       &mlibp.readrandom 
    push           mlibp.readfile.m u64 
    push           mlibp.readfile.size i64 
    addrefoff                 u64 1 0
    pop            mlibp.readfile.p u64 
    push           0          i64 
    push           mlibp.readfile.p u64 
    popptr                    u8 
    push           26         i64 
    push           mlibp.readfile.p u64 
    push           1          i64 
    popptroff                 u8 1 0
    push           0          i64 
    push           mlibp.readfile.p u64 
    push           2          i64 
    popptroff                 u8 1 0
    setargs                   1 0
    push           mlibp.readfile.f u64 
    callproc       &fclose    
    push           mlibp.readfile.m u64 
    setret                    u64 
    jump           #5063      
#5063: 
    retfn                     u64 
End


Proc mlibp.writefile: i64
    param          mlibp.writefile.filename u64 
    param          mlibp.writefile.data u64 
    param          mlibp.writefile.size i64 
    local          mlibp.writefile.f u64 
    local          mlibp.writefile.n i64 
    procentry                 
    setargs                   2 0
    push           "wb"       u64 
    push           mlibp.writefile.filename u64 
    callfn         &fopen     u64 
    pop            mlibp.writefile.f u64 
    push           mlibp.writefile.f u64 
    push           0          u64 
    jumpne         #5066      u64 
    push           0          i64 
    setret                    i64 
    jump           #5067      
#5066: 
    setargs                   4 0
    push           mlibp.writefile.size i64 
    push           0          i64 
    push           mlibp.writefile.data u64 
    push           mlibp.writefile.f u64 
    callfn         &mlibp.writerandom i64 
    pop            mlibp.writefile.n i64 
    setargs                   1 0
    push           mlibp.writefile.f u64 
    callproc       &fclose    
    push           mlibp.writefile.n i64 
    setret                    i64 
    jump           #5067      
#5067: 
    retfn                     i64 
End


Proc mlibp.checkfile: i64
    param          mlibp.checkfile.file u64 
    local          mlibp.checkfile.f u64 
    procentry                 
    setargs                   2 0
    push           "rb"       u64 
    push           mlibp.checkfile.file u64 
    callfn         &fopen     u64 
    store          mlibp.checkfile.f u64 
    jumpfalse      #5069      u64 
    setargs                   1 0
    push           mlibp.checkfile.f u64 
    callproc       &fclose    
    push           1          i64 
    setret                    i64 
    jump           #5070      
#5069: 
    push           0          i64 
    setret                    i64 
    jump           #5070      
#5070: 
    retfn                     i64 
End


Proc mlibp.readlinen:
    param          mlibp.readlinen.handlex u64 
    param          mlibp.readlinen.buffer u64 
    param          mlibp.readlinen.size i64 
    local          mlibp.readlinen.ch i64 
    local          mlibp.readlinen.p u64 
    local          mlibp.readlinen.n i64 
    local          mlibp.readlinen.buff block:100 
    local          mlibp.readlinen.crseen u8 
    procentry                 
    push           mlibp.readlinen.handlex u64 
    push           0          u64 
    jumpne         #5072      u64 
    setargs                   0 0
    callfn         &mwindowsp.os_getstdin u64 
    pop            mlibp.readlinen.handlex u64 
#5072: 
    push           mlibp.readlinen.handlex u64 
    push           0          u64 
    jumpne         #5073      u64 
    push           0          i64 
    pop            mlibp.readlinen.n i64 
    push           mlibp.readlinen.buffer u64 
    pop            mlibp.readlinen.p u64 
#5074: 
    setargs                   0 0
    callfn         &getchar   i32 
    pop            mlibp.readlinen.ch i64 
    push           mlibp.readlinen.ch i64 
    push           13         i64 
    jumpeq         #5075      i64 
    push           mlibp.readlinen.ch i64 
    push           10         i64 
    jumpeq         #5075      i64 
    push           mlibp.readlinen.ch i64 
    push           -1         i64 
    jumpne         #5076      i64 
#5075: 
    push           0          u64 
    push           mlibp.readlinen.p u64 
    popptr                    u8 
    jump           #5077      
#5076: 
    push           mlibp.readlinen.ch u64 
    push           &mlibp.readlinen.p 
    loadincr                  u64 1
    popptr                    u8 
    push           &mlibp.readlinen.n 
    incr                      i64 1
    push           mlibp.readlinen.n i64 
    push           mlibp.readlinen.size i64 
    push           2          i64 
    sub                       i64 
    jumplt         #5078      i64 
    push           0          u64 
    push           mlibp.readlinen.p u64 
    popptr                    u8 
    jump           #5077      
#5078: 
    jump           #5074      
#5079: 
#5073: 
    push           0          u64 
    push           mlibp.readlinen.buffer u64 
    popptr                    u8 
    setargs                   3 0
    push           mlibp.readlinen.handlex u64 
    push           mlibp.readlinen.size i64 
    push           2          i64 
    sub                       i64 
    push           mlibp.readlinen.buffer u64 
    callfn         &fgets     u64 
    push           0          u64 
    jumpne         #5080      u64 
    jump           #5077      
#5080: 
    setargs                   1 0
    push           mlibp.readlinen.buffer u64 
    callfn         &strlen    i64 
    pop            mlibp.readlinen.n i64 
    push           mlibp.readlinen.n i64 
    push           0          i64 
    jumpne         #5081      i64 
    jump           #5077      
#5081: 
    push           mlibp.readlinen.buffer u64 
    push           mlibp.readlinen.n i64 
    addrefoff                 u64 1 -1
    pop            mlibp.readlinen.p u64 
    push           0          i64 
    pop            mlibp.readlinen.crseen u8 
    jump           #5082      
#5083: 
    push           mlibp.readlinen.p u64 
    pushptr                   u8 
    push           13         i64 
    jumpeq         #5084      i64 
    push           mlibp.readlinen.p u64 
    pushptr                   u8 
    push           10         i64 
    jumpne         #5085      i64 
#5084: 
    push           1          i64 
    pop            mlibp.readlinen.crseen u8 
#5085: 
    push           0          u64 
    push           &mlibp.readlinen.p 
    loaddecr                  u64 1
    popptr                    u8 
#5082: 
    push           mlibp.readlinen.p u64 
    push           mlibp.readlinen.buffer u64 
    jumplt         #5086      u64 
    push           mlibp.readlinen.p u64 
    pushptr                   u8 
    push           13         i64 
    jumpeq         #5083      i64 
    push           mlibp.readlinen.p u64 
    pushptr                   u8 
    push           10         i64 
    jumpeq         #5083      i64 
#5086: 
#5087: 
    push           mlibp.readlinen.crseen u8 
    jumptrue       #5088      i64 
    push           mlibp.readlinen.n i64 
    push           4          i64 
    add                       i64 
    push           mlibp.readlinen.size i64 
    jumple         #5088      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mlibp.readlinen.size i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           mlibp.readlinen.n i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "line too long" u64 
    callproc       &mlibp.abortprogram 
#5088: 
#5077: 
    retproc                   
End


Proc mlibp.iconvlcn:
    param          mlibp.iconvlcn.s u64 
    param          mlibp.iconvlcn.n i64 
    local          mlibp.iconvlcn.av_1 i64 
    procentry                 
#5090: 
    push           mlibp.iconvlcn.n i64 
    pop            mlibp.iconvlcn.av_1 i64 
    push           mlibp.iconvlcn.av_1 i64 
    push           0          i64 
    jumple         #5091      i64 
#5092: 
    setargs                   1 0
    push           mlibp.iconvlcn.s u64 
    pushptr                   u8 
    callfn         &tolower   i32 
    push           mlibp.iconvlcn.s u64 
    popptr                    u8 
    push           &mlibp.iconvlcn.s 
    incr                      u64 1
#5093: 
    to             #5092      
    opnd           mlibp.iconvlcn.av_1 
#5091: 
#5094: 
    retproc                   
End


Proc mlibp.iconvucn:
    param          mlibp.iconvucn.s u64 
    param          mlibp.iconvucn.n i64 
    local          mlibp.iconvucn.av_1 i64 
    procentry                 
#5096: 
    push           mlibp.iconvucn.n i64 
    pop            mlibp.iconvucn.av_1 i64 
    push           mlibp.iconvucn.av_1 i64 
    push           0          i64 
    jumple         #5097      i64 
#5098: 
    setargs                   1 0
    push           mlibp.iconvucn.s u64 
    pushptr                   u8 
    callfn         &toupper   i32 
    push           mlibp.iconvucn.s u64 
    popptr                    u8 
    push           &mlibp.iconvucn.s 
    incr                      u64 1
#5099: 
    to             #5098      
    opnd           mlibp.iconvucn.av_1 
#5097: 
#5100: 
    retproc                   
End


Proc mlibp.convlcstring: u64
    param          mlibp.convlcstring.s u64 
    local          mlibp.convlcstring.s0 u64 
    procentry                 
    push           mlibp.convlcstring.s u64 
    pop            mlibp.convlcstring.s0 u64 
    jump           #5102      
#5103: 
    setargs                   1 0
    push           mlibp.convlcstring.s u64 
    pushptr                   u8 
    callfn         &tolower   i32 
    push           mlibp.convlcstring.s u64 
    popptr                    u8 
    push           &mlibp.convlcstring.s 
    incr                      u64 1
#5102: 
    push           mlibp.convlcstring.s u64 
    pushptr                   u8 
    jumptrue       #5103      u64 
#5104: 
    push           mlibp.convlcstring.s0 u64 
    setret                    u64 
    jump           #5105      
#5105: 
    retfn                     u64 
End


Proc mlibp.convucstring: u64
    param          mlibp.convucstring.s u64 
    local          mlibp.convucstring.s0 u64 
    procentry                 
    push           mlibp.convucstring.s u64 
    pop            mlibp.convucstring.s0 u64 
    jump           #5107      
#5108: 
    setargs                   1 0
    push           mlibp.convucstring.s u64 
    pushptr                   u8 
    callfn         &toupper   i32 
    push           mlibp.convucstring.s u64 
    popptr                    u8 
    push           &mlibp.convucstring.s 
    incr                      u64 1
#5107: 
    push           mlibp.convucstring.s u64 
    pushptr                   u8 
    jumptrue       #5108      u64 
#5109: 
    push           mlibp.convucstring.s0 u64 
    setret                    u64 
    jump           #5110      
#5110: 
    retfn                     u64 
End


Proc mlibp.changeext: u64
    param          mlibp.changeext.s u64 
    param          mlibp.changeext.newext u64 
    local          mlibp.changeext.newext2 block:32 
    local          mlibp.changeext.sext u64 
    local          mlibp.changeext.n i64 
    procentry                 
    setargs                   2 0
    push           mlibp.changeext.s u64 
    push           &mlibp.changeext.newfile 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcpy    
    push           mlibp.changeext.newext u64 
    pushptr                   u8 
    push           0          u64 
    casejumpeq     #5112      u64 0
    push           46         u64 
    casejumpeq     #5113      u64 0
    popstack                  u64 
    jump           #5114      
#5112: 
    push           0          u64 
    push           &mlibp.changeext.newext2 
    push           1          i64 
    popptroff                 u8 1 -1
    push           0          u64 
    push           &mlibp.changeext.newext2 
    push           2          i64 
    popptroff                 u8 1 -1
    jump           #5115      
#5113: 
    setargs                   2 0
    push           mlibp.changeext.newext u64 
    push           &mlibp.changeext.newext2 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcpy    
    jump           #5115      
#5114: 
    setargs                   2 0
    push           "."        u64 
    push           &mlibp.changeext.newext2 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcpy    
    setargs                   2 0
    push           mlibp.changeext.newext u64 
    push           &mlibp.changeext.newext2 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcat    
#5115: 
    setargs                   2 0
    push           1          i64 
    push           mlibp.changeext.s u64 
    callfn         &mlibp.extractext u64 
    pop            mlibp.changeext.sext u64 
    push           mlibp.changeext.sext u64 
    pushptr                   u8 
    push           0          u64 
    casejumpeq     #5116      u64 0
    push           46         u64 
    casejumpeq     #5117      u64 0
    popstack                  u64 
    jump           #5118      
#5116: 
    setargs                   2 0
    push           &mlibp.changeext.newext2 
    push           0          
    addrefoff                 u8 1 0
    push           &mlibp.changeext.newfile 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcat    
    jump           #5119      
#5117: 
    setargs                   2 0
    push           &mlibp.changeext.newext2 
    push           1          
    addrefoff                 u8 1 0
    push           &mlibp.changeext.newfile 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcat    
    jump           #5119      
#5118: 
    push           mlibp.changeext.sext u64 
    push           mlibp.changeext.s u64 
    subref                    i64 1
    push           2          i64 
    sub                       i64 
    pop            mlibp.changeext.n i64 
    setargs                   2 0
    push           &mlibp.changeext.newext2 
    push           0          
    addrefoff                 u8 1 0
    push           &mlibp.changeext.newfile 
    push           0          
    addrefoff                 u8 1 0
    push           mlibp.changeext.n i64 
    addrefoff                 u64 1 1
    callproc       &strcpy    
#5119: 
    push           &mlibp.changeext.newfile 
    push           0          
    addrefoff                 u8 1 0
    setret                    u64 
    jump           #5120      
#5120: 
    retfn                     u64 
End


Proc mlibp.extractext: u64
    param          mlibp.extractext.s u64 
    param          mlibp.extractext.period i64 
    local          mlibp.extractext.t u64 
    local          mlibp.extractext.u u64 
    procentry                 
    setargs                   1 0
    push           mlibp.extractext.s u64 
    callfn         &mlibp.extractfile u64 
    pop            mlibp.extractext.t u64 
    push           mlibp.extractext.t u64 
    pushptr                   u8 
    push           0          i64 
    jumpne         #5122      i64 
    push           ""         u64 
    setret                    u64 
    jump           #5123      
#5122: 
    push           mlibp.extractext.t u64 
    setargs                   1 0
    push           mlibp.extractext.t u64 
    callfn         &strlen    i64 
    addrefoff                 u64 1 -1
    pop            mlibp.extractext.u u64 
    jump           #5124      
#5125: 
    push           mlibp.extractext.u u64 
    pushptr                   u8 
    push           46         u64 
    jumpne         #5126      u64 
    push           mlibp.extractext.u u64 
    push           1          i64 
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #5127      i64 
    startmult                 
    push           mlibp.extractext.period i64 
    jumpfalse      #5128      i64 
    push           "."        u64 
    resetmult                 
    jump           #5129      
#5128: 
    push           ""         u64 
    endmult                   
#5129: 
    setret                    u64 
    jump           #5123      
#5127: 
    push           mlibp.extractext.u u64 
    push           1          i64 
    addrefoff                 u64 1 0
    setret                    u64 
    jump           #5123      
#5126: 
    push           &mlibp.extractext.u 
    decr                      u64 1
#5124: 
    push           mlibp.extractext.u u64 
    push           mlibp.extractext.t u64 
    jumpge         #5125      u64 
#5130: 
    push           ""         u64 
    setret                    u64 
    jump           #5123      
#5123: 
    retfn                     u64 
End


Proc mlibp.extractpath: u64
    param          mlibp.extractpath.s u64 
    local          mlibp.extractpath.t u64 
    local          mlibp.extractpath.n i64 
    procentry                 
    push           mlibp.extractpath.s u64 
    setargs                   1 0
    push           mlibp.extractpath.s u64 
    callfn         &strlen    i64 
    addrefoff                 u64 1 -1
    pop            mlibp.extractpath.t u64 
    jump           #5132      
#5133: 
    push           mlibp.extractpath.t u64 
    pushptr                   u8 
    switch         #5134      47 92
    opnd           #5135      
#5134: 
    switchlabel    #5136      
    switchlabel    #5135      
    switchlabel    #5135      
    switchlabel    #5135      
    switchlabel    #5135      
    switchlabel    #5135      
    switchlabel    #5135      
    switchlabel    #5135      
    switchlabel    #5135      
    switchlabel    #5135      
    switchlabel    #5135      
    switchlabel    #5136      
    switchlabel    #5135      
    switchlabel    #5135      
    switchlabel    #5135      
    switchlabel    #5135      
    switchlabel    #5135      
    switchlabel    #5135      
    switchlabel    #5135      
    switchlabel    #5135      
    switchlabel    #5135      
    switchlabel    #5135      
    switchlabel    #5135      
    switchlabel    #5135      
    switchlabel    #5135      
    switchlabel    #5135      
    switchlabel    #5135      
    switchlabel    #5135      
    switchlabel    #5135      
    switchlabel    #5135      
    switchlabel    #5135      
    switchlabel    #5135      
    switchlabel    #5135      
    switchlabel    #5135      
    switchlabel    #5135      
    switchlabel    #5135      
    switchlabel    #5135      
    switchlabel    #5135      
    switchlabel    #5135      
    switchlabel    #5135      
    switchlabel    #5135      
    switchlabel    #5135      
    switchlabel    #5135      
    switchlabel    #5135      
    switchlabel    #5135      
    switchlabel    #5136      
    endswitch                 
#5136: 
    push           mlibp.extractpath.t u64 
    push           mlibp.extractpath.s u64 
    subref                    i64 1
    push           1          i64 
    add                       i64 
    pop            mlibp.extractpath.n i64 
    setargs                   3 0
    push           mlibp.extractpath.n u64 
    push           mlibp.extractpath.s u64 
    push           &mlibp.extractpath.str 
    callproc       &memcpy    
    push           0          u64 
    push           &mlibp.extractpath.str 
    push           mlibp.extractpath.n i64 
    popptroff                 u8 1 0
    push           &mlibp.extractpath.str 
    setret                    u64 
    jump           #5137      
    jump           #5138      
#5135: 
#5138: 
    push           &mlibp.extractpath.t 
    decr                      u64 1
#5132: 
    push           mlibp.extractpath.t u64 
    push           mlibp.extractpath.s u64 
    jumpge         #5133      u64 
#5139: 
    push           ""         u64 
    setret                    u64 
    jump           #5137      
#5137: 
    retfn                     u64 
End


Proc mlibp.extractfile: u64
    param          mlibp.extractfile.s u64 
    local          mlibp.extractfile.t u64 
    procentry                 
    setargs                   1 0
    push           mlibp.extractfile.s u64 
    callfn         &mlibp.extractpath u64 
    pop            mlibp.extractfile.t u64 
    push           mlibp.extractfile.t u64 
    pushptr                   u8 
    push           0          i64 
    jumpne         #5141      i64 
    push           mlibp.extractfile.s u64 
    setret                    u64 
    jump           #5142      
#5141: 
    push           mlibp.extractfile.s u64 
    setargs                   1 0
    push           mlibp.extractfile.t u64 
    callfn         &strlen    i64 
    addrefoff                 u64 1 0
    setret                    u64 
    jump           #5142      
#5142: 
    retfn                     u64 
End


Proc mlibp.extractbasefile: u64
    param          mlibp.extractbasefile.s u64 
    local          mlibp.extractbasefile.f u64 
    local          mlibp.extractbasefile.e u64 
    local          mlibp.extractbasefile.n i64 
    local          mlibp.extractbasefile.flen i64 
    procentry                 
    setargs                   1 0
    push           mlibp.extractbasefile.s u64 
    callfn         &mlibp.extractfile u64 
    pop            mlibp.extractbasefile.f u64 
    setargs                   1 0
    push           mlibp.extractbasefile.f u64 
    callfn         &strlen    i64 
    pop            mlibp.extractbasefile.flen i64 
    push           mlibp.extractbasefile.flen i64 
    push           0          i64 
    jumpne         #5144      i64 
    push           ""         u64 
    setret                    u64 
    jump           #5145      
#5144: 
    setargs                   2 0
    push           0          i64 
    push           mlibp.extractbasefile.f u64 
    callfn         &mlibp.extractext u64 
    pop            mlibp.extractbasefile.e u64 
    push           mlibp.extractbasefile.e u64 
    pushptr                   u8 
    jumpfalse      #5146      u64 
    push           mlibp.extractbasefile.flen i64 
    setargs                   1 0
    push           mlibp.extractbasefile.e u64 
    callfn         &strlen    i64 
    sub                       i64 
    push           1          i64 
    sub                       i64 
    pop            mlibp.extractbasefile.n i64 
    setargs                   3 0
    push           mlibp.extractbasefile.n u64 
    push           mlibp.extractbasefile.f u64 
    push           &mlibp.extractbasefile.str 
    callproc       &memcpy    
    push           0          u64 
    push           &mlibp.extractbasefile.str 
    push           mlibp.extractbasefile.n i64 
    popptroff                 u8 1 0
    push           &mlibp.extractbasefile.str 
    setret                    u64 
    jump           #5145      
#5146: 
    push           mlibp.extractbasefile.f u64 
    push           mlibp.extractbasefile.flen i64 
    pushptroff                u8 1 -1
    push           46         u64 
    jumpne         #5147      u64 
    setargs                   3 0
    push           mlibp.extractbasefile.flen i64 
    push           1          i64 
    sub                       u64 
    push           mlibp.extractbasefile.f u64 
    push           &mlibp.extractbasefile.str 
    callproc       &memcpy    
    push           0          u64 
    push           &mlibp.extractbasefile.str 
    push           mlibp.extractbasefile.flen i64 
    popptroff                 u8 1 -1
    push           &mlibp.extractbasefile.str 
    setret                    u64 
    jump           #5145      
#5147: 
    push           mlibp.extractbasefile.f u64 
    setret                    u64 
    jump           #5145      
#5145: 
    retfn                     u64 
End


Proc mlibp.addext: u64
    param          mlibp.addext.s u64 
    param          mlibp.addext.newext u64 
    local          mlibp.addext.sext u64 
    procentry                 
    setargs                   2 0
    push           1          i64 
    push           mlibp.addext.s u64 
    callfn         &mlibp.extractext u64 
    pop            mlibp.addext.sext u64 
    push           mlibp.addext.sext u64 
    pushptr                   u8 
    push           0          i64 
    jumpne         #5149      i64 
    setargs                   2 0
    push           mlibp.addext.newext u64 
    push           mlibp.addext.s u64 
    callfn         &mlibp.changeext u64 
    setret                    u64 
    jump           #5150      
#5149: 
    push           mlibp.addext.s u64 
    setret                    u64 
    jump           #5150      
#5150: 
    retfn                     u64 
End


Proc mlibp.alloctable: u64
    param          mlibp.alloctable.n i64 
    param          mlibp.alloctable.size i64 
    local          mlibp.alloctable.p u64 
    procentry                 
    setargs                   1 0
    push           mlibp.alloctable.n i64 
    push           1          i64 
    add                       i64 
    push           mlibp.alloctable.size i64 
    mul                       u64 
    callfn         &malloc    u64 
    pop            mlibp.alloctable.p u64 
    push           mlibp.alloctable.p u64 
    jumptrue       #5152      u64 
    setargs                   1 0
    push           "Alloctable failure" u64 
    callproc       &mlibp.abortprogram 
#5152: 
    push           mlibp.alloctable.p u64 
    setret                    u64 
    jump           #5153      
#5153: 
    retfn                     u64 
End


Proc mlibp.zalloctable: u64
    param          mlibp.zalloctable.n i64 
    param          mlibp.zalloctable.size i64 
    local          mlibp.zalloctable.p u64 
    procentry                 
    setargs                   2 0
    push           mlibp.zalloctable.size i64 
    push           mlibp.zalloctable.n i64 
    callfn         &mlibp.alloctable u64 
    pop            mlibp.zalloctable.p u64 
    setargs                   2 0
    push           mlibp.zalloctable.n i64 
    push           1          i64 
    add                       i64 
    push           mlibp.zalloctable.size i64 
    mul                       i64 
    push           mlibp.zalloctable.p u64 
    callproc       &mlibp.pcm_clearmem 
    push           mlibp.zalloctable.p u64 
    setret                    u64 
    jump           #5155      
#5155: 
    retfn                     u64 
End


Proc mlibp.checkfreelists:
    param          mlibp.checkfreelists.s u64 
    local          mlibp.checkfreelists.p u64 
    local          mlibp.checkfreelists.q u64 
    local          mlibp.checkfreelists.aa i64 
    local          mlibp.checkfreelists.i i64 
    procentry                 
#5157: 
    push           2          i64 
    pop            mlibp.checkfreelists.i i64 
#5158: 
    push           &mlibp.freelist 
    push           mlibp.checkfreelists.i i64 
    pushptroff                u64 8 0
    pop            mlibp.checkfreelists.p u64 
    jump           #5159      
#5160: 
    push           mlibp.checkfreelists.p i64 
    pop            mlibp.checkfreelists.aa i64 
    push           mlibp.checkfreelists.aa i64 
    push           4294967295 i64 
    jumpgt         #5161      i64 
    push           mlibp.checkfreelists.aa i64 
    push           100        i64 
    jumpge         #5162      i64 
#5161: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mlibp.checkfreelists.s u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "FREE LIST ERROR" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mlibp.checkfreelists.i i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           mlibp.checkfreelists.p u64 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   1 0
    push           mlibp.checkfreelists.q u64 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#5162: 
    push           mlibp.checkfreelists.p u64 
    pop            mlibp.checkfreelists.q u64 
    push           mlibp.checkfreelists.p u64 
    pushptr                   u64 
    pop            mlibp.checkfreelists.p u64 
#5159: 
    push           mlibp.checkfreelists.p u64 
    jumptrue       #5160      u64 
#5163: 
#5164: 
    forup          #5158      i64 1
    opnd           mlibp.checkfreelists.i 
    opnd           2          
#5165: 
#5166: 
    retproc                   
End


Proc mlibp.pcm_alloc32: u64
    local          mlibp.pcm_alloc32.p u64 
    procentry                 
    push           32         i64 
    pop            mlibp.allocbytes i64 
    push           &mlibp.smallmemtotal 
    push           32         i64 
    addto                     i64 
    push           &mlibp.freelist 
    push           2          i64 
    pushptroff                u64 8 0
    store          mlibp.pcm_alloc32.p u64 
    jumpfalse      #5168      u64 
    push           &mlibp.freelist 
    push           2          i64 
    pushptroff                u64 8 0
    pushptr                   u64 
    push           &mlibp.freelist 
    push           2          i64 
    popptroff                 u64 8 0
    push           mlibp.pcm_alloc32.p u64 
    setret                    u64 
    jump           #5169      
#5168: 
    setargs                   1 0
    push           32         i64 
    callfn         &mlibp.pcm_alloc u64 
    setret                    u64 
    jump           #5169      
#5169: 
    retfn                     u64 
End


Proc mlibp.pcm_free32:
    param          mlibp.pcm_free32.p u64 
    procentry                 
    push           &mlibp.smallmemtotal 
    push           32         i64 
    subto                     i64 
    push           &mlibp.freelist 
    push           2          i64 
    pushptroff                u64 8 0
    push           mlibp.pcm_free32.p u64 
    popptr                    u64 
    push           mlibp.pcm_free32.p u64 
    push           &mlibp.freelist 
    push           2          i64 
    popptroff                 u64 8 0
#5171: 
    retproc                   
End


Proc mlibp.outbyte:
    param          mlibp.outbyte.f u64 
    param          mlibp.outbyte.x i64 
    procentry                 
    setargs                   4 0
    push           mlibp.outbyte.f u64 
    push           1          u64 
    push           1          u64 
    push           &mlibp.outbyte.x 
    callproc       &fwrite    
#5173: 
    retproc                   
End


Proc mlibp.outword16:
    param          mlibp.outword16.f u64 
    param          mlibp.outword16.x u64 
    procentry                 
    setargs                   4 0
    push           mlibp.outword16.f u64 
    push           1          u64 
    push           2          u64 
    push           &mlibp.outword16.x 
    callproc       &fwrite    
#5175: 
    retproc                   
End


Proc mlibp.outword:
    param          mlibp.outword.f u64 
    param          mlibp.outword.x u64 
    procentry                 
    setargs                   4 0
    push           mlibp.outword.f u64 
    push           1          u64 
    push           4          u64 
    push           &mlibp.outword.x 
    callproc       &fwrite    
#5177: 
    retproc                   
End


Proc mlibp.outword64:
    param          mlibp.outword64.f u64 
    param          mlibp.outword64.x u64 
    procentry                 
    setargs                   4 0
    push           mlibp.outword64.f u64 
    push           1          u64 
    push           8          u64 
    push           &mlibp.outword64.x 
    callproc       &fwrite    
#5179: 
    retproc                   
End


Proc mlibp.myeof: i64
    param          mlibp.myeof.f u64 
    local          mlibp.myeof.c i64 
    procentry                 
    setargs                   1 0
    push           mlibp.myeof.f u64 
    callfn         &fgetc     i32 
    pop            mlibp.myeof.c i64 
    push           mlibp.myeof.c i64 
    push           -1         i64 
    jumpne         #5181      i64 
    push           1          i64 
    setret                    i64 
    jump           #5182      
#5181: 
    setargs                   2 0
    push           mlibp.myeof.f u64 
    push           mlibp.myeof.c i64 
    callproc       &ungetc    
    push           0          i64 
    setret                    i64 
    jump           #5182      
#5182: 
    retfn                     i64 
End


Proc mlibp.pcm_smallallocz: u64
    param          mlibp.pcm_smallallocz.n i64 
    local          mlibp.pcm_smallallocz.p u64 
    procentry                 
    push           &mlibp.allocupper 
    push           &mlibp.sizeindextable 
    push           mlibp.pcm_smallallocz.n i64 
    pushptroff                u8 1 0
    store          mlibp.alloccode i64 
    pushptroff                i64 8 0
    pop            mlibp.allocbytes i64 
    push           mlibp.pcheapptr u64 
    pop            mlibp.pcm_smallallocz.p u64 
    push           &mlibp.pcheapptr 
    push           mlibp.allocbytes i64 
    addrefoffto               u64 1 0
    push           mlibp.pcheapptr u64 
    push           mlibp.pcheapend u64 
    jumplt         #5184      u64 
    setargs                   1 0
    push           mlibp.allocbytes i64 
    callfn         &mlibp.pcm_newblock u64 
    pop            mlibp.pcm_smallallocz.p u64 
    setargs                   3 0
    push           mlibp.pcm_smallallocz.n u64 
    push           0          i64 
    push           mlibp.pcm_smallallocz.p u64 
    callproc       &memset    
    push           mlibp.pcm_smallallocz.p u64 
    setret                    u64 
    jump           #5185      
#5184: 
    setargs                   3 0
    push           mlibp.pcm_smallallocz.n u64 
    push           0          i64 
    push           mlibp.pcm_smallallocz.p u64 
    callproc       &memset    
    push           mlibp.pcm_smallallocz.p u64 
    setret                    u64 
    jump           #5185      
#5185: 
    retfn                     u64 
End


Proc mlibp.pcm_smallalloc: u64
    param          mlibp.pcm_smallalloc.n i64 
    local          mlibp.pcm_smallalloc.p u64 
    procentry                 
    push           &mlibp.allocupper 
    push           &mlibp.sizeindextable 
    push           mlibp.pcm_smallalloc.n i64 
    pushptroff                u8 1 0
    store          mlibp.alloccode i64 
    pushptroff                i64 8 0
    pop            mlibp.allocbytes i64 
    push           mlibp.pcheapptr u64 
    pop            mlibp.pcm_smallalloc.p u64 
    push           &mlibp.pcheapptr 
    push           mlibp.allocbytes i64 
    addrefoffto               u64 1 0
    push           mlibp.pcheapptr u64 
    push           mlibp.pcheapend u64 
    jumplt         #5187      u64 
    setargs                   1 0
    push           mlibp.allocbytes i64 
    callfn         &mlibp.pcm_newblock u64 
    pop            mlibp.pcm_smallalloc.p u64 
    push           mlibp.pcm_smallalloc.p u64 
    setret                    u64 
    jump           #5188      
#5187: 
    push           mlibp.pcm_smallalloc.p u64 
    setret                    u64 
    jump           #5188      
#5188: 
    retfn                     u64 
End


Proc mlibp.strbuffer_add:
    param          mlibp.strbuffer_add.dest u64 
    param          mlibp.strbuffer_add.s u64 
    param          mlibp.strbuffer_add.n i64 
    local          mlibp.strbuffer_add.newlen i64 
    local          mlibp.strbuffer_add.oldlen i64 
    local          mlibp.strbuffer_add.newptr u64 
    procentry                 
    push           mlibp.strbuffer_add.n i64 
    push           0          i64 
    jumpne         #5190      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "N=0"      u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#5190: 
    push           mlibp.strbuffer_add.n i64 
    push           -1         i64 
    jumpne         #5191      i64 
    setargs                   1 0
    push           mlibp.strbuffer_add.s u64 
    callfn         &strlen    i64 
    pop            mlibp.strbuffer_add.n i64 
#5191: 
    push           mlibp.strbuffer_add.dest u64 
    push           8          
    pushptroff                i32 1 0
    pop            mlibp.strbuffer_add.oldlen i64 
    push           mlibp.strbuffer_add.oldlen i64 
    push           0          i64 
    jumpne         #5192      i64 
    setargs                   1 0
    push           mlibp.strbuffer_add.n i64 
    push           1          i64 
    add                       i64 
    callfn         &mlibp.pcm_alloc u64 
    push           mlibp.strbuffer_add.dest u64 
    push           0          
    popptroff                 u64 1 0
    push           mlibp.allocbytes i64 
    push           mlibp.strbuffer_add.dest u64 
    push           12         
    popptroff                 i32 1 0
    push           mlibp.strbuffer_add.n i64 
    push           mlibp.strbuffer_add.dest u64 
    push           8          
    popptroff                 i32 1 0
    setargs                   3 0
    push           mlibp.strbuffer_add.n u64 
    push           mlibp.strbuffer_add.s u64 
    push           mlibp.strbuffer_add.dest u64 
    pushptr                   u64 
    callproc       &memcpy    
    push           0          u64 
    push           mlibp.strbuffer_add.dest u64 
    pushptr                   u64 
    push           mlibp.strbuffer_add.n i64 
    popptroff                 u8 1 0
    jump           #5193      
#5192: 
    push           mlibp.strbuffer_add.oldlen i64 
    push           mlibp.strbuffer_add.n i64 
    add                       i64 
    pop            mlibp.strbuffer_add.newlen i64 
    push           mlibp.strbuffer_add.newlen i64 
    push           1          i64 
    add                       i64 
    push           mlibp.strbuffer_add.dest u64 
    push           12         
    pushptroff                i32 1 0
    jumple         #5194      i64 
    setargs                   1 0
    push           mlibp.strbuffer_add.newlen i64 
    push           1          i64 
    add                       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            mlibp.strbuffer_add.newptr u64 
    setargs                   3 0
    push           mlibp.strbuffer_add.oldlen u64 
    push           mlibp.strbuffer_add.dest u64 
    pushptr                   u64 
    push           mlibp.strbuffer_add.newptr u64 
    callproc       &memcpy    
    push           mlibp.strbuffer_add.newptr u64 
    push           mlibp.strbuffer_add.dest u64 
    push           0          
    popptroff                 u64 1 0
    push           mlibp.allocbytes i64 
    push           mlibp.strbuffer_add.dest u64 
    push           12         
    popptroff                 i32 1 0
#5194: 
    setargs                   3 0
    push           mlibp.strbuffer_add.n u64 
    push           mlibp.strbuffer_add.s u64 
    push           mlibp.strbuffer_add.dest u64 
    pushptr                   u64 
    push           mlibp.strbuffer_add.oldlen i64 
    addrefoff                 u64 1 0
    callproc       &memcpy    
    push           0          u64 
    push           mlibp.strbuffer_add.dest u64 
    pushptr                   u64 
    push           mlibp.strbuffer_add.newlen i64 
    popptroff                 u8 1 0
    push           mlibp.strbuffer_add.newlen i64 
    push           mlibp.strbuffer_add.dest u64 
    push           8          
    popptroff                 i32 1 0
#5193: 
    retproc                   
End


Proc mlibp.gs_init:
    param          mlibp.gs_init.dest u64 
    procentry                 
    setargs                   2 0
    push           16         i64 
    push           mlibp.gs_init.dest u64 
    callproc       &mlibp.pcm_clearmem 
#5196: 
    retproc                   
End


Proc mlibp.gs_free:
    param          mlibp.gs_free.dest u64 
    procentry                 
    push           mlibp.gs_free.dest u64 
    push           12         
    pushptroff                i32 1 0
    jumpfalse      #5198      i64 
    setargs                   2 0
    push           mlibp.gs_free.dest u64 
    push           12         
    pushptroff                i32 1 0
    push           mlibp.gs_free.dest u64 
    pushptr                   u64 
    callproc       &mlibp.pcm_free 
#5198: 
#5199: 
    retproc                   
End


Proc mlibp.gs_str:
    param          mlibp.gs_str.dest u64 
    param          mlibp.gs_str.s u64 
    procentry                 
    setargs                   3 0
    push           -1         i64 
    push           mlibp.gs_str.s u64 
    push           mlibp.gs_str.dest u64 
    callproc       &mlibp.strbuffer_add 
#5201: 
    retproc                   
End


Proc mlibp.gs_char:
    param          mlibp.gs_char.dest u64 
    param          mlibp.gs_char.c i64 
    local          mlibp.gs_char.s block:16 
    procentry                 
    push           mlibp.gs_char.c u64 
    push           &mlibp.gs_char.s 
    push           1          i64 
    popptroff                 u8 1 -1
    push           0          u64 
    push           &mlibp.gs_char.s 
    push           2          i64 
    popptroff                 u8 1 -1
    setargs                   3 0
    push           1          i64 
    push           &mlibp.gs_char.s 
    push           mlibp.gs_char.dest u64 
    callproc       &mlibp.strbuffer_add 
#5203: 
    retproc                   
End


Proc mlibp.gs_strn:
    param          mlibp.gs_strn.dest u64 
    param          mlibp.gs_strn.s u64 
    param          mlibp.gs_strn.length i64 
    procentry                 
    setargs                   3 0
    push           mlibp.gs_strn.length i64 
    push           mlibp.gs_strn.s u64 
    push           mlibp.gs_strn.dest u64 
    callproc       &mlibp.strbuffer_add 
#5205: 
    retproc                   
End


Proc mlibp.gs_strvar:
    param          mlibp.gs_strvar.dest u64 
    param          mlibp.gs_strvar.s u64 
    procentry                 
    setargs                   3 0
    push           -1         i64 
    push           mlibp.gs_strvar.s u64 
    pushptr                   u64 
    push           mlibp.gs_strvar.dest u64 
    callproc       &mlibp.strbuffer_add 
#5207: 
    retproc                   
End


Proc mlibp.gs_strint:
    param          mlibp.gs_strint.dest u64 
    param          mlibp.gs_strint.a i64 
    procentry                 
    setargs                   3 0
    push           -1         i64 
    setargs                   2 0
    push           0          u64 
    push           mlibp.gs_strint.a i64 
    callfn         &msysp.strint u64 
    push           mlibp.gs_strint.dest u64 
    callproc       &mlibp.strbuffer_add 
#5209: 
    retproc                   
End


Proc mlibp.gs_strln:
    param          mlibp.gs_strln.dest u64 
    param          mlibp.gs_strln.s u64 
    procentry                 
    setargs                   2 0
    push           mlibp.gs_strln.s u64 
    push           mlibp.gs_strln.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   1 0
    push           mlibp.gs_strln.dest u64 
    callproc       &mlibp.gs_line 
#5211: 
    retproc                   
End


Proc mlibp.gs_strsp:
    param          mlibp.gs_strsp.dest u64 
    param          mlibp.gs_strsp.s u64 
    procentry                 
    setargs                   2 0
    push           mlibp.gs_strsp.s u64 
    push           mlibp.gs_strsp.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           " "        u64 
    push           mlibp.gs_strsp.dest u64 
    callproc       &mlibp.gs_str 
#5213: 
    retproc                   
End


Proc mlibp.gs_line:
    param          mlibp.gs_line.dest u64 
    procentry                 
    setargs                   3 0
    push           -1         i64 
    push           "\c\n"     u64 
    push           mlibp.gs_line.dest u64 
    callproc       &mlibp.strbuffer_add 
#5215: 
    retproc                   
End


Proc mlibp.gs_getcol: i64
    param          mlibp.gs_getcol.dest u64 
    procentry                 
    push           mlibp.gs_getcol.dest u64 
    push           8          
    pushptroff                i32 1 0
    setret                    i64 
    jump           #5217      
#5217: 
    retfn                     i64 
End


Proc mlibp.gs_leftstr:
    param          mlibp.gs_leftstr.dest u64 
    param          mlibp.gs_leftstr.s u64 
    param          mlibp.gs_leftstr.w i64 
    param          mlibp.gs_leftstr.padch i64 
    local          mlibp.gs_leftstr.col i64 
    local          mlibp.gs_leftstr.i i64 
    local          mlibp.gs_leftstr.n i64 
    local          mlibp.gs_leftstr.slen i64 
    local          mlibp.gs_leftstr.str block:2560 
    procentry                 
    push           mlibp.gs_leftstr.dest u64 
    push           8          
    pushptroff                i32 1 0
    pop            mlibp.gs_leftstr.col i64 
    setargs                   2 0
    push           mlibp.gs_leftstr.s u64 
    push           &mlibp.gs_leftstr.str 
    callproc       &strcpy    
    setargs                   1 0
    push           mlibp.gs_leftstr.s u64 
    callfn         &strlen    i64 
    pop            mlibp.gs_leftstr.slen i64 
    push           mlibp.gs_leftstr.w i64 
    push           mlibp.gs_leftstr.slen i64 
    sub                       i64 
    pop            mlibp.gs_leftstr.n i64 
    push           mlibp.gs_leftstr.n i64 
    push           0          i64 
    jumple         #5219      i64 
#5220: 
    push           1          i64 
    pop            mlibp.gs_leftstr.i i64 
    push           mlibp.gs_leftstr.n i64 
    push           1          i64 
    jumplt         #5221      i64 
#5222: 
    push           mlibp.gs_leftstr.padch u64 
    push           &mlibp.gs_leftstr.str 
    push           mlibp.gs_leftstr.slen i64 
    push           mlibp.gs_leftstr.i i64 
    add                       i64 
    popptroff                 u8 1 -1
#5223: 
    forup          #5222      i64 1
    opnd           mlibp.gs_leftstr.i 
    opnd           mlibp.gs_leftstr.n 
#5221: 
    push           0          u64 
    push           &mlibp.gs_leftstr.str 
    push           mlibp.gs_leftstr.slen i64 
    push           mlibp.gs_leftstr.n i64 
    add                       i64 
    popptroff                 u8 1 0
#5219: 
    setargs                   2 0
    push           &mlibp.gs_leftstr.str 
    push           mlibp.gs_leftstr.dest u64 
    callproc       &mlibp.gs_str 
#5224: 
    retproc                   
End


Proc mlibp.gs_leftint:
    param          mlibp.gs_leftint.dest u64 
    param          mlibp.gs_leftint.a i64 
    param          mlibp.gs_leftint.w i64 
    param          mlibp.gs_leftint.padch i64 
    procentry                 
    setargs                   4 0
    push           mlibp.gs_leftint.padch i64 
    push           mlibp.gs_leftint.w i64 
    setargs                   2 0
    push           0          u64 
    push           mlibp.gs_leftint.a i64 
    callfn         &msysp.strint u64 
    push           mlibp.gs_leftint.dest u64 
    callproc       &mlibp.gs_leftstr 
#5226: 
    retproc                   
End


Proc mlibp.gs_padto:
    param          mlibp.gs_padto.dest u64 
    param          mlibp.gs_padto.col i64 
    param          mlibp.gs_padto.ch i64 
    local          mlibp.gs_padto.n i64 
    local          mlibp.gs_padto.str block:2560 
    local          mlibp.gs_padto.i i64 
    procentry                 
    push           mlibp.gs_padto.col i64 
    push           mlibp.gs_padto.dest u64 
    push           8          
    pushptroff                i32 1 0
    sub                       i64 
    pop            mlibp.gs_padto.n i64 
    push           mlibp.gs_padto.n i64 
    push           0          i64 
    jumpgt         #5228      i64 
    jump           #5229      
#5228: 
#5230: 
    push           1          i64 
    pop            mlibp.gs_padto.i i64 
    push           mlibp.gs_padto.n i64 
    push           1          i64 
    jumplt         #5231      i64 
#5232: 
    push           mlibp.gs_padto.ch u64 
    push           &mlibp.gs_padto.str 
    push           mlibp.gs_padto.i i64 
    popptroff                 u8 1 -1
#5233: 
    forup          #5232      i64 1
    opnd           mlibp.gs_padto.i 
    opnd           mlibp.gs_padto.n 
#5231: 
    push           0          u64 
    push           &mlibp.gs_padto.str 
    push           mlibp.gs_padto.n i64 
    popptroff                 u8 1 0
    setargs                   2 0
    push           &mlibp.gs_padto.str 
    push           mlibp.gs_padto.dest u64 
    callproc       &mlibp.gs_str 
#5229: 
    retproc                   
End


Proc mlibp.gs_println:
    param          mlibp.gs_println.dest u64 
    param          mlibp.gs_println.f u64 
    procentry                 
    push           0          u64 
    push           mlibp.gs_println.dest u64 
    pushptr                   u64 
    push           mlibp.gs_println.dest u64 
    push           8          
    pushptroff                i32 1 0
    popptroff                 u8 1 0
    push           mlibp.gs_println.f u64 
    push           0          u64 
    jumpne         #5235      u64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mlibp.gs_println.dest u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           "\c"       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #5236      
#5235: 
    setargs                   1 0
    push           mlibp.gs_println.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           mlibp.gs_println.dest u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           "\c"       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#5236: 
#5237: 
    retproc                   
End


Proc mlibp.nextcmdparam: i64
    param          mlibp.nextcmdparam.paramno u64 
    param          mlibp.nextcmdparam.name u64 
    param          mlibp.nextcmdparam.value u64 
    param          mlibp.nextcmdparam.defext u64 
    local          mlibp.nextcmdparam.q u64 
    local          mlibp.nextcmdparam.item u64 
    local          mlibp.nextcmdparam.fileext u64 
    local          mlibp.nextcmdparam.rest u64 
    local          mlibp.nextcmdparam.length i64 
    procentry                 
!reenter::
#5239: 
    push           0          u64 
    push           mlibp.nextcmdparam.value u64 
    popptr                    u64 
    push           0          u64 
    push           mlibp.nextcmdparam.name u64 
    popptr                    u64 
    push           mlibp.nextcmdparam.infile i64 
    jumpfalse      #5240      i64 
    setargs                   2 0
    push           &mlibp.nextcmdparam.item 
    push           &mlibp.nextcmdparam.fileptr 
    callfn         &mlibp.readnextfileitem i64 
    push           0          i64 
    jumpne         #5241      i64 
    setargs                   1 0
    push           mlibp.nextcmdparam.filestart u64 
    callproc       &free      
    push           0          i64 
    pop            mlibp.nextcmdparam.infile i64 
    jump           #5239      
#5241: 
    jump           #5242      
#5240: 
    push           mlibp.nextcmdparam.paramno u64 
    pushptr                   i64 
    push           msysp.nsysparams i64 
    jumple         #5243      i64 
    push           0          i64 
    setret                    i64 
    jump           #5244      
#5243: 
    push           &msysp.sysparams 
    push           mlibp.nextcmdparam.paramno u64 
    pushptr                   i64 
    pushptroff                u64 8 -8
    pop            mlibp.nextcmdparam.item u64 
    push           mlibp.nextcmdparam.paramno u64 
    incr                      i64 1
    setargs                   1 0
    push           mlibp.nextcmdparam.item u64 
    callfn         &strlen    i64 
    pop            mlibp.nextcmdparam.length i64 
    push           mlibp.nextcmdparam.item u64 
    pushptr                   u8 
    push           64         u64 
    jumpne         #5245      u64 
    setargs                   1 0
    push           mlibp.nextcmdparam.item u64 
    push           1          i64 
    addrefoff                 u64 1 0
    callfn         &mlibp.readfile u64 
    store          mlibp.nextcmdparam.fileptr u64 
    pop            mlibp.nextcmdparam.filestart u64 
    push           mlibp.nextcmdparam.filestart u64 
    push           0          u64 
    jumpne         #5246      u64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Can't open" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mlibp.nextcmdparam.item u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           7          i64 
    stop                      
#5246: 
    push           1          i64 
    pop            mlibp.nextcmdparam.infile i64 
    jump           #5239      
#5245: 
    push           mlibp.nextcmdparam.item u64 
    pushptr                   u8 
    push           58         u64 
    jumpne         #5247      u64 
    push           1          i64 
    pop            mlibp.nextcmdparam.colonseen u8 
    push           4          i64 
    setret                    i64 
    jump           #5244      
#5247: 
#5242: 
    push           0          u64 
    push           mlibp.nextcmdparam.value u64 
    popptr                    u64 
    push           mlibp.nextcmdparam.item u64 
    pushptr                   u8 
    push           45         u64 
    jumpne         #5248      u64 
    push           mlibp.nextcmdparam.item u64 
    startmult                 
    push           mlibp.nextcmdparam.colonseen u8 
    jumpfalse      #5249      i64 
    push           0          i64 
    resetmult                 
    jump           #5250      
#5249: 
    push           1          i64 
    endmult                   
#5250: 
    addrefoff                 u64 1 0
    push           mlibp.nextcmdparam.name u64 
    popptr                    u64 
    setargs                   2 0
    push           58         u64 
    push           mlibp.nextcmdparam.item u64 
    callfn         &strchr    u64 
    pop            mlibp.nextcmdparam.q u64 
    push           mlibp.nextcmdparam.q u64 
    jumptrue       #5251      u64 
    setargs                   2 0
    push           61         u64 
    push           mlibp.nextcmdparam.item u64 
    callfn         &strchr    u64 
    pop            mlibp.nextcmdparam.q u64 
#5251: 
    push           mlibp.nextcmdparam.q u64 
    jumpfalse      #5252      u64 
    push           mlibp.nextcmdparam.q u64 
    push           1          i64 
    addrefoff                 u64 1 0
    push           mlibp.nextcmdparam.value u64 
    popptr                    u64 
    push           0          u64 
    push           mlibp.nextcmdparam.q u64 
    popptr                    u8 
#5252: 
    startmult                 
    push           mlibp.nextcmdparam.colonseen u8 
    jumpfalse      #5253      i64 
    push           5          i64 
    resetmult                 
    jump           #5254      
#5253: 
    push           1          i64 
    endmult                   
#5254: 
    setret                    i64 
    jump           #5244      
#5248: 
    setargs                   2 0
    push           0          i64 
    push           mlibp.nextcmdparam.item u64 
    callfn         &mlibp.extractext u64 
    pop            mlibp.nextcmdparam.fileext u64 
    push           mlibp.nextcmdparam.item u64 
    push           mlibp.nextcmdparam.name u64 
    popptr                    u64 
    push           mlibp.nextcmdparam.fileext u64 
    pushptr                   u8 
    push           0          i64 
    jumpne         #5255      i64 
    setargs                   2 0
    push           mlibp.nextcmdparam.name u64 
    pushptr                   u64 
    push           &mlibp.nextcmdparam.str 
    callproc       &strcpy    
    push           mlibp.nextcmdparam.defext u64 
    jumpfalse      #5256      u64 
    push           mlibp.nextcmdparam.colonseen u8 
    jumptrue       #5256      i64 
    setargs                   2 0
    push           mlibp.nextcmdparam.defext u64 
    push           &mlibp.nextcmdparam.str 
    callfn         &mlibp.addext u64 
    push           mlibp.nextcmdparam.name u64 
    popptr                    u64 
#5256: 
    jump           #5257      
#5255: 
    setargs                   2 0
    push           "dll"      u64 
    push           mlibp.nextcmdparam.fileext u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #5258      i64 
    startmult                 
    push           mlibp.nextcmdparam.colonseen u8 
    jumpfalse      #5259      i64 
    push           5          i64 
    resetmult                 
    jump           #5260      
#5259: 
    push           3          i64 
    endmult                   
#5260: 
    setret                    i64 
    jump           #5244      
#5258: 
#5257: 
    startmult                 
    push           mlibp.nextcmdparam.colonseen u8 
    jumpfalse      #5261      i64 
    push           5          i64 
    resetmult                 
    jump           #5262      
#5261: 
    push           2          i64 
    endmult                   
#5262: 
    setret                    i64 
    jump           #5244      
#5244: 
    retfn                     i64 
End


Proc mlibp.readnextfileitem: i64
    param          mlibp.readnextfileitem.fileptr u64 
    param          mlibp.readnextfileitem.item u64 
    local          mlibp.readnextfileitem.p u64 
    local          mlibp.readnextfileitem.pstart u64 
    local          mlibp.readnextfileitem.pend u64 
    local          mlibp.readnextfileitem.n i64 
    procentry                 
    push           mlibp.readnextfileitem.fileptr u64 
    pushptr                   u64 
    pop            mlibp.readnextfileitem.p u64 
!reenter::
#5264: 
#5265: 
    push           mlibp.readnextfileitem.p u64 
    pushptr                   u8 
    push           32         u64 
    casejumpeq     #5266      u64 0
    push           9          u64 
    casejumpeq     #5266      u64 0
    push           13         u64 
    casejumpeq     #5266      u64 0
    push           10         u64 
    casejumpeq     #5266      u64 0
    push           26         u64 
    casejumpeq     #5267      u64 0
    push           0          u64 
    casejumpeq     #5267      u64 0
    popstack                  u64 
    jump           #5268      
#5266: 
    push           &mlibp.readnextfileitem.p 
    incr                      u64 1
    jump           #5269      
#5267: 
    push           0          i64 
    setret                    i64 
    jump           #5270      
    jump           #5269      
#5268: 
    jump           #5271      
#5269: 
    jump           #5265      
#5271: 
    push           mlibp.readnextfileitem.p u64 
    pushptr                   u8 
    push           33         u64 
    casejumpeq     #5272      u64 0
    push           35         u64 
    casejumpeq     #5272      u64 0
    popstack                  u64 
    jump           #5273      
#5272: 
    push           &mlibp.readnextfileitem.p 
    incr                      u64 1
#5274: 
    push           &mlibp.readnextfileitem.p 
    loadincr                  u64 1
    pushptr                   u8 
    push           10         u64 
    casejumpeq     #5275      u64 0
    push           26         u64 
    casejumpeq     #5276      u64 0
    push           0          u64 
    casejumpeq     #5276      u64 0
    popstack                  u64 
    jump           #5277      
#5275: 
    jump           #5264      
    jump           #5274      
#5276: 
    push           mlibp.readnextfileitem.p u64 
    push           1          i64 
    subrefoff                 u64 1 0
    push           mlibp.readnextfileitem.fileptr u64 
    popptr                    u64 
    push           0          i64 
    setret                    i64 
    jump           #5270      
    jump           #5274      
#5277: 
    jump           #5274      
#5278: 
    jump           #5279      
#5273: 
#5279: 
    push           mlibp.readnextfileitem.p u64 
    pushptr                   u8 
    push           34         u64 
    casejumpeq     #5280      u64 0
    popstack                  u64 
    jump           #5281      
#5280: 
    push           &mlibp.readnextfileitem.p 
    incrload                  u64 1
    pop            mlibp.readnextfileitem.pstart u64 
#5282: 
    push           mlibp.readnextfileitem.p u64 
    pushptr                   u8 
    push           0          u64 
    casejumpeq     #5283      u64 0
    push           26         u64 
    casejumpeq     #5283      u64 0
    push           34         u64 
    casejumpeq     #5284      u64 0
    popstack                  u64 
    jump           #5285      
#5283: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Unexpected EOF in @file" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           8          i64 
    stop                      
    jump           #5286      
#5284: 
    push           &mlibp.readnextfileitem.p 
    loadincr                  u64 1
    pop            mlibp.readnextfileitem.pend u64 
    push           mlibp.readnextfileitem.p u64 
    pushptr                   u8 
    push           44         u64 
    jumpne         #5287      u64 
    push           &mlibp.readnextfileitem.p 
    incr                      u64 1
#5287: 
    jump           #5288      
    jump           #5286      
#5285: 
#5286: 
    push           &mlibp.readnextfileitem.p 
    incr                      u64 1
    jump           #5282      
#5288: 
    jump           #5289      
#5281: 
    push           mlibp.readnextfileitem.p u64 
    pop            mlibp.readnextfileitem.pstart u64 
#5290: 
    push           mlibp.readnextfileitem.p u64 
    pushptr                   u8 
    push           0          u64 
    casejumpeq     #5291      u64 0
    push           26         u64 
    casejumpeq     #5291      u64 0
    push           32         u64 
    casejumpeq     #5292      u64 0
    push           9          u64 
    casejumpeq     #5292      u64 0
    push           44         u64 
    casejumpeq     #5292      u64 0
    push           13         u64 
    casejumpeq     #5292      u64 0
    push           10         u64 
    casejumpeq     #5292      u64 0
    popstack                  u64 
    jump           #5293      
#5291: 
    push           mlibp.readnextfileitem.p u64 
    pop            mlibp.readnextfileitem.pend u64 
    jump           #5294      
    jump           #5295      
#5292: 
    push           &mlibp.readnextfileitem.p 
    loadincr                  u64 1
    pop            mlibp.readnextfileitem.pend u64 
    jump           #5294      
    jump           #5295      
#5293: 
#5295: 
    push           &mlibp.readnextfileitem.p 
    incr                      u64 1
    jump           #5290      
#5294: 
#5289: 
    push           mlibp.readnextfileitem.pend u64 
    push           mlibp.readnextfileitem.pstart u64 
    subref                    i64 1
    pop            mlibp.readnextfileitem.n i64 
    push           mlibp.readnextfileitem.n i64 
    push           256        i64 
    jumplt         #5296      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "@file item too long" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           9          i64 
    stop                      
#5296: 
    setargs                   3 0
    push           mlibp.readnextfileitem.n u64 
    push           mlibp.readnextfileitem.pstart u64 
    push           &mlibp.readnextfileitem.str 
    callproc       &memcpy    
    push           0          u64 
    push           &mlibp.readnextfileitem.str 
    push           mlibp.readnextfileitem.n i64 
    popptroff                 u8 1 0
    push           &mlibp.readnextfileitem.str 
    push           mlibp.readnextfileitem.item u64 
    popptr                    u64 
    push           mlibp.readnextfileitem.p u64 
    push           mlibp.readnextfileitem.fileptr u64 
    popptr                    u64 
    push           1          i64 
    setret                    i64 
    jump           #5270      
#5270: 
    retfn                     i64 
End


Proc mlibp.ipadstr:
    param          mlibp.ipadstr.s u64 
    param          mlibp.ipadstr.width i64 
    param          mlibp.ipadstr.padchar u64 
    local          mlibp.ipadstr.n i64 
    local          mlibp.ipadstr.av_1 i64 
    procentry                 
    setargs                   1 0
    push           mlibp.ipadstr.s u64 
    callfn         &strlen    i64 
    pop            mlibp.ipadstr.n i64 
#5298: 
    push           mlibp.ipadstr.width i64 
    push           mlibp.ipadstr.n i64 
    sub                       i64 
    pop            mlibp.ipadstr.av_1 i64 
    push           mlibp.ipadstr.av_1 i64 
    push           0          i64 
    jumple         #5299      i64 
#5300: 
    setargs                   2 0
    push           mlibp.ipadstr.padchar u64 
    push           mlibp.ipadstr.s u64 
    callproc       &strcat    
#5301: 
    to             #5300      
    opnd           mlibp.ipadstr.av_1 
#5299: 
#5302: 
    retproc                   
End


Proc mlibp.padstr: u64
    param          mlibp.padstr.s u64 
    param          mlibp.padstr.width i64 
    param          mlibp.padstr.padchar u64 
    procentry                 
    setargs                   2 0
    push           mlibp.padstr.s u64 
    push           &mlibp.padstr.str 
    callproc       &strcpy    
    setargs                   3 0
    push           mlibp.padstr.padchar u64 
    push           mlibp.padstr.width i64 
    push           &mlibp.padstr.str 
    callproc       &mlibp.ipadstr 
    push           &mlibp.padstr.str 
    setret                    u64 
    jump           #5304      
#5304: 
    retfn                     u64 
End


Proc mlibp.chr: u64
    param          mlibp.chr.c i64 
    procentry                 
    push           mlibp.chr.c u64 
    push           &mlibp.chr.str 
    push           1          i64 
    popptroff                 u8 1 -1
    push           0          u64 
    push           &mlibp.chr.str 
    push           2          i64 
    popptroff                 u8 1 -1
    push           &mlibp.chr.str 
    setret                    u64 
    jump           #5306      
#5306: 
    retfn                     u64 
End


Proc mlibp.cmpstring: i64
    param          mlibp.cmpstring.s u64 
    param          mlibp.cmpstring.t u64 
    local          mlibp.cmpstring.res i64 
    procentry                 
    startmult                 
    setargs                   2 0
    push           mlibp.cmpstring.t u64 
    push           mlibp.cmpstring.s u64 
    callfn         &strcmp    i32 
    store          mlibp.cmpstring.res i64 
    push           0          i64 
    jumpge         #5308      i64 
    push           -1         i64 
    resetmult                 
    jump           #5309      
#5308: 
    push           mlibp.cmpstring.res i64 
    push           0          i64 
    jumple         #5310      i64 
    push           1          i64 
    resetmult                 
    jump           #5309      
#5310: 
    push           0          i64 
    endmult                   
#5309: 
    setret                    i64 
    jump           #5311      
#5311: 
    retfn                     i64 
End


Proc mlibp.cmpstringn: i64
    param          mlibp.cmpstringn.s u64 
    param          mlibp.cmpstringn.t u64 
    param          mlibp.cmpstringn.n i64 
    local          mlibp.cmpstringn.res i64 
    procentry                 
    startmult                 
    setargs                   3 0
    push           mlibp.cmpstringn.n u64 
    push           mlibp.cmpstringn.t u64 
    push           mlibp.cmpstringn.s u64 
    callfn         &strncmp   i32 
    store          mlibp.cmpstringn.res i64 
    push           0          i64 
    jumpge         #5313      i64 
    push           -1         i64 
    resetmult                 
    jump           #5314      
#5313: 
    push           mlibp.cmpstringn.res i64 
    push           0          i64 
    jumple         #5315      i64 
    push           1          i64 
    resetmult                 
    jump           #5314      
#5315: 
    push           0          i64 
    endmult                   
#5314: 
    setret                    i64 
    jump           #5316      
#5316: 
    retfn                     i64 
End


Proc mlibp.eqstring: i64
    param          mlibp.eqstring.s u64 
    param          mlibp.eqstring.t u64 
    procentry                 
    setargs                   2 0
    push           mlibp.eqstring.t u64 
    push           mlibp.eqstring.s u64 
    callfn         &strcmp    i32 
    push           0          i64 
    seteq                     i64 
    setret                    i64 
    jump           #5318      
#5318: 
    retfn                     i64 
End


Proc mlibp.cmpbytes: i64
    param          mlibp.cmpbytes.p u64 
    param          mlibp.cmpbytes.q u64 
    param          mlibp.cmpbytes.n i64 
    local          mlibp.cmpbytes.res i64 
    procentry                 
    startmult                 
    setargs                   3 0
    push           mlibp.cmpbytes.n u64 
    push           mlibp.cmpbytes.q u64 
    push           mlibp.cmpbytes.p u64 
    callfn         &memcmp    i32 
    store          mlibp.cmpbytes.res i64 
    push           0          i64 
    jumpge         #5320      i64 
    push           -1         i64 
    resetmult                 
    jump           #5321      
#5320: 
    push           mlibp.cmpbytes.res i64 
    push           0          i64 
    jumple         #5322      i64 
    push           1          i64 
    resetmult                 
    jump           #5321      
#5322: 
    push           0          i64 
    endmult                   
#5321: 
    setret                    i64 
    jump           #5323      
#5323: 
    retfn                     i64 
End


Proc mlibp.eqbytes: i64
    param          mlibp.eqbytes.p u64 
    param          mlibp.eqbytes.q u64 
    param          mlibp.eqbytes.n i64 
    procentry                 
    setargs                   3 0
    push           mlibp.eqbytes.n u64 
    push           mlibp.eqbytes.q u64 
    push           mlibp.eqbytes.p u64 
    callfn         &memcmp    i32 
    push           0          i64 
    seteq                     i64 
    setret                    i64 
    jump           #5325      
#5325: 
    retfn                     i64 
End


Proc mlibp.mseed:
    param          mlibp.mseed.a u64 
    param          mlibp.mseed.b u64 
    procentry                 
    push           mlibp.mseed.a i64 
    push           &mlibp.seed 
    push           1          i64 
    popptroff                 i64 8 -8
    push           mlibp.mseed.b u64 
    jumpfalse      #5327      u64 
    push           mlibp.mseed.b i64 
    push           &mlibp.seed 
    push           2          i64 
    popptroff                 i64 8 -8
    jump           #5328      
#5327: 
    push           &mlibp.seed 
    push           2          i64 
    addrefoff                 i64 8 -8
    push           mlibp.mseed.a i64 
    ixorto                    i64 
#5328: 
#5329: 
    retproc                   
End


Proc mlibp.mrandom: u64
    local          mlibp.mrandom.x i64 
    local          mlibp.mrandom.y i64 
    procentry                 
    push           &mlibp.seed 
    push           1          i64 
    pushptroff                i64 8 -8
    pop            mlibp.mrandom.x i64 
    push           &mlibp.seed 
    push           2          i64 
    pushptroff                i64 8 -8
    pop            mlibp.mrandom.y i64 
    push           mlibp.mrandom.y i64 
    push           &mlibp.seed 
    push           1          i64 
    popptroff                 i64 8 -8
    push           &mlibp.mrandom.x 
    push           mlibp.mrandom.x i64 
    push           23         i64 
    shl                       i64 
    ixorto                    i64 
    push           mlibp.mrandom.x i64 
    push           mlibp.mrandom.y i64 
    ixor                      i64 
    push           mlibp.mrandom.x i64 
    push           17         i64 
    shr                       i64 
    ixor                      i64 
    push           mlibp.mrandom.y i64 
    push           26         i64 
    shr                       i64 
    ixor                      i64 
    push           &mlibp.seed 
    push           2          i64 
    popptroff                 i64 8 -8
    push           &mlibp.seed 
    push           2          i64 
    pushptroff                i64 8 -8
    push           mlibp.mrandom.y i64 
    add                       u64 
    setret                    u64 
    jump           #5331      
#5331: 
    retfn                     u64 
End


Proc mlibp.mrandomp: i64
    procentry                 
    setargs                   0 0
    callfn         &mlibp.mrandom i64 
    push           9223372036854775807 i64 
    iand                      i64 
    setret                    i64 
    jump           #5333      
#5333: 
    retfn                     i64 
End


Proc mlibp.mrandomint: i64
    param          mlibp.mrandomint.n i64 
    procentry                 
    setargs                   0 0
    callfn         &mlibp.mrandomp i64 
    push           mlibp.mrandomint.n i64 
    irem                      i64 
    setret                    i64 
    jump           #5335      
#5335: 
    retfn                     i64 
End


Proc mlibp.mrandomrange: i64
    param          mlibp.mrandomrange.a i64 
    param          mlibp.mrandomrange.b i64 
    local          mlibp.mrandomrange.span i64 
    procentry                 
    push           mlibp.mrandomrange.b i64 
    push           mlibp.mrandomrange.a i64 
    sub                       i64 
    push           1          i64 
    add                       i64 
    pop            mlibp.mrandomrange.span i64 
    push           mlibp.mrandomrange.span i64 
    push           0          i64 
    jumpgt         #5337      i64 
    push           0          i64 
    setret                    i64 
    jump           #5338      
#5337: 
    setargs                   0 0
    callfn         &mlibp.mrandomp i64 
    push           mlibp.mrandomrange.span i64 
    irem                      i64 
    push           mlibp.mrandomrange.a i64 
    add                       i64 
    setret                    i64 
    jump           #5338      
#5338: 
    retfn                     i64 
End


Proc mlibp.mrandomreal: r64
    local          mlibp.mrandomreal.x r64 
    procentry                 
#5340: 
    setargs                   0 0
    callfn         &mlibp.mrandomp i64 
    float                     r64 i64 
    push           9.2233720368547758e+018 r64 
    div                       r64 
    pop            mlibp.mrandomreal.x r64 
#5341: 
    push           mlibp.mrandomreal.x r64 
    push           1.0000000000000000e+000 r64 
    jumpeq         #5340      r64 
#5342: 
    push           mlibp.mrandomreal.x r64 
    setret                    r64 
    jump           #5343      
#5343: 
    retfn                     r64 
End


Proc mlibp.mrandomreal1: r64
    procentry                 
    setargs                   0 0
    callfn         &mlibp.mrandomp i64 
    push           9223372036854775807 i64 
    idiv                      i64 
    float                     r64 i64 
    setret                    r64 
    jump           #5345      
#5345: 
    retfn                     r64 
End


Proc mlibp.checkpackfile: u64
    local          mlibp.checkpackfile.a i64 
    local          mlibp.checkpackfile.offset i64 
    local          mlibp.checkpackfile.i i64 
    local          mlibp.checkpackfile.size i64 
    local          mlibp.checkpackfile.name block:100 
    local          mlibp.checkpackfile.exefile block:300 
    local          mlibp.checkpackfile.packexeptr u64 
    local          mlibp.checkpackfile.packexesize i64 
    local          mlibp.checkpackfile.packfilename u64 
    local          mlibp.checkpackfile.packfilesize i64 
    local          mlibp.checkpackfile.packfileptr u64 
    procentry                 
    setargs                   2 0
    setargs                   0 0
    callfn         &mwindowsp.os_gethostname u64 
    push           &mlibp.checkpackfile.exefile 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcpy    
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Attempting to open" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mlibp.checkpackfile.exefile 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           &mlibp.checkpackfile.exefile 
    push           0          
    addrefoff                 u8 1 0
    callfn         &mlibp.readfile u64 
    pop            mlibp.checkpackfile.packexeptr u64 
    push           mlibp.checkpackfile.packexeptr u64 
    jumptrue       #5347      u64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Can't open" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mlibp.checkpackfile.exefile 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   1 0
    push           &mlibp.checkpackfile.packexeptr 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           0          
    stop                      
#5347: 
    push           mlibp.rfsize i64 
    pop            mlibp.checkpackfile.packexesize i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "File read OK. Size" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mlibp.checkpackfile.packexesize i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           mlibp.checkpackfile.packexeptr u64 
    push           mlibp.checkpackfile.packexesize i64 
    push           4          i64 
    sub                       i64 
    pushptroff                i32 1 0
    pop            mlibp.checkpackfile.a i64 
    push           mlibp.checkpackfile.a i64 
    push           1262568272 i64 
    jumpeq         #5348      i64 
    setargs                   1 0
    push           mlibp.checkpackfile.packexeptr u64 
    callproc       &free      
    push           0          u64 
    pop            mlibp.checkpackfile.packfileptr u64 
    push           0          u64 
    setret                    u64 
    jump           #5349      
#5348: 
    push           mlibp.checkpackfile.packexeptr u64 
    push           mlibp.checkpackfile.packexesize i64 
    push           8          i64 
    sub                       i64 
    pushptroff                i32 1 0
    pop            mlibp.checkpackfile.offset i64 
    push           mlibp.checkpackfile.packexeptr u64 
    push           mlibp.checkpackfile.offset i64 
    addrefoff                 u64 1 0
    pop            mlibp.checkpackfile.packfilename u64 
    push           &mlibp.checkpackfile.offset 
    setargs                   1 0
    push           mlibp.checkpackfile.packfilename u64 
    callfn         &strlen    i64 
    push           1          i64 
    add                       i64 
    addto                     i64 
    push           mlibp.checkpackfile.packexeptr u64 
    push           mlibp.checkpackfile.offset i64 
    pushptroff                i32 1 0
    pop            mlibp.checkpackfile.packfilesize i64 
    push           mlibp.checkpackfile.packexeptr u64 
    push           mlibp.checkpackfile.offset i64 
    addrefoff                 u64 1 4
    pop            mlibp.checkpackfile.packfileptr u64 
    push           mlibp.checkpackfile.packfileptr u64 
    setret                    u64 
    jump           #5349      
#5349: 
    retfn                     u64 
End


Proc mlibp.pcm_allocx: u64
    local          mlibp.pcm_allocx.p u64 
    procentry                 
    push           32         i64 
    pop            mlibp.allocbytes i64 
    startmult                 
    push           &mlibp.freelist 
    push           2          i64 
    pushptroff                u64 8 0
    store          mlibp.pcm_allocx.p u64 
    jumpfalse      #5351      u64 
    push           &mlibp.freelist 
    push           2          i64 
    pushptroff                u64 8 0
    pushptr                   u64 
    push           &mlibp.freelist 
    push           2          i64 
    storeptroff               u64 8 0
    resetmult                 
    jump           #5352      
#5351: 
    push           mlibp.pcheapptr u64 
    pop            mlibp.pcm_allocx.p u64 
    push           &mlibp.pcheapptr 
    push           32         i64 
    addrefoffto               u64 1 0
    push           mlibp.pcheapptr u64 
    push           mlibp.pcheapend u64 
    jumplt         #5353      u64 
    setargs                   1 0
    push           32         i64 
    callfn         &mlibp.pcm_newblock u64 
    pop            mlibp.pcm_allocx.p u64 
#5353: 
    push           0          u64 
    push           mlibp.pcm_allocx.p u64 
    popptr                    u64 
    push           0          u64 
    push           mlibp.pcm_allocx.p u64 
    push           1          i64 
    popptroff                 u64 8 0
    push           0          u64 
    push           mlibp.pcm_allocx.p u64 
    push           2          i64 
    popptroff                 u64 8 0
    push           0          u64 
    push           mlibp.pcm_allocx.p u64 
    push           3          i64 
    popptroff                 u64 8 0
    push           mlibp.pcm_allocx.p u64 
    endmult                   
#5352: 
    setret                    u64 
    jump           #5354      
#5354: 
    retfn                     u64 
End


Proc mlibp.readline: u64
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$read_conline 
    push           msysp.rd_buffer u64 
    setret                    u64 
    jump           #5356      
#5356: 
    retfn                     u64 
End


Proc mlibp.stralloc: u64
    param          mlibp.stralloc.p u64 
    procentry                 
    setargs                   2 0
    push           0          u64 
    push           mlibp.stralloc.p u64 
    push           mlibp.allocbase u64 
    subref                    i64 1
    callfn         &msysp.strint u64 
    setret                    u64 
    jump           #5358      
#5358: 
    retfn                     u64 
End


Proc mlibp.findfunction: u64
    param          mlibp.findfunction.name u64 
    local          mlibp.findfunction.av_1 i64 
    local          mlibp.findfunction.i i64 
    procentry                 
#5360: 
    push           1          i64 
    pop            mlibp.findfunction.i i64 
    getnprocs                 i64 
    pop            mlibp.findfunction.av_1 i64 
    push           mlibp.findfunction.av_1 i64 
    push           1          i64 
    jumplt         #5361      i64 
#5362: 
    setargs                   2 0
    push           mlibp.findfunction.name u64 
    push           mlibp.findfunction.i i64 
    getprocname               i64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #5363      i64 
    push           mlibp.findfunction.i i64 
    getprocaddr               i64 
    setret                    u64 
    jump           #5364      
#5363: 
#5365: 
    forup          #5362      i64 1
    opnd           mlibp.findfunction.i 
    opnd           mlibp.findfunction.av_1 
#5361: 
    push           0          u64 
    setret                    u64 
    jump           #5364      
#5364: 
    retfn                     u64 
End


Proc mwindowsp.os_init:
    local          mwindowsp.os_init.i i64 
    local          mwindowsp.os_init.count i64 
    local          mwindowsp.os_init.info block:22 
    procentry                 
    setargs                   1 0
    push           -11        i64 
    truncate                  i64 u32 
    callfn         &`GetStdHandle u64 
    pop            mwindowsp.hconsole u64 
    setargs                   1 0
    push           -10        i64 
    truncate                  i64 u32 
    callfn         &`GetStdHandle u64 
    pop            mwindowsp.hconsolein u64 
    push           0          i64 
    push           &mwindowsp.lastkey 
    push           8          
    popptroff                 u16 1 0
    push           0          i64 
    pop            mwindowsp.keypending i64 
    setargs                   2 0
    push           1          i64 
    push           0          u64 
    callproc       &`SetConsoleCtrlHandler 
    setargs                   2 0
    push           3          i64 
    push           mwindowsp.hconsole u64 
    callproc       &`SetConsoleMode 
    push           1          i64 
    pop            mwindowsp.init_flag i64 
#5367: 
    retproc                   
End


Proc mwindowsp.os_execwait: i64
    param          mwindowsp.os_execwait.cmdline u64 
    param          mwindowsp.os_execwait.newconsole i64 
    param          mwindowsp.os_execwait.workdir u64 
    local          mwindowsp.os_execwait.exitcode u32 
    local          mwindowsp.os_execwait.status i64 
    local          mwindowsp.os_execwait.cflags i64 
    local          mwindowsp.os_execwait.si block:104 
    local          mwindowsp.os_execwait.xpi block:24 
    procentry                 
    push           0          i64 
    pop            mwindowsp.os_execwait.cflags i64 
    push           &mwindowsp.os_execwait.si 
    clear                     block:104 
    push           &mwindowsp.os_execwait.xpi 
    clear                     block:24 
    push           mwindowsp.os_execwait.newconsole i64 
    switch         #5369      0 2
    opnd           #5370      
#5369: 
    switchlabel    #5371      
    switchlabel    #5372      
    switchlabel    #5373      
    endswitch                 
#5371: 
    push           32         i64 
    pop            mwindowsp.os_execwait.cflags i64 
    jump           #5374      
#5372: 
    push           48         i64 
    pop            mwindowsp.os_execwait.cflags i64 
    jump           #5374      
#5373: 
    push           48         i64 
    pop            mwindowsp.os_execwait.cflags i64 
    jump           #5374      
#5370: 
#5374: 
    push           104        i64 
    push           &mwindowsp.os_execwait.si 
    push           0          
    popptroff                 u32 1 0
    setargs                   10 0
    push           &mwindowsp.os_execwait.xpi 
    push           &mwindowsp.os_execwait.si 
    push           0          u64 
    push           0          u64 
    push           mwindowsp.os_execwait.cflags i64 
    push           1          i64 
    push           0          u64 
    push           0          u64 
    push           mwindowsp.os_execwait.cmdline u64 
    push           0          u64 
    callfn         &`CreateProcessA i64 
    pop            mwindowsp.os_execwait.status i64 
    push           mwindowsp.os_execwait.status i64 
    push           0          i64 
    jumpne         #5375      i64 
    setargs                   0 0
    callfn         &`GetLastError u32 
    pop            mwindowsp.os_execwait.status i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Winexec error:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mwindowsp.os_execwait.status i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           -1         i64 
    setret                    i64 
    jump           #5376      
#5375: 
    setargs                   2 0
    push           4294967295 i64 
    push           &mwindowsp.os_execwait.xpi 
    pushptr                   u64 
    callproc       &`WaitForSingleObject 
    setargs                   2 0
    push           &mwindowsp.os_execwait.exitcode 
    push           &mwindowsp.os_execwait.xpi 
    pushptr                   u64 
    callproc       &`GetExitCodeProcess 
    setargs                   1 0
    push           &mwindowsp.os_execwait.xpi 
    pushptr                   u64 
    callproc       &`CloseHandle 
    setargs                   1 0
    push           &mwindowsp.os_execwait.xpi 
    push           8          
    pushptroff                u64 1 0
    callproc       &`CloseHandle 
    push           mwindowsp.os_execwait.exitcode u32 
    setret                    i64 
    jump           #5376      
#5376: 
    retfn                     i64 
End


Proc mwindowsp.os_execcmd: i64
    param          mwindowsp.os_execcmd.cmdline u64 
    param          mwindowsp.os_execcmd.newconsole i64 
    local          mwindowsp.os_execcmd.exitcode u32 
    local          mwindowsp.os_execcmd.i i64 
    local          mwindowsp.os_execcmd.j i64 
    local          mwindowsp.os_execcmd.k i64 
    local          mwindowsp.os_execcmd.si block:104 
    local          mwindowsp.os_execcmd.xpi block:24 
    procentry                 
    push           &mwindowsp.os_execcmd.si 
    clear                     block:104 
    push           &mwindowsp.os_execcmd.xpi 
    clear                     block:24 
    push           104        i64 
    push           &mwindowsp.os_execcmd.si 
    push           0          
    popptroff                 u32 1 0
    setargs                   10 0
    push           &mwindowsp.os_execcmd.xpi 
    push           &mwindowsp.os_execcmd.si 
    push           0          u64 
    push           0          u64 
    push           32         i64 
    startmult                 
    push           mwindowsp.os_execcmd.newconsole i64 
    jumpfalse      #5378      i64 
    push           16         i64 
    resetmult                 
    jump           #5379      
#5378: 
    push           0          i64 
    endmult                   
#5379: 
    ior                       i64 
    push           1          i64 
    push           0          u64 
    push           0          u64 
    push           mwindowsp.os_execcmd.cmdline u64 
    push           0          u64 
    callproc       &`CreateProcessA 
    setargs                   1 0
    push           &mwindowsp.os_execcmd.xpi 
    pushptr                   u64 
    callproc       &`CloseHandle 
    setargs                   1 0
    push           &mwindowsp.os_execcmd.xpi 
    push           8          
    pushptroff                u64 1 0
    callproc       &`CloseHandle 
    push           1          i64 
    setret                    i64 
    jump           #5380      
#5380: 
    retfn                     i64 
End


Proc mwindowsp.os_getch: i64
    local          mwindowsp.os_getch.k i64 
    procentry                 
    setargs                   0 0
    callfn         &mwindowsp.os_getchx i64 
    push           255        i64 
    iand                      i64 
    pop            mwindowsp.os_getch.k i64 
    push           mwindowsp.os_getch.k i64 
    setret                    i64 
    jump           #5382      
#5382: 
    retfn                     i64 
End


Proc mwindowsp.os_kbhit: i64
    local          mwindowsp.os_kbhit.count u32 
    procentry                 
    push           mwindowsp.init_flag i64 
    jumptrue       #5384      i64 
    setargs                   0 0
    callproc       &mwindowsp.os_init 
#5384: 
    setargs                   2 0
    push           &mwindowsp.os_kbhit.count 
    push           mwindowsp.hconsolein u64 
    callproc       &`GetNumberOfConsoleInputEvents 
    push           mwindowsp.os_kbhit.count u32 
    push           1          i64 
    setgt                     i64 
    setret                    i64 
    jump           #5385      
#5385: 
    retfn                     i64 
End


Proc mwindowsp.os_flushkeys:
    procentry                 
    setargs                   1 0
    push           mwindowsp.hconsolein u64 
    callproc       &`FlushConsoleInputBuffer 
#5387: 
    retproc                   
End


Proc mwindowsp.os_getconsolein: u64
    procentry                 
    push           mwindowsp.hconsolein u64 
    setret                    u64 
    jump           #5389      
#5389: 
    retfn                     u64 
End


Proc mwindowsp.os_getconsoleout: u64
    procentry                 
    push           mwindowsp.hconsole u64 
    setret                    u64 
    jump           #5391      
#5391: 
    retfn                     u64 
End


Proc mwindowsp.os_proginstance: u64
    procentry                 
    setargs                   1 0
    push           "PROGINST" u64 
    callproc       &mlibp.abortprogram 
    push           0          u64 
    setret                    u64 
    jump           #5393      
#5393: 
    retfn                     u64 
End


Proc mwindowsp.os_getdllinst: u64
    param          mwindowsp.os_getdllinst.name u64 
    local          mwindowsp.os_getdllinst.hinst u64 
    procentry                 
    setargs                   1 0
    push           mwindowsp.os_getdllinst.name u64 
    callfn         &`LoadLibraryA u64 
    pop            mwindowsp.os_getdllinst.hinst u64 
    push           mwindowsp.os_getdllinst.hinst u64 
    setret                    u64 
    jump           #5395      
#5395: 
    retfn                     u64 
End


Proc mwindowsp.os_getdllprocaddr: u64
    param          mwindowsp.os_getdllprocaddr.hinst i64 
    param          mwindowsp.os_getdllprocaddr.name u64 
    procentry                 
    setargs                   2 0
    push           mwindowsp.os_getdllprocaddr.name u64 
    push           mwindowsp.os_getdllprocaddr.hinst u64 
    callfn         &`GetProcAddress u64 
    setret                    u64 
    jump           #5397      
#5397: 
    retfn                     u64 
End


Proc mwindowsp.os_initwindows:
    procentry                 
    setargs                   0 0
    callproc       &mwindowsp.os_init 
    setargs                   1 0
    push           "pcc001"   u64 
    callproc       &mwindowsp.os_gxregisterclass 
#5399: 
    retproc                   
End


Proc mwindowsp.os_gxregisterclass:
    param          mwindowsp.os_gxregisterclass.classname u64 
    local          mwindowsp.os_gxregisterclass.r block:80 
    procentry                 
    push           mwindowsp.os_gxregisterclass.registered u8 
    jumpfalse      #5401      i64 
    jump           #5402      
#5401: 
    push           &mwindowsp.os_gxregisterclass.r 
    clear                     block:80 
    push           80         i64 
    push           &mwindowsp.os_gxregisterclass.r 
    push           0          
    popptroff                 u32 1 0
    push           40         i64 
    push           &mwindowsp.os_gxregisterclass.r 
    push           4          
    popptroff                 u32 1 0
    push           &mwindowsp.mainwndproc 
    push           &mwindowsp.os_gxregisterclass.r 
    push           8          
    popptroff                 u64 1 0
    push           0          u64 
    push           &mwindowsp.os_gxregisterclass.r 
    push           24         
    popptroff                 u64 1 0
    push           0          u64 
    push           &mwindowsp.os_gxregisterclass.r 
    push           32         
    popptroff                 u64 1 0
    setargs                   2 0
    push           32512      u64 
    push           0          u64 
    callfn         &`LoadCursorA u64 
    push           &mwindowsp.os_gxregisterclass.r 
    push           40         
    popptroff                 u64 1 0
    push           16         u64 
    push           &mwindowsp.os_gxregisterclass.r 
    push           48         
    popptroff                 u64 1 0
    push           0          u64 
    push           &mwindowsp.os_gxregisterclass.r 
    push           56         
    popptroff                 u64 1 0
    push           mwindowsp.os_gxregisterclass.classname u64 
    push           &mwindowsp.os_gxregisterclass.r 
    push           64         
    popptroff                 u64 1 0
    push           0          u64 
    push           &mwindowsp.os_gxregisterclass.r 
    push           72         
    popptroff                 u64 1 0
    setargs                   1 0
    push           &mwindowsp.os_gxregisterclass.r 
    callfn         &`RegisterClassExA u32 
    push           0          i64 
    jumpne         #5403      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mwindowsp.os_gxregisterclass.classname u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &`GetLastError 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Registerclass error" u64 
    callproc       &mlibp.abortprogram 
#5403: 
    push           1          i64 
    pop            mwindowsp.os_gxregisterclass.registered u8 
#5402: 
    retproc                   
End


Proc mwindowsp.mainwndproc: i64
    param          mwindowsp.mainwndproc.hwnd u64 
    param          mwindowsp.mainwndproc.message u32 
    param          mwindowsp.mainwndproc.wparam u64 
    param          mwindowsp.mainwndproc.lparam u64 
    local          mwindowsp.mainwndproc.m block:48 
    local          mwindowsp.mainwndproc.i i64 
    local          mwindowsp.mainwndproc.result i64 
    local          mwindowsp.mainwndproc.l i64 
    procentry                 
    push           mwindowsp.mainwndproc.hwnd u64 
    push           &mwindowsp.mainwndproc.m 
    push           0          
    popptroff                 u64 1 0
    push           mwindowsp.mainwndproc.message u32 
    push           &mwindowsp.mainwndproc.m 
    push           8          
    popptroff                 u32 1 0
    push           mwindowsp.mainwndproc.wparam u64 
    push           &mwindowsp.mainwndproc.m 
    push           16         
    popptroff                 u64 1 0
    push           mwindowsp.mainwndproc.lparam u64 
    push           &mwindowsp.mainwndproc.m 
    push           24         
    popptroff                 u64 1 0
    push           0          i64 
    push           &mwindowsp.mainwndproc.m 
    push           40         
    popptroff                 i32 1 0
    push           0          i64 
    push           &mwindowsp.mainwndproc.m 
    push           44         
    popptroff                 i32 1 0
    push           mwindowsp.wndproc_callbackfn u64 
    jumpfalse      #5405      u64 
    setargs                   1 0
    push           &mwindowsp.mainwndproc.m 
    push           mwindowsp.wndproc_callbackfn u64 
    callfnptr                 i64 
    pop            mwindowsp.mainwndproc.result i64 
    jump           #5406      
#5405: 
    push           0          i64 
    pop            mwindowsp.mainwndproc.result i64 
#5406: 
    push           &mwindowsp.mainwndproc.m 
    push           8          
    pushptroff                u32 1 0
    push           2          i64 
    jumpne         #5407      i64 
    push           0          i64 
    setret                    i64 
    jump           #5408      
#5407: 
    startmult                 
    push           mwindowsp.mainwndproc.result i64 
    jumptrue       #5409      i64 
    setargs                   4 0
    push           mwindowsp.mainwndproc.lparam u64 
    push           mwindowsp.mainwndproc.wparam u64 
    push           mwindowsp.mainwndproc.message u32 
    push           mwindowsp.mainwndproc.hwnd u64 
    callfn         &`DefWindowProcA i64 
    resetmult                 
    jump           #5410      
#5409: 
    push           0          i64 
    endmult                   
#5410: 
    setret                    i64 
    jump           #5408      
#5408: 
    retfn                     i64 
End


Proc mwindowsp.timerproc:
    param          mwindowsp.timerproc.hwnd u64 
    param          mwindowsp.timerproc.msg i64 
    param          mwindowsp.timerproc.id i64 
    param          mwindowsp.timerproc.time i64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "TIMERPROC" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#5412: 
    retproc                   
End


Proc mwindowsp.os_testcallback:
    param          mwindowsp.os_testcallback.p u64 
    procentry                 
    push           mwindowsp.wndproc_callbackfn u64 
    jumpfalse      #5414      u64 
    setargs                   1 0
    push           mwindowsp.os_testcallback.p u64 
    push           mwindowsp.wndproc_callbackfn u64 
    callprocptr               
    jump           #5415      
#5414: 
    setargs                   1 0
    push           "MESS HANDLER NOT DEFINED" u64 
    callproc       &mlibp.abortprogram 
#5415: 
#5416: 
    retproc                   
End


Proc mwindowsp.os_setmesshandler:
    param          mwindowsp.os_setmesshandler.addr u64 
    procentry                 
    push           mwindowsp.os_setmesshandler.addr u64 
    pop            mwindowsp.wndproc_callbackfn u64 
#5418: 
    retproc                   
End


Proc mwindowsp.os_getchx: i64
    local          mwindowsp.os_getchx.count i64 
    local          mwindowsp.os_getchx.charcode i64 
    local          mwindowsp.os_getchx.keyshift i64 
    local          mwindowsp.os_getchx.keycode i64 
    local          mwindowsp.os_getchx.altdown i64 
    local          mwindowsp.os_getchx.ctrldown i64 
    local          mwindowsp.os_getchx.shiftdown i64 
    local          mwindowsp.os_getchx.capslock i64 
    procentry                 
    push           mwindowsp.init_flag i64 
    jumptrue       #5420      i64 
    setargs                   0 0
    callproc       &mwindowsp.os_init 
#5420: 
    push           mwindowsp.keypending i64 
    jumpfalse      #5421      i64 
    push           mwindowsp.pendkey block:20 
    pop            mwindowsp.lastkey block:20 
    push           0          i64 
    pop            mwindowsp.keypending i64 
    jump           #5422      
#5421: 
    push           &mwindowsp.lastkey 
    push           8          
    pushptroff                u16 1 0
    push           0          i64 
    jumpne         #5423      i64 
#5424: 
    push           0          i64 
    pop            mwindowsp.os_getchx.count i64 
    setargs                   4 0
    push           &mwindowsp.os_getchx.count 
    push           1          i64 
    push           &mwindowsp.lastkey 
    push           mwindowsp.hconsolein u64 
    callproc       &`ReadConsoleInputA 
#5425: 
    push           &mwindowsp.lastkey 
    pushptr                   u16 
    push           1          i64 
    jumpne         #5424      i64 
    push           &mwindowsp.lastkey 
    push           4          
    pushptroff                u32 1 0
    push           1          i64 
    jumpne         #5424      i64 
#5426: 
#5423: 
#5422: 
    startmult                 
    push           &mwindowsp.lastkey 
    push           16         
    pushptroff                u32 1 0
    push           3          i64 
    iand                      i64 
    jumpfalse      #5427      i64 
    push           1          i64 
    resetmult                 
    jump           #5428      
#5427: 
    push           0          i64 
    endmult                   
#5428: 
    pop            mwindowsp.os_getchx.altdown i64 
    startmult                 
    push           &mwindowsp.lastkey 
    push           16         
    pushptroff                u32 1 0
    push           12         i64 
    iand                      i64 
    jumpfalse      #5429      i64 
    push           1          i64 
    resetmult                 
    jump           #5430      
#5429: 
    push           0          i64 
    endmult                   
#5430: 
    pop            mwindowsp.os_getchx.ctrldown i64 
    startmult                 
    push           &mwindowsp.lastkey 
    push           16         
    pushptroff                u32 1 0
    push           16         i64 
    iand                      i64 
    jumpfalse      #5431      i64 
    push           1          i64 
    resetmult                 
    jump           #5432      
#5431: 
    push           0          i64 
    endmult                   
#5432: 
    pop            mwindowsp.os_getchx.shiftdown i64 
    startmult                 
    push           &mwindowsp.lastkey 
    push           16         
    pushptroff                u32 1 0
    push           128        i64 
    iand                      i64 
    jumpfalse      #5433      i64 
    push           1          i64 
    resetmult                 
    jump           #5434      
#5433: 
    push           0          i64 
    endmult                   
#5434: 
    pop            mwindowsp.os_getchx.capslock i64 
    push           &mwindowsp.lastkey 
    push           8          
    addrefoff                 u64 1 0
    decr                      u16 1
    push           &mwindowsp.lastkey 
    push           14         
    pushptroff                u8 1 0
    pop            mwindowsp.os_getchx.charcode i64 
    push           &mwindowsp.lastkey 
    push           10         
    pushptroff                u16 1 0
    push           255        i64 
    iand                      i64 
    pop            mwindowsp.os_getchx.keycode i64 
    push           mwindowsp.os_getchx.charcode i64 
    push           0          i64 
    jumpge         #5435      i64 
    push           mwindowsp.os_getchx.charcode i64 
    push           -128       i64 
    jumpge         #5436      i64 
    push           0          i64 
    pop            mwindowsp.os_getchx.charcode i64 
    jump           #5437      
#5436: 
    push           &mwindowsp.os_getchx.charcode 
    push           256        i64 
    addto                     i64 
#5437: 
#5435: 
    push           mwindowsp.os_getchx.altdown i64 
    jumpfalse      #5438      i64 
    push           mwindowsp.os_getchx.ctrldown i64 
    jumpfalse      #5438      i64 
    push           mwindowsp.os_getchx.charcode i64 
    push           166        i64 
    jumpne         #5438      i64 
    push           0          i64 
    store          mwindowsp.os_getchx.ctrldown i64 
    pop            mwindowsp.os_getchx.altdown i64 
    jump           #5439      
#5438: 
    push           mwindowsp.os_getchx.altdown i64 
    jumptrue       #5440      i64 
    push           mwindowsp.os_getchx.ctrldown i64 
    jumpfalse      #5441      i64 
#5440: 
    push           0          i64 
    pop            mwindowsp.os_getchx.charcode i64 
    push           mwindowsp.os_getchx.keycode i64 
    push           65         i64 
    jumplt         #5442      i64 
    push           mwindowsp.os_getchx.keycode i64 
    push           90         i64 
    jumpgt         #5442      i64 
    push           mwindowsp.os_getchx.keycode i64 
    push           64         i64 
    sub                       i64 
    pop            mwindowsp.os_getchx.charcode i64 
#5442: 
#5441: 
#5439: 
    push           mwindowsp.os_getchx.capslock i64 
    push           3          i64 
    shl                       i64 
    push           mwindowsp.os_getchx.altdown i64 
    push           2          i64 
    shl                       i64 
    ior                       i64 
    push           mwindowsp.os_getchx.ctrldown i64 
    push           1          i64 
    shl                       i64 
    ior                       i64 
    push           mwindowsp.os_getchx.shiftdown i64 
    ior                       i64 
    pop            mwindowsp.os_getchx.keyshift i64 
    push           mwindowsp.os_getchx.keyshift i64 
    push           24         i64 
    shl                       i64 
    push           mwindowsp.os_getchx.keycode i64 
    push           16         i64 
    shl                       i64 
    ior                       i64 
    push           mwindowsp.os_getchx.charcode i64 
    ior                       i64 
    setret                    i64 
    jump           #5443      
#5443: 
    retfn                     i64 
End


Proc mwindowsp.os_getos: u64
    procentry                 
    push           "W64"      u64 
    setret                    u64 
    jump           #5445      
#5445: 
    retfn                     u64 
End


Proc mwindowsp.os_gethostsize: i64
    procentry                 
    push           64         i64 
    setret                    i64 
    jump           #5447      
#5447: 
    retfn                     i64 
End


Proc mwindowsp.os_shellexec: i64
    param          mwindowsp.os_shellexec.opc u64 
    param          mwindowsp.os_shellexec.file u64 
    procentry                 
    setargs                   1 0
    push           mwindowsp.os_shellexec.file u64 
    callfn         &system    i32 
    setret                    i64 
    jump           #5449      
#5449: 
    retfn                     i64 
End


Proc mwindowsp.os_sleep:
    param          mwindowsp.os_sleep.a i64 
    procentry                 
    setargs                   1 0
    push           mwindowsp.os_sleep.a i64 
    callproc       &`Sleep    
#5451: 
    retproc                   
End


Proc mwindowsp.os_getstdin: u64
    procentry                 
    setargs                   2 0
    push           "rb"       u64 
    push           "con"      u64 
    callfn         &fopen     u64 
    setret                    u64 
    jump           #5453      
#5453: 
    retfn                     u64 
End


Proc mwindowsp.os_getstdout: u64
    procentry                 
    setargs                   2 0
    push           "wb"       u64 
    push           "con"      u64 
    callfn         &fopen     u64 
    setret                    u64 
    jump           #5455      
#5455: 
    retfn                     u64 
End


Proc mwindowsp.os_gethostname: u64
    procentry                 
    setargs                   3 0
    push           300        i64 
    push           &mwindowsp.os_gethostname.name 
    push           0          u64 
    callproc       &`GetModuleFileNameA 
    push           &mwindowsp.os_gethostname.name 
    setret                    u64 
    jump           #5457      
#5457: 
    retfn                     u64 
End


Proc mwindowsp.os_getmpath: u64
    procentry                 
    push           "C:\\m\\"  u64 
    setret                    u64 
    jump           #5459      
#5459: 
    retfn                     u64 
End


Proc mwindowsp.os_exitprocess:
    param          mwindowsp.os_exitprocess.x i64 
    procentry                 
    push           mwindowsp.os_exitprocess.x i64 
    stop                      
#5461: 
    retproc                   
End


Proc mwindowsp.os_clock: i64
    procentry                 
    setargs                   0 0
    callfn         &clock     i32 
    setret                    i64 
    jump           #5463      
#5463: 
    retfn                     i64 
End


Proc mwindowsp.os_ticks: i64
    procentry                 
    setargs                   0 0
    callfn         &`GetTickCount64 i64 
    setret                    i64 
    jump           #5465      
#5465: 
    retfn                     i64 
End


Proc mwindowsp.os_getclockspersec: i64
    procentry                 
    push           1000       i64 
    setret                    i64 
    jump           #5467      
#5467: 
    retfn                     i64 
End


Proc mwindowsp.os_iswindows: i64
    procentry                 
    push           1          i64 
    setret                    i64 
    jump           #5469      
#5469: 
    retfn                     i64 
End


Proc mwindowsp.os_filelastwritetime: i64
    param          mwindowsp.os_filelastwritetime.filename u64 
    local          mwindowsp.os_filelastwritetime.f u64 
    local          mwindowsp.os_filelastwritetime.ctime i64 
    local          mwindowsp.os_filelastwritetime.atime i64 
    local          mwindowsp.os_filelastwritetime.wtime i64 
    procentry                 
    push           mwindowsp.os_filelastwritetime.filename u64 
    push           0          u64 
    jumpne         #5471      u64 
    push           1          i64 
    setret                    i64 
    jump           #5472      
#5471: 
    setargs                   7 0
    push           0          u64 
    push           3          i64 
    push           3          i64 
    push           0          u64 
    push           1          i64 
    push           2147483648 i64 
    push           mwindowsp.os_filelastwritetime.filename u64 
    callfn         &`CreateFileA u64 
    pop            mwindowsp.os_filelastwritetime.f u64 
    push           mwindowsp.os_filelastwritetime.f i64 
    push           -1         i64 
    jumpne         #5473      i64 
    push           0          i64 
    setret                    i64 
    jump           #5472      
#5473: 
    setargs                   4 0
    push           &mwindowsp.os_filelastwritetime.wtime 
    push           &mwindowsp.os_filelastwritetime.atime 
    push           &mwindowsp.os_filelastwritetime.ctime 
    push           mwindowsp.os_filelastwritetime.f u64 
    callproc       &`GetFileTime 
    setargs                   1 0
    push           mwindowsp.os_filelastwritetime.f u64 
    callproc       &`CloseHandle 
    push           mwindowsp.os_filelastwritetime.wtime i64 
    setret                    i64 
    jump           #5472      
#5472: 
    retfn                     i64 
End


Proc mwindowsp.os_getsystime:
    param          mwindowsp.os_getsystime.tm u64 
    procentry                 
    setargs                   1 0
    push           mwindowsp.os_getsystime.tm u64 
    callproc       &`GetLocalTime 
#5475: 
    retproc                   
End


Proc mwindowsp.os_messagebox:
    param          mwindowsp.os_messagebox.s u64 
    param          mwindowsp.os_messagebox.t u64 
    procentry                 
    setargs                   4 0
    push           0          i64 
    push           mwindowsp.os_messagebox.t u64 
    push           mwindowsp.os_messagebox.s u64 
    push           0          i64 
    callproc       &`MessageBoxA 
#5477: 
    retproc                   
End


Proc mwindowsp.os_hpcounter: i64
    local          mwindowsp.os_hpcounter.a i64 
    procentry                 
    setargs                   1 0
    push           &mwindowsp.os_hpcounter.a 
    callproc       &`QueryPerformanceCounter 
    push           mwindowsp.os_hpcounter.a i64 
    setret                    i64 
    jump           #5479      
#5479: 
    retfn                     i64 
End


Proc mwindowsp.os_hpfrequency: i64
    local          mwindowsp.os_hpfrequency.a i64 
    procentry                 
    setargs                   1 0
    push           &mwindowsp.os_hpfrequency.a 
    callproc       &`QueryPerformanceFrequency 
    push           mwindowsp.os_hpfrequency.a i64 
    setret                    i64 
    jump           #5481      
#5481: 
    retfn                     i64 
End


Proc mwindowsp.os_peek:
    local          mwindowsp.os_peek.ticks i64 
    local          mwindowsp.os_peek.m block:100 
    procentry                 
    setargs                   0 0
    callfn         &`GetTickCount64 i64 
    pop            mwindowsp.os_peek.ticks i64 
    push           mwindowsp.os_peek.ticks i64 
    push           mwindowsp.os_peek.lastticks i64 
    sub                       i64 
    push           1000       i64 
    jumplt         #5483      i64 
    push           mwindowsp.os_peek.ticks i64 
    pop            mwindowsp.os_peek.lastticks i64 
    setargs                   5 0
    push           0          i64 
    push           0          i64 
    push           0          i64 
    push           0          u64 
    push           &mwindowsp.os_peek.m 
    callproc       &`PeekMessageA 
#5483: 
#5484: 
    retproc                   
End


Proc pc_libpcl.pcl_start::
    param          pc_libpcl.pcl_start.nunits i64 
    procentry                 
    push           pc_libpcl.initpcalloc i64 
    pop            pc_libpcl.pcalloc i64 
    push           pc_libpcl.pcl_start.nunits i64 
    jumpfalse      #5486      i64 
    push           pc_libpcl.pcl_start.nunits i64 
    push           9          i64 
    mul                       i64 
    push           8          i64 
    idiv                      i64 
    pop            pc_libpcl.pcl_start.nunits i64 
    jump           #5487      
#5488: 
    push           &pc_libpcl.pcalloc 
    push           2          i64 
    multo                     i64 
#5487: 
    push           pc_libpcl.pcalloc i64 
    push           pc_libpcl.pcl_start.nunits i64 
    jumplt         #5488      i64 
#5489: 
#5486: 
    setargs                   1 0
    push           pc_libpcl.pcalloc i64 
    push           32         i64 
    mul                       i64 
    callfn         &mlibp.pcm_allocz u64 
    pop            pc_libpcl.pcstart u64 
    push           pc_libpcl.pcstart u64 
    push           pc_libpcl.pcalloc i64 
    addrefoff                 u64 32 -256
    pop            pc_libpcl.pcend u64 
    push           pc_libpcl.pcstart u64 
    push           1          i64 
    subrefoff                 u64 32 0
    pop            pc_libpcl.pccurr u64 
    push           0          i64 
    pop            pc_libpcl.pcfixed u8 
    push           0          i64 
    pop            pc_libpcl.pcseqno i64 
    push           0          i64 
    pop            pc_libpcl.pcneedfntable i64 
    push           0          i64 
    store          pc_libpcl.labelnooffset i64 
    store          pc_libpcl.maxuserlabel i64 
    pop            pc_libpcl.labelno i64 
    push           0          i64 
    pop            pc_libpcl.mcldone i64 
    push           &pc_decls.rtsproctable 
    clear                     block:48 
#5490: 
    retproc                   
End


Proc pc_libpcl.pcl_end::
    param          pc_libpcl.pcl_end.fixup i64 
    procentry                 
    push           pc_libpcl.pccurr u64 
    push           pc_libpcl.pccurr u64 
    jumplt         #5492      u64 
    push           pc_libpcl.pccurr u64 
    push           1          
    pushptroff                u8 1 0
    push           11         i64 
    jumpeq         #5492      i64 
    setargs                   2 0
    push           0          u64 
    push           11         i64 
    callproc       &pc_libpcl.pcl_gen 
#5492: 
    push           pc_libpcl.pcl_end.fixup i64 
    jumpfalse      #5493      i64 
    setargs                   0 0
    callproc       &pc_libpcl.fixuppcl 
#5493: 
#5494: 
    retproc                   
End


Proc pc_libpcl.pcl_free::
    param          pc_libpcl.pcl_free.fixup i64 
    procentry                 
    push           0          u64 
    store          pc_libpcl.pcend u64 
    store          pc_libpcl.pccurr u64 
    pop            pc_libpcl.pcstart u64 
    push           0          i64 
    pop            pc_libpcl.pcfixed u8 
#5496: 
    retproc                   
End


Proc pc_libpcl.fixuppcl:
    local          pc_libpcl.fixuppcl.d u64 
    local          pc_libpcl.fixuppcl.p u64 
    local          pc_libpcl.fixuppcl.pextproc u64 
    local          pc_libpcl.fixuppcl.labno i64 
    local          pc_libpcl.fixuppcl.insideproc i64 
    local          pc_libpcl.fixuppcl.extparams i64 
    local          pc_libpcl.fixuppcl.isthreaded i64 
    procentry                 
    push           pc_libpcl.pcfixed u8 
    jumpfalse      #5498      i64 
    jump           #5499      
#5498: 
    push           pc_libpcl.pcstart u64 
    pop            pc_libpcl.fixuppcl.p u64 
    push           0          i64 
    pop            pc_libpcl.fixuppcl.insideproc i64 
    push           0          u64 
    pop            pc_libpcl.fixuppcl.pextproc u64 
    jump           #5500      
#5501: 
    push           pc_libpcl.fixuppcl.p u64 
    push           1          
    pushptroff                u8 1 0
    switch         #5502      5 97
    opnd           #5503      
#5502: 
    switchlabel    #5504      
    switchlabel    #5504      
    switchlabel    #5503      
    switchlabel    #5505      
    switchlabel    #5503      
    switchlabel    #5506      
    switchlabel    #5503      
    switchlabel    #5507      
    switchlabel    #5508      
    switchlabel    #5509      
    switchlabel    #5510      
    switchlabel    #5511      
    switchlabel    #5503      
    switchlabel    #5512      
    switchlabel    #5512      
    switchlabel    #5503      
    switchlabel    #5513      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5503      
    switchlabel    #5514      
    switchlabel    #5515      
    switchlabel    #5516      
    switchlabel    #5517      
    switchlabel    #5518      
    endswitch                 
#5512: 
    push           pc_libpcl.fixuppcl.insideproc i64 
    push           1          i64 
    jumpeq         #5519      i64 
    setargs                   1 0
    push           "Not allowed" u64 
    callproc       &pc_libpcl.perror 
#5519: 
    push           pc_libpcl.fixuppcl.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_libpcl.fixuppcl.d u64 
    push           pc_libpcl.fixuppcl.p u64 
    push           1          
    pushptroff                u8 1 0
    push           pc_libpcl.fixuppcl.d u64 
    push           27         
    popptroff                 u8 1 0
    push           pc_libpcl.fixuppcl.p u64 
    push           pc_libpcl.fixuppcl.d u64 
    push           16         
    popptroff                 u64 1 0
    push           pc_libpcl.fixuppcl.d u64 
    push           46         
    pushptroff                u16 1 0
    push           0          i64 
    dotindex                  i64 
    jumpfalse      #5520      u64 
    setargs                   2 0
    push           pc_libpcl.fixuppcl.d u64 
    pushptr                   u64 
    push           "Redefining local/param/ext:" u64 
    callproc       &pc_libpcl.perror_s 
#5520: 
    push           1          u64 
    push           pc_libpcl.fixuppcl.d u64 
    push           46         
    addrefoff                 u64 1 0
    push           0          i64 
    popdotindex               u16 
    jump           #5521      
#5505: 
    push           0          i64 
    pop            pc_libpcl.fixuppcl.isthreaded i64 
!doprocdef::
#5522: 
    push           pc_libpcl.fixuppcl.insideproc i64 
    jumpfalse      #5523      i64 
    setargs                   1 0
    push           "Nested proc" u64 
    callproc       &pc_libpcl.perror 
#5523: 
    push           1          i64 
    pop            pc_libpcl.fixuppcl.insideproc i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_libpcl.fixuppcl.d u64 
    push           pc_libpcl.fixuppcl.p u64 
    push           1          
    pushptroff                u8 1 0
    push           pc_libpcl.fixuppcl.d u64 
    push           27         
    popptroff                 u8 1 0
    push           pc_libpcl.fixuppcl.p u64 
    push           pc_libpcl.fixuppcl.d u64 
    push           16         
    popptroff                 u64 1 0
    push           pc_libpcl.fixuppcl.d u64 
    push           46         
    pushptroff                u16 1 0
    push           0          i64 
    dotindex                  i64 
    jumpfalse      #5524      u64 
    setargs                   2 0
    push           pc_libpcl.fixuppcl.d u64 
    pushptr                   u64 
    push           "Redefining proc:" u64 
    callproc       &pc_libpcl.perror_s 
#5524: 
    push           1          u64 
    push           pc_libpcl.fixuppcl.d u64 
    push           46         
    addrefoff                 u64 1 0
    push           0          i64 
    popdotindex               u16 
    push           pc_libpcl.fixuppcl.isthreaded u64 
    push           pc_libpcl.fixuppcl.d u64 
    push           46         
    addrefoff                 u64 1 0
    push           7          i64 
    popdotindex               u16 
    setargs                   1 0
    push           pc_libpcl.fixuppcl.d u64 
    callproc       &pc_libpcl.assignlabeltoname 
    jump           #5521      
#5504: 
    push           pc_libpcl.fixuppcl.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_libpcl.fixuppcl.d u64 
    push           pc_libpcl.fixuppcl.p u64 
    push           1          
    pushptroff                u8 1 0
    push           pc_libpcl.fixuppcl.d u64 
    push           27         
    popptroff                 u8 1 0
    push           pc_libpcl.fixuppcl.p u64 
    push           pc_libpcl.fixuppcl.d u64 
    push           16         
    popptroff                 u64 1 0
    push           pc_libpcl.fixuppcl.d u64 
    push           46         
    pushptroff                u16 1 0
    push           0          i64 
    dotindex                  i64 
    jumpfalse      #5525      u64 
    setargs                   2 0
    push           pc_libpcl.fixuppcl.d u64 
    pushptr                   u64 
    push           "Redefining proc/static/label:" u64 
    callproc       &pc_libpcl.perror_s 
#5525: 
    push           1          u64 
    push           pc_libpcl.fixuppcl.d u64 
    push           46         
    addrefoff                 u64 1 0
    push           0          i64 
    popdotindex               u16 
    setargs                   1 0
    push           pc_libpcl.fixuppcl.d u64 
    callproc       &pc_libpcl.assignlabeltoname 
    jump           #5521      
#5506: 
    push           pc_libpcl.fixuppcl.insideproc i64 
    push           1          i64 
    jumpeq         #5526      i64 
    setargs                   1 0
    push           "End without proc" u64 
    callproc       &pc_libpcl.perror 
#5526: 
    push           0          i64 
    pop            pc_libpcl.fixuppcl.insideproc i64 
    jump           #5521      
#5510: 
    push           pc_libpcl.fixuppcl.insideproc i64 
    push           2          i64 
    jumpeq         #5527      i64 
    setargs                   1 0
    push           "End without extproc" u64 
    callproc       &pc_libpcl.perror 
#5527: 
    push           0          i64 
    pop            pc_libpcl.fixuppcl.insideproc i64 
    jump           #5521      
#5507: 
    push           pc_libpcl.fixuppcl.p u64 
    pop            pc_libpcl.fixuppcl.pextproc u64 
    push           0          i64 
    pop            pc_libpcl.fixuppcl.extparams i64 
    push           pc_libpcl.fixuppcl.insideproc i64 
    jumpfalse      #5528      i64 
    setargs                   1 0
    push           "Nested proc" u64 
    callproc       &pc_libpcl.perror 
#5528: 
    push           2          i64 
    pop            pc_libpcl.fixuppcl.insideproc i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_libpcl.fixuppcl.d u64 
    push           pc_libpcl.fixuppcl.d u64 
    push           46         
    pushptroff                u16 1 0
    push           0          i64 
    dotindex                  i64 
    jumptrue       #5529      u64 
    push           pc_libpcl.fixuppcl.p u64 
    push           1          
    pushptroff                u8 1 0
    push           pc_libpcl.fixuppcl.d u64 
    push           27         
    popptroff                 u8 1 0
    push           pc_libpcl.fixuppcl.p u64 
    push           pc_libpcl.fixuppcl.d u64 
    push           16         
    popptroff                 u64 1 0
    push           pc_libpcl.fixuppcl.d u64 
    push           46         
    pushptroff                u16 1 0
    push           0          i64 
    dotindex                  i64 
    jumpfalse      #5530      u64 
    setargs                   2 0
    push           pc_libpcl.fixuppcl.d u64 
    pushptr                   u64 
    push           "Redefining extproc:" u64 
    callproc       &pc_libpcl.perror_s 
#5530: 
    push           1          u64 
    push           pc_libpcl.fixuppcl.d u64 
    push           46         
    addrefoff                 u64 1 0
    push           0          i64 
    popdotindex               u16 
    push           1          u64 
    push           pc_libpcl.fixuppcl.d u64 
    push           46         
    addrefoff                 u64 1 0
    push           1          i64 
    popdotindex               u16 
#5529: 
    jump           #5521      
#5508: 
    push           pc_libpcl.fixuppcl.insideproc i64 
    push           2          i64 
    jumpeq         #5531      i64 
    setargs                   1 0
    push           "Not allowed" u64 
    callproc       &pc_libpcl.perror 
#5531: 
    push           &pc_libpcl.fixuppcl.extparams 
    incr                      i64 1
    jump           #5521      
#5509: 
    push           pc_libpcl.fixuppcl.insideproc i64 
    push           2          i64 
    jumpeq         #5532      i64 
    setargs                   1 0
    push           "Not allowed" u64 
    callproc       &pc_libpcl.perror 
#5532: 
    push           pc_libpcl.fixuppcl.extparams i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           16         
    popptroff                 i32 1 0
    jump           #5521      
#5511: 
    push           1          i64 
    pop            pc_libpcl.fixuppcl.isthreaded i64 
    jump           #5522      
    jump           #5521      
#5513: 
    push           pc_libpcl.fixuppcl.p u64 
    push           8          
    pushptroff                i64 1 0
    pop            pc_libpcl.fixuppcl.labno i64 
    push           pc_libpcl.fixuppcl.labno i64 
    push           1          i64 
    push           100000     i64 
    jumpinrange    #5533      i64 
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_libpcl.fixuppcl.labno i64 
    callfn         &msysp.strint u64 
    push           "3:Label out of range" u64 
    callproc       &pc_libpcl.perror_s 
#5533: 
    setargs                   1 0
    push           pc_libpcl.fixuppcl.labno i64 
    callfn         &pc_libpcl.fixlabel i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           8          
    popptroff                 i64 1 0
    push           3          i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           0          
    popptroff                 u8 1 0
    jump           #5521      
#5515: 
    push           93         i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           1          
    popptroff                 u8 1 0
    push           1          i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           3          
    popptroff                 u8 1 0
    push           1          i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           4          
    popptroff                 i32 1 0
    jump           #5521      
#5516: 
    push           93         i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           1          
    popptroff                 u8 1 0
    push           2          i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           3          
    popptroff                 u8 1 0
    push           2          i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           4          
    popptroff                 i32 1 0
    jump           #5521      
#5517: 
    push           93         i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           1          
    popptroff                 u8 1 0
    push           3          i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           3          
    popptroff                 u8 1 0
    push           4          i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           4          
    popptroff                 i32 1 0
    jump           #5521      
#5518: 
    push           93         i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           1          
    popptroff                 u8 1 0
    push           4          i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           3          
    popptroff                 u8 1 0
    push           8          i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           4          
    popptroff                 i32 1 0
    jump           #5521      
#5514: 
    push           pc_libpcl.fixuppcl.p u64 
    push           4          
    pushptroff                i32 1 0
    push           0          i64 
    jumpne         #5534      i64 
    push           &pc_tables.psize 
    push           pc_libpcl.fixuppcl.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           pc_libpcl.fixuppcl.p u64 
    push           4          
    popptroff                 i32 1 0
#5534: 
    jump           #5521      
#5503: 
    push           pc_libpcl.fixuppcl.p u64 
    pushptr                   u8 
    push           5          i64 
    casejumpeq     #5535      i64 0
    push           3          i64 
    casejumpeq     #5536      i64 0
    push           198        i64 
    casejumpeq     #5537      i64 0
    push           199        i64 
    casejumpeq     #5537      i64 0
    push           200        i64 
    casejumpeq     #5537      i64 0
    popstack                  i64 
    jump           #5538      
#5535: 
    push           pc_libpcl.fixuppcl.p u64 
    push           3          
    pushptroff                u8 1 0
    push           11         i64 
    jumpeq         #5539      i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           4          
    pushptroff                i32 1 0
    push           4          i64 
    jumpne         #5540      i64 
#5539: 
    push           7          i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           0          
    popptroff                 u8 1 0
    push           pc_libpcl.fixuppcl.p u64 
    push           8          
    pushptroff                r64 1 0
    fnarrow                   r32 r64 
    push           pc_libpcl.fixuppcl.p u64 
    push           8          
    popptroff                 r32 1 0
#5540: 
    jump           #5541      
#5536: 
    setargs                   1 0
    push           pc_libpcl.fixuppcl.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libpcl.fixlabel i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           8          
    popptroff                 i64 1 0
    jump           #5541      
#5537: 
    push           1          i64 
    pop            pc_libpcl.pcneedfntable i64 
    jump           #5541      
#5538: 
#5541: 
#5521: 
#5542: 
    push           &pc_libpcl.fixuppcl.p 
    incr                      u64 32
#5500: 
    push           pc_libpcl.fixuppcl.p u64 
    push           pc_libpcl.pcend u64 
    jumple         #5501      u64 
#5543: 
    push           pc_libpcl.fixuppcl.insideproc i64 
    jumpfalse      #5544      i64 
    setargs                   1 0
    push           "End missing" u64 
    callproc       &pc_libpcl.perror 
#5544: 
    push           1          i64 
    pop            pc_libpcl.pcfixed u8 
#5499: 
    retproc                   
End


Proc pc_libpcl.extendpclblock:
    local          pc_libpcl.extendpclblock.newpcalloc i64 
    local          pc_libpcl.extendpclblock.lengthused i64 
    local          pc_libpcl.extendpclblock.newpcstart u64 
    procentry                 
    push           pc_libpcl.pcalloc i64 
    push           2          i64 
    mul                       i64 
    pop            pc_libpcl.extendpclblock.newpcalloc i64 
    push           pc_libpcl.pccurr u64 
    push           pc_libpcl.pcstart u64 
    subref                    i64 32
    push           1          i64 
    add                       i64 
    pop            pc_libpcl.extendpclblock.lengthused i64 
    setargs                   1 0
    push           32         i64 
    push           pc_libpcl.extendpclblock.newpcalloc i64 
    mul                       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pc_libpcl.extendpclblock.newpcstart u64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "EXTEND PCL" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libpcl.extendpclblock.newpcalloc i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   3 0
    push           pc_libpcl.extendpclblock.lengthused i64 
    push           32         i64 
    mul                       u64 
    push           pc_libpcl.pcstart u64 
    push           pc_libpcl.extendpclblock.newpcstart u64 
    callproc       &memcpy    
    setargs                   2 0
    push           pc_libpcl.extendpclblock.newpcalloc i64 
    push           pc_libpcl.extendpclblock.lengthused i64 
    sub                       i64 
    push           32         i64 
    mul                       i64 
    push           pc_libpcl.extendpclblock.newpcstart u64 
    push           pc_libpcl.extendpclblock.lengthused i64 
    addrefoff                 u64 32 0
    callproc       &mlibp.pcm_clearmem 
    push           pc_libpcl.extendpclblock.newpcstart u64 
    push           pc_libpcl.pccurr u64 
    push           pc_libpcl.pcstart u64 
    subref                    i64 32
    addrefoff                 u64 32 0
    pop            pc_libpcl.pccurr u64 
    push           pc_libpcl.extendpclblock.newpcstart u64 
    push           pc_libpcl.extendpclblock.newpcalloc i64 
    addrefoff                 u64 32 -256
    pop            pc_libpcl.pcend u64 
    setargs                   2 0
    push           pc_libpcl.pcalloc i64 
    push           32         i64 
    mul                       i64 
    push           pc_libpcl.pcstart u64 
    callproc       &mlibp.pcm_free 
    push           pc_libpcl.extendpclblock.newpcstart u64 
    pop            pc_libpcl.pcstart u64 
    push           pc_libpcl.extendpclblock.newpcalloc i64 
    pop            pc_libpcl.pcalloc i64 
#5546: 
    retproc                   
End


Proc pc_libpcl.newpcl: u64
    procentry                 
    push           pc_libpcl.pccurr u64 
    push           pc_libpcl.pcend u64 
    jumplt         #5548      u64 
    setargs                   0 0
    callproc       &pc_libpcl.extendpclblock 
#5548: 
    push           &pc_libpcl.npcl 
    incr                      i64 1
    push           &pc_libpcl.pccurr 
    incr                      u64 32
    push           &pc_libpcl.pcseqno 
    incrload                  i64 1
    push           pc_libpcl.pccurr u64 
    push           24         
    popptroff                 u32 1 0
    push           pc_libpcl.pccurr u64 
    setret                    u64 
    jump           #5549      
#5549: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_gen::
    param          pc_libpcl.pcl_gen.opcode i64 
    param          pc_libpcl.pcl_gen.p u64 
    local          pc_libpcl.pcl_gen.d u64 
    procentry                 
    push           pc_libpcl.pcl_gen.p u64 
    push           0          u64 
    jumpne         #5551      u64 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_gen.p u64 
#5551: 
    push           pc_libpcl.pcl_gen.opcode i64 
    push           pc_libpcl.pcl_gen.p u64 
    push           1          
    popptroff                 u8 1 0
#5552: 
    retproc                   
End


Proc pc_libpcl.pcl_gent::
    param          pc_libpcl.pcl_gent.opcode i64 
    param          pc_libpcl.pcl_gent.t i64 
    param          pc_libpcl.pcl_gent.p u64 
    procentry                 
    push           pc_libpcl.pcl_gent.p u64 
    push           0          u64 
    jumpne         #5554      u64 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_gent.p u64 
#5554: 
    push           pc_libpcl.pcl_gent.opcode i64 
    push           pc_libpcl.pcl_gent.p u64 
    push           1          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_gent.t i64 
    push           0          i64 
    jumpge         #5555      i64 
    push           13         i64 
    push           pc_libpcl.pcl_gent.p u64 
    push           3          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_gent.t i64 
    neg                       i64 
    push           pc_libpcl.pcl_gent.p u64 
    push           4          
    popptroff                 i32 1 0
    jump           #5556      
#5555: 
    push           pc_libpcl.pcl_gent.t i64 
    push           pc_libpcl.pcl_gent.p u64 
    push           3          
    popptroff                 u8 1 0
#5556: 
#5557: 
    retproc                   
End


Proc pc_libpcl.pcl_genx::
    param          pc_libpcl.pcl_genx.opcode i64 
    param          pc_libpcl.pcl_genx.x i64 
    param          pc_libpcl.pcl_genx.p u64 
    procentry                 
    push           pc_libpcl.pcl_genx.p u64 
    push           0          u64 
    jumpne         #5559      u64 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_genx.p u64 
#5559: 
    push           pc_libpcl.pcl_genx.opcode i64 
    push           pc_libpcl.pcl_genx.p u64 
    push           1          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_genx.x i64 
    push           pc_libpcl.pcl_genx.p u64 
    push           16         
    popptroff                 i32 1 0
#5560: 
    retproc                   
End


Proc pc_libpcl.pcl_genxy::
    param          pc_libpcl.pcl_genxy.opcode i64 
    param          pc_libpcl.pcl_genxy.x i64 
    param          pc_libpcl.pcl_genxy.y i64 
    param          pc_libpcl.pcl_genxy.p u64 
    procentry                 
    push           pc_libpcl.pcl_genxy.p u64 
    push           0          u64 
    jumpne         #5562      u64 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_genxy.p u64 
#5562: 
    push           pc_libpcl.pcl_genxy.opcode i64 
    push           pc_libpcl.pcl_genxy.p u64 
    push           1          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_genxy.x i64 
    push           pc_libpcl.pcl_genxy.p u64 
    push           16         
    popptroff                 i32 1 0
    push           pc_libpcl.pcl_genxy.y i64 
    push           pc_libpcl.pcl_genxy.p u64 
    push           20         
    popptroff                 i32 1 0
#5563: 
    retproc                   
End


Proc pc_libpcl.pcl_genint:: u64
    param          pc_libpcl.pcl_genint.a i64 
    param          pc_libpcl.pcl_genint.mode i64 
    local          pc_libpcl.pcl_genint.p u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_genint.p u64 
    push           pc_libpcl.pcl_genint.a i64 
    push           pc_libpcl.pcl_genint.p u64 
    push           8          
    popptroff                 i64 1 0
    push           4          i64 
    push           pc_libpcl.pcl_genint.p u64 
    push           0          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_genint.p u64 
    setret                    u64 
    jump           #5565      
#5565: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_genint128:: u64
    param          pc_libpcl.pcl_genint128.a i128 
    param          pc_libpcl.pcl_genint128.mode i64 
    local          pc_libpcl.pcl_genint128.p u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_genint128.p u64 
    push           pc_libpcl.pcl_genint128.a i128 
    push           pc_libpcl.pcl_genint128.p u64 
    push           8          
    popptroff                 i128 1 0
    push           6          i64 
    push           pc_libpcl.pcl_genint128.p u64 
    push           0          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_genint128.p u64 
    setret                    u64 
    jump           #5567      
#5567: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_genreal:: u64
    param          pc_libpcl.pcl_genreal.x r64 
    local          pc_libpcl.pcl_genreal.p u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_genreal.p u64 
    push           pc_libpcl.pcl_genreal.x r64 
    push           pc_libpcl.pcl_genreal.p u64 
    push           8          
    popptroff                 r64 1 0
    push           5          i64 
    push           pc_libpcl.pcl_genreal.p u64 
    push           0          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_genreal.p u64 
    setret                    u64 
    jump           #5569      
#5569: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_genreal32:: u64
    param          pc_libpcl.pcl_genreal32.x r64 
    local          pc_libpcl.pcl_genreal32.p u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_genreal32.p u64 
    push           pc_libpcl.pcl_genreal32.x r64 
    fnarrow                   r32 r64 
    push           pc_libpcl.pcl_genreal32.p u64 
    push           8          
    popptroff                 r32 1 0
    push           7          i64 
    push           pc_libpcl.pcl_genreal32.p u64 
    push           0          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_genreal32.p u64 
    setret                    u64 
    jump           #5571      
#5571: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_genstring:: u64
    param          pc_libpcl.pcl_genstring.s u64 
    local          pc_libpcl.pcl_genstring.p u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_genstring.p u64 
    setargs                   1 0
    push           pc_libpcl.pcl_genstring.s u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           pc_libpcl.pcl_genstring.p u64 
    push           8          
    popptroff                 u64 1 0
    push           8          i64 
    push           pc_libpcl.pcl_genstring.p u64 
    push           0          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_genstring.p u64 
    setret                    u64 
    jump           #5573      
#5573: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_genlabel:: u64
    param          pc_libpcl.pcl_genlabel.a i64 
    local          pc_libpcl.pcl_genlabel.p u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_genlabel.p u64 
    push           pc_libpcl.pcl_genlabel.a i64 
    push           pc_libpcl.pcl_genlabel.p u64 
    push           8          
    popptroff                 i64 1 0
    push           3          i64 
    push           pc_libpcl.pcl_genlabel.p u64 
    push           0          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_genlabel.p u64 
    setret                    u64 
    jump           #5575      
#5575: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_genmem:: u64
    param          pc_libpcl.pcl_genmem.d u64 
    local          pc_libpcl.pcl_genmem.p u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_genmem.p u64 
    push           pc_libpcl.pcl_genmem.d u64 
    push           pc_libpcl.pcl_genmem.p u64 
    push           8          
    popptroff                 u64 1 0
    push           1          i64 
    push           pc_libpcl.pcl_genmem.p u64 
    push           0          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_genmem.p u64 
    setret                    u64 
    jump           #5577      
#5577: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_genmemaddr:: u64
    param          pc_libpcl.pcl_genmemaddr.d u64 
    local          pc_libpcl.pcl_genmemaddr.p u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_genmemaddr.p u64 
    push           pc_libpcl.pcl_genmemaddr.d u64 
    push           pc_libpcl.pcl_genmemaddr.p u64 
    push           8          
    popptroff                 u64 1 0
    push           2          i64 
    push           pc_libpcl.pcl_genmemaddr.p u64 
    push           0          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_genmemaddr.p u64 
    setret                    u64 
    jump           #5579      
#5579: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_gencomment::
    param          pc_libpcl.pcl_gencomment.s u64 
    procentry                 
    setargs                   2 0
    setargs                   1 0
    push           pc_libpcl.pcl_gencomment.s u64 
    callfn         &pc_libpcl.pcl_genstring u64 
    push           3          i64 
    callproc       &pc_libpcl.pcl_gen 
#5581: 
    retproc                   
End


Proc pc_libpcl.pcl_genname:: u64
    param          pc_libpcl.pcl_genname.s u64 
    procentry                 
    setargs                   1 0
    setargs                   1 0
    push           pc_libpcl.pcl_genname.s u64 
    callfn         &pc_libpcl.pcl_makesymbol u64 
    callfn         &pc_libpcl.pcl_genmem u64 
    setret                    u64 
    jump           #5583      
#5583: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_gennameaddr:: u64
    param          pc_libpcl.pcl_gennameaddr.s u64 
    procentry                 
    setargs                   1 0
    setargs                   1 0
    push           pc_libpcl.pcl_gennameaddr.s u64 
    callfn         &pc_libpcl.pcl_makesymbol u64 
    callfn         &pc_libpcl.pcl_genmemaddr u64 
    setret                    u64 
    jump           #5585      
#5585: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_genassem:: u64
    param          pc_libpcl.pcl_genassem.code u64 
    local          pc_libpcl.pcl_genassem.p u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_genassem.p u64 
    push           pc_libpcl.pcl_genassem.code u64 
    push           pc_libpcl.pcl_genassem.p u64 
    push           8          
    popptroff                 u64 1 0
    push           9          i64 
    push           pc_libpcl.pcl_genassem.p u64 
    push           0          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_genassem.p u64 
    setret                    u64 
    jump           #5587      
#5587: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_makesymbol:: u64
    param          pc_libpcl.pcl_makesymbol.s u64 
    local          pc_libpcl.pcl_makesymbol.d u64 
    procentry                 
    setargs                   1 0
    push           pc_libpcl.pcl_makesymbol.s u64 
    callfn         &pc_lex.addnamestr u64 
    pop            pc_libpcl.pcl_makesymbol.d u64 
    push           pc_libpcl.pcl_makesymbol.d u64 
    setret                    u64 
    jump           #5589      
#5589: 
    retfn                     u64 
End


Proc pc_libpcl.strpcl:
    param          pc_libpcl.strpcl.p u64 
    local          pc_libpcl.strpcl.pmodestr block:256 
    local          pc_libpcl.strpcl.str block:256 
    local          pc_libpcl.strpcl.opcode i64 
    local          pc_libpcl.strpcl.defused i64 
    procentry                 
    push           pc_libpcl.strpcl.p u64 
    push           1          
    pushptroff                u8 1 0
    pop            pc_libpcl.strpcl.opcode i64 
    push           pc_libpcl.strpcl.opcode i64 
    push           20         i64 
    casejumpeq     #5591      i64 0
    push           3          i64 
    casejumpeq     #5592      i64 0
    push           8          i64 
    casejumpeq     #5593      i64 0
    push           16         i64 
    casejumpeq     #5593      i64 0
    push           10         i64 
    casejumpeq     #5594      i64 0
    push           15         i64 
    casejumpeq     #5595      i64 0
    push           12         i64 
    casejumpeq     #5596      i64 0
    push           21         i64 
    casejumpeq     #5597      i64 0
    push           11         i64 
    casejumpeq     #5598      i64 0
    popstack                  i64 
    jump           #5599      
#5591: 
    setargs                   2 0
    push           1          i64 
    push           pc_libpcl.strpcl.p u64 
    push           8          
    pushptroff                i64 1 0
    callproc       &pc_libpcl.strlabel 
    jump           #5600      
    jump           #5601      
#5592: 
    push           pc_libpcl.strpcl.p u64 
    push           8          
    pushptroff                u64 1 0
    pushptr                   u8 
    jumpfalse      #5602      u64 
    setargs                   1 0
    push           "!"        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.strpcl.p u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &pc_libpcl.psstr 
#5602: 
    jump           #5600      
    jump           #5601      
#5593: 
    push           pc_libpcl.strpcl.p u64 
    push           8          
    pushptroff                u64 1 0
    push           46         
    pushptroff                u16 1 0
    push           9          i64 
    dotindex                  i64 
    jumpfalse      #5603      u64 
    setargs                   1 0
    push           "Procrts"  u64 
    callproc       &pc_libpcl.psstr 
    jump           #5604      
#5603: 
    push           pc_libpcl.strpcl.opcode i64 
    push           16         i64 
    jumpne         #5605      i64 
    setargs                   1 0
    push           "Threadedproc" u64 
    callproc       &pc_libpcl.psstr 
    jump           #5604      
#5605: 
    setargs                   1 0
    push           "Proc"     u64 
    callproc       &pc_libpcl.psstr 
#5604: 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.strpcl.p u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &pc_libpcl.psname 
    setargs                   1 0
    startmult                 
    push           pc_libpcl.strpcl.p u64 
    push           2          
    pushptroff                u8 1 0
    push           0          i64 
    dotindex                  i64 
    jumpfalse      #5606      u64 
    push           "::"       u64 
    resetmult                 
    jump           #5607      
#5606: 
    push           ":"        u64 
    endmult                   
#5607: 
    callproc       &pc_libpcl.psstr 
    push           pc_libpcl.strpcl.p u64 
    push           3          
    pushptroff                u8 1 0
    jumpfalse      #5608      i64 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    setargs                   2 0
    push           pc_libpcl.strpcl.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_libpcl.strpcl.p u64 
    push           3          
    pushptroff                u8 1 0
    callfn         &pc_libpcl.strpmode u64 
    callproc       &pc_libpcl.psstr 
#5608: 
    jump           #5600      
    jump           #5601      
#5594: 
    setargs                   1 0
    push           "End"      u64 
    callproc       &pc_libpcl.psstr 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    jump           #5600      
    jump           #5601      
#5595: 
    setargs                   1 0
    push           "Endext"   u64 
    callproc       &pc_libpcl.psstr 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    jump           #5600      
    jump           #5601      
#5596: 
    setargs                   1 0
    push           "Extproc"  u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.strpcl.p u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &pc_libpcl.psname 
    push           pc_libpcl.strpcl.p u64 
    push           3          
    pushptroff                u8 1 0
    jumpfalse      #5609      i64 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    setargs                   2 0
    push           pc_libpcl.strpcl.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_libpcl.strpcl.p u64 
    push           3          
    pushptroff                u8 1 0
    callfn         &pc_libpcl.strpmode u64 
    callproc       &pc_libpcl.psstr 
#5609: 
    jump           #5600      
    jump           #5601      
#5597: 
    setargs                   1 0
    push           pc_libpcl.strpcl.p u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &pc_libpcl.psname 
    setargs                   1 0
    startmult                 
    push           pc_libpcl.strpcl.p u64 
    push           8          
    pushptroff                u64 1 0
    push           46         
    pushptroff                u16 1 0
    push           3          i64 
    dotindex                  i64 
    jumpfalse      #5610      u64 
    push           "::"       u64 
    resetmult                 
    jump           #5611      
#5610: 
    push           ":"        u64 
    endmult                   
#5611: 
    callproc       &pc_libpcl.psstr 
    jump           #5600      
    jump           #5601      
#5598: 
    setargs                   1 0
    push           "Endprogram" u64 
    callproc       &pc_libpcl.psstr 
    jump           #5600      
    jump           #5601      
#5599: 
#5601: 
    setargs                   1 0
    push           "    "     u64 
    callproc       &pc_libpcl.psstr 
    setargs                   2 0
    push           &pc_tables.pclnames 
    push           pc_libpcl.strpcl.opcode i64 
    pushptroff                u64 8 0
    push           1          i64 
    addrefoff                 u64 1 0
    push           &pc_libpcl.strpcl.str 
    callproc       &strcpy    
    setargs                   4 0
    push           32         i64 
    push           15         i64 
    push           &pc_libpcl.strpcl.str 
    push           pc_libpcl.dest u64 
    callproc       &mlibp.gs_leftstr 
    push           pc_libpcl.strpcl.p u64 
    pushptr                   u8 
    push           0          i64 
    jumpeq         #5612      i64 
    setargs                   1 0
    setargs                   1 0
    push           pc_libpcl.strpcl.p u64 
    callfn         &pc_libpcl.stropnd u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
#5612: 
    setargs                   1 0
    push           30         i64 
    callproc       &pc_libpcl.pstabto 
    push           pc_libpcl.strpcl.p u64 
    push           3          
    pushptroff                u8 1 0
    push           0          i64 
    jumpeq         #5613      i64 
    setargs                   1 0
    setargs                   2 0
    push           pc_libpcl.strpcl.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_libpcl.strpcl.p u64 
    push           3          
    pushptroff                u8 1 0
    callfn         &pc_libpcl.strpmode u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
#5613: 
    push           &pc_tables.pclhastype 
    push           pc_libpcl.strpcl.opcode i64 
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #5614      i64 
    push           pc_libpcl.strpcl.p u64 
    push           3          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #5615      i64 
    setargs                   1 0
    push           "void"     u64 
    callproc       &pc_libpcl.psstr 
#5615: 
    setargs                   1 0
    setargs                   2 0
    push           pc_libpcl.strpcl.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_libpcl.strpcl.p u64 
    push           16         
    pushptroff                i32 1 0
    callfn         &pc_libpcl.strpmode u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
#5614: 
    push           &pc_tables.pclextra 
    push           pc_libpcl.strpcl.opcode i64 
    pushptroff                u8 1 0
    jumpfalse      #5616      i64 
    setargs                   1 0
    push           pc_libpcl.strpcl.p u64 
    push           16         
    pushptroff                i32 1 0
    callproc       &pc_libpcl.psint 
    push           &pc_tables.pclextra 
    push           pc_libpcl.strpcl.opcode i64 
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #5617      i64 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.strpcl.p u64 
    push           20         
    pushptroff                i32 1 0
    callproc       &pc_libpcl.psint 
#5617: 
#5616: 
#5600: 
    retproc                   
End


Proc pc_libpcl.stropnd: u64
    param          pc_libpcl.stropnd.p u64 
    local          pc_libpcl.stropnd.length i64 
    local          pc_libpcl.stropnd.d u64 
    procentry                 
    push           pc_libpcl.stropnd.p u64 
    push           0          u64 
    jumpne         #5619      u64 
    push           ""         u64 
    setret                    u64 
    jump           #5620      
#5619: 
    push           pc_libpcl.stropnd.p u64 
    pushptr                   u8 
    push           4          i64 
    casejumpeq     #5621      i64 0
    push           5          i64 
    casejumpeq     #5622      i64 0
    push           7          i64 
    casejumpeq     #5623      i64 0
    push           8          i64 
    casejumpeq     #5624      i64 0
    push           1          i64 
    casejumpeq     #5625      i64 0
    push           2          i64 
    casejumpeq     #5626      i64 0
    push           3          i64 
    casejumpeq     #5627      i64 0
    push           0          i64 
    casejumpeq     #5628      i64 0
    push           6          i64 
    casejumpeq     #5629      i64 0
    push           9          i64 
    casejumpeq     #5630      i64 0
    popstack                  i64 
    jump           #5631      
#5621: 
    setargs                   2 0
    push           0          u64 
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &msysp.strint u64 
    setret                    u64 
    jump           #5620      
    jump           #5632      
#5622: 
    setargs                   1 0
    push           &pc_libpcl.stropnd.str 
    callproc       &msysp.m$print_startstr 
    setargs                   2 0
    push           "e16.16"   u64 
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                r64 1 0
    callproc       &msysp.m$print_r64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #5632      
#5623: 
    setargs                   1 0
    push           &pc_libpcl.stropnd.str 
    callproc       &msysp.m$print_startstr 
    setargs                   2 0
    push           "e16.16"   u64 
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                r32 1 0
    callproc       &msysp.m$print_r32 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #5632      
#5624: 
    setargs                   1 0
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &strlen    i64 
    store          pc_libpcl.stropnd.length i64 
    push           256        i64 
    jumpge         #5633      i64 
    setargs                   2 0
    push           "\""       u64 
    push           &pc_libpcl.stropnd.str 
    callproc       &strcpy    
    setargs                   2 0
    push           &pc_libpcl.stropnd.str 
    push           1          i64 
    addrefoff                 u64 1 0
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &pc_libpcl.convertstring 
    setargs                   2 0
    push           "\""       u64 
    push           &pc_libpcl.stropnd.str 
    callproc       &strcat    
    jump           #5634      
#5633: 
    push           pc_libpcl.longstring u64 
    jumpfalse      #5635      u64 
    setargs                   2 0
    push           pc_libpcl.longstringlen i64 
    push           pc_libpcl.longstring u64 
    callproc       &mlibp.pcm_free 
#5635: 
    push           pc_libpcl.stropnd.length i64 
    push           2          i64 
    mul                       i64 
    pop            pc_libpcl.longstringlen i64 
    setargs                   1 0
    push           pc_libpcl.longstringlen i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pc_libpcl.longstring u64 
    push           34         u64 
    push           pc_libpcl.longstring u64 
    popptr                    u8 
    setargs                   2 0
    push           pc_libpcl.longstring u64 
    push           1          i64 
    addrefoff                 u64 1 0
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libpcl.convertstring i64 
    pop            pc_libpcl.stropnd.length i64 
    push           34         u64 
    push           pc_libpcl.longstring u64 
    push           pc_libpcl.stropnd.length i64 
    popptroff                 u8 1 1
    push           0          u64 
    push           pc_libpcl.longstring u64 
    push           pc_libpcl.stropnd.length i64 
    popptroff                 u8 1 2
    push           pc_libpcl.longstring u64 
    setret                    u64 
    jump           #5620      
#5634: 
    jump           #5632      
#5625: 
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_libpcl.stropnd.d u64 
    setargs                   1 0
    push           &pc_libpcl.stropnd.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    startmult                 
    push           pc_libpcl.stropnd.d u64 
    push           46         
    pushptroff                u16 1 0
    push           8          i64 
    dotindex                  i64 
    jumpfalse      #5636      u64 
    push           "`"        u64 
    resetmult                 
    jump           #5637      
#5636: 
    push           ""         u64 
    endmult                   
#5637: 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           pc_libpcl.stropnd.d u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           pc_libpcl.stropnd.p u64 
    push           1          
    pushptroff                u8 1 0
    push           5          i64 
    setjumpeq      #5638      i64 
    push           6          i64 
    setjumpne      #5639      i64 
#5638: 
    setargs                   2 0
    push           ":"        u64 
    push           &pc_libpcl.stropnd.str 
    callproc       &strcat    
#5639: 
    jump           #5632      
#5626: 
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_libpcl.stropnd.d u64 
    setargs                   1 0
    push           &pc_libpcl.stropnd.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "&##"      u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    startmult                 
    push           pc_libpcl.stropnd.d u64 
    push           46         
    pushptroff                u16 1 0
    push           8          i64 
    dotindex                  i64 
    jumpfalse      #5640      u64 
    push           "`"        u64 
    resetmult                 
    jump           #5641      
#5640: 
    push           ""         u64 
    endmult                   
#5641: 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libpcl.stropnd.d u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #5632      
#5627: 
    setargs                   1 0
    push           &pc_libpcl.stropnd.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "## "      u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           "#"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                i64 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #5632      
#5628: 
    push           ""         u64 
    setret                    u64 
    jump           #5620      
    jump           #5632      
#5629: 
    setargs                   1 0
    push           &pc_libpcl.stropnd.str 
    callproc       &msysp.m$print_startstr 
    setargs                   3 0
    push           0          i64 
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                i128 1 0
    callproc       &msysp.m$print_i128 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #5632      
#5630: 
    setargs                   2 0
    push           0          u64 
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &msysp.strint u64 
    setret                    u64 
    jump           #5620      
    jump           #5632      
#5631: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pc_tables.opndnames 
    push           pc_libpcl.stropnd.p u64 
    pushptr                   u8 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           "<PCLOPND?>" u64 
    setret                    u64 
    jump           #5620      
#5632: 
    push           &pc_libpcl.stropnd.str 
    setret                    u64 
    jump           #5620      
#5620: 
    retfn                     u64 
End


Proc pc_libpcl.psstr:
    param          pc_libpcl.psstr.s u64 
    procentry                 
    setargs                   2 0
    push           pc_libpcl.psstr.s u64 
    push           pc_libpcl.dest u64 
    callproc       &mlibp.gs_str 
#5643: 
    retproc                   
End


Proc pc_libpcl.psline:
    procentry                 
    setargs                   1 0
    push           pc_libpcl.dest u64 
    callproc       &mlibp.gs_line 
#5645: 
    retproc                   
End


Proc pc_libpcl.psint:
    param          pc_libpcl.psint.a i64 
    procentry                 
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_libpcl.psint.a i64 
    callfn         &msysp.strint u64 
    push           pc_libpcl.dest u64 
    callproc       &mlibp.gs_str 
#5647: 
    retproc                   
End


Proc pc_libpcl.psname:
    param          pc_libpcl.psname.d u64 
    procentry                 
    push           pc_libpcl.psname.d u64 
    push           46         
    pushptroff                u16 1 0
    push           8          i64 
    dotindex                  i64 
    jumpfalse      #5649      u64 
    setargs                   2 0
    push           "`"        u64 
    push           pc_libpcl.dest u64 
    callproc       &mlibp.gs_str 
#5649: 
    setargs                   2 0
    push           pc_libpcl.psname.d u64 
    pushptr                   u64 
    push           pc_libpcl.dest u64 
    callproc       &mlibp.gs_str 
#5650: 
    retproc                   
End


Proc pc_libpcl.pstabto:
    param          pc_libpcl.pstabto.n i64 
    local          pc_libpcl.pstabto.col i64 
    procentry                 
    push           pc_libpcl.dest u64 
    push           8          
    pushptroff                i32 1 0
    push           pc_libpcl.destlinestart i64 
    sub                       i64 
    pop            pc_libpcl.pstabto.col i64 
    jump           #5652      
#5653: 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
    push           &pc_libpcl.pstabto.col 
    incr                      i64 1
#5652: 
    push           pc_libpcl.pstabto.n i64 
    push           pc_libpcl.pstabto.col i64 
    jumpgt         #5653      i64 
#5654: 
#5655: 
    retproc                   
End


Proc pc_libpcl.convertstring: i64
    param          pc_libpcl.convertstring.s u64 
    param          pc_libpcl.convertstring.t u64 
    local          pc_libpcl.convertstring.c i64 
    local          pc_libpcl.convertstring.t0 u64 
    procentry                 
    push           pc_libpcl.convertstring.t u64 
    pop            pc_libpcl.convertstring.t0 u64 
    jump           #5657      
#5658: 
    push           pc_libpcl.convertstring.c i64 
    switch         #5659      7 92
    opnd           #5660      
#5659: 
    switchlabel    #5661      
    switchlabel    #5661      
    switchlabel    #5662      
    switchlabel    #5663      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5664      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5661      
    switchlabel    #5661      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5665      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5660      
    switchlabel    #5666      
    endswitch                 
#5665: 
    push           92         u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    push           34         u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    jump           #5667      
#5663: 
    push           92         u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    push           110        u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    jump           #5667      
#5664: 
    push           92         u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    push           99         u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    jump           #5667      
#5662: 
    push           92         u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    push           116        u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    jump           #5667      
#5666: 
    push           92         u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    push           92         u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    jump           #5667      
#5661: 
    push           60         u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    push           pc_libpcl.convertstring.c i64 
    push           10         i64 
    idiv                      i64 
    push           48         i64 
    add                       u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    push           pc_libpcl.convertstring.c i64 
    push           10         i64 
    irem                      i64 
    push           48         i64 
    add                       u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    push           62         u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    jump           #5667      
#5660: 
    push           pc_libpcl.convertstring.c u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
#5667: 
#5657: 
    push           &pc_libpcl.convertstring.s 
    loadincr                  u64 1
    pushptr                   u8 
    store          pc_libpcl.convertstring.c i64 
    jumptrue       #5658      i64 
#5668: 
    push           0          u64 
    push           pc_libpcl.convertstring.t u64 
    popptr                    u8 
    push           pc_libpcl.convertstring.t u64 
    push           pc_libpcl.convertstring.t0 u64 
    subref                    i64 1
    setret                    i64 
    jump           #5669      
#5669: 
    retfn                     i64 
End


Proc pc_libpcl.strlabel:
    param          pc_libpcl.strlabel.labelno i64 
    param          pc_libpcl.strlabel.colon i64 
    procentry                 
    setargs                   1 0
    push           "#"        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.strlabel.labelno i64 
    callproc       &pc_libpcl.psint 
    push           pc_libpcl.strlabel.colon i64 
    jumpfalse      #5671      i64 
    setargs                   1 0
    push           ":"        u64 
    callproc       &pc_libpcl.psstr 
#5671: 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
#5672: 
    retproc                   
End


Proc pc_libpcl.psopnd:
    param          pc_libpcl.psopnd.p u64 
    procentry                 
    setargs                   1 0
    setargs                   1 0
    push           pc_libpcl.psopnd.p u64 
    callfn         &pc_libpcl.stropnd u64 
    callproc       &pc_libpcl.psstr 
#5674: 
    retproc                   
End


Proc pc_libpcl.strpmode: u64
    param          pc_libpcl.strpmode.m i64 
    param          pc_libpcl.strpmode.size i64 
    procentry                 
    push           pc_libpcl.strpmode.m i64 
    push           13         i64 
    jumpeq         #5676      i64 
    setargs                   2 0
    push           &pc_tables.pstdnames 
    push           pc_libpcl.strpmode.m i64 
    pushptroff                u64 8 0
    push           &pc_libpcl.strpmode.str 
    callproc       &strcpy    
    jump           #5677      
#5676: 
    setargs                   1 0
    push           &pc_libpcl.strpmode.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "#:#"      u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           &pc_tables.pstdnames 
    push           pc_libpcl.strpmode.m i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libpcl.strpmode.size i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#5677: 
    push           &pc_libpcl.strpmode.str 
    setret                    u64 
    jump           #5678      
#5678: 
    retfn                     u64 
End


Proc pc_libpcl.writepcl:
    param          pc_libpcl.writepcl.p u64 
    procentry                 
    setargs                   1 0
    push           pc_libpcl.writepcl.p u64 
    callproc       &pc_libpcl.strpcl 
    setargs                   1 0
    push           pc_libpcl.dest u64 
    callproc       &mlibp.gs_line 
#5680: 
    retproc                   
End


Proc pc_libpcl.writeallpcl:
    local          pc_libpcl.writeallpcl.p u64 
    local          pc_libpcl.writeallpcl.d u64 
    local          pc_libpcl.writeallpcl.e u64 
    procentry                 
    setargs                   1 0
    push           pc_libpcl.dest u64 
    callproc       &mlibp.gs_init 
    push           pc_libpcl.dest u64 
    push           8          
    pushptroff                i32 1 0
    pop            pc_libpcl.destlinestart i64 
    push           pc_libpcl.pcstart u64 
    pop            pc_libpcl.writeallpcl.p u64 
    jump           #5682      
#5683: 
    setargs                   1 0
    push           pc_libpcl.writeallpcl.p u64 
    callproc       &pc_libpcl.writepcl 
    push           pc_libpcl.dest u64 
    push           8          
    pushptroff                i32 1 0
    pop            pc_libpcl.destlinestart i64 
    push           &pc_libpcl.writeallpcl.p 
    incr                      u64 32
#5682: 
    push           pc_libpcl.writeallpcl.p u64 
    push           pc_libpcl.pccurr u64 
    jumple         #5683      u64 
#5684: 
    push           pc_libpcl.longstring u64 
    jumpfalse      #5685      u64 
    setargs                   2 0
    push           pc_libpcl.longstringlen i64 
    push           pc_libpcl.longstring u64 
    callproc       &mlibp.pcm_free 
#5685: 
    push           pc_libpcl.dest u64 
    push           8          
    pushptroff                i32 1 0
    push           pc_libpcl.dest u64 
    pushptr                   u64 
    setretmult                2
    jump           #5686      
#5686: 
    retfn                     
End


Proc pc_libpcl.nextlabel: i64
    procentry                 
    push           pc_libpcl.labelno i64 
    push           100000     i64 
    jumplt         #5688      i64 
    setargs                   3 0
    push           0          i64 
    push           0          u64 
    push           "Too many global labels" u64 
    callproc       &pc_libpcl.pclerror 
#5688: 
    push           &pc_libpcl.labelno 
    incrload                  i64 1
    setret                    i64 
    jump           #5689      
#5689: 
    retfn                     i64 
End


Proc pc_libpcl.fixlabel: i64
    param          pc_libpcl.fixlabel.userlab i64 
    procentry                 
    push           pc_libpcl.fixlabel.userlab i64 
    push           1          i64 
    push           100000     i64 
    jumpinrange    #5691      i64 
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_libpcl.fixlabel.userlab i64 
    callfn         &msysp.strint u64 
    push           "Label no out of range:" u64 
    callproc       &pc_libpcl.perror_s 
#5691: 
    startmult                 
    push           &pc_libpcl.labelmap 
    push           pc_libpcl.fixlabel.userlab i64 
    pushptroff                i32 4 -4
    push           0          i64 
    jumpne         #5692      i64 
    setargs                   0 0
    callfn         &pc_libpcl.nextlabel i64 
    push           &pc_libpcl.labelmap 
    push           pc_libpcl.fixlabel.userlab i64 
    popptroff                 i32 4 -4
    push           pc_libpcl.labelno i64 
    resetmult                 
    jump           #5693      
#5692: 
    push           &pc_libpcl.labelmap 
    push           pc_libpcl.fixlabel.userlab i64 
    pushptroff                i32 4 -4
    endmult                   
#5693: 
    setret                    i64 
    jump           #5694      
#5694: 
    retfn                     i64 
End


Proc pc_libpcl.pdefinelabel:
    param          pc_libpcl.pdefinelabel.label i64 
    param          pc_libpcl.pdefinelabel.seqno i64 
    procentry                 
    push           &pc_libpcl.labeloffset 
    push           pc_libpcl.pdefinelabel.label i64 
    pushptroff                u64 8 -8
    jumpfalse      #5696      u64 
    setargs                   3 0
    push           0          i64 
    setargs                   2 0
    push           0          u64 
    push           pc_libpcl.pdefinelabel.label i64 
    callfn         &msysp.strint u64 
    push           "Redefining label:" u64 
    callproc       &pc_libpcl.pclerror 
#5696: 
    setargs                   2 0
    setargs                   1 0
    push           pc_libpcl.pdefinelabel.label i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    push           20         i64 
    callproc       &pc_libpcl.pcl_gen 
    push           pc_libpcl.pdefinelabel.seqno i64 
    push           pc_libpcl.pccurr u64 
    push           24         
    popptroff                 u32 1 0
    push           pc_libpcl.pccurr u64 
    push           &pc_libpcl.labeloffset 
    push           pc_libpcl.pdefinelabel.label i64 
    popptroff                 u64 8 -8
#5697: 
    retproc                   
End


Proc pc_libpcl.assignlabeltoname:
    param          pc_libpcl.assignlabeltoname.d u64 
    procentry                 
    push           pc_libpcl.assignlabeltoname.d u64 
    push           40         
    pushptroff                i32 1 0
    jumpfalse      #5699      i64 
    jump           #5700      
#5699: 
    setargs                   0 0
    callfn         &pc_libpcl.nextlabel i64 
    push           pc_libpcl.assignlabeltoname.d u64 
    push           40         
    popptroff                 i32 1 0
#5700: 
    retproc                   
End


Proc pc_libpcl.pclerror:
    param          pc_libpcl.pclerror.mess u64 
    param          pc_libpcl.pclerror.param u64 
    param          pc_libpcl.pclerror.lineno i64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "PCC error:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libpcl.pclerror.mess u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           pc_libpcl.pclerror.param u64 
    jumpfalse      #5702      u64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           pc_libpcl.pclerror.param u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#5702: 
    push           pc_libpcl.pclerror.lineno i64 
    jumpfalse      #5703      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           " on line:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libpcl.pclerror.lineno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#5703: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#5704: 
    retproc                   
End


Proc pc_libpcl.getpclstr: u64
    param          pc_libpcl.getpclstr.p u64 
    procentry                 
    setargs                   1 0
    push           pc_libpcl.dest u64 
    callproc       &mlibp.gs_init 
    push           pc_libpcl.dest u64 
    push           8          
    pushptroff                i32 1 0
    pop            pc_libpcl.destlinestart i64 
    setargs                   1 0
    push           pc_libpcl.getpclstr.p u64 
    callproc       &pc_libpcl.strpcl 
    push           0          u64 
    push           pc_libpcl.dest u64 
    pushptr                   u64 
    push           pc_libpcl.dest u64 
    push           8          
    pushptroff                i32 1 0
    popptroff                 u8 1 0
    push           pc_libpcl.dest u64 
    pushptr                   u64 
    setret                    u64 
    jump           #5706      
#5706: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_getopcode:: i64
    procentry                 
    push           pc_libpcl.pccurr u64 
    push           1          
    pushptroff                u8 1 0
    setret                    i64 
    jump           #5708      
#5708: 
    retfn                     i64 
End


Proc pc_libpcl.pcl_setopcode::
    param          pc_libpcl.pcl_setopcode.opc i64 
    procentry                 
    push           pc_libpcl.pcl_setopcode.opc i64 
    push           pc_libpcl.pccurr u64 
    push           1          
    popptroff                 u8 1 0
#5710: 
    retproc                   
End


Proc pc_libpcl.pcl_settype::
    param          pc_libpcl.pcl_settype.t i64 
    param          pc_libpcl.pcl_settype.size i64 
    procentry                 
    push           pc_libpcl.pcl_settype.t i64 
    push           pc_libpcl.pccurr u64 
    push           3          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_settype.size i64 
    push           pc_libpcl.pccurr u64 
    push           4          
    popptroff                 i32 1 0
    push           pc_libpcl.pcl_settype.t i64 
    push           0          i64 
    jumpge         #5712      i64 
    push           13         i64 
    push           pc_libpcl.pccurr u64 
    push           3          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_settype.t i64 
    neg                       i64 
    push           pc_libpcl.pccurr u64 
    push           4          
    popptroff                 i32 1 0
#5712: 
#5713: 
    retproc                   
End


Proc pc_libpcl.pcl_setxy::
    param          pc_libpcl.pcl_setxy.x i64 
    param          pc_libpcl.pcl_setxy.y i64 
    procentry                 
    push           pc_libpcl.pcl_setxy.x i64 
    push           pc_libpcl.pccurr u64 
    push           16         
    popptroff                 i32 1 0
    push           pc_libpcl.pcl_setxy.y i64 
    push           pc_libpcl.pccurr u64 
    push           20         
    popptroff                 i32 1 0
#5715: 
    retproc                   
End


Proc pc_libpcl.pcl_setscale::
    param          pc_libpcl.pcl_setscale.scale i64 
    procentry                 
    push           pc_libpcl.pcl_setscale.scale i64 
    push           pc_libpcl.pccurr u64 
    push           16         
    popptroff                 i32 1 0
#5717: 
    retproc                   
End


Proc pc_libpcl.pcl_setoffset::
    param          pc_libpcl.pcl_setoffset.offset i64 
    procentry                 
    push           pc_libpcl.pcl_setoffset.offset i64 
    push           pc_libpcl.pccurr u64 
    push           20         
    popptroff                 i32 1 0
#5719: 
    retproc                   
End


Proc pc_libpcl.pcl_addoffset::
    param          pc_libpcl.pcl_addoffset.offset i64 
    procentry                 
    push           pc_libpcl.pccurr u64 
    push           20         
    addrefoff                 u64 1 0
    push           pc_libpcl.pcl_addoffset.offset i64 
    addto                     i32 
#5721: 
    retproc                   
End


Proc pc_libpcl.pcl_setincr::
    param          pc_libpcl.pcl_setincr.n i64 
    procentry                 
    push           pc_libpcl.pcl_setincr.n i64 
    push           pc_libpcl.pccurr u64 
    push           16         
    popptroff                 i32 1 0
#5723: 
    retproc                   
End


Proc pc_libpcl.pcl_setnargs::
    param          pc_libpcl.pcl_setnargs.n i64 
    procentry                 
    push           pc_libpcl.pcl_setnargs.n i64 
    push           pc_libpcl.pccurr u64 
    push           16         
    popptroff                 i32 1 0
#5725: 
    retproc                   
End


Proc pc_libpcl.pcl_setnmult::
    param          pc_libpcl.pcl_setnmult.n i64 
    procentry                 
    setargs                   1 0
    push           "SETNMULT" u64 
    callproc       &mlibp.abortprogram 
#5727: 
    retproc                   
End


Proc pc_libpcl.pcl_setrettypes::
    param          pc_libpcl.pcl_setrettypes.types u64 
    param          pc_libpcl.pcl_setrettypes.n i64 
    procentry                 
    setargs                   1 0
    push           "SETRETTYPES" u64 
    callproc       &mlibp.abortprogram 
#5729: 
    retproc                   
End


Proc pc_libpcl.pcl_setexported::
    param          pc_libpcl.pcl_setexported.x i64 
    procentry                 
    push           pc_libpcl.pcl_setexported.x u64 
    push           pc_libpcl.pccurr u64 
    push           2          
    addrefoff                 u64 1 0
    push           0          i64 
    popdotindex               u8 
    push           pc_libpcl.pccurr u64 
    push           8          
    pushptroff                u64 1 0
    jumpfalse      #5731      u64 
    push           pc_libpcl.pcl_setexported.x u64 
    push           pc_libpcl.pccurr u64 
    push           8          
    pushptroff                u64 1 0
    push           46         
    addrefoff                 u64 1 0
    push           3          i64 
    popdotindex               u16 
#5731: 
#5732: 
    retproc                   
End


Proc pc_libpcl.pcl_isthreaded::
    param          pc_libpcl.pcl_isthreaded.x i64 
    procentry                 
    push           pc_libpcl.pccurr u64 
    push           8          
    pushptroff                u64 1 0
    jumpfalse      #5734      u64 
    push           pc_libpcl.pcl_isthreaded.x u64 
    push           pc_libpcl.pccurr u64 
    push           8          
    pushptroff                u64 1 0
    push           46         
    addrefoff                 u64 1 0
    push           7          i64 
    popdotindex               u16 
#5734: 
#5735: 
    retproc                   
End


Proc pc_libpcl.pcl_setnvariadics::
    param          pc_libpcl.pcl_setnvariadics.n i64 
    procentry                 
    push           pc_libpcl.pcl_setnvariadics.n i64 
    push           pc_libpcl.pccurr u64 
    push           20         
    popptroff                 i32 1 0
#5737: 
    retproc                   
End


Proc pc_libpcl.pcl_setalign::
    param          pc_libpcl.pcl_setalign.n i64 
    procentry                 
    push           pc_libpcl.pcl_setalign.n i64 
    push           pc_libpcl.pccurr u64 
    push           16         
    popptroff                 i32 1 0
#5739: 
    retproc                   
End


Proc pc_libpcl.pcl_setrtsproc::
    procentry                 
    push           pc_libpcl.pccurr u64 
    push           8          
    pushptroff                u64 1 0
    jumpfalse      #5741      u64 
    push           pc_libpcl.pccurr u64 
    push           1          
    pushptroff                u8 1 0
    push           8          i64 
    jumpne         #5741      i64 
    setargs                   1 0
    push           pc_libpcl.pccurr u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &pc_libpcl.definertsproc 
#5741: 
#5742: 
    retproc                   
End


Proc pc_libpcl.pcl_setoldtype::
    param          pc_libpcl.pcl_setoldtype.t i64 
    procentry                 
    push           pc_libpcl.pcl_setoldtype.t i64 
    push           pc_libpcl.pccurr u64 
    push           16         
    popptroff                 i32 1 0
#5744: 
    retproc                   
End


Proc pc_libpcl.pcl_setpos::
    param          pc_libpcl.pcl_setpos.pos i64 
    procentry                 
    setargs                   1 0
    push           "SETPOS"   u64 
    callproc       &mlibp.abortprogram 
#5746: 
    retproc                   
End


Proc pc_libpcl.pcl_lasterror:: u64
    procentry                 
    push           pc_libpcl.errormess u64 
    setret                    u64 
    jump           #5748      
#5748: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_writepclfile:: i64
    param          pc_libpcl.pcl_writepclfile.filename u64 
    local          pc_libpcl.pcl_writepclfile.source u64 
    local          pc_libpcl.pcl_writepclfile.length i64 
    procentry                 
    setargs                   0 0
    callproc       &pc_libpcl.fixuppcl 
    setargs                   0 0
    callfn         &pc_libpcl.writeallpcl 
    type                      u64 
    type                      i64 
    pop            pc_libpcl.pcl_writepclfile.source u64 
    pop            pc_libpcl.pcl_writepclfile.length i64 
    setargs                   3 0
    push           pc_libpcl.pcl_writepclfile.length i64 
    push           pc_libpcl.pcl_writepclfile.source u64 
    push           pc_libpcl.pcl_writepclfile.filename u64 
    callfn         &mlibp.writefile i64 
    setret                    i64 
    jump           #5750      
#5750: 
    retfn                     i64 
End


Proc pc_libpcl.perror:
    param          pc_libpcl.perror.mess u64 
    procentry                 
    setargs                   2 0
    push           0          u64 
    push           pc_libpcl.perror.mess u64 
    callproc       &pc_libpcl.perror_s 
#5752: 
    retproc                   
End


Proc pc_libpcl.perror_s:
    param          pc_libpcl.perror_s.mess u64 
    param          pc_libpcl.perror_s.param u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "PCL error:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libpcl.perror_s.mess u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           pc_libpcl.perror_s.param u64 
    jumpfalse      #5754      u64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           ":"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libpcl.perror_s.param u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#5754: 
    push           1          i64 
    stop                      
#5755: 
    retproc                   
End


Proc pc_libpcl.writesymbols:
    local          pc_libpcl.writesymbols.p u64 
    local          pc_libpcl.writesymbols.d u64 
    local          pc_libpcl.writesymbols.e u64 
    procentry                 
    push           pc_libpcl.pcstart u64 
    pop            pc_libpcl.writesymbols.p u64 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    setargs                   1 0
    push           "PROC PCL DEF OPS" u64 
    callproc       &pc_libpcl.psstr 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    jump           #5757      
#5758: 
    push           pc_libpcl.writesymbols.p u64 
    push           1          
    pushptroff                u8 1 0
    push           8          i64 
    casejumpeq     #5759      i64 0
    push           5          i64 
    casejumpeq     #5759      i64 0
    push           6          i64 
    casejumpeq     #5759      i64 0
    push           12         i64 
    casejumpeq     #5759      i64 0
    push           21         i64 
    casejumpeq     #5759      i64 0
    push           18         i64 
    casejumpeq     #5759      i64 0
    push           19         i64 
    casejumpeq     #5759      i64 0
    popstack                  i64 
    jump           #5760      
#5759: 
    push           pc_libpcl.writesymbols.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_libpcl.writesymbols.d u64 
    setargs                   1 0
    push           pc_libpcl.writesymbols.p i64 
    callproc       &pc_libpcl.psint 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.d i64 
    callproc       &pc_libpcl.psint 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.d u64 
    pushptr                   u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           ": "       u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.p u64 
    push           24         
    pushptroff                u32 1 0
    callproc       &pc_libpcl.psint 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    setargs                   1 0
    push           "\tOpcode:" u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           &pc_tables.pclnames 
    push           pc_libpcl.writesymbols.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &pc_libpcl.psstr 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    setargs                   1 0
    push           "\tPCLdef:" u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    startmult                 
    push           pc_libpcl.writesymbols.d u64 
    push           16         
    pushptroff                u64 1 0
    jumpfalse      #5761      u64 
    push           &pc_tables.pclnames 
    push           pc_libpcl.writesymbols.d u64 
    push           16         
    pushptroff                u64 1 0
    push           1          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    resetmult                 
    jump           #5762      
#5761: 
    push           "---"      u64 
    endmult                   
#5762: 
    callproc       &pc_libpcl.psstr 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    setargs                   1 0
    push           "\tIsdefined:" u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.d u64 
    push           46         
    pushptroff                u16 1 0
    push           0          i64 
    dotindex                  i64 
    callproc       &pc_libpcl.psint 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    setargs                   1 0
    push           "\tIsexported:" u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.d u64 
    push           46         
    pushptroff                u16 1 0
    push           3          i64 
    dotindex                  i64 
    callproc       &pc_libpcl.psint 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    setargs                   1 0
    push           "\tIsimported:" u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.d u64 
    push           46         
    pushptroff                u16 1 0
    push           1          i64 
    dotindex                  i64 
    callproc       &pc_libpcl.psint 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    setargs                   1 0
    push           "\tExtvariadics:" u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.p u64 
    push           16         
    pushptroff                i32 1 0
    callproc       &pc_libpcl.psint 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    setargs                   1 0
    push           "\tIsaddrof:" u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.d u64 
    push           46         
    pushptroff                u16 1 0
    push           2          i64 
    dotindex                  i64 
    callproc       &pc_libpcl.psint 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    setargs                   1 0
    push           "\tLabel#:" u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.d u64 
    push           40         
    pushptroff                i32 1 0
    callproc       &pc_libpcl.psint 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    jump           #5763      
#5760: 
#5763: 
#5764: 
    push           &pc_libpcl.writesymbols.p 
    incr                      u64 32
#5757: 
    push           pc_libpcl.writesymbols.p u64 
    push           pc_libpcl.pccurr u64 
    jumple         #5758      u64 
#5765: 
    push           pc_libpcl.pcstart u64 
    pop            pc_libpcl.writesymbols.p u64 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    setargs                   1 0
    push           "PROC PCL UNDEFINED MEM REFS" u64 
    callproc       &pc_libpcl.psstr 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    jump           #5766      
#5767: 
    push           pc_libpcl.writesymbols.p u64 
    pushptr                   u8 
    push           1          i64 
    setjumpeq      #5768      i64 
    push           2          i64 
    setjumpne      #5769      i64 
#5768: 
    push           pc_libpcl.writesymbols.p u64 
    push           8          
    pushptroff                u64 1 0
    push           46         
    pushptroff                u16 1 0
    push           0          i64 
    dotindex                  i64 
    jumptrue       #5769      u64 
    push           pc_libpcl.writesymbols.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_libpcl.writesymbols.d u64 
    setargs                   1 0
    push           pc_libpcl.writesymbols.p i64 
    callproc       &pc_libpcl.psint 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.d i64 
    callproc       &pc_libpcl.psint 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           "Not defined: " u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.d u64 
    pushptr                   u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.p u64 
    push           24         
    pushptroff                u32 1 0
    callproc       &pc_libpcl.psint 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    push           1          u64 
    push           pc_libpcl.writesymbols.d u64 
    push           46         
    addrefoff                 u64 1 0
    push           0          i64 
    popdotindex               u16 
#5769: 
#5770: 
    push           &pc_libpcl.writesymbols.p 
    incr                      u64 32
#5766: 
    push           pc_libpcl.writesymbols.p u64 
    push           pc_libpcl.pccurr u64 
    jumple         #5767      u64 
#5771: 
#5772: 
    retproc                   
End


Proc pc_libpcl.getbasename: u64
    param          pc_libpcl.getbasename.s u64 
    local          pc_libpcl.getbasename.t u64 
    procentry                 
    push           pc_libpcl.getbasename.s u64 
    setargs                   1 0
    push           pc_libpcl.getbasename.s u64 
    callfn         &strlen    i64 
    addrefoff                 u64 1 -1
    pop            pc_libpcl.getbasename.t u64 
    jump           #5774      
#5775: 
    push           &pc_libpcl.getbasename.t 
    decr                      u64 1
#5774: 
    push           pc_libpcl.getbasename.t u64 
    push           pc_libpcl.getbasename.s u64 
    jumple         #5776      u64 
    push           pc_libpcl.getbasename.t u64 
    push           1          i64 
    subrefoff                 u64 1 0
    pushptr                   u8 
    push           46         u64 
    jumpne         #5775      u64 
#5776: 
#5777: 
    push           pc_libpcl.getbasename.t u64 
    setret                    u64 
    jump           #5778      
#5778: 
    retfn                     u64 
End


Proc pc_libpcl.definertsproc:
    param          pc_libpcl.definertsproc.d u64 
    local          pc_libpcl.definertsproc.s u64 
    local          pc_libpcl.definertsproc.c i64 
    local          pc_libpcl.definertsproc.av_1 i64 
    local          pc_libpcl.definertsproc.i i64 
    procentry                 
    push           pc_libpcl.definertsproc.d u64 
    pushptr                   u64 
    pop            pc_libpcl.definertsproc.s u64 
    jump           #5780      
#5781: 
#5780: 
    push           &pc_libpcl.definertsproc.s 
    loadincr                  u64 1
    pushptr                   u8 
    store          pc_libpcl.definertsproc.c i64 
    push           36         i64 
    jumpne         #5781      i64 
#5782: 
#5783: 
    push           1          i64 
    pop            pc_libpcl.definertsproc.i i64 
    push           6          i64 
    pop            pc_libpcl.definertsproc.av_1 i64 
    push           pc_libpcl.definertsproc.av_1 i64 
    push           1          i64 
    jumplt         #5784      i64 
#5785: 
    setargs                   2 0
    push           pc_libpcl.definertsproc.s u64 
    push           &pc_tables.rtsnames 
    push           pc_libpcl.definertsproc.i i64 
    pushptroff                u64 8 -8
    push           4          i64 
    addrefoff                 u64 1 0
    callfn         &mlibp.eqstring i64 
    jumpfalse      #5786      i64 
    push           1          u64 
    push           pc_libpcl.definertsproc.d u64 
    push           46         
    addrefoff                 u64 1 0
    push           9          i64 
    popdotindex               u16 
    push           pc_libpcl.definertsproc.i i64 
    push           pc_libpcl.definertsproc.d u64 
    push           26         
    popptroff                 u8 1 0
    push           pc_libpcl.definertsproc.d u64 
    push           &pc_decls.rtsproctable 
    push           pc_libpcl.definertsproc.i i64 
    popptroff                 u64 8 -8
    jump           #5787      
#5786: 
#5788: 
    forup          #5785      i64 1
    opnd           pc_libpcl.definertsproc.i 
    opnd           pc_libpcl.definertsproc.av_1 
#5784: 
#5789: 
#5787: 
    retproc                   
End


Proc pc_lex.lex:
    local          pc_lex.lex.i i64 
    local          pc_lex.lex.c i64 
    local          pc_lex.lex.d i64 
    local          pc_lex.lex.hsum i64 
    local          pc_lex.lex.length i64 
    local          pc_lex.lex.pstart u64 
    procentry                 
    push           0          i64 
    pop            pc_lex.lxsubcode i64 
#5791: 
    push           &pc_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    store          pc_lex.lex.c i64 
    switch         #5792      0 122
    opnd           #5793      
#5792: 
    switchlabel    #5794      
    switchlabel    #5793      
    switchlabel    #5793      
    switchlabel    #5793      
    switchlabel    #5793      
    switchlabel    #5793      
    switchlabel    #5793      
    switchlabel    #5793      
    switchlabel    #5793      
    switchlabel    #5795      
    switchlabel    #5796      
    switchlabel    #5793      
    switchlabel    #5793      
    switchlabel    #5797      
    switchlabel    #5793      
    switchlabel    #5793      
    switchlabel    #5793      
    switchlabel    #5793      
    switchlabel    #5793      
    switchlabel    #5793      
    switchlabel    #5793      
    switchlabel    #5793      
    switchlabel    #5793      
    switchlabel    #5793      
    switchlabel    #5793      
    switchlabel    #5793      
    switchlabel    #5794      
    switchlabel    #5793      
    switchlabel    #5793      
    switchlabel    #5793      
    switchlabel    #5793      
    switchlabel    #5793      
    switchlabel    #5795      
    switchlabel    #5798      
    switchlabel    #5799      
    switchlabel    #5800      
    switchlabel    #5801      
    switchlabel    #5793      
    switchlabel    #5802      
    switchlabel    #5793      
    switchlabel    #5793      
    switchlabel    #5793      
    switchlabel    #5803      
    switchlabel    #5793      
    switchlabel    #5804      
    switchlabel    #5805      
    switchlabel    #5801      
    switchlabel    #5793      
    switchlabel    #5806      
    switchlabel    #5806      
    switchlabel    #5806      
    switchlabel    #5806      
    switchlabel    #5806      
    switchlabel    #5806      
    switchlabel    #5806      
    switchlabel    #5806      
    switchlabel    #5806      
    switchlabel    #5806      
    switchlabel    #5807      
    switchlabel    #5798      
    switchlabel    #5793      
    switchlabel    #5793      
    switchlabel    #5793      
    switchlabel    #5793      
    switchlabel    #5793      
    switchlabel    #5808      
    switchlabel    #5808      
    switchlabel    #5808      
    switchlabel    #5808      
    switchlabel    #5808      
    switchlabel    #5808      
    switchlabel    #5808      
    switchlabel    #5808      
    switchlabel    #5808      
    switchlabel    #5808      
    switchlabel    #5808      
    switchlabel    #5808      
    switchlabel    #5808      
    switchlabel    #5808      
    switchlabel    #5808      
    switchlabel    #5808      
    switchlabel    #5808      
    switchlabel    #5808      
    switchlabel    #5808      
    switchlabel    #5808      
    switchlabel    #5808      
    switchlabel    #5808      
    switchlabel    #5808      
    switchlabel    #5808      
    switchlabel    #5808      
    switchlabel    #5808      
    switchlabel    #5793      
    switchlabel    #5793      
    switchlabel    #5793      
    switchlabel    #5793      
    switchlabel    #5801      
    switchlabel    #5809      
    switchlabel    #5801      
    switchlabel    #5801      
    switchlabel    #5801      
    switchlabel    #5801      
    switchlabel    #5801      
    switchlabel    #5801      
    switchlabel    #5801      
    switchlabel    #5801      
    switchlabel    #5801      
    switchlabel    #5801      
    switchlabel    #5801      
    switchlabel    #5801      
    switchlabel    #5801      
    switchlabel    #5801      
    switchlabel    #5801      
    switchlabel    #5801      
    switchlabel    #5801      
    switchlabel    #5801      
    switchlabel    #5801      
    switchlabel    #5801      
    switchlabel    #5801      
    switchlabel    #5801      
    switchlabel    #5801      
    switchlabel    #5801      
    switchlabel    #5801      
    switchlabel    #5801      
    endswitch                 
#5801: 
    push           pc_lex.lxsptr u64 
    push           1          i64 
    subrefoff                 u64 1 0
    pop            pc_lex.lex.pstart u64 
!doname::
#5810: 
    push           pc_lex.lex.pstart u64 
    pushptr                   u8 
    pop            pc_lex.lex.hsum i64 
#5811: 
    push           &pc_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    store          pc_lex.lex.c i64 
    switch         #5812      36 122
    opnd           #5813      
#5812: 
    switchlabel    #5814      
    switchlabel    #5813      
    switchlabel    #5813      
    switchlabel    #5813      
    switchlabel    #5813      
    switchlabel    #5813      
    switchlabel    #5813      
    switchlabel    #5813      
    switchlabel    #5813      
    switchlabel    #5813      
    switchlabel    #5814      
    switchlabel    #5813      
    switchlabel    #5814      
    switchlabel    #5814      
    switchlabel    #5814      
    switchlabel    #5814      
    switchlabel    #5814      
    switchlabel    #5814      
    switchlabel    #5814      
    switchlabel    #5814      
    switchlabel    #5814      
    switchlabel    #5814      
    switchlabel    #5813      
    switchlabel    #5813      
    switchlabel    #5813      
    switchlabel    #5813      
    switchlabel    #5813      
    switchlabel    #5813      
    switchlabel    #5813      
    switchlabel    #5815      
    switchlabel    #5815      
    switchlabel    #5815      
    switchlabel    #5815      
    switchlabel    #5815      
    switchlabel    #5815      
    switchlabel    #5815      
    switchlabel    #5815      
    switchlabel    #5815      
    switchlabel    #5815      
    switchlabel    #5815      
    switchlabel    #5815      
    switchlabel    #5815      
    switchlabel    #5815      
    switchlabel    #5815      
    switchlabel    #5815      
    switchlabel    #5815      
    switchlabel    #5815      
    switchlabel    #5815      
    switchlabel    #5815      
    switchlabel    #5815      
    switchlabel    #5815      
    switchlabel    #5815      
    switchlabel    #5815      
    switchlabel    #5815      
    switchlabel    #5815      
    switchlabel    #5813      
    switchlabel    #5813      
    switchlabel    #5813      
    switchlabel    #5813      
    switchlabel    #5814      
    switchlabel    #5813      
    switchlabel    #5814      
    switchlabel    #5814      
    switchlabel    #5814      
    switchlabel    #5814      
    switchlabel    #5814      
    switchlabel    #5814      
    switchlabel    #5814      
    switchlabel    #5814      
    switchlabel    #5814      
    switchlabel    #5814      
    switchlabel    #5814      
    switchlabel    #5814      
    switchlabel    #5814      
    switchlabel    #5814      
    switchlabel    #5814      
    switchlabel    #5814      
    switchlabel    #5814      
    switchlabel    #5814      
    switchlabel    #5814      
    switchlabel    #5814      
    switchlabel    #5814      
    switchlabel    #5814      
    switchlabel    #5814      
    switchlabel    #5814      
    switchlabel    #5814      
    switchlabel    #5814      
    endswitch                 
#5814: 
    push           pc_lex.lex.hsum i64 
    push           4          i64 
    shl                       i64 
    push           pc_lex.lex.hsum i64 
    sub                       i64 
    push           pc_lex.lex.c i64 
    add                       i64 
    pop            pc_lex.lex.hsum i64 
    jump           #5811      
#5815: 
    push           pc_lex.lex.c i64 
    push           32         i64 
    add                       i64 
    push           pc_lex.lxsptr u64 
    push           1          i64 
    subrefoff                 u64 1 0
    popptr                    u8 
    push           pc_lex.lex.hsum i64 
    push           4          i64 
    shl                       i64 
    push           pc_lex.lex.hsum i64 
    sub                       i64 
    push           pc_lex.lex.c i64 
    add                       i64 
    push           32         i64 
    add                       i64 
    pop            pc_lex.lex.hsum i64 
    jump           #5811      
#5813: 
    push           &pc_lex.lxsptr 
    decr                      u64 1
    jump           #5816      
    jump           #5811      
#5816: 
    push           pc_lex.lxsptr u64 
    push           pc_lex.lex.pstart u64 
    subref                    i64 1
    pop            pc_lex.lxlength i64 
    push           pc_lex.lex.hsum i64 
    push           5          i64 
    shl                       i64 
    push           pc_lex.lex.hsum i64 
    sub                       i64 
    pop            pc_lex.lxhashvalue i64 
    push           0          i64 
    pop            pc_lex.lxtruename u8 
    setargs                   2 0
    push           pc_lex.lxlength i64 
    push           pc_lex.lex.pstart u64 
    callfn         &pc_lex.lookuplex i64 
    jumpfalse      #5817      i64 
    push           pc_lex.lxsymptr u64 
    push           25         
    pushptroff                u8 1 0
    jumpfalse      #5818      i64 
    push           pc_lex.lxsymptr u64 
    push           25         
    pushptroff                u8 1 0
    pop            pc_lex.lxsymbol i64 
    push           pc_lex.lxsymptr u64 
    push           26         
    pushptroff                u8 1 0
    pop            pc_lex.lxsubcode i64 
    jump           #5819      
#5818: 
    push           pc_lex.lxsymptr u64 
    push           24         
    pushptroff                u8 1 0
    pop            pc_lex.lxsymbol i64 
#5819: 
    jump           #5820      
#5817: 
    push           19         i64 
    pop            pc_lex.lxsymbol i64 
#5820: 
    jump           #5821      
    jump           #5791      
#5808: 
    push           pc_lex.lxsptr u64 
    push           1          i64 
    subrefoff                 u64 1 0
    pop            pc_lex.lex.pstart u64 
    push           pc_lex.lex.pstart u64 
    pushptr                   u8 
    push           32         i64 
    add                       i64 
    push           pc_lex.lex.pstart u64 
    storeptr                  u8 
    pop            pc_lex.lex.c i64 
    jump           #5810      
    jump           #5791      
#5806: 
    setargs                   2 0
    push           1          i64 
    push           pc_lex.lex.c i64 
    callproc       &pc_lex.readnumber 
    jump           #5821      
    jump           #5791      
#5809: 
    push           pc_lex.lxsptr u64 
    pop            pc_lex.lex.pstart u64 
    push           0          i64 
    pop            pc_lex.lex.hsum i64 
#5822: 
    push           pc_lex.lxsptr u64 
    pushptr                   u8 
    store          pc_lex.lex.c i64 
    switch         #5823      36 122
    opnd           #5824      
#5823: 
    switchlabel    #5825      
    switchlabel    #5824      
    switchlabel    #5824      
    switchlabel    #5824      
    switchlabel    #5824      
    switchlabel    #5824      
    switchlabel    #5824      
    switchlabel    #5824      
    switchlabel    #5824      
    switchlabel    #5824      
    switchlabel    #5825      
    switchlabel    #5824      
    switchlabel    #5825      
    switchlabel    #5825      
    switchlabel    #5825      
    switchlabel    #5825      
    switchlabel    #5825      
    switchlabel    #5825      
    switchlabel    #5825      
    switchlabel    #5825      
    switchlabel    #5825      
    switchlabel    #5825      
    switchlabel    #5824      
    switchlabel    #5824      
    switchlabel    #5824      
    switchlabel    #5824      
    switchlabel    #5824      
    switchlabel    #5824      
    switchlabel    #5824      
    switchlabel    #5825      
    switchlabel    #5825      
    switchlabel    #5825      
    switchlabel    #5825      
    switchlabel    #5825      
    switchlabel    #5825      
    switchlabel    #5825      
    switchlabel    #5825      
    switchlabel    #5825      
    switchlabel    #5825      
    switchlabel    #5825      
    switchlabel    #5825      
    switchlabel    #5825      
    switchlabel    #5825      
    switchlabel    #5825      
    switchlabel    #5825      
    switchlabel    #5825      
    switchlabel    #5825      
    switchlabel    #5825      
    switchlabel    #5825      
    switchlabel    #5825      
    switchlabel    #5825      
    switchlabel    #5825      
    switchlabel    #5825      
    switchlabel    #5825      
    switchlabel    #5825      
    switchlabel    #5824      
    switchlabel    #5824      
    switchlabel    #5824      
    switchlabel    #5824      
    switchlabel    #5825      
    switchlabel    #5824      
    switchlabel    #5825      
    switchlabel    #5825      
    switchlabel    #5825      
    switchlabel    #5825      
    switchlabel    #5825      
    switchlabel    #5825      
    switchlabel    #5825      
    switchlabel    #5825      
    switchlabel    #5825      
    switchlabel    #5825      
    switchlabel    #5825      
    switchlabel    #5825      
    switchlabel    #5825      
    switchlabel    #5825      
    switchlabel    #5825      
    switchlabel    #5825      
    switchlabel    #5825      
    switchlabel    #5825      
    switchlabel    #5825      
    switchlabel    #5825      
    switchlabel    #5825      
    switchlabel    #5825      
    switchlabel    #5825      
    switchlabel    #5825      
    switchlabel    #5825      
    switchlabel    #5825      
    endswitch                 
#5825: 
    push           &pc_lex.lxsptr 
    incr                      u64 1
    push           pc_lex.lex.hsum i64 
    push           4          i64 
    shl                       i64 
    push           pc_lex.lex.hsum i64 
    sub                       i64 
    push           pc_lex.lex.c i64 
    add                       i64 
    pop            pc_lex.lex.hsum i64 
    jump           #5822      
#5824: 
    jump           #5826      
    jump           #5822      
#5826: 
    push           19         i64 
    pop            pc_lex.lxsymbol i64 
    push           1          i64 
    pop            pc_lex.lxtruename u8 
    push           pc_lex.lex.pstart u64 
    push           pc_lex.lxsptr u64 
    jumpne         #5827      u64 
    setargs                   1 0
    push           "NULL ` name" u64 
    callproc       &pc_lex.lxerror 
#5827: 
    push           pc_lex.lxsptr u64 
    push           pc_lex.lex.pstart u64 
    subref                    i64 1
    pop            pc_lex.lxlength i64 
    push           pc_lex.lex.hsum i64 
    push           5          i64 
    shl                       i64 
    push           pc_lex.lex.hsum i64 
    sub                       i64 
    pop            pc_lex.lxhashvalue i64 
    setargs                   2 0
    push           pc_lex.lxlength i64 
    push           pc_lex.lex.pstart u64 
    callfn         &pc_lex.lookuplex i64 
    jumpfalse      #5828      i64 
    push           pc_lex.lxsymptr u64 
    push           24         
    pushptroff                u8 1 0
    pop            pc_lex.lxsymbol i64 
    push           pc_lex.lxsymbol i64 
    push           0          i64 
    jumpne         #5829      i64 
    push           19         i64 
    push           pc_lex.lxsymptr u64 
    push           24         
    storeptroff               u8 1 0
    pop            pc_lex.lxsymbol i64 
#5829: 
#5828: 
    jump           #5821      
    jump           #5791      
#5798: 
    jump           #5830      
#5831: 
#5830: 
    push           &pc_lex.commentmap 
    push           &pc_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    pushptroff                u8 1 0
    jumptrue       #5831      u64 
#5832: 
    push           pc_lex.lxsptr u64 
    push           1          i64 
    subrefoff                 u64 1 0
    pushptr                   u8 
    push           0          i64 
    jumpne         #5833      i64 
    push           &pc_lex.lxsptr 
    decr                      u64 1
#5833: 
    push           &pc_lex.lxlineno 
    incr                      i64 1
    push           12         i64 
    pop            pc_lex.lxsymbol i64 
    jump           #5821      
    jump           #5791      
#5800: 
    push           0          i64 
    pop            pc_lex.lxvalue i64 
#5834: 
    push           &pc_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    store          pc_lex.lex.c i64 
    switch         #5835      48 57
    opnd           #5836      
#5835: 
    switchlabel    #5837      
    switchlabel    #5837      
    switchlabel    #5837      
    switchlabel    #5837      
    switchlabel    #5837      
    switchlabel    #5837      
    switchlabel    #5837      
    switchlabel    #5837      
    switchlabel    #5837      
    switchlabel    #5837      
    endswitch                 
#5837: 
    push           pc_lex.lxvalue i64 
    push           10         i64 
    mul                       i64 
    push           pc_lex.lex.c i64 
    add                       i64 
    push           48         i64 
    sub                       i64 
    pop            pc_lex.lxvalue i64 
    jump           #5834      
#5836: 
    push           &pc_lex.lxsptr 
    decr                      u64 1
    jump           #5838      
    jump           #5834      
#5838: 
    push           pc_lex.lxvalue i64 
    push           0          i64 
    jumpne         #5839      i64 
    setargs                   1 0
    push           "Bad label" u64 
    callproc       &pc_lex.lxerror 
#5839: 
    push           pc_libpcl.labelnooffset i64 
    push           0          i64 
    jumpne         #5840      i64 
    push           &pc_libpcl.maxuserlabel 
    push           pc_lex.lxvalue i64 
    maxto                     i64 
    jump           #5841      
#5840: 
    push           &pc_lex.lxvalue 
    push           pc_libpcl.labelnooffset i64 
    addto                     i64 
#5841: 
    push           14         i64 
    pop            pc_lex.lxsymbol i64 
    jump           #5821      
    jump           #5791      
#5804: 
    push           2          i64 
    pop            pc_lex.lxsymbol i64 
    jump           #5821      
    jump           #5791      
#5807: 
    push           pc_lex.lxsptr u64 
    pushptr                   u8 
    push           58         i64 
    jumpne         #5842      i64 
    push           4          i64 
    pop            pc_lex.lxsymbol i64 
    push           &pc_lex.lxsptr 
    incr                      u64 1
    jump           #5843      
#5842: 
    push           3          i64 
    pop            pc_lex.lxsymbol i64 
#5843: 
    jump           #5821      
    jump           #5791      
#5805: 
    push           &pc_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    pop            pc_lex.lex.c i64 
    push           pc_lex.lex.c i64 
    push           48         u64 
    push           57         u64 
    jumpinrange    #5844      i64 
    setargs                   1 0
    push           "Bad no"   u64 
    callproc       &pc_lex.lxerror 
#5844: 
    setargs                   2 0
    push           -1         i64 
    push           pc_lex.lex.c i64 
    callproc       &pc_lex.readnumber 
    jump           #5821      
    jump           #5791      
#5803: 
    push           9          i64 
    pop            pc_lex.lxsymbol i64 
    jump           #5821      
    jump           #5791      
#5802: 
    push           10         i64 
    pop            pc_lex.lxsymbol i64 
    jump           #5821      
    jump           #5791      
#5799: 
    setargs                   0 0
    callproc       &pc_lex.readstring 
    jump           #5821      
    jump           #5791      
#5795: 
    jump           #5791      
#5797: 
    jump           #5791      
#5796: 
    push           &pc_lex.lxlineno 
    incr                      i64 1
    push           12         i64 
    pop            pc_lex.lxsymbol i64 
    jump           #5821      
    jump           #5791      
#5794: 
    push           13         i64 
    pop            pc_lex.lxsymbol i64 
    push           &pc_lex.lxsptr 
    decr                      u64 1
    jump           #5821      
    jump           #5791      
#5793: 
    push           1          i64 
    pop            pc_lex.lxsymbol i64 
    push           pc_lex.lex.c i64 
    pop            pc_lex.lxvalue i64 
    jump           #5821      
    jump           #5791      
#5845: 
#5821: 
    retproc                   
End


Proc pc_lex.initlex:
    local          pc_lex.initlex.i i64 
    procentry                 
    push           pc_lex.initlex.done u8 
    jumpfalse      #5847      i64 
    jump           #5848      
#5847: 
    push           0          i64 
    pop            pc_lex.lxsubcode i64 
    push           1          i64 
    pop            pc_lex.lxsymbol i64 
    push           0          i64 
    pop            pc_lex.lxlineno i64 
#5849: 
    push           0          i64 
    pop            pc_lex.initlex.i i64 
#5850: 
    push           1          u64 
    push           &pc_lex.commentmap 
    push           pc_lex.initlex.i i64 
    popptroff                 u8 1 0
#5851: 
    forup          #5850      i64 1
    opnd           pc_lex.initlex.i 
    opnd           255        
#5852: 
    push           0          u64 
    push           &pc_lex.commentmap 
    push           0          i64 
    popptroff                 u8 1 0
    push           0          u64 
    push           &pc_lex.commentmap 
    push           10         i64 
    popptroff                 u8 1 0
    setargs                   0 0
    callproc       &pc_lex.inithashtable 
    push           1          i64 
    pop            pc_lex.initlex.done u8 
#5848: 
    retproc                   
End


Proc pc_lex.readreal:
    param          pc_lex.readreal.s u64 
    param          pc_lex.readreal.slen i64 
    local          pc_lex.readreal.c i64 
    procentry                 
    push           pc_lex.lxsptr u64 
    pushptr                   u8 
    pop            pc_lex.readreal.c i64 
    push           0          i64 
    push           pc_lex.lxsptr u64 
    popptr                    u8 
    setargs                   2 0
    push           0          u64 
    push           pc_lex.readreal.s u64 
    callfn         &strtod    r64 
    pop            pc_lex.lxxvalue r64 
    push           pc_lex.readreal.c i64 
    push           pc_lex.lxsptr u64 
    popptr                    u8 
    push           16         i64 
    pop            pc_lex.lxsymbol i64 
#5854: 
    retproc                   
End


Proc pc_lex.readnumber:
    param          pc_lex.readnumber.c i64 
    param          pc_lex.readnumber.signx i64 
    local          pc_lex.readnumber.str block:256 
    local          pc_lex.readnumber.i i64 
    local          pc_lex.readnumber.d i64 
    local          pc_lex.readnumber.intlen i64 
    local          pc_lex.readnumber.slen i64 
    local          pc_lex.readnumber.isfloat i64 
    local          pc_lex.readnumber.sepseen i64 
    local          pc_lex.readnumber.s u64 
    procentry                 
    push           pc_lex.lxsptr u64 
    pushptr                   u8 
    pop            pc_lex.readnumber.d i64 
    push           pc_lex.readnumber.d i64 
    push           120        i64 
    casejumpeq     #5856      i64 0
    push           88         i64 
    casejumpeq     #5856      i64 0
    popstack                  i64 
    jump           #5857      
#5856: 
    push           pc_lex.readnumber.c i64 
    push           48         i64 
    casejumpeq     #5858      i64 0
    popstack                  i64 
    jump           #5859      
#5858: 
    push           &pc_lex.lxsptr 
    incr                      u64 1
    setargs                   0 0
    callproc       &pc_lex.readhex 
    push           &pc_lex.lxvalue 
    push           pc_lex.readnumber.signx i64 
    multo                     i64 
    jump           #5860      
    jump           #5861      
#5859: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           pc_lex.readnumber.c i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Base not supported" u64 
    callproc       &pc_lex.lxerror 
#5861: 
    jump           #5862      
#5857: 
#5862: 
    push           pc_lex.readnumber.c u64 
    push           &pc_lex.readnumber.str 
    push           1          i64 
    popptroff                 u8 1 -1
    push           pc_lex.lxsptr u64 
    push           1          i64 
    subrefoff                 u64 1 0
    pop            pc_lex.readnumber.s u64 
    push           1          i64 
    pop            pc_lex.readnumber.slen i64 
    push           0          i64 
    store          pc_lex.readnumber.sepseen i64 
    pop            pc_lex.readnumber.isfloat i64 
#5863: 
    push           &pc_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    store          pc_lex.readnumber.c i64 
    switch         #5864      39 101
    opnd           #5865      
#5864: 
    switchlabel    #5866      
    switchlabel    #5865      
    switchlabel    #5865      
    switchlabel    #5865      
    switchlabel    #5867      
    switchlabel    #5865      
    switchlabel    #5867      
    switchlabel    #5868      
    switchlabel    #5865      
    switchlabel    #5869      
    switchlabel    #5869      
    switchlabel    #5869      
    switchlabel    #5869      
    switchlabel    #5869      
    switchlabel    #5869      
    switchlabel    #5869      
    switchlabel    #5869      
    switchlabel    #5869      
    switchlabel    #5869      
    switchlabel    #5865      
    switchlabel    #5865      
    switchlabel    #5865      
    switchlabel    #5865      
    switchlabel    #5865      
    switchlabel    #5865      
    switchlabel    #5865      
    switchlabel    #5865      
    switchlabel    #5865      
    switchlabel    #5865      
    switchlabel    #5865      
    switchlabel    #5870      
    switchlabel    #5865      
    switchlabel    #5865      
    switchlabel    #5865      
    switchlabel    #5865      
    switchlabel    #5865      
    switchlabel    #5865      
    switchlabel    #5865      
    switchlabel    #5865      
    switchlabel    #5865      
    switchlabel    #5865      
    switchlabel    #5865      
    switchlabel    #5865      
    switchlabel    #5865      
    switchlabel    #5865      
    switchlabel    #5865      
    switchlabel    #5865      
    switchlabel    #5865      
    switchlabel    #5865      
    switchlabel    #5865      
    switchlabel    #5865      
    switchlabel    #5865      
    switchlabel    #5865      
    switchlabel    #5865      
    switchlabel    #5865      
    switchlabel    #5865      
    switchlabel    #5866      
    switchlabel    #5865      
    switchlabel    #5865      
    switchlabel    #5865      
    switchlabel    #5865      
    switchlabel    #5865      
    switchlabel    #5870      
    endswitch                 
#5869: 
    push           pc_lex.readnumber.c u64 
    push           &pc_lex.readnumber.str 
    push           &pc_lex.readnumber.slen 
    incrload                  i64 1
    popptroff                 u8 1 -1
    jump           #5863      
#5866: 
    push           1          i64 
    pop            pc_lex.readnumber.sepseen i64 
    jump           #5863      
#5868: 
    push           pc_lex.readnumber.isfloat i64 
    jumpfalse      #5871      i64 
    setargs                   1 0
    push           "float?"   u64 
    callproc       &pc_lex.lxerror 
#5871: 
    push           1          i64 
    pop            pc_lex.readnumber.isfloat i64 
    push           pc_lex.readnumber.slen i64 
    pop            pc_lex.readnumber.intlen i64 
    jump           #5863      
#5870: 
    push           pc_lex.readnumber.isfloat i64 
    push           2          i64 
    jumpne         #5872      i64 
    setargs                   1 0
    push           "float?"   u64 
    callproc       &pc_lex.lxerror 
#5872: 
    push           2          i64 
    pop            pc_lex.readnumber.isfloat i64 
    jump           #5863      
#5867: 
    push           pc_lex.readnumber.isfloat i64 
    push           2          i64 
    jumpeq         #5873      i64 
    setargs                   1 0
    push           "float?"   u64 
    callproc       &pc_lex.lxerror 
#5873: 
    push           3          i64 
    pop            pc_lex.readnumber.isfloat i64 
    jump           #5863      
#5865: 
    push           &pc_lex.lxsptr 
    decr                      u64 1
    jump           #5874      
    jump           #5863      
#5874: 
    push           pc_lex.readnumber.isfloat i64 
    jumpfalse      #5875      i64 
    push           pc_lex.readnumber.sepseen i64 
    jumpfalse      #5876      i64 
    setargs                   1 0
    push           "seps in float?" u64 
    callproc       &pc_lex.lxerror 
#5876: 
    setargs                   2 0
    push           pc_lex.lxsptr u64 
    push           pc_lex.readnumber.s u64 
    subref                    i64 1
    push           pc_lex.readnumber.s u64 
    callproc       &pc_lex.readreal 
    push           &pc_lex.lxxvalue 
    push           pc_lex.readnumber.signx i64 
    float                     r64 i64 
    multo                     r64 
    jump           #5860      
#5875: 
    push           pc_lex.readnumber.slen i64 
    push           20         i64 
    jumpgt         #5877      i64 
    push           pc_lex.readnumber.slen i64 
    push           20         i64 
    jumpne         #5878      i64 
    setargs                   2 0
    push           "18446744073709551615" u64 
    push           &pc_lex.readnumber.str 
    callfn         &mlibp.cmpstring i64 
    push           0          i64 
    jumple         #5878      i64 
#5877: 
    push           pc_lex.readnumber.slen i64 
    push           39         i64 
    jumpgt         #5879      i64 
    push           pc_lex.readnumber.slen i64 
    push           39         i64 
    jumpne         #5880      i64 
    setargs                   3 0
    push           39         u64 
    push           "340282366920938463463374607431768211455" u64 
    push           pc_lex.readnumber.s u64 
    callfn         &strncmp   i32 
    push           0          i64 
    jumple         #5880      i64 
#5879: 
    setargs                   1 0
    push           "Overflows 128 bits" u64 
    callproc       &pc_lex.lxerror 
#5880: 
    setargs                   3 0
    push           10         i64 
    push           pc_lex.readnumber.slen i64 
    push           &pc_lex.readnumber.str 
    callproc       &pc_lex.stringtonumber128 
    jump           #5860      
#5878: 
    push           15         i64 
    pop            pc_lex.lxsymbol i64 
    push           0          i64 
    pop            pc_lex.lxvalue i64 
#5881: 
    push           1          i64 
    pop            pc_lex.readnumber.i i64 
    push           pc_lex.readnumber.slen i64 
    push           1          i64 
    jumplt         #5882      i64 
#5883: 
    push           pc_lex.lxvalue i64 
    push           10         i64 
    mul                       i64 
    push           &pc_lex.readnumber.str 
    push           pc_lex.readnumber.i i64 
    pushptroff                u8 1 -1
    add                       i64 
    push           48         i64 
    sub                       i64 
    pop            pc_lex.lxvalue i64 
#5884: 
    forup          #5883      i64 1
    opnd           pc_lex.readnumber.i 
    opnd           pc_lex.readnumber.slen 
#5882: 
    push           &pc_lex.lxvalue 
    push           pc_lex.readnumber.signx i64 
    multo                     i64 
#5860: 
    retproc                   
End


Proc pc_lex.readhex:
    local          pc_lex.readhex.ndigs i64 
    local          pc_lex.readhex.c i64 
    procentry                 
    push           0          i64 
    pop            pc_lex.readhex.ndigs i64 
    push           0          i64 
    pop            pc_lex.lxvalue i64 
#5886: 
    push           &pc_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    store          pc_lex.readhex.c i64 
    switch         #5887      39 102
    opnd           #5888      
#5887: 
    switchlabel    #5889      
    switchlabel    #5888      
    switchlabel    #5888      
    switchlabel    #5888      
    switchlabel    #5888      
    switchlabel    #5888      
    switchlabel    #5888      
    switchlabel    #5888      
    switchlabel    #5888      
    switchlabel    #5890      
    switchlabel    #5890      
    switchlabel    #5890      
    switchlabel    #5890      
    switchlabel    #5890      
    switchlabel    #5890      
    switchlabel    #5890      
    switchlabel    #5890      
    switchlabel    #5890      
    switchlabel    #5890      
    switchlabel    #5888      
    switchlabel    #5888      
    switchlabel    #5888      
    switchlabel    #5888      
    switchlabel    #5888      
    switchlabel    #5888      
    switchlabel    #5888      
    switchlabel    #5891      
    switchlabel    #5891      
    switchlabel    #5891      
    switchlabel    #5891      
    switchlabel    #5891      
    switchlabel    #5891      
    switchlabel    #5888      
    switchlabel    #5888      
    switchlabel    #5888      
    switchlabel    #5888      
    switchlabel    #5888      
    switchlabel    #5888      
    switchlabel    #5888      
    switchlabel    #5888      
    switchlabel    #5888      
    switchlabel    #5888      
    switchlabel    #5888      
    switchlabel    #5888      
    switchlabel    #5888      
    switchlabel    #5888      
    switchlabel    #5888      
    switchlabel    #5888      
    switchlabel    #5888      
    switchlabel    #5888      
    switchlabel    #5888      
    switchlabel    #5888      
    switchlabel    #5888      
    switchlabel    #5888      
    switchlabel    #5888      
    switchlabel    #5888      
    switchlabel    #5889      
    switchlabel    #5889      
    switchlabel    #5892      
    switchlabel    #5892      
    switchlabel    #5892      
    switchlabel    #5892      
    switchlabel    #5892      
    switchlabel    #5892      
    endswitch                 
#5890: 
    push           pc_lex.lxvalue i64 
    push           16         i64 
    mul                       i64 
    push           pc_lex.readhex.c i64 
    add                       i64 
    push           48         i64 
    sub                       i64 
    pop            pc_lex.lxvalue i64 
    push           &pc_lex.readhex.ndigs 
    incr                      i64 1
    jump           #5886      
#5891: 
    push           pc_lex.lxvalue i64 
    push           16         i64 
    mul                       i64 
    push           pc_lex.readhex.c i64 
    push           65         i64 
    sub                       i64 
    push           10         i64 
    add                       i64 
    add                       i64 
    pop            pc_lex.lxvalue i64 
    push           &pc_lex.readhex.ndigs 
    incr                      i64 1
    jump           #5886      
#5892: 
    push           pc_lex.lxvalue i64 
    push           16         i64 
    mul                       i64 
    push           pc_lex.readhex.c i64 
    push           97         i64 
    sub                       i64 
    push           10         i64 
    add                       i64 
    add                       i64 
    pop            pc_lex.lxvalue i64 
    push           &pc_lex.readhex.ndigs 
    incr                      i64 1
    jump           #5886      
#5889: 
    jump           #5886      
#5888: 
    push           &pc_lex.lxsptr 
    decr                      u64 1
    jump           #5893      
    jump           #5886      
#5893: 
    push           pc_lex.readhex.ndigs i64 
    push           0          i64 
    jumpne         #5894      i64 
    setargs                   1 0
    push           "No hex digits" u64 
    callproc       &pc_lex.lxerror 
    jump           #5895      
#5894: 
    push           pc_lex.readhex.ndigs i64 
    push           32         i64 
    jumple         #5896      i64 
    setargs                   1 0
    push           "Overflow in hex number" u64 
    callproc       &pc_lex.lxerror 
    jump           #5895      
#5896: 
    push           pc_lex.readhex.ndigs i64 
    push           16         i64 
    jumple         #5897      i64 
    setargs                   1 0
    push           "hex/128 bits not ready" u64 
    callproc       &pc_lex.lxerror 
    jump           #5898      
#5897: 
#5895: 
    push           15         i64 
    pop            pc_lex.lxsymbol i64 
#5898: 
    retproc                   
End


Proc pc_lex.ps:
    param          pc_lex.ps.caption u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           pc_lex.ps.caption u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_lex.lxsptr u64 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   1 0
    push           ":"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           0          u64 
    callproc       &pc_lex.printsymbol 
#5900: 
    retproc                   
End


Proc pc_lex.printsymbol:
    param          pc_lex.printsymbol.dev u64 
    local          pc_lex.printsymbol.str block:256 
    local          pc_lex.printsymbol.av_1 i64 
    procentry                 
    setargs                   2 0
    push           &pc_lex.symbolnames 
    push           pc_lex.lxsymbol i64 
    pushptroff                u64 8 -8
    push           &pc_lex.printsymbol.str 
    callproc       &strcpy    
    push           0          u64 
    push           &pc_lex.printsymbol.str 
    setargs                   1 0
    push           &pc_lex.printsymbol.str 
    callfn         &strlen    i64 
    popptroff                 u8 1 -3
    setargs                   1 0
    push           pc_lex.printsymbol.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           &pc_lex.printsymbol.str 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#5902: 
    push           14         i64 
    setargs                   1 0
    push           &pc_lex.printsymbol.str 
    callfn         &strlen    i64 
    sub                       i64 
    pop            pc_lex.printsymbol.av_1 i64 
    push           pc_lex.printsymbol.av_1 i64 
    push           0          i64 
    jumple         #5903      i64 
#5904: 
    setargs                   1 0
    push           pc_lex.printsymbol.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           " "        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#5905: 
    to             #5904      
    opnd           pc_lex.printsymbol.av_1 
#5903: 
    push           pc_lex.lxsymbol i64 
    push           19         i64 
    casejumpeq     #5906      i64 0
    push           15         i64 
    casejumpeq     #5907      i64 0
    push           16         i64 
    casejumpeq     #5908      i64 0
    push           17         i64 
    casejumpeq     #5909      i64 0
    push           1          i64 
    casejumpeq     #5910      i64 0
    push           20         i64 
    casejumpeq     #5911      i64 0
    push           21         i64 
    casejumpeq     #5912      i64 0
    popstack                  i64 
    jump           #5913      
#5906: 
    setargs                   1 0
    push           pc_lex.printsymbol.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           pc_lex.lxsymptr u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #5914      
#5907: 
    setargs                   1 0
    push           pc_lex.printsymbol.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           pc_lex.lxvalue i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #5914      
#5908: 
    setargs                   1 0
    push           pc_lex.printsymbol.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   2 0
    push           0          i64 
    push           pc_lex.lxxvalue r64 
    callproc       &msysp.m$print_r64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #5914      
#5909: 
    setargs                   1 0
    push           pc_lex.printsymbol.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "\""       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           pc_lex.lxsvalue u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           "\""       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #5914      
#5910: 
    setargs                   1 0
    push           pc_lex.printsymbol.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           pc_lex.lxvalue i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #5914      
#5911: 
    setargs                   1 0
    push           pc_lex.printsymbol.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           &pc_tables.pclnames 
    push           pc_lex.lxsubcode i64 
    pushptroff                u64 8 0
    push           1          i64 
    addrefoff                 u64 1 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #5914      
#5912: 
    setargs                   1 0
    push           pc_lex.printsymbol.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           &pc_tables.pstdnames 
    push           pc_lex.lxsubcode i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #5914      
#5913: 
    setargs                   1 0
    push           pc_lex.printsymbol.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           &pc_lex.symbolnames 
    push           pc_lex.lxsymbol i64 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           pc_lex.lxsubcode i64 
    jumpfalse      #5915      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           " "        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           pc_lex.lxsubcode i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#5915: 
#5914: 
    setargs                   1 0
    push           pc_lex.printsymbol.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   0 0
    callproc       &msysp.m$print_space 
    setargs                   1 0
    push           pc_lex.lxlineno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#5916: 
    retproc                   
End


Proc pc_lex.inithashtable:
    local          pc_lex.inithashtable.av_1 i64 
    local          pc_lex.inithashtable.av_2 i64 
    local          pc_lex.inithashtable.i i64 
    procentry                 
#5918: 
    push           0          i64 
    pop            pc_lex.inithashtable.i i64 
    push           218        i64 
    pop            pc_lex.inithashtable.av_1 i64 
    push           pc_lex.inithashtable.av_1 i64 
    push           0          i64 
    jumplt         #5919      i64 
#5920: 
    setargs                   3 0
    push           pc_lex.inithashtable.i i64 
    push           20         i64 
    push           &pc_tables.pclnames 
    push           pc_lex.inithashtable.i i64 
    pushptroff                u64 8 0
    push           1          i64 
    addrefoff                 u64 1 0
    callproc       &pc_lex.addreservedword 
#5921: 
    forup          #5920      i64 1
    opnd           pc_lex.inithashtable.i 
    opnd           pc_lex.inithashtable.av_1 
#5919: 
#5922: 
    push           0          i64 
    pop            pc_lex.inithashtable.i i64 
    push           14         i64 
    pop            pc_lex.inithashtable.av_2 i64 
    push           pc_lex.inithashtable.av_2 i64 
    push           0          i64 
    jumplt         #5923      i64 
#5924: 
    setargs                   3 0
    push           pc_lex.inithashtable.i i64 
    push           21         i64 
    push           &pc_tables.pstdnames 
    push           pc_lex.inithashtable.i i64 
    pushptroff                u64 8 0
    callproc       &pc_lex.addreservedword 
#5925: 
    forup          #5924      i64 1
    opnd           pc_lex.inithashtable.i 
    opnd           pc_lex.inithashtable.av_2 
#5923: 
    setargs                   3 0
    push           8          i64 
    push           20         i64 
    push           "proc"     u64 
    callproc       &pc_lex.addreservedword 
    setargs                   3 0
    push           8          i64 
    push           20         i64 
    push           "function" u64 
    callproc       &pc_lex.addreservedword 
    setargs                   3 0
    push           10         i64 
    push           20         i64 
    push           "end"      u64 
    callproc       &pc_lex.addreservedword 
    setargs                   3 0
    push           15         i64 
    push           20         i64 
    push           "endext"   u64 
    callproc       &pc_lex.addreservedword 
#5926: 
    retproc                   
End


Proc pc_lex.addreservedword:
    param          pc_lex.addreservedword.name u64 
    param          pc_lex.addreservedword.symbol i64 
    param          pc_lex.addreservedword.subcode i64 
    procentry                 
    setargs                   1 0
    push           pc_lex.addreservedword.name u64 
    callfn         &pc_lex.gethashvalue i64 
    pop            pc_lex.lxhashvalue i64 
    setargs                   2 0
    push           0          i64 
    push           pc_lex.addreservedword.name u64 
    callfn         &pc_lex.lookuplex i64 
    jumpfalse      #5928      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "NAME="    u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_lex.addreservedword.name u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "DUPL NAME" u64 
    callproc       &pc_lex.lxerror 
#5928: 
    push           0          i64 
    push           pc_lex.lxsymptr u64 
    push           24         
    popptroff                 u8 1 0
    push           pc_lex.addreservedword.symbol i64 
    push           pc_lex.lxsymptr u64 
    push           25         
    popptroff                 u8 1 0
    push           pc_lex.addreservedword.subcode i64 
    push           pc_lex.lxsymptr u64 
    push           26         
    popptroff                 u8 1 0
#5929: 
    retproc                   
End


Proc pc_lex.printhashtable:
    param          pc_lex.printhashtable.devx u64 
    param          pc_lex.printhashtable.caption u64 
    local          pc_lex.printhashtable.r u64 
    local          pc_lex.printhashtable.count i64 
    local          pc_lex.printhashtable.i i64 
    local          pc_lex.printhashtable.av_1 i64 
    procentry                 
    setargs                   1 0
    push           pc_lex.printhashtable.devx u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           pc_lex.printhashtable.caption u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           ":"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           0          i64 
    pop            pc_lex.printhashtable.count i64 
#5931: 
    push           0          i64 
    pop            pc_lex.printhashtable.i i64 
    push           262143     i64 
    pop            pc_lex.printhashtable.av_1 i64 
    push           pc_lex.printhashtable.av_1 i64 
    push           0          i64 
    jumplt         #5932      i64 
#5933: 
    push           &pc_lex.lexhashtable 
    push           pc_lex.printhashtable.i i64 
    pushptroff                u64 8 0
    pop            pc_lex.printhashtable.r u64 
    push           pc_lex.printhashtable.r u64 
    jumpfalse      #5934      u64 
    push           pc_lex.printhashtable.r u64 
    pushptr                   u64 
    jumpfalse      #5934      u64 
    push           &pc_lex.printhashtable.count 
    push           1          i64 
    addto                     i64 
#5934: 
#5935: 
    forup          #5933      i64 1
    opnd           pc_lex.printhashtable.i 
    opnd           pc_lex.printhashtable.av_1 
#5932: 
    setargs                   1 0
    push           pc_lex.printhashtable.devx u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           pc_lex.printhashtable.count i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           " items in table" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           262144     i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#5936: 
    retproc                   
End


Proc pc_lex.lookuplex: i64
    param          pc_lex.lookuplex.name u64 
    param          pc_lex.lookuplex.length i64 
    local          pc_lex.lookuplex.e u64 
    local          pc_lex.lookuplex.j i64 
    local          pc_lex.lookuplex.wrapped i64 
    local          pc_lex.lookuplex.insource i64 
    local          pc_lex.lookuplex.firstj i64 
    procentry                 
    push           pc_lex.lookuplex.length i64 
    pop            pc_lex.lookuplex.insource i64 
    push           pc_lex.lookuplex.length i64 
    push           0          i64 
    jumpne         #5938      i64 
    setargs                   1 0
    push           pc_lex.lookuplex.name u64 
    callfn         &strlen    i64 
    pop            pc_lex.lookuplex.length i64 
#5938: 
    push           pc_lex.lxhashvalue i64 
    push           262143     i64 
    iand                      i64 
    store          pc_lex.lookuplex.j i64 
    pop            pc_lex.lookuplex.firstj i64 
    push           0          i64 
    pop            pc_lex.lookuplex.wrapped i64 
#5939: 
    push           &pc_lex.lexhashtable 
    push           pc_lex.lookuplex.j i64 
    pushptroff                u64 8 0
    pop            pc_lex.lxsymptr u64 
    push           pc_lex.lxsymptr u64 
    push           0          u64 
    jumpne         #5940      u64 
    jump           #5941      
#5940: 
    push           pc_lex.lxsymptr u64 
    push           31         
    pushptroff                u8 1 0
    push           pc_lex.lookuplex.length i64 
    jumpne         #5942      i64 
    setargs                   3 0
    push           pc_lex.lookuplex.length u64 
    push           pc_lex.lookuplex.name u64 
    push           pc_lex.lxsymptr u64 
    pushptr                   u64 
    callfn         &memcmp    i32 
    push           0          i64 
    jumpne         #5942      i64 
    push           1          i64 
    setret                    i64 
    jump           #5943      
#5942: 
    push           &pc_lex.lookuplex.j 
    incrload                  i64 1
    push           262144     i64 
    jumplt         #5944      i64 
    push           pc_lex.lookuplex.wrapped i64 
    jumpfalse      #5945      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "???????HASHTABLE FULL" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           262144     i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           pc_lex.lxlineno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#5945: 
    push           1          i64 
    pop            pc_lex.lookuplex.wrapped i64 
    push           1          i64 
    pop            pc_lex.lookuplex.j i64 
#5944: 
    jump           #5939      
#5941: 
    push           pc_lex.lookuplex.insource i64 
    jumpfalse      #5946      i64 
    setargs                   2 0
    push           pc_lex.lookuplex.length i64 
    push           pc_lex.lookuplex.name u64 
    callfn         &mlibp.pcm_copyheapstringn u64 
    pop            pc_lex.lookuplex.name u64 
#5946: 
    push           &pc_lex.nsymbols 
    incrload                  i64 1
    push           229376     i64 
    jumple         #5947      i64 
    setargs                   1 0
    push           "Hashtable getting full" u64 
    callproc       &pc_lex.lxerror 
#5947: 
    push           pc_lex.lxsymptr u64 
    push           0          u64 
    jumpne         #5948      u64 
    setargs                   1 0
    push           64         i64 
    callfn         &mlibp.pcm_allocz u64 
    pop            pc_lex.lxsymptr u64 
    push           pc_lex.lxsymptr u64 
    push           &pc_lex.lexhashtable 
    push           pc_lex.lookuplex.j i64 
    popptroff                 u64 8 0
#5948: 
    push           pc_lex.lookuplex.name u64 
    push           pc_lex.lxsymptr u64 
    push           0          
    popptroff                 u64 1 0
    push           pc_lex.lookuplex.length i64 
    push           pc_lex.lxsymptr u64 
    push           31         
    popptroff                 u8 1 0
    push           19         i64 
    push           pc_lex.lxsymptr u64 
    push           24         
    popptroff                 u8 1 0
    push           0          i64 
    push           pc_lex.lxsymptr u64 
    push           25         
    popptroff                 u8 1 0
    push           0          i64 
    setret                    i64 
    jump           #5943      
#5943: 
    retfn                     i64 
End


Proc pc_lex.startlex:
    param          pc_lex.startlex.source u64 
    procentry                 
    setargs                   0 0
    callproc       &pc_lex.initlex 
    push           pc_lex.startlex.source u64 
    store          pc_lex.lxsptr u64 
    pop            pc_lex.lxstart u64 
    push           1          i64 
    pop            pc_lex.lxlineno i64 
    push           1          i64 
    pop            pc_lex.lxsymbol i64 
#5950: 
    retproc                   
End


Proc pc_lex.addnamestr: u64
    param          pc_lex.addnamestr.name u64 
    procentry                 
    setargs                   1 0
    push           pc_lex.addnamestr.name u64 
    callfn         &pc_lex.gethashvalue i64 
    pop            pc_lex.lxhashvalue i64 
    setargs                   2 0
    push           0          i64 
    setargs                   1 0
    push           pc_lex.addnamestr.name u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    callproc       &pc_lex.lookuplex 
    push           pc_lex.lxsymptr u64 
    setret                    u64 
    jump           #5952      
#5952: 
    retfn                     u64 
End


Proc pc_lex.lxerror:
    param          pc_lex.lxerror.m u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "\c\n\c\n Lexical Error\n*** # *** on line #" u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           pc_lex.lxerror.m u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_lex.lxlineno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#5954: 
    retproc                   
End


Proc pc_lex.gethashvalue: i64
    param          pc_lex.gethashvalue.s u64 
    local          pc_lex.gethashvalue.c i64 
    local          pc_lex.gethashvalue.hsum i64 
    procentry                 
    push           pc_lex.gethashvalue.s u64 
    pushptr                   u8 
    push           0          i64 
    jumpne         #5956      i64 
    push           0          i64 
    setret                    i64 
    jump           #5957      
#5956: 
    push           &pc_lex.gethashvalue.s 
    loadincr                  u64 1
    pushptr                   u8 
    pop            pc_lex.gethashvalue.hsum i64 
#5958: 
    push           &pc_lex.gethashvalue.s 
    loadincr                  u64 1
    pushptr                   u8 
    pop            pc_lex.gethashvalue.c i64 
    push           pc_lex.gethashvalue.c i64 
    push           0          i64 
    jumpne         #5959      i64 
    jump           #5960      
#5959: 
    push           pc_lex.gethashvalue.hsum i64 
    push           4          i64 
    shl                       i64 
    push           pc_lex.gethashvalue.hsum i64 
    sub                       i64 
    push           pc_lex.gethashvalue.c i64 
    add                       i64 
    pop            pc_lex.gethashvalue.hsum i64 
    jump           #5958      
#5960: 
    push           pc_lex.gethashvalue.hsum i64 
    push           5          i64 
    shl                       i64 
    push           pc_lex.gethashvalue.hsum i64 
    sub                       i64 
    setret                    i64 
    jump           #5957      
#5957: 
    retfn                     i64 
End


Proc pc_lex.readstring:
    local          pc_lex.readstring.dest u64 
    local          pc_lex.readstring.c i64 
    local          pc_lex.readstring.d i64 
    local          pc_lex.readstring.str block:8 
    local          pc_lex.readstring.av_1 i64 
    procentry                 
    push           17         i64 
    pop            pc_lex.lxsymbol i64 
    push           pc_lex.lxsptr u64 
    pop            pc_lex.lxsvalue u64 
    push           pc_lex.lxsptr u64 
    pop            pc_lex.readstring.dest u64 
#5962: 
    push           &pc_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    store          pc_lex.readstring.c i64 
    switch         #5963      0 92
    opnd           #5964      
#5963: 
    switchlabel    #5965      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5965      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5965      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5966      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5964      
    switchlabel    #5967      
    endswitch                 
#5967: 
    push           pc_lex.lxsptr u64 
    pushptr                   u8 
    pop            pc_lex.readstring.c i64 
    push           pc_lex.readstring.c i64 
    push           65         i64 
    jumplt         #5968      i64 
    push           pc_lex.readstring.c i64 
    push           90         i64 
    jumpgt         #5968      i64 
    push           &pc_lex.readstring.c 
    push           32         i64 
    addto                     i64 
#5968: 
    push           &pc_lex.lxsptr 
    incr                      u64 1
    push           pc_lex.readstring.c i64 
    switch         #5969      34 122
    opnd           #5970      
#5969: 
    switchlabel    #5971      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5972      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5973      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5971      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5974      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5975      
    switchlabel    #5976      
    switchlabel    #5977      
    switchlabel    #5970      
    switchlabel    #5978      
    switchlabel    #5979      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5980      
    switchlabel    #5970      
    switchlabel    #5980      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5977      
    switchlabel    #5981      
    switchlabel    #5982      
    switchlabel    #5970      
    switchlabel    #5983      
    switchlabel    #5984      
    switchlabel    #5985      
    switchlabel    #5986      
    switchlabel    #5973      
    endswitch                 
#5975: 
    push           7          i64 
    pop            pc_lex.readstring.c i64 
    jump           #5987      
#5976: 
    push           8          i64 
    pop            pc_lex.readstring.c i64 
    jump           #5987      
#5977: 
    push           13         i64 
    pop            pc_lex.readstring.c i64 
    jump           #5987      
#5978: 
    push           26         i64 
    pop            pc_lex.readstring.c i64 
    jump           #5987      
#5979: 
    push           12         i64 
    pop            pc_lex.readstring.c i64 
    jump           #5987      
#5980: 
    push           10         i64 
    pop            pc_lex.readstring.c i64 
    jump           #5987      
#5981: 
    push           27         i64 
    pop            pc_lex.readstring.c i64 
    jump           #5987      
#5982: 
    push           9          i64 
    pop            pc_lex.readstring.c i64 
    jump           #5987      
#5983: 
    push           11         i64 
    pop            pc_lex.readstring.c i64 
    jump           #5987      
#5984: 
    push           13         u64 
    push           &pc_lex.readstring.dest 
    loadincr                  u64 1
    popptr                    u8 
    push           10         i64 
    pop            pc_lex.readstring.c i64 
    jump           #5987      
#5985: 
    push           0          i64 
    pop            pc_lex.readstring.c i64 
#5988: 
    push           2          i64 
    pop            pc_lex.readstring.av_1 i64 
#5989: 
    push           &pc_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    store          pc_lex.readstring.d i64 
    push           65         i64 
    casejumpeq     #5990      i64 0
    push           66         i64 
    casejumpeq     #5990      i64 0
    push           67         i64 
    casejumpeq     #5990      i64 0
    push           68         i64 
    casejumpeq     #5990      i64 0
    push           69         i64 
    casejumpeq     #5990      i64 0
    push           70         i64 
    casejumpeq     #5990      i64 0
    push           97         i64 
    casejumpeq     #5991      i64 0
    push           98         i64 
    casejumpeq     #5991      i64 0
    push           99         i64 
    casejumpeq     #5991      i64 0
    push           100        i64 
    casejumpeq     #5991      i64 0
    push           101        i64 
    casejumpeq     #5991      i64 0
    push           102        i64 
    casejumpeq     #5991      i64 0
    push           48         i64 
    casejumpeq     #5992      i64 0
    push           49         i64 
    casejumpeq     #5992      i64 0
    push           50         i64 
    casejumpeq     #5992      i64 0
    push           51         i64 
    casejumpeq     #5992      i64 0
    push           52         i64 
    casejumpeq     #5992      i64 0
    push           53         i64 
    casejumpeq     #5992      i64 0
    push           54         i64 
    casejumpeq     #5992      i64 0
    push           55         i64 
    casejumpeq     #5992      i64 0
    push           56         i64 
    casejumpeq     #5992      i64 0
    push           57         i64 
    casejumpeq     #5992      i64 0
    popstack                  i64 
    jump           #5993      
#5990: 
    push           pc_lex.readstring.c i64 
    push           16         i64 
    mul                       i64 
    push           pc_lex.readstring.d i64 
    add                       i64 
    push           65         i64 
    sub                       i64 
    push           10         i64 
    add                       i64 
    pop            pc_lex.readstring.c i64 
    jump           #5994      
#5991: 
    push           pc_lex.readstring.c i64 
    push           16         i64 
    mul                       i64 
    push           pc_lex.readstring.d i64 
    add                       i64 
    push           97         i64 
    sub                       i64 
    push           10         i64 
    add                       i64 
    pop            pc_lex.readstring.c i64 
    jump           #5994      
#5992: 
    push           pc_lex.readstring.c i64 
    push           16         i64 
    mul                       i64 
    push           pc_lex.readstring.d i64 
    add                       i64 
    push           48         i64 
    sub                       i64 
    pop            pc_lex.readstring.c i64 
    jump           #5994      
#5993: 
    setargs                   1 0
    push           "Bad \\x code" u64 
    callproc       &pc_lex.lxerror 
#5994: 
#5995: 
    to             #5989      
    opnd           pc_lex.readstring.av_1 
#5996: 
    jump           #5987      
#5986: 
    push           16         i64 
    pop            pc_lex.readstring.c i64 
    jump           #5987      
#5973: 
    push           0          i64 
    pop            pc_lex.readstring.c i64 
    jump           #5987      
#5971: 
    push           34         i64 
    pop            pc_lex.readstring.c i64 
    jump           #5987      
#5974: 
    push           92         i64 
    pop            pc_lex.readstring.c i64 
    jump           #5987      
#5972: 
    push           39         i64 
    pop            pc_lex.readstring.c i64 
    jump           #5987      
#5970: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "<"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   2 0
    push           0          i64 
    push           pc_lex.readstring.c i64 
    truncate                  u64 u8 
    callproc       &msysp.m$print_c8 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           ">"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Unknown string escape" u64 
    callproc       &pc_lex.lxerror 
#5987: 
    jump           #5997      
#5966: 
    push           pc_lex.lxsptr u64 
    pushptr                   u8 
    push           pc_lex.readstring.c i64 
    jumpne         #5998      i64 
    push           &pc_lex.lxsptr 
    incr                      u64 1
    jump           #5999      
#5998: 
    jump           #6000      
#5999: 
    jump           #5997      
#5965: 
    setargs                   1 0
    push           "String not terminated" u64 
    callproc       &pc_lex.lxerror 
    jump           #5997      
#5964: 
#5997: 
    push           pc_lex.readstring.c u64 
    push           &pc_lex.readstring.dest 
    loadincr                  u64 1
    popptr                    u8 
    jump           #5962      
#6000: 
    push           pc_lex.readstring.dest u64 
    push           pc_lex.lxsvalue u64 
    subref                    i64 1
    pop            pc_lex.lxlength i64 
    push           0          u64 
    push           pc_lex.lxsvalue u64 
    push           pc_lex.lxlength i64 
    popptroff                 u8 1 0
#6001: 
    retproc                   
End


Proc pc_lex.stringtonumber128:
    param          pc_lex.stringtonumber128.s u64 
    param          pc_lex.stringtonumber128.length i64 
    param          pc_lex.stringtonumber128.base i64 
    local          pc_lex.stringtonumber128.aa u128 
    local          pc_lex.stringtonumber128.c i64 
    local          pc_lex.stringtonumber128.d i64 
    local          pc_lex.stringtonumber128.av_1 i64 
    procentry                 
    push           0          i64 
    widenw                    u128 i64 
    pop            pc_lex.stringtonumber128.aa u128 
#6003: 
    push           pc_lex.stringtonumber128.length i64 
    pop            pc_lex.stringtonumber128.av_1 i64 
    push           pc_lex.stringtonumber128.av_1 i64 
    push           0          i64 
    jumple         #6004      i64 
#6005: 
    push           pc_lex.stringtonumber128.aa u128 
    push           pc_lex.stringtonumber128.base i64 
    widenw                    u128 i64 
    mul                       u128 
    pop            pc_lex.stringtonumber128.aa u128 
    push           &pc_lex.stringtonumber128.s 
    loadincr                  u64 1
    pushptr                   u8 
    pop            pc_lex.stringtonumber128.c i64 
    push           pc_lex.stringtonumber128.c i64 
    push           97         i64 
    jumplt         #6006      i64 
    push           pc_lex.stringtonumber128.c i64 
    push           97         i64 
    sub                       i64 
    push           10         i64 
    add                       i64 
    pop            pc_lex.stringtonumber128.d i64 
    jump           #6007      
#6006: 
    push           pc_lex.stringtonumber128.c i64 
    push           65         i64 
    jumplt         #6008      i64 
    push           pc_lex.stringtonumber128.c i64 
    push           65         i64 
    sub                       i64 
    push           10         i64 
    add                       i64 
    pop            pc_lex.stringtonumber128.d i64 
    jump           #6007      
#6008: 
    push           pc_lex.stringtonumber128.c i64 
    push           48         i64 
    sub                       i64 
    pop            pc_lex.stringtonumber128.d i64 
#6007: 
    push           pc_lex.stringtonumber128.aa u128 
    push           pc_lex.stringtonumber128.d i64 
    widenw                    u128 i64 
    add                       u128 
    pop            pc_lex.stringtonumber128.aa u128 
#6009: 
    to             #6005      
    opnd           pc_lex.stringtonumber128.av_1 
#6004: 
    push           pc_lex.stringtonumber128.aa u128 
    pop            pc_lex.lxuvalue128 u128 
    push           18         i64 
    pop            pc_lex.lxsymbol i64 
#6010: 
    retproc                   
End


Proc pc_parse.parse: i64
    param          pc_parse.parse.source u64 
    local          pc_parse.parse.d u64 
    local          pc_parse.parse.labno i64 
    procentry                 
    setargs                   1 0
    push           pc_parse.parse.source u64 
    callproc       &pc_lex.startlex 
    push           1          i64 
    pop            pc_lex.lxsymbol i64 
#6012: 
    setargs                   0 0
    callproc       &pc_lex.lex 
    push           pc_lex.lxsymbol i64 
    push           20         i64 
    casejumpeq     #6013      i64 0
    push           21         i64 
    casejumpeq     #6013      i64 0
    push           14         i64 
    casejumpeq     #6014      i64 0
    push           19         i64 
    casejumpeq     #6015      i64 0
    push           15         i64 
    casejumpeq     #6016      i64 0
    push           12         i64 
    casejumpeq     #6017      i64 0
    push           13         i64 
    casejumpeq     #6018      i64 0
    popstack                  i64 
    jump           #6019      
#6013: 
    push           pc_lex.lxsubcode i64 
    push           11         i64 
    jumpne         #6020      i64 
    jump           #6021      
#6020: 
    setargs                   0 0
    callproc       &pc_parse.readinstr 
    jump           #6022      
#6014: 
    setargs                   0 0
    callproc       &pc_parse.dolabel 
    jump           #6022      
#6015: 
    setargs                   1 0
    push           "\"NAME:\" NOT SUPPORTED" u64 
    callproc       &pc_parse.serror 
    jump           #6022      
#6016: 
    jump           #6012      
    jump           #6022      
#6017: 
    jump           #6012      
    jump           #6022      
#6018: 
    jump           #6021      
    jump           #6022      
#6019: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "SYMBOLNAMES[LXSYMBOL]=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pc_lex.symbolnames 
    push           pc_lex.lxsymbol i64 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Bad input" u64 
    callproc       &pc_parse.serror 
#6022: 
    setargs                   1 0
    push           12         i64 
    callproc       &pc_parse.checksymbol 
    jump           #6012      
#6021: 
    push           pc_parse.insideproc i64 
    jumpfalse      #6023      i64 
    setargs                   1 0
    push           "End missing" u64 
    callproc       &pc_parse.serror 
#6023: 
    push           1          i64 
    setret                    i64 
    jump           #6024      
#6024: 
    retfn                     i64 
End


Proc pc_parse.checksymbol:
    param          pc_parse.checksymbol.symbol i64 
    procentry                 
    push           pc_lex.lxsymbol i64 
    push           pc_parse.checksymbol.symbol i64 
    jumpeq         #6026      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pc_lex.symbolnames 
    push           pc_parse.checksymbol.symbol i64 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "expected, not" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pc_lex.symbolnames 
    push           pc_lex.lxsymbol i64 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           ", on line:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_lex.lxlineno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#6026: 
#6027: 
    retproc                   
End


Proc pc_parse.dolabel:
    procentry                 
    push           pc_lex.lxvalue i64 
    push           1          i64 
    push           100000     i64 
    jumpinrange    #6029      i64 
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_lex.lxvalue i64 
    callfn         &msysp.strint u64 
    push           "1:Label out of range:" u64 
    callproc       &pc_parse.serror_s 
#6029: 
    setargs                   2 0
    push           pc_lex.lxlineno i64 
    push           pc_lex.lxvalue i64 
    callproc       &pc_libpcl.pdefinelabel 
    setargs                   0 0
    callproc       &pc_lex.lex 
    setargs                   1 0
    push           3          i64 
    callproc       &pc_parse.checksymbol 
    setargs                   0 0
    callproc       &pc_lex.lex 
#6030: 
    retproc                   
End


Proc pc_parse.readmode:
    param          pc_parse.readmode.p u64 
    procentry                 
    push           pc_parse.readmode.p u64 
    push           3          
    pushptroff                u8 1 0
    push           0          i64 
    jumpeq         #6032      i64 
    push           pc_lex.lxsubcode i64 
    push           pc_parse.readmode.p u64 
    push           16         
    popptroff                 i32 1 0
    setargs                   0 0
    callproc       &pc_lex.lex 
    jump           #6033      
#6032: 
    push           pc_lex.lxsubcode i64 
    push           pc_parse.readmode.p u64 
    push           3          
    popptroff                 u8 1 0
    push           &pc_tables.psize 
    push           pc_lex.lxsubcode i64 
    pushptroff                u8 1 0
    push           pc_parse.readmode.p u64 
    push           4          
    popptroff                 i32 1 0
    setargs                   0 0
    callproc       &pc_lex.lex 
    push           pc_parse.readmode.p u64 
    push           3          
    pushptroff                u8 1 0
    push           13         i64 
    jumpne         #6034      i64 
    setargs                   1 0
    push           3          i64 
    callproc       &pc_parse.checksymbol 
    setargs                   0 0
    callproc       &pc_lex.lex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_parse.checksymbol 
    push           pc_lex.lxvalue i64 
    push           pc_parse.readmode.p u64 
    push           4          
    popptroff                 i32 1 0
    setargs                   0 0
    callproc       &pc_lex.lex 
#6034: 
#6033: 
    retproc                   
End


Proc pc_parse.readinstr:
    local          pc_parse.readinstr.opcode i64 
    local          pc_parse.readinstr.mode i64 
    local          pc_parse.readinstr.size i64 
    local          pc_parse.readinstr.p u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_parse.readinstr.p u64 
    push           pc_lex.lxlineno i64 
    push           pc_parse.readinstr.p u64 
    push           24         
    popptroff                 u32 1 0
    push           0          i64 
    pop            pc_parse.readinstr.mode i64 
    push           0          i64 
    pop            pc_parse.readinstr.size i64 
    push           pc_lex.lxsymbol i64 
    push           21         i64 
    jumpne         #6036      i64 
    setargs                   1 0
    push           pc_parse.readinstr.p u64 
    callproc       &pc_parse.readmode 
    setargs                   1 0
    push           20         i64 
    callproc       &pc_parse.checksymbol 
#6036: 
    push           pc_lex.lxsubcode i64 
    store          pc_parse.readinstr.opcode i64 
    push           pc_parse.readinstr.p u64 
    push           1          
    popptroff                 u8 1 0
    setargs                   0 0
    callproc       &pc_lex.lex 
    push           pc_lex.lxsymbol i64 
    push           21         i64 
    jumpne         #6037      i64 
    setargs                   1 0
    push           pc_parse.readinstr.p u64 
    callproc       &pc_parse.readmode 
#6037: 
    push           &pc_tables.pclhasopnd 
    push           pc_parse.readinstr.opcode i64 
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6038      i64 0
    push           2          i64 
    casejumpeq     #6039      i64 0
    push           3          i64 
    casejumpeq     #6040      i64 0
    push           4          i64 
    casejumpeq     #6041      i64 0
    popstack                  i64 
    jump           #6042      
#6038: 
    push           pc_lex.lxsymbol i64 
    push           15         i64 
    casejumpeq     #6043      i64 0
    push           16         i64 
    casejumpeq     #6044      i64 0
    push           17         i64 
    casejumpeq     #6045      i64 0
    push           14         i64 
    casejumpeq     #6046      i64 0
    push           19         i64 
    casejumpeq     #6047      i64 0
    push           18         i64 
    casejumpeq     #6048      i64 0
    push           10         i64 
    casejumpeq     #6049      i64 0
    popstack                  i64 
    jump           #6050      
#6043: 
    push           pc_lex.lxvalue i64 
    push           pc_parse.readinstr.p u64 
    push           8          
    popptroff                 i64 1 0
    push           4          i64 
    push           pc_parse.readinstr.p u64 
    push           0          
    popptroff                 u8 1 0
    push           9          i64 
    pop            pc_parse.readinstr.mode i64 
    setargs                   0 0
    callproc       &pc_lex.lex 
    jump           #6051      
#6044: 
    push           pc_lex.lxxvalue r64 
    push           pc_parse.readinstr.p u64 
    push           8          
    popptroff                 r64 1 0
    push           5          i64 
    push           pc_parse.readinstr.p u64 
    push           0          
    popptroff                 u8 1 0
    push           4          i64 
    pop            pc_parse.readinstr.mode i64 
    setargs                   0 0
    callproc       &pc_lex.lex 
    jump           #6051      
#6045: 
    setargs                   1 0
    push           pc_lex.lxsvalue u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           pc_parse.readinstr.p u64 
    push           8          
    popptroff                 u64 1 0
    push           8          i64 
    push           pc_parse.readinstr.p u64 
    push           0          
    popptroff                 u8 1 0
    push           4          i64 
    pop            pc_parse.readinstr.mode i64 
    setargs                   0 0
    callproc       &pc_lex.lex 
    jump           #6051      
#6046: 
    push           pc_lex.lxvalue i64 
    push           1          i64 
    push           100000     i64 
    jumpinrange    #6052      i64 
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_lex.lxvalue i64 
    callfn         &msysp.strint u64 
    push           "2:Label out of range:" u64 
    callproc       &pc_parse.serror_s 
#6052: 
    push           pc_lex.lxvalue i64 
    push           pc_parse.readinstr.p u64 
    push           8          
    popptroff                 i64 1 0
    push           3          i64 
    push           pc_parse.readinstr.p u64 
    push           0          
    popptroff                 u8 1 0
    setargs                   0 0
    callproc       &pc_lex.lex 
    jump           #6051      
#6047: 
    push           pc_lex.lxsymptr u64 
    push           pc_parse.readinstr.p u64 
    push           8          
    popptroff                 u64 1 0
    push           1          i64 
    push           pc_parse.readinstr.p u64 
    push           0          
    popptroff                 u8 1 0
    push           pc_lex.lxtruename u8 
    push           pc_parse.readinstr.p u64 
    push           8          
    pushptroff                u64 1 0
    push           46         
    addrefoff                 u64 1 0
    push           8          i64 
    popdotindex               u16 
    setargs                   0 0
    callproc       &pc_lex.lex 
    jump           #6051      
#6048: 
    push           pc_lex.lxuvalue128 i128 
    push           pc_parse.readinstr.p u64 
    push           8          
    popptroff                 i128 1 0
    push           6          i64 
    push           pc_parse.readinstr.p u64 
    push           0          
    popptroff                 u8 1 0
    push           10         i64 
    pop            pc_parse.readinstr.mode i64 
    setargs                   0 0
    callproc       &pc_lex.lex 
    jump           #6051      
#6049: 
    setargs                   0 0
    callproc       &pc_lex.lex 
    setargs                   1 0
    push           19         i64 
    callproc       &pc_parse.checksymbol 
    push           pc_lex.lxsymptr u64 
    push           pc_parse.readinstr.p u64 
    push           8          
    popptroff                 u64 1 0
    push           pc_lex.lxtruename u8 
    push           pc_parse.readinstr.p u64 
    push           8          
    pushptroff                u64 1 0
    push           46         
    addrefoff                 u64 1 0
    push           8          i64 
    popdotindex               u16 
    push           2          i64 
    push           pc_parse.readinstr.p u64 
    push           0          
    popptroff                 u8 1 0
    setargs                   0 0
    callproc       &pc_lex.lex 
    push           pc_lex.lxsymbol i64 
    push           9          i64 
    jumpne         #6053      i64 
    push           1          u64 
    push           pc_parse.readinstr.p u64 
    push           8          
    pushptroff                u64 1 0
    push           46         
    addrefoff                 u64 1 0
    push           1          i64 
    popdotindex               u16 
    setargs                   0 0
    callproc       &pc_lex.lex 
#6053: 
    jump           #6051      
#6050: 
    setargs                   1 0
    push           "Missing or Bad Operand" u64 
    callproc       &pc_parse.serror 
#6051: 
    jump           #6054      
#6039: 
    setargs                   1 0
    push           19         i64 
    callproc       &pc_parse.checksymbol 
    push           pc_lex.lxsymptr u64 
    push           pc_parse.readinstr.p u64 
    push           8          
    popptroff                 u64 1 0
    push           pc_parse.readinstr.opcode i64 
    push           17         i64 
    jumpne         #6055      i64 
    push           8          i64 
    push           pc_parse.readinstr.p u64 
    push           1          
    popptroff                 u8 1 0
    setargs                   1 0
    push           pc_parse.readinstr.p u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &pc_libpcl.definertsproc 
#6055: 
    push           1          i64 
    push           pc_parse.readinstr.p u64 
    push           0          
    popptroff                 u8 1 0
    setargs                   0 0
    callproc       &pc_lex.lex 
    push           pc_lex.lxsymbol i64 
    push           3          i64 
    casejumpeq     #6056      i64 0
    push           4          i64 
    casejumpeq     #6057      i64 0
    popstack                  i64 
    jump           #6058      
#6056: 
    jump           #6059      
#6057: 
    push           1          u64 
    push           pc_parse.readinstr.p u64 
    push           8          
    pushptroff                u64 1 0
    push           46         
    addrefoff                 u64 1 0
    push           3          i64 
    popdotindex               u16 
    push           1          u64 
    push           pc_parse.readinstr.p u64 
    push           2          
    addrefoff                 u64 1 0
    push           0          i64 
    popdotindex               u8 
    jump           #6059      
#6058: 
    setargs                   1 0
    push           "Colon expected" u64 
    callproc       &pc_parse.serror 
#6059: 
    setargs                   0 0
    callproc       &pc_lex.lex 
    jump           #6054      
#6040: 
    setargs                   1 0
    push           19         i64 
    callproc       &pc_parse.checksymbol 
    push           pc_lex.lxsymptr u64 
    push           pc_parse.readinstr.p u64 
    push           8          
    popptroff                 u64 1 0
    push           1          i64 
    push           pc_parse.readinstr.p u64 
    push           0          
    popptroff                 u8 1 0
    setargs                   0 0
    callproc       &pc_lex.lex 
    push           pc_lex.lxsymbol i64 
    push           3          i64 
    jumpne         #6060      i64 
    setargs                   1 0
    push           ": not used for locals" u64 
    callproc       &pc_parse.serror 
#6060: 
    jump           #6054      
#6041: 
    setargs                   1 0
    push           19         i64 
    callproc       &pc_parse.checksymbol 
    push           pc_lex.lxsymptr u64 
    push           pc_parse.readinstr.p u64 
    push           8          
    popptroff                 u64 1 0
    push           1          i64 
    push           pc_parse.readinstr.p u64 
    push           0          
    popptroff                 u8 1 0
    setargs                   0 0
    callproc       &pc_lex.lex 
    jump           #6054      
#6042: 
#6054: 
    push           pc_lex.lxsymbol i64 
    push           21         i64 
    jumpne         #6061      i64 
    setargs                   1 0
    push           pc_parse.readinstr.p u64 
    callproc       &pc_parse.readmode 
#6061: 
    push           pc_parse.readinstr.p u64 
    push           3          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #6062      i64 
    push           pc_parse.readinstr.mode i64 
    push           0          i64 
    jumpeq         #6063      i64 
    push           pc_parse.readinstr.mode i64 
    push           pc_parse.readinstr.p u64 
    push           3          
    popptroff                 u8 1 0
    push           pc_parse.readinstr.size i64 
    push           pc_parse.readinstr.p u64 
    push           4          
    popptroff                 i32 1 0
#6063: 
#6062: 
    push           &pc_tables.pclextra 
    push           pc_parse.readinstr.opcode i64 
    pushptroff                u8 1 0
    jumpfalse      #6064      i64 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_parse.checksymbol 
    push           pc_lex.lxvalue i64 
    push           pc_parse.readinstr.p u64 
    push           16         
    popptroff                 i32 1 0
    setargs                   0 0
    callproc       &pc_lex.lex 
    push           &pc_tables.pclextra 
    push           pc_parse.readinstr.opcode i64 
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #6065      i64 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_parse.checksymbol 
    push           pc_lex.lxvalue i64 
    push           pc_parse.readinstr.p u64 
    push           20         
    popptroff                 i32 1 0
    setargs                   0 0
    callproc       &pc_lex.lex 
#6065: 
#6064: 
#6066: 
    retproc                   
End


Proc pc_parse.serror:
    param          pc_parse.serror.mess u64 
    procentry                 
    setargs                   2 0
    push           0          u64 
    push           pc_parse.serror.mess u64 
    callproc       &pc_parse.serror_s 
#6068: 
    retproc                   
End


Proc pc_parse.serror_s:
    param          pc_parse.serror_s.mess u64 
    param          pc_parse.serror_s.param u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Syntax error:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_parse.serror_s.mess u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           pc_parse.serror_s.param u64 
    jumpfalse      #6070      u64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           ":"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_parse.serror_s.param u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#6070: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           " on line:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_lex.lxlineno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#6071: 
    retproc                   
End


Proc pc_parse.pcl_readpclfile:: i64
    param          pc_parse.pcl_readpclfile.filename u64 
    param          pc_parse.pcl_readpclfile.rtsfile u64 
    local          pc_parse.pcl_readpclfile.source u64 
    procentry                 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_libpcl.pcl_start 
    setargs                   1 0
    push           pc_parse.pcl_readpclfile.filename u64 
    callfn         &pc_parse.parse_readsource i64 
    jumptrue       #6073      i64 
    push           0          i64 
    setret                    i64 
    jump           #6074      
#6073: 
    push           pc_parse.pcl_readpclfile.rtsfile u64 
    jumpfalse      #6075      u64 
    push           pc_libpcl.maxuserlabel i64 
    pop            pc_libpcl.labelnooffset i64 
    setargs                   0 0
    callfn         &pc_parse.parse_readrts i64 
    jumptrue       #6076      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "No RTS found" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           0          i64 
    setret                    i64 
    jump           #6074      
#6076: 
#6075: 
    setargs                   2 0
    push           0          u64 
    push           11         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_libpcl.pcl_end 
    push           1          i64 
    setret                    i64 
    jump           #6074      
#6074: 
    retfn                     i64 
End


Proc pc_parse.parse_readsource: i64
    param          pc_parse.parse_readsource.filename u64 
    local          pc_parse.parse_readsource.source u64 
    procentry                 
    setargs                   1 0
    push           pc_parse.parse_readsource.filename u64 
    callfn         &mlibp.readfile u64 
    pop            pc_parse.parse_readsource.source u64 
    push           pc_parse.parse_readsource.source u64 
    push           0          u64 
    jumpne         #6078      u64 
    push           "Can't load file" u64 
    pop            pc_libpcl.errormess u64 
    push           0          i64 
    setret                    i64 
    jump           #6079      
#6078: 
    setargs                   1 0
    push           pc_parse.parse_readsource.source u64 
    callfn         &pc_parse.parse i64 
    jumptrue       #6080      i64 
    push           "Couldn't parse" u64 
    pop            pc_libpcl.errormess u64 
    push           0          i64 
    setret                    i64 
    jump           #6079      
#6080: 
    push           1          i64 
    setret                    i64 
    jump           #6079      
#6079: 
    retfn                     i64 
End


Proc pc_parse.parse_readrts: i64
    procentry                 
    setargs                   1 0
    push           pc_parse.parse_readrts.source u64 
    callfn         &pc_parse.parse i64 
    jumptrue       #6082      i64 
    push           "Couldn't parse RTS" u64 
    pop            pc_libpcl.errormess u64 
    push           0          i64 
    setret                    i64 
    jump           #6083      
#6082: 
    push           1          i64 
    setret                    i64 
    jump           #6083      
#6083: 
    retfn                     i64 
End


Proc pc_win64.pcl_genmcl:: i64
    param          pc_win64.pcl_genmcl.optim i64 
    procentry                 
    setargs                   0 0
    callproc       &pc_libpcl.fixuppcl 
    setargs                   1 0
    push           pc_win64.pcl_genmcl.optim i64 
    callproc       &pc_genmcl.genmcl 
    push           1          i64 
    setret                    i64 
    jump           #6085      
#6085: 
    retfn                     i64 
End


Proc pc_win64.pcl_writeasmfile:: i64
    param          pc_win64.pcl_writeasmfile.filename u64 
    param          pc_win64.pcl_writeasmfile.optim i64 
    procentry                 
    setargs                   1 0
    push           pc_win64.pcl_writeasmfile.optim i64 
    callproc       &pc_win64.pcl_genmcl 
    setargs                   1 0
    push           pc_win64.pcl_writeasmfile.filename u64 
    callproc       &pc_win64.writeasmfile 
    push           1          i64 
    setret                    i64 
    jump           #6087      
#6087: 
    retfn                     i64 
End


Proc pc_win64.pcl_getasmstring:: u64
    param          pc_win64.pcl_getasmstring.optim i64 
    local          pc_win64.pcl_getasmstring.asmstr u64 
    procentry                 
    setargs                   1 0
    push           pc_win64.pcl_getasmstring.optim i64 
    callproc       &pc_win64.pcl_genmcl 
    setargs                   0 0
    callfn         &pc_libmcl.getmclstr u64 
    pop            pc_win64.pcl_getasmstring.asmstr u64 
    push           pc_win64.pcl_getasmstring.asmstr u64 
    pushptr                   u64 
    setret                    u64 
    jump           #6089      
#6089: 
    retfn                     u64 
End


Proc pc_win64.pcl_writeexefile:: i64
    param          pc_win64.pcl_writeexefile.filename u64 
    param          pc_win64.pcl_writeexefile.optim i64 
    procentry                 
    setargs                   1 0
    push           pc_win64.pcl_writeexefile.optim i64 
    callproc       &pc_win64.pcl_genmcl 
    setargs                   3 0
    push           0          i64 
    push           pc_win64.pcl_writeexefile.optim i64 
    push           pc_win64.pcl_writeexefile.filename u64 
    callfn         &pc_win64.writeexefile i64 
    setret                    i64 
    jump           #6091      
#6091: 
    retfn                     i64 
End


Proc pc_win64.pcl_writedllfile:: i64
    param          pc_win64.pcl_writedllfile.filename u64 
    param          pc_win64.pcl_writedllfile.optim i64 
    procentry                 
    setargs                   1 0
    push           pc_win64.pcl_writedllfile.optim i64 
    callproc       &pc_win64.pcl_genmcl 
    setargs                   3 0
    push           1          i64 
    push           pc_win64.pcl_writedllfile.optim i64 
    push           pc_win64.pcl_writedllfile.filename u64 
    callfn         &pc_win64.writeexefile i64 
    setret                    i64 
    jump           #6093      
#6093: 
    retfn                     i64 
End


Proc pc_win64.writeexefile: i64
    param          pc_win64.writeexefile.filename u64 
    param          pc_win64.writeexefile.optim i64 
    param          pc_win64.writeexefile.gendll i64 
    local          pc_win64.writeexefile.asmfilename block:300 
    local          pc_win64.writeexefile.str block:300 
    procentry                 
    setargs                   0 0
    callproc       &pc_genss.genss 
    setargs                   0 0
    callproc       &pc_writeexe.initsectiontable 
    setargs                   3 0
    push           pc_win64.writeexefile.gendll i64 
    push           pc_win64.writeexefile.filename u64 
    push           0          u64 
    callproc       &pc_writeexe.genexe 
    setargs                   2 0
    push           pc_win64.writeexefile.gendll i64 
    push           pc_win64.writeexefile.filename u64 
    callproc       &pc_writeexe.writeexe 
    push           1          i64 
    setret                    i64 
    jump           #6095      
#6095: 
    retfn                     i64 
End


Proc pc_win64.writeasmfile:
    param          pc_win64.writeasmfile.filename u64 
    local          pc_win64.writeasmfile.asmstr u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.getmclstr u64 
    pop            pc_win64.writeasmfile.asmstr u64 
    setargs                   2 0
    push           pc_win64.writeasmfile.asmstr u64 
    push           pc_win64.writeasmfile.filename u64 
    callproc       &pc_libmcl.writegsfile 
    setargs                   1 0
    push           pc_win64.writeasmfile.asmstr u64 
    callproc       &mlibp.gs_free 
#6097: 
    retproc                   
End


Proc pc_win64.pcl_readrts:: i64
    param          pc_win64.pcl_readrts.filename u64 
    procentry                 
    push           pc_libpcl.maxuserlabel i64 
    jumpfalse      #6099      i64 
    push           pc_libpcl.maxuserlabel i64 
    pop            pc_libpcl.labelnooffset i64 
    jump           #6100      
#6099: 
    push           &pc_libpcl.labelno 
    incrload                  i64 1
    pop            pc_libpcl.labelnooffset i64 
#6100: 
    setargs                   0 0
    callfn         &pc_parse.parse_readrts i64 
    jumptrue       #6101      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "No RTS file found" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           0          i64 
    setret                    i64 
    jump           #6102      
#6101: 
    push           1          i64 
    setret                    i64 
    jump           #6102      
#6102: 
    retfn                     i64 
End


Proc pc_win64.pcl_endprog::
    param          pc_win64.pcl_endprog.fixup i64 
    param          pc_win64.pcl_endprog.dorts i64 
    procentry                 
    push           pc_win64.pcl_endprog.dorts i64 
    jumpfalse      #6104      i64 
    setargs                   1 0
    push           "rts.pcl"  u64 
    callproc       &pc_win64.pcl_readrts 
#6104: 
    setargs                   1 0
    push           pc_win64.pcl_endprog.fixup i64 
    callproc       &pc_libpcl.pcl_end 
#6105: 
    retproc                   
End


Proc pc_win64.pcl_showss::
    param          pc_win64.pcl_showss.filename u64 
    param          pc_win64.pcl_showss.fexe i64 
    local          pc_win64.pcl_showss.ssstr u64 
    procentry                 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_init 
    setargs                   1 0
    push           pc_win64.pcl_showss.fexe i64 
    callfn         &pc_writessx.writessdata u64 
    pop            pc_win64.pcl_showss.ssstr u64 
    setargs                   2 0
    push           pc_win64.pcl_showss.ssstr u64 
    push           pc_win64.pcl_showss.filename u64 
    callproc       &pc_libmcl.writegsfile 
#6107: 
    retproc                   
End


Proc pc_win64.pcl_writeclangfile::
    param          pc_win64.pcl_writeclangfile.filename u64 
    procentry                 
#6109: 
    retproc                   
End


Proc pci_mcl.axerror:
    param          pci_mcl.axerror.mess u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "MCL Error: #" u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           pci_mcl.axerror.mess u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#6111: 
    retproc                   
End


Proc pc_genmcl.genmcl:
    param          pc_genmcl.genmcl.optim i64 
    procentry                 
    push           pc_libpcl.mcldone i64 
    jumpfalse      #6113      i64 
    jump           #6114      
#6113: 
    setargs                   0 0
    callproc       &pc_genmcl.inithandlers 
    push           pc_genmcl.genmcl.optim i64 
    pop            pc_decls.optimflag i64 
    setargs                   0 0
    callproc       &pc_libmcl.mclinit 
    push           pc_libpcl.pcstart u64 
    pop            pc_genmcl.currpcl u64 
    push           pc_libpcl.labelno i64 
    pop            pci_mcl.mlabelno i64 
    push           0          i64 
    pop            pci_mcl.mseqno i64 
    push           1          i64 
    pop            pci_mcl.passno i64 
#6115: 
    setargs                   1 0
    push           pc_genmcl.currpcl u64 
    callproc       &pc_genmcl.convertpcl 
    push           &pc_genmcl.currpcl 
    incr                      u64 32
#6116: 
    push           pc_genmcl.currpcl u64 
    push           1          
    pushptroff                u8 1 0
    push           11         i64 
    jumpne         #6115      i64 
#6117: 
    setargs                   0 0
    callproc       &pc_libmcl.genabsneg 
    setargs                   0 0
    callproc       &pc_libmcl.genstringtable 
    setargs                   0 0
    callproc       &pc_libmcl.genrealtable 
    setargs                   0 0
    callproc       &pc_libmcl.genrtsproctable 
    setargs                   0 0
    callproc       &pc_libmcl.genfunctiontable 
    setargs                   3 0
    push           0          u64 
    push           0          u64 
    push           10         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           0          u64 
    push           10         i64 
    callproc       &pc_libmcl.genmc 
    push           1          i64 
    pop            pc_libpcl.mcldone i64 
#6114: 
    retproc                   
End


Proc pc_genmcl.convertpcl:
    param          pc_genmcl.convertpcl.p u64 
    local          pc_genmcl.convertpcl.str block:1256 
    local          pc_genmcl.convertpcl.ss u64 
    local          pc_genmcl.convertpcl.m i64 
    procentry                 
    push           pc_genmcl.convertpcl.p u64 
    push           24         
    pushptroff                u32 1 0
    pop            pci_mcl.mseqno i64 
    setargs                   1 0
    push           pc_genmcl.convertpcl.p u64 
    push           &pc_genmcl.px_handlertable 
    push           pc_genmcl.convertpcl.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callprocptr               
#6119: 
    retproc                   
End


Proc pc_genmcl.inithandlers:
    local          pc_genmcl.inithandlers.name u64 
    local          pc_genmcl.inithandlers.n i64 
    local          pc_genmcl.inithandlers.av_1 i64 
    local          pc_genmcl.inithandlers.av_2 i64 
    local          pc_genmcl.inithandlers.i i64 
    local          pc_genmcl.inithandlers.k i64 
    procentry                 
    push           pc_genmcl.inithandlers.initdone u8 
    jumpfalse      #6121      i64 
    jump           #6122      
#6121: 
    getnprocs                 i64 
    pop            pc_genmcl.inithandlers.n i64 
#6123: 
    push           1          i64 
    pop            pc_genmcl.inithandlers.i i64 
    push           pc_genmcl.inithandlers.n i64 
    push           1          i64 
    jumplt         #6124      i64 
#6125: 
    push           pc_genmcl.inithandlers.i i64 
    getprocname               i64 
    pop            pc_genmcl.inithandlers.name u64 
    setargs                   3 0
    push           3          i64 
    push           "px_"      u64 
    push           pc_genmcl.inithandlers.name u64 
    callfn         &mlibp.eqbytes i64 
    jumpfalse      #6126      i64 
#6127: 
    push           0          i64 
    pop            pc_genmcl.inithandlers.k i64 
    push           218        i64 
    pop            pc_genmcl.inithandlers.av_1 i64 
    push           pc_genmcl.inithandlers.av_1 i64 
    push           0          i64 
    jumplt         #6128      i64 
#6129: 
    setargs                   2 0
    push           pc_genmcl.inithandlers.name u64 
    push           3          i64 
    addrefoff                 u64 1 0
    push           &pc_tables.pclnames 
    push           pc_genmcl.inithandlers.k i64 
    pushptroff                u64 8 0
    push           1          i64 
    addrefoff                 u64 1 0
    callfn         &mlibp.eqstring i64 
    jumpfalse      #6130      i64 
    push           pc_genmcl.inithandlers.i i64 
    getprocaddr               i64 
    push           &pc_genmcl.px_handlertable 
    push           pc_genmcl.inithandlers.k i64 
    popptroff                 u64 8 0
    jump           #6131      
#6130: 
#6132: 
    forup          #6129      i64 1
    opnd           pc_genmcl.inithandlers.k 
    opnd           pc_genmcl.inithandlers.av_1 
#6128: 
    setargs                   2 0
    push           pc_genmcl.inithandlers.name u64 
    push           "Invalid handler name:" u64 
    callproc       &pc_genmcl.gerrorc 
#6131: 
#6126: 
#6133: 
    forup          #6125      i64 1
    opnd           pc_genmcl.inithandlers.i 
    opnd           pc_genmcl.inithandlers.n 
#6124: 
#6134: 
    push           0          i64 
    pop            pc_genmcl.inithandlers.i i64 
    push           218        i64 
    pop            pc_genmcl.inithandlers.av_2 i64 
    push           pc_genmcl.inithandlers.av_2 i64 
    push           0          i64 
    jumplt         #6135      i64 
#6136: 
    push           &pc_genmcl.px_handlertable 
    push           pc_genmcl.inithandlers.i i64 
    pushptroff                u64 8 0
    jumptrue       #6137      u64 
    push           &pc_genmcl.unimpl 
    push           &pc_genmcl.px_handlertable 
    push           pc_genmcl.inithandlers.i i64 
    popptroff                 u64 8 0
#6137: 
#6138: 
    forup          #6136      i64 1
    opnd           pc_genmcl.inithandlers.i 
    opnd           pc_genmcl.inithandlers.av_2 
#6135: 
    push           1          i64 
    pop            pc_genmcl.inithandlers.initdone u8 
#6122: 
    retproc                   
End


Proc pc_genmcl.unimpl:
    param          pc_genmcl.unimpl.p u64 
    local          pc_genmcl.unimpl.str block:300 
    procentry                 
    setargs                   1 0
    push           &pc_genmcl.unimpl.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "Unimplemented Opcode:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pc_tables.pclnames 
    push           pc_genmcl.unimpl.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           &pc_genmcl.unimpl.str 
    callproc       &pc_libmcl.mgencomment 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Unimplemented Opcode:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pc_tables.pclnames 
    push           pc_genmcl.unimpl.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#6140: 
    retproc                   
End


Proc pc_genmcl.gerrorc:
    param          pc_genmcl.gerrorc.mess u64 
    param          pc_genmcl.gerrorc.param u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "MCL Gen error:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_genmcl.gerrorc.mess u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           pc_genmcl.gerrorc.param u64 
    jumpfalse      #6142      u64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           ":"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_genmcl.gerrorc.param u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#6142: 
    push           1          i64 
    stop                      
#6143: 
    retproc                   
End


Proc pc_genmcl.px_zero:
    param          pc_genmcl.px_zero.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_zero.p u64 
    callproc       &pc_genmcl.unimpl 
#6145: 
    retproc                   
End


Proc pc_genmcl.px_nop:
    param          pc_genmcl.px_nop.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_nop.p u64 
    callproc       &pc_genmcl.unimpl 
#6147: 
    retproc                   
End


Proc pc_genmcl.px_stop:
    param          pc_genmcl.px_stop.p u64 
    local          pc_genmcl.px_stop.d u64 
    procentry                 
    setargs                   2 0
    push           11         i64 
    push           1          i64 
    callproc       &pc_stackmcl.loadparam 
    setargs                   1 0
    push           "exit"     u64 
    callfn         &pc_libpcl.pcl_makesymbol u64 
    pop            pc_genmcl.px_stop.d u64 
    push           1          u64 
    push           pc_genmcl.px_stop.d u64 
    push           46         
    addrefoff                 u64 1 0
    push           1          i64 
    popdotindex               u16 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_stop.d u64 
    callfn         &pc_libmcl.mgenmemaddr u64 
    push           22         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6149: 
    retproc                   
End


Proc pc_genmcl.px_comment:
    param          pc_genmcl.px_comment.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_comment.p u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &pc_libmcl.mgencomment 
#6151: 
    retproc                   
End


Proc pc_genmcl.px_importdll:
    param          pc_genmcl.px_importdll.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_importdll.p u64 
    callproc       &pc_genmcl.unimpl 
#6153: 
    retproc                   
End


Proc pc_genmcl.px_istatic:
    param          pc_genmcl.px_istatic.p u64 
    procentry                 
    setargs                   2 0
    push           pc_genmcl.px_istatic.p u64 
    push           16         
    pushptroff                i32 1 0
    push           73         i64 
    callproc       &pc_libmcl.setsegment 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_istatic.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmemaddr u64 
    push           6          i64 
    callproc       &pc_libmcl.genmc 
#6155: 
    retproc                   
End


Proc pc_genmcl.px_zstatic:
    param          pc_genmcl.px_zstatic.p u64 
    local          pc_genmcl.px_zstatic.d u64 
    procentry                 
    push           pc_genmcl.px_zstatic.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_genmcl.px_zstatic.d u64 
    setargs                   2 0
    push           pc_genmcl.px_zstatic.p u64 
    push           16         
    pushptroff                i32 1 0
    push           90         i64 
    callproc       &pc_libmcl.setsegment 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_zstatic.d u64 
    callfn         &pc_libmcl.mgenmemaddr u64 
    push           6          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_zstatic.p u64 
    push           4          
    pushptroff                i32 1 0
    callfn         &pc_libmcl.mgenint u64 
    push           124        i64 
    callproc       &pc_libmcl.genmc 
#6157: 
    retproc                   
End


Proc pc_genmcl.px_equiv:
    param          pc_genmcl.px_equiv.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_equiv.p u64 
    callproc       &pc_genmcl.unimpl 
#6159: 
    retproc                   
End


Proc pc_genmcl.px_procdef:
    param          pc_genmcl.px_procdef.p u64 
    local          pc_genmcl.px_procdef.name u64 
    procentry                 
    push           pc_genmcl.currpcl u64 
    pop            pci_mcl.procdefpcl u64 
    push           pc_genmcl.currpcl u64 
    push           8          
    pushptroff                u64 1 0
    pop            pci_mcl.procdef u64 
    push           pci_mcl.procdef u64 
    pushptr                   u64 
    pop            pc_genmcl.px_procdef.name u64 
    setargs                   2 0
    push           16         i64 
    push           67         i64 
    callproc       &pc_libmcl.setsegment 
    push           pci_mcl.passno i64 
    push           1          i64 
    jumpne         #6161      i64 
    setargs                   1 0
    push           "DUMMY"    u64 
    callproc       &pc_libmcl.mgencomment 
    push           pci_mcl.mccodex u64 
    pop            pc_genmcl.procdefmcl u64 
#6161: 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.procdef u64 
    callfn         &pc_libmcl.mgenmemaddr u64 
    push           1          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.procdef u64 
    callfn         &pc_libmcl.mgenmemaddr u64 
    push           6          i64 
    callproc       &pc_libmcl.genmc 
    push           0          i64 
    store          pci_mcl.nparams i64 
    pop            pci_mcl.nlocals i64 
#6162: 
    retproc                   
End


Proc pc_genmcl.px_threadedproc:
    param          pc_genmcl.px_threadedproc.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_threadedproc.p u64 
    callproc       &pc_genmcl.px_procdef 
#6164: 
    retproc                   
End


Proc pc_genmcl.px_procentry:
    param          pc_genmcl.px_procentry.p u64 
    local          pc_genmcl.px_procentry.np i64 
    local          pc_genmcl.px_procentry.regoffset i64 
    local          pc_genmcl.px_procentry.offset i64 
    local          pc_genmcl.px_procentry.dreg i64 
    local          pc_genmcl.px_procentry.xreg i64 
    local          pc_genmcl.px_procentry.nregparams i64 
    local          pc_genmcl.px_procentry.nspill i64 
    local          pc_genmcl.px_procentry.hasequiv i64 
    local          pc_genmcl.px_procentry.ax u64 
    local          pc_genmcl.px_procentry.d u64 
    local          pc_genmcl.px_procentry.i i64 
    procentry                 
    push           0          i64 
    pop            pci_mcl.framebytes i64 
    push           0          i64 
    pop            pci_mcl.frameoffset i64 
    push           0          i64 
    pop            pci_mcl.paramoffset i64 
    push           0          i64 
    pop            pci_mcl.needstackframe i64 
    push           0          i64 
    store          pci_mcl.nxsaveregs i64 
    pop            pci_mcl.ndsaveregs i64 
    push           0          i64 
    pop            pci_mcl.ndsavepush i64 
    push           0          i64 
    store          pc_genmcl.px_procentry.nspill i64 
    pop            pc_genmcl.px_procentry.nregparams i64 
    push           0          i64 
    pop            pci_mcl.needshadow48 i64 
    push           0          i64 
    pop            pci_mcl.needshadow32 i64 
    push           0          i64 
    pop            pc_genmcl.px_procentry.hasequiv i64 
    push           pci_mcl.inf_assem i64 
    jumpfalse      #6166      i64 
    jump           #6167      
#6166: 
    push           pci_mcl.passno i64 
    push           2          i64 
    jumpne         #6168      i64 
    push           pci_mcl.inf_leafproc i64 
    jumpfalse      #6168      i64 
    push           11         i64 
    pop            pc_genmcl.px_procentry.dreg i64 
    push           1          i64 
    pop            pc_genmcl.px_procentry.xreg i64 
#6169: 
    push           1          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.nparams i64 
    push           1          i64 
    jumplt         #6170      i64 
#6171: 
    push           pc_genmcl.px_procentry.i i64 
    push           4          i64 
    jumple         #6172      i64 
    jump           #6170      
#6172: 
    push           &pci_mcl.paramdefs 
    push           pc_genmcl.px_procentry.i i64 
    pushptroff                u64 8 -8
    pop            pc_genmcl.px_procentry.d u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_procentry.d u64 
    push           16         
    pushptroff                u64 1 0
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6173      i64 0
    push           3          i64 
    casejumpeq     #6174      i64 0
    popstack                  i64 
    jump           #6175      
#6173: 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           2          i64 
    dotindex                  i64 
    jumptrue       #6176      u64 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           5          i64 
    dotindex                  i64 
    jumptrue       #6176      u64 
    push           pc_genmcl.px_procentry.d u64 
    push           48         
    pushptroff                i16 1 0
    jumpfalse      #6176      i64 
    push           pc_genmcl.px_procentry.dreg i64 
    push           pc_genmcl.px_procentry.d u64 
    push           50         
    popptroff                 u8 1 0
    push           1          i64 
    push           &pci_mcl.isregvar 
    push           pc_genmcl.px_procentry.dreg i64 
    popptroff                 u8 1 -1
    push           pc_genmcl.px_procentry.dreg i64 
    push           11         i64 
    jumpne         #6177      i64 
    push           1          i64 
    pop            pci_mcl.inf_r10used i64 
#6177: 
    push           pc_genmcl.px_procentry.dreg i64 
    push           12         i64 
    jumpne         #6178      i64 
    push           1          i64 
    pop            pci_mcl.inf_r11used i64 
#6178: 
    push           pc_genmcl.px_procentry.dreg i64 
    push           14         i64 
    jumpne         #6179      i64 
    push           1          i64 
    pop            pci_mcl.inf_r13used i64 
#6179: 
    push           &pc_genmcl.px_procentry.nregparams 
    incr                      i64 1
#6176: 
    jump           #6180      
#6174: 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           2          i64 
    dotindex                  i64 
    jumptrue       #6181      u64 
    push           pc_genmcl.px_procentry.d u64 
    push           48         
    pushptroff                i16 1 0
    jumpfalse      #6181      i64 
    push           pc_genmcl.px_procentry.xreg i64 
    push           pc_genmcl.px_procentry.d u64 
    push           50         
    popptroff                 u8 1 0
    push           1          i64 
    push           &pci_mcl.isxregvar 
    push           pc_genmcl.px_procentry.dreg i64 
    popptroff                 u8 1 -1
    push           &pc_genmcl.px_procentry.nregparams 
    incr                      i64 1
#6181: 
    jump           #6180      
#6175: 
#6180: 
    push           &pc_genmcl.px_procentry.dreg 
    incr                      i64 1
    push           &pc_genmcl.px_procentry.xreg 
    incr                      i64 1
#6182: 
    forup          #6171      i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.nparams 
#6170: 
#6168: 
    push           pci_mcl.passno i64 
    push           2          i64 
    jumpne         #6183      i64 
    push           10         i64 
    pop            pc_genmcl.px_procentry.dreg i64 
    push           16         i64 
    pop            pc_genmcl.px_procentry.xreg i64 
#6184: 
    push           1          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.nlocals i64 
    push           1          i64 
    jumplt         #6185      i64 
#6186: 
    push           &pci_mcl.localdefs 
    push           pc_genmcl.px_procentry.i i64 
    pushptroff                u64 8 -8
    pop            pc_genmcl.px_procentry.d u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_procentry.d u64 
    push           16         
    pushptroff                u64 1 0
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6187      i64 0
    push           3          i64 
    casejumpeq     #6188      i64 0
    popstack                  i64 
    jump           #6189      
#6187: 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           2          i64 
    dotindex                  i64 
    jumptrue       #6190      u64 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           5          i64 
    dotindex                  i64 
    jumptrue       #6190      u64 
    push           pc_genmcl.px_procentry.d u64 
    push           48         
    pushptroff                i16 1 0
    jumpfalse      #6190      i64 
    push           pc_genmcl.px_procentry.dreg i64 
    push           pci_mcl.inf_highreg i64 
    jumple         #6191      i64 
    push           pc_genmcl.px_procentry.dreg i64 
    push           4          i64 
    jumpge         #6192      i64 
#6191: 
    jump           #6193      
#6192: 
    push           pc_genmcl.px_procentry.dreg i64 
    push           &pci_mcl.dsaveregs 
    push           &pci_mcl.ndsaveregs 
    incrload                  i64 1
    popptroff                 i64 8 -8
    push           pc_genmcl.px_procentry.dreg i64 
    push           pc_genmcl.px_procentry.d u64 
    push           50         
    popptroff                 u8 1 0
    push           1          i64 
    push           &pci_mcl.isregvar 
    push           pc_genmcl.px_procentry.dreg i64 
    popptroff                 u8 1 -1
    push           &pc_genmcl.px_procentry.dreg 
    decr                      i64 1
#6190: 
    jump           #6194      
#6188: 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           2          i64 
    dotindex                  i64 
    jumptrue       #6195      u64 
    push           pc_genmcl.px_procentry.d u64 
    push           48         
    pushptroff                i16 1 0
    jumpfalse      #6195      i64 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           5          i64 
    dotindex                  i64 
    jumptrue       #6195      u64 
    push           pc_genmcl.px_procentry.xreg i64 
    push           pci_mcl.inf_highxreg i64 
    jumple         #6196      i64 
    push           pc_genmcl.px_procentry.xreg i64 
    push           7          i64 
    jumpge         #6197      i64 
#6196: 
    jump           #6193      
#6197: 
    push           pc_genmcl.px_procentry.xreg i64 
    push           &pci_mcl.xsaveregs 
    push           &pci_mcl.nxsaveregs 
    incrload                  i64 1
    popptroff                 i64 8 -8
    push           pc_genmcl.px_procentry.xreg i64 
    push           pc_genmcl.px_procentry.d u64 
    push           50         
    popptroff                 u8 1 0
    push           1          i64 
    push           &pci_mcl.isxregvar 
    push           pc_genmcl.px_procentry.dreg i64 
    popptroff                 u8 1 -1
    push           &pc_genmcl.px_procentry.xreg 
    decr                      i64 1
#6195: 
    jump           #6194      
#6189: 
#6194: 
#6193: 
    forup          #6186      i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.nlocals 
#6185: 
    push           pci_mcl.inf_leafproc i64 
    jumptrue       #6198      i64 
#6199: 
    push           1          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.nparams i64 
    push           1          i64 
    jumplt         #6200      i64 
#6201: 
    push           pc_genmcl.px_procentry.i i64 
    push           4          i64 
    jumple         #6202      i64 
    jump           #6200      
#6202: 
    push           &pci_mcl.paramdefs 
    push           pc_genmcl.px_procentry.i i64 
    pushptroff                u64 8 -8
    pop            pc_genmcl.px_procentry.d u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_procentry.d u64 
    push           16         
    pushptroff                u64 1 0
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6203      i64 0
    push           3          i64 
    casejumpeq     #6204      i64 0
    popstack                  i64 
    jump           #6205      
#6203: 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           2          i64 
    dotindex                  i64 
    jumptrue       #6206      u64 
    push           pc_genmcl.px_procentry.d u64 
    push           48         
    pushptroff                i16 1 0
    jumpfalse      #6206      i64 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           5          i64 
    dotindex                  i64 
    jumptrue       #6206      u64 
    push           pc_genmcl.px_procentry.dreg i64 
    push           pci_mcl.inf_highreg i64 
    jumple         #6207      i64 
    push           pc_genmcl.px_procentry.dreg i64 
    push           4          i64 
    jumpge         #6208      i64 
#6207: 
    jump           #6209      
#6208: 
    push           pc_genmcl.px_procentry.dreg i64 
    push           &pci_mcl.dsaveregs 
    push           &pci_mcl.ndsaveregs 
    incrload                  i64 1
    popptroff                 i64 8 -8
    push           pc_genmcl.px_procentry.dreg i64 
    push           pc_genmcl.px_procentry.d u64 
    push           50         
    popptroff                 u8 1 0
    push           1          i64 
    push           &pci_mcl.isregvar 
    push           pc_genmcl.px_procentry.dreg i64 
    popptroff                 u8 1 -1
    push           &pc_genmcl.px_procentry.dreg 
    decr                      i64 1
    push           &pc_genmcl.px_procentry.nregparams 
    incr                      i64 1
#6206: 
    jump           #6210      
#6204: 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           2          i64 
    dotindex                  i64 
    jumptrue       #6211      u64 
    push           pc_genmcl.px_procentry.d u64 
    push           48         
    pushptroff                i16 1 0
    jumpfalse      #6211      i64 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           5          i64 
    dotindex                  i64 
    jumptrue       #6211      u64 
    push           pc_genmcl.px_procentry.xreg i64 
    push           pci_mcl.inf_highxreg i64 
    jumple         #6212      i64 
    push           pc_genmcl.px_procentry.xreg i64 
    push           7          i64 
    jumpge         #6213      i64 
#6212: 
    jump           #6209      
#6213: 
    push           pc_genmcl.px_procentry.xreg i64 
    push           &pci_mcl.xsaveregs 
    push           &pci_mcl.nxsaveregs 
    incrload                  i64 1
    popptroff                 i64 8 -8
    push           pc_genmcl.px_procentry.xreg i64 
    push           pc_genmcl.px_procentry.d u64 
    push           50         
    popptroff                 u8 1 0
    push           1          i64 
    push           &pci_mcl.isxregvar 
    push           pc_genmcl.px_procentry.dreg i64 
    popptroff                 u8 1 -1
    push           &pc_genmcl.px_procentry.xreg 
    decr                      i64 1
    push           &pc_genmcl.px_procentry.nregparams 
    incr                      i64 1
#6211: 
    jump           #6210      
#6205: 
#6210: 
#6209: 
    forup          #6201      i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.nparams 
#6200: 
#6198: 
#6183: 
!skip::
#6167: 
#6214: 
    push           1          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.nparams i64 
    push           1          i64 
    jumplt         #6215      i64 
#6216: 
    push           &pci_mcl.paramdefs 
    push           pc_genmcl.px_procentry.i i64 
    pushptroff                u64 8 -8
    pop            pc_genmcl.px_procentry.d u64 
    push           pc_genmcl.px_procentry.d u64 
    push           50         
    pushptroff                u8 1 0
    jumptrue       #6217      i64 
    push           pc_genmcl.px_procentry.i i64 
    push           1          i64 
    jumple         #6218      i64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_procentry.d u64 
    push           16         
    pushptroff                u64 1 0
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #6218      i64 
    push           &pci_mcl.paramdefs 
    push           pc_genmcl.px_procentry.i i64 
    pushptroff                u64 8 -16
    push           pc_genmcl.px_procentry.d u64 
    jumpne         #6218      u64 
    jump           #6219      
#6218: 
    push           pci_mcl.paramoffset i64 
    push           16         i64 
    add                       i64 
    push           pc_genmcl.px_procentry.d u64 
    push           32         
    popptroff                 i32 1 0
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_procentry.d u64 
    push           32         
    pushptroff                i32 1 0
    callfn         &pc_libmcl.mgenint u64 
    setargs                   1 0
    setargs                   1 0
    push           pc_genmcl.px_procentry.d u64 
    callfn         &pc_libmcl.getfullname u64 
    callfn         &pc_libmcl.mgenname u64 
    push           7          i64 
    callproc       &pc_libmcl.genmc 
#6219: 
    jump           #6220      
#6217: 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_procentry.d u64 
    push           16         
    pushptroff                u64 1 0
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #6221      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_procentry.d u64 
    push           50         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   1 0
    setargs                   1 0
    push           pc_genmcl.px_procentry.d u64 
    callfn         &pc_libmcl.getfullname u64 
    callfn         &pc_libmcl.mgenname u64 
    push           8          i64 
    callproc       &pc_libmcl.genmc 
    jump           #6220      
#6221: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_procentry.d u64 
    push           50         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenxreg u64 
    setargs                   1 0
    setargs                   1 0
    push           pc_genmcl.px_procentry.d u64 
    callfn         &pc_libmcl.getfullname u64 
    callfn         &pc_libmcl.mgenname u64 
    push           8          i64 
    callproc       &pc_libmcl.genmc 
#6220: 
    push           &pci_mcl.paramoffset 
    push           8          i64 
    addto                     i64 
#6222: 
    forup          #6216      i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.nparams 
#6215: 
#6223: 
    push           4          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.inf_highreg i64 
    push           4          i64 
    jumplt         #6224      i64 
#6225: 
    push           pc_genmcl.px_procentry.i i64 
    push           &pci_mcl.dsaveregs 
    push           &pci_mcl.ndsaveregs 
    incrload                  i64 1
    popptroff                 i64 8 -8
#6226: 
    forup          #6225      i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.inf_highreg 
#6224: 
#6227: 
    push           7          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.inf_highxreg i64 
    push           7          i64 
    jumplt         #6228      i64 
#6229: 
    push           pc_genmcl.px_procentry.i i64 
    push           &pci_mcl.xsaveregs 
    push           &pci_mcl.nxsaveregs 
    incrload                  i64 1
    popptroff                 i64 8 -8
#6230: 
    forup          #6229      i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.inf_highxreg 
#6228: 
    push           pci_mcl.nparams i64 
    push           4          i64 
    jumple         #6231      i64 
    push           1          i64 
    pop            pci_mcl.needstackframe i64 
    push           4          i64 
    push           pc_genmcl.px_procentry.nregparams i64 
    sub                       i64 
    pop            pc_genmcl.px_procentry.nspill i64 
    jump           #6232      
#6231: 
    push           pci_mcl.ndsaveregs i64 
    pop            pci_mcl.ndsavepush i64 
    push           0          i64 
    pop            pci_mcl.ndsaveregs i64 
    push           pci_mcl.nparams i64 
    push           pc_genmcl.px_procentry.nregparams i64 
    sub                       i64 
    pop            pc_genmcl.px_procentry.nspill i64 
    push           pc_genmcl.px_procentry.nspill i64 
    jumpfalse      #6233      i64 
    push           1          i64 
    pop            pci_mcl.needstackframe i64 
#6233: 
#6232: 
#6234: 
    push           1          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.nlocals i64 
    push           1          i64 
    jumplt         #6235      i64 
#6236: 
    push           &pci_mcl.localdefs 
    push           pc_genmcl.px_procentry.i i64 
    pushptroff                u64 8 -8
    pop            pc_genmcl.px_procentry.d u64 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           6          i64 
    dotindex                  i64 
    jumpfalse      #6237      u64 
    push           1          i64 
    pop            pc_genmcl.px_procentry.hasequiv i64 
    jump           #6238      
#6237: 
    push           pc_genmcl.px_procentry.d u64 
    push           50         
    pushptroff                u8 1 0
    jumptrue       #6239      i64 
    push           &pci_mcl.frameoffset 
    setargs                   1 0
    push           pc_genmcl.px_procentry.d u64 
    push           16         
    pushptroff                u64 1 0
    push           4          
    pushptroff                i32 1 0
    callfn         &pc_libmcl.roundsizetg i64 
    subto                     i64 
    push           pci_mcl.frameoffset i64 
    push           pc_genmcl.px_procentry.d u64 
    push           32         
    popptroff                 i32 1 0
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_procentry.d u64 
    push           32         
    pushptroff                i32 1 0
    callfn         &pc_libmcl.mgenint u64 
    setargs                   1 0
    setargs                   1 0
    push           pc_genmcl.px_procentry.d u64 
    callfn         &pc_libmcl.getfullname u64 
    callfn         &pc_libmcl.mgenname u64 
    push           7          i64 
    callproc       &pc_libmcl.genmc 
    jump           #6238      
#6239: 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_procentry.d u64 
    push           16         
    pushptroff                u64 1 0
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #6240      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_procentry.d u64 
    push           50         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   1 0
    setargs                   1 0
    push           pc_genmcl.px_procentry.d u64 
    callfn         &pc_libmcl.getfullname u64 
    callfn         &pc_libmcl.mgenname u64 
    push           8          i64 
    callproc       &pc_libmcl.genmc 
    jump           #6238      
#6240: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_procentry.d u64 
    push           50         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenxreg u64 
    setargs                   1 0
    setargs                   1 0
    push           pc_genmcl.px_procentry.d u64 
    callfn         &pc_libmcl.getfullname u64 
    callfn         &pc_libmcl.mgenname u64 
    push           8          i64 
    callproc       &pc_libmcl.genmc 
#6238: 
#6241: 
    forup          #6236      i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.nlocals 
#6235: 
    push           pc_genmcl.px_procentry.hasequiv i64 
    jumpfalse      #6242      i64 
#6243: 
    push           1          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.nlocals i64 
    push           1          i64 
    jumplt         #6244      i64 
#6245: 
    push           &pci_mcl.localdefs 
    push           pc_genmcl.px_procentry.i i64 
    pushptroff                u64 8 -8
    pop            pc_genmcl.px_procentry.d u64 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           6          i64 
    dotindex                  i64 
    jumpfalse      #6246      u64 
    setargs                   2 0
    push           ""         u64 
    push           "D.ATVAR NOT READY" u64 
    callproc       &pc_libmcl.merror 
#6246: 
#6247: 
    forup          #6245      i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.nlocals 
#6244: 
#6242: 
    push           &pci_mcl.frameoffset 
    push           pci_mcl.ndsaveregs i64 
    push           8          i64 
    mul                       i64 
    subto                     i64 
    push           pci_mcl.frameoffset i64 
    pop            pci_mcl.dsaveoffset i64 
    push           &pci_mcl.frameoffset 
    push           pci_mcl.nxsaveregs i64 
    push           8          i64 
    mul                       i64 
    subto                     i64 
    push           pci_mcl.frameoffset i64 
    pop            pci_mcl.xsaveoffset i64 
    push           pci_mcl.frameoffset i64 
    neg                       i64 
    pop            pci_mcl.framebytes i64 
    push           pci_mcl.nlocals i64 
    jumptrue       #6248      i64 
    push           pci_mcl.nparams i64 
    jumpfalse      #6249      i64 
#6248: 
    push           pci_mcl.procdef u64 
    push           46         
    pushptroff                u16 1 0
    push           7          i64 
    dotindex                  i64 
    jumpfalse      #6249      u64 
    setargs                   2 0
    push           ""         u64 
    push           "params/locals in threaded?" u64 
    callproc       &pc_libmcl.merror 
#6249: 
    push           pci_mcl.framebytes i64 
    jumpfalse      #6250      i64 
    push           1          i64 
    pop            pci_mcl.needstackframe i64 
#6250: 
    jump           #6251      
#6252: 
    push           &pci_mcl.framebytes 
    incr                      i64 1
#6251: 
    push           pci_mcl.framebytes i64 
    push           15         i64 
    iand                      i64 
    jumptrue       #6252      i64 
#6253: 
    push           pci_mcl.needstackframe i64 
    jumpfalse      #6254      i64 
    push           pci_mcl.ndsavepush i64 
    push           0          i64 
    dotindex                  i64 
    jumpfalse      #6254      u64 
    push           &pci_mcl.framebytes 
    push           8          i64 
    addto                     i64 
#6254: 
    push           pci_mcl.needstackframe i64 
    jumpfalse      #6255      i64 
    push           pci_mcl.inf_leafproc i64 
    jumptrue       #6255      i64 
    push           &pci_mcl.framebytes 
    push           32         i64 
    addto                     i64 
#6255: 
    push           pci_mcl.needstackframe i64 
    jumpfalse      #6256      i64 
    push           pci_mcl.ndsavepush i64 
    jumpfalse      #6256      i64 
    push           1          i64 
    pop            pci_mcl.needshadow48 i64 
#6256: 
    push           pci_mcl.needstackframe i64 
    jumptrue       #6257      i64 
    push           pci_mcl.inf_leafproc i64 
    jumptrue       #6257      i64 
    push           pci_mcl.procdef u64 
    push           46         
    pushptroff                u16 1 0
    push           7          i64 
    dotindex                  i64 
    jumptrue       #6257      u64 
    startmult                 
    push           pci_mcl.ndsavepush i64 
    push           0          i64 
    dotindex                  i64 
    jumpfalse      #6258      u64 
    push           32         i64 
    resetmult                 
    jump           #6259      
#6258: 
    push           40         i64 
    endmult                   
#6259: 
    pop            pci_mcl.needshadow32 i64 
#6257: 
#6260: 
    push           1          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.ndsavepush i64 
    push           1          i64 
    jumplt         #6261      i64 
#6262: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           &pci_mcl.dsaveregs 
    push           pc_genmcl.px_procentry.i i64 
    pushptroff                i64 8 -8
    callfn         &pc_libmcl.mgenreg u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
#6263: 
    forup          #6262      i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.ndsavepush 
#6261: 
    push           pci_mcl.needshadow48 i64 
    jumpfalse      #6264      i64 
    setargs                   1 0
    push           48         i64 
    callproc       &pc_stackmcl.pushstack 
#6264: 
    push           pci_mcl.needstackframe i64 
    jumpfalse      #6265      i64 
    setargs                   3 0
    push           0          u64 
    push           pci_mcl.dframeopnd u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pci_mcl.dstackopnd u64 
    push           pci_mcl.dframeopnd u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           pci_mcl.framebytes i64 
    jumpfalse      #6266      i64 
    setargs                   1 0
    push           pci_mcl.framebytes i64 
    callproc       &pc_stackmcl.pushstack 
#6266: 
    jump           #6267      
#6265: 
    push           pci_mcl.needshadow32 i64 
    jumpfalse      #6268      i64 
    setargs                   1 0
    push           pci_mcl.needshadow32 i64 
    callproc       &pc_stackmcl.pushstack 
#6268: 
#6267: 
    push           pci_mcl.dsaveoffset i64 
    pop            pc_genmcl.px_procentry.offset i64 
#6269: 
    push           1          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.ndsaveregs i64 
    push           1          i64 
    jumplt         #6270      i64 
#6271: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           &pci_mcl.dsaveregs 
    push           pc_genmcl.px_procentry.i i64 
    pushptroff                i64 8 -8
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           8          i64 
    push           pc_genmcl.px_procentry.offset i64 
    push           1          i64 
    push           0          i64 
    push           15         i64 
    callfn         &pc_libmcl.mgenindex u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_genmcl.px_procentry.offset 
    push           8          i64 
    addto                     i64 
#6272: 
    forup          #6271      i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.ndsaveregs 
#6270: 
    push           pci_mcl.xsaveoffset i64 
    pop            pc_genmcl.px_procentry.offset i64 
#6273: 
    push           1          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.nxsaveregs i64 
    push           1          i64 
    jumplt         #6274      i64 
#6275: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           &pci_mcl.xsaveregs 
    push           pc_genmcl.px_procentry.i i64 
    pushptroff                i64 8 -8
    callfn         &pc_libmcl.mgenxreg u64 
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           8          i64 
    push           pc_genmcl.px_procentry.offset i64 
    push           1          i64 
    push           0          i64 
    push           15         i64 
    callfn         &pc_libmcl.mgenindex u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_genmcl.px_procentry.offset 
    push           8          i64 
    addto                     i64 
#6276: 
    forup          #6275      i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.nxsaveregs 
#6274: 
    push           16         i64 
    pop            pc_genmcl.px_procentry.offset i64 
    push           0          i64 
    pop            pc_genmcl.px_procentry.regoffset i64 
#6277: 
    push           1          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.nparams i64 
    push           1          i64 
    jumplt         #6278      i64 
#6279: 
    push           pc_genmcl.px_procentry.regoffset i64 
    push           3          i64 
    jumple         #6280      i64 
    jump           #6278      
#6280: 
    push           &pci_mcl.paramdefs 
    push           pc_genmcl.px_procentry.i i64 
    pushptroff                u64 8 -8
    pop            pc_genmcl.px_procentry.d u64 
    push           pc_genmcl.px_procentry.d u64 
    push           50         
    pushptroff                u8 1 0
    jumptrue       #6281      i64 
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           8          i64 
    push           pc_genmcl.px_procentry.offset i64 
    push           1          i64 
    push           0          i64 
    push           15         i64 
    callfn         &pc_libmcl.mgenindex u64 
    pop            pc_genmcl.px_procentry.ax u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_procentry.d u64 
    push           16         
    pushptroff                u64 1 0
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           3          i64 
    casejumpeq     #6282      i64 0
    push           2          i64 
    casejumpeq     #6283      i64 0
    popstack                  i64 
    jump           #6284      
#6282: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    push           pc_genmcl.px_procentry.regoffset i64 
    add                       i64 
    callfn         &pc_libmcl.mgenxreg u64 
    push           pc_genmcl.px_procentry.ax u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6285      
#6283: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    push           pc_genmcl.px_procentry.regoffset i64 
    add                       i64 
    callfn         &pc_libmcl.mgenxreg u64 
    setargs                   2 0
    push           4          i64 
    push           pc_genmcl.px_procentry.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6285      
#6284: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_procentry.regoffset i64 
    push           11         i64 
    add                       i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           pc_genmcl.px_procentry.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
#6285: 
    jump           #6286      
#6281: 
    push           pc_genmcl.px_procentry.d u64 
    push           50         
    pushptroff                u8 1 0
    jumpfalse      #6287      i64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_procentry.d u64 
    push           16         
    pushptroff                u64 1 0
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           3          i64 
    casejumpeq     #6288      i64 0
    push           1          i64 
    casejumpeq     #6289      i64 0
    popstack                  i64 
    jump           #6290      
#6288: 
    push           pc_genmcl.px_procentry.d u64 
    push           50         
    pushptroff                u8 1 0
    push           1          i64 
    push           pc_genmcl.px_procentry.regoffset i64 
    add                       i64 
    jumpeq         #6291      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    push           pc_genmcl.px_procentry.regoffset i64 
    add                       i64 
    callfn         &pc_libmcl.mgenxreg u64 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_procentry.d u64 
    push           50         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenxreg u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
#6291: 
    jump           #6292      
#6289: 
    push           pc_genmcl.px_procentry.d u64 
    push           50         
    pushptroff                u8 1 0
    push           11         i64 
    push           pc_genmcl.px_procentry.regoffset i64 
    add                       i64 
    jumpeq         #6293      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_procentry.regoffset i64 
    push           11         i64 
    add                       i64 
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_procentry.d u64 
    push           50         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
#6293: 
    jump           #6292      
#6290: 
#6292: 
#6287: 
#6286: 
    push           &pc_genmcl.px_procentry.offset 
    push           8          i64 
    addto                     i64 
    push           &pc_genmcl.px_procentry.regoffset 
    incr                      i64 1
#6294: 
    forup          #6279      i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.nparams 
#6278: 
#6295: 
    retproc                   
End


Proc pc_genmcl.px_endproc:
    param          pc_genmcl.px_endproc.p u64 
    procentry                 
    setargs                   3 0
    push           0          u64 
    push           0          u64 
    push           2          i64 
    callproc       &pc_libmcl.genmc 
    push           pci_mcl.passno i64 
    push           1          i64 
    jumpne         #6297      i64 
    setargs                   0 0
    callproc       &pc_stackmcl.resetopnds1 
    push           pci_mcl.inf_assem i64 
    jumpfalse      #6298      i64 
    push           0          i64 
    pop            pci_mcl.inf_assem i64 
    setargs                   0 0
    callproc       &pc_stackmcl.resetopnds2 
    jump           #6299      
#6298: 
    push           pc_decls.optimflag i64 
    jumpfalse      #6300      i64 
    push           pci_mcl.inf_assem i64 
    jumptrue       #6300      i64 
    push           2          i64 
    pop            pci_mcl.passno i64 
    push           pci_mcl.procdefpcl u64 
    push           1          i64 
    subrefoff                 u64 32 0
    pop            pc_genmcl.currpcl u64 
    push           pc_genmcl.procdefmcl u64 
    pop            pci_mcl.mccodex u64 
    push           0          u64 
    push           pci_mcl.mccodex u64 
    push           0          
    popptroff                 u64 1 0
#6300: 
#6299: 
    jump           #6301      
#6297: 
    setargs                   0 0
    callproc       &pc_stackmcl.resetopnds2 
    push           1          i64 
    pop            pci_mcl.passno i64 
#6301: 
#6302: 
    retproc                   
End


Proc pc_genmcl.px_endprogram:
    param          pc_genmcl.px_endprogram.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_endprogram.p u64 
    callproc       &pc_genmcl.unimpl 
#6304: 
    retproc                   
End


Proc pc_genmcl.px_extproc:
    param          pc_genmcl.px_extproc.p u64 
    procentry                 
#6306: 
    retproc                   
End


Proc pc_genmcl.px_extparam:
    param          pc_genmcl.px_extparam.p u64 
    procentry                 
#6308: 
    retproc                   
End


Proc pc_genmcl.px_extvariadics:
    param          pc_genmcl.px_extvariadics.p u64 
    procentry                 
#6310: 
    retproc                   
End


Proc pc_genmcl.px_endextproc:
    param          pc_genmcl.px_endextproc.p u64 
    procentry                 
#6312: 
    retproc                   
End


Proc pc_genmcl.px_local:
    param          pc_genmcl.px_local.p u64 
    procentry                 
    push           pci_mcl.nlocals i64 
    push           256        i64 
    jumplt         #6314      i64 
    setargs                   2 0
    push           ""         u64 
    push           "Too many locals" u64 
    callproc       &pc_libmcl.merror 
#6314: 
    push           &pci_mcl.nlocals 
    incr                      i64 1
    push           &pc_tables.pcat 
    push           pc_genmcl.px_local.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6315      i64 0
    push           3          i64 
    casejumpeq     #6316      i64 0
    popstack                  i64 
    jump           #6317      
#6315: 
    push           &pci_mcl.inf_proclocals 
    incr                      i64 1
    jump           #6318      
#6316: 
    push           &pci_mcl.inf_procxlocals 
    incr                      i64 1
    jump           #6318      
#6317: 
#6318: 
    push           pc_genmcl.px_local.p u64 
    push           8          
    pushptroff                u64 1 0
    push           &pci_mcl.localdefs 
    push           pci_mcl.nlocals i64 
    popptroff                 u64 8 -8
#6319: 
    retproc                   
End


Proc pc_genmcl.px_param:
    param          pc_genmcl.px_param.p u64 
    procentry                 
    push           pci_mcl.nparams i64 
    push           32         i64 
    jumplt         #6321      i64 
    setargs                   2 0
    push           ""         u64 
    push           "Too many params" u64 
    callproc       &pc_libmcl.merror 
#6321: 
    push           &pci_mcl.nparams 
    incr                      i64 1
    push           pc_genmcl.px_param.p u64 
    push           8          
    pushptroff                u64 1 0
    push           &pci_mcl.paramdefs 
    push           pci_mcl.nparams i64 
    popptroff                 u64 8 -8
    push           &pc_tables.pcat 
    push           pc_genmcl.px_param.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #6322      i64 
    push           &pci_mcl.nparams 
    incr                      i64 1
    push           pc_genmcl.px_param.p u64 
    push           8          
    pushptroff                u64 1 0
    push           &pci_mcl.paramdefs 
    push           pci_mcl.nparams i64 
    popptroff                 u64 8 -8
#6322: 
#6323: 
    retproc                   
End


Proc pc_genmcl.px_label:
    param          pc_genmcl.px_label.p u64 
    procentry                 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_label.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
#6325: 
    retproc                   
End


Proc pc_genmcl.px_labelname:
    param          pc_genmcl.px_labelname.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_labelname.p u64 
    callproc       &pc_genmcl.unimpl 
#6327: 
    retproc                   
End


Proc pc_genmcl.px_push:
    param          pc_genmcl.px_push.p u64 
    procentry                 
    push           pc_genmcl.px_push.p u64 
    pushptr                   u8 
    push           1          i64 
    casejumpeq     #6329      i64 0
    push           2          i64 
    casejumpeq     #6330      i64 0
    push           4          i64 
    casejumpeq     #6331      i64 0
    push           5          i64 
    casejumpeq     #6332      i64 0
    push           7          i64 
    casejumpeq     #6333      i64 0
    push           8          i64 
    casejumpeq     #6334      i64 0
    push           6          i64 
    casejumpeq     #6335      i64 0
    popstack                  i64 
    jump           #6336      
#6329: 
    setargs                   1 0
    push           pc_genmcl.px_push.p u64 
    callproc       &pc_stackmcl.addmem 
    jump           #6337      
#6330: 
    setargs                   1 0
    push           pc_genmcl.px_push.p u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &pc_stackmcl.addmemaddr 
    jump           #6337      
#6331: 
    setargs                   1 0
    push           pc_genmcl.px_push.p u64 
    push           8          
    pushptroff                i64 1 0
    callproc       &pc_stackmcl.addint 
    jump           #6337      
#6332: 
    setargs                   1 0
    push           pc_genmcl.px_push.p u64 
    push           8          
    pushptroff                r64 1 0
    callproc       &pc_stackmcl.addreal 
    jump           #6337      
#6333: 
    setargs                   1 0
    push           pc_genmcl.px_push.p u64 
    push           8          
    pushptroff                r32 1 0
    fwiden                    r64 r32 
    callproc       &pc_stackmcl.addreal32 
    jump           #6337      
#6334: 
    setargs                   1 0
    push           pc_genmcl.px_push.p u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &pc_stackmcl.addstring 
    jump           #6337      
#6335: 
    setargs                   1 0
    push           pc_genmcl.px_push.p u64 
    push           8          
    addrefoff                 u64 1 0
    callproc       &pc_stackmcl.addint128 
    jump           #6337      
#6336: 
    setargs                   2 0
    push           &pc_tables.opndnames 
    push           pc_genmcl.px_push.p u64 
    pushptr                   u8 
    pushptroff                u64 8 0
    push           "push"     u64 
    callproc       &pc_libmcl.merror 
#6337: 
#6338: 
    retproc                   
End


Proc pc_genmcl.px_pop:
    param          pc_genmcl.px_pop.p u64 
    local          pc_genmcl.px_pop.ax u64 
    local          pc_genmcl.px_pop.bx u64 
    local          pc_genmcl.px_pop.i i64 
    procentry                 
    push           pc_genmcl.px_pop.p u64 
    pushptr                   u8 
    push           1          i64 
    casejumpeq     #6340      i64 0
    popstack                  i64 
    jump           #6341      
#6340: 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_pop.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6342      i64 0
    push           3          i64 
    casejumpeq     #6343      i64 0
    push           2          i64 
    casejumpeq     #6344      i64 0
    push           5          i64 
    casejumpeq     #6345      i64 0
    push           4          i64 
    casejumpeq     #6346      i64 0
    push           6          i64 
    casejumpeq     #6347      i64 0
    popstack                  i64 
    jump           #6348      
#6342: 
#6349: 
    push           1          i64 
    pop            pc_genmcl.px_pop.i i64 
    push           pci_mcl.noperands i64 
    push           1          i64 
    jumplt         #6350      i64 
#6351: 
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.px_pop.i i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           3          i64 
    casejumpeq     #6352      i64 0
    push           5          i64 
    casejumpeq     #6353      i64 0
    popstack                  i64 
    jump           #6354      
#6352: 
    jump           #6350      
    jump           #6355      
#6353: 
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.px_pop.i i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    push           pc_genmcl.px_pop.p u64 
    push           8          
    pushptroff                u64 1 0
    jumpne         #6356      u64 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_pop.i i64 
    callproc       &pc_stackmcl.genopnd_ld 
#6356: 
    jump           #6355      
#6354: 
#6355: 
#6357: 
    forup          #6351      i64 1
    opnd           pc_genmcl.px_pop.i 
    opnd           pci_mcl.noperands 
#6350: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    setargs                   1 0
    push           pc_genmcl.px_pop.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6358      
#6343: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    setargs                   1 0
    push           pc_genmcl.px_pop.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6358      
#6344: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    setargs                   1 0
    push           pc_genmcl.px_pop.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6358      
#6345: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    setargs                   1 0
    push           pc_genmcl.px_pop.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_genmcl.px_pop.p u64 
    push           1          
    pushptroff                u8 1 0
    push           24         i64 
    jumpeq         #6359      i64 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6359: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    setargs                   1 0
    push           pc_genmcl.px_pop.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmemhigh u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_genmcl.px_pop.p u64 
    push           1          
    pushptroff                u8 1 0
    push           24         i64 
    jumpeq         #6360      i64 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6360: 
    jump           #6361      
    jump           #6358      
#6346: 
    setargs                   3 0
    setargs                   2 0
    push           pc_genmcl.px_pop.p u64 
    push           4          
    pushptroff                i32 1 0
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    setargs                   1 0
    push           pc_genmcl.px_pop.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6358      
#6347: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.px_pop.bx u64 
    setargs                   1 0
    push           pc_genmcl.px_pop.p u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &pc_stackmcl.addmemaddr 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.px_pop.ax u64 
    setargs                   3 0
    push           pc_genmcl.px_pop.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_genmcl.px_pop.bx u64 
    push           pc_genmcl.px_pop.ax u64 
    callproc       &pc_libmcl.copyblock 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #6358      
#6348: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "POPMEM"   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_genmcl.px_pop.p u64 
    push           3          
    pushptroff                u8 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#6358: 
    jump           #6362      
#6341: 
    setargs                   2 0
    push           pc_genmcl.px_pop.p u64 
    pushptr                   u8 
    push           "POP"      u64 
    callproc       &pc_libmcl.merroropnd 
#6362: 
    push           pc_genmcl.px_pop.p u64 
    push           1          
    pushptroff                u8 1 0
    push           24         i64 
    jumpeq         #6363      i64 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6363: 
#6361: 
    retproc                   
End


Proc pc_genmcl.px_store:
    param          pc_genmcl.px_store.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_store.p u64 
    callproc       &pc_genmcl.px_pop 
#6365: 
    retproc                   
End


Proc pc_genmcl.px_pushnc:
    param          pc_genmcl.px_pushnc.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_pushnc.p u64 
    callproc       &pc_genmcl.unimpl 
#6367: 
    retproc                   
End


Proc pc_genmcl.px_opnd:
    param          pc_genmcl.px_opnd.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_opnd.p u64 
    callproc       &pc_genmcl.unimpl 
#6369: 
    retproc                   
End


Proc pc_genmcl.px_type:
    param          pc_genmcl.px_type.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_type.p u64 
    callproc       &pc_genmcl.unimpl 
#6371: 
    retproc                   
End


Proc pc_genmcl.px_pushptroff:
    param          pc_genmcl.px_pushptroff.p u64 
    local          pc_genmcl.px_pushptroff.ax u64 
    local          pc_genmcl.px_pushptroff.bx u64 
    local          pc_genmcl.px_pushptroff.cx u64 
    local          pc_genmcl.px_pushptroff.fx u64 
    local          pc_genmcl.px_pushptroff.m i64 
    procentry                 
    push           pc_genmcl.px_pushptroff.p u64 
    push           3          
    pushptroff                u8 1 0
    pop            pc_genmcl.px_pushptroff.m i64 
    setargs                   1 0
    push           pc_genmcl.px_pushptroff.p u64 
    callfn         &pc_genmcl.do_addrmode u64 
    pop            pc_genmcl.px_pushptroff.cx u64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #6373      i64 
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           1          
    popptroff                 u8 1 0
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
#6373: 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_pushptroff.ax u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_pushptroff.m i64 
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6374      i64 0
    push           3          i64 
    casejumpeq     #6375      i64 0
    push           2          i64 
    casejumpeq     #6376      i64 0
    push           4          i64 
    casejumpeq     #6377      i64 0
    push           5          i64 
    casejumpeq     #6378      i64 0
    push           6          i64 
    casejumpeq     #6379      i64 0
    popstack                  i64 
    jump           #6380      
#6374: 
    setargs                   3 0
    push           pc_genmcl.px_pushptroff.cx u64 
    push           pc_genmcl.px_pushptroff.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6381      
#6375: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_x64 
    setargs                   2 0
    push           3          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_pushptroff.fx u64 
    setargs                   3 0
    push           pc_genmcl.px_pushptroff.cx u64 
    push           pc_genmcl.px_pushptroff.fx u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #6381      
#6376: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_x32 
    setargs                   2 0
    push           3          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_pushptroff.fx u64 
    setargs                   3 0
    setargs                   2 0
    push           4          i64 
    push           pc_genmcl.px_pushptroff.cx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           pc_genmcl.px_pushptroff.fx u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #6381      
#6377: 
    push           pc_genmcl.px_pushptroff.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_genmcl.px_pushptroff.cx u64 
    push           8          
    popptroff                 u8 1 0
    setargs                   3 0
    push           pc_genmcl.px_pushptroff.cx u64 
    push           pc_genmcl.px_pushptroff.ax u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_genmcl.px_pushptroff.m i64 
    pushptroff                u8 1 0
    jumpfalse      #6382      i64 
    push           19         i64 
    resetmult                 
    jump           #6383      
#6382: 
    push           20         i64 
    endmult                   
#6383: 
    callproc       &pc_libmcl.genmc 
    jump           #6381      
#6378: 
    setargs                   0 0
    callfn         &pc_stackmcl.genopnd_d64 u64 
    pop            pc_genmcl.px_pushptroff.bx u64 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   2 0
    push           3          i64 
    push           2          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   3 0
    setargs                   3 0
    push           8          i64 
    push           8          i64 
    push           pc_genmcl.px_pushptroff.cx u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           pc_genmcl.px_pushptroff.bx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_pushptroff.cx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           pc_genmcl.px_pushptroff.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.setwideopnd 
    jump           #6384      
    jump           #6381      
#6379: 
    setargs                   3 0
    push           pc_genmcl.px_pushptroff.cx u64 
    push           pc_genmcl.px_pushptroff.ax u64 
    push           15         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6381      
#6380: 
    setargs                   2 0
    push           pc_genmcl.px_pushptroff.m i64 
    push           "pushptroff" u64 
    callproc       &pc_libmcl.merrort 
#6381: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6384: 
    retproc                   
End


Proc pc_genmcl.px_popptroff:
    param          pc_genmcl.px_popptroff.p u64 
    local          pc_genmcl.px_popptroff.ax u64 
    local          pc_genmcl.px_popptroff.bx u64 
    local          pc_genmcl.px_popptroff.cx u64 
    local          pc_genmcl.px_popptroff.px u64 
    local          pc_genmcl.px_popptroff.m i64 
    procentry                 
    push           pc_genmcl.px_popptroff.p u64 
    push           3          
    pushptroff                u8 1 0
    pop            pc_genmcl.px_popptroff.m i64 
    setargs                   1 0
    push           pc_genmcl.px_popptroff.p u64 
    callfn         &pc_genmcl.do_addrmode u64 
    pop            pc_genmcl.px_popptroff.px u64 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_popptroff.cx u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_popptroff.m i64 
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6386      i64 0
    push           3          i64 
    casejumpeq     #6387      i64 0
    push           2          i64 
    casejumpeq     #6388      i64 0
    push           4          i64 
    casejumpeq     #6389      i64 0
    push           5          i64 
    casejumpeq     #6390      i64 0
    push           6          i64 
    casejumpeq     #6391      i64 0
    popstack                  i64 
    jump           #6392      
#6386: 
    setargs                   3 0
    push           pc_genmcl.px_popptroff.cx u64 
    push           pc_genmcl.px_popptroff.px u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6393      
#6387: 
    setargs                   3 0
    push           pc_genmcl.px_popptroff.cx u64 
    push           pc_genmcl.px_popptroff.px u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6393      
#6388: 
    setargs                   3 0
    push           pc_genmcl.px_popptroff.cx u64 
    setargs                   2 0
    push           4          i64 
    push           pc_genmcl.px_popptroff.px u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6393      
#6389: 
    push           pc_genmcl.px_popptroff.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_genmcl.px_popptroff.px u64 
    push           8          
    popptroff                 u8 1 0
    setargs                   3 0
    setargs                   2 0
    push           pc_genmcl.px_popptroff.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_genmcl.px_popptroff.cx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           pc_genmcl.px_popptroff.px u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6393      
#6390: 
    setargs                   3 0
    push           pc_genmcl.px_popptroff.cx u64 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_popptroff.px u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           4          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    setargs                   3 0
    push           8          i64 
    push           8          i64 
    push           pc_genmcl.px_popptroff.px u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6393      
#6391: 
    setargs                   3 0
    push           pc_genmcl.px_popptroff.p u64 
    push           4          
    pushptroff                i32 1 0
    setargs                   2 0
    push           0          i64 
    push           pc_genmcl.px_popptroff.cx u64 
    callfn         &pc_libmcl.makeopndind u64 
    push           pc_genmcl.px_popptroff.px u64 
    callproc       &pc_libmcl.copyblock 
    jump           #6393      
#6392: 
    setargs                   2 0
    push           pc_genmcl.px_popptroff.m i64 
    push           "popptroff " u64 
    callproc       &pc_libmcl.merrort 
#6393: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    push           pc_genmcl.px_popptroff.p u64 
    push           1          
    pushptroff                u8 1 0
    push           32         i64 
    jumpne         #6394      i64 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_popptroff.m i64 
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #6395      i64 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6395: 
#6394: 
#6396: 
    retproc                   
End


Proc pc_genmcl.px_storeptroff:
    param          pc_genmcl.px_storeptroff.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_storeptroff.p u64 
    callproc       &pc_genmcl.px_popptroff 
#6398: 
    retproc                   
End


Proc pc_genmcl.px_pushptr:
    param          pc_genmcl.px_pushptr.p u64 
    local          pc_genmcl.px_pushptr.ax u64 
    local          pc_genmcl.px_pushptr.px u64 
    local          pc_genmcl.px_pushptr.cx u64 
    local          pc_genmcl.px_pushptr.fx u64 
    local          pc_genmcl.px_pushptr.bx u64 
    local          pc_genmcl.px_pushptr.m i64 
    procentry                 
    push           pc_genmcl.px_pushptr.p u64 
    push           3          
    pushptroff                u8 1 0
    pop            pc_genmcl.px_pushptr.m i64 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.isregvaropnd i64 
    jumpfalse      #6400      i64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_pushptr.m i64 
    pushptroff                u8 1 0
    push           6          i64 
    jumpeq         #6400      i64 
    setargs                   3 0
    push           0          i64 
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenireg u64 
    pop            pc_genmcl.px_pushptr.cx u64 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_genmcl.makeregopnd u64 
    pop            pc_genmcl.px_pushptr.ax u64 
    jump           #6401      
#6400: 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           11         i64 
    jumpne         #6402      i64 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    pop            pc_genmcl.px_pushptr.cx u64 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_genmcl.makeregopnd u64 
    pop            pc_genmcl.px_pushptr.ax u64 
    jump           #6401      
#6402: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_pushptr.ax u64 
    setargs                   2 0
    push           0          i64 
    push           pc_genmcl.px_pushptr.ax u64 
    callfn         &pc_libmcl.makeopndind u64 
    pop            pc_genmcl.px_pushptr.cx u64 
#6401: 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_pushptr.m i64 
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6403      i64 0
    push           4          i64 
    casejumpeq     #6404      i64 0
    push           3          i64 
    casejumpeq     #6405      i64 0
    push           2          i64 
    casejumpeq     #6406      i64 0
    push           5          i64 
    casejumpeq     #6407      i64 0
    push           6          i64 
    casejumpeq     #6408      i64 0
    popstack                  i64 
    jump           #6409      
#6403: 
    setargs                   3 0
    push           pc_genmcl.px_pushptr.cx u64 
    push           pc_genmcl.px_pushptr.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6410      
#6404: 
    setargs                   3 0
    setargs                   2 0
    push           pc_genmcl.px_pushptr.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_genmcl.px_pushptr.cx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           pc_genmcl.px_pushptr.ax u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_genmcl.px_pushptr.m i64 
    pushptroff                u8 1 0
    jumpfalse      #6411      i64 
    push           19         i64 
    resetmult                 
    jump           #6412      
#6411: 
    push           20         i64 
    endmult                   
#6412: 
    callproc       &pc_libmcl.genmc 
    jump           #6410      
#6405: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_x64 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_pushptr.fx u64 
    setargs                   3 0
    push           pc_genmcl.px_pushptr.cx u64 
    push           pc_genmcl.px_pushptr.fx u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #6410      
#6406: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_x32 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_pushptr.fx u64 
    setargs                   3 0
    setargs                   2 0
    push           4          i64 
    push           pc_genmcl.px_pushptr.cx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           pc_genmcl.px_pushptr.fx u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #6410      
#6407: 
    setargs                   0 0
    callfn         &pc_stackmcl.genopnd_d64 u64 
    pop            pc_genmcl.px_pushptr.bx u64 
    setargs                   3 0
    push           pc_genmcl.px_pushptr.cx u64 
    push           pc_genmcl.px_pushptr.bx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   3 0
    push           0          i64 
    push           8          i64 
    push           pc_genmcl.px_pushptr.cx u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           pc_genmcl.px_pushptr.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.setwideopnd 
    jump           #6410      
#6408: 
    jump           #6410      
#6409: 
    setargs                   1 0
    push           "****PUSHPTR" u64 
    callproc       &pc_libmcl.mgencomment 
#6410: 
#6413: 
    retproc                   
End


Proc pc_genmcl.px_popptr:
    param          pc_genmcl.px_popptr.p u64 
    local          pc_genmcl.px_popptr.ax u64 
    local          pc_genmcl.px_popptr.bx u64 
    local          pc_genmcl.px_popptr.cx u64 
    local          pc_genmcl.px_popptr.px u64 
    local          pc_genmcl.px_popptr.m i64 
    procentry                 
    push           pc_genmcl.px_popptr.p u64 
    push           3          
    pushptroff                u8 1 0
    pop            pc_genmcl.px_popptr.m i64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_popptr.bx u64 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.isregvaropnd i64 
    jumpfalse      #6415      i64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_popptr.m i64 
    pushptroff                u8 1 0
    push           6          i64 
    jumpeq         #6415      i64 
    setargs                   3 0
    push           0          i64 
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenireg u64 
    pop            pc_genmcl.px_popptr.ax u64 
    jump           #6416      
#6415: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.px_popptr.ax u64 
#6416: 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_popptr.m i64 
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6417      i64 0
    push           4          i64 
    casejumpeq     #6418      i64 0
    push           3          i64 
    casejumpeq     #6419      i64 0
    push           2          i64 
    casejumpeq     #6420      i64 0
    push           5          i64 
    casejumpeq     #6421      i64 0
    push           6          i64 
    casejumpeq     #6422      i64 0
    popstack                  i64 
    jump           #6423      
#6417: 
    setargs                   3 0
    push           pc_genmcl.px_popptr.bx u64 
    push           pc_genmcl.px_popptr.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6424      
#6418: 
    setargs                   3 0
    setargs                   2 0
    push           &pc_tables.psize 
    push           pc_genmcl.px_popptr.m i64 
    pushptroff                u8 1 0
    push           pc_genmcl.px_popptr.bx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    setargs                   2 0
    push           &pc_tables.psize 
    push           pc_genmcl.px_popptr.m i64 
    pushptroff                u8 1 0
    push           pc_genmcl.px_popptr.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6424      
#6419: 
    setargs                   3 0
    push           pc_genmcl.px_popptr.bx u64 
    push           pc_genmcl.px_popptr.ax u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6424      
#6420: 
    setargs                   3 0
    push           pc_genmcl.px_popptr.bx u64 
    setargs                   2 0
    push           4          i64 
    push           pc_genmcl.px_popptr.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6424      
#6421: 
    setargs                   3 0
    push           pc_genmcl.px_popptr.bx u64 
    push           pc_genmcl.px_popptr.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    setargs                   3 0
    push           0          i64 
    push           8          i64 
    push           pc_genmcl.px_popptr.ax u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6424      
#6422: 
    setargs                   3 0
    push           pc_genmcl.px_popptr.p u64 
    push           4          
    pushptroff                i32 1 0
    setargs                   2 0
    push           0          i64 
    push           pc_genmcl.px_popptr.bx u64 
    callfn         &pc_libmcl.makeopndind u64 
    push           pc_genmcl.px_popptr.ax u64 
    callproc       &pc_libmcl.copyblock 
    jump           #6424      
#6423: 
    setargs                   2 0
    push           pc_genmcl.px_popptr.m i64 
    push           "popptr "  u64 
    callproc       &pc_libmcl.merrort 
#6424: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    push           pc_genmcl.px_popptr.p u64 
    push           1          
    pushptroff                u8 1 0
    push           35         i64 
    jumpne         #6425      i64 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_popptr.m i64 
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #6426      i64 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6426: 
#6425: 
#6427: 
    retproc                   
End


Proc pc_genmcl.px_storeptr:
    param          pc_genmcl.px_storeptr.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_storeptr.p u64 
    callproc       &pc_genmcl.px_popptr 
#6429: 
    retproc                   
End


Proc pc_genmcl.px_dotindex:
    param          pc_genmcl.px_dotindex.p u64 
    local          pc_genmcl.px_dotindex.ax u64 
    local          pc_genmcl.px_dotindex.i i64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpeq         #6431      i64 
    setargs                   2 0
    push           ""         u64 
    push           "dotix i not imm" u64 
    callproc       &pc_libmcl.merror 
#6431: 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_dotindex.ax u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    pop            pc_genmcl.px_dotindex.i i64 
    push           pc_genmcl.px_dotindex.i i64 
    jumpfalse      #6432      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_dotindex.i i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_dotindex.ax u64 
    push           46         i64 
    callproc       &pc_libmcl.genmc 
#6432: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_libmcl.mgenint u64 
    setargs                   2 0
    push           4          i64 
    push           pc_genmcl.px_dotindex.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           39         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6433: 
    retproc                   
End


Proc pc_genmcl.px_popdotindex:
    param          pc_genmcl.px_popdotindex.p u64 
    local          pc_genmcl.px_popdotindex.ax u64 
    local          pc_genmcl.px_popdotindex.bx u64 
    local          pc_genmcl.px_popdotindex.cx u64 
    local          pc_genmcl.px_popdotindex.rx u64 
    local          pc_genmcl.px_popdotindex.mx u64 
    local          pc_genmcl.px_popdotindex.i i64 
    local          pc_genmcl.px_popdotindex.size i64 
    local          pc_genmcl.px_popdotindex.cxfmt i64 
    local          pc_genmcl.px_popdotindex.rhs i64 
    local          pc_genmcl.px_popdotindex.axoffset i64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           3          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #6435      i64 
    push           pci_mcl.pclstack u64 
    push           3          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    pop            pc_genmcl.px_popdotindex.rhs i64 
    push           0          u64 
    pop            pc_genmcl.px_popdotindex.cx u64 
    jump           #6436      
#6435: 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_popdotindex.cx u64 
#6436: 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpeq         #6437      i64 
    setargs                   2 0
    push           ""         u64 
    push           "popdotix i not imm" u64 
    callproc       &pc_libmcl.merror 
#6437: 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    pop            pc_genmcl.px_popdotindex.i i64 
    push           pc_genmcl.px_popdotindex.p u64 
    push           4          
    pushptroff                i32 1 0
    pop            pc_genmcl.px_popdotindex.size i64 
    push           2          i64 
    pop            pc_genmcl.px_popdotindex.axoffset i64 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_d64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_popdotindex.rx u64 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_d64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_popdotindex.mx u64 
    setargs                   2 0
    push           pc_genmcl.px_popdotindex.size i64 
    push           pc_genmcl.px_popdotindex.axoffset i64 
    push           2          i64 
    add                       i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.px_popdotindex.ax u64 
    setargs                   3 0
    push           pc_genmcl.px_popdotindex.ax u64 
    push           pc_genmcl.px_popdotindex.rx u64 
    startmult                 
    push           pc_genmcl.px_popdotindex.size i64 
    push           8          i64 
    jumpne         #6438      i64 
    push           12         i64 
    resetmult                 
    jump           #6439      
#6438: 
    push           20         i64 
    endmult                   
#6439: 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    push           pc_genmcl.px_popdotindex.i i64 
    shl                       i64 
    inot                      i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_popdotindex.mx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.px_popdotindex.mx u64 
    push           pc_genmcl.px_popdotindex.rx u64 
    push           39         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_genmcl.px_popdotindex.cx u64 
    jumpfalse      #6440      u64 
    push           pc_genmcl.px_popdotindex.i i64 
    jumpfalse      #6441      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_popdotindex.i i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_popdotindex.cx u64 
    push           44         i64 
    callproc       &pc_libmcl.genmc 
#6441: 
    setargs                   3 0
    push           pc_genmcl.px_popdotindex.cx u64 
    push           pc_genmcl.px_popdotindex.rx u64 
    push           40         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6442      
#6440: 
    push           pc_genmcl.px_popdotindex.rhs i64 
    push           0          i64 
    jumpeq         #6443      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    push           pc_genmcl.px_popdotindex.i i64 
    shl                       i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_popdotindex.rx u64 
    push           40         i64 
    callproc       &pc_libmcl.genmc 
#6443: 
#6442: 
    setargs                   3 0
    setargs                   2 0
    push           pc_genmcl.px_popdotindex.size i64 
    push           pc_genmcl.px_popdotindex.rx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           pc_genmcl.px_popdotindex.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    push           pc_genmcl.px_popdotindex.p u64 
    push           1          
    pushptroff                u8 1 0
    push           38         i64 
    jumpne         #6444      i64 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6444: 
#6445: 
    retproc                   
End


Proc pc_genmcl.px_storedotindex:
    param          pc_genmcl.px_storedotindex.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_storedotindex.p u64 
    callproc       &pc_genmcl.px_popdotindex 
#6447: 
    retproc                   
End


Proc pc_genmcl.px_dotslice:
    param          pc_genmcl.px_dotslice.p u64 
    local          pc_genmcl.px_dotslice.ax u64 
    local          pc_genmcl.px_dotslice.mx u64 
    local          pc_genmcl.px_dotslice.mx4 u64 
    local          pc_genmcl.px_dotslice.i i64 
    local          pc_genmcl.px_dotslice.j i64 
    local          pc_genmcl.px_dotslice.mask u64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #6449      i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpeq         #6450      i64 
#6449: 
    setargs                   2 0
    push           ""         u64 
    push           "dotslice i/j not imm" u64 
    callproc       &pc_libmcl.merror 
#6450: 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_dotslice.ax u64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    pop            pc_genmcl.px_dotslice.i i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    pop            pc_genmcl.px_dotslice.j i64 
    push           pc_genmcl.px_dotslice.i i64 
    jumpfalse      #6451      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_dotslice.i i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_dotslice.ax u64 
    push           46         i64 
    callproc       &pc_libmcl.genmc 
#6451: 
    push           -1         u64 
    push           pc_genmcl.px_dotslice.j i64 
    push           pc_genmcl.px_dotslice.i i64 
    sub                       i64 
    push           1          i64 
    add                       i64 
    shl                       u64 
    inot                      u64 
    pop            pc_genmcl.px_dotslice.mask u64 
    push           pc_genmcl.px_dotslice.mask u64 
    push           2147483647 u64 
    jumpgt         #6452      u64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_dotslice.mask i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_dotslice.ax u64 
    push           39         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6453      
#6452: 
    setargs                   1 0
    push           2          i64 
    callfn         &pc_genmcl.makeregopnd u64 
    pop            pc_genmcl.px_dotslice.mx u64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_dotslice.mask i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_dotslice.mx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.px_dotslice.mx u64 
    push           pc_genmcl.px_dotslice.ax u64 
    push           39         i64 
    callproc       &pc_libmcl.genmc 
#6453: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6454: 
    retproc                   
End


Proc pc_genmcl.px_popdotslice:
    param          pc_genmcl.px_popdotslice.p u64 
    local          pc_genmcl.px_popdotslice.ax u64 
    local          pc_genmcl.px_popdotslice.rx u64 
    local          pc_genmcl.px_popdotslice.mx u64 
    local          pc_genmcl.px_popdotslice.mx4 u64 
    local          pc_genmcl.px_popdotslice.dx u64 
    local          pc_genmcl.px_popdotslice.i i64 
    local          pc_genmcl.px_popdotslice.j i64 
    local          pc_genmcl.px_popdotslice.size i64 
    local          pc_genmcl.px_popdotslice.mask u64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #6456      i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpeq         #6457      i64 
#6456: 
    setargs                   2 0
    push           ""         u64 
    push           "popdotslice i/j not imm" u64 
    callproc       &pc_libmcl.merror 
#6457: 
    setargs                   2 0
    push           8          i64 
    push           4          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_popdotslice.dx u64 
    push           pc_genmcl.px_popdotslice.p u64 
    push           4          
    pushptroff                i32 1 0
    pop            pc_genmcl.px_popdotslice.size i64 
    setargs                   2 0
    push           pc_genmcl.px_popdotslice.size i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.px_popdotslice.ax u64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    pop            pc_genmcl.px_popdotslice.i i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    pop            pc_genmcl.px_popdotslice.j i64 
    setargs                   1 0
    push           2          i64 
    callfn         &pc_genmcl.makeregopnd u64 
    pop            pc_genmcl.px_popdotslice.mx u64 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_genmcl.makeregopnd u64 
    pop            pc_genmcl.px_popdotslice.rx u64 
    setargs                   3 0
    push           pc_genmcl.px_popdotslice.p u64 
    push           3          
    pushptroff                u8 1 0
    push           pc_genmcl.px_popdotslice.ax u64 
    push           pc_genmcl.px_popdotslice.rx u64 
    callproc       &pc_genmcl.loadtoreg 
    push           -1         u64 
    push           pc_genmcl.px_popdotslice.j i64 
    push           pc_genmcl.px_popdotslice.i i64 
    sub                       i64 
    push           1          i64 
    add                       i64 
    shl                       u64 
    inot                      u64 
    push           pc_genmcl.px_popdotslice.i i64 
    shl                       u64 
    inot                      u64 
    pop            pc_genmcl.px_popdotslice.mask u64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_popdotslice.mask i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_popdotslice.mx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_genmcl.px_popdotslice.i i64 
    jumpfalse      #6458      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_popdotslice.i i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_popdotslice.dx u64 
    push           44         i64 
    callproc       &pc_libmcl.genmc 
#6458: 
    setargs                   3 0
    push           pc_genmcl.px_popdotslice.mx u64 
    push           pc_genmcl.px_popdotslice.rx u64 
    push           39         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.px_popdotslice.dx u64 
    push           pc_genmcl.px_popdotslice.rx u64 
    push           40         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.px_popdotslice.size i64 
    push           pc_genmcl.px_popdotslice.rx u64 
    push           pc_genmcl.px_popdotslice.ax u64 
    callproc       &pc_genmcl.storefromreg 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    push           pc_genmcl.px_popdotslice.p u64 
    push           1          
    pushptroff                u8 1 0
    push           41         i64 
    jumpne         #6459      i64 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6459: 
#6460: 
    retproc                   
End


Proc pc_genmcl.px_storedotslice:
    param          pc_genmcl.px_storedotslice.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_storedotslice.p u64 
    callproc       &pc_genmcl.px_popdotslice 
#6462: 
    retproc                   
End


Proc pc_genmcl.px_popstack:
    param          pc_genmcl.px_popstack.p u64 
    procentry                 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6464: 
    retproc                   
End


Proc pc_genmcl.px_eval:
    param          pc_genmcl.px_eval.p u64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           4          
    pushptroff                u8 1 0
    push           76         i64 
    jumpne         #6466      i64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callproc       &pc_stackmcl.genopnd_ld 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callproc       &pc_stackmcl.genopnd_ld 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #6467      
#6466: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callproc       &pc_stackmcl.genopnd_ld 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6467: 
#6468: 
    retproc                   
End


Proc pc_genmcl.px_callproc:
    param          pc_genmcl.px_callproc.p u64 
    local          pc_genmcl.px_callproc.nslots i64 
    local          pc_genmcl.px_callproc.nargs i64 
    local          pc_genmcl.px_callproc.av_1 i64 
    procentry                 
    push           &pci_mcl.callargs 
    push           pci_mcl.ncalldepth i64 
    pushptroff                u8 1 -1
    pop            pc_genmcl.px_callproc.nargs i64 
    setargs                   2 0
    push           0          i64 
    push           pc_genmcl.px_callproc.p u64 
    callfn         &pc_genmcl.do_pushparams i64 
    pop            pc_genmcl.px_callproc.nslots i64 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_callproc.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmemaddr u64 
    push           22         i64 
    callproc       &pc_libmcl.genmc 
#6470: 
    push           pc_genmcl.px_callproc.nargs i64 
    pop            pc_genmcl.px_callproc.av_1 i64 
    push           pc_genmcl.px_callproc.av_1 i64 
    push           0          i64 
    jumple         #6471      i64 
#6472: 
    setargs                   0 0
    callproc       &pc_stackmcl.poparg 
#6473: 
    to             #6472      
    opnd           pc_genmcl.px_callproc.av_1 
#6471: 
    setargs                   1 0
    push           pc_genmcl.px_callproc.nslots i64 
    callproc       &pc_stackmcl.popslots 
#6474: 
    retproc                   
End


Proc pc_genmcl.px_callprocptr:
    param          pc_genmcl.px_callprocptr.p u64 
    local          pc_genmcl.px_callprocptr.nslots i64 
    local          pc_genmcl.px_callprocptr.nargs i64 
    local          pc_genmcl.px_callprocptr.av_1 i64 
    procentry                 
    push           &pci_mcl.callargs 
    push           pci_mcl.ncalldepth i64 
    pushptroff                u8 1 -1
    pop            pc_genmcl.px_callprocptr.nargs i64 
    setargs                   2 0
    push           1          i64 
    push           pc_genmcl.px_callprocptr.p u64 
    callfn         &pc_genmcl.do_pushparams i64 
    pop            pc_genmcl.px_callprocptr.nslots i64 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    push           22         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6476: 
    push           pc_genmcl.px_callprocptr.nargs i64 
    pop            pc_genmcl.px_callprocptr.av_1 i64 
    push           pc_genmcl.px_callprocptr.av_1 i64 
    push           0          i64 
    jumple         #6477      i64 
#6478: 
    setargs                   0 0
    callproc       &pc_stackmcl.poparg 
#6479: 
    to             #6478      
    opnd           pc_genmcl.px_callprocptr.av_1 
#6477: 
    setargs                   1 0
    push           pc_genmcl.px_callprocptr.nslots i64 
    callproc       &pc_stackmcl.popslots 
#6480: 
    retproc                   
End


Proc pc_genmcl.px_retproc:
    param          pc_genmcl.px_retproc.p u64 
    local          pc_genmcl.px_retproc.offset i64 
    local          pc_genmcl.px_retproc.i i64 
    procentry                 
    push           pci_mcl.dsaveoffset i64 
    pop            pc_genmcl.px_retproc.offset i64 
#6482: 
    push           1          i64 
    pop            pc_genmcl.px_retproc.i i64 
    push           pci_mcl.ndsaveregs i64 
    push           1          i64 
    jumplt         #6483      i64 
#6484: 
    setargs                   3 0
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           8          i64 
    push           pc_genmcl.px_retproc.offset i64 
    push           1          i64 
    push           0          i64 
    push           15         i64 
    callfn         &pc_libmcl.mgenindex u64 
    setargs                   2 0
    push           8          i64 
    push           &pci_mcl.dsaveregs 
    push           pc_genmcl.px_retproc.i i64 
    pushptroff                i64 8 -8
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_genmcl.px_retproc.offset 
    push           8          i64 
    addto                     i64 
#6485: 
    forup          #6484      i64 1
    opnd           pc_genmcl.px_retproc.i 
    opnd           pci_mcl.ndsaveregs 
#6483: 
    push           pci_mcl.xsaveoffset i64 
    pop            pc_genmcl.px_retproc.offset i64 
#6486: 
    push           1          i64 
    pop            pc_genmcl.px_retproc.i i64 
    push           pci_mcl.nxsaveregs i64 
    push           1          i64 
    jumplt         #6487      i64 
#6488: 
    setargs                   3 0
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           8          i64 
    push           pc_genmcl.px_retproc.offset i64 
    push           1          i64 
    push           0          i64 
    push           15         i64 
    callfn         &pc_libmcl.mgenindex u64 
    setargs                   2 0
    push           8          i64 
    push           &pci_mcl.xsaveregs 
    push           pc_genmcl.px_retproc.i i64 
    pushptroff                i64 8 -8
    callfn         &pc_libmcl.mgenxreg u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_genmcl.px_retproc.offset 
    push           8          i64 
    addto                     i64 
#6489: 
    forup          #6488      i64 1
    opnd           pc_genmcl.px_retproc.i 
    opnd           pci_mcl.nxsaveregs 
#6487: 
    push           pci_mcl.needstackframe i64 
    jumpfalse      #6490      i64 
    push           pci_mcl.framebytes i64 
    jumpfalse      #6491      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.framebytes i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pci_mcl.dstackopnd u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
#6491: 
    setargs                   3 0
    push           0          u64 
    push           pci_mcl.dframeopnd u64 
    push           14         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6492      
#6490: 
    push           pci_mcl.needshadow32 i64 
    jumpfalse      #6493      i64 
    setargs                   1 0
    push           pci_mcl.needshadow32 i64 
    callproc       &pc_stackmcl.popstack 
#6493: 
#6492: 
    push           pci_mcl.needshadow48 i64 
    jumpfalse      #6494      i64 
    setargs                   1 0
    push           48         i64 
    callproc       &pc_stackmcl.popstack 
#6494: 
#6495: 
    push           pci_mcl.ndsavepush i64 
    pop            pc_genmcl.px_retproc.i i64 
    push           pc_genmcl.px_retproc.i i64 
    push           1          i64 
    jumplt         #6496      i64 
#6497: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           &pci_mcl.dsaveregs 
    push           pc_genmcl.px_retproc.i i64 
    pushptroff                i64 8 -8
    callfn         &pc_libmcl.mgenreg u64 
    push           14         i64 
    callproc       &pc_libmcl.genmc 
#6498: 
    fordown        #6497      i64 1
    opnd           pc_genmcl.px_retproc.i 
    opnd           1          
#6496: 
    setargs                   3 0
    push           0          u64 
    push           0          u64 
    push           23         i64 
    callproc       &pc_libmcl.genmc 
#6499: 
    retproc                   
End


Proc pc_genmcl.px_callfn:
    param          pc_genmcl.px_callfn.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_callfn.p u64 
    callproc       &pc_genmcl.px_callproc 
    setargs                   1 0
    push           pc_genmcl.px_callfn.p u64 
    callproc       &pc_genmcl.dogetretvalue 
#6501: 
    retproc                   
End


Proc pc_genmcl.px_callfnptr:
    param          pc_genmcl.px_callfnptr.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_callfnptr.p u64 
    callproc       &pc_genmcl.px_callprocptr 
    setargs                   1 0
    push           pc_genmcl.px_callfnptr.p u64 
    callproc       &pc_genmcl.dogetretvalue 
#6503: 
    retproc                   
End


Proc pc_genmcl.px_retfn:
    param          pc_genmcl.px_retfn.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_retfn.p u64 
    callproc       &pc_genmcl.px_retproc 
#6505: 
    retproc                   
End


Proc pc_genmcl.px_jump:
    param          pc_genmcl.px_jump.p u64 
    procentry                 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_jump.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    push           26         i64 
    callproc       &pc_libmcl.genmc 
#6507: 
    retproc                   
End


Proc pc_genmcl.px_jumpptr:
    param          pc_genmcl.px_jumpptr.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_jumpptr.p u64 
    callproc       &pc_genmcl.unimpl 
#6509: 
    retproc                   
End


Proc pc_genmcl.px_jumpeq:
    param          pc_genmcl.px_jumpeq.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_jumpeq.p u64 
    callproc       &pc_genmcl.dojumpcc 
#6511: 
    retproc                   
End


Proc pc_genmcl.px_jumpne:
    param          pc_genmcl.px_jumpne.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_jumpne.p u64 
    callproc       &pc_genmcl.dojumpcc 
#6513: 
    retproc                   
End


Proc pc_genmcl.px_jumplt:
    param          pc_genmcl.px_jumplt.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_jumplt.p u64 
    callproc       &pc_genmcl.dojumpcc 
#6515: 
    retproc                   
End


Proc pc_genmcl.px_jumple:
    param          pc_genmcl.px_jumple.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_jumple.p u64 
    callproc       &pc_genmcl.dojumpcc 
#6517: 
    retproc                   
End


Proc pc_genmcl.px_jumpge:
    param          pc_genmcl.px_jumpge.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_jumpge.p u64 
    callproc       &pc_genmcl.dojumpcc 
#6519: 
    retproc                   
End


Proc pc_genmcl.px_jumpgt:
    param          pc_genmcl.px_jumpgt.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_jumpgt.p u64 
    callproc       &pc_genmcl.dojumpcc 
#6521: 
    retproc                   
End


Proc pc_genmcl.px_jumptrue:
    param          pc_genmcl.px_jumptrue.p u64 
    procentry                 
    setargs                   2 0
    push           5          i64 
    push           pc_genmcl.px_jumptrue.p u64 
    callproc       &pc_genmcl.dojumptruefalse 
#6523: 
    retproc                   
End


Proc pc_genmcl.px_jumpfalse:
    param          pc_genmcl.px_jumpfalse.p u64 
    procentry                 
    setargs                   2 0
    push           4          i64 
    push           pc_genmcl.px_jumpfalse.p u64 
    callproc       &pc_genmcl.dojumptruefalse 
#6525: 
    retproc                   
End


Proc pc_genmcl.px_jumpinrange:
    param          pc_genmcl.px_jumpinrange.p u64 
    local          pc_genmcl.px_jumpinrange.ax u64 
    local          pc_genmcl.px_jumpinrange.bx u64 
    local          pc_genmcl.px_jumpinrange.cx u64 
    local          pc_genmcl.px_jumpinrange.lx u64 
    local          pc_genmcl.px_jumpinrange.nolx u64 
    local          pc_genmcl.px_jumpinrange.nolab i64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_jumpinrange.ax u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_jumpinrange.bx u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_jumpinrange.cx u64 
    setargs                   1 0
    push           pc_genmcl.px_jumpinrange.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    pop            pc_genmcl.px_jumpinrange.lx u64 
    setargs                   3 0
    push           pc_genmcl.px_jumpinrange.bx u64 
    push           pc_genmcl.px_jumpinrange.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    setargs                   0 0
    callfn         &pc_libmcl.mcreatefwdlabel i64 
    store          pc_genmcl.px_jumpinrange.nolab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    pop            pc_genmcl.px_jumpinrange.nolx u64 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.px_jumpinrange.nolx u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_genmcl.px_jumpinrange.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #6527      i64 
    push           12         i64 
    resetmult                 
    jump           #6528      
#6527: 
    push           2          i64 
    endmult                   
#6528: 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.px_jumpinrange.cx u64 
    push           pc_genmcl.px_jumpinrange.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.px_jumpinrange.lx u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_genmcl.px_jumpinrange.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #6529      i64 
    push           14         i64 
    resetmult                 
    jump           #6530      
#6529: 
    push           6          i64 
    endmult                   
#6530: 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   1 0
    push           pc_genmcl.px_jumpinrange.nolab i64 
    callproc       &pc_libmcl.mdefinefwdlabel 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6531: 
    retproc                   
End


Proc pc_genmcl.px_jumpnotinrange:
    param          pc_genmcl.px_jumpnotinrange.p u64 
    local          pc_genmcl.px_jumpnotinrange.ax u64 
    local          pc_genmcl.px_jumpnotinrange.bx u64 
    local          pc_genmcl.px_jumpnotinrange.cx u64 
    local          pc_genmcl.px_jumpnotinrange.lx u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_jumpnotinrange.ax u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_jumpnotinrange.bx u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_jumpnotinrange.cx u64 
    setargs                   1 0
    push           pc_genmcl.px_jumpnotinrange.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    pop            pc_genmcl.px_jumpnotinrange.lx u64 
    setargs                   3 0
    push           pc_genmcl.px_jumpnotinrange.bx u64 
    push           pc_genmcl.px_jumpnotinrange.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.px_jumpnotinrange.lx u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_genmcl.px_jumpnotinrange.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #6533      i64 
    push           12         i64 
    resetmult                 
    jump           #6534      
#6533: 
    push           2          i64 
    endmult                   
#6534: 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.px_jumpnotinrange.cx u64 
    push           pc_genmcl.px_jumpnotinrange.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.px_jumpnotinrange.lx u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_genmcl.px_jumpnotinrange.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #6535      i64 
    push           15         i64 
    resetmult                 
    jump           #6536      
#6535: 
    push           7          i64 
    endmult                   
#6536: 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6537: 
    retproc                   
End


Proc pc_genmcl.px_setjumpeq:
    param          pc_genmcl.px_setjumpeq.p u64 
    procentry                 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_setjumpeq.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    push           4          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6539: 
    retproc                   
End


Proc pc_genmcl.px_setjumpeqx:
    param          pc_genmcl.px_setjumpeqx.p u64 
    procentry                 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_setjumpeqx.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    push           4          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6541: 
    retproc                   
End


Proc pc_genmcl.px_setjumpne:
    param          pc_genmcl.px_setjumpne.p u64 
    procentry                 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_setjumpne.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    push           5          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6543: 
    retproc                   
End


Proc pc_genmcl.px_seteq:
    param          pc_genmcl.px_seteq.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_seteq.p u64 
    callproc       &pc_genmcl.dosetcc 
#6545: 
    retproc                   
End


Proc pc_genmcl.px_setne:
    param          pc_genmcl.px_setne.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_setne.p u64 
    callproc       &pc_genmcl.dosetcc 
#6547: 
    retproc                   
End


Proc pc_genmcl.px_setlt:
    param          pc_genmcl.px_setlt.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_setlt.p u64 
    callproc       &pc_genmcl.dosetcc 
#6549: 
    retproc                   
End


Proc pc_genmcl.px_setle:
    param          pc_genmcl.px_setle.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_setle.p u64 
    callproc       &pc_genmcl.dosetcc 
#6551: 
    retproc                   
End


Proc pc_genmcl.px_setge:
    param          pc_genmcl.px_setge.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_setge.p u64 
    callproc       &pc_genmcl.dosetcc 
#6553: 
    retproc                   
End


Proc pc_genmcl.px_setgt:
    param          pc_genmcl.px_setgt.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_setgt.p u64 
    callproc       &pc_genmcl.dosetcc 
#6555: 
    retproc                   
End


Proc pc_genmcl.px_casejumpeq:
    param          pc_genmcl.px_casejumpeq.p u64 
    procentry                 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_casejumpeq.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    push           4          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6557: 
    retproc                   
End


Proc pc_genmcl.px_selecteq:
    param          pc_genmcl.px_selecteq.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_selecteq.p u64 
    callproc       &pc_genmcl.doselectcc 
#6559: 
    retproc                   
End


Proc pc_genmcl.px_selectne:
    param          pc_genmcl.px_selectne.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_selectne.p u64 
    callproc       &pc_genmcl.doselectcc 
#6561: 
    retproc                   
End


Proc pc_genmcl.px_selectlt:
    param          pc_genmcl.px_selectlt.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_selectlt.p u64 
    callproc       &pc_genmcl.doselectcc 
#6563: 
    retproc                   
End


Proc pc_genmcl.px_selectle:
    param          pc_genmcl.px_selectle.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_selectle.p u64 
    callproc       &pc_genmcl.doselectcc 
#6565: 
    retproc                   
End


Proc pc_genmcl.px_selectge:
    param          pc_genmcl.px_selectge.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_selectge.p u64 
    callproc       &pc_genmcl.doselectcc 
#6567: 
    retproc                   
End


Proc pc_genmcl.px_selectgt:
    param          pc_genmcl.px_selectgt.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_selectgt.p u64 
    callproc       &pc_genmcl.doselectcc 
#6569: 
    retproc                   
End


Proc pc_genmcl.px_selecttrue:
    param          pc_genmcl.px_selecttrue.p u64 
    local          pc_genmcl.px_selecttrue.ax u64 
    local          pc_genmcl.px_selecttrue.bx u64 
    local          pc_genmcl.px_selecttrue.cx u64 
    local          pc_genmcl.px_selecttrue.dx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_selecttrue.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #6571      i64 
    setargs                   2 0
    push           pc_genmcl.px_selecttrue.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "selecttrue" u64 
    callproc       &pc_libmcl.merrort 
#6571: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_selecttrue.ax u64 
    setargs                   3 0
    push           pc_genmcl.px_selecttrue.ax u64 
    push           pc_genmcl.px_selecttrue.ax u64 
    push           42         i64 
    callproc       &pc_libmcl.genmc 
    push           1          i64 
    pop            pci_mcl.noxorclear u8 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_selecttrue.dx u64 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_selecttrue.cx u64 
    push           0          i64 
    pop            pci_mcl.noxorclear u8 
    setargs                   4 0
    push           pc_genmcl.px_selecttrue.dx u64 
    push           pc_genmcl.px_selecttrue.cx u64 
    push           4          i64 
    push           16         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6572: 
    retproc                   
End


Proc pc_genmcl.px_to:
    param          pc_genmcl.px_to.p u64 
    local          pc_genmcl.px_to.q u64 
    local          pc_genmcl.px_to.ax u64 
    procentry                 
    push           pc_genmcl.px_to.p u64 
    push           1          i64 
    addrefoff                 u64 32 0
    store          pc_genmcl.currpcl u64 
    pop            pc_genmcl.px_to.q u64 
    setargs                   1 0
    push           pc_genmcl.px_to.q u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    pop            pc_genmcl.px_to.ax u64 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.px_to.ax u64 
    push           54         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_to.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    push           5          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
#6574: 
    retproc                   
End


Proc pc_genmcl.px_forup:
    param          pc_genmcl.px_forup.p u64 
    procentry                 
    setargs                   4 0
    push           14         i64 
    push           29         i64 
    push           53         i64 
    push           pc_genmcl.px_forup.p u64 
    callproc       &pc_genmcl.do_for 
#6576: 
    retproc                   
End


Proc pc_genmcl.px_fordown:
    param          pc_genmcl.px_fordown.p u64 
    procentry                 
    setargs                   4 0
    push           13         i64 
    push           30         i64 
    push           54         i64 
    push           pc_genmcl.px_fordown.p u64 
    callproc       &pc_genmcl.do_for 
#6578: 
    retproc                   
End


Proc pc_genmcl.px_swap:
    param          pc_genmcl.px_swap.p u64 
    local          pc_genmcl.px_swap.ax u64 
    local          pc_genmcl.px_swap.bx u64 
    local          pc_genmcl.px_swap.px u64 
    local          pc_genmcl.px_swap.qx u64 
    procentry                 
    setargs                   2 0
    push           pc_genmcl.px_swap.p u64 
    push           4          
    pushptroff                i32 1 0
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.px_swap.px u64 
    setargs                   2 0
    push           pc_genmcl.px_swap.p u64 
    push           4          
    pushptroff                i32 1 0
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.px_swap.qx u64 
    setargs                   2 0
    push           pc_genmcl.px_swap.p u64 
    push           4          
    pushptroff                i32 1 0
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_genmcl.px_swap.ax u64 
    setargs                   2 0
    push           pc_genmcl.px_swap.p u64 
    push           4          
    pushptroff                i32 1 0
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_genmcl.px_swap.bx u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_swap.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6580      i64 0
    push           4          i64 
    casejumpeq     #6580      i64 0
    popstack                  i64 
    jump           #6581      
#6580: 
    setargs                   3 0
    push           pc_genmcl.px_swap.px u64 
    push           pc_genmcl.px_swap.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.px_swap.qx u64 
    push           pc_genmcl.px_swap.bx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.px_swap.ax u64 
    push           pc_genmcl.px_swap.qx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.px_swap.bx u64 
    push           pc_genmcl.px_swap.px u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6582      
#6581: 
    setargs                   2 0
    push           pc_genmcl.px_swap.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "swap"     u64 
    callproc       &pc_libmcl.merrort 
#6582: 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_genmcl.px_swap.ax u64 
    push           10         
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_genmcl.px_swap.ax u64 
    push           10         
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_genmcl.px_swap.bx u64 
    push           10         
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_genmcl.px_swap.bx u64 
    push           10         
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6583: 
    retproc                   
End


Proc pc_genmcl.px_makeslice:
    param          pc_genmcl.px_makeslice.p u64 
    procentry                 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.setwideopnd 
#6585: 
    retproc                   
End


Proc pc_genmcl.px_switch:
    param          pc_genmcl.px_switch.p u64 
    local          pc_genmcl.px_switch.minlab i64 
    local          pc_genmcl.px_switch.maxlab i64 
    local          pc_genmcl.px_switch.jumplab i64 
    local          pc_genmcl.px_switch.elselab i64 
    local          pc_genmcl.px_switch.ax u64 
    procentry                 
    push           pc_genmcl.px_switch.p u64 
    push           16         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_switch.minlab i64 
    push           pc_genmcl.px_switch.p u64 
    push           20         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_switch.maxlab i64 
    push           pc_genmcl.px_switch.p u64 
    push           8          
    pushptroff                i64 1 0
    pop            pc_genmcl.px_switch.jumplab i64 
    push           pc_genmcl.px_switch.p u64 
    push           1          i64 
    addrefoff                 u64 32 0
    pop            pc_genmcl.currpcl u64 
    push           pc_genmcl.currpcl u64 
    push           8          
    pushptroff                i64 1 0
    pop            pc_genmcl.px_switch.elselab i64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_switch.ax u64 
    push           pc_genmcl.px_switch.minlab i64 
    push           0          i64 
    jumpeq         #6587      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_switch.minlab i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_switch.ax u64 
    push           30         i64 
    callproc       &pc_libmcl.genmc 
#6587: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_switch.maxlab i64 
    push           pc_genmcl.px_switch.minlab i64 
    sub                       i64 
    push           1          i64 
    add                       i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_switch.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_switch.elselab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           3          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           0          u64 
    setargs                   7 0
    push           0          u64 
    push           pc_genmcl.px_switch.jumplab i64 
    push           0          i64 
    push           0          i64 
    push           8          i64 
    push           pc_genmcl.px_switch.ax u64 
    push           10         
    pushptroff                u8 1 0
    push           0          i64 
    callfn         &pc_libmcl.mgenindex u64 
    push           26         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   2 0
    push           1          i64 
    push           73         i64 
    callproc       &pc_libmcl.setsegment 
#6588: 
    retproc                   
End


Proc pc_genmcl.px_switchlabel:
    param          pc_genmcl.px_switchlabel.p u64 
    procentry                 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_switchlabel.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    push           117        i64 
    callproc       &pc_libmcl.genmc 
#6590: 
    retproc                   
End


Proc pc_genmcl.px_endswitch:
    param          pc_genmcl.px_endswitch.p u64 
    procentry                 
    setargs                   2 0
    push           1          i64 
    push           67         i64 
    callproc       &pc_libmcl.setsegment 
#6592: 
    retproc                   
End


Proc pc_genmcl.px_clear:
    param          pc_genmcl.px_clear.p u64 
    local          pc_genmcl.px_clear.ax u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.px_clear.ax u64 
    setargs                   2 0
    push           pc_genmcl.px_clear.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_genmcl.px_clear.ax u64 
    callproc       &pc_libmcl.clearblock 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6594: 
    retproc                   
End


Proc pc_genmcl.px_csegment:
    param          pc_genmcl.px_csegment.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_csegment.p u64 
    callproc       &pc_genmcl.unimpl 
#6596: 
    retproc                   
End


Proc pc_genmcl.px_isegment:
    param          pc_genmcl.px_isegment.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_isegment.p u64 
    callproc       &pc_genmcl.unimpl 
#6598: 
    retproc                   
End


Proc pc_genmcl.px_zsegment:
    param          pc_genmcl.px_zsegment.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_zsegment.p u64 
    callproc       &pc_genmcl.unimpl 
#6600: 
    retproc                   
End


Proc pc_genmcl.px_rosegment:
    param          pc_genmcl.px_rosegment.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_rosegment.p u64 
    callproc       &pc_genmcl.unimpl 
#6602: 
    retproc                   
End


Proc pc_genmcl.px_data:
    param          pc_genmcl.px_data.p u64 
    local          pc_genmcl.px_data.ax u64 
    local          pc_genmcl.px_data.opc i64 
    procentry                 
    push           pc_genmcl.px_data.p u64 
    pushptr                   u8 
    push           4          i64 
    casejumpeq     #6604      i64 0
    push           5          i64 
    casejumpeq     #6605      i64 0
    push           7          i64 
    casejumpeq     #6605      i64 0
    push           8          i64 
    casejumpeq     #6606      i64 0
    push           2          i64 
    casejumpeq     #6607      i64 0
    popstack                  i64 
    jump           #6608      
#6604: 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_data.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenint u64 
    pop            pc_genmcl.px_data.ax u64 
    jump           #6609      
#6605: 
    setargs                   2 0
    push           pc_genmcl.px_data.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_genmcl.px_data.p u64 
    push           8          
    pushptroff                r64 1 0
    callfn         &pc_libmcl.mgenrealimm u64 
    pop            pc_genmcl.px_data.ax u64 
    jump           #6609      
#6606: 
    setargs                   1 0
    setargs                   1 0
    push           pc_genmcl.px_data.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.getstringindex i64 
    callfn         &pc_libmcl.mgenlabel u64 
    pop            pc_genmcl.px_data.ax u64 
    jump           #6609      
#6607: 
    setargs                   1 0
    push           pc_genmcl.px_data.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmemaddr u64 
    pop            pc_genmcl.px_data.ax u64 
    push           pc_genmcl.px_data.p u64 
    push           20         
    pushptroff                i32 1 0
    push           pc_genmcl.px_data.ax u64 
    push           14         
    popptroff                 i32 1 0
    jump           #6609      
#6608: 
    setargs                   2 0
    push           &pc_tables.opndnames 
    push           pc_genmcl.px_data.p u64 
    pushptr                   u8 
    pushptroff                u64 8 0
    push           "db/dq optype? #" u64 
    callproc       &pc_libmcl.merror 
#6609: 
    push           pc_genmcl.px_data.p u64 
    push           4          
    pushptroff                i32 1 0
    push           1          i64 
    casejumpeq     #6610      i64 0
    push           2          i64 
    casejumpeq     #6611      i64 0
    push           4          i64 
    casejumpeq     #6612      i64 0
    push           8          i64 
    casejumpeq     #6613      i64 0
    popstack                  i64 
    jump           #6614      
#6610: 
    push           114        i64 
    pop            pc_genmcl.px_data.opc i64 
    jump           #6615      
#6611: 
    push           115        i64 
    pop            pc_genmcl.px_data.opc i64 
    jump           #6615      
#6612: 
    push           116        i64 
    pop            pc_genmcl.px_data.opc i64 
    jump           #6615      
#6613: 
    push           117        i64 
    pop            pc_genmcl.px_data.opc i64 
    jump           #6615      
#6614: 
    setargs                   2 0
    push           ""         u64 
    push           "DATA/not 1248" u64 
    callproc       &pc_libmcl.merror 
#6615: 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.px_data.ax u64 
    push           pc_genmcl.px_data.opc i64 
    callproc       &pc_libmcl.genmc 
#6616: 
    retproc                   
End


Proc pc_genmcl.px_db:
    param          pc_genmcl.px_db.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_db.p u64 
    callproc       &pc_genmcl.unimpl 
#6618: 
    retproc                   
End


Proc pc_genmcl.px_dw:
    param          pc_genmcl.px_dw.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_dw.p u64 
    callproc       &pc_genmcl.unimpl 
#6620: 
    retproc                   
End


Proc pc_genmcl.px_dd:
    param          pc_genmcl.px_dd.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_dd.p u64 
    callproc       &pc_genmcl.unimpl 
#6622: 
    retproc                   
End


Proc pc_genmcl.px_dq:
    param          pc_genmcl.px_dq.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_dq.p u64 
    callproc       &pc_genmcl.unimpl 
#6624: 
    retproc                   
End


Proc pc_genmcl.px_dstring:
    param          pc_genmcl.px_dstring.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_dstring.p u64 
    callproc       &pc_genmcl.unimpl 
#6626: 
    retproc                   
End


Proc pc_genmcl.px_dstringz:
    param          pc_genmcl.px_dstringz.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_dstringz.p u64 
    callproc       &pc_genmcl.unimpl 
#6628: 
    retproc                   
End


Proc pc_genmcl.px_reserve:
    param          pc_genmcl.px_reserve.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_reserve.p u64 
    callproc       &pc_genmcl.unimpl 
#6630: 
    retproc                   
End


Proc pc_genmcl.px_assem:
    param          pc_genmcl.px_assem.p u64 
    procentry                 
    push           pci_mcl.hostasmhandler u64 
    jumpfalse      #6632      u64 
    setargs                   1 0
    push           pc_genmcl.px_assem.p u64 
    push           8          
    pushptroff                u64 1 0
    push           pci_mcl.hostasmhandler u64 
    callprocptr               
    jump           #6633      
#6632: 
    setargs                   1 0
    push           pc_genmcl.px_assem.p u64 
    callproc       &pc_genmcl.unimpl 
#6633: 
    push           pc_genmcl.px_assem.p u64 
    push           3          
    pushptroff                u8 1 0
    jumpfalse      #6634      i64 
    setargs                   1 0
    push           pc_genmcl.px_assem.p u64 
    callproc       &pc_genmcl.dogetretvalue 
#6634: 
#6635: 
    retproc                   
End


Proc pc_genmcl.px_add:
    param          pc_genmcl.px_add.p u64 
    local          pc_genmcl.px_add.ax u64 
    local          pc_genmcl.px_add.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_add.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6637      i64 0
    push           3          i64 
    casejumpeq     #6638      i64 0
    push           2          i64 
    casejumpeq     #6639      i64 0
    push           5          i64 
    casejumpeq     #6640      i64 0
    popstack                  i64 
    jump           #6641      
#6637: 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_add.ax u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #6642      i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    push           1          i64 
    jumpne         #6642      i64 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.px_add.ax u64 
    push           53         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6643      
#6642: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_add.bx u64 
    setargs                   3 0
    push           pc_genmcl.px_add.bx u64 
    push           pc_genmcl.px_add.ax u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
#6643: 
    jump           #6644      
#6638: 
    setargs                   1 0
    push           68         i64 
    callproc       &pc_genmcl.dobin_float 
    jump           #6644      
#6639: 
    setargs                   1 0
    push           64         i64 
    callproc       &pc_genmcl.dobin_float 
    jump           #6644      
#6640: 
    setargs                   3 0
    push           31         i64 
    push           29         i64 
    push           pc_genmcl.px_add.p u64 
    callproc       &pc_genmcl.dobin_i128 
    jump           #6645      
    jump           #6644      
#6641: 
    setargs                   2 0
    push           pc_genmcl.px_add.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "add:"     u64 
    callproc       &pc_libmcl.merrort 
#6644: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6645: 
    retproc                   
End


Proc pc_genmcl.px_sub:
    param          pc_genmcl.px_sub.p u64 
    local          pc_genmcl.px_sub.ax u64 
    local          pc_genmcl.px_sub.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_sub.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6647      i64 0
    push           3          i64 
    casejumpeq     #6648      i64 0
    push           2          i64 
    casejumpeq     #6649      i64 0
    push           5          i64 
    casejumpeq     #6650      i64 0
    popstack                  i64 
    jump           #6651      
#6647: 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_sub.ax u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #6652      i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    push           1          i64 
    jumpne         #6652      i64 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.px_sub.ax u64 
    push           54         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6653      
#6652: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_sub.bx u64 
    setargs                   3 0
    push           pc_genmcl.px_sub.bx u64 
    push           pc_genmcl.px_sub.ax u64 
    push           30         i64 
    callproc       &pc_libmcl.genmc 
#6653: 
    jump           #6654      
#6648: 
    setargs                   1 0
    push           69         i64 
    callproc       &pc_genmcl.dobin_float 
    jump           #6654      
#6649: 
    setargs                   1 0
    push           65         i64 
    callproc       &pc_genmcl.dobin_float 
    jump           #6654      
#6650: 
    setargs                   3 0
    push           32         i64 
    push           30         i64 
    push           pc_genmcl.px_sub.p u64 
    callproc       &pc_genmcl.dobin_i128 
    jump           #6655      
    jump           #6654      
#6651: 
    setargs                   2 0
    push           pc_genmcl.px_sub.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "sub:"     u64 
    callproc       &pc_libmcl.merrort 
#6654: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6655: 
    retproc                   
End


Proc pc_genmcl.px_mul:
    param          pc_genmcl.px_mul.p u64 
    local          pc_genmcl.px_mul.ax u64 
    local          pc_genmcl.px_mul.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_mul.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6657      i64 0
    push           3          i64 
    casejumpeq     #6658      i64 0
    push           2          i64 
    casejumpeq     #6659      i64 0
    push           5          i64 
    casejumpeq     #6660      i64 0
    popstack                  i64 
    jump           #6661      
#6657: 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_mul.ax u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #6662      i64 
    setargs                   2 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    push           pc_genmcl.px_mul.ax u64 
    callproc       &pc_genmcl.mulimm 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #6663      
#6662: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_mul.bx u64 
    setargs                   3 0
    push           pc_genmcl.px_mul.bx u64 
    push           pc_genmcl.px_mul.ax u64 
    push           35         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6664      
#6658: 
    setargs                   1 0
    push           70         i64 
    callproc       &pc_genmcl.dobin_float 
    jump           #6664      
#6659: 
    setargs                   1 0
    push           66         i64 
    callproc       &pc_genmcl.dobin_float 
    jump           #6664      
#6660: 
    setargs                   3 0
    push           5          i64 
    push           4          i64 
    push           4          i64 
    callproc       &pc_genmcl.do_syscall 
    jump           #6663      
    jump           #6664      
#6661: 
    setargs                   2 0
    push           pc_genmcl.px_mul.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "mul:"     u64 
    callproc       &pc_libmcl.merrort 
#6664: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6663: 
    retproc                   
End


Proc pc_genmcl.px_div:
    param          pc_genmcl.px_div.p u64 
    local          pc_genmcl.px_div.ax u64 
    local          pc_genmcl.px_div.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_div.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           3          i64 
    casejumpeq     #6666      i64 0
    push           2          i64 
    casejumpeq     #6667      i64 0
    popstack                  i64 
    jump           #6668      
#6666: 
    setargs                   1 0
    push           71         i64 
    callproc       &pc_genmcl.dobin_float 
    jump           #6669      
#6667: 
    setargs                   1 0
    push           67         i64 
    callproc       &pc_genmcl.dobin_float 
    jump           #6669      
#6668: 
    setargs                   2 0
    push           pc_genmcl.px_div.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "div:"     u64 
    callproc       &pc_libmcl.merrort 
#6669: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6670: 
    retproc                   
End


Proc pc_genmcl.px_idiv:
    param          pc_genmcl.px_idiv.p u64 
    procentry                 
    push           pc_genmcl.px_idiv.p u64 
    push           3          
    pushptroff                u8 1 0
    push           9          i64 
    casejumpeq     #6672      i64 0
    push           4          i64 
    casejumpeq     #6673      i64 0
    push           10         i64 
    casejumpeq     #6674      i64 0
    push           5          i64 
    casejumpeq     #6675      i64 0
    popstack                  i64 
    jump           #6676      
#6672: 
    setargs                   3 0
    push           1          i64 
    push           1          i64 
    push           pc_genmcl.px_idiv.p u64 
    callproc       &pc_genmcl.do_divrem 
    jump           #6677      
#6673: 
    setargs                   3 0
    push           1          i64 
    push           0          i64 
    push           pc_genmcl.px_idiv.p u64 
    callproc       &pc_genmcl.do_divrem 
    jump           #6677      
#6674: 
    setargs                   2 0
    push           3          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   2 0
    push           4          i64 
    push           2          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   3 0
    push           5          i64 
    push           4          i64 
    push           5          i64 
    callproc       &pc_genmcl.do_syscall 
    jump           #6677      
#6675: 
    setargs                   2 0
    push           3          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   2 0
    push           4          i64 
    push           2          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   3 0
    push           5          i64 
    push           4          i64 
    push           5          i64 
    callproc       &pc_genmcl.do_syscall 
    jump           #6677      
#6676: 
    setargs                   2 0
    push           pc_genmcl.px_idiv.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "idiv:"    u64 
    callproc       &pc_libmcl.merrort 
#6677: 
#6678: 
    retproc                   
End


Proc pc_genmcl.px_irem:
    param          pc_genmcl.px_irem.p u64 
    procentry                 
    push           pc_genmcl.px_irem.p u64 
    push           3          
    pushptroff                u8 1 0
    push           9          i64 
    casejumpeq     #6680      i64 0
    push           4          i64 
    casejumpeq     #6681      i64 0
    popstack                  i64 
    jump           #6682      
#6680: 
    setargs                   3 0
    push           0          i64 
    push           1          i64 
    push           pc_genmcl.px_irem.p u64 
    callproc       &pc_genmcl.do_divrem 
    jump           #6683      
#6681: 
    setargs                   3 0
    push           0          i64 
    push           0          i64 
    push           pc_genmcl.px_irem.p u64 
    callproc       &pc_genmcl.do_divrem 
    jump           #6683      
#6682: 
    setargs                   2 0
    push           pc_genmcl.px_irem.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "irem:"    u64 
    callproc       &pc_libmcl.merrort 
#6683: 
#6684: 
    retproc                   
End


Proc pc_genmcl.px_iand:
    param          pc_genmcl.px_iand.p u64 
    procentry                 
    setargs                   2 0
    push           39         i64 
    push           pc_genmcl.px_iand.p u64 
    callproc       &pc_genmcl.dobitwise 
#6686: 
    retproc                   
End


Proc pc_genmcl.px_ior:
    param          pc_genmcl.px_ior.p u64 
    procentry                 
    setargs                   2 0
    push           40         i64 
    push           pc_genmcl.px_ior.p u64 
    callproc       &pc_genmcl.dobitwise 
#6688: 
    retproc                   
End


Proc pc_genmcl.px_ixor:
    param          pc_genmcl.px_ixor.p u64 
    procentry                 
    setargs                   2 0
    push           41         i64 
    push           pc_genmcl.px_ixor.p u64 
    callproc       &pc_genmcl.dobitwise 
#6690: 
    retproc                   
End


Proc pc_genmcl.px_shl:
    param          pc_genmcl.px_shl.p u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_shl.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6692      i64 0
    popstack                  i64 
    jump           #6693      
#6692: 
    setargs                   2 0
    push           44         i64 
    push           pc_genmcl.px_shl.p u64 
    callproc       &pc_genmcl.do_shift 
    jump           #6694      
#6693: 
    setargs                   2 0
    push           pc_genmcl.px_shl.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "shl:"     u64 
    callproc       &pc_libmcl.merrort 
#6694: 
#6695: 
    retproc                   
End


Proc pc_genmcl.px_shr:
    param          pc_genmcl.px_shr.p u64 
    procentry                 
    push           pc_genmcl.px_shr.p u64 
    push           3          
    pushptroff                u8 1 0
    push           9          i64 
    casejumpeq     #6697      i64 0
    push           4          i64 
    casejumpeq     #6698      i64 0
    popstack                  i64 
    jump           #6699      
#6697: 
    setargs                   2 0
    push           45         i64 
    push           pc_genmcl.px_shr.p u64 
    callproc       &pc_genmcl.do_shift 
    jump           #6700      
#6698: 
    setargs                   2 0
    push           46         i64 
    push           pc_genmcl.px_shr.p u64 
    callproc       &pc_genmcl.do_shift 
    jump           #6700      
#6699: 
    setargs                   2 0
    push           pc_genmcl.px_shr.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "shr:"     u64 
    callproc       &pc_libmcl.merrort 
#6700: 
#6701: 
    retproc                   
End


Proc pc_genmcl.px_in:
    param          pc_genmcl.px_in.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_in.p u64 
    callproc       &pc_genmcl.unimpl 
#6703: 
    retproc                   
End


Proc pc_genmcl.px_notin:
    param          pc_genmcl.px_notin.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_notin.p u64 
    callproc       &pc_genmcl.unimpl 
#6705: 
    retproc                   
End


Proc pc_genmcl.px_min:
    param          pc_genmcl.px_min.p u64 
    procentry                 
    push           pc_genmcl.px_min.p u64 
    push           3          
    pushptroff                u8 1 0
    push           9          i64 
    casejumpeq     #6707      i64 0
    push           4          i64 
    casejumpeq     #6708      i64 0
    push           12         i64 
    casejumpeq     #6709      i64 0
    push           11         i64 
    casejumpeq     #6710      i64 0
    popstack                  i64 
    jump           #6711      
#6707: 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genmcl.domax_int 
    jump           #6712      
#6708: 
    setargs                   1 0
    push           7          i64 
    callproc       &pc_genmcl.domax_int 
    jump           #6712      
#6709: 
    setargs                   1 0
    push           112        i64 
    callproc       &pc_genmcl.domax_float 
    jump           #6712      
#6710: 
    setargs                   1 0
    push           110        i64 
    callproc       &pc_genmcl.domax_float 
    jump           #6712      
#6711: 
    setargs                   2 0
    push           pc_genmcl.px_min.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "min:"     u64 
    callproc       &pc_libmcl.merrort 
#6712: 
#6713: 
    retproc                   
End


Proc pc_genmcl.px_max:
    param          pc_genmcl.px_max.p u64 
    procentry                 
    push           pc_genmcl.px_max.p u64 
    push           3          
    pushptroff                u8 1 0
    push           9          i64 
    casejumpeq     #6715      i64 0
    push           4          i64 
    casejumpeq     #6716      i64 0
    push           12         i64 
    casejumpeq     #6717      i64 0
    push           11         i64 
    casejumpeq     #6718      i64 0
    popstack                  i64 
    jump           #6719      
#6715: 
    setargs                   1 0
    push           12         i64 
    callproc       &pc_genmcl.domax_int 
    jump           #6720      
#6716: 
    setargs                   1 0
    push           2          i64 
    callproc       &pc_genmcl.domax_int 
    jump           #6720      
#6717: 
    setargs                   1 0
    push           113        i64 
    callproc       &pc_genmcl.domax_float 
    jump           #6720      
#6718: 
    setargs                   1 0
    push           111        i64 
    callproc       &pc_genmcl.domax_float 
    jump           #6720      
#6719: 
    setargs                   2 0
    push           pc_genmcl.px_max.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "max:"     u64 
    callproc       &pc_libmcl.merrort 
#6720: 
#6721: 
    retproc                   
End


Proc pc_genmcl.px_eq:
    param          pc_genmcl.px_eq.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_eq.p u64 
    callproc       &pc_genmcl.unimpl 
#6723: 
    retproc                   
End


Proc pc_genmcl.px_ne:
    param          pc_genmcl.px_ne.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_ne.p u64 
    callproc       &pc_genmcl.unimpl 
#6725: 
    retproc                   
End


Proc pc_genmcl.px_lt:
    param          pc_genmcl.px_lt.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_lt.p u64 
    callproc       &pc_genmcl.unimpl 
#6727: 
    retproc                   
End


Proc pc_genmcl.px_le:
    param          pc_genmcl.px_le.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_le.p u64 
    callproc       &pc_genmcl.unimpl 
#6729: 
    retproc                   
End


Proc pc_genmcl.px_ge:
    param          pc_genmcl.px_ge.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_ge.p u64 
    callproc       &pc_genmcl.unimpl 
#6731: 
    retproc                   
End


Proc pc_genmcl.px_gt:
    param          pc_genmcl.px_gt.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_gt.p u64 
    callproc       &pc_genmcl.unimpl 
#6733: 
    retproc                   
End


Proc pc_genmcl.px_same:
    param          pc_genmcl.px_same.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_same.p u64 
    callproc       &pc_genmcl.unimpl 
#6735: 
    retproc                   
End


Proc pc_genmcl.px_andl:
    param          pc_genmcl.px_andl.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_andl.p u64 
    callproc       &pc_genmcl.unimpl 
#6737: 
    retproc                   
End


Proc pc_genmcl.px_orl:
    param          pc_genmcl.px_orl.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_orl.p u64 
    callproc       &pc_genmcl.unimpl 
#6739: 
    retproc                   
End


Proc pc_genmcl.px_addrefoff:
    param          pc_genmcl.px_addrefoff.p u64 
    local          pc_genmcl.px_addrefoff.ax u64 
    local          pc_genmcl.px_addrefoff.cx u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_addrefoff.p u64 
    callfn         &pc_genmcl.do_addrmode u64 
    pop            pc_genmcl.px_addrefoff.cx u64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #6741      i64 
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           1          
    popptroff                 u8 1 0
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
#6741: 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_addrefoff.ax u64 
    setargs                   3 0
    push           pc_genmcl.px_addrefoff.cx u64 
    push           pc_genmcl.px_addrefoff.ax u64 
    push           15         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6742: 
    retproc                   
End


Proc pc_genmcl.px_subref:
    param          pc_genmcl.px_subref.p u64 
    local          pc_genmcl.px_subref.ax u64 
    local          pc_genmcl.px_subref.bx u64 
    local          pc_genmcl.px_subref.n i64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_subref.ax u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_subref.bx u64 
    setargs                   3 0
    push           pc_genmcl.px_subref.bx u64 
    push           pc_genmcl.px_subref.ax u64 
    push           30         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_genmcl.px_subref.p u64 
    push           16         
    pushptroff                i32 1 0
    push           1          i64 
    jumple         #6744      i64 
    setargs                   1 0
    push           pc_genmcl.px_subref.p u64 
    push           16         
    pushptroff                i32 1 0
    callfn         &pc_libmcl.ispoweroftwo i64 
    pop            pc_genmcl.px_subref.n i64 
    push           pc_genmcl.px_subref.n i64 
    jumpfalse      #6745      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_subref.n i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_subref.ax u64 
    push           46         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6746      
#6745: 
    setargs                   2 0
    push           ""         u64 
    push           "SUB/REF NOT POWER OF TWO" u64 
    callproc       &pc_libmcl.merror 
#6746: 
#6744: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6747: 
    retproc                   
End


Proc pc_genmcl.px_subrefoff:
    param          pc_genmcl.px_subrefoff.p u64 
    local          pc_genmcl.px_subrefoff.scale i64 
    local          pc_genmcl.px_subrefoff.extra i64 
    local          pc_genmcl.px_subrefoff.offset i64 
    local          pc_genmcl.px_subrefoff.ax u64 
    local          pc_genmcl.px_subrefoff.bx u64 
    procentry                 
    push           pc_genmcl.px_subrefoff.p u64 
    push           16         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_subrefoff.scale i64 
    push           pc_genmcl.px_subrefoff.p u64 
    push           20         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_subrefoff.extra i64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_subrefoff.ax u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #6749      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    push           pc_genmcl.px_subrefoff.scale i64 
    mul                       i64 
    push           pc_genmcl.px_subrefoff.extra i64 
    add                       i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_subrefoff.ax u64 
    push           30         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6750      
#6749: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_subrefoff.bx u64 
    setargs                   2 0
    push           pc_genmcl.px_subrefoff.scale i64 
    push           pc_genmcl.px_subrefoff.bx u64 
    callfn         &pc_genmcl.scaleindex i64 
    pop            pc_genmcl.px_subrefoff.scale i64 
    push           pc_genmcl.px_subrefoff.scale i64 
    push           1          i64 
    jumple         #6751      i64 
    setargs                   2 0
    push           pc_genmcl.px_subrefoff.scale i64 
    push           pc_genmcl.px_subrefoff.bx u64 
    callproc       &pc_genmcl.mulimm 
#6751: 
    setargs                   3 0
    push           pc_genmcl.px_subrefoff.bx u64 
    push           pc_genmcl.px_subrefoff.ax u64 
    push           30         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_genmcl.px_subrefoff.extra i64 
    jumpfalse      #6752      i64 
    setargs                   2 0
    push           ""         u64 
    push           "SUBREF/EXTRA" u64 
    callproc       &pc_libmcl.merror 
#6752: 
#6750: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6753: 
    retproc                   
End


Proc pc_genmcl.px_neg:
    param          pc_genmcl.px_neg.p u64 
    local          pc_genmcl.px_neg.ax u64 
    local          pc_genmcl.px_neg.axlow u64 
    local          pc_genmcl.px_neg.axhigh u64 
    local          pc_genmcl.px_neg.bxlow u64 
    local          pc_genmcl.px_neg.bxhigh u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_neg.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6755      i64 0
    push           3          i64 
    casejumpeq     #6756      i64 0
    push           2          i64 
    casejumpeq     #6757      i64 0
    push           5          i64 
    casejumpeq     #6758      i64 0
    popstack                  i64 
    jump           #6759      
#6755: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_neg.ax u64 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.px_neg.ax u64 
    push           51         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6760      
#6756: 
    push           pci_mcl.labneg64 i64 
    jumptrue       #6761      i64 
    setargs                   0 0
    callfn         &pc_libmcl.mcreatefwdlabel i64 
    pop            pci_mcl.labneg64 i64 
#6761: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.labneg64 i64 
    callfn         &pc_libmcl.mgenlabelmem u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    push           74         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6760      
#6757: 
    push           pci_mcl.labneg32 i64 
    jumptrue       #6762      i64 
    setargs                   0 0
    callfn         &pc_libmcl.mcreatefwdlabel i64 
    pop            pci_mcl.labneg32 i64 
#6762: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.labneg32 i64 
    callfn         &pc_libmcl.mgenlabelmem u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    push           75         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6760      
#6758: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_neg.axlow u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_neg.axhigh u64 
    setargs                   0 0
    callfn         &pc_stackmcl.genopnd_d64 u64 
    pop            pc_genmcl.px_neg.bxhigh u64 
    setargs                   0 0
    callfn         &pc_stackmcl.genopnd_d64 u64 
    pop            pc_genmcl.px_neg.bxlow u64 
    setargs                   3 0
    push           pc_genmcl.px_neg.bxlow u64 
    push           pc_genmcl.px_neg.bxlow u64 
    push           41         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.px_neg.bxhigh u64 
    push           pc_genmcl.px_neg.bxhigh u64 
    push           41         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.px_neg.axlow u64 
    push           pc_genmcl.px_neg.bxlow u64 
    push           30         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.px_neg.axhigh u64 
    push           pc_genmcl.px_neg.bxhigh u64 
    push           32         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   2 0
    push           3          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   2 0
    push           4          i64 
    push           2          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #6760      
#6759: 
    setargs                   2 0
    push           pc_genmcl.px_neg.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "neg"      u64 
    callproc       &pc_libmcl.merrort 
#6760: 
#6763: 
    retproc                   
End


Proc pc_genmcl.px_abs:
    param          pc_genmcl.px_abs.p u64 
    local          pc_genmcl.px_abs.ax u64 
    local          pc_genmcl.px_abs.lx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_abs.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6765      i64 0
    push           3          i64 
    casejumpeq     #6766      i64 0
    push           2          i64 
    casejumpeq     #6767      i64 0
    popstack                  i64 
    jump           #6768      
#6765: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_abs.ax u64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           0          i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_abs.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    callfn         &pc_libmcl.mgenlabel u64 
    store          pc_genmcl.px_abs.lx u64 
    push           13         i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.px_abs.ax u64 
    push           51         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.px_abs.lx u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    jump           #6769      
#6766: 
    push           pci_mcl.labneg64 i64 
    jumptrue       #6770      i64 
    setargs                   0 0
    callfn         &pc_libmcl.mcreatefwdlabel i64 
    pop            pci_mcl.labneg64 i64 
#6770: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.labneg64 i64 
    callfn         &pc_libmcl.mgenlabelmem u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    push           74         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6769      
#6767: 
    push           pci_mcl.labneg32 i64 
    jumptrue       #6771      i64 
    setargs                   0 0
    callfn         &pc_libmcl.mcreatefwdlabel i64 
    pop            pci_mcl.labneg32 i64 
#6771: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.labneg32 i64 
    callfn         &pc_libmcl.mgenlabelmem u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    push           75         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6769      
#6768: 
    setargs                   2 0
    push           pc_genmcl.px_abs.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "abs"      u64 
    callproc       &pc_libmcl.merrort 
#6769: 
#6772: 
    retproc                   
End


Proc pc_genmcl.px_inot:
    param          pc_genmcl.px_inot.p u64 
    local          pc_genmcl.px_inot.ax u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_inot.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6774      i64 0
    popstack                  i64 
    jump           #6775      
#6774: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_inot.ax u64 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.px_inot.ax u64 
    push           52         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6776      
#6775: 
    setargs                   2 0
    push           pc_genmcl.px_inot.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "inot"     u64 
    callproc       &pc_libmcl.merrort 
#6776: 
#6777: 
    retproc                   
End


Proc pc_genmcl.px_notl:
    param          pc_genmcl.px_notl.p u64 
    local          pc_genmcl.px_notl.ax u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_notl.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6779      i64 0
    popstack                  i64 
    jump           #6780      
#6779: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_notl.ax u64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_notl.ax u64 
    push           41         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6781      
#6780: 
    setargs                   2 0
    push           pc_genmcl.px_notl.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "notl"     u64 
    callproc       &pc_libmcl.merrort 
#6781: 
#6782: 
    retproc                   
End


Proc pc_genmcl.px_istruel:
    param          pc_genmcl.px_istruel.p u64 
    local          pc_genmcl.px_istruel.ax u64 
    local          pc_genmcl.px_istruel.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_istruel.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6784      i64 0
    popstack                  i64 
    jump           #6785      
#6784: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_istruel.ax u64 
    setargs                   3 0
    push           pc_genmcl.px_istruel.ax u64 
    push           pc_genmcl.px_istruel.ax u64 
    push           42         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   2 0
    push           1          i64 
    push           pc_genmcl.px_istruel.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    store          pc_genmcl.px_istruel.bx u64 
    push           5          i64 
    push           59         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.px_istruel.bx u64 
    setargs                   2 0
    push           4          i64 
    push           pc_genmcl.px_istruel.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           20         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6786      
#6785: 
    setargs                   2 0
    push           pc_genmcl.px_istruel.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "istruel"  u64 
    callproc       &pc_libmcl.merrort 
#6786: 
#6787: 
    retproc                   
End


Proc pc_genmcl.px_sqr:
    param          pc_genmcl.px_sqr.p u64 
    local          pc_genmcl.px_sqr.ax u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_sqr.ax u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_sqr.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6789      i64 0
    push           3          i64 
    casejumpeq     #6790      i64 0
    push           2          i64 
    casejumpeq     #6791      i64 0
    popstack                  i64 
    jump           #6792      
#6789: 
    setargs                   3 0
    push           pc_genmcl.px_sqr.ax u64 
    push           pc_genmcl.px_sqr.ax u64 
    push           35         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6793      
#6790: 
    setargs                   3 0
    push           pc_genmcl.px_sqr.ax u64 
    push           pc_genmcl.px_sqr.ax u64 
    push           70         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6793      
#6791: 
    setargs                   3 0
    push           pc_genmcl.px_sqr.ax u64 
    push           pc_genmcl.px_sqr.ax u64 
    push           66         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6793      
#6792: 
    setargs                   2 0
    push           pc_genmcl.px_sqr.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "sqr"      u64 
    callproc       &pc_libmcl.merrort 
#6793: 
#6794: 
    retproc                   
End


Proc pc_genmcl.px_sqrt:
    param          pc_genmcl.px_sqrt.p u64 
    local          pc_genmcl.px_sqrt.ax u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_sqrt.ax u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_sqrt.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           3          i64 
    casejumpeq     #6796      i64 0
    push           2          i64 
    casejumpeq     #6797      i64 0
    popstack                  i64 
    jump           #6798      
#6796: 
    setargs                   3 0
    push           pc_genmcl.px_sqrt.ax u64 
    push           pc_genmcl.px_sqrt.ax u64 
    push           62         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6799      
#6797: 
    setargs                   3 0
    push           pc_genmcl.px_sqrt.ax u64 
    push           pc_genmcl.px_sqrt.ax u64 
    push           63         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6799      
#6798: 
    setargs                   2 0
    push           pc_genmcl.px_sqrt.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "sqrt"     u64 
    callproc       &pc_libmcl.merrort 
#6799: 
#6800: 
    retproc                   
End


Proc pc_genmcl.px_sin:
    param          pc_genmcl.px_sin.p u64 
    procentry                 
    setargs                   2 0
    push           "sin*"     u64 
    push           pc_genmcl.px_sin.p u64 
    callproc       &pc_genmcl.domaths 
#6802: 
    retproc                   
End


Proc pc_genmcl.px_cos:
    param          pc_genmcl.px_cos.p u64 
    procentry                 
    setargs                   2 0
    push           "cos*"     u64 
    push           pc_genmcl.px_cos.p u64 
    callproc       &pc_genmcl.domaths 
#6804: 
    retproc                   
End


Proc pc_genmcl.px_tan:
    param          pc_genmcl.px_tan.p u64 
    procentry                 
    setargs                   2 0
    push           "tan*"     u64 
    push           pc_genmcl.px_tan.p u64 
    callproc       &pc_genmcl.domaths 
#6806: 
    retproc                   
End


Proc pc_genmcl.px_asin:
    param          pc_genmcl.px_asin.p u64 
    procentry                 
    setargs                   2 0
    push           "asin*"    u64 
    push           pc_genmcl.px_asin.p u64 
    callproc       &pc_genmcl.domaths 
#6808: 
    retproc                   
End


Proc pc_genmcl.px_acos:
    param          pc_genmcl.px_acos.p u64 
    procentry                 
    setargs                   2 0
    push           "acos*"    u64 
    push           pc_genmcl.px_acos.p u64 
    callproc       &pc_genmcl.domaths 
#6810: 
    retproc                   
End


Proc pc_genmcl.px_atan:
    param          pc_genmcl.px_atan.p u64 
    procentry                 
    setargs                   2 0
    push           "atan*"    u64 
    push           pc_genmcl.px_atan.p u64 
    callproc       &pc_genmcl.domaths 
#6812: 
    retproc                   
End


Proc pc_genmcl.px_ln:
    param          pc_genmcl.px_ln.p u64 
    procentry                 
    setargs                   2 0
    push           "log*"     u64 
    push           pc_genmcl.px_ln.p u64 
    callproc       &pc_genmcl.domaths 
#6814: 
    retproc                   
End


Proc pc_genmcl.px_log:
    param          pc_genmcl.px_log.p u64 
    procentry                 
    setargs                   2 0
    push           "log10*"   u64 
    push           pc_genmcl.px_log.p u64 
    callproc       &pc_genmcl.domaths 
#6816: 
    retproc                   
End


Proc pc_genmcl.px_exp:
    param          pc_genmcl.px_exp.p u64 
    procentry                 
    setargs                   2 0
    push           "exp*"     u64 
    push           pc_genmcl.px_exp.p u64 
    callproc       &pc_genmcl.domaths 
#6818: 
    retproc                   
End


Proc pc_genmcl.px_round:
    param          pc_genmcl.px_round.p u64 
    procentry                 
    setargs                   2 0
    push           "round*"   u64 
    push           pc_genmcl.px_round.p u64 
    callproc       &pc_genmcl.domaths 
#6820: 
    retproc                   
End


Proc pc_genmcl.px_floor:
    param          pc_genmcl.px_floor.p u64 
    procentry                 
    setargs                   2 0
    push           "floor*"   u64 
    push           pc_genmcl.px_floor.p u64 
    callproc       &pc_genmcl.domaths 
#6822: 
    retproc                   
End


Proc pc_genmcl.px_ceil:
    param          pc_genmcl.px_ceil.p u64 
    procentry                 
    setargs                   2 0
    push           "ceil*"    u64 
    push           pc_genmcl.px_ceil.p u64 
    callproc       &pc_genmcl.domaths 
#6824: 
    retproc                   
End


Proc pc_genmcl.px_fract:
    param          pc_genmcl.px_fract.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_fract.p u64 
    callproc       &pc_genmcl.unimpl 
#6826: 
    retproc                   
End


Proc pc_genmcl.px_sign:
    param          pc_genmcl.px_sign.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_sign.p u64 
    callproc       &pc_genmcl.unimpl 
#6828: 
    retproc                   
End


Proc pc_genmcl.px_atan2:
    param          pc_genmcl.px_atan2.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_atan2.p u64 
    callproc       &pc_genmcl.unimpl 
#6830: 
    retproc                   
End


Proc pc_genmcl.px_power:
    param          pc_genmcl.px_power.p u64 
    local          pc_genmcl.px_power.ax u64 
    local          pc_genmcl.px_power.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_power.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6832      i64 0
    popstack                  i64 
    jump           #6833      
#6832: 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   3 0
    push           1          i64 
    push           2          i64 
    push           2          i64 
    callproc       &pc_genmcl.do_syscall 
    jump           #6834      
    jump           #6835      
#6833: 
    setargs                   2 0
    push           pc_genmcl.px_power.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "power:"   u64 
    callproc       &pc_libmcl.merrort 
#6835: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6834: 
    retproc                   
End


Proc pc_genmcl.px_fmod:
    param          pc_genmcl.px_fmod.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_fmod.p u64 
    callproc       &pc_genmcl.unimpl 
#6837: 
    retproc                   
End


Proc pc_genmcl.px_incr:
    param          pc_genmcl.px_incr.p u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_incr.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6839      i64 0
    push           4          i64 
    casejumpeq     #6839      i64 0
    popstack                  i64 
    jump           #6840      
#6839: 
    setargs                   3 0
    push           29         i64 
    push           53         i64 
    push           pc_genmcl.px_incr.p u64 
    callproc       &pc_genmcl.doincr 
    jump           #6841      
#6840: 
    setargs                   2 0
    push           pc_genmcl.px_incr.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "incr"     u64 
    callproc       &pc_libmcl.merrort 
#6841: 
#6842: 
    retproc                   
End


Proc pc_genmcl.px_decr:
    param          pc_genmcl.px_decr.p u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_decr.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6844      i64 0
    push           4          i64 
    casejumpeq     #6844      i64 0
    popstack                  i64 
    jump           #6845      
#6844: 
    setargs                   3 0
    push           30         i64 
    push           54         i64 
    push           pc_genmcl.px_decr.p u64 
    callproc       &pc_genmcl.doincr 
    jump           #6846      
#6845: 
    setargs                   2 0
    push           pc_genmcl.px_decr.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "decr"     u64 
    callproc       &pc_libmcl.merrort 
#6846: 
#6847: 
    retproc                   
End


Proc pc_genmcl.px_incrload:
    param          pc_genmcl.px_incrload.p u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_incrload.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6849      i64 0
    push           4          i64 
    casejumpeq     #6849      i64 0
    popstack                  i64 
    jump           #6850      
#6849: 
    setargs                   3 0
    push           29         i64 
    push           53         i64 
    push           pc_genmcl.px_incrload.p u64 
    callproc       &pc_genmcl.doincrload 
    jump           #6851      
#6850: 
    setargs                   2 0
    push           pc_genmcl.px_incrload.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "incrload" u64 
    callproc       &pc_libmcl.merrort 
#6851: 
#6852: 
    retproc                   
End


Proc pc_genmcl.px_decrload:
    param          pc_genmcl.px_decrload.p u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_decrload.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6854      i64 0
    push           4          i64 
    casejumpeq     #6854      i64 0
    popstack                  i64 
    jump           #6855      
#6854: 
    setargs                   3 0
    push           30         i64 
    push           54         i64 
    push           pc_genmcl.px_decrload.p u64 
    callproc       &pc_genmcl.doincrload 
    jump           #6856      
#6855: 
    setargs                   2 0
    push           pc_genmcl.px_decrload.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "decrload" u64 
    callproc       &pc_libmcl.merrort 
#6856: 
#6857: 
    retproc                   
End


Proc pc_genmcl.px_loadincr:
    param          pc_genmcl.px_loadincr.p u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_loadincr.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6859      i64 0
    push           4          i64 
    casejumpeq     #6859      i64 0
    popstack                  i64 
    jump           #6860      
#6859: 
    setargs                   3 0
    push           29         i64 
    push           53         i64 
    push           pc_genmcl.px_loadincr.p u64 
    callproc       &pc_genmcl.doloadincr 
    jump           #6861      
#6860: 
    setargs                   2 0
    push           pc_genmcl.px_loadincr.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "loadincr" u64 
    callproc       &pc_libmcl.merrort 
#6861: 
#6862: 
    retproc                   
End


Proc pc_genmcl.px_loaddecr:
    param          pc_genmcl.px_loaddecr.p u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_loaddecr.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6864      i64 0
    push           4          i64 
    casejumpeq     #6864      i64 0
    popstack                  i64 
    jump           #6865      
#6864: 
    setargs                   3 0
    push           30         i64 
    push           54         i64 
    push           pc_genmcl.px_loaddecr.p u64 
    callproc       &pc_genmcl.doloadincr 
    jump           #6866      
#6865: 
    setargs                   2 0
    push           pc_genmcl.px_loaddecr.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "loaddecr" u64 
    callproc       &pc_libmcl.merrort 
#6866: 
#6867: 
    retproc                   
End


Proc pc_genmcl.px_addto:
    param          pc_genmcl.px_addto.p u64 
    local          pc_genmcl.px_addto.ax u64 
    local          pc_genmcl.px_addto.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_addto.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6869      i64 0
    push           4          i64 
    casejumpeq     #6869      i64 0
    push           3          i64 
    casejumpeq     #6870      i64 0
    push           2          i64 
    casejumpeq     #6871      i64 0
    popstack                  i64 
    jump           #6872      
#6869: 
    setargs                   2 0
    push           29         i64 
    push           pc_genmcl.px_addto.p u64 
    callproc       &pc_genmcl.dobinto_int 
    jump           #6873      
#6870: 
    setargs                   2 0
    push           68         i64 
    push           pc_genmcl.px_addto.p u64 
    callproc       &pc_genmcl.dobinto_float 
    jump           #6873      
#6871: 
    setargs                   2 0
    push           64         i64 
    push           pc_genmcl.px_addto.p u64 
    callproc       &pc_genmcl.dobinto_float32 
    jump           #6873      
#6872: 
    setargs                   2 0
    push           pc_genmcl.px_addto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "addto:"   u64 
    callproc       &pc_libmcl.merrort 
#6873: 
#6874: 
    retproc                   
End


Proc pc_genmcl.px_subto:
    param          pc_genmcl.px_subto.p u64 
    local          pc_genmcl.px_subto.ax u64 
    local          pc_genmcl.px_subto.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_subto.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6876      i64 0
    push           4          i64 
    casejumpeq     #6876      i64 0
    push           3          i64 
    casejumpeq     #6877      i64 0
    push           2          i64 
    casejumpeq     #6878      i64 0
    popstack                  i64 
    jump           #6879      
#6876: 
    setargs                   2 0
    push           30         i64 
    push           pc_genmcl.px_subto.p u64 
    callproc       &pc_genmcl.dobinto_int 
    jump           #6880      
#6877: 
    setargs                   2 0
    push           69         i64 
    push           pc_genmcl.px_subto.p u64 
    callproc       &pc_genmcl.dobinto_float 
    jump           #6880      
#6878: 
    setargs                   2 0
    push           65         i64 
    push           pc_genmcl.px_subto.p u64 
    callproc       &pc_genmcl.dobinto_float32 
    jump           #6880      
#6879: 
    setargs                   2 0
    push           pc_genmcl.px_subto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "subto:"   u64 
    callproc       &pc_libmcl.merrort 
#6880: 
#6881: 
    retproc                   
End


Proc pc_genmcl.px_multo:
    param          pc_genmcl.px_multo.p u64 
    local          pc_genmcl.px_multo.ax u64 
    local          pc_genmcl.px_multo.bx u64 
    local          pc_genmcl.px_multo.cx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_multo.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6883      i64 0
    push           3          i64 
    casejumpeq     #6884      i64 0
    push           2          i64 
    casejumpeq     #6885      i64 0
    popstack                  i64 
    jump           #6886      
#6883: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_d64 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.px_multo.ax u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_multo.bx u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_multo.cx u64 
    setargs                   3 0
    push           pc_genmcl.px_multo.ax u64 
    push           pc_genmcl.px_multo.cx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #6887      i64 
    setargs                   2 0
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    push           pc_genmcl.px_multo.cx u64 
    callproc       &pc_genmcl.mulimm 
    jump           #6888      
#6887: 
    setargs                   3 0
    push           pc_genmcl.px_multo.bx u64 
    push           pc_genmcl.px_multo.cx u64 
    push           35         i64 
    callproc       &pc_libmcl.genmc 
#6888: 
    setargs                   3 0
    push           pc_genmcl.px_multo.cx u64 
    push           pc_genmcl.px_multo.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #6889      
#6884: 
    setargs                   2 0
    push           70         i64 
    push           pc_genmcl.px_multo.p u64 
    callproc       &pc_genmcl.dobinto_float 
    jump           #6889      
#6885: 
    setargs                   2 0
    push           66         i64 
    push           pc_genmcl.px_multo.p u64 
    callproc       &pc_genmcl.dobinto_float32 
    jump           #6889      
#6886: 
    setargs                   2 0
    push           pc_genmcl.px_multo.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "multo:"   u64 
    callproc       &pc_libmcl.merrort 
#6889: 
#6890: 
    retproc                   
End


Proc pc_genmcl.px_divto:
    param          pc_genmcl.px_divto.p u64 
    local          pc_genmcl.px_divto.ax u64 
    local          pc_genmcl.px_divto.bx u64 
    local          pc_genmcl.px_divto.cx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_divto.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           3          i64 
    casejumpeq     #6892      i64 0
    push           2          i64 
    casejumpeq     #6893      i64 0
    popstack                  i64 
    jump           #6894      
#6892: 
    setargs                   2 0
    push           71         i64 
    push           pc_genmcl.px_divto.p u64 
    callproc       &pc_genmcl.dobinto_float 
    jump           #6895      
#6893: 
    setargs                   2 0
    push           67         i64 
    push           pc_genmcl.px_divto.p u64 
    callproc       &pc_genmcl.dobinto_float32 
    jump           #6895      
#6894: 
    setargs                   2 0
    push           pc_genmcl.px_divto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "divto:"   u64 
    callproc       &pc_libmcl.merrort 
#6895: 
#6896: 
    retproc                   
End


Proc pc_genmcl.px_idivto:
    param          pc_genmcl.px_idivto.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_idivto.p u64 
    callproc       &pc_genmcl.unimpl 
#6898: 
    retproc                   
End


Proc pc_genmcl.px_iremto:
    param          pc_genmcl.px_iremto.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_iremto.p u64 
    callproc       &pc_genmcl.unimpl 
#6900: 
    retproc                   
End


Proc pc_genmcl.px_iandto:
    param          pc_genmcl.px_iandto.p u64 
    local          pc_genmcl.px_iandto.ax u64 
    local          pc_genmcl.px_iandto.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_iandto.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6902      i64 0
    push           4          i64 
    casejumpeq     #6902      i64 0
    popstack                  i64 
    jump           #6903      
#6902: 
    setargs                   2 0
    push           39         i64 
    push           pc_genmcl.px_iandto.p u64 
    callproc       &pc_genmcl.dobinto_int 
    jump           #6904      
#6903: 
    setargs                   2 0
    push           pc_genmcl.px_iandto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "iandto:"  u64 
    callproc       &pc_libmcl.merrort 
#6904: 
#6905: 
    retproc                   
End


Proc pc_genmcl.px_iorto:
    param          pc_genmcl.px_iorto.p u64 
    local          pc_genmcl.px_iorto.ax u64 
    local          pc_genmcl.px_iorto.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_iorto.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6907      i64 0
    push           4          i64 
    casejumpeq     #6907      i64 0
    popstack                  i64 
    jump           #6908      
#6907: 
    setargs                   2 0
    push           40         i64 
    push           pc_genmcl.px_iorto.p u64 
    callproc       &pc_genmcl.dobinto_int 
    jump           #6909      
#6908: 
    setargs                   2 0
    push           pc_genmcl.px_iorto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "iorto:"   u64 
    callproc       &pc_libmcl.merrort 
#6909: 
#6910: 
    retproc                   
End


Proc pc_genmcl.px_ixorto:
    param          pc_genmcl.px_ixorto.p u64 
    local          pc_genmcl.px_ixorto.ax u64 
    local          pc_genmcl.px_ixorto.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_ixorto.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6912      i64 0
    push           4          i64 
    casejumpeq     #6912      i64 0
    popstack                  i64 
    jump           #6913      
#6912: 
    setargs                   2 0
    push           41         i64 
    push           pc_genmcl.px_ixorto.p u64 
    callproc       &pc_genmcl.dobinto_int 
    jump           #6914      
#6913: 
    setargs                   2 0
    push           pc_genmcl.px_ixorto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "ixorto:"  u64 
    callproc       &pc_libmcl.merrort 
#6914: 
#6915: 
    retproc                   
End


Proc pc_genmcl.px_shlto:
    param          pc_genmcl.px_shlto.p u64 
    procentry                 
    push           pc_genmcl.px_shlto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           9          i64 
    casejumpeq     #6917      i64 0
    push           4          i64 
    casejumpeq     #6917      i64 0
    popstack                  i64 
    jump           #6918      
#6917: 
    setargs                   2 0
    push           44         i64 
    push           pc_genmcl.px_shlto.p u64 
    callproc       &pc_genmcl.do_shiftnto 
    jump           #6919      
#6918: 
    setargs                   2 0
    push           pc_genmcl.px_shlto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "shlto:"   u64 
    callproc       &pc_libmcl.merrort 
#6919: 
#6920: 
    retproc                   
End


Proc pc_genmcl.px_shrto:
    param          pc_genmcl.px_shrto.p u64 
    procentry                 
    push           pc_genmcl.px_shrto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           9          i64 
    casejumpeq     #6922      i64 0
    push           4          i64 
    casejumpeq     #6923      i64 0
    popstack                  i64 
    jump           #6924      
#6922: 
    setargs                   2 0
    push           45         i64 
    push           pc_genmcl.px_shrto.p u64 
    callproc       &pc_genmcl.do_shiftnto 
    jump           #6925      
#6923: 
    setargs                   2 0
    push           46         i64 
    push           pc_genmcl.px_shrto.p u64 
    callproc       &pc_genmcl.do_shiftnto 
    jump           #6925      
#6924: 
    setargs                   2 0
    push           pc_genmcl.px_shrto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "shrto:"   u64 
    callproc       &pc_libmcl.merrort 
#6925: 
#6926: 
    retproc                   
End


Proc pc_genmcl.px_minto:
    param          pc_genmcl.px_minto.p u64 
    procentry                 
    push           pc_genmcl.px_minto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           9          i64 
    casejumpeq     #6928      i64 0
    push           4          i64 
    casejumpeq     #6929      i64 0
    push           12         i64 
    casejumpeq     #6930      i64 0
    push           11         i64 
    casejumpeq     #6931      i64 0
    popstack                  i64 
    jump           #6932      
#6928: 
    setargs                   1 0
    push           14         i64 
    callproc       &pc_genmcl.domaxto_int 
    jump           #6933      
#6929: 
    setargs                   1 0
    push           6          i64 
    callproc       &pc_genmcl.domaxto_int 
    jump           #6933      
#6930: 
    setargs                   1 0
    push           6          i64 
    callproc       &pc_genmcl.domaxto_r64 
    jump           #6933      
#6931: 
    setargs                   1 0
    push           6          i64 
    callproc       &pc_genmcl.domaxto_r32 
    jump           #6933      
#6932: 
    setargs                   2 0
    push           pc_genmcl.px_minto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "minto:"   u64 
    callproc       &pc_libmcl.merrort 
#6933: 
#6934: 
    retproc                   
End


Proc pc_genmcl.px_maxto:
    param          pc_genmcl.px_maxto.p u64 
    procentry                 
    push           pc_genmcl.px_maxto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           9          i64 
    casejumpeq     #6936      i64 0
    push           4          i64 
    casejumpeq     #6937      i64 0
    push           12         i64 
    casejumpeq     #6938      i64 0
    push           11         i64 
    casejumpeq     #6939      i64 0
    popstack                  i64 
    jump           #6940      
#6936: 
    setargs                   1 0
    push           13         i64 
    callproc       &pc_genmcl.domaxto_int 
    jump           #6941      
#6937: 
    setargs                   1 0
    push           3          i64 
    callproc       &pc_genmcl.domaxto_int 
    jump           #6941      
#6938: 
    setargs                   1 0
    push           3          i64 
    callproc       &pc_genmcl.domaxto_r64 
    jump           #6941      
#6939: 
    setargs                   1 0
    push           3          i64 
    callproc       &pc_genmcl.domaxto_r32 
    jump           #6941      
#6940: 
    setargs                   2 0
    push           pc_genmcl.px_maxto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "maxto:"   u64 
    callproc       &pc_libmcl.merrort 
#6941: 
#6942: 
    retproc                   
End


Proc pc_genmcl.px_andlto:
    param          pc_genmcl.px_andlto.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_andlto.p u64 
    callproc       &pc_genmcl.unimpl 
#6944: 
    retproc                   
End


Proc pc_genmcl.px_orlto:
    param          pc_genmcl.px_orlto.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_orlto.p u64 
    callproc       &pc_genmcl.unimpl 
#6946: 
    retproc                   
End


Proc pc_genmcl.px_addrefoffto:
    param          pc_genmcl.px_addrefoffto.p u64 
    local          pc_genmcl.px_addrefoffto.scale i64 
    local          pc_genmcl.px_addrefoffto.extra i64 
    local          pc_genmcl.px_addrefoffto.offset i64 
    local          pc_genmcl.px_addrefoffto.ax u64 
    local          pc_genmcl.px_addrefoffto.bx u64 
    local          pc_genmcl.px_addrefoffto.rx u64 
    local          pc_genmcl.px_addrefoffto.reg i64 
    local          pc_genmcl.px_addrefoffto.size i64 
    procentry                 
    push           pc_genmcl.px_addrefoffto.p u64 
    push           16         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_addrefoffto.scale i64 
    push           pc_genmcl.px_addrefoffto.p u64 
    push           20         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_addrefoffto.extra i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    push           pc_genmcl.px_addrefoffto.scale i64 
    mul                       i64 
    push           pc_genmcl.px_addrefoffto.extra i64 
    add                       i64 
    pop            pc_genmcl.px_addrefoffto.offset i64 
    setargs                   1 0
    push           2          i64 
    callfn         &pc_libmcl.ismemaddr i64 
    jumpfalse      #6948      i64 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    pop            pc_genmcl.px_addrefoffto.ax u64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    pop            pc_genmcl.px_addrefoffto.reg i64 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_addrefoffto.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_genmcl.px_addrefoffto.rx u64 
    setargs                   3 0
    push           pc_genmcl.px_addrefoffto.ax u64 
    push           pc_genmcl.px_addrefoffto.rx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #6949      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_addrefoffto.offset i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_addrefoffto.rx u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6950      
#6949: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_addrefoffto.bx u64 
    setargs                   2 0
    push           pc_genmcl.px_addrefoffto.scale i64 
    push           pc_genmcl.px_addrefoffto.bx u64 
    callproc       &pc_genmcl.mulimm 
    setargs                   3 0
    push           pc_genmcl.px_addrefoffto.bx u64 
    push           pc_genmcl.px_addrefoffto.rx u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
#6950: 
    setargs                   3 0
    push           pc_genmcl.px_addrefoffto.rx u64 
    push           pc_genmcl.px_addrefoffto.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_genmcl.px_addrefoffto.reg i64 
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_genmcl.px_addrefoffto.reg i64 
    popptroff                 u8 1 -1
    jump           #6951      
#6948: 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.px_addrefoffto.ax u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #6952      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_addrefoffto.offset i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_addrefoffto.ax u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6953      
#6952: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_addrefoffto.bx u64 
    setargs                   2 0
    push           pc_genmcl.px_addrefoffto.scale i64 
    push           pc_genmcl.px_addrefoffto.bx u64 
    callproc       &pc_genmcl.mulimm 
    setargs                   3 0
    push           pc_genmcl.px_addrefoffto.bx u64 
    push           pc_genmcl.px_addrefoffto.ax u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
#6953: 
#6951: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6954: 
    retproc                   
End


Proc pc_genmcl.px_subrefoffto:
    param          pc_genmcl.px_subrefoffto.p u64 
    local          pc_genmcl.px_subrefoffto.scale i64 
    local          pc_genmcl.px_subrefoffto.extra i64 
    local          pc_genmcl.px_subrefoffto.ax u64 
    local          pc_genmcl.px_subrefoffto.bx u64 
    procentry                 
    push           pc_genmcl.px_subrefoffto.p u64 
    push           16         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_subrefoffto.scale i64 
    push           pc_genmcl.px_subrefoffto.p u64 
    push           20         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_subrefoffto.extra i64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.px_subrefoffto.ax u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #6956      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    push           pc_genmcl.px_subrefoffto.scale i64 
    mul                       i64 
    push           pc_genmcl.px_subrefoffto.extra i64 
    add                       i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_subrefoffto.ax u64 
    push           30         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6957      
#6956: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_subrefoffto.bx u64 
    setargs                   2 0
    push           pc_genmcl.px_subrefoffto.scale i64 
    push           pc_genmcl.px_subrefoffto.bx u64 
    callfn         &pc_genmcl.scaleindex i64 
    pop            pc_genmcl.px_subrefoffto.scale i64 
    push           pc_genmcl.px_subrefoffto.scale i64 
    push           1          i64 
    jumple         #6958      i64 
    setargs                   2 0
    push           pc_genmcl.px_subrefoffto.scale i64 
    push           pc_genmcl.px_subrefoffto.bx u64 
    callproc       &pc_genmcl.mulimm 
#6958: 
    setargs                   3 0
    push           pc_genmcl.px_subrefoffto.bx u64 
    push           pc_genmcl.px_subrefoffto.ax u64 
    push           30         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_genmcl.px_subrefoffto.extra i64 
    jumpfalse      #6959      i64 
    setargs                   2 0
    push           ""         u64 
    push           "SUBTOREF/EXTRA" u64 
    callproc       &pc_libmcl.merror 
#6959: 
#6957: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6960: 
    retproc                   
End


Proc pc_genmcl.px_negto:
    param          pc_genmcl.px_negto.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_negto.p u64 
    callproc       &pc_genmcl.unimpl 
#6962: 
    retproc                   
End


Proc pc_genmcl.px_absto:
    param          pc_genmcl.px_absto.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_absto.p u64 
    callproc       &pc_genmcl.unimpl 
#6964: 
    retproc                   
End


Proc pc_genmcl.px_inotto:
    param          pc_genmcl.px_inotto.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_inotto.p u64 
    callproc       &pc_genmcl.unimpl 
#6966: 
    retproc                   
End


Proc pc_genmcl.px_notlto:
    param          pc_genmcl.px_notlto.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_notlto.p u64 
    callproc       &pc_genmcl.unimpl 
#6968: 
    retproc                   
End


Proc pc_genmcl.px_istruelto:
    param          pc_genmcl.px_istruelto.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_istruelto.p u64 
    callproc       &pc_genmcl.unimpl 
#6970: 
    retproc                   
End


Proc pc_genmcl.px_typepun:
    param          pc_genmcl.px_typepun.p u64 
    local          pc_genmcl.px_typepun.ax u64 
    local          pc_genmcl.px_typepun.bx u64 
    local          pc_genmcl.px_typepun.cx u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_typepun.bx u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_typepun.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6972      i64 0
    push           3          i64 
    casejumpeq     #6973      i64 0
    push           4          i64 
    casejumpeq     #6974      i64 0
    popstack                  i64 
    jump           #6975      
#6972: 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           2          i64 
    casejumpeq     #6976      i64 0
    push           1          i64 
    casejumpeq     #6977      i64 0
    popstack                  i64 
    jump           #6978      
#6976: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_d64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_typepun.ax u64 
    setargs                   3 0
    push           pc_genmcl.px_typepun.bx u64 
    push           pc_genmcl.px_typepun.ax u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #6979      
#6977: 
    jump           #6979      
#6978: 
    jump           #6980      
#6979: 
    jump           #6981      
#6973: 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           1          i64 
    casejumpeq     #6982      i64 0
    popstack                  i64 
    jump           #6983      
#6982: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_x64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_typepun.ax u64 
    setargs                   3 0
    push           pc_genmcl.px_typepun.bx u64 
    push           pc_genmcl.px_typepun.ax u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #6984      
#6983: 
    jump           #6980      
#6984: 
    jump           #6981      
#6974: 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           3          i64 
    casejumpeq     #6985      i64 0
    push           1          i64 
    casejumpeq     #6986      i64 0
    popstack                  i64 
    jump           #6987      
#6985: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_d64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_typepun.ax u64 
    setargs                   2 0
    push           4          i64 
    push           pc_genmcl.px_typepun.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    pop            pc_genmcl.px_typepun.cx u64 
    setargs                   3 0
    push           pc_genmcl.px_typepun.bx u64 
    push           pc_genmcl.px_typepun.cx u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   3 0
    push           pc_genmcl.px_typepun.cx u64 
    push           pc_genmcl.px_typepun.ax u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_genmcl.px_typepun.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #6988      i64 
    push           19         i64 
    resetmult                 
    jump           #6989      
#6988: 
    push           20         i64 
    endmult                   
#6989: 
    callproc       &pc_libmcl.genmc 
    jump           #6990      
#6986: 
    jump           #6990      
#6987: 
    jump           #6980      
#6990: 
    jump           #6981      
#6975: 
!error::
#6980: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "PSTDNAMES[P.MODE]=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pc_tables.pstdnames 
    push           pc_genmcl.px_typepun.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "FMTNAMES[PCLSTACK[1].FMT]=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pci_mcl.fmtnames 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "TYPEPUN"  u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           ""         u64 
    push           "TYPEPUN"  u64 
    callproc       &pc_libmcl.merror 
#6981: 
#6991: 
    retproc                   
End


Proc pc_genmcl.px_softconv:
    param          pc_genmcl.px_softconv.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_softconv.p u64 
    callproc       &pc_genmcl.unimpl 
#6993: 
    retproc                   
End


Proc pc_genmcl.px_widen:
    param          pc_genmcl.px_widen.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_widen.p u64 
    callproc       &pc_genmcl.unimpl 
#6995: 
    retproc                   
End


Proc pc_genmcl.px_narrow:
    param          pc_genmcl.px_narrow.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_narrow.p u64 
    callproc       &pc_genmcl.unimpl 
#6997: 
    retproc                   
End


Proc pc_genmcl.px_float:
    param          pc_genmcl.px_float.p u64 
    local          pc_genmcl.px_float.ax u64 
    local          pc_genmcl.px_float.fx u64 
    local          pc_genmcl.px_float.lab i64 
    local          pc_genmcl.px_float.lab2 i64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_float.ax u64 
    push           pc_genmcl.px_float.p u64 
    push           16         
    pushptroff                i32 1 0
    push           9          i64 
    casejumpeq     #6999      i64 0
    push           4          i64 
    casejumpeq     #7000      i64 0
    popstack                  i64 
    jump           #7001      
#6999: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_x64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_float.fx u64 
    setargs                   3 0
    push           pc_genmcl.px_float.ax u64 
    push           pc_genmcl.px_float.fx u64 
    push           85         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    jump           #7002      
#7000: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_x64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_float.fx u64 
    setargs                   0 0
    callfn         &pc_libmcl.mcreatefwdlabel i64 
    pop            pc_genmcl.px_float.lab i64 
    setargs                   0 0
    callfn         &pc_libmcl.mcreatefwdlabel i64 
    pop            pc_genmcl.px_float.lab2 i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           0          i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_float.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_float.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           12         i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.px_float.ax u64 
    push           pc_genmcl.px_float.fx u64 
    push           85         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_float.lab2 i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           26         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           pc_genmcl.px_float.lab i64 
    callproc       &pc_libmcl.mdefinefwdlabel 
    push           pci_mcl.labmask63 i64 
    jumptrue       #7003      i64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pci_mcl.labmask63 i64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pci_mcl.laboffset64 i64 
#7003: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.labmask63 i64 
    callfn         &pc_libmcl.mgenlabelmem u64 
    push           pc_genmcl.px_float.ax u64 
    push           39         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.px_float.ax u64 
    push           pc_genmcl.px_float.fx u64 
    push           85         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.laboffset64 i64 
    callfn         &pc_libmcl.mgenlabelmem u64 
    push           pc_genmcl.px_float.fx u64 
    push           68         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           pc_genmcl.px_float.lab2 i64 
    callproc       &pc_libmcl.mdefinefwdlabel 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    jump           #7002      
#7001: 
    setargs                   2 0
    push           pc_genmcl.px_float.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "float"    u64 
    callproc       &pc_libmcl.merrort 
#7002: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7004: 
    retproc                   
End


Proc pc_genmcl.px_fix:
    param          pc_genmcl.px_fix.p u64 
    local          pc_genmcl.px_fix.fx u64 
    local          pc_genmcl.px_fix.ax u64 
    local          pc_genmcl.px_fix.newmode i64 
    local          pc_genmcl.px_fix.oldmode i64 
    procentry                 
    push           pc_genmcl.px_fix.p u64 
    push           3          
    pushptroff                u8 1 0
    pop            pc_genmcl.px_fix.newmode i64 
    push           pc_genmcl.px_fix.p u64 
    push           16         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_fix.oldmode i64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_fix.newmode i64 
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #7006      i64 0
    popstack                  i64 
    jump           #7007      
#7006: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_fix.fx u64 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_d64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_fix.ax u64 
    setargs                   3 0
    push           pc_genmcl.px_fix.fx u64 
    push           pc_genmcl.px_fix.ax u64 
    startmult                 
    push           pc_genmcl.px_fix.oldmode i64 
    push           12         i64 
    jumpne         #7008      i64 
    push           83         i64 
    resetmult                 
    jump           #7009      
#7008: 
    push           82         i64 
    endmult                   
#7009: 
    callproc       &pc_libmcl.genmc 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #7010      
#7007: 
    setargs                   2 0
    push           pc_genmcl.px_fix.newmode i64 
    push           "fix->"    u64 
    callproc       &pc_libmcl.merrort 
#7010: 
#7011: 
    retproc                   
End


Proc pc_genmcl.px_truncate:
    param          pc_genmcl.px_truncate.p u64 
    local          pc_genmcl.px_truncate.ax u64 
    local          pc_genmcl.px_truncate.mask i64 
    procentry                 
    push           &pc_tables.psize 
    push           pc_genmcl.px_truncate.p u64 
    push           16         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #7013      i64 0
    push           2          i64 
    casejumpeq     #7014      i64 0
    push           4          i64 
    casejumpeq     #7015      i64 0
    popstack                  i64 
    jump           #7016      
#7013: 
    push           255        i64 
    pop            pc_genmcl.px_truncate.mask i64 
    jump           #7017      
#7014: 
    push           65535      i64 
    pop            pc_genmcl.px_truncate.mask i64 
    jump           #7017      
#7015: 
    push           4294967295 i64 
    pop            pc_genmcl.px_truncate.mask i64 
    jump           #7017      
#7016: 
#7017: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_truncate.ax u64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_truncate.mask i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_truncate.ax u64 
    push           39         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           &pc_tables.psize 
    push           pc_genmcl.px_truncate.p u64 
    push           16         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    push           pc_genmcl.px_truncate.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           pc_genmcl.px_truncate.ax u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_genmcl.px_truncate.p u64 
    push           16         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    jumpfalse      #7018      i64 
    push           19         i64 
    resetmult                 
    jump           #7019      
#7018: 
    push           20         i64 
    endmult                   
#7019: 
    callproc       &pc_libmcl.genmc 
#7020: 
    retproc                   
End


Proc pc_genmcl.px_fwiden:
    param          pc_genmcl.px_fwiden.p u64 
    local          pc_genmcl.px_fwiden.fx u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_fwiden.fx u64 
    setargs                   3 0
    push           pc_genmcl.px_fwiden.fx u64 
    push           pc_genmcl.px_fwiden.fx u64 
    push           87         i64 
    callproc       &pc_libmcl.genmc 
    push           2          i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
#7022: 
    retproc                   
End


Proc pc_genmcl.px_fnarrow:
    param          pc_genmcl.px_fnarrow.p u64 
    local          pc_genmcl.px_fnarrow.ax u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_fnarrow.ax u64 
    setargs                   3 0
    push           pc_genmcl.px_fnarrow.ax u64 
    push           pc_genmcl.px_fnarrow.ax u64 
    push           86         i64 
    callproc       &pc_libmcl.genmc 
    push           3          i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
#7024: 
    retproc                   
End


Proc pc_genmcl.px_softtruncw:
    param          pc_genmcl.px_softtruncw.p u64 
    local          pc_genmcl.px_softtruncw.ax u64 
    local          pc_genmcl.px_softtruncw.bx u64 
    local          pc_genmcl.px_softtruncw.bx2 u64 
    local          pc_genmcl.px_softtruncw.lx u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_softtruncw.ax u64 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.unsetwideopnd 
#7026: 
    retproc                   
End


Proc pc_genmcl.px_widenw:
    param          pc_genmcl.px_widenw.p u64 
    local          pc_genmcl.px_widenw.ax u64 
    local          pc_genmcl.px_widenw.bx u64 
    local          pc_genmcl.px_widenw.bx2 u64 
    local          pc_genmcl.px_widenw.lx u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_widenw.ax u64 
    setargs                   0 0
    callfn         &pc_stackmcl.genopnd_d64 u64 
    pop            pc_genmcl.px_widenw.bx u64 
    setargs                   2 0
    push           4          i64 
    push           pc_genmcl.px_widenw.bx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    pop            pc_genmcl.px_widenw.bx2 u64 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    push           &pc_tables.psigned 
    push           pc_genmcl.px_widenw.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #7028      i64 
    setargs                   3 0
    push           pc_genmcl.px_widenw.bx2 u64 
    push           pc_genmcl.px_widenw.bx2 u64 
    push           41         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           0          i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_widenw.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    callfn         &pc_libmcl.mgenlabel u64 
    store          pc_genmcl.px_widenw.lx u64 
    push           13         i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.px_widenw.bx u64 
    push           52         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.px_widenw.lx u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    jump           #7029      
#7028: 
    setargs                   3 0
    push           pc_genmcl.px_widenw.bx2 u64 
    push           pc_genmcl.px_widenw.bx2 u64 
    push           41         i64 
    callproc       &pc_libmcl.genmc 
#7029: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.setwideopnd 
#7030: 
    retproc                   
End


Proc pc_genmcl.px_len:
    param          pc_genmcl.px_len.p u64 
    procentry                 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.unsetwideopnd 
#7032: 
    retproc                   
End


Proc pc_genmcl.px_lwb:
    param          pc_genmcl.px_lwb.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_lwb.p u64 
    callproc       &pc_genmcl.unimpl 
#7034: 
    retproc                   
End


Proc pc_genmcl.px_upb:
    param          pc_genmcl.px_upb.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_upb.p u64 
    callproc       &pc_genmcl.unimpl 
#7036: 
    retproc                   
End


Proc pc_genmcl.px_bounds:
    param          pc_genmcl.px_bounds.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_bounds.p u64 
    callproc       &pc_genmcl.unimpl 
#7038: 
    retproc                   
End


Proc pc_genmcl.px_lenstr:
    param          pc_genmcl.px_lenstr.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_lenstr.p u64 
    callproc       &pc_genmcl.unimpl 
#7040: 
    retproc                   
End


Proc pc_genmcl.px_bitwidth:
    param          pc_genmcl.px_bitwidth.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_bitwidth.p u64 
    callproc       &pc_genmcl.unimpl 
#7042: 
    retproc                   
End


Proc pc_genmcl.px_bytesize:
    param          pc_genmcl.px_bytesize.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_bytesize.p u64 
    callproc       &pc_genmcl.unimpl 
#7044: 
    retproc                   
End


Proc pc_genmcl.px_bytes:
    param          pc_genmcl.px_bytes.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_bytes.p u64 
    callproc       &pc_genmcl.unimpl 
#7046: 
    retproc                   
End


Proc pc_genmcl.px_minvalue:
    param          pc_genmcl.px_minvalue.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_minvalue.p u64 
    callproc       &pc_genmcl.unimpl 
#7048: 
    retproc                   
End


Proc pc_genmcl.px_maxvalue:
    param          pc_genmcl.px_maxvalue.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_maxvalue.p u64 
    callproc       &pc_genmcl.unimpl 
#7050: 
    retproc                   
End


Proc pc_genmcl.px_typestr:
    param          pc_genmcl.px_typestr.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_typestr.p u64 
    callproc       &pc_genmcl.unimpl 
#7052: 
    retproc                   
End


Proc pc_genmcl.px_error:
    param          pc_genmcl.px_error.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_error.p u64 
    callproc       &pc_genmcl.unimpl 
#7054: 
    retproc                   
End


Proc pc_genmcl.px_arraytoslice:
    param          pc_genmcl.px_arraytoslice.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_arraytoslice.p u64 
    callproc       &pc_genmcl.unimpl 
#7056: 
    retproc                   
End


Proc pc_genmcl.px_ichartoslice:
    param          pc_genmcl.px_ichartoslice.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_ichartoslice.p u64 
    callproc       &pc_genmcl.unimpl 
#7058: 
    retproc                   
End


Proc pc_genmcl.px_softtruncshort:
    param          pc_genmcl.px_softtruncshort.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_softtruncshort.p u64 
    callproc       &pc_genmcl.unimpl 
#7060: 
    retproc                   
End


Proc pc_genmcl.px_charaxtoichar:
    param          pc_genmcl.px_charaxtoichar.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_charaxtoichar.p u64 
    callproc       &pc_genmcl.unimpl 
#7062: 
    retproc                   
End


Proc pc_genmcl.px_sliceptr:
    param          pc_genmcl.px_sliceptr.p u64 
    procentry                 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.unsetwideopnd 
#7064: 
    retproc                   
End


Proc pc_genmcl.px_startmult:
    param          pc_genmcl.px_startmult.p u64 
    procentry                 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.pushallopnds 
#7066: 
    retproc                   
End


Proc pc_genmcl.px_resetmult:
    param          pc_genmcl.px_resetmult.p u64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           3          
    pushptroff                u8 1 0
    jumpfalse      #7068      i64 
    setargs                   2 0
    push           ""         u64 
    push           "RESETMULT/XREG" u64 
    callproc       &pc_libmcl.merror 
    jump           #7069      
#7068: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.movetoreg 
#7069: 
    push           pc_genmcl.px_resetmult.p u64 
    push           1          
    pushptroff                u8 1 0
    push           193        i64 
    jumpne         #7070      i64 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7070: 
#7071: 
    retproc                   
End


Proc pc_genmcl.px_endmult:
    param          pc_genmcl.px_endmult.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_endmult.p u64 
    callproc       &pc_genmcl.px_resetmult 
#7073: 
    retproc                   
End


Proc pc_genmcl.px_setret:
    param          pc_genmcl.px_setret.p u64 
    procentry                 
    setargs                   2 0
    push           1          i64 
    push           1          i64 
    callproc       &pc_genmcl.do_setret 
    push           0          i64 
    push           &pci_mcl.regset 
    push           1          i64 
    popptroff                 u8 1 -1
    push           0          i64 
    push           &pci_mcl.xregset 
    push           1          i64 
    popptroff                 u8 1 -1
#7075: 
    retproc                   
End


Proc pc_genmcl.px_setretmult:
    param          pc_genmcl.px_setretmult.p u64 
    local          pc_genmcl.px_setretmult.k i64 
    local          pc_genmcl.px_setretmult.wide i64 
    local          pc_genmcl.px_setretmult.av_1 i64 
    local          pc_genmcl.px_setretmult.i i64 
    procentry                 
    push           0          i64 
    pop            pc_genmcl.px_setretmult.k i64 
#7077: 
    push           1          i64 
    pop            pc_genmcl.px_setretmult.i i64 
    push           pc_genmcl.px_setretmult.p u64 
    push           16         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_setretmult.av_1 i64 
    push           pc_genmcl.px_setretmult.av_1 i64 
    push           1          i64 
    jumplt         #7078      i64 
#7079: 
    push           &pc_genmcl.px_setretmult.k 
    incr                      i64 1
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           4          
    pushptroff                u8 1 0
    pop            pc_genmcl.px_setretmult.wide i64 
    setargs                   2 0
    push           &pc_genmcl.multxregs 
    push           pc_genmcl.px_setretmult.k i64 
    pushptroff                i64 8 -8
    push           &pc_genmcl.multregs 
    push           pc_genmcl.px_setretmult.k i64 
    pushptroff                i64 8 -8
    callproc       &pc_genmcl.do_setret 
#7080: 
    forup          #7079      i64 1
    opnd           pc_genmcl.px_setretmult.i 
    opnd           pc_genmcl.px_setretmult.av_1 
#7078: 
#7081: 
    push           1          i64 
    pop            pc_genmcl.px_setretmult.i i64 
    push           pc_genmcl.px_setretmult.k i64 
    push           1          i64 
    jumplt         #7082      i64 
#7083: 
    push           0          i64 
    push           &pci_mcl.xregset 
    push           &pc_genmcl.multxregs 
    push           pc_genmcl.px_setretmult.i i64 
    pushptroff                i64 8 -8
    storeptroff               u8 1 -1
    push           &pci_mcl.regset 
    push           &pc_genmcl.multregs 
    push           pc_genmcl.px_setretmult.i i64 
    pushptroff                i64 8 -8
    popptroff                 u8 1 -1
#7084: 
    forup          #7083      i64 1
    opnd           pc_genmcl.px_setretmult.i 
    opnd           pc_genmcl.px_setretmult.k 
#7082: 
#7085: 
    retproc                   
End


Proc pc_genmcl.px_setargs:
    param          pc_genmcl.px_setargs.p u64 
    local          pc_genmcl.px_setargs.nslots i64 
    local          pc_genmcl.px_setargs.shadow i64 
    local          pc_genmcl.px_setargs.align i64 
    local          pc_genmcl.px_setargs.nargs i64 
    local          pc_genmcl.px_setargs.opcode i64 
    local          pc_genmcl.px_setargs.nvars i64 
    procentry                 
    push           pc_genmcl.px_setargs.p u64 
    jumpfalse      #7087      u64 
    push           pc_genmcl.px_setargs.p u64 
    push           16         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_setargs.nargs i64 
    push           pc_genmcl.px_setargs.p u64 
    push           20         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_setargs.nvars i64 
    push           pc_genmcl.px_setargs.p u64 
    push           1          
    pushptroff                u8 1 0
    pop            pc_genmcl.px_setargs.opcode i64 
    jump           #7088      
#7087: 
    push           pci_mcl.sa_nargs i64 
    pop            pc_genmcl.px_setargs.nargs i64 
    push           0          i64 
    pop            pc_genmcl.px_setargs.nvars i64 
    push           0          i64 
    pop            pc_genmcl.px_setargs.opcode i64 
#7088: 
    push           0          i64 
    pop            pc_genmcl.px_setargs.nslots i64 
    push           0          i64 
    pop            pc_genmcl.px_setargs.shadow i64 
    push           0          i64 
    pop            pc_genmcl.px_setargs.align i64 
    push           pc_genmcl.px_setargs.opcode i64 
    push           197        i64 
    casejumpeq     #7089      i64 0
    popstack                  i64 
    jump           #7090      
#7089: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.saveallopnds 
    jump           #7091      
#7090: 
    setargs                   1 0
    push           pc_genmcl.px_setargs.nargs i64 
    push           1          i64 
    add                       i64 
    callproc       &pc_stackmcl.saveallopnds 
#7091: 
    push           pc_genmcl.px_setargs.nargs i64 
    push           4          i64 
    jumpgt         #7092      i64 
    push           pci_mcl.mstackdepth i64 
    push           0          i64 
    jumpne         #7093      i64 
    jump           #7094      
#7093: 
    push           1          i64 
    pop            pc_genmcl.px_setargs.shadow i64 
    push           pci_mcl.mstackdepth i64 
    push           0          i64 
    dotindex                  i64 
    pop            pc_genmcl.px_setargs.align i64 
    push           4          i64 
    pop            pc_genmcl.px_setargs.nslots i64 
#7094: 
    jump           #7095      
#7092: 
    push           1          i64 
    pop            pc_genmcl.px_setargs.shadow i64 
    push           pc_genmcl.px_setargs.nargs i64 
    pop            pc_genmcl.px_setargs.nslots i64 
    push           pci_mcl.mstackdepth i64 
    push           pc_genmcl.px_setargs.nslots i64 
    add                       i64 
    push           0          i64 
    dotindex                  i64 
    pop            pc_genmcl.px_setargs.align i64 
#7095: 
    push           &pc_genmcl.px_setargs.nslots 
    push           pc_genmcl.px_setargs.align i64 
    addto                     i64 
    push           pc_genmcl.px_setargs.align i64 
    jumpfalse      #7096      i64 
    push           pc_genmcl.px_setargs.opcode i64 
    push           197        i64 
    jumpne         #7097      i64 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.pushslots 
    push           0          i64 
    pop            pc_genmcl.px_setargs.align i64 
#7097: 
#7096: 
    push           pci_mcl.ncalldepth i64 
    push           16         i64 
    jumplt         #7098      i64 
    setargs                   2 0
    push           ""         u64 
    push           "Too many nested calls" u64 
    callproc       &pc_libmcl.merror 
#7098: 
    push           &pci_mcl.ncalldepth 
    incr                      i64 1
    push           pci_mcl.ncalldepth i64 
    push           1          i64 
    jumpge         #7099      i64 
    setargs                   1 0
    push           "CALLDEPTH?" u64 
    callproc       &mlibp.abortprogram 
#7099: 
    push           pc_genmcl.px_setargs.nargs i64 
    push           &pci_mcl.callargs 
    push           pci_mcl.ncalldepth i64 
    popptroff                 u8 1 -1
    push           pc_genmcl.px_setargs.nvars i64 
    push           &pci_mcl.callnvars 
    push           pci_mcl.ncalldepth i64 
    popptroff                 u8 1 -1
    push           pc_genmcl.px_setargs.nslots i64 
    push           &pci_mcl.callslots 
    push           pci_mcl.ncalldepth i64 
    popptroff                 i64 8 -8
    push           pc_genmcl.px_setargs.shadow i64 
    push           &pci_mcl.callshadow 
    push           pci_mcl.ncalldepth i64 
    popptroff                 i64 8 -8
    push           pc_genmcl.px_setargs.align i64 
    push           &pci_mcl.callalign 
    push           pci_mcl.ncalldepth i64 
    popptroff                 u8 1 -1
#7100: 
    retproc                   
End


Proc pc_genmcl.px_duplstack:
    param          pc_genmcl.px_duplstack.p u64 
    local          pc_genmcl.px_duplstack.ax u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_duplstack.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           5          i64 
    jumplt         #7102      i64 
    setargs                   2 0
    push           pc_genmcl.px_duplstack.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "duplstack" u64 
    callproc       &pc_libmcl.merrort 
#7102: 
    setargs                   0 0
    callproc       &pc_stackmcl.duploperand 
#7103: 
    retproc                   
End


Proc pc_genmcl.px_swapstack:
    param          pc_genmcl.px_swapstack.p u64 
    procentry                 
    setargs                   2 0
    push           pc_genmcl.px_swapstack.p u64 
    push           16         
    pushptroff                i32 1 0
    push           1          i64 
    add                       i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
#7105: 
    retproc                   
End


Proc pc_genmcl.px_getnprocs:
    param          pc_genmcl.px_getnprocs.p u64 
    procentry                 
    setargs                   0 0
    callproc       &pc_genmcl.dosetfntable 
    setargs                   2 0
    push           0          i64 
    push           pci_mcl.lab_funcnprocs i64 
    callproc       &pc_stackmcl.addlabel 
#7107: 
    retproc                   
End


Proc pc_genmcl.px_getprocname:
    param          pc_genmcl.px_getprocname.p u64 
    local          pc_genmcl.px_getprocname.ax u64 
    procentry                 
    setargs                   0 0
    callproc       &pc_genmcl.dosetfntable 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_getprocname.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #7109      i64 0
    popstack                  i64 
    jump           #7110      
#7109: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_getprocname.ax u64 
    setargs                   3 0
    setargs                   7 0
    push           0          u64 
    push           pci_mcl.lab_funcnametable i64 
    push           0          i64 
    push           -8         i64 
    push           8          i64 
    push           pc_genmcl.px_getprocname.ax u64 
    push           10         
    pushptroff                u8 1 0
    push           0          i64 
    callfn         &pc_libmcl.mgenindex u64 
    push           pc_genmcl.px_getprocname.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #7111      
#7110: 
    setargs                   2 0
    push           pc_genmcl.px_getprocname.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "gpn"      u64 
    callproc       &pc_libmcl.merrort 
#7111: 
#7112: 
    retproc                   
End


Proc pc_genmcl.px_getprocaddr:
    param          pc_genmcl.px_getprocaddr.p u64 
    local          pc_genmcl.px_getprocaddr.ax u64 
    procentry                 
    setargs                   0 0
    callproc       &pc_genmcl.dosetfntable 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_getprocaddr.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #7114      i64 0
    popstack                  i64 
    jump           #7115      
#7114: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_getprocaddr.ax u64 
    setargs                   3 0
    setargs                   7 0
    push           0          u64 
    push           pci_mcl.lab_funcaddrtable i64 
    push           0          i64 
    push           -8         i64 
    push           8          i64 
    push           pc_genmcl.px_getprocaddr.ax u64 
    push           10         
    pushptroff                u8 1 0
    push           0          i64 
    callfn         &pc_libmcl.mgenindex u64 
    push           pc_genmcl.px_getprocaddr.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #7116      
#7115: 
    setargs                   2 0
    push           pc_genmcl.px_getprocaddr.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "gpa"      u64 
    callproc       &pc_libmcl.merrort 
#7116: 
#7117: 
    retproc                   
End


Proc pc_genmcl.px_last:
    param          pc_genmcl.px_last.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_last.p u64 
    callproc       &pc_genmcl.unimpl 
#7119: 
    retproc                   
End


Proc pc_genmcl.dobin_float:
    param          pc_genmcl.dobin_float.opc i64 
    local          pc_genmcl.dobin_float.ax u64 
    local          pc_genmcl.dobin_float.bx u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dobin_float.ax u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dobin_float.bx u64 
    setargs                   3 0
    push           pc_genmcl.dobin_float.bx u64 
    push           pc_genmcl.dobin_float.ax u64 
    push           pc_genmcl.dobin_float.opc i64 
    callproc       &pc_libmcl.genmc 
#7121: 
    retproc                   
End


Proc pc_genmcl.do_pushparams: i64
    param          pc_genmcl.do_pushparams.p u64 
    param          pc_genmcl.do_pushparams.isptr i64 
    local          pc_genmcl.do_pushparams.pushedslots i64 
    local          pc_genmcl.do_pushparams.nparams i64 
    local          pc_genmcl.do_pushparams.nvars i64 
    local          pc_genmcl.do_pushparams.nargs i64 
    procentry                 
    push           pc_genmcl.do_pushparams.p u64 
    jumpfalse      #7123      u64 
    push           &pci_mcl.callargs 
    push           pci_mcl.ncalldepth i64 
    pushptroff                u8 1 -1
    pop            pc_genmcl.do_pushparams.nargs i64 
    push           &pci_mcl.callnvars 
    push           pci_mcl.ncalldepth i64 
    pushptroff                u8 1 -1
    pop            pc_genmcl.do_pushparams.nvars i64 
    jump           #7124      
#7123: 
    push           pci_mcl.sa_nargs i64 
    pop            pc_genmcl.do_pushparams.nargs i64 
    push           0          i64 
    pop            pc_genmcl.do_pushparams.isptr i64 
    push           0          i64 
    pop            pc_genmcl.do_pushparams.nvars i64 
#7124: 
    push           pc_genmcl.do_pushparams.nargs i64 
    push           pci_mcl.inf_maxargs i64 
    jumple         #7125      i64 
    push           pc_genmcl.do_pushparams.nargs i64 
    push           4          i64 
    jumpgt         #7125      i64 
    push           pc_genmcl.do_pushparams.nargs i64 
    pop            pci_mcl.inf_maxargs i64 
#7125: 
    push           pc_genmcl.do_pushparams.nargs i64 
    pop            pc_genmcl.do_pushparams.nparams i64 
    push           pc_genmcl.do_pushparams.nparams i64 
    push           4          i64 
    jumple         #7126      i64 
    setargs                   1 0
    push           pc_genmcl.do_pushparams.isptr i64 
    push           4          i64 
    add                       i64 
    push           1          i64 
    add                       i64 
    callproc       &pc_stackmcl.pushallopnds 
#7126: 
    setargs                   3 0
    push           pc_genmcl.do_pushparams.isptr i64 
    push           pc_genmcl.do_pushparams.nvars i64 
    push           pc_genmcl.do_pushparams.nparams i64 
    callproc       &pc_genmcl.do_pushlowparams 
    push           &pci_mcl.callshadow 
    push           pci_mcl.ncalldepth i64 
    pushptroff                i64 8 -8
    jumpfalse      #7127      i64 
    setargs                   1 0
    push           &pci_mcl.callalign 
    push           pci_mcl.ncalldepth i64 
    pushptroff                u8 1 -1
    push           4          i64 
    add                       i64 
    callproc       &pc_stackmcl.pushslots 
#7127: 
    push           &pci_mcl.callslots 
    push           pci_mcl.ncalldepth i64 
    pushptroff                i64 8 -8
    pop            pc_genmcl.do_pushparams.pushedslots i64 
    push           &pci_mcl.ncalldepth 
    decr                      i64 1
    push           pc_genmcl.do_pushparams.pushedslots i64 
    setret                    i64 
    jump           #7128      
#7128: 
    retfn                     i64 
End


Proc pc_genmcl.do_pushlowparams:
    param          pc_genmcl.do_pushlowparams.nparams i64 
    param          pc_genmcl.do_pushlowparams.nvariadics i64 
    param          pc_genmcl.do_pushlowparams.isptr i64 
    local          pc_genmcl.do_pushlowparams.ireg i64 
    local          pc_genmcl.do_pushlowparams.xreg i64 
    local          pc_genmcl.do_pushlowparams.j i64 
    local          pc_genmcl.do_pushlowparams.i i64 
    procentry                 
    push           pc_genmcl.do_pushlowparams.nparams i64 
    push           0          i64 
    jumpne         #7130      i64 
    jump           #7131      
#7130: 
    push           &pc_genmcl.do_pushlowparams.nparams 
    push           4          i64 
    minto                     i64 
#7132: 
    push           1          i64 
    pop            pc_genmcl.do_pushlowparams.i i64 
    push           pc_genmcl.do_pushlowparams.nparams i64 
    push           1          i64 
    jumplt         #7133      i64 
#7134: 
    push           pc_genmcl.do_pushlowparams.i i64 
    push           pc_genmcl.do_pushlowparams.isptr i64 
    add                       i64 
    pop            pc_genmcl.do_pushlowparams.j i64 
    push           11         i64 
    push           pc_genmcl.do_pushlowparams.i i64 
    add                       i64 
    push           1          i64 
    sub                       i64 
    pop            pc_genmcl.do_pushlowparams.ireg i64 
    push           1          i64 
    push           pc_genmcl.do_pushlowparams.i i64 
    add                       i64 
    push           1          i64 
    sub                       i64 
    pop            pc_genmcl.do_pushlowparams.xreg i64 
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.do_pushlowparams.j i64 
    addrefoff                 block:15 15 -15
    push           3          
    pushptroff                u8 1 0
    jumpfalse      #7135      i64 
    push           pc_genmcl.do_pushlowparams.nvariadics i64 
    jumpfalse      #7136      i64 
    push           pc_genmcl.do_pushlowparams.i i64 
    push           pc_genmcl.do_pushlowparams.nvariadics i64 
    jumpge         #7137      i64 
#7136: 
    push           0          i64 
    pop            pc_genmcl.do_pushlowparams.ireg i64 
#7137: 
    jump           #7138      
#7135: 
    push           0          i64 
    pop            pc_genmcl.do_pushlowparams.xreg i64 
#7138: 
    push           pc_genmcl.do_pushlowparams.ireg i64 
    jumpfalse      #7139      i64 
    setargs                   2 0
    push           pc_genmcl.do_pushlowparams.ireg i64 
    push           pc_genmcl.do_pushlowparams.j i64 
    callproc       &pc_stackmcl.loadparam 
#7139: 
    push           pc_genmcl.do_pushlowparams.xreg i64 
    jumpfalse      #7140      i64 
    setargs                   2 0
    push           pc_genmcl.do_pushlowparams.xreg i64 
    push           pc_genmcl.do_pushlowparams.j i64 
    callproc       &pc_stackmcl.loadxparam 
#7140: 
#7141: 
    forup          #7134      i64 1
    opnd           pc_genmcl.do_pushlowparams.i 
    opnd           pc_genmcl.do_pushlowparams.nparams 
#7133: 
#7131: 
    retproc                   
End


Proc pc_genmcl.do_for:
    param          pc_genmcl.do_for.p u64 
    param          pc_genmcl.do_for.incop i64 
    param          pc_genmcl.do_for.addop i64 
    param          pc_genmcl.do_for.cond i64 
    local          pc_genmcl.do_for.q u64 
    local          pc_genmcl.do_for.r u64 
    local          pc_genmcl.do_for.ax u64 
    local          pc_genmcl.do_for.bx u64 
    local          pc_genmcl.do_for.cx u64 
    local          pc_genmcl.do_for.dx u64 
    local          pc_genmcl.do_for.mx u64 
    local          pc_genmcl.do_for.reg i64 
    procentry                 
    push           pc_genmcl.do_for.p u64 
    push           1          i64 
    addrefoff                 u64 32 0
    pop            pc_genmcl.do_for.q u64 
    push           pc_genmcl.do_for.q u64 
    push           1          i64 
    addrefoff                 u64 32 0
    store          pc_genmcl.currpcl u64 
    pop            pc_genmcl.do_for.r u64 
    setargs                   1 0
    push           pc_genmcl.do_for.q u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    pop            pc_genmcl.do_for.mx u64 
    push           pc_genmcl.do_for.q u64 
    push           8          
    pushptroff                u64 1 0
    push           50         
    pushptroff                u8 1 0
    jumpfalse      #7143      i64 
    push           pc_genmcl.do_for.p u64 
    push           16         
    pushptroff                i32 1 0
    push           1          i64 
    jumpne         #7144      i64 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.do_for.mx u64 
    push           pc_genmcl.do_for.incop i64 
    callproc       &pc_libmcl.genmc 
    jump           #7145      
#7144: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.do_for.p u64 
    push           16         
    pushptroff                i32 1 0
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.do_for.mx u64 
    push           pc_genmcl.do_for.addop i64 
    callproc       &pc_libmcl.genmc 
#7145: 
    push           pc_genmcl.do_for.mx u64 
    pop            pc_genmcl.do_for.ax u64 
    jump           #7146      
#7143: 
    setargs                   2 0
    push           8          i64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_genmcl.do_for.ax u64 
    setargs                   3 0
    push           pc_genmcl.do_for.mx u64 
    push           pc_genmcl.do_for.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_genmcl.do_for.p u64 
    push           16         
    pushptroff                i32 1 0
    push           1          i64 
    jumpne         #7147      i64 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.do_for.ax u64 
    push           pc_genmcl.do_for.incop i64 
    callproc       &pc_libmcl.genmc 
    jump           #7148      
#7147: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.do_for.p u64 
    push           16         
    pushptroff                i32 1 0
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.do_for.ax u64 
    push           pc_genmcl.do_for.addop i64 
    callproc       &pc_libmcl.genmc 
#7148: 
    setargs                   3 0
    push           pc_genmcl.do_for.ax u64 
    push           pc_genmcl.do_for.mx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
#7146: 
    push           pc_genmcl.do_for.r u64 
    pushptr                   u8 
    push           4          i64 
    jumpne         #7149      i64 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.do_for.r u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenint u64 
    pop            pc_genmcl.do_for.bx u64 
    jump           #7150      
#7149: 
    setargs                   1 0
    push           pc_genmcl.do_for.r u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    pop            pc_genmcl.do_for.bx u64 
#7150: 
    setargs                   3 0
    push           pc_genmcl.do_for.bx u64 
    push           pc_genmcl.do_for.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_genmcl.do_for.ax u64 
    push           10         
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_genmcl.do_for.ax u64 
    push           10         
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.do_for.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    push           pc_genmcl.do_for.cond i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
#7151: 
    retproc                   
End


Proc pc_genmcl.dojumpcc:
    param          pc_genmcl.dojumpcc.p u64 
    local          pc_genmcl.dojumpcc.m i64 
    local          pc_genmcl.dojumpcc.cond i64 
    local          pc_genmcl.dojumpcc.ax u64 
    local          pc_genmcl.dojumpcc.bx u64 
    procentry                 
    push           pc_genmcl.dojumpcc.p u64 
    push           3          
    pushptroff                u8 1 0
    pop            pc_genmcl.dojumpcc.m i64 
    push           pc_genmcl.dojumpcc.p u64 
    push           3          
    pushptroff                u8 1 0
    push           10         i64 
    setjumpeq      #7153      i64 
    push           5          i64 
    setjumpne      #7154      i64 
#7153: 
    setargs                   1 0
    push           pc_genmcl.dojumpcc.p u64 
    callproc       &pc_genmcl.dojumpcc_i128 
    jump           #7155      
#7154: 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dojumpcc.ax u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dojumpcc.bx u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.dojumpcc.m i64 
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #7156      i64 0
    push           2          i64 
    casejumpeq     #7157      i64 0
    push           3          i64 
    casejumpeq     #7158      i64 0
    popstack                  i64 
    jump           #7159      
#7156: 
    push           &pc_tables.psigned 
    push           pc_genmcl.dojumpcc.m i64 
    pushptroff                u8 1 0
    jumpfalse      #7160      i64 
    push           &pc_genmcl.scondcodes 
    push           pc_genmcl.dojumpcc.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u8 1 -53
    pop            pc_genmcl.dojumpcc.cond i64 
    jump           #7161      
#7160: 
    push           &pc_genmcl.ucondcodes 
    push           pc_genmcl.dojumpcc.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u8 1 -53
    pop            pc_genmcl.dojumpcc.cond i64 
#7161: 
    setargs                   3 0
    push           pc_genmcl.dojumpcc.bx u64 
    push           pc_genmcl.dojumpcc.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    jump           #7162      
#7157: 
    push           &pc_genmcl.ucondcodes 
    push           pc_genmcl.dojumpcc.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u8 1 -53
    pop            pc_genmcl.dojumpcc.cond i64 
    setargs                   3 0
    push           pc_genmcl.dojumpcc.bx u64 
    push           pc_genmcl.dojumpcc.ax u64 
    push           72         i64 
    callproc       &pc_libmcl.genmc 
    jump           #7162      
#7158: 
    push           &pc_genmcl.ucondcodes 
    push           pc_genmcl.dojumpcc.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u8 1 -53
    pop            pc_genmcl.dojumpcc.cond i64 
    setargs                   3 0
    push           pc_genmcl.dojumpcc.bx u64 
    push           pc_genmcl.dojumpcc.ax u64 
    push           73         i64 
    callproc       &pc_libmcl.genmc 
    jump           #7162      
#7159: 
    setargs                   2 0
    push           pc_genmcl.dojumpcc.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "jumpcc:"  u64 
    callproc       &pc_libmcl.merrort 
#7162: 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.dojumpcc.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    push           pc_genmcl.dojumpcc.cond i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7155: 
    retproc                   
End


Proc pc_genmcl.dosetcc:
    param          pc_genmcl.dosetcc.p u64 
    local          pc_genmcl.dosetcc.m i64 
    local          pc_genmcl.dosetcc.cond i64 
    local          pc_genmcl.dosetcc.ax u64 
    local          pc_genmcl.dosetcc.bx u64 
    procentry                 
    push           pc_genmcl.dosetcc.p u64 
    push           3          
    pushptroff                u8 1 0
    pop            pc_genmcl.dosetcc.m i64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dosetcc.ax u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dosetcc.bx u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.dosetcc.m i64 
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #7164      i64 0
    push           2          i64 
    casejumpeq     #7165      i64 0
    push           3          i64 
    casejumpeq     #7166      i64 0
    popstack                  i64 
    jump           #7167      
#7164: 
    push           &pc_tables.psigned 
    push           pc_genmcl.dosetcc.m i64 
    pushptroff                u8 1 0
    jumpfalse      #7168      i64 
    push           &pc_genmcl.scondcodes 
    push           pc_genmcl.dosetcc.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u8 1 -66
    pop            pc_genmcl.dosetcc.cond i64 
    jump           #7169      
#7168: 
    push           &pc_genmcl.ucondcodes 
    push           pc_genmcl.dosetcc.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u8 1 -66
    pop            pc_genmcl.dosetcc.cond i64 
#7169: 
    setargs                   3 0
    push           pc_genmcl.dosetcc.bx u64 
    push           pc_genmcl.dosetcc.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    jump           #7170      
#7165: 
    push           &pc_genmcl.ucondcodes 
    push           pc_genmcl.dosetcc.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u8 1 -66
    pop            pc_genmcl.dosetcc.cond i64 
    setargs                   3 0
    push           pc_genmcl.dosetcc.bx u64 
    push           pc_genmcl.dosetcc.ax u64 
    push           72         i64 
    callproc       &pc_libmcl.genmc 
    jump           #7170      
#7166: 
    push           &pc_genmcl.ucondcodes 
    push           pc_genmcl.dosetcc.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u8 1 -66
    pop            pc_genmcl.dosetcc.cond i64 
    setargs                   3 0
    push           pc_genmcl.dosetcc.bx u64 
    push           pc_genmcl.dosetcc.ax u64 
    push           73         i64 
    callproc       &pc_libmcl.genmc 
    jump           #7170      
#7167: 
    setargs                   2 0
    push           pc_genmcl.dosetcc.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "setcc:"   u64 
    callproc       &pc_libmcl.merrort 
#7170: 
    setargs                   4 0
    push           0          u64 
    setargs                   2 0
    push           1          i64 
    push           pc_genmcl.dosetcc.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    store          pc_genmcl.dosetcc.bx u64 
    push           pc_genmcl.dosetcc.cond i64 
    push           59         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.dosetcc.bx u64 
    setargs                   2 0
    push           4          i64 
    push           pc_genmcl.dosetcc.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           20         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7171: 
    retproc                   
End


Proc pc_genmcl.do_setretfloat:
    param          pc_genmcl.do_setretfloat.destreg i64 
    local          pc_genmcl.do_setretfloat.currreg i64 
    local          pc_genmcl.do_setretfloat.ax u64 
    local          pc_genmcl.do_setretfloat.rx u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.do_setretfloat.destreg i64 
    callfn         &pc_libmcl.mgenxreg u64 
    pop            pc_genmcl.do_setretfloat.rx u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.do_setretfloat.ax u64 
    push           pc_genmcl.do_setretfloat.ax u64 
    push           10         
    pushptroff                u8 1 0
    pop            pc_genmcl.do_setretfloat.currreg i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           2          i64 
    casejumpeq     #7173      i64 0
    popstack                  i64 
    jump           #7174      
#7173: 
    push           pc_genmcl.do_setretfloat.currreg i64 
    push           pc_genmcl.do_setretfloat.destreg i64 
    jumpeq         #7175      i64 
    push           &pci_mcl.regset 
    push           pc_genmcl.do_setretfloat.destreg i64 
    pushptroff                u8 1 -1
    jumpfalse      #7176      i64 
    setargs                   2 0
    push           ""         u64 
    push           "setretfloat/dest in use" u64 
    callproc       &pc_libmcl.merror 
    jump           #7177      
#7176: 
    setargs                   3 0
    push           pc_genmcl.do_setretfloat.ax u64 
    push           pc_genmcl.do_setretfloat.rx u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    push           1          i64 
    push           &pci_mcl.xregset 
    push           pc_genmcl.do_setretfloat.destreg i64 
    popptroff                 u8 1 -1
#7177: 
#7175: 
    jump           #7178      
#7174: 
    setargs                   2 0
    push           ""         u64 
    push           "setretf?" u64 
    callproc       &pc_libmcl.merror 
#7178: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7179: 
    retproc                   
End


Proc pc_genmcl.do_setret:
    param          pc_genmcl.do_setret.destreg i64 
    param          pc_genmcl.do_setret.destxreg i64 
    local          pc_genmcl.do_setret.currreg i64 
    local          pc_genmcl.do_setret.ax u64 
    local          pc_genmcl.do_setret.rx u64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           3          
    pushptroff                u8 1 0
    jumpfalse      #7181      i64 
    setargs                   1 0
    push           pc_genmcl.do_setret.destxreg i64 
    callproc       &pc_genmcl.do_setretfloat 
    jump           #7182      
#7181: 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.do_setret.destreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_genmcl.do_setret.rx u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.do_setret.ax u64 
    push           pc_genmcl.do_setret.ax u64 
    push           10         
    pushptroff                u8 1 0
    pop            pc_genmcl.do_setret.currreg i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #7183      i64 0
    popstack                  i64 
    jump           #7184      
#7183: 
    push           pc_genmcl.do_setret.currreg i64 
    push           pc_genmcl.do_setret.destreg i64 
    jumpeq         #7185      i64 
    push           &pci_mcl.regset 
    push           pc_genmcl.do_setret.destreg i64 
    pushptroff                u8 1 -1
    jumpfalse      #7186      i64 
    setargs                   1 0
    push           pc_genmcl.do_setret.destreg i64 
    callproc       &pc_stackmcl.swapopndregs 
    setargs                   3 0
    push           pc_genmcl.do_setret.ax u64 
    push           pc_genmcl.do_setret.rx u64 
    push           28         i64 
    callproc       &pc_libmcl.genmc 
    jump           #7187      
#7186: 
    setargs                   3 0
    push           pc_genmcl.do_setret.ax u64 
    push           pc_genmcl.do_setret.rx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
#7187: 
#7185: 
    jump           #7188      
#7184: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "LOCNAMES[PCLSTACK[1].LOC]=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pci_mcl.locnames 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           ""         u64 
    push           "setret?"  u64 
    callproc       &pc_libmcl.merror 
#7188: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    push           1          i64 
    push           &pci_mcl.regset 
    push           pc_genmcl.do_setret.destreg i64 
    popptroff                 u8 1 -1
    push           0          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_genmcl.do_setret.destreg i64 
    popptroff                 u8 1 -1
#7182: 
    retproc                   
End


Proc pc_genmcl.dogetretvalue:
    param          pc_genmcl.dogetretvalue.p u64 
    local          pc_genmcl.dogetretvalue.reg i64 
    local          pc_genmcl.dogetretvalue.xreg i64 
    local          pc_genmcl.dogetretvalue.i i64 
    local          pc_genmcl.dogetretvalue.n i64 
    local          pc_genmcl.dogetretvalue.cats block:80 
    procentry                 
    push           pc_genmcl.dogetretvalue.p u64 
    push           1          i64 
    addrefoff                 u64 32 0
    push           1          
    pushptroff                u8 1 0
    push           28         i64 
    jumpne         #7190      i64 
    push           0          i64 
    pop            pc_genmcl.dogetretvalue.n i64 
    jump           #7191      
#7192: 
    push           &pc_tables.pcat 
    push           pc_genmcl.dogetretvalue.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           &pc_genmcl.dogetretvalue.cats 
    push           &pc_genmcl.dogetretvalue.n 
    incrload                  i64 1
    popptroff                 i64 8 -8
#7191: 
    push           &pc_genmcl.dogetretvalue.p 
    incrload                  u64 32
    push           1          
    pushptroff                u8 1 0
    push           28         i64 
    jumpeq         #7192      i64 
#7193: 
    push           pc_genmcl.dogetretvalue.p u64 
    push           1          i64 
    subrefoff                 u64 32 0
    pop            pc_genmcl.currpcl u64 
#7194: 
    push           pc_genmcl.dogetretvalue.n i64 
    pop            pc_genmcl.dogetretvalue.i i64 
    push           pc_genmcl.dogetretvalue.i i64 
    push           1          i64 
    jumplt         #7195      i64 
#7196: 
    push           &pc_genmcl.dogetretvalue.cats 
    push           pc_genmcl.dogetretvalue.i i64 
    pushptroff                i64 8 -8
    push           4          i64 
    casejumpeq     #7197      i64 0
    push           5          i64 
    casejumpeq     #7197      i64 0
    popstack                  i64 
    jump           #7198      
#7197: 
    setargs                   2 0
    push           ""         u64 
    push           "Short/wide mulret type" u64 
    callproc       &pc_libmcl.merror 
    jump           #7199      
#7198: 
#7199: 
    setargs                   3 0
    push           &pc_genmcl.dogetretvalue.cats 
    push           pc_genmcl.dogetretvalue.i i64 
    pushptroff                i64 8 -8
    push           &pc_genmcl.multxregs 
    push           pc_genmcl.dogetretvalue.i i64 
    pushptroff                i64 8 -8
    push           &pc_genmcl.multregs 
    push           pc_genmcl.dogetretvalue.i i64 
    pushptroff                i64 8 -8
    callproc       &pc_genmcl.dogetretvalue_n 
#7200: 
    fordown        #7196      i64 1
    opnd           pc_genmcl.dogetretvalue.i 
    opnd           1          
#7195: 
    jump           #7201      
#7190: 
    setargs                   3 0
    push           &pc_tables.pcat 
    push           pc_genmcl.dogetretvalue.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    push           1          i64 
    callproc       &pc_genmcl.dogetretvalue_n 
    push           &pc_tables.pcat 
    push           pc_genmcl.dogetretvalue.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           4          i64 
    jumpne         #7202      i64 
    setargs                   3 0
    setargs                   2 0
    push           pc_genmcl.dogetretvalue.p u64 
    push           4          
    pushptroff                i32 1 0
    push           1          i64 
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_libmcl.mgenreg u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_genmcl.dogetretvalue.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #7203      i64 
    push           19         i64 
    resetmult                 
    jump           #7204      
#7203: 
    push           20         i64 
    endmult                   
#7204: 
    callproc       &pc_libmcl.genmc 
#7202: 
#7201: 
#7205: 
    retproc                   
End


Proc pc_genmcl.dogetretvalue_n:
    param          pc_genmcl.dogetretvalue_n.reg i64 
    param          pc_genmcl.dogetretvalue_n.xreg i64 
    param          pc_genmcl.dogetretvalue_n.cat i64 
    procentry                 
    push           pc_genmcl.dogetretvalue_n.cat i64 
    push           1          i64 
    casejumpeq     #7207      i64 0
    push           4          i64 
    casejumpeq     #7207      i64 0
    push           3          i64 
    casejumpeq     #7208      i64 0
    push           2          i64 
    casejumpeq     #7209      i64 0
    push           5          i64 
    casejumpeq     #7210      i64 0
    popstack                  i64 
    jump           #7211      
#7207: 
    setargs                   1 0
    push           pc_genmcl.dogetretvalue_n.reg i64 
    callproc       &pc_stackmcl.addreg0 
    jump           #7212      
#7208: 
    setargs                   2 0
    push           2          i64 
    push           pc_genmcl.dogetretvalue_n.xreg i64 
    callproc       &pc_stackmcl.addxreg0 
    jump           #7212      
#7209: 
    setargs                   2 0
    push           3          i64 
    push           pc_genmcl.dogetretvalue_n.xreg i64 
    callproc       &pc_stackmcl.addxreg0 
    jump           #7212      
#7210: 
    setargs                   1 0
    push           pc_genmcl.dogetretvalue_n.reg i64 
    callproc       &pc_stackmcl.addwidereg0 
    jump           #7212      
#7211: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pc_tables.pstdnames 
    push           pc_genmcl.dogetretvalue_n.cat i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           ""         u64 
    push           "getretval/n?" u64 
    callproc       &pc_libmcl.merror 
#7212: 
#7213: 
    retproc                   
End


Proc pc_genmcl.do_shift:
    param          pc_genmcl.do_shift.p u64 
    param          pc_genmcl.do_shift.opc i64 
    local          pc_genmcl.do_shift.ax u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.do_shift.ax u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #7215      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.do_shift.ax u64 
    push           pc_genmcl.do_shift.opc i64 
    callproc       &pc_libmcl.genmc 
    jump           #7216      
#7215: 
    push           pci_mcl.inf_r10used i64 
    jumpfalse      #7217      i64 
    setargs                   2 0
    push           ""         u64 
    push           "shift:cl in use" u64 
    callproc       &pc_libmcl.merror 
#7217: 
    setargs                   2 0
    push           11         i64 
    push           1          i64 
    callproc       &pc_stackmcl.loadparam 
    setargs                   3 0
    setargs                   2 0
    push           1          i64 
    push           11         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           pc_genmcl.do_shift.ax u64 
    push           pc_genmcl.do_shift.opc i64 
    callproc       &pc_libmcl.genmc 
#7216: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7218: 
    retproc                   
End


Proc pc_genmcl.mulimm:
    param          pc_genmcl.mulimm.ax u64 
    param          pc_genmcl.mulimm.n i64 
    local          pc_genmcl.mulimm.shifts i64 
    local          pc_genmcl.mulimm.m i64 
    procentry                 
    push           pc_genmcl.mulimm.n i64 
    push           0          i64 
    casejumpeq     #7220      i64 0
    push           1          i64 
    casejumpeq     #7221      i64 0
    push           -1         i64 
    casejumpeq     #7222      i64 0
    popstack                  i64 
    jump           #7223      
#7220: 
    setargs                   3 0
    push           pc_genmcl.mulimm.ax u64 
    push           pc_genmcl.mulimm.ax u64 
    push           41         i64 
    callproc       &pc_libmcl.genmc 
    jump           #7224      
    jump           #7225      
#7221: 
    jump           #7224      
    jump           #7225      
#7222: 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.mulimm.ax u64 
    push           51         i64 
    callproc       &pc_libmcl.genmc 
    jump           #7224      
    jump           #7225      
#7223: 
#7225: 
    push           0          i64 
    pop            pc_genmcl.mulimm.shifts i64 
    push           pc_genmcl.mulimm.n i64 
    pop            pc_genmcl.mulimm.m i64 
    jump           #7226      
#7227: 
    push           &pc_genmcl.mulimm.m 
    push           1          i64 
    shrto                     i64 
    push           &pc_genmcl.mulimm.shifts 
    incr                      i64 1
#7226: 
    push           pc_genmcl.mulimm.m i64 
    push           0          i64 
    dotindex                  i64 
    jumpfalse      #7227      i64 
#7228: 
    push           pc_genmcl.mulimm.shifts i64 
    jumpfalse      #7229      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.mulimm.shifts i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.mulimm.ax u64 
    push           44         i64 
    callproc       &pc_libmcl.genmc 
#7229: 
    push           pc_genmcl.mulimm.m i64 
    push           1          i64 
    casejumpeq     #7230      i64 0
    push           3          i64 
    casejumpeq     #7231      i64 0
    push           5          i64 
    casejumpeq     #7231      i64 0
    push           9          i64 
    casejumpeq     #7231      i64 0
    popstack                  i64 
    jump           #7232      
#7230: 
    jump           #7224      
    jump           #7233      
#7231: 
    setargs                   3 0
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           0          i64 
    push           0          i64 
    push           pc_genmcl.mulimm.m i64 
    push           1          i64 
    sub                       i64 
    push           pc_genmcl.mulimm.ax u64 
    push           10         
    pushptroff                u8 1 0
    push           pc_genmcl.mulimm.ax u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenindex u64 
    push           pc_genmcl.mulimm.ax u64 
    push           15         i64 
    callproc       &pc_libmcl.genmc 
    jump           #7233      
#7232: 
    push           pc_genmcl.mulimm.shifts i64 
    jumpfalse      #7234      i64 
    push           35         i64 
    push           pci_mcl.mccodex u64 
    push           24         
    popptroff                 u8 1 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.mulimm.n i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pci_mcl.mccodex u64 
    push           16         
    popptroff                 u64 1 0
    jump           #7235      
#7234: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.mulimm.n i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.mulimm.ax u64 
    push           35         i64 
    callproc       &pc_libmcl.genmc 
#7235: 
#7233: 
#7224: 
    retproc                   
End


Proc pc_genmcl.dojumptruefalse:
    param          pc_genmcl.dojumptruefalse.p u64 
    param          pc_genmcl.dojumptruefalse.cond i64 
    local          pc_genmcl.dojumptruefalse.ax u64 
    local          pc_genmcl.dojumptruefalse.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.dojumptruefalse.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #7237      i64 0
    popstack                  i64 
    jump           #7238      
#7237: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dojumptruefalse.ax u64 
    setargs                   3 0
    push           pc_genmcl.dojumptruefalse.ax u64 
    push           pc_genmcl.dojumptruefalse.ax u64 
    push           42         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.dojumptruefalse.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    push           pc_genmcl.dojumptruefalse.cond i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    jump           #7239      
#7238: 
    setargs                   2 0
    push           pc_genmcl.dojumptruefalse.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "jumptrue/false" u64 
    callproc       &pc_libmcl.merrort 
#7239: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7240: 
    retproc                   
End


Proc pc_genmcl.dobitwise:
    param          pc_genmcl.dobitwise.p u64 
    param          pc_genmcl.dobitwise.opc i64 
    local          pc_genmcl.dobitwise.ax u64 
    local          pc_genmcl.dobitwise.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.dobitwise.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #7242      i64 0
    push           5          i64 
    casejumpeq     #7243      i64 0
    popstack                  i64 
    jump           #7244      
#7242: 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dobitwise.ax u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dobitwise.bx u64 
    setargs                   3 0
    push           pc_genmcl.dobitwise.bx u64 
    push           pc_genmcl.dobitwise.ax u64 
    push           pc_genmcl.dobitwise.opc i64 
    callproc       &pc_libmcl.genmc 
    jump           #7245      
#7243: 
    setargs                   3 0
    push           pc_genmcl.dobitwise.opc i64 
    push           pc_genmcl.dobitwise.opc i64 
    push           pc_genmcl.dobitwise.p u64 
    callproc       &pc_genmcl.dobin_i128 
    jump           #7246      
    jump           #7245      
#7244: 
    setargs                   2 0
    push           pc_genmcl.dobitwise.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "bitwise:" u64 
    callproc       &pc_libmcl.merrort 
#7245: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7246: 
    retproc                   
End


Proc pc_genmcl.do_addrmode: u64
    param          pc_genmcl.do_addrmode.p u64 
    local          pc_genmcl.do_addrmode.px u64 
    local          pc_genmcl.do_addrmode.ax u64 
    local          pc_genmcl.do_addrmode.bx u64 
    local          pc_genmcl.do_addrmode.m i64 
    local          pc_genmcl.do_addrmode.scale i64 
    local          pc_genmcl.do_addrmode.extra i64 
    local          pc_genmcl.do_addrmode.offset i64 
    local          pc_genmcl.do_addrmode.reg i64 
    local          pc_genmcl.do_addrmode.regix i64 
    local          pc_genmcl.do_addrmode.d u64 
    procentry                 
    push           pc_genmcl.do_addrmode.p u64 
    push           16         
    pushptroff                i32 1 0
    pop            pc_genmcl.do_addrmode.scale i64 
    push           pc_genmcl.do_addrmode.p u64 
    push           20         
    pushptroff                i32 1 0
    pop            pc_genmcl.do_addrmode.extra i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    push           pc_genmcl.do_addrmode.scale i64 
    mul                       i64 
    push           pc_genmcl.do_addrmode.extra i64 
    add                       i64 
    pop            pc_genmcl.do_addrmode.offset i64 
    push           pc_genmcl.do_addrmode.p u64 
    push           3          
    pushptroff                u8 1 0
    pop            pc_genmcl.do_addrmode.m i64 
    push           0          u64 
    pop            pc_genmcl.do_addrmode.px u64 
    setargs                   1 0
    push           2          i64 
    callfn         &pc_libmcl.isregvaropnd i64 
    jumpfalse      #7248      i64 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.isregvaropnd i64 
    jumpfalse      #7249      i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_genmcl.do_addrmode.reg i64 
    setargs                   3 0
    push           1          i64 
    push           &pc_genmcl.do_addrmode.scale 
    push           pc_genmcl.do_addrmode.reg i64 
    callfn         &pc_genmcl.scaleregvar i64 
    pop            pc_genmcl.do_addrmode.regix i64 
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           0          i64 
    push           pc_genmcl.do_addrmode.extra i64 
    push           pc_genmcl.do_addrmode.scale i64 
    push           pc_genmcl.do_addrmode.regix i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenindex u64 
    pop            pc_genmcl.do_addrmode.px u64 
    jump           #7250      
#7249: 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.isimm64 i64 
    jumpfalse      #7251      i64 
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           0          i64 
    push           pc_genmcl.do_addrmode.offset i64 
    push           1          i64 
    push           0          i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenindex u64 
    pop            pc_genmcl.do_addrmode.px u64 
    jump           #7250      
#7251: 
    setargs                   2 0
    push           pc_genmcl.do_addrmode.scale i64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    store          pc_genmcl.do_addrmode.bx u64 
    callfn         &pc_genmcl.scaleindex i64 
    pop            pc_genmcl.do_addrmode.scale i64 
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           0          i64 
    push           pc_genmcl.do_addrmode.extra i64 
    push           pc_genmcl.do_addrmode.scale i64 
    push           pc_genmcl.do_addrmode.bx u64 
    push           10         
    pushptroff                u8 1 0
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenindex u64 
    pop            pc_genmcl.do_addrmode.px u64 
#7250: 
    jump           #7252      
#7248: 
    setargs                   1 0
    push           2          i64 
    callfn         &pc_libmcl.ismemaddr i64 
    jumpfalse      #7253      i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    pop            pc_genmcl.do_addrmode.d u64 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.isregvaropnd i64 
    jumpfalse      #7254      i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_genmcl.do_addrmode.reg i64 
    setargs                   3 0
    push           1          i64 
    push           &pc_genmcl.do_addrmode.scale 
    push           pc_genmcl.do_addrmode.reg i64 
    callfn         &pc_genmcl.scaleregvar i64 
    pop            pc_genmcl.do_addrmode.regix i64 
    setargs                   7 0
    push           pc_genmcl.do_addrmode.d u64 
    push           0          i64 
    push           0          i64 
    push           pc_genmcl.do_addrmode.extra i64 
    push           pc_genmcl.do_addrmode.scale i64 
    push           pc_genmcl.do_addrmode.regix i64 
    push           0          i64 
    callfn         &pc_libmcl.mgenindex u64 
    pop            pc_genmcl.do_addrmode.px u64 
    jump           #7255      
#7254: 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.isimm64 i64 
    jumpfalse      #7256      i64 
    setargs                   7 0
    push           pc_genmcl.do_addrmode.d u64 
    push           0          i64 
    push           0          i64 
    push           pc_genmcl.do_addrmode.offset i64 
    push           1          i64 
    push           0          i64 
    push           0          i64 
    callfn         &pc_libmcl.mgenindex u64 
    pop            pc_genmcl.do_addrmode.px u64 
    jump           #7255      
#7256: 
    setargs                   2 0
    push           pc_genmcl.do_addrmode.scale i64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    store          pc_genmcl.do_addrmode.bx u64 
    callfn         &pc_genmcl.scaleindex i64 
    pop            pc_genmcl.do_addrmode.scale i64 
    setargs                   7 0
    push           pc_genmcl.do_addrmode.d u64 
    push           0          i64 
    push           0          i64 
    push           pc_genmcl.do_addrmode.extra i64 
    push           pc_genmcl.do_addrmode.scale i64 
    push           pc_genmcl.do_addrmode.bx u64 
    push           10         
    pushptroff                u8 1 0
    push           0          i64 
    callfn         &pc_libmcl.mgenindex u64 
    pop            pc_genmcl.do_addrmode.px u64 
#7255: 
    jump           #7252      
#7253: 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.do_addrmode.ax u64 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.isregvaropnd i64 
    jumpfalse      #7257      i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_genmcl.do_addrmode.reg i64 
    setargs                   3 0
    push           1          i64 
    push           &pc_genmcl.do_addrmode.scale 
    push           pc_genmcl.do_addrmode.reg i64 
    callfn         &pc_genmcl.scaleregvar i64 
    pop            pc_genmcl.do_addrmode.regix i64 
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           0          i64 
    push           pc_genmcl.do_addrmode.extra i64 
    push           pc_genmcl.do_addrmode.scale i64 
    push           pc_genmcl.do_addrmode.regix i64 
    push           pc_genmcl.do_addrmode.ax u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenindex u64 
    pop            pc_genmcl.do_addrmode.px u64 
    jump           #7258      
#7257: 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.isimm64 i64 
    jumpfalse      #7259      i64 
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           0          i64 
    push           pc_genmcl.do_addrmode.offset i64 
    push           1          i64 
    push           0          i64 
    push           pc_genmcl.do_addrmode.ax u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenindex u64 
    pop            pc_genmcl.do_addrmode.px u64 
    jump           #7258      
#7259: 
    setargs                   2 0
    push           pc_genmcl.do_addrmode.scale i64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    store          pc_genmcl.do_addrmode.bx u64 
    callfn         &pc_genmcl.scaleindex i64 
    pop            pc_genmcl.do_addrmode.scale i64 
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           0          i64 
    push           pc_genmcl.do_addrmode.extra i64 
    push           pc_genmcl.do_addrmode.scale i64 
    push           pc_genmcl.do_addrmode.bx u64 
    push           10         
    pushptroff                u8 1 0
    push           pc_genmcl.do_addrmode.ax u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenindex u64 
    pop            pc_genmcl.do_addrmode.px u64 
#7258: 
#7252: 
    push           pc_genmcl.do_addrmode.px u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #7260      i64 
    push           pc_genmcl.do_addrmode.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_genmcl.do_addrmode.px u64 
    push           8          
    popptroff                 u8 1 0
#7260: 
    push           pc_genmcl.do_addrmode.px u64 
    setret                    u64 
    jump           #7261      
#7261: 
    retfn                     u64 
End


Proc pc_genmcl.scaleregvar: i64
    param          pc_genmcl.scaleregvar.reg i64 
    param          pc_genmcl.scaleregvar.scale u64 
    param          pc_genmcl.scaleregvar.n i64 
    local          pc_genmcl.scaleregvar.regix i64 
    local          pc_genmcl.scaleregvar.ax u64 
    procentry                 
    push           pc_genmcl.scaleregvar.scale u64 
    pushptr                   i64 
    push           1          i64 
    setjumpeq      #7263      i64 
    push           2          i64 
    setjumpeq      #7263      i64 
    push           4          i64 
    setjumpeq      #7263      i64 
    push           8          i64 
    setjumpne      #7264      i64 
#7263: 
    push           pc_genmcl.scaleregvar.reg i64 
    setret                    i64 
    jump           #7265      
#7264: 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    pop            pc_genmcl.scaleregvar.regix i64 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.scaleregvar.regix i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_genmcl.scaleregvar.ax u64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.scaleregvar.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           pc_genmcl.scaleregvar.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.scaleregvar.n i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.scaleregvar.n i64 
    addrefoff                 block:15 15 -15
    push           1          
    popptroff                 u8 1 0
    push           pc_genmcl.scaleregvar.regix i64 
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.scaleregvar.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    setargs                   2 0
    push           pc_genmcl.scaleregvar.scale u64 
    pushptr                   i64 
    push           pc_genmcl.scaleregvar.ax u64 
    callproc       &pc_genmcl.mulimm 
    push           1          i64 
    push           pc_genmcl.scaleregvar.scale u64 
    popptr                    i64 
    push           pc_genmcl.scaleregvar.regix i64 
    setret                    i64 
    jump           #7265      
#7265: 
    retfn                     i64 
End


Proc pc_genmcl.scaleindex: i64
    param          pc_genmcl.scaleindex.ax u64 
    param          pc_genmcl.scaleindex.scale i64 
    local          pc_genmcl.scaleindex.n i64 
    procentry                 
    push           pc_genmcl.scaleindex.scale i64 
    push           1          i64 
    setjumpeq      #7267      i64 
    push           2          i64 
    setjumpeq      #7267      i64 
    push           4          i64 
    setjumpeq      #7267      i64 
    push           8          i64 
    setjumpne      #7268      i64 
#7267: 
    push           pc_genmcl.scaleindex.scale i64 
    setret                    i64 
    jump           #7269      
#7268: 
    setargs                   2 0
    push           pc_genmcl.scaleindex.scale i64 
    push           pc_genmcl.scaleindex.ax u64 
    callproc       &pc_genmcl.mulimm 
    push           1          i64 
    setret                    i64 
    jump           #7269      
#7269: 
    retfn                     i64 
End


Proc pc_genmcl.makeregopnd: u64
    param          pc_genmcl.makeregopnd.n i64 
    local          pc_genmcl.makeregopnd.ax u64 
    procentry                 
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.makeregopnd.n i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.makeregopnd.n i64 
    addrefoff                 block:15 15 -15
    push           1          
    popptroff                 u8 1 0
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.makeregopnd.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.makeregopnd.n i64 
    callfn         &pc_stackmcl.genopnd u64 
    setret                    u64 
    jump           #7271      
#7271: 
    retfn                     u64 
End


Proc pc_genmcl.dobinto_int:
    param          pc_genmcl.dobinto_int.p u64 
    param          pc_genmcl.dobinto_int.opc i64 
    local          pc_genmcl.dobinto_int.ax u64 
    local          pc_genmcl.dobinto_int.bx u64 
    local          pc_genmcl.dobinto_int.rx u64 
    local          pc_genmcl.dobinto_int.reg i64 
    local          pc_genmcl.dobinto_int.size i64 
    procentry                 
    push           pc_genmcl.dobinto_int.p u64 
    push           4          
    pushptroff                i32 1 0
    pop            pc_genmcl.dobinto_int.size i64 
    push           pc_genmcl.dobinto_int.size i64 
    push           8          i64 
    jumpne         #7273      i64 
    setargs                   1 0
    push           2          i64 
    callfn         &pc_libmcl.ismemaddr i64 
    jumpfalse      #7273      i64 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    pop            pc_genmcl.dobinto_int.ax u64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    pop            pc_genmcl.dobinto_int.reg i64 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.dobinto_int.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_genmcl.dobinto_int.rx u64 
    setargs                   3 0
    push           pc_genmcl.dobinto_int.ax u64 
    push           pc_genmcl.dobinto_int.rx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dobinto_int.bx u64 
    setargs                   3 0
    push           pc_genmcl.dobinto_int.bx u64 
    push           pc_genmcl.dobinto_int.rx u64 
    push           pc_genmcl.dobinto_int.opc i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.dobinto_int.rx u64 
    push           pc_genmcl.dobinto_int.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_genmcl.dobinto_int.reg i64 
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_genmcl.dobinto_int.reg i64 
    popptroff                 u8 1 -1
    jump           #7274      
#7273: 
    setargs                   2 0
    push           pc_genmcl.dobinto_int.size i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.dobinto_int.ax u64 
    setargs                   2 0
    push           pc_genmcl.dobinto_int.size i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dobinto_int.bx u64 
    setargs                   3 0
    push           pc_genmcl.dobinto_int.bx u64 
    push           pc_genmcl.dobinto_int.ax u64 
    push           pc_genmcl.dobinto_int.opc i64 
    callproc       &pc_libmcl.genmc 
#7274: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7275: 
    retproc                   
End


Proc pc_genmcl.dobinto_float:
    param          pc_genmcl.dobinto_float.p u64 
    param          pc_genmcl.dobinto_float.opc i64 
    local          pc_genmcl.dobinto_float.ax u64 
    local          pc_genmcl.dobinto_float.bx u64 
    local          pc_genmcl.dobinto_float.cx u64 
    procentry                 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_x64 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.dobinto_float.ax u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dobinto_float.bx u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dobinto_float.cx u64 
    setargs                   3 0
    push           pc_genmcl.dobinto_float.ax u64 
    push           pc_genmcl.dobinto_float.cx u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.dobinto_float.bx u64 
    push           pc_genmcl.dobinto_float.cx u64 
    push           pc_genmcl.dobinto_float.opc i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.dobinto_float.cx u64 
    push           pc_genmcl.dobinto_float.ax u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7277: 
    retproc                   
End


Proc pc_genmcl.dobinto_float32:
    param          pc_genmcl.dobinto_float32.p u64 
    param          pc_genmcl.dobinto_float32.opc i64 
    local          pc_genmcl.dobinto_float32.ax u64 
    local          pc_genmcl.dobinto_float32.bx u64 
    local          pc_genmcl.dobinto_float32.cx u64 
    procentry                 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_x32 
    setargs                   2 0
    push           4          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.dobinto_float32.ax u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dobinto_float32.bx u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dobinto_float32.cx u64 
    setargs                   3 0
    push           pc_genmcl.dobinto_float32.ax u64 
    push           pc_genmcl.dobinto_float32.cx u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.dobinto_float32.bx u64 
    push           pc_genmcl.dobinto_float32.cx u64 
    push           pc_genmcl.dobinto_float32.opc i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.dobinto_float32.cx u64 
    push           pc_genmcl.dobinto_float32.ax u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7279: 
    retproc                   
End


Proc pc_genmcl.doselectcc:
    param          pc_genmcl.doselectcc.p u64 
    local          pc_genmcl.doselectcc.ax u64 
    local          pc_genmcl.doselectcc.bx u64 
    local          pc_genmcl.doselectcc.cx u64 
    local          pc_genmcl.doselectcc.dx u64 
    local          pc_genmcl.doselectcc.cond i64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.doselectcc.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #7281      i64 
    setargs                   2 0
    push           pc_genmcl.doselectcc.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "selectcc" u64 
    callproc       &pc_libmcl.merrort 
#7281: 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.doselectcc.ax u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.doselectcc.bx u64 
    setargs                   3 0
    push           pc_genmcl.doselectcc.bx u64 
    push           pc_genmcl.doselectcc.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    push           1          i64 
    pop            pci_mcl.noxorclear u8 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.doselectcc.dx u64 
    setargs                   2 0
    push           8          i64 
    push           4          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.doselectcc.cx u64 
    push           0          i64 
    pop            pci_mcl.noxorclear u8 
    push           &pc_tables.psigned 
    push           pc_genmcl.doselectcc.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #7282      i64 
    push           &pc_genmcl.scondcodes 
    push           pc_genmcl.doselectcc.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u8 1 -73
    pop            pc_genmcl.doselectcc.cond i64 
    jump           #7283      
#7282: 
    push           &pc_genmcl.ucondcodes 
    push           pc_genmcl.doselectcc.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u8 1 -73
    pop            pc_genmcl.doselectcc.cond i64 
#7283: 
    setargs                   4 0
    push           pc_genmcl.doselectcc.dx u64 
    push           pc_genmcl.doselectcc.cx u64 
    setargs                   1 0
    push           pc_genmcl.doselectcc.cond i64 
    callfn         &pc_genmcl.reversemcond i64 
    push           16         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7284: 
    retproc                   
End


Proc pc_genmcl.reversemcond: i64
    param          pc_genmcl.reversemcond.cond i64 
    procentry                 
    push           pc_genmcl.reversemcond.cond i64 
    push           4          i64 
    casejumpeq     #7286      i64 0
    push           5          i64 
    casejumpeq     #7287      i64 0
    push           12         i64 
    casejumpeq     #7288      i64 0
    push           14         i64 
    casejumpeq     #7289      i64 0
    push           13         i64 
    casejumpeq     #7290      i64 0
    push           15         i64 
    casejumpeq     #7291      i64 0
    push           2          i64 
    casejumpeq     #7292      i64 0
    push           6          i64 
    casejumpeq     #7293      i64 0
    push           3          i64 
    casejumpeq     #7294      i64 0
    push           7          i64 
    casejumpeq     #7295      i64 0
    popstack                  i64 
    jump           #7296      
#7286: 
    push           5          i64 
    setret                    i64 
    jump           #7297      
    jump           #7298      
#7287: 
    push           5          i64 
    setret                    i64 
    jump           #7297      
    jump           #7298      
#7288: 
    push           13         i64 
    setret                    i64 
    jump           #7297      
    jump           #7298      
#7289: 
    push           15         i64 
    setret                    i64 
    jump           #7297      
    jump           #7298      
#7290: 
    push           12         i64 
    setret                    i64 
    jump           #7297      
    jump           #7298      
#7291: 
    push           14         i64 
    setret                    i64 
    jump           #7297      
    jump           #7298      
#7292: 
    push           3          i64 
    setret                    i64 
    jump           #7297      
    jump           #7298      
#7293: 
    push           7          i64 
    setret                    i64 
    jump           #7297      
    jump           #7298      
#7294: 
    push           2          i64 
    setret                    i64 
    jump           #7297      
    jump           #7298      
#7295: 
    push           3          i64 
    setret                    i64 
    jump           #7297      
    jump           #7298      
#7296: 
#7298: 
    push           0          i64 
    setret                    i64 
    jump           #7297      
#7297: 
    retfn                     i64 
End


Proc pc_genmcl.do_divrem:
    param          pc_genmcl.do_divrem.p u64 
    param          pc_genmcl.do_divrem.issigned i64 
    param          pc_genmcl.do_divrem.isdiv i64 
    local          pc_genmcl.do_divrem.opc i64 
    local          pc_genmcl.do_divrem.n i64 
    local          pc_genmcl.do_divrem.shifts i64 
    procentry                 
    setargs                   2 0
    push           0          i64 
    push           2          i64 
    callproc       &pc_stackmcl.loadopnd 
    push           pc_genmcl.do_divrem.isdiv i64 
    jumpfalse      #7300      i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #7300      i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    pop            pc_genmcl.do_divrem.n i64 
    push           pc_genmcl.do_divrem.n i64 
    push           0          i64 
    casejumpeq     #7301      i64 0
    push           1          i64 
    casejumpeq     #7302      i64 0
    popstack                  i64 
    jump           #7303      
#7301: 
    setargs                   2 0
    push           ""         u64 
    push           "Divide by zero" u64 
    callproc       &pc_libmcl.merror 
    jump           #7304      
#7302: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #7305      
    jump           #7304      
#7303: 
    setargs                   1 0
    push           pc_genmcl.do_divrem.n i64 
    callfn         &pc_libmcl.ispoweroftwo i64 
    pop            pc_genmcl.do_divrem.shifts i64 
    push           pc_genmcl.do_divrem.shifts i64 
    jumpfalse      #7306      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.do_divrem.shifts i64 
    callfn         &pc_libmcl.mgenint u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    startmult                 
    push           pc_genmcl.do_divrem.issigned i64 
    jumpfalse      #7307      i64 
    push           45         i64 
    resetmult                 
    jump           #7308      
#7307: 
    push           46         i64 
    endmult                   
#7308: 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #7305      
#7306: 
#7304: 
#7300: 
    setargs                   2 0
    push           0          i64 
    push           1          i64 
    callproc       &pc_stackmcl.loadopnd 
    setargs                   0 0
    callproc       &pc_genmcl.saverdx 
    setargs                   0 0
    callproc       &pc_genmcl.fixdivopnds 
    push           pc_genmcl.do_divrem.issigned i64 
    jumpfalse      #7309      i64 
    setargs                   3 0
    push           0          u64 
    push           0          u64 
    push           58         i64 
    callproc       &pc_libmcl.genmc 
    push           37         i64 
    pop            pc_genmcl.do_divrem.opc i64 
    jump           #7310      
#7309: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           12         i64 
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   2 0
    push           8          i64 
    push           12         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           41         i64 
    callproc       &pc_libmcl.genmc 
    push           38         i64 
    pop            pc_genmcl.do_divrem.opc i64 
#7310: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           pc_genmcl.do_divrem.p u64 
    push           4          
    pushptroff                i32 1 0
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    push           pc_genmcl.do_divrem.opc i64 
    callproc       &pc_libmcl.genmc 
    push           pc_genmcl.do_divrem.isdiv i64 
    jumptrue       #7311      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           12         i64 
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           28         i64 
    callproc       &pc_libmcl.genmc 
#7311: 
    setargs                   0 0
    callproc       &pc_genmcl.restorerdx 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7305: 
    retproc                   
End


Proc pc_genmcl.fixdivopnds:
    local          pc_genmcl.fixdivopnds.regx i64 
    local          pc_genmcl.fixdivopnds.regy i64 
    local          pc_genmcl.fixdivopnds.zop i64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_genmcl.fixdivopnds.regx i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_genmcl.fixdivopnds.regy i64 
    push           pc_genmcl.fixdivopnds.regx i64 
    push           1          i64 
    jumpne         #7313      i64 
    jump           #7314      
#7313: 
    push           pc_genmcl.fixdivopnds.regy i64 
    push           1          i64 
    jumpne         #7315      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    push           28         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    jump           #7314      
#7315: 
    push           &pci_mcl.regset 
    push           1          i64 
    pushptroff                u8 1 -1
    push           0          i64 
    jumpne         #7316      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           28         i64 
    callproc       &pc_libmcl.genmc 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_genmcl.fixdivopnds.regx i64 
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    push           1          i64 
    push           &pci_mcl.regset 
    push           1          i64 
    popptroff                 u8 1 -1
    jump           #7314      
#7316: 
#7317: 
    push           pci_mcl.noperands i64 
    pop            pc_genmcl.fixdivopnds.zop i64 
    push           pc_genmcl.fixdivopnds.zop i64 
    push           1          i64 
    jumplt         #7318      i64 
#7319: 
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.fixdivopnds.zop i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #7320      i64 
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.fixdivopnds.zop i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #7320      i64 
    jump           #7318      
#7320: 
#7321: 
    fordown        #7319      i64 1
    opnd           pc_genmcl.fixdivopnds.zop 
    opnd           1          
#7318: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           28         i64 
    callproc       &pc_libmcl.genmc 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    addrefoff                 u64 1 0
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.fixdivopnds.zop i64 
    addrefoff                 block:15 15 -15
    push           2          
    addrefoff                 u64 1 0
    swap                      u8 
#7314: 
    retproc                   
End


Proc pc_genmcl.saverdx:
    procentry                 
    push           pci_mcl.inf_r11used i64 
    jumpfalse      #7323      i64 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           12         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
#7323: 
#7324: 
    retproc                   
End


Proc pc_genmcl.restorerdx:
    procentry                 
    push           pci_mcl.inf_r11used i64 
    jumpfalse      #7326      i64 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           12         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           14         i64 
    callproc       &pc_libmcl.genmc 
#7326: 
#7327: 
    retproc                   
End


Proc pc_genmcl.doincr:
    param          pc_genmcl.doincr.p u64 
    param          pc_genmcl.doincr.incrop i64 
    param          pc_genmcl.doincr.addop i64 
    procentry                 
    push           pc_genmcl.doincr.p u64 
    push           16         
    pushptroff                i32 1 0
    push           1          i64 
    jumpne         #7329      i64 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.ismemaddr i64 
    jumpfalse      #7330      i64 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           pc_genmcl.doincr.incrop i64 
    callproc       &pc_libmcl.genmc 
    jump           #7331      
#7330: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    push           pc_genmcl.doincr.incrop i64 
    callproc       &pc_libmcl.genmc 
#7331: 
    jump           #7332      
#7329: 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.ismemaddr i64 
    jumpfalse      #7333      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.doincr.p u64 
    push           16         
    pushptroff                i32 1 0
    callfn         &pc_libmcl.mgenint u64 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           pc_genmcl.doincr.addop i64 
    callproc       &pc_libmcl.genmc 
    jump           #7334      
#7333: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.doincr.p u64 
    push           16         
    pushptroff                i32 1 0
    callfn         &pc_libmcl.mgenint u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    push           pc_genmcl.doincr.addop i64 
    callproc       &pc_libmcl.genmc 
#7334: 
#7332: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7335: 
    retproc                   
End


Proc pc_genmcl.doincrload:
    param          pc_genmcl.doincrload.p u64 
    param          pc_genmcl.doincrload.incrop i64 
    param          pc_genmcl.doincrload.addop i64 
    local          pc_genmcl.doincrload.ax u64 
    local          pc_genmcl.doincrload.mx u64 
    procentry                 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.ismemaddr i64 
    jumpfalse      #7337      i64 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    pop            pc_genmcl.doincrload.mx u64 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_genmcl.makeregopnd u64 
    pop            pc_genmcl.doincrload.ax u64 
    jump           #7338      
#7337: 
    setargs                   2 0
    push           pc_genmcl.doincrload.p u64 
    push           4          
    pushptroff                i32 1 0
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.doincrload.mx u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.doincrload.ax u64 
#7338: 
    push           pc_genmcl.doincrload.p u64 
    push           16         
    pushptroff                i32 1 0
    push           1          i64 
    jumpne         #7339      i64 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.doincrload.mx u64 
    push           pc_genmcl.doincrload.incrop i64 
    callproc       &pc_libmcl.genmc 
    jump           #7340      
#7339: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.doincrload.p u64 
    push           16         
    pushptroff                i32 1 0
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.doincrload.mx u64 
    push           pc_genmcl.doincrload.addop i64 
    callproc       &pc_libmcl.genmc 
#7340: 
    push           &pc_tables.pcat 
    push           pc_genmcl.doincrload.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           4          i64 
    jumpne         #7341      i64 
    setargs                   3 0
    push           pc_genmcl.doincrload.mx u64 
    push           pc_genmcl.doincrload.ax u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_genmcl.doincrload.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #7342      i64 
    push           19         i64 
    resetmult                 
    jump           #7343      
#7342: 
    push           20         i64 
    endmult                   
#7343: 
    callproc       &pc_libmcl.genmc 
    jump           #7344      
#7341: 
    setargs                   3 0
    push           pc_genmcl.doincrload.mx u64 
    push           pc_genmcl.doincrload.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
#7344: 
#7345: 
    retproc                   
End


Proc pc_genmcl.doloadincr:
    param          pc_genmcl.doloadincr.p u64 
    param          pc_genmcl.doloadincr.incrop i64 
    param          pc_genmcl.doloadincr.addop i64 
    local          pc_genmcl.doloadincr.ax u64 
    local          pc_genmcl.doloadincr.mx u64 
    procentry                 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.ismemaddr i64 
    jumpfalse      #7347      i64 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    pop            pc_genmcl.doloadincr.mx u64 
    jump           #7348      
#7347: 
    setargs                   2 0
    push           pc_genmcl.doloadincr.p u64 
    push           4          
    pushptroff                i32 1 0
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.doloadincr.mx u64 
#7348: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_d64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.doloadincr.ax u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.doloadincr.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           4          i64 
    jumpne         #7349      i64 
    setargs                   3 0
    push           pc_genmcl.doloadincr.mx u64 
    push           pc_genmcl.doloadincr.ax u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_genmcl.doloadincr.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #7350      i64 
    push           19         i64 
    resetmult                 
    jump           #7351      
#7350: 
    push           20         i64 
    endmult                   
#7351: 
    callproc       &pc_libmcl.genmc 
    jump           #7352      
#7349: 
    setargs                   3 0
    push           pc_genmcl.doloadincr.mx u64 
    push           pc_genmcl.doloadincr.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
#7352: 
    push           pc_genmcl.doloadincr.p u64 
    push           16         
    pushptroff                i32 1 0
    push           1          i64 
    jumpne         #7353      i64 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.doloadincr.mx u64 
    push           pc_genmcl.doloadincr.incrop i64 
    callproc       &pc_libmcl.genmc 
    jump           #7354      
#7353: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.doloadincr.p u64 
    push           16         
    pushptroff                i32 1 0
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.doloadincr.mx u64 
    push           pc_genmcl.doloadincr.addop i64 
    callproc       &pc_libmcl.genmc 
#7354: 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7355: 
    retproc                   
End


Proc pc_genmcl.dobin_i128:
    param          pc_genmcl.dobin_i128.p u64 
    param          pc_genmcl.dobin_i128.opc1 i64 
    param          pc_genmcl.dobin_i128.opc2 i64 
    local          pc_genmcl.dobin_i128.axl u64 
    local          pc_genmcl.dobin_i128.axh u64 
    local          pc_genmcl.dobin_i128.bxl u64 
    local          pc_genmcl.dobin_i128.bxh u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dobin_i128.axl u64 
    setargs                   2 0
    push           8          i64 
    push           4          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dobin_i128.axh u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dobin_i128.bxl u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dobin_i128.bxh u64 
    setargs                   3 0
    push           pc_genmcl.dobin_i128.bxl u64 
    push           pc_genmcl.dobin_i128.axl u64 
    push           pc_genmcl.dobin_i128.opc1 i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.dobin_i128.bxh u64 
    push           pc_genmcl.dobin_i128.axh u64 
    push           pc_genmcl.dobin_i128.opc2 i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7357: 
    retproc                   
End


Proc pc_genmcl.dojumpcc_i128:
    param          pc_genmcl.dojumpcc_i128.p u64 
    local          pc_genmcl.dojumpcc_i128.axlow u64 
    local          pc_genmcl.dojumpcc_i128.axhigh u64 
    local          pc_genmcl.dojumpcc_i128.bxlow u64 
    local          pc_genmcl.dojumpcc_i128.bxhigh u64 
    local          pc_genmcl.dojumpcc_i128.cx u64 
    local          pc_genmcl.dojumpcc_i128.dx u64 
    local          pc_genmcl.dojumpcc_i128.lxtrue u64 
    local          pc_genmcl.dojumpcc_i128.lxfalse u64 
    procentry                 
    push           pc_genmcl.dojumpcc_i128.p u64 
    push           3          
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #7359      i64 
    push           pc_genmcl.dojumpcc_i128.p u64 
    push           1          
    pushptroff                u8 1 0
    push           53         i64 
    setjumpeq      #7359      i64 
    push           54         i64 
    setjumpeqx     #7359      i64 
    setargs                   1 0
    push           pc_genmcl.dojumpcc_i128.p u64 
    callproc       &pc_genmcl.dojumpcc_u128 
    jump           #7360      
#7359: 
    setargs                   1 0
    push           pc_genmcl.dojumpcc_i128.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    pop            pc_genmcl.dojumpcc_i128.lxtrue u64 
    setargs                   2 0
    push           8          i64 
    push           4          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dojumpcc_i128.axhigh u64 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dojumpcc_i128.axlow u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dojumpcc_i128.bxhigh u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dojumpcc_i128.bxlow u64 
    push           pc_genmcl.dojumpcc_i128.p u64 
    push           1          
    pushptroff                u8 1 0
    push           53         i64 
    casejumpeq     #7361      i64 0
    push           54         i64 
    casejumpeq     #7362      i64 0
    popstack                  i64 
    jump           #7363      
#7361: 
    setargs                   3 0
    push           pc_genmcl.dojumpcc_i128.bxlow u64 
    push           pc_genmcl.dojumpcc_i128.axlow u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_libmcl.mgenlabel u64 
    store          pc_genmcl.dojumpcc_i128.lxfalse u64 
    push           5          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.dojumpcc_i128.bxhigh u64 
    push           pc_genmcl.dojumpcc_i128.axhigh u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_i128.lxtrue u64 
    push           4          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_i128.lxfalse u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    jump           #7364      
#7362: 
    setargs                   3 0
    push           pc_genmcl.dojumpcc_i128.bxlow u64 
    push           pc_genmcl.dojumpcc_i128.axlow u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_i128.lxtrue u64 
    push           5          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.dojumpcc_i128.bxhigh u64 
    push           pc_genmcl.dojumpcc_i128.axhigh u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_i128.lxtrue u64 
    push           5          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    jump           #7364      
#7363: 
    setargs                   3 0
    push           pc_genmcl.dojumpcc_i128.bxlow u64 
    push           pc_genmcl.dojumpcc_i128.axlow u64 
    push           30         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.dojumpcc_i128.bxhigh u64 
    push           pc_genmcl.dojumpcc_i128.axhigh u64 
    push           32         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pci_mcl.zero_opnd u64 
    push           pc_genmcl.dojumpcc_i128.axhigh u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_tables.psigned 
    push           pc_genmcl.dojumpcc_i128.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #7365      i64 
    push           pc_genmcl.dojumpcc_i128.p u64 
    push           1          
    pushptroff                u8 1 0
    push           55         i64 
    casejumpeq     #7366      i64 0
    push           56         i64 
    casejumpeq     #7367      i64 0
    push           58         i64 
    casejumpeq     #7368      i64 0
    push           57         i64 
    casejumpeq     #7369      i64 0
    popstack                  i64 
    jump           #7370      
#7366: 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_i128.lxtrue u64 
    push           12         i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    jump           #7371      
#7367: 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_i128.lxtrue u64 
    push           12         i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.dojumpcc_i128.axhigh u64 
    push           pc_genmcl.dojumpcc_i128.axlow u64 
    push           40         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_i128.lxtrue u64 
    push           4          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    jump           #7371      
#7368: 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_libmcl.mgenlabel u64 
    store          pc_genmcl.dojumpcc_i128.lxfalse u64 
    push           12         i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.dojumpcc_i128.axhigh u64 
    push           pc_genmcl.dojumpcc_i128.axlow u64 
    push           40         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_i128.lxtrue u64 
    push           5          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_i128.lxfalse u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    jump           #7371      
#7369: 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_i128.lxtrue u64 
    push           13         i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    jump           #7371      
#7370: 
#7371: 
    jump           #7372      
#7365: 
    setargs                   2 0
    push           pc_genmcl.dojumpcc_i128.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "jumpcc/rel" u64 
    callproc       &pc_libmcl.merrort 
#7372: 
#7364: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7360: 
    retproc                   
End


Proc pc_genmcl.dojumpcc_u128:
    param          pc_genmcl.dojumpcc_u128.p u64 
    local          pc_genmcl.dojumpcc_u128.lxtrue u64 
    local          pc_genmcl.dojumpcc_u128.lxfalse u64 
    local          pc_genmcl.dojumpcc_u128.ax1 u64 
    local          pc_genmcl.dojumpcc_u128.bx1 u64 
    local          pc_genmcl.dojumpcc_u128.ax2 u64 
    local          pc_genmcl.dojumpcc_u128.bx2 u64 
    local          pc_genmcl.dojumpcc_u128.cond1 i64 
    local          pc_genmcl.dojumpcc_u128.cond2 i64 
    local          pc_genmcl.dojumpcc_u128.cond3 i64 
    procentry                 
    push           pc_genmcl.dojumpcc_u128.p u64 
    push           1          
    pushptroff                u8 1 0
    push           58         i64 
    casejumpeq     #7374      i64 0
    push           57         i64 
    casejumpeq     #7375      i64 0
    push           55         i64 
    casejumpeq     #7376      i64 0
    push           56         i64 
    casejumpeq     #7377      i64 0
    popstack                  i64 
    jump           #7378      
#7374: 
    push           7          i64 
    pop            pc_genmcl.dojumpcc_u128.cond1 i64 
    push           2          i64 
    pop            pc_genmcl.dojumpcc_u128.cond2 i64 
    push           7          i64 
    pop            pc_genmcl.dojumpcc_u128.cond3 i64 
    jump           #7379      
#7375: 
    push           7          i64 
    pop            pc_genmcl.dojumpcc_u128.cond1 i64 
    push           2          i64 
    pop            pc_genmcl.dojumpcc_u128.cond2 i64 
    push           3          i64 
    pop            pc_genmcl.dojumpcc_u128.cond3 i64 
    jump           #7379      
#7376: 
    push           2          i64 
    pop            pc_genmcl.dojumpcc_u128.cond1 i64 
    push           7          i64 
    pop            pc_genmcl.dojumpcc_u128.cond2 i64 
    push           2          i64 
    pop            pc_genmcl.dojumpcc_u128.cond3 i64 
    jump           #7379      
#7377: 
    push           2          i64 
    pop            pc_genmcl.dojumpcc_u128.cond1 i64 
    push           7          i64 
    pop            pc_genmcl.dojumpcc_u128.cond2 i64 
    push           6          i64 
    pop            pc_genmcl.dojumpcc_u128.cond3 i64 
    jump           #7379      
#7378: 
    setargs                   2 0
    push           ""         u64 
    push           "JCC/U128" u64 
    callproc       &pc_libmcl.merror 
#7379: 
    setargs                   1 0
    push           pc_genmcl.dojumpcc_u128.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    pop            pc_genmcl.dojumpcc_u128.lxtrue u64 
    setargs                   1 0
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    callfn         &pc_libmcl.mgenlabel u64 
    pop            pc_genmcl.dojumpcc_u128.lxfalse u64 
    setargs                   2 0
    push           8          i64 
    push           4          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dojumpcc_u128.ax2 u64 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dojumpcc_u128.ax1 u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dojumpcc_u128.bx2 u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dojumpcc_u128.bx1 u64 
    setargs                   3 0
    push           pc_genmcl.dojumpcc_u128.bx2 u64 
    push           pc_genmcl.dojumpcc_u128.ax2 u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_u128.lxtrue u64 
    push           pc_genmcl.dojumpcc_u128.cond1 i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_u128.lxfalse u64 
    push           pc_genmcl.dojumpcc_u128.cond2 i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.dojumpcc_u128.bx1 u64 
    push           pc_genmcl.dojumpcc_u128.ax1 u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_u128.lxtrue u64 
    push           pc_genmcl.dojumpcc_u128.cond3 i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_u128.lxfalse u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7380: 
    retproc                   
End


Proc pc_genmcl.do_syscall:
    param          pc_genmcl.do_syscall.fnindex i64 
    param          pc_genmcl.do_syscall.nargs i64 
    param          pc_genmcl.do_syscall.retcat i64 
    local          pc_genmcl.do_syscall.nslots i64 
    local          pc_genmcl.do_syscall.av_1 i64 
    procentry                 
    push           pc_genmcl.do_syscall.nargs i64 
    pop            pci_mcl.sa_nargs i64 
    setargs                   1 0
    push           0          u64 
    callproc       &pc_genmcl.px_setargs 
    setargs                   2 0
    push           0          i64 
    push           0          u64 
    callfn         &pc_genmcl.do_pushparams i64 
    pop            pc_genmcl.do_syscall.nslots i64 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    setargs                   1 0
    push           pc_genmcl.do_syscall.fnindex i64 
    callfn         &pc_libmcl.getrtsproclabel i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           22         i64 
    callproc       &pc_libmcl.genmc 
    push           8          i64 
    push           pci_mcl.mccodex u64 
    push           8          
    pushptroff                u64 1 0
    push           8          
    popptroff                 u8 1 0
#7382: 
    push           pci_mcl.sa_nargs i64 
    pop            pc_genmcl.do_syscall.av_1 i64 
    push           pc_genmcl.do_syscall.av_1 i64 
    push           0          i64 
    jumple         #7383      i64 
#7384: 
    setargs                   0 0
    callproc       &pc_stackmcl.poparg 
#7385: 
    to             #7384      
    opnd           pc_genmcl.do_syscall.av_1 
#7383: 
    setargs                   1 0
    push           pc_genmcl.do_syscall.nslots i64 
    callproc       &pc_stackmcl.popslots 
    setargs                   1 0
    push           pc_genmcl.do_syscall.retcat i64 
    callproc       &pc_genmcl.getretvalue_bycat 
#7386: 
    retproc                   
End


Proc pc_genmcl.getretvalue_bycat:
    param          pc_genmcl.getretvalue_bycat.cat i64 
    procentry                 
    push           pc_genmcl.getretvalue_bycat.cat i64 
    push           0          i64 
    casejumpeq     #7388      i64 0
    push           1          i64 
    casejumpeq     #7389      i64 0
    push           3          i64 
    casejumpeq     #7390      i64 0
    push           2          i64 
    casejumpeq     #7391      i64 0
    push           5          i64 
    casejumpeq     #7392      i64 0
    popstack                  i64 
    jump           #7393      
#7388: 
    jump           #7394      
    jump           #7395      
#7389: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.addreg0 
    jump           #7395      
#7390: 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.addxreg0 
    jump           #7395      
#7391: 
    setargs                   2 0
    push           3          i64 
    push           1          i64 
    callproc       &pc_stackmcl.addxreg0 
    jump           #7395      
#7392: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.addwidereg0 
    jump           #7395      
#7393: 
    setargs                   2 0
    push           ""         u64 
    push           "getval bycat" u64 
    callproc       &pc_libmcl.merror 
#7395: 
#7394: 
    retproc                   
End


Proc pc_genmcl.px_pushlabel:
    param          pc_genmcl.px_pushlabel.p u64 
    procentry                 
    push           pc_genmcl.px_pushlabel.p u64 
    pushptr                   u8 
    push           3          i64 
    jumpeq         #7397      i64 
    setargs                   2 0
    push           ""         u64 
    push           "pushlabel" u64 
    callproc       &pc_libmcl.merror 
#7397: 
    setargs                   1 0
    push           pc_genmcl.px_pushlabel.p u64 
    push           8          
    pushptroff                i64 1 0
    callproc       &pc_stackmcl.addlabeladdr 
#7398: 
    retproc                   
End


Proc pc_genmcl.do_shiftnto:
    param          pc_genmcl.do_shiftnto.p u64 
    param          pc_genmcl.do_shiftnto.opc i64 
    local          pc_genmcl.do_shiftnto.px u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.do_shiftnto.px u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #7400      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.do_shiftnto.px u64 
    push           pc_genmcl.do_shiftnto.opc i64 
    callproc       &pc_libmcl.genmc 
    jump           #7401      
#7400: 
    push           pci_mcl.inf_r10used i64 
    jumpfalse      #7402      i64 
    setargs                   2 0
    push           ""         u64 
    push           "shiftto:cl in use" u64 
    callproc       &pc_libmcl.merror 
#7402: 
    setargs                   2 0
    push           11         i64 
    push           1          i64 
    callproc       &pc_stackmcl.loadparam 
    setargs                   3 0
    setargs                   2 0
    push           1          i64 
    push           11         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           pc_genmcl.do_shiftnto.px u64 
    push           pc_genmcl.do_shiftnto.opc i64 
    callproc       &pc_libmcl.genmc 
#7401: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7403: 
    retproc                   
End


Proc pc_genmcl.domax_float:
    param          pc_genmcl.domax_float.opc i64 
    local          pc_genmcl.domax_float.ax u64 
    local          pc_genmcl.domax_float.bx u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.domax_float.ax u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.domax_float.bx u64 
    setargs                   3 0
    push           pc_genmcl.domax_float.bx u64 
    push           pc_genmcl.domax_float.ax u64 
    push           pc_genmcl.domax_float.opc i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7405: 
    retproc                   
End


Proc pc_genmcl.domax_int:
    param          pc_genmcl.domax_int.cond i64 
    local          pc_genmcl.domax_int.ax u64 
    local          pc_genmcl.domax_int.bx u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.domax_int.ax u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.domax_int.bx u64 
    setargs                   3 0
    push           pc_genmcl.domax_int.bx u64 
    push           pc_genmcl.domax_int.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           pc_genmcl.domax_int.bx u64 
    push           pc_genmcl.domax_int.ax u64 
    push           pc_genmcl.domax_int.cond i64 
    push           16         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7407: 
    retproc                   
End


Proc pc_genmcl.domaxto_r64:
    param          pc_genmcl.domaxto_r64.cond i64 
    local          pc_genmcl.domaxto_r64.px u64 
    local          pc_genmcl.domaxto_r64.ax u64 
    local          pc_genmcl.domaxto_r64.bx u64 
    local          pc_genmcl.domaxto_r64.lx u64 
    local          pc_genmcl.domaxto_r64.lab i64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.domaxto_r64.px u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.domaxto_r64.bx u64 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_x64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.domaxto_r64.ax u64 
    setargs                   3 0
    push           pc_genmcl.domaxto_r64.px u64 
    push           pc_genmcl.domaxto_r64.ax u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.domaxto_r64.bx u64 
    push           pc_genmcl.domaxto_r64.ax u64 
    push           73         i64 
    callproc       &pc_libmcl.genmc 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pc_genmcl.domaxto_r64.lab i64 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.domaxto_r64.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    store          pc_genmcl.domaxto_r64.lx u64 
    push           pc_genmcl.domaxto_r64.cond i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.domaxto_r64.bx u64 
    push           pc_genmcl.domaxto_r64.px u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.domaxto_r64.lx u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7409: 
    retproc                   
End


Proc pc_genmcl.domaxto_r32:
    param          pc_genmcl.domaxto_r32.cond i64 
    local          pc_genmcl.domaxto_r32.px u64 
    local          pc_genmcl.domaxto_r32.ax u64 
    local          pc_genmcl.domaxto_r32.bx u64 
    local          pc_genmcl.domaxto_r32.lx u64 
    local          pc_genmcl.domaxto_r32.lab i64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.domaxto_r32.px u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.domaxto_r32.bx u64 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_x32 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.domaxto_r32.ax u64 
    setargs                   3 0
    push           pc_genmcl.domaxto_r32.px u64 
    push           pc_genmcl.domaxto_r32.ax u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.domaxto_r32.bx u64 
    push           pc_genmcl.domaxto_r32.ax u64 
    push           72         i64 
    callproc       &pc_libmcl.genmc 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pc_genmcl.domaxto_r32.lab i64 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.domaxto_r32.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    store          pc_genmcl.domaxto_r32.lx u64 
    push           pc_genmcl.domaxto_r32.cond i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.domaxto_r32.bx u64 
    push           pc_genmcl.domaxto_r32.px u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.domaxto_r32.lx u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7411: 
    retproc                   
End


Proc pc_genmcl.domaxto_int:
    param          pc_genmcl.domaxto_int.cond i64 
    local          pc_genmcl.domaxto_int.ax u64 
    local          pc_genmcl.domaxto_int.bx u64 
    local          pc_genmcl.domaxto_int.lx u64 
    local          pc_genmcl.domaxto_int.lab i64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.domaxto_int.ax u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.domaxto_int.bx u64 
    setargs                   3 0
    push           pc_genmcl.domaxto_int.bx u64 
    push           pc_genmcl.domaxto_int.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pc_genmcl.domaxto_int.lab i64 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.domaxto_int.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    store          pc_genmcl.domaxto_int.lx u64 
    push           pc_genmcl.domaxto_int.cond i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.domaxto_int.bx u64 
    push           pc_genmcl.domaxto_int.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.domaxto_int.lx u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7413: 
    retproc                   
End


Proc pc_genmcl.dosetfntable:
    procentry                 
    push           pci_mcl.lab_funcnametable i64 
    push           0          i64 
    jumpne         #7415      i64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pci_mcl.lab_funcnametable i64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pci_mcl.lab_funcaddrtable i64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pci_mcl.lab_funcnprocs i64 
#7415: 
#7416: 
    retproc                   
End


Proc pc_genmcl.loadtoreg:
    param          pc_genmcl.loadtoreg.rx u64 
    param          pc_genmcl.loadtoreg.ax u64 
    param          pc_genmcl.loadtoreg.m i64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.loadtoreg.m i64 
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #7418      i64 
    setargs                   3 0
    push           pc_genmcl.loadtoreg.ax u64 
    push           pc_genmcl.loadtoreg.rx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #7419      
#7418: 
    push           &pc_tables.psigned 
    push           pc_genmcl.loadtoreg.m i64 
    pushptroff                u8 1 0
    jumpfalse      #7420      i64 
    setargs                   3 0
    push           pc_genmcl.loadtoreg.ax u64 
    push           pc_genmcl.loadtoreg.rx u64 
    push           19         i64 
    callproc       &pc_libmcl.genmc 
    jump           #7419      
#7420: 
    setargs                   3 0
    push           pc_genmcl.loadtoreg.ax u64 
    push           pc_genmcl.loadtoreg.rx u64 
    push           20         i64 
    callproc       &pc_libmcl.genmc 
#7419: 
#7421: 
    retproc                   
End


Proc pc_genmcl.storefromreg:
    param          pc_genmcl.storefromreg.ax u64 
    param          pc_genmcl.storefromreg.rx u64 
    param          pc_genmcl.storefromreg.size i64 
    procentry                 
    setargs                   3 0
    setargs                   2 0
    push           pc_genmcl.storefromreg.size i64 
    push           pc_genmcl.storefromreg.rx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           pc_genmcl.storefromreg.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
#7423: 
    retproc                   
End


Proc pc_genmcl.domaths:
    param          pc_genmcl.domaths.p u64 
    param          pc_genmcl.domaths.opname u64 
    local          pc_genmcl.domaths.nslots i64 
    procentry                 
    push           1          i64 
    push           pc_genmcl.domaths.p u64 
    push           16         
    popptroff                 i32 1 0
    setargs                   1 0
    push           pc_genmcl.domaths.p u64 
    callproc       &pc_genmcl.px_setargs 
    setargs                   2 0
    push           0          i64 
    push           pc_genmcl.domaths.p u64 
    callfn         &pc_genmcl.do_pushparams i64 
    pop            pc_genmcl.domaths.nslots i64 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.domaths.opname u64 
    callfn         &pc_libmcl.mgenextname u64 
    push           22         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.poparg 
    setargs                   1 0
    push           pc_genmcl.domaths.nslots i64 
    callproc       &pc_stackmcl.popslots 
    setargs                   1 0
    push           pc_genmcl.domaths.p u64 
    callproc       &pc_genmcl.dogetretvalue 
#7425: 
    retproc                   
End


Proc pc_libmcl.mclinit:
    local          pc_libmcl.mclinit.a u64 
    local          pc_libmcl.mclinit.r i64 
    local          pc_libmcl.mclinit.s i64 
    local          pc_libmcl.mclinit.av_1 i64 
    local          pc_libmcl.mclinit.i i64 
    procentry                 
#7427: 
    push           1          i64 
    pop            pc_libmcl.mclinit.r i64 
#7428: 
    setargs                   2 0
    push           1          i64 
    push           pc_libmcl.mclinit.r i64 
    callfn         &pc_libmcl.mgenreg0 u64 
    push           &pci_mcl.regtable 
    push           pc_libmcl.mclinit.r i64 
    addrefoff                 block:128 128 -128
    push           1          i64 
    popptroff                 u64 8 -8
    setargs                   2 0
    push           2          i64 
    push           pc_libmcl.mclinit.r i64 
    callfn         &pc_libmcl.mgenreg0 u64 
    push           &pci_mcl.regtable 
    push           pc_libmcl.mclinit.r i64 
    addrefoff                 block:128 128 -128
    push           2          i64 
    popptroff                 u64 8 -8
    setargs                   2 0
    push           4          i64 
    push           pc_libmcl.mclinit.r i64 
    callfn         &pc_libmcl.mgenreg0 u64 
    push           &pci_mcl.regtable 
    push           pc_libmcl.mclinit.r i64 
    addrefoff                 block:128 128 -128
    push           4          i64 
    popptroff                 u64 8 -8
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.mclinit.r i64 
    callfn         &pc_libmcl.mgenreg0 u64 
    push           &pci_mcl.regtable 
    push           pc_libmcl.mclinit.r i64 
    addrefoff                 block:128 128 -128
    push           8          i64 
    popptroff                 u64 8 -8
    setargs                   2 0
    push           16         i64 
    push           pc_libmcl.mclinit.r i64 
    callfn         &pc_libmcl.mgenreg0 u64 
    push           &pci_mcl.regtable 
    push           pc_libmcl.mclinit.r i64 
    addrefoff                 block:128 128 -128
    push           16         i64 
    popptroff                 u64 8 -8
    push           &pci_mcl.regtable 
    push           pc_libmcl.mclinit.r i64 
    addrefoff                 block:128 128 -128
    push           8          i64 
    pushptroff                u64 8 -8
    push           &pc_libmcl.rd 
    push           pc_libmcl.mclinit.r i64 
    popptroff                 u64 8 -16
#7429: 
    forup          #7428      i64 1
    opnd           pc_libmcl.mclinit.r 
    opnd           16         
#7430: 
    setargs                   2 0
    push           8          i64 
    push           0          i64 
    callfn         &pc_libmcl.mgenint0 u64 
    pop            pci_mcl.zero_opnd u64 
#7431: 
    push           0          i64 
    pop            pc_libmcl.mclinit.i i64 
#7432: 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.mclinit.i i64 
    callfn         &pc_libmcl.mgenint0 u64 
    push           &pci_mcl.smallinttable 
    push           pc_libmcl.mclinit.i i64 
    popptroff                 u64 8 0
#7433: 
    forup          #7432      i64 1
    opnd           pc_libmcl.mclinit.i 
    opnd           32         
#7434: 
#7435: 
    push           -128       i64 
    pop            pc_libmcl.mclinit.i i64 
    push           64         i64 
    pop            pc_libmcl.mclinit.av_1 i64 
    push           pc_libmcl.mclinit.av_1 i64 
    push           -128       i64 
    jumplt         #7436      i64 
#7437: 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mclinit.a u64 
    push           3          i64 
    push           pc_libmcl.mclinit.a u64 
    push           9          
    popptroff                 u8 1 0
    push           15         i64 
    push           pc_libmcl.mclinit.a u64 
    push           10         
    popptroff                 u8 1 0
    push           8          i64 
    push           pc_libmcl.mclinit.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mclinit.i i64 
    push           pc_libmcl.mclinit.a u64 
    push           14         
    popptroff                 i32 1 0
    push           pc_libmcl.mclinit.a u64 
    push           &pci_mcl.frameregtable 
    push           pc_libmcl.mclinit.i i64 
    popptroff                 u64 8 1024
#7438: 
    forup          #7437      i64 1
    opnd           pc_libmcl.mclinit.i 
    opnd           pc_libmcl.mclinit.av_1 
#7436: 
    setargs                   2 0
    push           8          i64 
    push           15         i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pci_mcl.dframeopnd u64 
    setargs                   2 0
    push           8          i64 
    push           16         i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pci_mcl.dstackopnd u64 
    setargs                   0 0
    callproc       &pc_libmcl.initmcdest 
    setargs                   2 0
    push           1          i64 
    push           67         i64 
    callproc       &pc_libmcl.setsegment 
    setargs                   1 0
    push           8192       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pci_mcl.stringtable u64 
    setargs                   1 0
    push           4096       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pci_mcl.stringlabtable u64 
    setargs                   1 0
    push           128        i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pci_mcl.realtable u64 
    setargs                   1 0
    push           64         i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pci_mcl.reallabtable u64 
    push           0          i64 
    pop            pci_mcl.nstrings i64 
    push           0          i64 
    pop            pci_mcl.nreals i64 
    push           1024       i64 
    pop            pci_mcl.stringtablesize i64 
    push           16         i64 
    pop            pci_mcl.realtablesize i64 
    push           &pci_mcl.pclopndstack 
    push           2985       
    addrefoff                 u8 1 0
    pop            pci_mcl.pclstack u64 
    push           0          i64 
    pop            pci_mcl.lab_funcnametable i64 
    push           0          i64 
    pop            pci_mcl.lab_funcaddrtable i64 
#7439: 
    retproc                   
End


Proc pc_libmcl.initmcdest:
    procentry                 
    push           0          u64 
    store          pci_mcl.mccodex u64 
    pop            pci_mcl.mccode u64 
    push           &pci_mcl.rtsproclabels 
    clear                     block:48 
#7441: 
    retproc                   
End


Proc pc_libmcl.genmc:
    param          pc_libmcl.genmc.opcode i64 
    param          pc_libmcl.genmc.a u64 
    param          pc_libmcl.genmc.b u64 
    local          pc_libmcl.genmc.m u64 
    local          pc_libmcl.genmc.oldm u64 
    local          pc_libmcl.genmc.labno i64 
    procentry                 
    setargs                   1 0
    push           59         i64 
    callfn         &mlibp.pcm_allocz u64 
    pop            pc_libmcl.genmc.m u64 
    push           pc_libmcl.genmc.opcode i64 
    push           pc_libmcl.genmc.m u64 
    push           24         
    popptroff                 u8 1 0
    push           pc_libmcl.genmc.a u64 
    push           pc_libmcl.genmc.m u64 
    push           8          
    popptroff                 u64 1 0
    push           pc_libmcl.genmc.b u64 
    push           pc_libmcl.genmc.m u64 
    push           16         
    popptroff                 u64 1 0
    push           pc_libmcl.genmc.opcode i64 
    push           22         i64 
    casejumpeq     #7443      i64 0
    push           15         i64 
    casejumpeq     #7444      i64 0
    push           9          i64 
    casejumpeq     #7445      i64 0
    popstack                  i64 
    jump           #7446      
#7443: 
    push           &pci_mcl.inf_proccalls 
    incr                      i64 1
    jump           #7447      
#7444: 
    push           pc_libmcl.genmc.b u64 
    jumpfalse      #7448      u64 
    push           pc_libmcl.genmc.b u64 
    push           12         
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #7448      i64 
    push           1          u64 
    push           pc_libmcl.genmc.b u64 
    pushptr                   u64 
    push           46         
    addrefoff                 u64 1 0
    push           2          i64 
    popdotindex               u16 
#7448: 
    jump           #7447      
#7445: 
    push           pc_libmcl.genmc.a u64 
    pushptr                   i64 
    pop            pc_libmcl.genmc.labno i64 
    push           pc_libmcl.genmc.labno i64 
    push           800000     i64 
    jumple         #7449      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "LABNO="   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libmcl.genmc.labno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           800000     i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           ""         u64 
    push           "Too many labels" u64 
    callproc       &pc_libmcl.merror 
#7449: 
    push           pc_libmcl.genmc.m u64 
    push           &pci_mcl.labeltable 
    push           pc_libmcl.genmc.labno i64 
    popptroff                 u64 8 -8
    jump           #7447      
#7446: 
#7447: 
    push           pci_mcl.mccode u64 
    jumpfalse      #7450      u64 
    push           pc_libmcl.genmc.m u64 
    push           pci_mcl.mccodex u64 
    push           0          
    popptroff                 u64 1 0
    push           pc_libmcl.genmc.m u64 
    pop            pci_mcl.mccodex u64 
    jump           #7451      
#7450: 
    push           pc_libmcl.genmc.m u64 
    store          pci_mcl.mccodex u64 
    pop            pci_mcl.mccode u64 
#7451: 
#7452: 
    retproc                   
End


Proc pc_libmcl.genmc_cond:
    param          pc_libmcl.genmc_cond.opcode i64 
    param          pc_libmcl.genmc_cond.cond i64 
    param          pc_libmcl.genmc_cond.a u64 
    param          pc_libmcl.genmc_cond.b u64 
    procentry                 
    setargs                   3 0
    push           pc_libmcl.genmc_cond.b u64 
    push           pc_libmcl.genmc_cond.a u64 
    push           pc_libmcl.genmc_cond.opcode i64 
    callproc       &pc_libmcl.genmc 
    push           pc_libmcl.genmc_cond.cond i64 
    push           pci_mcl.mccodex u64 
    push           25         
    popptroff                 u8 1 0
#7454: 
    retproc                   
End


Proc pc_libmcl.genmc_str:
    param          pc_libmcl.genmc_str.opcode i64 
    param          pc_libmcl.genmc_str.s u64 
    procentry                 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           -1         i64 
    push           pc_libmcl.genmc_str.s u64 
    callfn         &pc_libmcl.mgenstring u64 
    push           pc_libmcl.genmc_str.opcode i64 
    callproc       &pc_libmcl.genmc 
#7456: 
    retproc                   
End


Proc pc_libmcl.newmclopnd: u64
    local          pc_libmcl.newmclopnd.a u64 
    procentry                 
    setargs                   1 0
    push           19         i64 
    callfn         &mlibp.pcm_allocz u64 
    pop            pc_libmcl.newmclopnd.a u64 
    push           pc_libmcl.newmclopnd.a u64 
    setret                    u64 
    jump           #7458      
#7458: 
    retfn                     u64 
End


Proc pc_libmcl.duplopnd: u64
    param          pc_libmcl.duplopnd.a u64 
    local          pc_libmcl.duplopnd.b u64 
    procentry                 
    setargs                   1 0
    push           19         i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pc_libmcl.duplopnd.b u64 
    push           pc_libmcl.duplopnd.a u64 
    pushptr                   block:19 
    push           pc_libmcl.duplopnd.b u64 
    popptr                    block:19 
    push           pc_libmcl.duplopnd.b u64 
    setret                    u64 
    jump           #7460      
#7460: 
    retfn                     u64 
End


Proc pc_libmcl.mgenxreg: u64
    param          pc_libmcl.mgenxreg.xreg i64 
    param          pc_libmcl.mgenxreg.size i64 
    local          pc_libmcl.mgenxreg.a u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenxreg.a u64 
    push           5          i64 
    push           pc_libmcl.mgenxreg.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenxreg.xreg i64 
    push           pc_libmcl.mgenxreg.a u64 
    push           10         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenxreg.size i64 
    push           pc_libmcl.mgenxreg.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenxreg.a u64 
    setret                    u64 
    jump           #7462      
#7462: 
    retfn                     u64 
End


Proc pc_libmcl.mgenindex: u64
    param          pc_libmcl.mgenindex.areg i64 
    param          pc_libmcl.mgenindex.ireg i64 
    param          pc_libmcl.mgenindex.scale i64 
    param          pc_libmcl.mgenindex.offset i64 
    param          pc_libmcl.mgenindex.size i64 
    param          pc_libmcl.mgenindex.labno i64 
    param          pc_libmcl.mgenindex.def u64 
    local          pc_libmcl.mgenindex.a u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenindex.a u64 
    push           3          i64 
    push           pc_libmcl.mgenindex.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenindex.areg i64 
    push           pc_libmcl.mgenindex.a u64 
    push           10         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenindex.ireg i64 
    push           pc_libmcl.mgenindex.a u64 
    push           11         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenindex.scale i64 
    push           pc_libmcl.mgenindex.a u64 
    push           13         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenindex.size i64 
    push           pc_libmcl.mgenindex.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenindex.offset i64 
    push           pc_libmcl.mgenindex.a u64 
    push           14         
    popptroff                 i32 1 0
    push           pc_libmcl.mgenindex.labno i64 
    jumpfalse      #7464      i64 
    push           pc_libmcl.mgenindex.labno i64 
    push           pc_libmcl.mgenindex.a u64 
    push           0          
    popptroff                 i64 1 0
    push           7          i64 
    push           pc_libmcl.mgenindex.a u64 
    push           12         
    popptroff                 u8 1 0
    jump           #7465      
#7464: 
    push           pc_libmcl.mgenindex.def u64 
    jumpfalse      #7466      u64 
    push           pc_libmcl.mgenindex.def u64 
    push           pc_libmcl.mgenindex.a u64 
    push           0          
    popptroff                 u64 1 0
    push           pc_libmcl.mgenindex.def u64 
    push           48         
    addrefoff                 u64 1 0
    incr                      i16 1
    push           5          i64 
    push           pc_libmcl.mgenindex.a u64 
    push           12         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenindex.def u64 
    push           27         
    pushptroff                u8 1 0
    push           18         i64 
    setjumpeq      #7467      i64 
    push           19         i64 
    setjumpne      #7468      i64 
#7467: 
    push           15         i64 
    push           pc_libmcl.mgenindex.a u64 
    push           10         
    popptroff                 u8 1 0
#7468: 
#7466: 
#7465: 
    push           pc_libmcl.mgenindex.a u64 
    setret                    u64 
    jump           #7469      
#7469: 
    retfn                     u64 
End


Proc pc_libmcl.getmclstr: u64
    local          pc_libmcl.getmclstr.d u64 
    local          pc_libmcl.getmclstr.e u64 
    local          pc_libmcl.getmclstr.m u64 
    local          pc_libmcl.getmclstr.str2 block:32 
    local          pc_libmcl.getmclstr.str3 block:32 
    local          pc_libmcl.getmclstr.i i64 
    procentry                 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_init 
    push           pci_mcl.mccode u64 
    pop            pc_libmcl.getmclstr.m u64 
    push           1          i64 
    pop            pc_libmcl.getmclstr.i i64 
    jump           #7471      
#7472: 
    setargs                   2 0
    push           pc_libmcl.getmclstr.m u64 
    push           pc_libmcl.getmclstr.i i64 
    callproc       &pc_libmcl.writemcl 
    push           &pc_libmcl.getmclstr.i 
    incr                      i64 1
    push           pc_libmcl.getmclstr.m u64 
    pushptr                   u64 
    pop            pc_libmcl.getmclstr.m u64 
#7471: 
    push           pc_libmcl.getmclstr.m u64 
    jumptrue       #7472      u64 
#7473: 
    push           pci_mcl.dest u64 
    setret                    u64 
    jump           #7474      
#7474: 
    retfn                     u64 
End


Proc pc_libmcl.mgencomment:
    param          pc_libmcl.mgencomment.s u64 
    procentry                 
    push           pc_libmcl.mgencomment.s u64 
    push           0          u64 
    jumpeq         #7476      u64 
    push           pc_libmcl.mgencomment.s u64 
    pushptr                   u8 
    push           0          i64 
    jumpne         #7477      i64 
#7476: 
    setargs                   3 0
    push           0          u64 
    push           0          u64 
    push           4          i64 
    callproc       &pc_libmcl.genmc 
    jump           #7478      
#7477: 
    setargs                   2 0
    push           pc_libmcl.mgencomment.s u64 
    push           3          i64 
    callproc       &pc_libmcl.genmc_str 
#7478: 
#7479: 
    retproc                   
End


Proc pc_libmcl.mgenstring: u64
    param          pc_libmcl.mgenstring.s u64 
    param          pc_libmcl.mgenstring.length i64 
    local          pc_libmcl.mgenstring.a u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenstring.a u64 
    push           2          i64 
    push           pc_libmcl.mgenstring.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenstring.length i64 
    push           0          i64 
    jumpge         #7481      i64 
    setargs                   1 0
    push           pc_libmcl.mgenstring.s u64 
    callfn         &strlen    i64 
    pop            pc_libmcl.mgenstring.length i64 
#7481: 
    setargs                   1 0
    push           pc_libmcl.mgenstring.length i64 
    push           1          i64 
    add                       i64 
    callfn         &mlibp.pcm_alloc u64 
    push           pc_libmcl.mgenstring.a u64 
    push           0          
    popptroff                 u64 1 0
    setargs                   3 0
    push           pc_libmcl.mgenstring.length u64 
    push           pc_libmcl.mgenstring.s u64 
    push           pc_libmcl.mgenstring.a u64 
    pushptr                   u64 
    callproc       &memcpy    
    push           0          u64 
    push           pc_libmcl.mgenstring.a u64 
    pushptr                   u64 
    push           pc_libmcl.mgenstring.length i64 
    popptroff                 u8 1 0
    push           4          i64 
    push           pc_libmcl.mgenstring.a u64 
    push           12         
    popptroff                 u8 1 0
    push           8          i64 
    push           pc_libmcl.mgenstring.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenstring.a u64 
    setret                    u64 
    jump           #7482      
#7482: 
    retfn                     u64 
End


Proc pc_libmcl.mgenname: u64
    param          pc_libmcl.mgenname.s u64 
    local          pc_libmcl.mgenname.str block:64 
    local          pc_libmcl.mgenname.a u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenname.a u64 
    push           2          i64 
    push           pc_libmcl.mgenname.a u64 
    push           9          
    popptroff                 u8 1 0
    setargs                   1 0
    push           pc_libmcl.mgenname.s u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           pc_libmcl.mgenname.a u64 
    push           0          
    popptroff                 u64 1 0
    push           8          i64 
    push           pc_libmcl.mgenname.a u64 
    push           12         
    popptroff                 u8 1 0
    push           8          i64 
    push           pc_libmcl.mgenname.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenname.a u64 
    setret                    u64 
    jump           #7484      
#7484: 
    retfn                     u64 
End


Proc pc_libmcl.writemcl:
    param          pc_libmcl.writemcl.index i64 
    param          pc_libmcl.writemcl.mcl u64 
    procentry                 
    push           pc_libmcl.writemcl.mcl u64 
    push           24         
    pushptroff                u8 1 0
    push           5          i64 
    casejumpeq     #7486      i64 0
    popstack                  i64 
    jump           #7487      
#7486: 
    jump           #7488      
#7487: 
    setargs                   1 0
    push           pc_libmcl.writemcl.mcl u64 
    callproc       &pc_libmcl.strmcl 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_line 
#7488: 
#7489: 
    retproc                   
End


Proc pc_libmcl.strmcl:
    param          pc_libmcl.strmcl.mcl u64 
    local          pc_libmcl.strmcl.opcname block:128 
    local          pc_libmcl.strmcl.a u64 
    local          pc_libmcl.strmcl.b u64 
    local          pc_libmcl.strmcl.opcode i64 
    local          pc_libmcl.strmcl.cond i64 
    local          pc_libmcl.strmcl.sizepref i64 
    local          pc_libmcl.strmcl.s u64 
    local          pc_libmcl.strmcl.comment u64 
    local          pc_libmcl.strmcl.d u64 
    procentry                 
    push           pc_libmcl.strmcl.mcl u64 
    push           24         
    pushptroff                u8 1 0
    pop            pc_libmcl.strmcl.opcode i64 
    push           pc_libmcl.strmcl.mcl u64 
    push           25         
    pushptroff                u8 1 0
    pop            pc_libmcl.strmcl.cond i64 
    push           pc_libmcl.strmcl.mcl u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_libmcl.strmcl.a u64 
    push           pc_libmcl.strmcl.mcl u64 
    push           16         
    pushptroff                u64 1 0
    pop            pc_libmcl.strmcl.b u64 
    push           0          u64 
    pop            pc_libmcl.strmcl.comment u64 
    push           pc_libmcl.strmcl.opcode i64 
    push           1          i64 
    casejumpeq     #7491      i64 0
    push           2          i64 
    casejumpeq     #7492      i64 0
    push           4          i64 
    casejumpeq     #7493      i64 0
    push           3          i64 
    casejumpeq     #7494      i64 0
    push           5          i64 
    casejumpeq     #7495      i64 0
    push           6          i64 
    casejumpeq     #7496      i64 0
    push           9          i64 
    casejumpeq     #7497      i64 0
    push           7          i64 
    casejumpeq     #7498      i64 0
    push           8          i64 
    casejumpeq     #7499      i64 0
    popstack                  i64 
    jump           #7500      
#7491: 
    setargs                   1 0
    push           ";Proc "   u64 
    callproc       &pc_libmcl.asmstr 
    setargs                   1 0
    push           pc_libmcl.strmcl.a u64 
    pushptr                   u64 
    pushptr                   u64 
    callproc       &pc_libmcl.asmstr 
    push           pc_libmcl.strmcl.a u64 
    pushptr                   u64 
    pop            pci_mcl.currasmproc u64 
    jump           #7501      
    jump           #7502      
#7492: 
    setargs                   1 0
    push           ";End "    u64 
    callproc       &pc_libmcl.asmstr 
    push           0          u64 
    pop            pci_mcl.currasmproc u64 
    jump           #7501      
    jump           #7502      
#7493: 
    jump           #7501      
    jump           #7502      
#7494: 
    setargs                   1 0
    push           59         i64 
    callproc       &pc_libmcl.asmchar 
    setargs                   1 0
    push           pc_libmcl.strmcl.a u64 
    pushptr                   u64 
    callproc       &pc_libmcl.asmstr 
    jump           #7503      
    jump           #7501      
    jump           #7502      
#7495: 
    setargs                   1 0
    push           "; <deleted>" u64 
    callproc       &pc_libmcl.asmstr 
    jump           #7503      
    jump           #7501      
    jump           #7502      
#7496: 
    push           pc_libmcl.strmcl.a u64 
    pushptr                   u64 
    pop            pc_libmcl.strmcl.d u64 
    push           pc_libmcl.strmcl.a u64 
    push           12         
    pushptroff                u8 1 0
    push           5          i64 
    casejumpeq     #7504      i64 0
    push           4          i64 
    casejumpeq     #7505      i64 0
    popstack                  i64 
    jump           #7506      
#7504: 
    setargs                   1 0
    setargs                   1 0
    push           pc_libmcl.strmcl.d u64 
    callfn         &pc_libmcl.getfullname u64 
    callproc       &pc_libmcl.asmstr 
    jump           #7507      
#7505: 
    setargs                   1 0
    push           pc_libmcl.strmcl.a u64 
    pushptr                   u64 
    callproc       &pc_libmcl.asmstr 
    jump           #7501      
    jump           #7507      
#7506: 
    setargs                   2 0
    push           ""         u64 
    push           "strmcl/lab" u64 
    callproc       &pc_libmcl.merror 
#7507: 
    setargs                   1 0
    push           ":"        u64 
    callproc       &pc_libmcl.asmstr 
    push           pc_libmcl.strmcl.d u64 
    push           46         
    pushptroff                u16 1 0
    push           3          i64 
    dotindex                  i64 
    jumpfalse      #7508      u64 
    setargs                   1 0
    push           "\n"       u64 
    callproc       &pc_libmcl.asmstr 
    setargs                   1 0
    setargs                   1 0
    push           pc_libmcl.strmcl.d u64 
    pushptr                   u64 
    callfn         &pc_libpcl.getbasename u64 
    callproc       &pc_libmcl.asmstr 
    setargs                   1 0
    push           "::"       u64 
    callproc       &pc_libmcl.asmstr 
#7508: 
    jump           #7501      
    jump           #7502      
#7497: 
    setargs                   1 0
    push           &pc_libmcl.strmcl.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "L#:"      u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           pc_libmcl.strmcl.a u64 
    pushptr                   i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           &pc_libmcl.strmcl.str 
    callproc       &pc_libmcl.asmstr 
    jump           #7501      
    jump           #7502      
#7498: 
    setargs                   1 0
    push           "          " u64 
    callproc       &pc_libmcl.asmstr 
    setargs                   1 0
    push           pc_libmcl.strmcl.a u64 
    pushptr                   u64 
    callproc       &pc_libmcl.asmstr 
    setargs                   1 0
    push           " = "      u64 
    callproc       &pc_libmcl.asmstr 
    setargs                   3 0
    push           0          i64 
    push           0          i64 
    push           pc_libmcl.strmcl.b u64 
    callproc       &pc_libmcl.asmopnd 
    jump           #7501      
    jump           #7502      
#7499: 
    setargs                   1 0
    push           "          " u64 
    callproc       &pc_libmcl.asmstr 
    setargs                   1 0
    push           pc_libmcl.strmcl.a u64 
    pushptr                   u64 
    callproc       &pc_libmcl.asmstr 
    setargs                   1 0
    push           " = "      u64 
    callproc       &pc_libmcl.asmstr 
    push           pc_libmcl.strmcl.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #7509      i64 0
    popstack                  i64 
    jump           #7510      
#7509: 
    setargs                   1 0
    setargs                   2 0
    push           pc_libmcl.strmcl.b u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_libmcl.strmcl.b u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.getregname u64 
    callproc       &pc_libmcl.asmstr 
    jump           #7511      
#7510: 
    setargs                   1 0
    setargs                   2 0
    push           pc_libmcl.strmcl.b u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_libmcl.strmcl.b u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.fgetregname u64 
    callproc       &pc_libmcl.asmstr 
#7511: 
    jump           #7501      
    jump           #7502      
#7500: 
#7502: 
    push           pc_libmcl.strmcl.opcode i64 
    push           27         i64 
    casejumpeq     #7512      i64 0
    push           59         i64 
    casejumpeq     #7513      i64 0
    push           16         i64 
    casejumpeq     #7514      i64 0
    push           22         i64 
    casejumpeq     #7515      i64 0
    push           39         i64 
    casejumpeq     #7516      i64 0
    push           40         i64 
    casejumpeq     #7517      i64 0
    push           41         i64 
    casejumpeq     #7518      i64 0
    push           52         i64 
    casejumpeq     #7519      i64 0
    popstack                  i64 
    jump           #7520      
#7512: 
    setargs                   1 0
    push           &pc_libmcl.strmcl.opcname 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "j"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           &pci_mcl.asmcondnames 
    push           pc_libmcl.strmcl.cond i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #7521      
#7513: 
    setargs                   1 0
    push           &pc_libmcl.strmcl.opcname 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "set"      u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           &pci_mcl.asmcondnames 
    push           pc_libmcl.strmcl.cond i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #7521      
#7514: 
    setargs                   1 0
    push           &pc_libmcl.strmcl.opcname 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "cmov"     u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           &pci_mcl.asmcondnames 
    push           pc_libmcl.strmcl.cond i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #7521      
#7515: 
    setargs                   2 0
    push           "call"     u64 
    push           &pc_libmcl.strmcl.opcname 
    callproc       &strcpy    
    jump           #7521      
#7516: 
    setargs                   2 0
    push           "and"      u64 
    push           &pc_libmcl.strmcl.opcname 
    callproc       &strcpy    
    jump           #7521      
#7517: 
    setargs                   2 0
    push           "or"       u64 
    push           &pc_libmcl.strmcl.opcname 
    callproc       &strcpy    
    jump           #7521      
#7518: 
    setargs                   2 0
    push           "xor"      u64 
    push           &pc_libmcl.strmcl.opcname 
    callproc       &strcpy    
    jump           #7521      
#7519: 
    setargs                   2 0
    push           "not"      u64 
    push           &pc_libmcl.strmcl.opcname 
    callproc       &strcpy    
    jump           #7521      
#7520: 
    push           pc_libmcl.strmcl.opcode i64 
    push           148        i64 
    jumple         #7522      i64 
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_libmcl.strmcl.opcode i64 
    callfn         &msysp.strint u64 
    push           &pc_libmcl.strmcl.opcname 
    callproc       &strcpy    
    jump           #7523      
#7522: 
    setargs                   2 0
    push           &pci_mcl.mclnames 
    push           pc_libmcl.strmcl.opcode i64 
    pushptroff                u64 8 -8
    push           2          i64 
    addrefoff                 u64 1 0
    push           &pc_libmcl.strmcl.opcname 
    callproc       &strcpy    
#7523: 
#7521: 
    setargs                   3 0
    push           " "        u64 
    push           10         i64 
    push           &pc_libmcl.strmcl.opcname 
    callproc       &mlibp.ipadstr 
    setargs                   2 0
    push           "  "       u64 
    push           &pc_libmcl.strmcl.str 
    callproc       &strcpy    
    setargs                   3 0
    push           " "        u64 
    push           10         i64 
    push           &pc_libmcl.strmcl.str 
    callproc       &mlibp.ipadstr 
    setargs                   2 0
    push           &pc_libmcl.strmcl.opcname 
    push           &pc_libmcl.strmcl.str 
    callproc       &strcat    
    setargs                   1 0
    push           &pc_libmcl.strmcl.str 
    callproc       &pc_libmcl.asmstr 
    push           pc_libmcl.strmcl.a u64 
    jumpfalse      #7524      u64 
    push           pc_libmcl.strmcl.b u64 
    jumpfalse      #7524      u64 
    setargs                   3 0
    push           pc_libmcl.strmcl.b u64 
    push           pc_libmcl.strmcl.a u64 
    push           pc_libmcl.strmcl.opcode i64 
    callfn         &pc_libmcl.needsizeprefix i64 
    pop            pc_libmcl.strmcl.sizepref i64 
    setargs                   3 0
    push           0          i64 
    push           pc_libmcl.strmcl.sizepref i64 
    push           pc_libmcl.strmcl.a u64 
    callproc       &pc_libmcl.asmopnd 
    setargs                   1 0
    push           ",\t"      u64 
    callproc       &pc_libmcl.asmstr 
    setargs                   3 0
    push           0          i64 
    push           pc_libmcl.strmcl.sizepref i64 
    push           pc_libmcl.strmcl.b u64 
    callproc       &pc_libmcl.asmopnd 
    jump           #7525      
#7524: 
    push           pc_libmcl.strmcl.a u64 
    jumpfalse      #7526      u64 
    push           pc_libmcl.strmcl.a u64 
    push           9          
    pushptroff                u8 1 0
    jumpfalse      #7526      i64 
    push           pc_libmcl.strmcl.opcode i64 
    push           22         i64 
    jumpne         #7527      i64 
    setargs                   3 0
    push           0          i64 
    push           0          i64 
    push           pc_libmcl.strmcl.a u64 
    callproc       &pc_libmcl.asmopnd 
    jump           #7528      
#7527: 
    setargs                   3 0
    push           0          i64 
    push           1          i64 
    push           pc_libmcl.strmcl.a u64 
    callproc       &pc_libmcl.asmopnd 
#7528: 
#7526: 
#7525: 
!docomments::
#7503: 
#7501: 
    retproc                   
End


Proc pc_libmcl.asmopnd:
    param          pc_libmcl.asmopnd.a u64 
    param          pc_libmcl.asmopnd.sizeprefix i64 
    param          pc_libmcl.asmopnd.debug i64 
    procentry                 
    setargs                   1 0
    setargs                   3 0
    push           pc_libmcl.asmopnd.debug i64 
    push           pc_libmcl.asmopnd.sizeprefix i64 
    push           pc_libmcl.asmopnd.a u64 
    callfn         &pc_libmcl.stropnd u64 
    callproc       &pc_libmcl.asmstr 
#7530: 
    retproc                   
End


Proc pc_libmcl.setsegment:
    param          pc_libmcl.setsegment.seg i64 
    param          pc_libmcl.setsegment.align i64 
    local          pc_libmcl.setsegment.opc i64 
    local          pc_libmcl.setsegment.oldalign i64 
    procentry                 
    push           pc_libmcl.setsegment.seg i64 
    push           pci_mcl.currsegment i64 
    jumpeq         #7532      i64 
    push           pc_libmcl.setsegment.seg i64 
    push           73         i64 
    casejumpeq     #7533      i64 0
    push           90         i64 
    casejumpeq     #7534      i64 0
    push           67         i64 
    casejumpeq     #7535      i64 0
    push           82         i64 
    casejumpeq     #7536      i64 0
    popstack                  i64 
    jump           #7537      
#7533: 
    push           120        i64 
    pop            pc_libmcl.setsegment.opc i64 
    jump           #7538      
#7534: 
    push           121        i64 
    pop            pc_libmcl.setsegment.opc i64 
    jump           #7538      
#7535: 
    push           122        i64 
    pop            pc_libmcl.setsegment.opc i64 
    jump           #7538      
#7536: 
    setargs                   2 0
    push           ""         u64 
    push           "CAN'T DO RODATA SEG" u64 
    callproc       &pc_libmcl.merror 
    jump           #7538      
#7537: 
    setargs                   2 0
    push           ""         u64 
    push           "BAD SEG CODE" u64 
    callproc       &pc_libmcl.merror 
#7538: 
    push           pci_mcl.mccodex u64 
    jumpfalse      #7539      u64 
    push           pci_mcl.mccodex u64 
    push           24         
    pushptroff                u8 1 0
    push           120        i64 
    setjumpeq      #7540      i64 
    push           121        i64 
    setjumpeq      #7540      i64 
    push           122        i64 
    setjumpne      #7539      i64 
#7540: 
    push           pc_libmcl.setsegment.opc i64 
    push           pci_mcl.mccodex u64 
    push           24         
    popptroff                 u8 1 0
    jump           #7541      
#7539: 
    setargs                   3 0
    push           0          u64 
    push           0          u64 
    push           pc_libmcl.setsegment.opc i64 
    callproc       &pc_libmcl.genmc 
#7541: 
    push           pc_libmcl.setsegment.seg i64 
    pop            pci_mcl.currsegment i64 
#7532: 
    push           pc_libmcl.setsegment.align i64 
    push           1          i64 
    jumple         #7542      i64 
    push           pci_mcl.mccodex u64 
    push           24         
    pushptroff                u8 1 0
    push           123        i64 
    jumpne         #7543      i64 
    push           pci_mcl.mccodex u64 
    push           8          
    pushptroff                u64 1 0
    pushptr                   i64 
    pop            pc_libmcl.setsegment.oldalign i64 
    push           pc_libmcl.setsegment.oldalign i64 
    push           pc_libmcl.setsegment.align i64 
    jumplt         #7544      i64 
    jump           #7545      
#7544: 
#7543: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.setsegment.align i64 
    callfn         &pc_libmcl.mgenint u64 
    push           123        i64 
    callproc       &pc_libmcl.genmc 
#7542: 
#7545: 
    retproc                   
End


Proc pc_libmcl.getsizeprefix: u64
    param          pc_libmcl.getsizeprefix.size i64 
    param          pc_libmcl.getsizeprefix.enable i64 
    procentry                 
    push           pc_libmcl.getsizeprefix.enable i64 
    jumptrue       #7547      i64 
    push           ""         u64 
    setret                    u64 
    jump           #7548      
#7547: 
    push           pc_libmcl.getsizeprefix.size i64 
    push           1          i64 
    casejumpeq     #7549      i64 0
    push           2          i64 
    casejumpeq     #7550      i64 0
    push           4          i64 
    casejumpeq     #7551      i64 0
    push           8          i64 
    casejumpeq     #7552      i64 0
    push           16         i64 
    casejumpeq     #7553      i64 0
    popstack                  i64 
    jump           #7554      
#7549: 
    push           "byte "    u64 
    setret                    u64 
    jump           #7548      
    jump           #7555      
#7550: 
    push           "word16 "  u64 
    setret                    u64 
    jump           #7548      
    jump           #7555      
#7551: 
    push           "word32 "  u64 
    setret                    u64 
    jump           #7548      
    jump           #7555      
#7552: 
    push           "word64 "  u64 
    setret                    u64 
    jump           #7548      
    jump           #7555      
#7553: 
    push           "word128 " u64 
    setret                    u64 
    jump           #7548      
    jump           #7555      
#7554: 
#7555: 
    push           ""         u64 
    setret                    u64 
    jump           #7548      
#7548: 
    retfn                     u64 
End


Proc pc_libmcl.needsizeprefix: i64
    param          pc_libmcl.needsizeprefix.opcode i64 
    param          pc_libmcl.needsizeprefix.a u64 
    param          pc_libmcl.needsizeprefix.b u64 
    procentry                 
    push           pc_libmcl.needsizeprefix.opcode i64 
    push           19         i64 
    casejumpeq     #7557      i64 0
    push           20         i64 
    casejumpeq     #7557      i64 0
    push           84         i64 
    casejumpeq     #7557      i64 0
    push           85         i64 
    casejumpeq     #7557      i64 0
    push           80         i64 
    casejumpeq     #7558      i64 0
    push           81         i64 
    casejumpeq     #7558      i64 0
    push           82         i64 
    casejumpeq     #7558      i64 0
    push           83         i64 
    casejumpeq     #7558      i64 0
    push           44         i64 
    casejumpeq     #7559      i64 0
    push           46         i64 
    casejumpeq     #7559      i64 0
    push           45         i64 
    casejumpeq     #7559      i64 0
    popstack                  i64 
    jump           #7560      
#7557: 
    push           1          i64 
    setret                    i64 
    jump           #7561      
    jump           #7562      
#7558: 
    push           1          i64 
    setret                    i64 
    jump           #7561      
    jump           #7562      
#7559: 
    push           pc_libmcl.needsizeprefix.a u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #7563      i64 
    push           1          i64 
    setret                    i64 
    jump           #7561      
#7563: 
    push           0          i64 
    setret                    i64 
    jump           #7561      
    jump           #7562      
#7560: 
#7562: 
    push           pc_libmcl.needsizeprefix.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #7564      i64 
    push           pc_libmcl.needsizeprefix.a u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpeq         #7564      i64 
    push           pc_libmcl.needsizeprefix.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #7564      i64 
    push           pc_libmcl.needsizeprefix.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #7565      i64 
#7564: 
    push           0          i64 
    setret                    i64 
    jump           #7561      
#7565: 
    push           1          i64 
    setret                    i64 
    jump           #7561      
#7561: 
    retfn                     i64 
End


Proc pc_libmcl.changeopndsize: u64
    param          pc_libmcl.changeopndsize.a u64 
    param          pc_libmcl.changeopndsize.size i64 
    local          pc_libmcl.changeopndsize.b u64 
    procentry                 
    push           pc_libmcl.changeopndsize.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_libmcl.changeopndsize.size i64 
    jumpeq         #7567      i64 
    push           pc_libmcl.changeopndsize.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #7568      i64 
    push           &pci_mcl.regtable 
    push           pc_libmcl.changeopndsize.a u64 
    push           10         
    pushptroff                u8 1 0
    addrefoff                 block:128 128 -128
    push           pc_libmcl.changeopndsize.size i64 
    pushptroff                u64 8 -8
    pop            pc_libmcl.changeopndsize.b u64 
    jump           #7569      
#7568: 
    setargs                   1 0
    push           pc_libmcl.changeopndsize.a u64 
    callfn         &pc_libmcl.duplopnd u64 
    pop            pc_libmcl.changeopndsize.b u64 
    push           pc_libmcl.changeopndsize.size i64 
    push           pc_libmcl.changeopndsize.b u64 
    push           8          
    popptroff                 u8 1 0
#7569: 
    push           pc_libmcl.changeopndsize.b u64 
    setret                    u64 
    jump           #7570      
#7567: 
    push           pc_libmcl.changeopndsize.a u64 
    setret                    u64 
    jump           #7570      
#7570: 
    retfn                     u64 
End


Proc pc_libmcl.makeopndind: u64
    param          pc_libmcl.makeopndind.a u64 
    param          pc_libmcl.makeopndind.size i64 
    local          pc_libmcl.makeopndind.b u64 
    procentry                 
    push           pc_libmcl.makeopndind.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #7572      i64 
    setargs                   2 0
    push           ""         u64 
    push           "makeopndind" u64 
    callproc       &pc_libmcl.merror 
#7572: 
    setargs                   3 0
    push           0          i64 
    push           pc_libmcl.makeopndind.size i64 
    push           pc_libmcl.makeopndind.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenireg u64 
    setret                    u64 
    jump           #7573      
#7573: 
    retfn                     u64 
End


Proc pc_libmcl.applyoffset: u64
    param          pc_libmcl.applyoffset.a u64 
    param          pc_libmcl.applyoffset.offset i64 
    param          pc_libmcl.applyoffset.size i64 
    local          pc_libmcl.applyoffset.b u64 
    procentry                 
    push           pc_libmcl.applyoffset.offset i64 
    push           0          i64 
    jumpne         #7575      i64 
    push           pc_libmcl.applyoffset.size i64 
    push           0          i64 
    jumpne         #7575      i64 
    push           pc_libmcl.applyoffset.a u64 
    setret                    u64 
    jump           #7576      
#7575: 
    setargs                   1 0
    push           pc_libmcl.applyoffset.a u64 
    callfn         &pc_libmcl.duplopnd u64 
    pop            pc_libmcl.applyoffset.b u64 
    push           pc_libmcl.applyoffset.b u64 
    push           14         
    addrefoff                 u64 1 0
    push           pc_libmcl.applyoffset.offset i64 
    addto                     i32 
    push           pc_libmcl.applyoffset.size i64 
    jumpfalse      #7577      i64 
    push           pc_libmcl.applyoffset.size i64 
    push           pc_libmcl.applyoffset.b u64 
    push           8          
    popptroff                 u8 1 0
#7577: 
    push           pc_libmcl.applyoffset.b u64 
    setret                    u64 
    jump           #7576      
#7576: 
    retfn                     u64 
End


Proc pc_libmcl.mgenint: u64
    param          pc_libmcl.mgenint.x i64 
    param          pc_libmcl.mgenint.size i64 
    procentry                 
    push           pc_libmcl.mgenint.x i64 
    push           0          i64 
    push           32         i64 
    jumpnotinrange #7579      i64 
    push           pc_libmcl.mgenint.size i64 
    push           8          i64 
    jumpne         #7579      i64 
    push           &pci_mcl.smallinttable 
    push           pc_libmcl.mgenint.x i64 
    pushptroff                u64 8 0
    setret                    u64 
    jump           #7580      
#7579: 
    setargs                   2 0
    push           pc_libmcl.mgenint.size i64 
    push           pc_libmcl.mgenint.x i64 
    callfn         &pc_libmcl.mgenint0 u64 
    setret                    u64 
    jump           #7580      
#7580: 
    retfn                     u64 
End


Proc pc_libmcl.mgenint0: u64
    param          pc_libmcl.mgenint0.x i64 
    param          pc_libmcl.mgenint0.size i64 
    local          pc_libmcl.mgenint0.a u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenint0.a u64 
    push           2          i64 
    push           pc_libmcl.mgenint0.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenint0.x i64 
    push           pc_libmcl.mgenint0.a u64 
    push           0          
    popptroff                 i64 1 0
    push           1          i64 
    push           pc_libmcl.mgenint0.a u64 
    push           12         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenint0.size i64 
    push           pc_libmcl.mgenint0.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenint0.a u64 
    setret                    u64 
    jump           #7582      
#7582: 
    retfn                     u64 
End


Proc pc_libmcl.mgenrealmem: u64
    param          pc_libmcl.mgenrealmem.x r64 
    param          pc_libmcl.mgenrealmem.size i64 
    local          pc_libmcl.mgenrealmem.a u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenrealmem.a u64 
    push           3          i64 
    push           pc_libmcl.mgenrealmem.a u64 
    push           9          
    popptroff                 u8 1 0
    setargs                   2 0
    push           pc_libmcl.mgenrealmem.size i64 
    push           pc_libmcl.mgenrealmem.x r64 
    callfn         &pc_libmcl.getrealindex i64 
    push           pc_libmcl.mgenrealmem.a u64 
    push           0          
    popptroff                 i64 1 0
    push           7          i64 
    push           pc_libmcl.mgenrealmem.a u64 
    push           12         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenrealmem.size i64 
    push           pc_libmcl.mgenrealmem.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenrealmem.a u64 
    setret                    u64 
    jump           #7584      
#7584: 
    retfn                     u64 
End


Proc pc_libmcl.mgenrealimm: u64
    param          pc_libmcl.mgenrealimm.x r64 
    param          pc_libmcl.mgenrealimm.size i64 
    local          pc_libmcl.mgenrealimm.a u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenrealimm.a u64 
    push           2          i64 
    push           pc_libmcl.mgenrealimm.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenrealimm.x r64 
    push           pc_libmcl.mgenrealimm.a u64 
    push           0          
    popptroff                 r64 1 0
    push           2          i64 
    push           pc_libmcl.mgenrealimm.a u64 
    push           12         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenrealimm.size i64 
    push           pc_libmcl.mgenrealimm.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenrealimm.a u64 
    setret                    u64 
    jump           #7586      
#7586: 
    retfn                     u64 
End


Proc pc_libmcl.mgenlabel: u64
    param          pc_libmcl.mgenlabel.x i64 
    local          pc_libmcl.mgenlabel.a u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenlabel.a u64 
    push           2          i64 
    push           pc_libmcl.mgenlabel.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenlabel.x i64 
    push           0          i64 
    jumpne         #7588      i64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pc_libmcl.mgenlabel.x i64 
#7588: 
    push           pc_libmcl.mgenlabel.x i64 
    push           pc_libmcl.mgenlabel.a u64 
    push           0          
    popptroff                 i64 1 0
    push           7          i64 
    push           pc_libmcl.mgenlabel.a u64 
    push           12         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenlabel.a u64 
    setret                    u64 
    jump           #7589      
#7589: 
    retfn                     u64 
End


Proc pc_libmcl.mgenlabelmem: u64
    param          pc_libmcl.mgenlabelmem.x i64 
    local          pc_libmcl.mgenlabelmem.a u64 
    procentry                 
    setargs                   1 0
    push           pc_libmcl.mgenlabelmem.x i64 
    callfn         &pc_libmcl.mgenlabel u64 
    pop            pc_libmcl.mgenlabelmem.a u64 
    push           3          i64 
    push           pc_libmcl.mgenlabelmem.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenlabelmem.a u64 
    setret                    u64 
    jump           #7591      
#7591: 
    retfn                     u64 
End


Proc pc_libmcl.mgenregvar: u64
    param          pc_libmcl.mgenregvar.d u64 
    local          pc_libmcl.mgenregvar.a u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.mgenregvar.d u64 
    push           50         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_libmcl.mgenregvar.a u64 
    push           1          i64 
    push           &pci_mcl.isregvar 
    push           pc_libmcl.mgenregvar.d u64 
    push           50         
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    push           pc_libmcl.mgenregvar.a u64 
    setret                    u64 
    jump           #7593      
#7593: 
    retfn                     u64 
End


Proc pc_libmcl.mgenxregvar: u64
    param          pc_libmcl.mgenxregvar.d u64 
    local          pc_libmcl.mgenxregvar.a u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.mgenxregvar.d u64 
    push           50         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenxreg u64 
    pop            pc_libmcl.mgenxregvar.a u64 
    push           1          i64 
    push           &pci_mcl.isxregvar 
    push           pc_libmcl.mgenxregvar.d u64 
    push           50         
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    push           pc_libmcl.mgenxregvar.a u64 
    setret                    u64 
    jump           #7595      
#7595: 
    retfn                     u64 
End


Proc pc_libmcl.mgenmem: u64
    param          pc_libmcl.mgenmem.d u64 
    local          pc_libmcl.mgenmem.a u64 
    local          pc_libmcl.mgenmem.p u64 
    local          pc_libmcl.mgenmem.reg i64 
    procentry                 
    push           pc_libmcl.mgenmem.d u64 
    push           16         
    pushptroff                u64 1 0
    pop            pc_libmcl.mgenmem.p u64 
    push           pc_libmcl.mgenmem.d u64 
    push           50         
    pushptroff                u8 1 0
    jumpfalse      #7597      i64 
    push           &pc_tables.pfloat 
    push           pc_libmcl.mgenmem.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #7598      i64 
    setargs                   1 0
    push           pc_libmcl.mgenmem.d u64 
    callfn         &pc_libmcl.mgenxregvar u64 
    setret                    u64 
    jump           #7599      
    jump           #7600      
#7598: 
    setargs                   1 0
    push           pc_libmcl.mgenmem.d u64 
    callfn         &pc_libmcl.mgenregvar u64 
    setret                    u64 
    jump           #7599      
#7600: 
#7597: 
    push           0          i64 
    pop            pc_libmcl.mgenmem.reg i64 
    push           pc_libmcl.mgenmem.d u64 
    push           27         
    pushptroff                u8 1 0
    push           18         i64 
    setjumpeq      #7601      i64 
    push           19         i64 
    setjumpne      #7602      i64 
#7601: 
    push           pc_decls.optimflag i64 
    jumptrue       #7603      i64 
    push           pc_libmcl.mgenmem.d u64 
    push           32         
    pushptroff                i32 1 0
    push           -128       i64 
    push           64         i64 
    jumpnotinrange #7603      i64 
    push           pc_libmcl.mgenmem.p u64 
    push           4          
    pushptroff                i32 1 0
    push           8          i64 
    jumpne         #7603      i64 
    push           &pci_mcl.frameregtable 
    push           pc_libmcl.mgenmem.d u64 
    push           32         
    pushptroff                i32 1 0
    pushptroff                u64 8 1024
    setret                    u64 
    jump           #7599      
#7603: 
    push           15         i64 
    pop            pc_libmcl.mgenmem.reg i64 
#7602: 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenmem.a u64 
    push           3          i64 
    push           pc_libmcl.mgenmem.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenmem.reg i64 
    push           pc_libmcl.mgenmem.a u64 
    push           10         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenmem.d u64 
    push           pc_libmcl.mgenmem.a u64 
    push           0          
    popptroff                 u64 1 0
    push           pc_libmcl.mgenmem.d u64 
    push           48         
    addrefoff                 u64 1 0
    incr                      i16 1
    push           5          i64 
    push           pc_libmcl.mgenmem.a u64 
    push           12         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenmem.p u64 
    push           4          
    pushptroff                i32 1 0
    push           8          i64 
    min                       i64 
    push           pc_libmcl.mgenmem.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenmem.a u64 
    setret                    u64 
    jump           #7599      
#7599: 
    retfn                     u64 
End


Proc pc_libmcl.mgenmemhigh: u64
    param          pc_libmcl.mgenmemhigh.d u64 
    local          pc_libmcl.mgenmemhigh.a u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenmemhigh.a u64 
    push           3          i64 
    push           pc_libmcl.mgenmemhigh.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenmemhigh.d u64 
    push           27         
    pushptroff                u8 1 0
    push           18         i64 
    setjumpeq      #7605      i64 
    push           19         i64 
    setjumpne      #7606      i64 
#7605: 
    push           15         i64 
    push           pc_libmcl.mgenmemhigh.a u64 
    push           10         
    popptroff                 u8 1 0
#7606: 
    push           pc_libmcl.mgenmemhigh.d u64 
    push           48         
    addrefoff                 u64 1 0
    incr                      i16 1
    push           pc_libmcl.mgenmemhigh.d u64 
    push           pc_libmcl.mgenmemhigh.a u64 
    push           0          
    popptroff                 u64 1 0
    push           5          i64 
    push           pc_libmcl.mgenmemhigh.a u64 
    push           12         
    popptroff                 u8 1 0
    push           8          i64 
    push           pc_libmcl.mgenmemhigh.a u64 
    push           14         
    popptroff                 i32 1 0
    push           8          i64 
    push           pc_libmcl.mgenmemhigh.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenmemhigh.a u64 
    setret                    u64 
    jump           #7607      
#7607: 
    retfn                     u64 
End


Proc pc_libmcl.mgenmemaddr: u64
    param          pc_libmcl.mgenmemaddr.d u64 
    local          pc_libmcl.mgenmemaddr.a u64 
    procentry                 
    push           1          u64 
    push           pc_libmcl.mgenmemaddr.d u64 
    push           46         
    addrefoff                 u64 1 0
    push           2          i64 
    popdotindex               u16 
    push           pc_libmcl.mgenmemaddr.d u64 
    push           48         
    addrefoff                 u64 1 0
    incr                      i16 1
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenmemaddr.a u64 
    push           2          i64 
    push           pc_libmcl.mgenmemaddr.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenmemaddr.d u64 
    push           pc_libmcl.mgenmemaddr.a u64 
    push           0          
    popptroff                 u64 1 0
    push           pc_libmcl.mgenmemaddr.d u64 
    push           48         
    addrefoff                 u64 1 0
    incr                      i16 1
    push           5          i64 
    push           pc_libmcl.mgenmemaddr.a u64 
    push           12         
    popptroff                 u8 1 0
    push           8          i64 
    push           pc_libmcl.mgenmemaddr.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenmemaddr.a u64 
    setret                    u64 
    jump           #7609      
#7609: 
    retfn                     u64 
End


Proc pc_libmcl.mgenreg: u64
    param          pc_libmcl.mgenreg.reg i64 
    param          pc_libmcl.mgenreg.size i64 
    procentry                 
    push           &pci_mcl.regtable 
    push           pc_libmcl.mgenreg.reg i64 
    addrefoff                 block:128 128 -128
    push           pc_libmcl.mgenreg.size i64 
    pushptroff                u64 8 -8
    setret                    u64 
    jump           #7611      
    setargs                   2 0
    push           pc_libmcl.mgenreg.size i64 
    push           pc_libmcl.mgenreg.reg i64 
    callfn         &pc_libmcl.mgenreg0 u64 
    setret                    u64 
    jump           #7611      
#7611: 
    retfn                     u64 
End


Proc pc_libmcl.mgenreg0: u64
    param          pc_libmcl.mgenreg0.reg i64 
    param          pc_libmcl.mgenreg0.size i64 
    local          pc_libmcl.mgenreg0.a u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenreg0.a u64 
    push           1          i64 
    push           pc_libmcl.mgenreg0.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenreg0.reg i64 
    push           pc_libmcl.mgenreg0.a u64 
    push           10         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenreg0.size i64 
    push           pc_libmcl.mgenreg0.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenreg0.a u64 
    setret                    u64 
    jump           #7613      
#7613: 
    retfn                     u64 
End


Proc pc_libmcl.mgenireg: u64
    param          pc_libmcl.mgenireg.reg i64 
    param          pc_libmcl.mgenireg.size i64 
    param          pc_libmcl.mgenireg.offset i64 
    local          pc_libmcl.mgenireg.a u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenireg.a u64 
    push           3          i64 
    push           pc_libmcl.mgenireg.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenireg.reg i64 
    push           pc_libmcl.mgenireg.a u64 
    push           10         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenireg.size i64 
    push           pc_libmcl.mgenireg.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenireg.offset i64 
    push           pc_libmcl.mgenireg.a u64 
    push           14         
    popptroff                 i32 1 0
    push           pc_libmcl.mgenireg.a u64 
    setret                    u64 
    jump           #7615      
#7615: 
    retfn                     u64 
End


Proc pc_libmcl.roundsizetg: i64
    param          pc_libmcl.roundsizetg.size i64 
    procentry                 
    jump           #7617      
#7618: 
    push           &pc_libmcl.roundsizetg.size 
    incr                      i64 1
#7617: 
    push           pc_libmcl.roundsizetg.size i64 
    push           7          i64 
    iand                      i64 
    jumptrue       #7618      i64 
#7619: 
    push           pc_libmcl.roundsizetg.size i64 
    setret                    i64 
    jump           #7620      
#7620: 
    retfn                     i64 
End


Proc pc_libmcl.getregname: u64
    param          pc_libmcl.getregname.reg i64 
    param          pc_libmcl.getregname.size i64 
    local          pc_libmcl.getregname.str2 block:16 
    local          pc_libmcl.getregname.rs u64 
    local          pc_libmcl.getregname.size2 i64 
    procentry                 
    push           pc_libmcl.getregname.size i64 
    pop            pc_libmcl.getregname.size2 i64 
    push           pc_libmcl.getregname.size2 i64 
    push           16         i64 
    jumple         #7622      i64 
    push           17         i64 
    pop            pc_libmcl.getregname.size2 i64 
#7622: 
    push           pc_libmcl.getregname.reg i64 
    push           0          i64 
    casejumpeq     #7623      i64 0
    push           15         i64 
    casejumpeq     #7624      i64 0
    push           16         i64 
    casejumpeq     #7625      i64 0
    popstack                  i64 
    jump           #7626      
#7623: 
    push           "-"        u64 
    setret                    u64 
    jump           #7627      
    jump           #7628      
#7624: 
    push           "frame"    u64 
    pop            pc_libmcl.getregname.rs u64 
    jump           #7628      
#7625: 
    push           "stack"    u64 
    pop            pc_libmcl.getregname.rs u64 
    jump           #7628      
#7626: 
    setargs                   2 0
    push           &pc_libmcl.getregname.str2 
    push           pc_libmcl.getregname.reg i64 
    push           1          i64 
    sub                       i64 
    callproc       &msysp.getstrint 
    push           &pc_libmcl.getregname.str2 
    pop            pc_libmcl.getregname.rs u64 
#7628: 
    setargs                   1 0
    push           &pc_libmcl.getregname.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           &pc_libmcl.getregname.prefix 
    push           pc_libmcl.getregname.size2 i64 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           pc_libmcl.getregname.rs u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           &pc_libmcl.getregname.str 
    setret                    u64 
    jump           #7627      
#7627: 
    retfn                     u64 
End


Proc pc_libmcl.fgetregname: u64
    param          pc_libmcl.fgetregname.reg i64 
    param          pc_libmcl.fgetregname.size i64 
    procentry                 
    push           pc_libmcl.fgetregname.reg i64 
    push           0          i64 
    jumpne         #7630      i64 
    push           "-"        u64 
    setret                    u64 
    jump           #7631      
#7630: 
    setargs                   1 0
    push           &pc_libmcl.fgetregname.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "XMM"      u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           pc_libmcl.fgetregname.reg i64 
    push           1          i64 
    sub                       i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           &pc_libmcl.fgetregname.str 
    setret                    u64 
    jump           #7631      
#7631: 
    retfn                     u64 
End


Proc pc_libmcl.sameoperand: i64
    param          pc_libmcl.sameoperand.a u64 
    param          pc_libmcl.sameoperand.b u64 
    procentry                 
    setargs                   3 0
    push           8          u64 
    push           pc_libmcl.sameoperand.b u64 
    push           pc_libmcl.sameoperand.a u64 
    callfn         &memcmp    i32 
    push           0          i64 
    seteq                     i64 
    setret                    i64 
    jump           #7633      
#7633: 
    retfn                     i64 
End


Proc pc_libmcl.sameregopnd: i64
    param          pc_libmcl.sameregopnd.a u64 
    param          pc_libmcl.sameregopnd.b u64 
    procentry                 
    push           pc_libmcl.sameregopnd.a u64 
    push           9          
    pushptroff                u8 1 0
    push           pc_libmcl.sameregopnd.b u64 
    push           9          
    pushptroff                u8 1 0
    jumpne         #7635      i64 
    push           pc_libmcl.sameregopnd.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #7636      i64 
#7635: 
    push           0          i64 
    setret                    i64 
    jump           #7637      
#7636: 
    push           pc_libmcl.sameregopnd.a u64 
    push           10         
    pushptroff                u8 1 0
    push           pc_libmcl.sameregopnd.b u64 
    push           10         
    pushptroff                u8 1 0
    seteq                     i64 
    setret                    i64 
    jump           #7637      
#7637: 
    retfn                     i64 
End


Proc pc_libmcl.getstringindex: i64
    param          pc_libmcl.getstringindex.s u64 
    procentry                 
    push           pc_libmcl.getstringindex.s u64 
    push           0          u64 
    jumpne         #7639      u64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pci_mcl.kk0used i64 
    push           pci_mcl.kk0used i64 
    setret                    i64 
    jump           #7640      
#7639: 
    push           pci_mcl.nstrings i64 
    push           pci_mcl.stringtablesize i64 
    jumplt         #7641      i64 
    setargs                   0 0
    callproc       &pc_libmcl.extendstringtable 
#7641: 
    push           pci_mcl.nstrings i64 
    jumpfalse      #7642      i64 
    setargs                   2 0
    push           pc_libmcl.getstringindex.s u64 
    push           pci_mcl.stringtable u64 
    push           pci_mcl.nstrings i64 
    pushptroff                u64 8 -8
    callfn         &mlibp.eqstring i64 
    jumpfalse      #7642      i64 
    push           pci_mcl.stringlabtable u64 
    push           pci_mcl.nstrings i64 
    pushptroff                i32 4 -4
    setret                    i64 
    jump           #7640      
#7642: 
    push           pc_libmcl.getstringindex.s u64 
    push           pci_mcl.stringtable u64 
    push           &pci_mcl.nstrings 
    incrload                  i64 1
    popptroff                 u64 8 -8
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    push           pci_mcl.stringlabtable u64 
    push           pci_mcl.nstrings i64 
    popptroff                 i32 4 -4
    push           pci_mcl.mlabelno i64 
    setret                    i64 
    jump           #7640      
#7640: 
    retfn                     i64 
End


Proc pc_libmcl.getrealindex: i64
    param          pc_libmcl.getrealindex.x r64 
    param          pc_libmcl.getrealindex.size i64 
    procentry                 
    push           pci_mcl.nreals i64 
    push           pci_mcl.realtablesize i64 
    jumplt         #7644      i64 
    setargs                   0 0
    callproc       &pc_libmcl.extendrealtable 
#7644: 
    push           pc_libmcl.getrealindex.x r64 
    push           pci_mcl.realtable u64 
    push           &pci_mcl.nreals 
    incrload                  i64 1
    popptroff                 r64 8 -8
    push           &pci_mcl.mlabelno 
    incr                      i64 1
    startmult                 
    push           pc_libmcl.getrealindex.size i64 
    push           8          i64 
    jumpne         #7645      i64 
    push           pci_mcl.mlabelno i64 
    resetmult                 
    jump           #7646      
#7645: 
    push           pci_mcl.mlabelno i64 
    neg                       i64 
    endmult                   
#7646: 
    push           pci_mcl.reallabtable u64 
    push           pci_mcl.nreals i64 
    popptroff                 i32 4 -4
    push           pci_mcl.mlabelno i64 
    setret                    i64 
    jump           #7647      
#7647: 
    retfn                     i64 
End


Proc pc_libmcl.extendstringtable:
    local          pc_libmcl.extendstringtable.oldstringtable u64 
    local          pc_libmcl.extendstringtable.oldstringlabtable u64 
    local          pc_libmcl.extendstringtable.oldstringtablesize i64 
    local          pc_libmcl.extendstringtable.i i64 
    procentry                 
    push           pci_mcl.stringtablesize i64 
    pop            pc_libmcl.extendstringtable.oldstringtablesize i64 
    push           pci_mcl.stringtable u64 
    pop            pc_libmcl.extendstringtable.oldstringtable u64 
    push           pci_mcl.stringlabtable u64 
    pop            pc_libmcl.extendstringtable.oldstringlabtable u64 
    push           &pci_mcl.stringtablesize 
    push           2          i64 
    multo                     i64 
    setargs                   1 0
    push           8          i64 
    push           pci_mcl.stringtablesize i64 
    mul                       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pci_mcl.stringtable u64 
    setargs                   1 0
    push           4          i64 
    push           pci_mcl.stringtablesize i64 
    mul                       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pci_mcl.stringlabtable u64 
#7649: 
    push           1          i64 
    pop            pc_libmcl.extendstringtable.i i64 
    push           pci_mcl.nstrings i64 
    push           1          i64 
    jumplt         #7650      i64 
#7651: 
    push           pc_libmcl.extendstringtable.oldstringtable u64 
    push           pc_libmcl.extendstringtable.i i64 
    pushptroff                u64 8 -8
    push           pci_mcl.stringtable u64 
    push           pc_libmcl.extendstringtable.i i64 
    popptroff                 u64 8 -8
    push           pc_libmcl.extendstringtable.oldstringlabtable u64 
    push           pc_libmcl.extendstringtable.i i64 
    pushptroff                i32 4 -4
    push           pci_mcl.stringlabtable u64 
    push           pc_libmcl.extendstringtable.i i64 
    popptroff                 i32 4 -4
#7652: 
    forup          #7651      i64 1
    opnd           pc_libmcl.extendstringtable.i 
    opnd           pci_mcl.nstrings 
#7650: 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.extendstringtable.oldstringtablesize i64 
    mul                       i64 
    push           pc_libmcl.extendstringtable.oldstringtable u64 
    callproc       &mlibp.pcm_free 
    setargs                   2 0
    push           4          i64 
    push           pc_libmcl.extendstringtable.oldstringtablesize i64 
    mul                       i64 
    push           pc_libmcl.extendstringtable.oldstringlabtable u64 
    callproc       &mlibp.pcm_free 
#7653: 
    retproc                   
End


Proc pc_libmcl.extendrealtable:
    local          pc_libmcl.extendrealtable.oldrealtable u64 
    local          pc_libmcl.extendrealtable.oldreallabtable u64 
    local          pc_libmcl.extendrealtable.oldrealtablesize i64 
    local          pc_libmcl.extendrealtable.i i64 
    procentry                 
    push           pci_mcl.realtablesize i64 
    pop            pc_libmcl.extendrealtable.oldrealtablesize i64 
    push           pci_mcl.realtable u64 
    pop            pc_libmcl.extendrealtable.oldrealtable u64 
    push           pci_mcl.reallabtable u64 
    pop            pc_libmcl.extendrealtable.oldreallabtable u64 
    push           &pci_mcl.realtablesize 
    push           2          i64 
    multo                     i64 
    setargs                   1 0
    push           8          i64 
    push           pci_mcl.realtablesize i64 
    mul                       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pci_mcl.realtable u64 
    setargs                   1 0
    push           4          i64 
    push           pci_mcl.realtablesize i64 
    mul                       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pci_mcl.reallabtable u64 
#7655: 
    push           1          i64 
    pop            pc_libmcl.extendrealtable.i i64 
    push           pci_mcl.nreals i64 
    push           1          i64 
    jumplt         #7656      i64 
#7657: 
    push           pc_libmcl.extendrealtable.oldrealtable u64 
    push           pc_libmcl.extendrealtable.i i64 
    pushptroff                r64 8 -8
    push           pci_mcl.realtable u64 
    push           pc_libmcl.extendrealtable.i i64 
    popptroff                 r64 8 -8
    push           pc_libmcl.extendrealtable.oldreallabtable u64 
    push           pc_libmcl.extendrealtable.i i64 
    pushptroff                i32 4 -4
    push           pci_mcl.reallabtable u64 
    push           pc_libmcl.extendrealtable.i i64 
    popptroff                 i32 4 -4
#7658: 
    forup          #7657      i64 1
    opnd           pc_libmcl.extendrealtable.i 
    opnd           pci_mcl.nreals 
#7656: 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.extendrealtable.oldrealtablesize i64 
    mul                       i64 
    push           pc_libmcl.extendrealtable.oldrealtable u64 
    callproc       &mlibp.pcm_free 
    setargs                   2 0
    push           4          i64 
    push           pc_libmcl.extendrealtable.oldrealtablesize i64 
    mul                       i64 
    push           pc_libmcl.extendrealtable.oldreallabtable u64 
    callproc       &mlibp.pcm_free 
#7659: 
    retproc                   
End


Proc pc_libmcl.asmstr:
    param          pc_libmcl.asmstr.s u64 
    procentry                 
    setargs                   2 0
    push           pc_libmcl.asmstr.s u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
#7661: 
    retproc                   
End


Proc pc_libmcl.asmchar:
    param          pc_libmcl.asmchar.c i64 
    procentry                 
    setargs                   2 0
    push           pc_libmcl.asmchar.c i64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_char 
#7663: 
    retproc                   
End


Proc pc_libmcl.getfullname: u64
    param          pc_libmcl.getfullname.d u64 
    local          pc_libmcl.getfullname.name u64 
    procentry                 
    push           pc_libmcl.getfullname.d u64 
    pushptr                   u64 
    pop            pc_libmcl.getfullname.name u64 
    push           pc_libmcl.getfullname.d u64 
    push           50         
    pushptroff                u8 1 0
    jumpfalse      #7665      i64 
    setargs                   1 0
    push           &pc_libmcl.getfullname.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "#.#"      u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    startmult                 
    push           pc_libmcl.getfullname.d u64 
    push           46         
    pushptroff                u16 1 0
    push           4          i64 
    dotindex                  i64 
    jumpfalse      #7666      u64 
    push           "X"        u64 
    resetmult                 
    jump           #7667      
#7666: 
    push           "R"        u64 
    endmult                   
#7667: 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libmcl.getfullname.name u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           &pc_libmcl.getfullname.str 
    setret                    u64 
    jump           #7668      
#7665: 
    startmult                 
    push           pc_libmcl.getfullname.d u64 
    push           46         
    pushptroff                u16 1 0
    push           8          i64 
    dotindex                  i64 
    jumpfalse      #7669      u64 
    push           pc_libmcl.getfullname.d u64 
    push           46         
    pushptroff                u16 1 0
    push           1          i64 
    dotindex                  i64 
    jumpfalse      #7669      u64 
    setargs                   2 0
    push           "`"        u64 
    push           &pc_libmcl.getfullname.str 
    callproc       &strcpy    
    setargs                   2 0
    push           pc_libmcl.getfullname.name u64 
    push           &pc_libmcl.getfullname.str 
    callproc       &strcat    
    setargs                   2 0
    push           "*"        u64 
    push           &pc_libmcl.getfullname.str 
    callfn         &strcat    u64 
    resetmult                 
    jump           #7670      
#7669: 
    push           pc_libmcl.getfullname.d u64 
    push           46         
    pushptroff                u16 1 0
    push           1          i64 
    dotindex                  i64 
    jumpfalse      #7671      u64 
    setargs                   2 0
    push           pc_libmcl.getfullname.name u64 
    push           &pc_libmcl.getfullname.str 
    callproc       &strcpy    
    setargs                   2 0
    push           "*"        u64 
    push           &pc_libmcl.getfullname.str 
    callfn         &strcat    u64 
    resetmult                 
    jump           #7670      
#7671: 
    push           pc_libmcl.getfullname.name u64 
    endmult                   
#7670: 
    setret                    u64 
    jump           #7668      
#7668: 
    retfn                     u64 
End


Proc pc_libmcl.getfulltempname: u64
    param          pc_libmcl.getfulltempname.tempno i64 
    procentry                 
    push           "TEMP"     u64 
    setret                    u64 
    jump           #7673      
#7673: 
    retfn                     u64 
End


Proc pc_libmcl.merror:
    param          pc_libmcl.merror.mess u64 
    param          pc_libmcl.merror.param u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "MCL Error: # (#) [#]" u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           pc_libmcl.merror.mess u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libmcl.merror.param u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.mseqno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#7675: 
    retproc                   
End


Proc pc_libmcl.merrort:
    param          pc_libmcl.merrort.mess u64 
    param          pc_libmcl.merrort.t i64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "MCL Type not supported: # (#) [#]" u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           pc_libmcl.merrort.mess u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pc_tables.pstdnames 
    push           pc_libmcl.merrort.t i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.mseqno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#7677: 
    retproc                   
End


Proc pc_libmcl.merroropnd:
    param          pc_libmcl.merroropnd.mess u64 
    param          pc_libmcl.merroropnd.opndtype i64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "MCL Opnd not supported: # (#) [#]" u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           pc_libmcl.merroropnd.mess u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pc_tables.opndnames 
    push           pc_libmcl.merroropnd.opndtype i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.mseqno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#7679: 
    retproc                   
End


Proc pc_libmcl.genstringtable:
    local          pc_libmcl.genstringtable.col i64 
    local          pc_libmcl.genstringtable.i i64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           73         i64 
    callproc       &pc_libmcl.setsegment 
    push           pci_mcl.kk0used i64 
    jumpfalse      #7681      i64 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.kk0used i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_libmcl.gendb 
#7681: 
    push           pci_mcl.nstrings i64 
    jumptrue       #7682      i64 
    jump           #7683      
#7682: 
#7684: 
    push           1          i64 
    pop            pc_libmcl.genstringtable.i i64 
    push           pci_mcl.nstrings i64 
    push           1          i64 
    jumplt         #7685      i64 
#7686: 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.stringlabtable u64 
    push           pc_libmcl.genstringtable.i i64 
    pushptroff                i32 4 -4
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   2 0
    push           1          i64 
    push           pci_mcl.stringtable u64 
    push           pc_libmcl.genstringtable.i i64 
    pushptroff                u64 8 -8
    callproc       &pc_libmcl.genstring 
#7687: 
    forup          #7686      i64 1
    opnd           pc_libmcl.genstringtable.i 
    opnd           pci_mcl.nstrings 
#7685: 
#7683: 
    retproc                   
End


Proc pc_libmcl.genstring:
    param          pc_libmcl.genstring.s u64 
    param          pc_libmcl.genstring.doterm i64 
    local          pc_libmcl.genstring.i i64 
    local          pc_libmcl.genstring.c i64 
    local          pc_libmcl.genstring.seqlen i64 
    local          pc_libmcl.genstring.length i64 
    local          pc_libmcl.genstring.seq u64 
    local          pc_libmcl.genstring.av_1 i64 
    procentry                 
    setargs                   1 0
    push           pc_libmcl.genstring.s u64 
    callfn         &strlen    i64 
    pop            pc_libmcl.genstring.length i64 
    push           pc_libmcl.genstring.length i64 
    push           0          i64 
    jumpne         #7689      i64 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_libmcl.gendb 
    jump           #7690      
#7689: 
    push           0          i64 
    pop            pc_libmcl.genstring.seqlen i64 
#7691: 
    push           pc_libmcl.genstring.length i64 
    pop            pc_libmcl.genstring.av_1 i64 
    push           pc_libmcl.genstring.av_1 i64 
    push           0          i64 
    jumple         #7692      i64 
#7693: 
    push           &pc_libmcl.genstring.s 
    loadincr                  u64 1
    pushptr                   u8 
    pop            pc_libmcl.genstring.c i64 
    push           pc_libmcl.genstring.c i64 
    push           32         i64 
    jumplt         #7694      i64 
    push           pc_libmcl.genstring.c i64 
    push           127        i64 
    jumpge         #7694      i64 
    push           pc_libmcl.genstring.c i64 
    push           34         i64 
    jumpne         #7695      i64 
#7694: 
    push           pc_libmcl.genstring.seqlen i64 
    jumpfalse      #7696      i64 
    setargs                   2 0
    push           pc_libmcl.genstring.seqlen i64 
    push           pc_libmcl.genstring.seq u64 
    callproc       &pc_libmcl.gendbstring 
    push           0          i64 
    pop            pc_libmcl.genstring.seqlen i64 
#7696: 
    setargs                   1 0
    push           pc_libmcl.genstring.c i64 
    callproc       &pc_libmcl.gendb 
    jump           #7697      
#7695: 
    push           pc_libmcl.genstring.seqlen i64 
    push           0          i64 
    jumpne         #7698      i64 
    push           1          i64 
    pop            pc_libmcl.genstring.seqlen i64 
    push           pc_libmcl.genstring.s u64 
    push           1          i64 
    subrefoff                 u64 1 0
    pop            pc_libmcl.genstring.seq u64 
    jump           #7699      
#7698: 
    push           &pc_libmcl.genstring.seqlen 
    incr                      i64 1
#7699: 
#7697: 
#7700: 
    to             #7693      
    opnd           pc_libmcl.genstring.av_1 
#7692: 
    push           pc_libmcl.genstring.seqlen i64 
    jumpfalse      #7701      i64 
    setargs                   2 0
    push           pc_libmcl.genstring.seqlen i64 
    push           pc_libmcl.genstring.seq u64 
    callproc       &pc_libmcl.gendbstring 
#7701: 
    push           pc_libmcl.genstring.doterm i64 
    jumpfalse      #7702      i64 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_libmcl.gendb 
#7702: 
#7690: 
    retproc                   
End


Proc pc_libmcl.gendb:
    param          pc_libmcl.gendb.a i64 
    procentry                 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.gendb.a i64 
    callfn         &pc_libmcl.mgenint u64 
    push           114        i64 
    callproc       &pc_libmcl.genmc 
#7704: 
    retproc                   
End


Proc pc_libmcl.gendbstring:
    param          pc_libmcl.gendbstring.s u64 
    param          pc_libmcl.gendbstring.length i64 
    procentry                 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           pc_libmcl.gendbstring.length i64 
    push           pc_libmcl.gendbstring.s u64 
    callfn         &pc_libmcl.mgenstring u64 
    push           114        i64 
    callproc       &pc_libmcl.genmc 
#7706: 
    retproc                   
End


Proc pc_libmcl.gendq:
    param          pc_libmcl.gendq.a i64 
    procentry                 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.gendq.a i64 
    callfn         &pc_libmcl.mgenint u64 
    push           117        i64 
    callproc       &pc_libmcl.genmc 
#7708: 
    retproc                   
End


Proc pc_libmcl.gendqname:
    param          pc_libmcl.gendqname.d u64 
    procentry                 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.gendqname.d u64 
    callfn         &pc_libmcl.mgenmemaddr u64 
    push           117        i64 
    callproc       &pc_libmcl.genmc 
#7710: 
    retproc                   
End


Proc pc_libmcl.gendqlabel:
    param          pc_libmcl.gendqlabel.lab i64 
    procentry                 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.gendqlabel.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           117        i64 
    callproc       &pc_libmcl.genmc 
#7712: 
    retproc                   
End


Proc pc_libmcl.genrealtable:
    local          pc_libmcl.genrealtable.x r64 
    local          pc_libmcl.genrealtable.i i64 
    procentry                 
    push           pci_mcl.nreals i64 
    jumptrue       #7714      i64 
    jump           #7715      
#7714: 
    setargs                   1 0
    push           "Real Table" u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   2 0
    push           8          i64 
    push           73         i64 
    callproc       &pc_libmcl.setsegment 
#7716: 
    push           1          i64 
    pop            pc_libmcl.genrealtable.i i64 
    push           pci_mcl.nreals i64 
    push           1          i64 
    jumplt         #7717      i64 
#7718: 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.reallabtable u64 
    push           pc_libmcl.genrealtable.i i64 
    pushptroff                i32 4 -4
    abs                       i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    push           pci_mcl.realtable u64 
    push           pc_libmcl.genrealtable.i i64 
    pushptroff                r64 8 -8
    pop            pc_libmcl.genrealtable.x r64 
    push           pci_mcl.reallabtable u64 
    push           pc_libmcl.genrealtable.i i64 
    pushptroff                i32 4 -4
    push           0          i64 
    jumple         #7719      i64 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.genrealtable.x r64 
    callfn         &pc_libmcl.mgenrealimm u64 
    push           117        i64 
    callproc       &pc_libmcl.genmc 
    jump           #7720      
#7719: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           4          i64 
    push           pc_libmcl.genrealtable.x r64 
    callfn         &pc_libmcl.mgenrealimm u64 
    push           116        i64 
    callproc       &pc_libmcl.genmc 
#7720: 
#7721: 
    forup          #7718      i64 1
    opnd           pc_libmcl.genrealtable.i 
    opnd           pci_mcl.nreals 
#7717: 
#7715: 
    retproc                   
End


Proc pc_libmcl.genabsneg:
    procentry                 
    setargs                   2 0
    push           16         i64 
    push           73         i64 
    callproc       &pc_libmcl.setsegment 
    push           pci_mcl.lababs32 i64 
    jumpfalse      #7723      i64 
    setargs                   1 0
    push           "lababs32" u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.lababs32 i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           9223372034707292159 i64 
    callproc       &pc_libmcl.gendq 
    setargs                   1 0
    push           9223372034707292159 i64 
    callproc       &pc_libmcl.gendq 
#7723: 
    push           pci_mcl.lababs64 i64 
    jumpfalse      #7724      i64 
    setargs                   1 0
    push           "lababs64" u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.lababs64 i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           9223372036854775807 i64 
    callproc       &pc_libmcl.gendq 
    setargs                   1 0
    push           9223372036854775807 i64 
    callproc       &pc_libmcl.gendq 
#7724: 
    push           pci_mcl.labneg32 i64 
    jumpfalse      #7725      i64 
    setargs                   1 0
    push           "labneg32" u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.labneg32 i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           -9223372034707292160 i64 
    callproc       &pc_libmcl.gendq 
    setargs                   1 0
    push           -9223372034707292160 i64 
    callproc       &pc_libmcl.gendq 
#7725: 
    push           pci_mcl.labneg64 i64 
    jumpfalse      #7726      i64 
    setargs                   1 0
    push           "labneg64" u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.labneg64 i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           -9223372036854775808 i64 
    callproc       &pc_libmcl.gendq 
    setargs                   1 0
    push           -9223372036854775808 i64 
    callproc       &pc_libmcl.gendq 
#7726: 
    push           pci_mcl.labzero i64 
    jumpfalse      #7727      i64 
    setargs                   1 0
    push           "labzero"  u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.labzero i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_libmcl.gendq 
#7727: 
    push           pci_mcl.labmask63 i64 
    jumpfalse      #7728      i64 
    setargs                   1 0
    push           "mask63/offset64" u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.labmask63 i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           9223372036854775807 i64 
    callproc       &pc_libmcl.gendq 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.laboffset64 i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           4890909195324358656 i64 
    callproc       &pc_libmcl.gendq 
#7728: 
#7729: 
    retproc                   
End


Proc pc_libmcl.mdefinelabel: i64
    procentry                 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    push           pci_mcl.mlabelno i64 
    setret                    i64 
    jump           #7731      
#7731: 
    retfn                     i64 
End


Proc pc_libmcl.mcreatefwdlabel: i64
    procentry                 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    setret                    i64 
    jump           #7733      
#7733: 
    retfn                     i64 
End


Proc pc_libmcl.mdefinefwdlabel:
    param          pc_libmcl.mdefinefwdlabel.lab i64 
    procentry                 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.mdefinefwdlabel.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
#7735: 
    retproc                   
End


Proc pc_libmcl.stropnd: u64
    param          pc_libmcl.stropnd.a u64 
    param          pc_libmcl.stropnd.sizeprefix i64 
    param          pc_libmcl.stropnd.debug i64 
    local          pc_libmcl.stropnd.str2 block:128 
    local          pc_libmcl.stropnd.plus u64 
    local          pc_libmcl.stropnd.t u64 
    local          pc_libmcl.stropnd.offset i64 
    local          pc_libmcl.stropnd.tc i64 
    procentry                 
    push           0          u64 
    push           &pc_libmcl.stropnd.str 
    push           1          i64 
    popptroff                 u8 1 -1
    push           pc_libmcl.stropnd.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #7737      i64 0
    push           2          i64 
    casejumpeq     #7738      i64 0
    push           3          i64 
    casejumpeq     #7739      i64 0
    push           5          i64 
    casejumpeq     #7740      i64 0
    popstack                  i64 
    jump           #7741      
#7737: 
    setargs                   2 0
    push           pc_libmcl.stropnd.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_libmcl.stropnd.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.strreg u64 
    setret                    u64 
    jump           #7742      
    jump           #7743      
#7738: 
    setargs                   2 0
    setargs                   1 0
    push           pc_libmcl.stropnd.a u64 
    callfn         &pc_libmcl.strvalue u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcpy    
    jump           #7743      
#7739: 
    push           pc_libmcl.stropnd.a u64 
    push           12         
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #7744      i64 0
    push           2          i64 
    casejumpeq     #7745      i64 0
    push           3          i64 
    casejumpeq     #7746      i64 0
    popstack                  i64 
    jump           #7747      
#7744: 
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_libmcl.stropnd.a u64 
    pushptr                   i64 
    callfn         &msysp.strint u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcpy    
    jump           #7748      
#7745: 
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_libmcl.stropnd.a u64 
    pushptr                   r64 
    callfn         &msysp.strreal u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcpy    
    jump           #7748      
#7746: 
    setargs                   1 0
    push           &pc_libmcl.stropnd.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "M#"       u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   2 0
    push           0          i64 
    push           pc_libmcl.stropnd.a u64 
    pushptr                   r64 
    callproc       &msysp.m$print_r64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #7748      
#7747: 
#7748: 
    setargs                   2 0
    setargs                   2 0
    push           pc_libmcl.stropnd.sizeprefix i64 
    push           pc_libmcl.stropnd.a u64 
    push           8          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.getsizeprefix u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcat    
    setargs                   2 0
    push           "["        u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcat    
    push           ""         u64 
    pop            pc_libmcl.stropnd.plus u64 
    push           pc_libmcl.stropnd.a u64 
    push           10         
    pushptroff                u8 1 0
    jumpfalse      #7749      i64 
    setargs                   2 0
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.stropnd.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.strreg u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcat    
    push           "+"        u64 
    pop            pc_libmcl.stropnd.plus u64 
#7749: 
    push           pc_libmcl.stropnd.a u64 
    push           11         
    pushptroff                u8 1 0
    jumpfalse      #7750      i64 
    setargs                   2 0
    push           pc_libmcl.stropnd.plus u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcat    
    setargs                   2 0
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.stropnd.a u64 
    push           11         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.strreg u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcat    
    push           "+"        u64 
    pop            pc_libmcl.stropnd.plus u64 
    push           pc_libmcl.stropnd.a u64 
    push           13         
    pushptroff                u8 1 0
    push           1          i64 
    jumple         #7751      i64 
    setargs                   2 0
    push           "*"        u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcat    
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_libmcl.stropnd.a u64 
    push           13         
    pushptroff                u8 1 0
    callfn         &msysp.strint u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcat    
#7751: 
#7750: 
    push           pc_libmcl.stropnd.a u64 
    push           12         
    pushptroff                u8 1 0
    push           5          i64 
    setjumpeq      #7752      i64 
    push           7          i64 
    setjumpeq      #7752      i64 
    push           6          i64 
    setjumpne      #7753      i64 
#7752: 
    push           pc_libmcl.stropnd.plus u64 
    pushptr                   u8 
    push           43         u64 
    jumpne         #7754      u64 
    setargs                   2 0
    push           pc_libmcl.stropnd.plus u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcat    
#7754: 
    setargs                   2 0
    setargs                   1 0
    push           pc_libmcl.stropnd.a u64 
    callfn         &pc_libmcl.strvalue u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcat    
    jump           #7755      
#7753: 
    push           pc_libmcl.stropnd.a u64 
    push           14         
    pushptroff                i32 1 0
    store          pc_libmcl.stropnd.offset i64 
    jumpfalse      #7756      i64 
    setargs                   1 0
    push           &pc_libmcl.stropnd.str2 
    callproc       &msysp.m$print_startstr 
    setargs                   2 0
    push           "+"        u64 
    push           pc_libmcl.stropnd.offset i64 
    callproc       &msysp.m$print_i64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           &pc_libmcl.stropnd.str2 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcat    
#7756: 
#7755: 
    setargs                   2 0
    push           "]"        u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcat    
    jump           #7743      
#7740: 
    setargs                   2 0
    push           pc_libmcl.stropnd.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_libmcl.stropnd.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.strxreg u64 
    setret                    u64 
    jump           #7742      
    jump           #7743      
#7741: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "BAD OPND" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libmcl.stropnd.a u64 
    push           9          
    pushptroff                u8 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           "<BAD OPND>" u64 
    setret                    u64 
    jump           #7742      
#7743: 
    push           &pc_libmcl.stropnd.str 
    setret                    u64 
    jump           #7742      
#7742: 
    retfn                     u64 
End


Proc pc_libmcl.strreg: u64
    param          pc_libmcl.strreg.reg i64 
    param          pc_libmcl.strreg.size i64 
    local          pc_libmcl.strreg.d u64 
    procentry                 
    setargs                   2 0
    push           0          i64 
    push           pc_libmcl.strreg.reg i64 
    callfn         &pc_libmcl.checkregvar u64 
    pop            pc_libmcl.strreg.d u64 
    startmult                 
    push           pc_libmcl.strreg.size i64 
    push           8          i64 
    jumpne         #7758      i64 
    push           pc_libmcl.strreg.d u64 
    jumpfalse      #7758      u64 
    setargs                   1 0
    push           pc_libmcl.strreg.d u64 
    callfn         &pc_libmcl.getfullname u64 
    resetmult                 
    jump           #7759      
#7758: 
    setargs                   2 0
    push           pc_libmcl.strreg.size i64 
    push           pc_libmcl.strreg.reg i64 
    callfn         &pc_libmcl.getregname u64 
    endmult                   
#7759: 
    setret                    u64 
    jump           #7760      
#7760: 
    retfn                     u64 
End


Proc pc_libmcl.checkregvar: u64
    param          pc_libmcl.checkregvar.reg i64 
    param          pc_libmcl.checkregvar.isfloat i64 
    local          pc_libmcl.checkregvar.d u64 
    local          pc_libmcl.checkregvar.p u64 
    procentry                 
    push           pci_mcl.currasmproc u64 
    push           0          u64 
    jumpne         #7762      u64 
    push           0          u64 
    setret                    u64 
    jump           #7763      
#7762: 
    push           pci_mcl.currasmproc u64 
    push           16         
    pushptroff                u64 1 0
    push           1          i64 
    addrefoff                 u64 32 0
    pop            pc_libmcl.checkregvar.p u64 
    jump           #7764      
#7765: 
    push           pc_libmcl.checkregvar.p u64 
    push           1          
    pushptroff                u8 1 0
    push           18         i64 
    setjumpeq      #7766      i64 
    push           19         i64 
    setjumpne      #7767      i64 
#7766: 
    push           pc_libmcl.checkregvar.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_libmcl.checkregvar.d u64 
    push           pc_libmcl.checkregvar.d u64 
    push           50         
    pushptroff                u8 1 0
    push           pc_libmcl.checkregvar.reg i64 
    jumpne         #7768      i64 
    push           pc_libmcl.checkregvar.isfloat i64 
    jumpfalse      #7769      i64 
    push           &pc_tables.pfloat 
    push           pc_libmcl.checkregvar.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #7769      i64 
    push           pc_libmcl.checkregvar.d u64 
    setret                    u64 
    jump           #7763      
#7769: 
    push           pc_libmcl.checkregvar.isfloat i64 
    jumptrue       #7770      i64 
    push           &pc_tables.pfloat 
    push           pc_libmcl.checkregvar.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumptrue       #7770      i64 
    push           pc_libmcl.checkregvar.d u64 
    setret                    u64 
    jump           #7763      
#7770: 
#7768: 
#7767: 
#7771: 
    push           &pc_libmcl.checkregvar.p 
    incr                      u64 32
#7764: 
    push           pc_libmcl.checkregvar.p u64 
    push           1          
    pushptroff                u8 1 0
    push           10         i64 
    jumpne         #7765      i64 
#7772: 
    push           0          u64 
    setret                    u64 
    jump           #7763      
#7763: 
    retfn                     u64 
End


Proc pc_libmcl.strxreg: u64
    param          pc_libmcl.strxreg.reg i64 
    param          pc_libmcl.strxreg.size i64 
    local          pc_libmcl.strxreg.d u64 
    procentry                 
    setargs                   2 0
    push           1          i64 
    push           pc_libmcl.strxreg.reg i64 
    callfn         &pc_libmcl.checkregvar u64 
    pop            pc_libmcl.strxreg.d u64 
    startmult                 
    push           pc_libmcl.strxreg.size i64 
    push           8          i64 
    jumpne         #7774      i64 
    push           pc_libmcl.strxreg.d u64 
    jumpfalse      #7774      u64 
    setargs                   1 0
    push           pc_libmcl.strxreg.d u64 
    callfn         &pc_libmcl.getfullname u64 
    resetmult                 
    jump           #7775      
#7774: 
    setargs                   2 0
    push           pc_libmcl.strxreg.size i64 
    push           pc_libmcl.strxreg.reg i64 
    callfn         &pc_libmcl.fgetregname u64 
    endmult                   
#7775: 
    setret                    u64 
    jump           #7776      
#7776: 
    retfn                     u64 
End


Proc pc_libmcl.strvalue: u64
    param          pc_libmcl.strvalue.a u64 
    local          pc_libmcl.strvalue.str2 block:128 
    local          pc_libmcl.strvalue.def u64 
    local          pc_libmcl.strvalue.value i64 
    local          pc_libmcl.strvalue.offset i64 
    local          pc_libmcl.strvalue.length i64 
    local          pc_libmcl.strvalue.ss u64 
    procentry                 
    push           pc_libmcl.strvalue.a u64 
    pushptr                   u64 
    pop            pc_libmcl.strvalue.def u64 
    push           pc_libmcl.strvalue.a u64 
    pushptr                   i64 
    pop            pc_libmcl.strvalue.value i64 
    setargs                   2 0
    push           ""         u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcpy    
    push           pc_libmcl.strvalue.a u64 
    push           12         
    pushptroff                u8 1 0
    push           5          i64 
    casejumpeq     #7778      i64 0
    push           6          i64 
    casejumpeq     #7779      i64 0
    push           1          i64 
    casejumpeq     #7780      i64 0
    push           2          i64 
    casejumpeq     #7781      i64 0
    push           3          i64 
    casejumpeq     #7782      i64 0
    push           4          i64 
    casejumpeq     #7783      i64 0
    push           8          i64 
    casejumpeq     #7784      i64 0
    push           9          i64 
    casejumpeq     #7785      i64 0
    push           7          i64 
    casejumpeq     #7786      i64 0
    popstack                  i64 
    jump           #7787      
#7778: 
    setargs                   2 0
    setargs                   1 0
    push           pc_libmcl.strvalue.def u64 
    callfn         &pc_libmcl.getfullname u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
!addoffset::
#7788: 
    push           pc_libmcl.strvalue.a u64 
    push           14         
    pushptroff                i32 1 0
    store          pc_libmcl.strvalue.offset i64 
    jumpfalse      #7789      i64 
    setargs                   1 0
    push           &pc_libmcl.strvalue.str2 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    startmult                 
    push           pc_libmcl.strvalue.offset i64 
    push           0          i64 
    jumple         #7790      i64 
    push           "+"        u64 
    resetmult                 
    jump           #7791      
#7790: 
    push           ""         u64 
    endmult                   
#7791: 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           pc_libmcl.strvalue.offset i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           &pc_libmcl.strvalue.str2 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
#7789: 
    jump           #7792      
#7779: 
    setargs                   2 0
    setargs                   1 0
    push           pc_libmcl.strvalue.a u64 
    pushptr                   i64 
    callfn         &pc_libmcl.getfulltempname u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
    jump           #7792      
#7780: 
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_libmcl.strvalue.value i64 
    callfn         &msysp.strint u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
    jump           #7792      
#7781: 
    setargs                   1 0
    push           &pc_libmcl.strvalue.str 
    callproc       &msysp.m$print_startstr 
    setargs                   2 0
    push           "20.20"    u64 
    push           pc_libmcl.strvalue.a u64 
    pushptr                   r64 
    callproc       &msysp.m$print_r64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #7792      
#7782: 
    setargs                   2 0
    push           "M"        u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_libmcl.strvalue.a u64 
    pushptr                   r64 
    callfn         &msysp.strreal u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
    jump           #7792      
#7783: 
    setargs                   2 0
    push           "\""       u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
    setargs                   2 0
    push           pc_libmcl.strvalue.a u64 
    pushptr                   u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
    setargs                   2 0
    push           "\""       u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
    jump           #7792      
#7784: 
    setargs                   2 0
    push           pc_libmcl.strvalue.a u64 
    pushptr                   u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
    jump           #7792      
#7785: 
    setargs                   2 0
    push           "XXX"      u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
    jump           #7792      
#7786: 
    setargs                   2 0
    push           "L"        u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_libmcl.strvalue.a u64 
    pushptr                   i64 
    callfn         &msysp.strint u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
    jump           #7788      
    jump           #7792      
#7787: 
#7792: 
    push           &pc_libmcl.strvalue.str 
    setret                    u64 
    jump           #7793      
#7793: 
    retfn                     u64 
End


Proc pc_libmcl.writegsfile:
    param          pc_libmcl.writegsfile.filename u64 
    param          pc_libmcl.writegsfile.d u64 
    local          pc_libmcl.writegsfile.f u64 
    procentry                 
    setargs                   2 0
    push           "w"        u64 
    push           pc_libmcl.writegsfile.filename u64 
    callfn         &fopen     u64 
    pop            pc_libmcl.writegsfile.f u64 
    setargs                   2 0
    push           pc_libmcl.writegsfile.f u64 
    push           pc_libmcl.writegsfile.d u64 
    callproc       &mlibp.gs_println 
    setargs                   1 0
    push           pc_libmcl.writegsfile.f u64 
    callproc       &fclose    
#7795: 
    retproc                   
End


Proc pc_libmcl.ismemaddr: i64
    param          pc_libmcl.ismemaddr.n i64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           pc_libmcl.ismemaddr.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           11         i64 
    jumpne         #7797      i64 
    push           1          i64 
    setret                    i64 
    jump           #7798      
#7797: 
    push           0          i64 
    setret                    i64 
    jump           #7798      
#7798: 
    retfn                     i64 
End


Proc pc_libmcl.isimm64: i64
    param          pc_libmcl.isimm64.n i64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           pc_libmcl.isimm64.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #7800      i64 
    push           1          i64 
    setret                    i64 
    jump           #7801      
#7800: 
    push           0          i64 
    setret                    i64 
    jump           #7801      
#7801: 
    retfn                     i64 
End


Proc pc_libmcl.isregvaropnd: i64
    param          pc_libmcl.isregvaropnd.n i64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           pc_libmcl.isregvaropnd.n i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           7          i64 
    jumpne         #7803      i64 
    push           1          i64 
    setret                    i64 
    jump           #7804      
#7803: 
    push           0          i64 
    setret                    i64 
    jump           #7804      
#7804: 
    retfn                     i64 
End


Proc pc_libmcl.copyblock:
    param          pc_libmcl.copyblock.ax u64 
    param          pc_libmcl.copyblock.bx u64 
    param          pc_libmcl.copyblock.n i64 
    local          pc_libmcl.copyblock.rx u64 
    local          pc_libmcl.copyblock.rcount u64 
    local          pc_libmcl.copyblock.nwords i64 
    local          pc_libmcl.copyblock.lab i64 
    local          pc_libmcl.copyblock.oddbytes i64 
    local          pc_libmcl.copyblock.offset i64 
    local          pc_libmcl.copyblock.workreg i64 
    local          pc_libmcl.copyblock.countreg i64 
    local          pc_libmcl.copyblock.av_1 i64 
    procentry                 
    push           pc_libmcl.copyblock.n i64 
    push           8          i64 
    irem                      i64 
    pop            pc_libmcl.copyblock.oddbytes i64 
    push           &pc_libmcl.copyblock.n 
    push           pc_libmcl.copyblock.oddbytes i64 
    subto                     i64 
    push           pc_libmcl.copyblock.n i64 
    push           8          i64 
    idiv                      i64 
    pop            pc_libmcl.copyblock.nwords i64 
    setargs                   2 0
    push           8          i64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    store          pc_libmcl.copyblock.workreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_libmcl.copyblock.rx u64 
    push           0          i64 
    pop            pc_libmcl.copyblock.offset i64 
    push           1          i64 
    push           pc_libmcl.copyblock.nwords i64 
    jumpgt         #7806      i64 
    push           pc_libmcl.copyblock.nwords i64 
    push           4          i64 
    jumpgt         #7806      i64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.copyblock.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    pop            pc_libmcl.copyblock.ax u64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.copyblock.bx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    pop            pc_libmcl.copyblock.bx u64 
#7807: 
    push           pc_libmcl.copyblock.nwords i64 
    pop            pc_libmcl.copyblock.av_1 i64 
    push           pc_libmcl.copyblock.av_1 i64 
    push           0          i64 
    jumple         #7808      i64 
#7809: 
    setargs                   3 0
    setargs                   3 0
    push           0          i64 
    push           pc_libmcl.copyblock.offset i64 
    push           pc_libmcl.copyblock.bx u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           pc_libmcl.copyblock.rx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_libmcl.copyblock.rx u64 
    setargs                   3 0
    push           0          i64 
    push           pc_libmcl.copyblock.offset i64 
    push           pc_libmcl.copyblock.ax u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_libmcl.copyblock.offset 
    push           8          i64 
    addto                     i64 
#7810: 
    to             #7809      
    opnd           pc_libmcl.copyblock.av_1 
#7808: 
    jump           #7811      
#7806: 
    push           pc_libmcl.copyblock.nwords i64 
    push           0          i64 
    jumpeq         #7812      i64 
    setargs                   2 0
    push           8          i64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    store          pc_libmcl.copyblock.countreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_libmcl.copyblock.rcount u64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pc_libmcl.copyblock.lab i64 
    setargs                   1 0
    push           pc_libmcl.copyblock.ax u64 
    callfn         &pc_libmcl.makesimpleaddr u64 
    pop            pc_libmcl.copyblock.ax u64 
    setargs                   1 0
    push           pc_libmcl.copyblock.bx u64 
    callfn         &pc_libmcl.makesimpleaddr u64 
    pop            pc_libmcl.copyblock.bx u64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.copyblock.nwords i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_libmcl.copyblock.rcount u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.copyblock.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_libmcl.copyblock.bx u64 
    push           pc_libmcl.copyblock.rx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_libmcl.copyblock.rx u64 
    push           pc_libmcl.copyblock.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           8          i64 
    callfn         &pc_libmcl.mgenint u64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.copyblock.ax u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           8          i64 
    callfn         &pc_libmcl.mgenint u64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.copyblock.bx u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           pc_libmcl.copyblock.rcount u64 
    push           54         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.copyblock.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           5          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    push           0          i64 
    pop            pc_libmcl.copyblock.offset i64 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_libmcl.copyblock.countreg i64 
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_libmcl.copyblock.countreg i64 
    popptroff                 u8 1 -1
#7812: 
#7811: 
    push           pc_libmcl.copyblock.oddbytes i64 
    jumpfalse      #7813      i64 
    push           pc_libmcl.copyblock.oddbytes i64 
    pop            pc_libmcl.copyblock.n i64 
    push           pc_libmcl.copyblock.n i64 
    push           4          i64 
    jumplt         #7814      i64 
    setargs                   2 0
    push           4          i64 
    push           pc_libmcl.copyblock.rx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    pop            pc_libmcl.copyblock.rx u64 
    setargs                   3 0
    setargs                   3 0
    push           4          i64 
    push           pc_libmcl.copyblock.offset i64 
    push           pc_libmcl.copyblock.bx u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           pc_libmcl.copyblock.rx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_libmcl.copyblock.rx u64 
    setargs                   3 0
    push           4          i64 
    push           pc_libmcl.copyblock.offset i64 
    push           pc_libmcl.copyblock.ax u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_libmcl.copyblock.n 
    push           4          i64 
    subto                     i64 
    push           &pc_libmcl.copyblock.offset 
    push           4          i64 
    addto                     i64 
#7814: 
    push           pc_libmcl.copyblock.n i64 
    push           2          i64 
    jumplt         #7815      i64 
    setargs                   2 0
    push           2          i64 
    push           pc_libmcl.copyblock.rx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    pop            pc_libmcl.copyblock.rx u64 
    setargs                   3 0
    setargs                   3 0
    push           2          i64 
    push           pc_libmcl.copyblock.offset i64 
    push           pc_libmcl.copyblock.bx u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           pc_libmcl.copyblock.rx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_libmcl.copyblock.rx u64 
    setargs                   3 0
    push           2          i64 
    push           pc_libmcl.copyblock.offset i64 
    push           pc_libmcl.copyblock.ax u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_libmcl.copyblock.n 
    push           2          i64 
    subto                     i64 
    push           &pc_libmcl.copyblock.offset 
    push           2          i64 
    addto                     i64 
#7815: 
    push           pc_libmcl.copyblock.n i64 
    push           1          i64 
    jumpne         #7816      i64 
    setargs                   2 0
    push           1          i64 
    push           pc_libmcl.copyblock.rx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    pop            pc_libmcl.copyblock.rx u64 
    setargs                   3 0
    setargs                   3 0
    push           1          i64 
    push           pc_libmcl.copyblock.offset i64 
    push           pc_libmcl.copyblock.bx u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           pc_libmcl.copyblock.rx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_libmcl.copyblock.rx u64 
    setargs                   3 0
    push           1          i64 
    push           pc_libmcl.copyblock.offset i64 
    push           pc_libmcl.copyblock.ax u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
#7816: 
#7813: 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_libmcl.copyblock.workreg i64 
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_libmcl.copyblock.workreg i64 
    popptroff                 u8 1 -1
#7817: 
    retproc                   
End


Proc pc_libmcl.makesimpleaddr: u64
    param          pc_libmcl.makesimpleaddr.ax u64 
    local          pc_libmcl.makesimpleaddr.bx u64 
    local          pc_libmcl.makesimpleaddr.newreg i64 
    procentry                 
    push           pc_libmcl.makesimpleaddr.ax u64 
    push           10         
    pushptroff                u8 1 0
    jumpfalse      #7819      i64 
    push           pc_libmcl.makesimpleaddr.ax u64 
    push           11         
    pushptroff                u8 1 0
    jumptrue       #7819      i64 
    push           pc_libmcl.makesimpleaddr.ax u64 
    setret                    u64 
    jump           #7820      
#7819: 
    startmult                 
    push           pc_libmcl.makesimpleaddr.ax u64 
    push           10         
    pushptroff                u8 1 0
    jumpfalse      #7821      i64 
    push           pc_libmcl.makesimpleaddr.ax u64 
    push           10         
    pushptroff                u8 1 0
    resetmult                 
    jump           #7822      
#7821: 
    startmult                 
    push           pc_libmcl.makesimpleaddr.ax u64 
    push           11         
    pushptroff                u8 1 0
    jumpfalse      #7823      i64 
    push           pc_libmcl.makesimpleaddr.ax u64 
    push           11         
    pushptroff                u8 1 0
    resetmult                 
    jump           #7824      
#7823: 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    endmult                   
#7824: 
    endmult                   
#7822: 
    pop            pc_libmcl.makesimpleaddr.newreg i64 
    setargs                   3 0
    push           0          i64 
    push           8          i64 
    push           pc_libmcl.makesimpleaddr.newreg i64 
    callfn         &pc_libmcl.mgenireg u64 
    pop            pc_libmcl.makesimpleaddr.bx u64 
    setargs                   3 0
    push           pc_libmcl.makesimpleaddr.ax u64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.makesimpleaddr.newreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           15         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_libmcl.makesimpleaddr.bx u64 
    setret                    u64 
    jump           #7820      
#7820: 
    retfn                     u64 
End


Proc pc_libmcl.ispoweroftwo: i64
    param          pc_libmcl.ispoweroftwo.x i64 
    local          pc_libmcl.ispoweroftwo.a i64 
    local          pc_libmcl.ispoweroftwo.n i64 
    local          pc_libmcl.ispoweroftwo.av_1 i64 
    procentry                 
    push           1          i64 
    pop            pc_libmcl.ispoweroftwo.a i64 
    push           0          i64 
    pop            pc_libmcl.ispoweroftwo.n i64 
#7826: 
    push           60         i64 
    pop            pc_libmcl.ispoweroftwo.av_1 i64 
#7827: 
    push           &pc_libmcl.ispoweroftwo.n 
    incr                      i64 1
    push           pc_libmcl.ispoweroftwo.a i64 
    push           1          i64 
    shl                       i64 
    pop            pc_libmcl.ispoweroftwo.a i64 
    push           pc_libmcl.ispoweroftwo.a i64 
    push           pc_libmcl.ispoweroftwo.x i64 
    jumpne         #7828      i64 
    push           pc_libmcl.ispoweroftwo.n i64 
    setret                    i64 
    jump           #7829      
#7828: 
#7830: 
    to             #7827      
    opnd           pc_libmcl.ispoweroftwo.av_1 
#7831: 
    push           0          i64 
    setret                    i64 
    jump           #7829      
#7829: 
    retfn                     i64 
End


Proc pc_libmcl.getrtsproclabel: i64
    param          pc_libmcl.getrtsproclabel.fnindex i64 
    procentry                 
    push           &pci_mcl.rtsproclabels 
    push           pc_libmcl.getrtsproclabel.fnindex i64 
    pushptroff                i64 8 -8
    push           0          i64 
    jumpne         #7833      i64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    push           &pci_mcl.rtsproclabels 
    push           pc_libmcl.getrtsproclabel.fnindex i64 
    popptroff                 i64 8 -8
    push           pci_mcl.mlabelno i64 
    setret                    i64 
    jump           #7834      
#7833: 
    push           &pci_mcl.rtsproclabels 
    push           pc_libmcl.getrtsproclabel.fnindex i64 
    pushptroff                i64 8 -8
    setret                    i64 
    jump           #7834      
#7834: 
    retfn                     i64 
End


Proc pc_libmcl.genrtsproctable:
    local          pc_libmcl.genrtsproctable.str block:256 
    local          pc_libmcl.genrtsproctable.proclab i64 
    local          pc_libmcl.genrtsproctable.d u64 
    local          pc_libmcl.genrtsproctable.av_1 i64 
    local          pc_libmcl.genrtsproctable.i i64 
    procentry                 
    setargs                   2 0
    push           16         i64 
    push           67         i64 
    callproc       &pc_libmcl.setsegment 
#7836: 
    push           1          i64 
    pop            pc_libmcl.genrtsproctable.i i64 
    push           6          i64 
    pop            pc_libmcl.genrtsproctable.av_1 i64 
    push           pc_libmcl.genrtsproctable.av_1 i64 
    push           1          i64 
    jumplt         #7837      i64 
#7838: 
    push           &pci_mcl.rtsproclabels 
    push           pc_libmcl.genrtsproctable.i i64 
    pushptroff                i64 8 -8
    jumpfalse      #7839      i64 
    setargs                   1 0
    push           &pc_libmcl.genrtsproctable.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "Generating code for" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pc_tables.rtsnames 
    push           pc_libmcl.genrtsproctable.i i64 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           &pc_libmcl.genrtsproctable.str 
    callproc       &pc_libmcl.mgencomment 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           &pci_mcl.rtsproclabels 
    push           pc_libmcl.genrtsproctable.i i64 
    pushptroff                i64 8 -8
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_decls.rtsproctable 
    push           pc_libmcl.genrtsproctable.i i64 
    pushptroff                u64 8 -8
    jumptrue       #7840      u64 
    push           pc_libmcl.genrtsproctable.i i64 
    push           4          i64 
    casejumpeq     #7841      i64 0
    push           5          i64 
    casejumpeq     #7842      i64 0
    popstack                  i64 
    jump           #7843      
#7841: 
    setargs                   0 0
    callproc       &pc_libmcl.genrts_mul_i128 
    jump           #7844      
#7842: 
    setargs                   0 0
    callproc       &pc_libmcl.genrts_div_i128 
    jump           #7844      
#7843: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pc_tables.rtsnames 
    push           pc_libmcl.genrtsproctable.i i64 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           ""         u64 
    push           "RTS fn not defined" u64 
    callproc       &pc_libmcl.merror 
#7844: 
    setargs                   1 0
    push           ""         u64 
    callproc       &pc_libmcl.mgencomment 
    jump           #7845      
#7840: 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           &pc_decls.rtsproctable 
    push           pc_libmcl.genrtsproctable.i i64 
    pushptroff                u64 8 -8
    callfn         &pc_libmcl.mgenmemaddr u64 
    push           26         i64 
    callproc       &pc_libmcl.genmc 
#7845: 
#7839: 
#7846: 
    forup          #7838      i64 1
    opnd           pc_libmcl.genrtsproctable.i 
    opnd           pc_libmcl.genrtsproctable.av_1 
#7837: 
#7847: 
    retproc                   
End


Proc pc_libmcl.genrts_mul_i128:
    procentry                 
    setargs                   1 0
    push           "<code for mul-i128>" u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   0 0
    callproc       &pc_libmcl.genrtsentry 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           7          i64 
    pushptroff                u64 8 -16
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           8          i64 
    pushptroff                u64 8 -16
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           10         i64 
    pushptroff                u64 8 -16
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           12         i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           10         i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           11         i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           1          i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           14         i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           1          i64 
    pushptroff                u64 8 -16
    push           35         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           1          i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           7          i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           10         i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           1          i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           13         i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           1          i64 
    pushptroff                u64 8 -16
    push           35         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           1          i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           8          i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           11         i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           1          i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           13         i64 
    pushptroff                u64 8 -16
    push           33         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           7          i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           12         i64 
    pushptroff                u64 8 -16
    push           29         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           8          i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           12         i64 
    pushptroff                u64 8 -16
    push           29         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           12         i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           2          i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           10         i64 
    pushptroff                u64 8 -16
    push           14         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           8          i64 
    pushptroff                u64 8 -16
    push           14         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           7          i64 
    pushptroff                u64 8 -16
    push           14         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_libmcl.genrtsexit 
#7849: 
    retproc                   
End


Proc pc_libmcl.genrts_div_i128:
    procentry                 
    setargs                   1 0
    push           "<code for div-i128>" u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   0 0
    callproc       &pc_libmcl.genrtsentry 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           4          i64 
    pushptroff                u64 8 -16
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           12         i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           4          i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           4          i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           1          i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           12         i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           12         i64 
    pushptroff                u64 8 -16
    push           41         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           13         i64 
    pushptroff                u64 8 -16
    push           38         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           1          i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           2          i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           13         i64 
    pushptroff                u64 8 -16
    push           34         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           1          i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           4          i64 
    pushptroff                u64 8 -16
    push           30         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           11         i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           1          i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           4          i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           12         i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           13         i64 
    pushptroff                u64 8 -16
    push           38         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           4          i64 
    pushptroff                u64 8 -16
    push           14         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_libmcl.genrtsexit 
#7851: 
    retproc                   
End


Proc pc_libmcl.genrtsentry:
    procentry                 
    setargs                   3 0
    push           0          u64 
    push           pci_mcl.dframeopnd u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pci_mcl.dstackopnd u64 
    push           pci_mcl.dframeopnd u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           32         i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pci_mcl.dstackopnd u64 
    push           30         i64 
    callproc       &pc_libmcl.genmc 
#7853: 
    retproc                   
End


Proc pc_libmcl.genrtsexit:
    procentry                 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           32         i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pci_mcl.dstackopnd u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           pci_mcl.dframeopnd u64 
    push           14         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           0          u64 
    push           23         i64 
    callproc       &pc_libmcl.genmc 
#7855: 
    retproc                   
End


Proc pc_libmcl.clearblock:
    param          pc_libmcl.clearblock.ax u64 
    param          pc_libmcl.clearblock.n i64 
    local          pc_libmcl.clearblock.rx u64 
    local          pc_libmcl.clearblock.rcount u64 
    local          pc_libmcl.clearblock.nwords i64 
    local          pc_libmcl.clearblock.lab i64 
    local          pc_libmcl.clearblock.oddbytes i64 
    local          pc_libmcl.clearblock.offset i64 
    local          pc_libmcl.clearblock.workreg i64 
    local          pc_libmcl.clearblock.countreg i64 
    local          pc_libmcl.clearblock.av_1 i64 
    local          pc_libmcl.clearblock.i i64 
    procentry                 
    push           pc_libmcl.clearblock.n i64 
    push           8          i64 
    irem                      i64 
    pop            pc_libmcl.clearblock.oddbytes i64 
    push           &pc_libmcl.clearblock.n 
    push           pc_libmcl.clearblock.oddbytes i64 
    subto                     i64 
    push           pc_libmcl.clearblock.n i64 
    push           8          i64 
    idiv                      i64 
    pop            pc_libmcl.clearblock.nwords i64 
    setargs                   2 0
    push           8          i64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    store          pc_libmcl.clearblock.workreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_libmcl.clearblock.rx u64 
    setargs                   3 0
    push           pc_libmcl.clearblock.rx u64 
    push           pc_libmcl.clearblock.rx u64 
    push           41         i64 
    callproc       &pc_libmcl.genmc 
    push           0          i64 
    pop            pc_libmcl.clearblock.offset i64 
    push           1          i64 
    push           pc_libmcl.clearblock.nwords i64 
    jumpgt         #7857      i64 
    push           pc_libmcl.clearblock.nwords i64 
    push           8          i64 
    jumpgt         #7857      i64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.clearblock.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    pop            pc_libmcl.clearblock.ax u64 
#7858: 
    push           pc_libmcl.clearblock.nwords i64 
    pop            pc_libmcl.clearblock.av_1 i64 
    push           pc_libmcl.clearblock.av_1 i64 
    push           0          i64 
    jumple         #7859      i64 
#7860: 
    setargs                   3 0
    push           pc_libmcl.clearblock.rx u64 
    setargs                   3 0
    push           0          i64 
    push           pc_libmcl.clearblock.offset i64 
    push           pc_libmcl.clearblock.ax u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_libmcl.clearblock.offset 
    push           8          i64 
    addto                     i64 
#7861: 
    to             #7860      
    opnd           pc_libmcl.clearblock.av_1 
#7859: 
    jump           #7862      
#7857: 
    push           pc_libmcl.clearblock.nwords i64 
    push           0          i64 
    jumpeq         #7863      i64 
    push           pc_libmcl.clearblock.nwords i64 
    push           3          i64 
    iand                      i64 
    jumpfalse      #7864      i64 
    setargs                   2 0
    push           8          i64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    store          pc_libmcl.clearblock.countreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_libmcl.clearblock.rcount u64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pc_libmcl.clearblock.lab i64 
    setargs                   1 0
    push           pc_libmcl.clearblock.ax u64 
    callfn         &pc_libmcl.makesimpleaddr u64 
    pop            pc_libmcl.clearblock.ax u64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.clearblock.nwords i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_libmcl.clearblock.rcount u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.clearblock.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_libmcl.clearblock.rx u64 
    push           pc_libmcl.clearblock.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           8          i64 
    callfn         &pc_libmcl.mgenint u64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.clearblock.ax u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           pc_libmcl.clearblock.rcount u64 
    push           54         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.clearblock.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           5          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    push           0          i64 
    pop            pc_libmcl.clearblock.offset i64 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_libmcl.clearblock.countreg i64 
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_libmcl.clearblock.countreg i64 
    popptroff                 u8 1 -1
    jump           #7865      
#7864: 
    setargs                   2 0
    push           8          i64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    store          pc_libmcl.clearblock.countreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_libmcl.clearblock.rcount u64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pc_libmcl.clearblock.lab i64 
    setargs                   1 0
    push           pc_libmcl.clearblock.ax u64 
    callfn         &pc_libmcl.makesimpleaddr u64 
    pop            pc_libmcl.clearblock.ax u64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.clearblock.nwords i64 
    push           4          i64 
    idiv                      i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_libmcl.clearblock.rcount u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.clearblock.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
#7866: 
    push           1          i64 
    pop            pc_libmcl.clearblock.i i64 
#7867: 
    setargs                   3 0
    push           pc_libmcl.clearblock.rx u64 
    setargs                   3 0
    push           0          i64 
    push           pc_libmcl.clearblock.offset i64 
    push           pc_libmcl.clearblock.ax u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_libmcl.clearblock.offset 
    push           8          i64 
    addto                     i64 
#7868: 
    forup          #7867      i64 1
    opnd           pc_libmcl.clearblock.i 
    opnd           4          
#7869: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           32         i64 
    callfn         &pc_libmcl.mgenint u64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.clearblock.ax u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           pc_libmcl.clearblock.rcount u64 
    push           54         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.clearblock.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           5          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    push           0          i64 
    pop            pc_libmcl.clearblock.offset i64 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_libmcl.clearblock.countreg i64 
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_libmcl.clearblock.countreg i64 
    popptroff                 u8 1 -1
#7865: 
#7863: 
#7862: 
    push           pc_libmcl.clearblock.oddbytes i64 
    jumpfalse      #7870      i64 
    push           pc_libmcl.clearblock.oddbytes i64 
    pop            pc_libmcl.clearblock.n i64 
    push           pc_libmcl.clearblock.n i64 
    push           4          i64 
    jumplt         #7871      i64 
    setargs                   2 0
    push           4          i64 
    push           pc_libmcl.clearblock.rx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    pop            pc_libmcl.clearblock.rx u64 
    setargs                   3 0
    push           pc_libmcl.clearblock.rx u64 
    setargs                   3 0
    push           4          i64 
    push           pc_libmcl.clearblock.offset i64 
    push           pc_libmcl.clearblock.ax u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_libmcl.clearblock.n 
    push           4          i64 
    subto                     i64 
    push           &pc_libmcl.clearblock.offset 
    push           4          i64 
    addto                     i64 
#7871: 
    push           pc_libmcl.clearblock.n i64 
    push           2          i64 
    jumplt         #7872      i64 
    setargs                   2 0
    push           2          i64 
    push           pc_libmcl.clearblock.rx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    pop            pc_libmcl.clearblock.rx u64 
    setargs                   3 0
    push           pc_libmcl.clearblock.rx u64 
    setargs                   3 0
    push           2          i64 
    push           pc_libmcl.clearblock.offset i64 
    push           pc_libmcl.clearblock.ax u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_libmcl.clearblock.n 
    push           2          i64 
    subto                     i64 
    push           &pc_libmcl.clearblock.offset 
    push           2          i64 
    addto                     i64 
#7872: 
    push           pc_libmcl.clearblock.n i64 
    push           1          i64 
    jumpne         #7873      i64 
    setargs                   2 0
    push           1          i64 
    push           pc_libmcl.clearblock.rx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    pop            pc_libmcl.clearblock.rx u64 
    setargs                   3 0
    push           pc_libmcl.clearblock.rx u64 
    setargs                   3 0
    push           1          i64 
    push           pc_libmcl.clearblock.offset i64 
    push           pc_libmcl.clearblock.ax u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
#7873: 
#7870: 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_libmcl.clearblock.workreg i64 
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_libmcl.clearblock.workreg i64 
    popptroff                 u8 1 -1
#7874: 
    retproc                   
End


Proc pc_libmcl.genfunctiontable:
    local          pc_libmcl.genfunctiontable.str block:256 
    local          pc_libmcl.genfunctiontable.s u64 
    local          pc_libmcl.genfunctiontable.t u64 
    local          pc_libmcl.genfunctiontable.currpcl u64 
    local          pc_libmcl.genfunctiontable.firststringlab i64 
    local          pc_libmcl.genfunctiontable.nextlab i64 
    local          pc_libmcl.genfunctiontable.nprocs i64 
    procentry                 
    push           pci_mcl.lab_funcaddrtable i64 
    push           0          i64 
    jumpne         #7876      i64 
    jump           #7877      
#7876: 
    setargs                   1 0
    push           "Function Table" u64 
    callproc       &pc_libmcl.mgencomment 
    push           0          i64 
    pop            pc_libmcl.genfunctiontable.nprocs i64 
    setargs                   2 0
    push           16         i64 
    push           67         i64 
    callproc       &pc_libmcl.setsegment 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.lab_funcaddrtable i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    push           pc_libpcl.pcstart u64 
    pop            pc_libmcl.genfunctiontable.currpcl u64 
#7878: 
    push           pc_libmcl.genfunctiontable.currpcl u64 
    push           1          
    pushptroff                u8 1 0
    push           8          i64 
    setjumpeq      #7879      i64 
    push           16         i64 
    setjumpne      #7880      i64 
#7879: 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.genfunctiontable.currpcl u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmemaddr u64 
    push           117        i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_libmcl.genfunctiontable.nprocs 
    incr                      i64 1
#7880: 
    push           &pc_libmcl.genfunctiontable.currpcl 
    incr                      u64 32
#7881: 
    push           pc_libmcl.genfunctiontable.currpcl u64 
    push           1          
    pushptroff                u8 1 0
    push           11         i64 
    jumpne         #7878      i64 
#7882: 
    push           0          i64 
    pop            pc_libmcl.genfunctiontable.firststringlab i64 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.lab_funcnametable i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    push           pc_libpcl.pcstart u64 
    pop            pc_libmcl.genfunctiontable.currpcl u64 
#7883: 
    push           pc_libmcl.genfunctiontable.currpcl u64 
    push           1          
    pushptroff                u8 1 0
    push           8          i64 
    setjumpeq      #7884      i64 
    push           16         i64 
    setjumpne      #7885      i64 
#7884: 
    push           pc_libmcl.genfunctiontable.firststringlab i64 
    push           0          i64 
    jumpne         #7886      i64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    store          pc_libmcl.genfunctiontable.nextlab i64 
    pop            pc_libmcl.genfunctiontable.firststringlab i64 
    jump           #7887      
#7886: 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pc_libmcl.genfunctiontable.nextlab i64 
#7887: 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.genfunctiontable.nextlab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           117        i64 
    callproc       &pc_libmcl.genmc 
#7885: 
    push           &pc_libmcl.genfunctiontable.currpcl 
    incr                      u64 32
#7888: 
    push           pc_libmcl.genfunctiontable.currpcl u64 
    push           1          
    pushptroff                u8 1 0
    push           11         i64 
    jumpne         #7883      i64 
#7889: 
    push           pc_libmcl.genfunctiontable.firststringlab i64 
    pop            pc_libmcl.genfunctiontable.nextlab i64 
    push           pc_libpcl.pcstart u64 
    pop            pc_libmcl.genfunctiontable.currpcl u64 
#7890: 
    push           pc_libmcl.genfunctiontable.currpcl u64 
    push           1          
    pushptroff                u8 1 0
    push           8          i64 
    setjumpeq      #7891      i64 
    push           16         i64 
    setjumpne      #7892      i64 
#7891: 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.genfunctiontable.nextlab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    push           pc_libmcl.genfunctiontable.currpcl u64 
    push           8          
    pushptroff                u64 1 0
    pushptr                   u64 
    pop            pc_libmcl.genfunctiontable.s u64 
    push           pc_libmcl.genfunctiontable.s u64 
    pop            pc_libmcl.genfunctiontable.t u64 
    jump           #7893      
#7894: 
    push           pc_libmcl.genfunctiontable.s u64 
    pushptr                   u8 
    push           46         u64 
    jumpne         #7895      u64 
    push           pc_libmcl.genfunctiontable.s u64 
    push           1          i64 
    addrefoff                 u64 1 0
    pop            pc_libmcl.genfunctiontable.t u64 
#7895: 
    push           &pc_libmcl.genfunctiontable.s 
    incr                      u64 1
#7893: 
    push           pc_libmcl.genfunctiontable.s u64 
    pushptr                   u8 
    jumptrue       #7894      u64 
#7896: 
    setargs                   2 0
    push           1          i64 
    push           pc_libmcl.genfunctiontable.t u64 
    callproc       &pc_libmcl.genstring 
    push           &pc_libmcl.genfunctiontable.nextlab 
    incr                      i64 1
#7892: 
    push           &pc_libmcl.genfunctiontable.currpcl 
    incr                      u64 32
#7897: 
    push           pc_libmcl.genfunctiontable.currpcl u64 
    push           1          
    pushptroff                u8 1 0
    push           11         i64 
    jumpne         #7890      i64 
#7898: 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.lab_funcnprocs i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.genfunctiontable.nprocs i64 
    callfn         &pc_libmcl.mgenint u64 
    push           117        i64 
    callproc       &pc_libmcl.genmc 
#7877: 
    retproc                   
End


Proc pc_libmcl.mgenextname: u64
    param          pc_libmcl.mgenextname.s u64 
    local          pc_libmcl.mgenextname.str block:64 
    local          pc_libmcl.mgenextname.d u64 
    procentry                 
    setargs                   2 0
    push           pc_libmcl.mgenextname.s u64 
    push           &pc_libmcl.mgenextname.str 
    callproc       &strcpy    
    push           0          u64 
    push           &pc_libmcl.mgenextname.str 
    setargs                   1 0
    push           pc_libmcl.mgenextname.s u64 
    callfn         &strlen    i64 
    popptroff                 u8 1 -1
    setargs                   1 0
    push           64         i64 
    callfn         &mlibp.pcm_allocz u64 
    pop            pc_libmcl.mgenextname.d u64 
    setargs                   1 0
    push           &pc_libmcl.mgenextname.str 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           pc_libmcl.mgenextname.d u64 
    push           0          
    popptroff                 u64 1 0
    push           1          u64 
    push           pc_libmcl.mgenextname.d u64 
    push           46         
    addrefoff                 u64 1 0
    push           1          i64 
    popdotindex               u16 
    setargs                   1 0
    push           pc_libmcl.mgenextname.d u64 
    callfn         &pc_libmcl.mgenmemaddr u64 
    setret                    u64 
    jump           #7900      
#7900: 
    retfn                     u64 
End


Proc pc_libmcl.pcl_setasmhandler::
    param          pc_libmcl.pcl_setasmhandler.fnaddr u64 
    procentry                 
    push           pc_libmcl.pcl_setasmhandler.fnaddr u64 
    pop            pci_mcl.hostasmhandler u64 
#7902: 
    retproc                   
End


Proc pc_libmcl.mgeninfo:
    param          pc_libmcl.mgeninfo.s u64 
    param          pc_libmcl.mgeninfo.value i64 
    local          pc_libmcl.mgeninfo.str block:256 
    procentry                 
    setargs                   1 0
    push           &pc_libmcl.mgeninfo.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "# #"      u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           pc_libmcl.mgeninfo.s u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libmcl.mgeninfo.value i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           &pc_libmcl.mgeninfo.str 
    push           3          i64 
    callproc       &pc_libmcl.genmc_str 
#7904: 
    retproc                   
End


Proc pc_libmcl.mgeninfos:
    param          pc_libmcl.mgeninfos.s u64 
    param          pc_libmcl.mgeninfos.svalue u64 
    local          pc_libmcl.mgeninfos.str block:256 
    procentry                 
    setargs                   1 0
    push           &pc_libmcl.mgeninfos.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "# #"      u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           pc_libmcl.mgeninfos.s u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libmcl.mgeninfos.svalue u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           &pc_libmcl.mgeninfos.str 
    push           3          i64 
    callproc       &pc_libmcl.genmc_str 
#7906: 
    retproc                   
End


Proc pc_stackmcl.resetopnds1:
    local          pc_stackmcl.resetopnds1.av_1 i64 
    local          pc_stackmcl.resetopnds1.i i64 
    procentry                 
    push           pci_mcl.mstackdepth i64 
    jumpfalse      #7908      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "1:HW stack not empty" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.procdef u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "MSTACKDEPTH=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.mstackdepth i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           0          i64 
    pop            pci_mcl.mstackdepth i64 
#7908: 
    push           pci_mcl.noperands i64 
    jumpfalse      #7909      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "1:Reset:pcl stack not empty:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.procdef u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "NOPERANDS=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.noperands i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           0          i64 
    pop            pci_mcl.noperands i64 
#7909: 
#7910: 
    push           1          i64 
    pop            pc_stackmcl.resetopnds1.i i64 
    push           16         i64 
    pop            pc_stackmcl.resetopnds1.av_1 i64 
    push           pc_stackmcl.resetopnds1.av_1 i64 
    push           1          i64 
    jumplt         #7911      i64 
#7912: 
    push           &pci_mcl.regset 
    push           pc_stackmcl.resetopnds1.i i64 
    pushptroff                u8 1 -1
    jumptrue       #7913      i64 
    push           &pci_mcl.xregset 
    push           pc_stackmcl.resetopnds1.i i64 
    pushptroff                u8 1 -1
    jumpfalse      #7914      i64 
#7913: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Reset: reg flag set" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.procdef u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #7911      
#7914: 
#7915: 
    forup          #7912      i64 1
    opnd           pc_stackmcl.resetopnds1.i 
    opnd           pc_stackmcl.resetopnds1.av_1 
#7911: 
    push           pci_mcl.inf_proccalls i64 
    push           0          i64 
    jumpne         #7916      i64 
    push           1          i64 
    pop            pci_mcl.inf_leafproc i64 
#7916: 
    push           &pci_mcl.regset 
    clear                     block:16 
    push           &pci_mcl.xregset 
    clear                     block:16 
    push           &pci_mcl.isregvar 
    clear                     block:16 
    push           &pci_mcl.isxregvar 
    clear                     block:16 
    push           pc_decls.optimflag i64 
    jumptrue       #7917      i64 
    push           0          i64 
    pop            pci_mcl.inf_proccalls i64 
    push           0          i64 
    pop            pci_mcl.inf_maxargs i64 
    push           0          i64 
    pop            pci_mcl.inf_proclocals i64 
    push           0          i64 
    pop            pci_mcl.inf_procxlocals i64 
    push           0          i64 
    pop            pci_mcl.inf_leafproc i64 
    push           0          i64 
    store          pci_mcl.inf_highxreg i64 
    pop            pci_mcl.inf_highreg i64 
    push           0          i64 
    pop            pci_mcl.inf_assem i64 
    jump           #7918      
#7917: 
    push           0          i64 
    pop            pci_mcl.inf_proccalls i64 
    push           0          i64 
    pop            pci_mcl.inf_maxargs i64 
    push           0          i64 
    pop            pci_mcl.inf_proclocals i64 
    push           0          i64 
    pop            pci_mcl.inf_procxlocals i64 
#7918: 
#7919: 
    retproc                   
End


Proc pc_stackmcl.resetopnds2:
    local          pc_stackmcl.resetopnds2.av_1 i64 
    local          pc_stackmcl.resetopnds2.i i64 
    procentry                 
    push           pci_mcl.mstackdepth i64 
    jumpfalse      #7921      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "2:HW stack not empty" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.procdef u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "MSTACKDEPTH=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.mstackdepth i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#7921: 
    push           pci_mcl.noperands i64 
    jumpfalse      #7922      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "2:Reset:pcl stack not empty:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.procdef u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "NOPERANDS=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.noperands i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           0          i64 
    pop            pci_mcl.noperands i64 
#7922: 
#7923: 
    push           1          i64 
    pop            pc_stackmcl.resetopnds2.i i64 
    push           16         i64 
    pop            pc_stackmcl.resetopnds2.av_1 i64 
    push           pc_stackmcl.resetopnds2.av_1 i64 
    push           1          i64 
    jumplt         #7924      i64 
#7925: 
    push           &pci_mcl.regset 
    push           pc_stackmcl.resetopnds2.i i64 
    pushptroff                u8 1 -1
    jumptrue       #7926      i64 
    push           &pci_mcl.xregset 
    push           pc_stackmcl.resetopnds2.i i64 
    pushptroff                u8 1 -1
    jumpfalse      #7927      i64 
#7926: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "2:Reset: reg flag set" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pci_mcl.regnames 
    push           pc_stackmcl.resetopnds2.i i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.procdef u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #7924      
#7927: 
#7928: 
    forup          #7925      i64 1
    opnd           pc_stackmcl.resetopnds2.i 
    opnd           pc_stackmcl.resetopnds2.av_1 
#7924: 
    push           0          i64 
    pop            pci_mcl.inf_proccalls i64 
    push           0          i64 
    pop            pci_mcl.inf_maxargs i64 
    push           0          i64 
    pop            pci_mcl.inf_proclocals i64 
    push           0          i64 
    pop            pci_mcl.inf_procxlocals i64 
    push           0          i64 
    pop            pci_mcl.inf_leafproc i64 
    push           0          i64 
    store          pci_mcl.inf_highxreg i64 
    pop            pci_mcl.inf_highreg i64 
    push           0          i64 
    pop            pci_mcl.inf_assem i64 
    push           0          i64 
    store          pci_mcl.inf_r13used i64 
    store          pci_mcl.inf_r11used i64 
    pop            pci_mcl.inf_r10used i64 
    push           &pci_mcl.regset 
    clear                     block:16 
    push           &pci_mcl.xregset 
    clear                     block:16 
    push           &pci_mcl.isregvar 
    clear                     block:16 
    push           &pci_mcl.isxregvar 
    clear                     block:16 
#7929: 
    retproc                   
End


Proc pc_stackmcl.newopnd:
    param          pc_stackmcl.newopnd.fmt i64 
    procentry                 
    push           pci_mcl.noperands i64 
    push           200        i64 
    jumplt         #7931      i64 
    setargs                   2 0
    push           ""         u64 
    push           "PCL stack overflow" u64 
    callproc       &pc_libmcl.merror 
#7931: 
    push           &pci_mcl.noperands 
    incr                      i64 1
    push           pci_mcl.pclstack u64 
    push           0          i64 
    addrefoff                 block:15 15 -15
    pop            pci_mcl.pclstack u64 
    push           pci_mcl.pclstackzero block:15 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    popptroff                 block:15 15 -15
    push           pc_stackmcl.newopnd.fmt i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
    push           &pci_mcl.loccodes 
    push           pc_stackmcl.newopnd.fmt i64 
    pushptroff                u8 1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           1          
    popptroff                 u8 1 0
    push           0          i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    push           &pci_mcl.floatloc 
    push           pc_stackmcl.newopnd.fmt i64 
    pushptroff                u8 1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           3          
    popptroff                 u8 1 0
#7932: 
    retproc                   
End


Proc pc_stackmcl.duploperand:
    local          pc_stackmcl.duploperand.reg i64 
    procentry                 
    push           &pci_mcl.noperands 
    incr                      i64 1
    push           pci_mcl.pclstack u64 
    push           0          i64 
    addrefoff                 block:15 15 -15
    pop            pci_mcl.pclstack u64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    pushptroff                block:15 15 -15
    push           pci_mcl.pclstack u64 
    push           1          i64 
    popptroff                 block:15 15 -15
    push           &pci_mcl.loccodes 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u8 1 0
    push           4          i64 
    casejumpeq     #7934      i64 0
    push           5          i64 
    casejumpeq     #7935      i64 0
    push           7          i64 
    casejumpeq     #7936      i64 0
    push           1          i64 
    casejumpeq     #7937      i64 0
    push           2          i64 
    casejumpeq     #7938      i64 0
    push           3          i64 
    casejumpeq     #7939      i64 0
    popstack                  i64 
    jump           #7940      
#7934: 
    jump           #7941      
#7935: 
    jump           #7941      
#7936: 
    jump           #7941      
#7937: 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    pop            pc_stackmcl.duploperand.reg i64 
    push           pc_stackmcl.duploperand.reg i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.duploperand.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #7941      
#7938: 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextxreg i64 
    pop            pc_stackmcl.duploperand.reg i64 
    push           pc_stackmcl.duploperand.reg i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.duploperand.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenxreg u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #7941      
#7939: 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    pop            pc_stackmcl.duploperand.reg i64 
    setargs                   3 0
    push           pci_mcl.dstackopnd u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.duploperand.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.duploperand.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    jump           #7941      
#7940: 
#7941: 
#7942: 
    retproc                   
End


Proc pc_stackmcl.addint:
    param          pc_stackmcl.addint.a i64 
    procentry                 
    setargs                   1 0
    push           7          i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addint.a i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    popptroff                 i64 1 0
#7944: 
    retproc                   
End


Proc pc_stackmcl.addint128:
    param          pc_stackmcl.addint128.p u64 
    procentry                 
    setargs                   1 0
    push           7          i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addint128.p u64 
    push           1          i64 
    pushptroff                i64 8 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    popptroff                 i64 1 0
    setargs                   1 0
    push           7          i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addint128.p u64 
    pushptr                   i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    popptroff                 i64 1 0
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.setwideopnd 
#7946: 
    retproc                   
End


Proc pc_stackmcl.addreal:
    param          pc_stackmcl.addreal.x r64 
    procentry                 
    setargs                   1 0
    push           8          i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addreal.x r64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    popptroff                 r64 1 0
#7948: 
    retproc                   
End


Proc pc_stackmcl.addreal32:
    param          pc_stackmcl.addreal32.x r64 
    procentry                 
    setargs                   1 0
    push           9          i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addreal32.x r64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    popptroff                 r64 1 0
#7950: 
    retproc                   
End


Proc pc_stackmcl.addstring:
    param          pc_stackmcl.addstring.s u64 
    procentry                 
    setargs                   1 0
    push           10         i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addstring.s u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    popptroff                 u64 1 0
#7952: 
    retproc                   
End


Proc pc_stackmcl.addmem:
    param          pc_stackmcl.addmem.p u64 
    local          pc_stackmcl.addmem.ax u64 
    local          pc_stackmcl.addmem.d u64 
    procentry                 
    push           pc_stackmcl.addmem.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_stackmcl.addmem.d u64 
    push           &pc_tables.pcat 
    push           pc_stackmcl.addmem.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #7954      i64 0
    push           3          i64 
    casejumpeq     #7955      i64 0
    push           2          i64 
    casejumpeq     #7956      i64 0
    push           5          i64 
    casejumpeq     #7957      i64 0
    push           6          i64 
    casejumpeq     #7958      i64 0
    push           4          i64 
    casejumpeq     #7959      i64 0
    popstack                  i64 
    jump           #7960      
#7954: 
    push           pc_stackmcl.addmem.d u64 
    push           50         
    pushptroff                u8 1 0
    jumpfalse      #7961      i64 
    setargs                   1 0
    push           18         i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addmem.d u64 
    push           50         
    pushptroff                u8 1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    jump           #7962      
#7961: 
    setargs                   1 0
    push           14         i64 
    callproc       &pc_stackmcl.newopnd 
#7962: 
    jump           #7963      
#7955: 
    push           pc_stackmcl.addmem.d u64 
    push           50         
    pushptroff                u8 1 0
    jumpfalse      #7964      i64 
    setargs                   1 0
    push           19         i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addmem.d u64 
    push           50         
    pushptroff                u8 1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    jump           #7965      
#7964: 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_stackmcl.newopnd 
#7965: 
    jump           #7963      
#7956: 
    setargs                   1 0
    push           16         i64 
    callproc       &pc_stackmcl.newopnd 
    jump           #7963      
#7957: 
    setargs                   1 0
    push           17         i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addmem.d u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    popptroff                 u64 1 0
    push           72         i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           4          
    popptroff                 u8 1 0
    setargs                   1 0
    push           14         i64 
    callproc       &pc_stackmcl.newopnd 
    push           76         i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           4          
    popptroff                 u8 1 0
    jump           #7963      
#7958: 
    setargs                   1 0
    push           11         i64 
    callproc       &pc_stackmcl.newopnd 
    jump           #7963      
#7959: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_d64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_stackmcl.addmem.ax u64 
    setargs                   3 0
    setargs                   1 0
    push           pc_stackmcl.addmem.d u64 
    callfn         &pc_libmcl.mgenmem u64 
    push           pc_stackmcl.addmem.ax u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_stackmcl.addmem.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #7966      i64 
    push           19         i64 
    resetmult                 
    jump           #7967      
#7966: 
    push           20         i64 
    endmult                   
#7967: 
    callproc       &pc_libmcl.genmc 
    jump           #7968      
    jump           #7963      
#7960: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_d64 
    setargs                   2 0
    push           ""         u64 
    push           "ADDMEM?"  u64 
    callproc       &pc_libmcl.merror 
#7963: 
    push           pc_stackmcl.addmem.d u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    popptroff                 u64 1 0
#7968: 
    retproc                   
End


Proc pc_stackmcl.addmemaddr:
    param          pc_stackmcl.addmemaddr.d u64 
    procentry                 
    setargs                   1 0
    push           11         i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addmemaddr.d u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    popptroff                 u64 1 0
#7970: 
    retproc                   
End


Proc pc_stackmcl.addlabeladdr:
    param          pc_stackmcl.addlabeladdr.lab i64 
    procentry                 
    setargs                   1 0
    push           13         i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addlabeladdr.lab i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    popptroff                 i64 1 0
#7972: 
    retproc                   
End


Proc pc_stackmcl.addlabel:
    param          pc_stackmcl.addlabel.lab i64 
    param          pc_stackmcl.addlabel.offset i64 
    procentry                 
    setargs                   1 0
    push           12         i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addlabel.lab i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    popptroff                 i64 1 0
    push           pc_stackmcl.addlabel.offset i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           5          
    popptroff                 i16 1 0
#7974: 
    retproc                   
End


Proc pc_stackmcl.addreg0:
    param          pc_stackmcl.addreg0.reg i64 
    procentry                 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addreg0.reg i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    push           &pci_mcl.regset 
    push           pc_stackmcl.addreg0.reg i64 
    pushptroff                u8 1 -1
    jumpfalse      #7976      i64 
    setargs                   2 0
    push           ""         u64 
    push           "addreg0/reg in use" u64 
    callproc       &pc_libmcl.merror 
#7976: 
    push           1          i64 
    push           &pci_mcl.regset 
    push           pc_stackmcl.addreg0.reg i64 
    popptroff                 u8 1 -1
#7977: 
    retproc                   
End


Proc pc_stackmcl.addwidereg0:
    param          pc_stackmcl.addwidereg0.reg i64 
    local          pc_stackmcl.addwidereg0.reg2 i64 
    procentry                 
    push           pc_stackmcl.addwidereg0.reg i64 
    push           1          i64 
    add                       i64 
    pop            pc_stackmcl.addwidereg0.reg2 i64 
    push           pc_stackmcl.addwidereg0.reg2 i64 
    push           4          i64 
    jumpne         #7979      i64 
    push           11         i64 
    pop            pc_stackmcl.addwidereg0.reg2 i64 
#7979: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.newopnd 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addwidereg0.reg2 i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    push           pc_stackmcl.addwidereg0.reg i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    push           &pci_mcl.regset 
    push           pc_stackmcl.addwidereg0.reg i64 
    pushptroff                u8 1 -1
    jumpfalse      #7980      i64 
    setargs                   2 0
    push           ""         u64 
    push           "addwidereg/reg(s) in use" u64 
    callproc       &pc_libmcl.merror 
#7980: 
    push           1          i64 
    push           &pci_mcl.regset 
    push           pc_stackmcl.addwidereg0.reg i64 
    popptroff                 u8 1 -1
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.setwideopnd 
#7981: 
    retproc                   
End


Proc pc_stackmcl.addxreg0:
    param          pc_stackmcl.addxreg0.reg i64 
    param          pc_stackmcl.addxreg0.fmt i64 
    procentry                 
    setargs                   1 0
    push           pc_stackmcl.addxreg0.fmt i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addxreg0.reg i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    push           &pci_mcl.xregset 
    push           pc_stackmcl.addxreg0.reg i64 
    pushptroff                u8 1 -1
    jumpfalse      #7983      i64 
    setargs                   2 0
    push           ""         u64 
    push           "addxreg0/reg in use" u64 
    callproc       &pc_libmcl.merror 
#7983: 
    push           1          i64 
    push           &pci_mcl.xregset 
    push           pc_stackmcl.addxreg0.reg i64 
    popptroff                 u8 1 -1
#7984: 
    retproc                   
End


Proc pc_stackmcl.addreg_d64:
    procentry                 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.newopnd 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
#7986: 
    retproc                   
End


Proc pc_stackmcl.addreg_x64:
    procentry                 
    setargs                   1 0
    push           2          i64 
    callproc       &pc_stackmcl.newopnd 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextxreg i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
#7988: 
    retproc                   
End


Proc pc_stackmcl.addreg_x32:
    procentry                 
    setargs                   1 0
    push           3          i64 
    callproc       &pc_stackmcl.newopnd 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextxreg i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
#7990: 
    retproc                   
End


Proc pc_stackmcl.stropndstack: u64
    param          pc_stackmcl.stropndstack.indent i64 
    local          pc_stackmcl.stropndstack.str2 block:512 
    local          pc_stackmcl.stropndstack.s u64 
    local          pc_stackmcl.stropndstack.t u64 
    local          pc_stackmcl.stropndstack.pc block:15 
    local          pc_stackmcl.stropndstack.i i64 
    local          pc_stackmcl.stropndstack.r i64 
    procentry                 
    push           &pc_stackmcl.stropndstack.str 
    pop            pc_stackmcl.stropndstack.s u64 
    push           pc_stackmcl.stropndstack.indent i64 
    jumpfalse      #7992      i64 
    setargs                   1 0
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "                                     (" u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #7993      
#7992: 
    setargs                   1 0
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "("        u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#7993: 
#7994: 
    push           pci_mcl.noperands i64 
    pop            pc_stackmcl.stropndstack.i i64 
    push           pc_stackmcl.stropndstack.i i64 
    push           1          i64 
    jumplt         #7995      i64 
#7996: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.stropndstack.i i64 
    pushptroff                block:15 15 -15
    pop            pc_stackmcl.stropndstack.pc block:15 
    push           &pc_stackmcl.stropndstack.pc 
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #7997      i64 0
    push           7          i64 
    casejumpeq     #7998      i64 0
    push           2          i64 
    casejumpeq     #7999      i64 0
    push           8          i64 
    casejumpeq     #8000      i64 0
    push           3          i64 
    casejumpeq     #8001      i64 0
    push           5          i64 
    casejumpeq     #8002      i64 0
    popstack                  i64 
    jump           #8003      
#7997: 
    setargs                   2 0
    push           &pci_mcl.regnames 
    push           &pc_stackmcl.stropndstack.pc 
    push           2          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #8004      
#7998: 
    setargs                   2 0
    push           &pci_mcl.regnames 
    push           &pc_stackmcl.stropndstack.pc 
    push           2          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           "="        u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           &pc_stackmcl.stropndstack.pc 
    push           7          
    pushptroff                u64 1 0
    pushptr                   u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #8004      
#7999: 
    setargs                   2 0
    push           &pci_mcl.xregnames 
    push           &pc_stackmcl.stropndstack.pc 
    push           2          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           ":"        u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           &pci_mcl.fmtnames 
    push           &pc_stackmcl.stropndstack.pc 
    pushptr                   u8 
    pushptroff                u64 8 0
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #8004      
#8000: 
    setargs                   2 0
    push           &pci_mcl.xregnames 
    push           &pc_stackmcl.stropndstack.pc 
    push           2          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           "="        u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           &pc_stackmcl.stropndstack.pc 
    push           7          
    pushptroff                u64 1 0
    pushptr                   u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #8004      
#8001: 
    setargs                   2 0
    push           "T"        u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #8004      
#8002: 
    setargs                   2 0
    push           "M:"       u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           &pc_stackmcl.stropndstack.pc 
    push           7          
    pushptroff                u64 1 0
    pushptr                   u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #8004      
#8003: 
    push           &pc_stackmcl.stropndstack.pc 
    pushptr                   u8 
    push           7          i64 
    casejumpeq     #8005      i64 0
    push           8          i64 
    casejumpeq     #8006      i64 0
    push           10         i64 
    casejumpeq     #8007      i64 0
    push           11         i64 
    casejumpeq     #8008      i64 0
    push           13         i64 
    casejumpeq     #8009      i64 0
    push           12         i64 
    casejumpeq     #8010      i64 0
    popstack                  i64 
    jump           #8011      
#8005: 
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           &pc_stackmcl.stropndstack.pc 
    push           7          
    pushptroff                i64 1 0
    callfn         &msysp.strint u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #8012      
#8006: 
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           &pc_stackmcl.stropndstack.pc 
    push           7          
    pushptroff                r64 1 0
    callfn         &msysp.strreal u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #8012      
#8007: 
    push           &pc_stackmcl.stropndstack.pc 
    push           7          
    pushptroff                u64 1 0
    pop            pc_stackmcl.stropndstack.t u64 
    setargs                   1 0
    push           pc_stackmcl.stropndstack.t u64 
    callfn         &strlen    i64 
    push           20         i64 
    jumple         #8013      i64 
    setargs                   2 0
    push           "LONG STR" u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #8014      
#8013: 
    setargs                   2 0
    push           "\""       u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           pc_stackmcl.stropndstack.s u64 
    setargs                   1 0
    push           pc_stackmcl.stropndstack.s u64 
    callfn         &strlen    i64 
    addrefoff                 u64 1 0
    push           pc_stackmcl.stropndstack.t u64 
    callproc       &pc_libpcl.convertstring 
    setargs                   2 0
    push           "\""       u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
#8014: 
    jump           #8012      
#8008: 
    setargs                   2 0
    push           "&"        u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           &pc_stackmcl.stropndstack.pc 
    push           7          
    pushptroff                u64 1 0
    pushptr                   u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #8012      
#8009: 
    setargs                   2 0
    push           "&#"       u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           &pc_stackmcl.stropndstack.pc 
    push           7          
    pushptroff                i64 1 0
    callfn         &msysp.strint u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #8012      
#8010: 
    setargs                   2 0
    push           "#"        u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           &pc_stackmcl.stropndstack.pc 
    push           7          
    pushptroff                i64 1 0
    callfn         &msysp.strint u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #8012      
#8011: 
    setargs                   2 0
    push           &pci_mcl.fmtnames 
    push           &pc_stackmcl.stropndstack.pc 
    pushptr                   u8 
    pushptroff                u64 8 0
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
#8012: 
#8004: 
    push           &pc_stackmcl.stropndstack.pc 
    push           4          
    pushptroff                u8 1 0
    jumpfalse      #8015      i64 
    setargs                   2 0
    startmult                 
    push           &pc_stackmcl.stropndstack.pc 
    push           4          
    pushptroff                u8 1 0
    push           72         i64 
    jumpne         #8016      i64 
    push           "(H)"      u64 
    resetmult                 
    jump           #8017      
#8016: 
    push           "(L)"      u64 
    endmult                   
#8017: 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
#8015: 
    push           pc_stackmcl.stropndstack.i i64 
    push           1          i64 
    jumple         #8018      i64 
    setargs                   2 0
    push           ","        u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
#8018: 
#8019: 
    fordown        #7996      i64 1
    opnd           pc_stackmcl.stropndstack.i 
    opnd           1          
#7995: 
    setargs                   2 0
    push           ") ("      u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
#8020: 
    push           1          i64 
    pop            pc_stackmcl.stropndstack.r i64 
#8021: 
    setargs                   2 0
    startmult                 
    push           &pci_mcl.regset 
    push           pc_stackmcl.stropndstack.r i64 
    pushptroff                u8 1 -1
    jumpfalse      #8022      i64 
    push           "1 "       u64 
    resetmult                 
    jump           #8023      
#8022: 
    push           "0 "       u64 
    endmult                   
#8023: 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
#8024: 
    forup          #8021      i64 1
    opnd           pc_stackmcl.stropndstack.r 
    opnd           10         
#8025: 
    setargs                   2 0
    push           ") ("      u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
#8026: 
    push           1          i64 
    pop            pc_stackmcl.stropndstack.r i64 
#8027: 
    setargs                   2 0
    startmult                 
    push           &pci_mcl.xregset 
    push           pc_stackmcl.stropndstack.r i64 
    pushptroff                u8 1 -1
    jumpfalse      #8028      i64 
    push           "1 "       u64 
    resetmult                 
    jump           #8029      
#8028: 
    push           "0 "       u64 
    endmult                   
#8029: 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
#8030: 
    forup          #8027      i64 1
    opnd           pc_stackmcl.stropndstack.r 
    opnd           7          
#8031: 
    setargs                   2 0
    push           ") hwstack:" u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pci_mcl.mstackdepth i64 
    callfn         &msysp.strint u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           " noperands:" u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pci_mcl.noperands i64 
    callfn         &msysp.strint u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           " ncalldepth:" u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pci_mcl.ncalldepth i64 
    callfn         &msysp.strint u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           " callslots[]:" u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           &pci_mcl.callslots 
    push           pci_mcl.ncalldepth i64 
    pushptroff                i64 8 -8
    callfn         &msysp.strint u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    push           pc_stackmcl.stropndstack.s u64 
    setret                    u64 
    jump           #8032      
#8032: 
    retfn                     u64 
End


Proc pc_stackmcl.loadopnd:
    param          pc_stackmcl.loadopnd.n i64 
    param          pc_stackmcl.loadopnd.nvreg i64 
    local          pc_stackmcl.loadopnd.reg i64 
    local          pc_stackmcl.loadopnd.value i64 
    local          pc_stackmcl.loadopnd.ax u64 
    procentry                 
    push           pc_stackmcl.loadopnd.n i64 
    push           pci_mcl.noperands i64 
    jumple         #8034      i64 
    setargs                   1 0
    push           "UNDERFLOW" u64 
    callproc       &pc_libmcl.mgencomment 
    jump           #8035      
    setargs                   2 0
    push           ""         u64 
    push           "loadopnd/underflow" u64 
    callproc       &pc_libmcl.merror 
#8034: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8036      i64 
    jump           #8035      
#8036: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #8037      i64 
    jump           #8035      
#8037: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           3          
    pushptroff                u8 1 0
    jumpfalse      #8038      i64 
    setargs                   1 0
    push           pc_stackmcl.loadopnd.nvreg i64 
    callfn         &pc_stackmcl.getnextxreg i64 
    pop            pc_stackmcl.loadopnd.reg i64 
    jump           #8039      
#8038: 
    setargs                   1 0
    push           pc_stackmcl.loadopnd.nvreg i64 
    callfn         &pc_stackmcl.getnextreg i64 
    pop            pc_stackmcl.loadopnd.reg i64 
#8039: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           2          i64 
    casejumpeq     #8040      i64 0
    popstack                  i64 
    jump           #8041      
#8040: 
    setargs                   2 0
    push           ""         u64 
    push           "LOADOPND/XREG" u64 
    callproc       &pc_libmcl.merror 
    jump           #8042      
#8041: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    casejumpeq     #8043      i64 0
    push           8          i64 
    casejumpeq     #8044      i64 0
    push           9          i64 
    casejumpeq     #8045      i64 0
    push           10         i64 
    casejumpeq     #8046      i64 0
    push           13         i64 
    casejumpeq     #8047      i64 0
    push           12         i64 
    casejumpeq     #8048      i64 0
    push           14         i64 
    casejumpeq     #8049      i64 0
    push           15         i64 
    casejumpeq     #8050      i64 0
    push           16         i64 
    casejumpeq     #8051      i64 0
    push           17         i64 
    casejumpeq     #8052      i64 0
    push           18         i64 
    casejumpeq     #8053      i64 0
    push           19         i64 
    casejumpeq     #8054      i64 0
    push           4          i64 
    casejumpeq     #8055      i64 0
    push           5          i64 
    casejumpeq     #8056      i64 0
    push           6          i64 
    casejumpeq     #8057      i64 0
    push           11         i64 
    casejumpeq     #8058      i64 0
    popstack                  i64 
    jump           #8059      
#8043: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    pop            pc_stackmcl.loadopnd.value i64 
    push           pc_stackmcl.loadopnd.value i64 
    push           0          i64 
    jumpne         #8060      i64 
    push           pci_mcl.noxorclear u8 
    jumptrue       #8060      i64 
    setargs                   2 0
    push           4          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_stackmcl.loadopnd.ax u64 
    setargs                   3 0
    push           pc_stackmcl.loadopnd.ax u64 
    push           pc_stackmcl.loadopnd.ax u64 
    push           41         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8061      
#8060: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenint u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
#8061: 
    jump           #8062      
#8044: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                r64 1 0
    callfn         &pc_libmcl.mgenrealmem u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenxreg u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8062      
#8045: 
    setargs                   3 0
    setargs                   2 0
    push           4          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                r64 1 0
    callfn         &pc_libmcl.mgenrealmem u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenxreg u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8062      
#8046: 
    setargs                   3 0
    setargs                   1 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.getstringindex i64 
    callfn         &pc_libmcl.mgenlabel u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8062      
#8047: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8062      
#8048: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabelmem u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           5          
    pushptroff                i16 1 0
    push           pci_mcl.mccodex u64 
    push           16         
    pushptroff                u64 1 0
    push           14         
    popptroff                 i32 1 0
    jump           #8062      
#8049: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8062      
#8050: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenxreg u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8062      
#8051: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenxreg u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8062      
#8052: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmemhigh u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8062      
#8053: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenregvar u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8062      
#8054: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenxregvar u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenxreg u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8062      
#8055: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           14         i64 
    callproc       &pc_libmcl.genmc 
    push           &pci_mcl.mstackdepth 
    decr                      i64 1
    jump           #8062      
#8056: 
    push           pci_mcl.inf_r13used i64 
    jumpfalse      #8063      i64 
    setargs                   2 0
    push           ""         u64 
    push           "R13 in use" u64 
    callproc       &pc_libmcl.merror 
#8063: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           14         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           14         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           14         i64 
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenxreg u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    push           &pci_mcl.mstackdepth 
    decr                      i64 1
    jump           #8062      
#8057: 
    push           pci_mcl.inf_r13used i64 
    jumpfalse      #8064      i64 
    setargs                   2 0
    push           ""         u64 
    push           "R13 in use" u64 
    callproc       &pc_libmcl.merror 
#8064: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           14         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           14         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           4          i64 
    push           14         i64 
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenxreg u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    push           &pci_mcl.mstackdepth 
    decr                      i64 1
    jump           #8062      
#8058: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           15         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8062      
#8059: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.stropndstack u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           &pci_mcl.fmtnames 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u64 8 0
    push           "LOADOPND??" u64 
    callproc       &pc_libmcl.merror 
#8062: 
#8042: 
    push           pc_stackmcl.loadopnd.reg i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    push           &pci_mcl.loadfmt 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u8 1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
    push           &pci_mcl.loccodes 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u8 1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           1          
    popptroff                 u8 1 0
#8035: 
    retproc                   
End


Proc pc_stackmcl.loadparam:
    param          pc_stackmcl.loadparam.n i64 
    param          pc_stackmcl.loadparam.reg i64 
    local          pc_stackmcl.loadparam.oldreg i64 
    local          pc_stackmcl.loadparam.value i64 
    local          pc_stackmcl.loadparam.ax u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadparam.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_stackmcl.loadparam.ax u64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_stackmcl.loadparam.oldreg i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           1          i64 
    casejumpeq     #8066      i64 0
    push           18         i64 
    casejumpeq     #8066      i64 0
    push           2          i64 
    casejumpeq     #8067      i64 0
    push           19         i64 
    casejumpeq     #8067      i64 0
    push           3          i64 
    casejumpeq     #8068      i64 0
    push           7          i64 
    casejumpeq     #8069      i64 0
    push           8          i64 
    casejumpeq     #8070      i64 0
    push           10         i64 
    casejumpeq     #8071      i64 0
    push           14         i64 
    casejumpeq     #8072      i64 0
    push           17         i64 
    casejumpeq     #8073      i64 0
    push           11         i64 
    casejumpeq     #8074      i64 0
    push           15         i64 
    casejumpeq     #8075      i64 0
    push           4          i64 
    casejumpeq     #8076      i64 0
    popstack                  i64 
    jump           #8077      
#8066: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadparam.oldreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           pc_stackmcl.loadparam.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_stackmcl.loadparam.oldreg i64 
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_stackmcl.loadparam.oldreg i64 
    popptroff                 u8 1 -1
    jump           #8078      
#8067: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadparam.oldreg i64 
    callfn         &pc_libmcl.mgenxreg u64 
    push           pc_stackmcl.loadparam.ax u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8079      
    jump           #8078      
#8068: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadparam.oldreg i64 
    callfn         &pc_libmcl.mgenxreg u64 
    setargs                   2 0
    push           4          i64 
    push           pc_stackmcl.loadparam.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8079      
    jump           #8078      
#8069: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    pop            pc_stackmcl.loadparam.value i64 
    push           pc_stackmcl.loadparam.value i64 
    push           0          i64 
    jumpne         #8080      i64 
    setargs                   2 0
    push           4          i64 
    push           pc_stackmcl.loadparam.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_stackmcl.loadparam.ax u64 
    setargs                   3 0
    push           pc_stackmcl.loadparam.ax u64 
    push           pc_stackmcl.loadparam.ax u64 
    push           41         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8081      
#8080: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenint u64 
    push           pc_stackmcl.loadparam.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
#8081: 
    jump           #8078      
#8070: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                r64 1 0
    callfn         &pc_libmcl.mgenrealmem u64 
    push           pc_stackmcl.loadparam.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8078      
#8071: 
    setargs                   3 0
    setargs                   1 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.getstringindex i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           pc_stackmcl.loadparam.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8078      
#8072: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           pc_stackmcl.loadparam.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8078      
#8073: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmemhigh u64 
    push           pc_stackmcl.loadparam.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8078      
#8074: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           pc_stackmcl.loadparam.ax u64 
    push           15         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8078      
#8075: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           pc_stackmcl.loadparam.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8078      
#8076: 
    setargs                   3 0
    push           0          u64 
    push           pc_stackmcl.loadparam.ax u64 
    push           14         i64 
    callproc       &pc_libmcl.genmc 
    push           &pci_mcl.mstackdepth 
    decr                      i64 1
    jump           #8078      
#8077: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "LOADPARAM:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pci_mcl.fmtnames 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "****LOADPARAM??" u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   2 0
    push           &pci_mcl.fmtnames 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u64 8 0
    push           "LOADPARAM??" u64 
    callproc       &pc_libmcl.merror 
#8078: 
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    push           1          
    popptroff                 u8 1 0
    push           pc_stackmcl.loadparam.reg i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
#8079: 
    retproc                   
End


Proc pc_stackmcl.loadxparam:
    param          pc_stackmcl.loadxparam.n i64 
    param          pc_stackmcl.loadxparam.reg i64 
    local          pc_stackmcl.loadxparam.ax u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadxparam.reg i64 
    callfn         &pc_libmcl.mgenxreg u64 
    pop            pc_stackmcl.loadxparam.ax u64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadxparam.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           1          i64 
    casejumpeq     #8083      i64 0
    push           18         i64 
    casejumpeq     #8083      i64 0
    push           2          i64 
    casejumpeq     #8084      i64 0
    push           19         i64 
    casejumpeq     #8084      i64 0
    push           3          i64 
    casejumpeq     #8085      i64 0
    push           8          i64 
    casejumpeq     #8086      i64 0
    push           9          i64 
    casejumpeq     #8087      i64 0
    push           14         i64 
    casejumpeq     #8088      i64 0
    push           15         i64 
    casejumpeq     #8088      i64 0
    push           16         i64 
    casejumpeq     #8089      i64 0
    popstack                  i64 
    jump           #8090      
#8083: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadxparam.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    push           pc_stackmcl.loadxparam.ax u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8091      
#8084: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadxparam.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenxreg u64 
    push           pc_stackmcl.loadxparam.ax u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8091      
#8085: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadxparam.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenxreg u64 
    push           pc_stackmcl.loadxparam.ax u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8091      
#8086: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadxparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                r64 1 0
    callfn         &pc_libmcl.mgenrealmem u64 
    push           pc_stackmcl.loadxparam.ax u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8091      
#8087: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadxparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                r64 1 0
    callfn         &pc_libmcl.mgenrealmem u64 
    push           pc_stackmcl.loadxparam.ax u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8091      
#8088: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadxparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           pc_stackmcl.loadxparam.ax u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8091      
#8089: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadxparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           pc_stackmcl.loadxparam.ax u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8091      
#8090: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "??LOADXPARAM" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_stackmcl.loadxparam.n i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           pci_mcl.noperands i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "****LOADXPARAM??" u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   2 0
    push           &pci_mcl.fmtnames 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadxparam.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u64 8 0
    push           "LOADXPARAM??" u64 
    callproc       &pc_libmcl.merror 
#8091: 
#8092: 
    retproc                   
End


Proc pc_stackmcl.genopnd: u64
    param          pc_stackmcl.genopnd.index i64 
    param          pc_stackmcl.genopnd.size i64 
    local          pc_stackmcl.genopnd.ax u64 
    local          pc_stackmcl.genopnd.reg i64 
    local          pc_stackmcl.genopnd.value i64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8094      i64 0
    push           7          i64 
    casejumpeq     #8095      i64 0
    push           2          i64 
    casejumpeq     #8096      i64 0
    push           8          i64 
    casejumpeq     #8097      i64 0
    popstack                  i64 
    jump           #8098      
#8094: 
    setargs                   2 0
    push           pc_stackmcl.genopnd.size i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    setret                    u64 
    jump           #8099      
    jump           #8100      
#8095: 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenregvar u64 
    setret                    u64 
    jump           #8099      
    jump           #8100      
#8096: 
    setargs                   2 0
    push           pc_stackmcl.genopnd.size i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenxreg u64 
    setret                    u64 
    jump           #8099      
    jump           #8100      
#8097: 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenxregvar u64 
    setret                    u64 
    jump           #8099      
    jump           #8100      
#8098: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           14         i64 
    casejumpeq     #8101      i64 0
    push           15         i64 
    casejumpeq     #8101      i64 0
    push           16         i64 
    casejumpeq     #8101      i64 0
    push           17         i64 
    casejumpeq     #8102      i64 0
    push           7          i64 
    casejumpeq     #8103      i64 0
    push           8          i64 
    casejumpeq     #8104      i64 0
    push           9          i64 
    casejumpeq     #8105      i64 0
    push           11         i64 
    casejumpeq     #8106      i64 0
    push           10         i64 
    casejumpeq     #8107      i64 0
    popstack                  i64 
    jump           #8108      
#8101: 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    setret                    u64 
    jump           #8099      
    jump           #8109      
#8102: 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmemhigh u64 
    setret                    u64 
    jump           #8099      
    jump           #8109      
#8103: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    pop            pc_stackmcl.genopnd.value i64 
    push           -2147483648 i64 
    push           pc_stackmcl.genopnd.value i64 
    jumpgt         #8110      i64 
    push           pc_stackmcl.genopnd.value i64 
    push           2147483647 i64 
    jumpgt         #8110      i64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.genopnd.value i64 
    callfn         &pc_libmcl.mgenint u64 
    setret                    u64 
    jump           #8099      
#8110: 
    setargs                   2 0
    push           8          i64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_stackmcl.genopnd.ax u64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.genopnd.value i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_stackmcl.genopnd.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_stackmcl.genopnd.ax u64 
    push           10         
    pushptroff                u8 1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           1          
    popptroff                 u8 1 0
    push           pc_stackmcl.genopnd.ax u64 
    setret                    u64 
    jump           #8099      
    jump           #8109      
#8104: 
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                r64 1 0
    callfn         &pc_libmcl.mgenrealmem u64 
    setret                    u64 
    jump           #8099      
    jump           #8109      
#8105: 
    setargs                   2 0
    push           4          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                r64 1 0
    callfn         &pc_libmcl.mgenrealmem u64 
    setret                    u64 
    jump           #8099      
    jump           #8109      
#8106: 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    pop            pc_stackmcl.genopnd.reg i64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.genopnd.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_stackmcl.genopnd.ax u64 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           pc_stackmcl.genopnd.ax u64 
    push           15         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_stackmcl.genopnd.ax u64 
    push           10         
    pushptroff                u8 1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           1          
    popptroff                 u8 1 0
    push           pc_stackmcl.genopnd.ax u64 
    setret                    u64 
    jump           #8099      
    jump           #8109      
#8107: 
    setargs                   3 0
    setargs                   1 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.getstringindex i64 
    callfn         &pc_libmcl.mgenlabel u64 
    setargs                   2 0
    push           8          i64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    store          pc_stackmcl.genopnd.ax u64 
    push           15         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_stackmcl.genopnd.ax u64 
    push           10         
    pushptroff                u8 1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           1          
    popptroff                 u8 1 0
    push           pc_stackmcl.genopnd.ax u64 
    setret                    u64 
    jump           #8099      
    jump           #8109      
#8108: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "LOCNAMES[PCLSTACK[INDEX].LOC]=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pci_mcl.locnames 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "FMTNAMES[PCLSTACK[INDEX].FMT]=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pci_mcl.fmtnames 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "GENOPND??" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "****GENOPND??" u64 
    callproc       &pc_libmcl.mgencomment 
#8109: 
#8100: 
    push           0          u64 
    setret                    u64 
    jump           #8099      
#8099: 
    retfn                     u64 
End


Proc pc_stackmcl.genopnd_ld: u64
    param          pc_stackmcl.genopnd_ld.index i64 
    param          pc_stackmcl.genopnd_ld.size i64 
    procentry                 
    setargs                   2 0
    push           0          i64 
    push           pc_stackmcl.genopnd_ld.index i64 
    callproc       &pc_stackmcl.loadopnd 
    setargs                   2 0
    push           pc_stackmcl.genopnd_ld.size i64 
    push           pc_stackmcl.genopnd_ld.index i64 
    callfn         &pc_stackmcl.genopnd u64 
    setret                    u64 
    jump           #8112      
#8112: 
    retfn                     u64 
End


Proc pc_stackmcl.genopnd_ind: u64
    param          pc_stackmcl.genopnd_ind.index i64 
    param          pc_stackmcl.genopnd_ind.size i64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd_ind.index i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8114      i64 0
    popstack                  i64 
    jump           #8115      
#8114: 
    setargs                   3 0
    push           0          i64 
    push           pc_stackmcl.genopnd_ind.size i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd_ind.index i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenireg u64 
    setret                    u64 
    jump           #8116      
    setargs                   3 0
    push           0          i64 
    push           pc_stackmcl.genopnd_ind.size i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd_ind.index i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenireg u64 
    setret                    u64 
    jump           #8116      
    setargs                   3 0
    push           0          i64 
    push           pc_stackmcl.genopnd_ind.size i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd_ind.index i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenireg u64 
    setret                    u64 
    jump           #8116      
    jump           #8117      
#8115: 
#8117: 
    setargs                   2 0
    push           0          i64 
    push           pc_stackmcl.genopnd_ind.index i64 
    callproc       &pc_stackmcl.loadopnd 
    setargs                   2 0
    push           pc_stackmcl.genopnd_ind.size i64 
    push           pc_stackmcl.genopnd_ind.index i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    setret                    u64 
    jump           #8116      
#8116: 
    retfn                     u64 
End


Proc pc_stackmcl.genopnd_d64: u64
    procentry                 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_d64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    setret                    u64 
    jump           #8119      
#8119: 
    retfn                     u64 
End


Proc pc_stackmcl.setwideopnd:
    param          pc_stackmcl.setwideopnd.n i64 
    procentry                 
    push           76         i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.setwideopnd.n i64 
    addrefoff                 block:15 15 -15
    push           4          
    popptroff                 u8 1 0
    push           72         i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.setwideopnd.n i64 
    addrefoff                 block:15 15 0
    push           4          
    popptroff                 u8 1 0
#8121: 
    retproc                   
End


Proc pc_stackmcl.unsetwideopnd:
    param          pc_stackmcl.unsetwideopnd.n i64 
    procentry                 
    push           0          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.unsetwideopnd.n i64 
    addrefoff                 block:15 15 -15
    push           4          
    popptroff                 u8 1 0
#8123: 
    retproc                   
End


Proc pc_stackmcl.getnextreg: i64
    param          pc_stackmcl.getnextreg.nvreg i64 
    local          pc_stackmcl.getnextreg.reg i64 
    local          pc_stackmcl.getnextreg.firstreg i64 
    local          pc_stackmcl.getnextreg.r i64 
    local          pc_stackmcl.getnextreg.i i64 
    procentry                 
    startmult                 
    push           pc_stackmcl.getnextreg.nvreg i64 
    jumpfalse      #8125      i64 
    push           4          i64 
    resetmult                 
    jump           #8126      
#8125: 
    push           1          i64 
    endmult                   
#8126: 
    pop            pc_stackmcl.getnextreg.firstreg i64 
#8127: 
    push           pc_stackmcl.getnextreg.firstreg i64 
    pop            pc_stackmcl.getnextreg.r i64 
    push           pc_stackmcl.getnextreg.r i64 
    push           10         i64 
    jumpgt         #8128      i64 
#8129: 
    push           &pci_mcl.regset 
    push           pc_stackmcl.getnextreg.r i64 
    pushptroff                u8 1 -1
    push           0          i64 
    jumpne         #8130      i64 
    push           1          i64 
    push           &pci_mcl.regset 
    push           pc_stackmcl.getnextreg.r i64 
    popptroff                 u8 1 -1
    push           &pci_mcl.inf_highreg 
    push           pc_stackmcl.getnextreg.r i64 
    maxto                     i64 
    push           pc_stackmcl.getnextreg.r i64 
    setret                    i64 
    jump           #8131      
#8130: 
#8132: 
    forup          #8129      i64 1
    opnd           pc_stackmcl.getnextreg.r 
    opnd           10         
#8128: 
#8133: 
    push           pci_mcl.noperands i64 
    pop            pc_stackmcl.getnextreg.i i64 
    push           pc_stackmcl.getnextreg.i i64 
    push           1          i64 
    jumplt         #8134      i64 
#8135: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.getnextreg.i i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8136      i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.getnextreg.i i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_stackmcl.getnextreg.reg i64 
    push           pc_stackmcl.getnextreg.reg i64 
    push           pc_stackmcl.getnextreg.firstreg i64 
    jumplt         #8137      i64 
    setargs                   1 0
    push           pc_stackmcl.getnextreg.i i64 
    callproc       &pc_stackmcl.pushopnd 
    setargs                   1 0
    push           pc_stackmcl.getnextreg.nvreg i64 
    callfn         &pc_stackmcl.getnextreg i64 
    setret                    i64 
    jump           #8131      
#8137: 
#8136: 
#8138: 
    fordown        #8135      i64 1
    opnd           pc_stackmcl.getnextreg.i 
    opnd           1          
#8134: 
    setargs                   2 0
    push           ""         u64 
    push           "NO FREE REGS" u64 
    callproc       &pc_libmcl.merror 
    push           0          i64 
    setret                    i64 
    jump           #8131      
#8131: 
    retfn                     i64 
End


Proc pc_stackmcl.getnextxreg: i64
    param          pc_stackmcl.getnextxreg.nvreg i64 
    local          pc_stackmcl.getnextxreg.reg i64 
    local          pc_stackmcl.getnextxreg.firstreg i64 
    local          pc_stackmcl.getnextxreg.r i64 
    local          pc_stackmcl.getnextxreg.i i64 
    procentry                 
    startmult                 
    push           pc_stackmcl.getnextxreg.nvreg i64 
    jumpfalse      #8140      i64 
    push           7          i64 
    resetmult                 
    jump           #8141      
#8140: 
    push           5          i64 
    endmult                   
#8141: 
    pop            pc_stackmcl.getnextxreg.firstreg i64 
#8142: 
    push           pc_stackmcl.getnextxreg.firstreg i64 
    pop            pc_stackmcl.getnextxreg.r i64 
    push           pc_stackmcl.getnextxreg.r i64 
    push           10         i64 
    jumpgt         #8143      i64 
#8144: 
    push           &pci_mcl.xregset 
    push           pc_stackmcl.getnextxreg.r i64 
    pushptroff                u8 1 -1
    push           0          i64 
    jumpne         #8145      i64 
    push           1          i64 
    push           &pci_mcl.xregset 
    push           pc_stackmcl.getnextxreg.r i64 
    popptroff                 u8 1 -1
    push           &pci_mcl.inf_highxreg 
    push           pc_stackmcl.getnextxreg.r i64 
    maxto                     i64 
    push           pc_stackmcl.getnextxreg.r i64 
    setret                    i64 
    jump           #8146      
#8145: 
#8147: 
    forup          #8144      i64 1
    opnd           pc_stackmcl.getnextxreg.r 
    opnd           10         
#8143: 
#8148: 
    push           pci_mcl.noperands i64 
    pop            pc_stackmcl.getnextxreg.i i64 
    push           pc_stackmcl.getnextxreg.i i64 
    push           1          i64 
    jumplt         #8149      i64 
#8150: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.getnextxreg.i i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8151      i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.getnextxreg.i i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_stackmcl.getnextxreg.reg i64 
    push           pc_stackmcl.getnextxreg.reg i64 
    push           pc_stackmcl.getnextxreg.firstreg i64 
    jumplt         #8152      i64 
    setargs                   1 0
    push           pc_stackmcl.getnextxreg.i i64 
    callproc       &pc_stackmcl.pushopnd 
    setargs                   1 0
    push           pc_stackmcl.getnextxreg.nvreg i64 
    callfn         &pc_stackmcl.getnextxreg i64 
    setret                    i64 
    jump           #8146      
#8152: 
#8151: 
#8153: 
    fordown        #8150      i64 1
    opnd           pc_stackmcl.getnextxreg.i 
    opnd           1          
#8149: 
    setargs                   2 0
    push           ""         u64 
    push           "NO FREE XREGS" u64 
    callproc       &pc_libmcl.merror 
    push           0          i64 
    setret                    i64 
    jump           #8146      
#8146: 
    retfn                     i64 
End


Proc pc_stackmcl.delopnd:
    procentry                 
    push           pci_mcl.noperands i64 
    push           0          i64 
    jumpgt         #8155      i64 
    setargs                   1 0
    push           "****DELND/UNDERFLOW" u64 
    callproc       &pc_libmcl.mgencomment 
    jump           #8156      
#8155: 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8157      i64 0
    push           7          i64 
    casejumpeq     #8157      i64 0
    push           2          i64 
    casejumpeq     #8158      i64 0
    push           8          i64 
    casejumpeq     #8158      i64 0
    push           5          i64 
    casejumpeq     #8159      i64 0
    push           4          i64 
    casejumpeq     #8160      i64 0
    popstack                  i64 
    jump           #8161      
#8157: 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    jump           #8162      
#8158: 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callproc       &pc_stackmcl.freexreg 
    jump           #8162      
#8159: 
    jump           #8162      
#8160: 
    jump           #8162      
#8161: 
    setargs                   2 0
    push           &pci_mcl.locnames 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    push           "Can't pop opnd: #" u64 
    callproc       &pc_libmcl.merror 
#8162: 
    push           &pci_mcl.noperands 
    decr                      i64 1
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    pop            pci_mcl.pclstack u64 
#8156: 
    retproc                   
End


Proc pc_stackmcl.freexreg:
    param          pc_stackmcl.freexreg.xr i64 
    procentry                 
    push           0          i64 
    push           &pci_mcl.xregset 
    push           pc_stackmcl.freexreg.xr i64 
    popptroff                 u8 1 -1
#8164: 
    retproc                   
End


Proc pc_stackmcl.pushopnd:
    param          pc_stackmcl.pushopnd.n i64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8166      i64 0
    push           7          i64 
    casejumpeq     #8167      i64 0
    push           2          i64 
    casejumpeq     #8168      i64 0
    push           3          i64 
    casejumpeq     #8169      i64 0
    popstack                  i64 
    jump           #8170      
#8166: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    jump           #8171      
#8167: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8171      
#8168: 
    push           pci_mcl.inf_r13used i64 
    jumpfalse      #8172      i64 
    setargs                   2 0
    push           ""         u64 
    push           "2:R13 in use" u64 
    callproc       &pc_libmcl.merror 
#8172: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenxreg u64 
    setargs                   2 0
    push           8          i64 
    push           14         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           14         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callproc       &pc_stackmcl.freexreg 
    jump           #8171      
#8169: 
    jump           #8173      
    jump           #8171      
#8170: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           17         i64 
    casejumpeq     #8174      i64 0
    push           14         i64 
    casejumpeq     #8175      i64 0
    push           15         i64 
    casejumpeq     #8175      i64 0
    push           16         i64 
    casejumpeq     #8176      i64 0
    push           7          i64 
    casejumpeq     #8177      i64 0
    push           8          i64 
    casejumpeq     #8178      i64 0
    push           10         i64 
    casejumpeq     #8179      i64 0
    push           11         i64 
    casejumpeq     #8180      i64 0
    popstack                  i64 
    jump           #8181      
#8174: 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmemhigh u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8182      
#8175: 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8182      
#8176: 
    push           pci_mcl.inf_r13used i64 
    jumpfalse      #8183      i64 
    setargs                   2 0
    push           ""         u64 
    push           "4:R13 in use" u64 
    callproc       &pc_libmcl.merror 
#8183: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    setargs                   2 0
    push           4          i64 
    push           14         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           14         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8182      
#8177: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenint u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8182      
#8178: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                r64 1 0
    callfn         &pc_libmcl.mgenrealmem u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8182      
#8179: 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.getstringindex i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8182      
#8180: 
    push           pci_mcl.inf_r13used i64 
    jumpfalse      #8184      i64 
    setargs                   2 0
    push           ""         u64 
    push           "3:R13 in use" u64 
    callproc       &pc_libmcl.merror 
#8184: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    setargs                   2 0
    push           8          i64 
    push           14         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           15         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           14         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8182      
#8181: 
    setargs                   2 0
    push           &pci_mcl.fmtnames 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u64 8 0
    push           "Can't push opnd: #" u64 
    callproc       &pc_libmcl.merror 
#8182: 
#8171: 
    push           3          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           1          
    popptroff                 u8 1 0
    push           &pci_mcl.pushfmt 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u8 1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
    push           &pci_mcl.mstackdepth 
    incr                      i64 1
#8173: 
    retproc                   
End


Proc pc_stackmcl.pushallopnds:
    param          pc_stackmcl.pushallopnds.n i64 
    local          pc_stackmcl.pushallopnds.i i64 
    procentry                 
#8186: 
    push           pci_mcl.noperands i64 
    pop            pc_stackmcl.pushallopnds.i i64 
    push           pc_stackmcl.pushallopnds.i i64 
    push           pc_stackmcl.pushallopnds.n i64 
    jumplt         #8187      i64 
#8188: 
    setargs                   1 0
    push           pc_stackmcl.pushallopnds.i i64 
    callproc       &pc_stackmcl.pushopnd 
#8189: 
    fordown        #8188      i64 1
    opnd           pc_stackmcl.pushallopnds.i 
    opnd           pc_stackmcl.pushallopnds.n 
#8187: 
#8190: 
    retproc                   
End


Proc pc_stackmcl.poparg:
    procentry                 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8192      i64 0
    push           2          i64 
    casejumpeq     #8193      i64 0
    push           3          i64 
    casejumpeq     #8194      i64 0
    push           4          i64 
    casejumpeq     #8195      i64 0
    push           5          i64 
    casejumpeq     #8196      i64 0
    push           7          i64 
    casejumpeq     #8197      i64 0
    push           8          i64 
    casejumpeq     #8198      i64 0
    popstack                  i64 
    jump           #8199      
#8192: 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    jump           #8200      
#8193: 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callproc       &pc_stackmcl.freexreg 
    jump           #8200      
#8194: 
    jump           #8200      
#8195: 
    jump           #8200      
#8196: 
    jump           #8200      
#8197: 
    jump           #8200      
#8198: 
    jump           #8200      
#8199: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "POPARG:"  u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pci_mcl.locnames 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "****POPARG?" u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   2 0
    push           &pci_mcl.locnames 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    push           "poparg? #" u64 
    callproc       &pc_libmcl.merror 
#8200: 
    push           &pci_mcl.noperands 
    decr                      i64 1
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    pop            pci_mcl.pclstack u64 
#8201: 
    retproc                   
End


Proc pc_stackmcl.pushslots:
    param          pc_stackmcl.pushslots.nslots i64 
    procentry                 
    setargs                   1 0
    push           pc_stackmcl.pushslots.nslots i64 
    push           8          i64 
    mul                       i64 
    callproc       &pc_stackmcl.pushstack 
    push           &pci_mcl.mstackdepth 
    push           pc_stackmcl.pushslots.nslots i64 
    addto                     i64 
#8203: 
    retproc                   
End


Proc pc_stackmcl.popslots:
    param          pc_stackmcl.popslots.nslots i64 
    procentry                 
    setargs                   1 0
    push           pc_stackmcl.popslots.nslots i64 
    push           8          i64 
    mul                       i64 
    callproc       &pc_stackmcl.popstack 
    push           &pci_mcl.mstackdepth 
    push           pc_stackmcl.popslots.nslots i64 
    subto                     i64 
#8205: 
    retproc                   
End


Proc pc_stackmcl.pushstack:
    param          pc_stackmcl.pushstack.n i64 
    procentry                 
    push           pc_stackmcl.pushstack.n i64 
    jumpfalse      #8207      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.pushstack.n i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pci_mcl.dstackopnd u64 
    push           30         i64 
    callproc       &pc_libmcl.genmc 
#8207: 
#8208: 
    retproc                   
End


Proc pc_stackmcl.popstack:
    param          pc_stackmcl.popstack.n i64 
    procentry                 
    push           pc_stackmcl.popstack.n i64 
    jumpfalse      #8210      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.popstack.n i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pci_mcl.dstackopnd u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
#8210: 
#8211: 
    retproc                   
End


Proc pc_stackmcl.saveopnd:
    param          pc_stackmcl.saveopnd.n i64 
    local          pc_stackmcl.saveopnd.reg i64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.saveopnd.n i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8213      i64 0
    push           2          i64 
    casejumpeq     #8214      i64 0
    push           3          i64 
    casejumpeq     #8215      i64 0
    push           7          i64 
    casejumpeq     #8216      i64 0
    push           8          i64 
    casejumpeq     #8216      i64 0
    push           4          i64 
    casejumpeq     #8217      i64 0
    popstack                  i64 
    jump           #8218      
#8213: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.saveopnd.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_stackmcl.saveopnd.reg i64 
    push           pc_stackmcl.saveopnd.reg i64 
    push           1          i64 
    push           3          i64 
    jumpnotinrange #8219      i64 
    setargs                   1 0
    push           pc_stackmcl.saveopnd.n i64 
    callproc       &pc_stackmcl.pushopnd 
#8219: 
    jump           #8220      
#8214: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.saveopnd.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_stackmcl.saveopnd.reg i64 
    push           pc_stackmcl.saveopnd.reg i64 
    push           1          i64 
    push           6          i64 
    jumpnotinrange #8221      i64 
    setargs                   1 0
    push           pc_stackmcl.saveopnd.n i64 
    callproc       &pc_stackmcl.pushopnd 
#8221: 
    jump           #8220      
#8215: 
    jump           #8220      
#8216: 
    jump           #8220      
#8217: 
    setargs                   1 0
    push           pc_stackmcl.saveopnd.n i64 
    callproc       &pc_stackmcl.pushopnd 
    jump           #8220      
#8218: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.saveopnd.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           17         i64 
    casejumpeq     #8222      i64 0
    push           14         i64 
    casejumpeq     #8223      i64 0
    push           15         i64 
    casejumpeq     #8223      i64 0
    push           16         i64 
    casejumpeq     #8223      i64 0
    popstack                  i64 
    jump           #8224      
#8222: 
    setargs                   1 0
    push           pc_stackmcl.saveopnd.n i64 
    callproc       &pc_stackmcl.pushopnd 
    jump           #8225      
#8223: 
    setargs                   1 0
    push           pc_stackmcl.saveopnd.n i64 
    callproc       &pc_stackmcl.pushopnd 
    jump           #8225      
#8224: 
    setargs                   2 0
    push           &pci_mcl.fmtnames 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.saveopnd.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u64 8 0
    push           "Can't save opnd: #" u64 
    callproc       &pc_libmcl.merror 
#8225: 
#8220: 
#8226: 
    retproc                   
End


Proc pc_stackmcl.saveallopnds:
    param          pc_stackmcl.saveallopnds.n i64 
    local          pc_stackmcl.saveallopnds.i i64 
    procentry                 
#8228: 
    push           pci_mcl.noperands i64 
    pop            pc_stackmcl.saveallopnds.i i64 
    push           pc_stackmcl.saveallopnds.i i64 
    push           pc_stackmcl.saveallopnds.n i64 
    jumplt         #8229      i64 
#8230: 
    setargs                   1 0
    push           pc_stackmcl.saveallopnds.i i64 
    callproc       &pc_stackmcl.saveopnd 
#8231: 
    fordown        #8230      i64 1
    opnd           pc_stackmcl.saveallopnds.i 
    opnd           pc_stackmcl.saveallopnds.n 
#8229: 
#8232: 
    retproc                   
End


Proc pc_stackmcl.movetoreg:
    param          pc_stackmcl.movetoreg.newreg i64 
    local          pc_stackmcl.movetoreg.oldreg i64 
    procentry                 
    setargs                   2 0
    push           0          i64 
    push           1          i64 
    callproc       &pc_stackmcl.loadopnd 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_stackmcl.movetoreg.oldreg i64 
    push           pc_stackmcl.movetoreg.oldreg i64 
    push           pc_stackmcl.movetoreg.newreg i64 
    jumpne         #8234      i64 
    jump           #8235      
#8234: 
    push           &pci_mcl.regset 
    push           pc_stackmcl.movetoreg.newreg i64 
    pushptroff                u8 1 -1
    jumpfalse      #8236      i64 
    setargs                   2 0
    push           ""         u64 
    push           "movereg/reg in use" u64 
    callproc       &pc_libmcl.merror 
#8236: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.movetoreg.oldreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.movetoreg.newreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_stackmcl.movetoreg.oldreg i64 
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_stackmcl.movetoreg.oldreg i64 
    popptroff                 u8 1 -1
    push           pc_stackmcl.movetoreg.newreg i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    push           1          i64 
    push           &pci_mcl.regset 
    push           pc_stackmcl.movetoreg.newreg i64 
    popptroff                 u8 1 -1
    push           pc_stackmcl.movetoreg.newreg i64 
    push           11         i64 
    jumplt         #8237      i64 
    push           &pci_mcl.inf_highreg 
    push           pc_stackmcl.movetoreg.newreg i64 
    maxto                     i64 
#8237: 
#8235: 
    retproc                   
End


Proc pc_stackmcl.swapopnds:
    param          pc_stackmcl.swapopnds.m i64 
    param          pc_stackmcl.swapopnds.n i64 
    local          pc_stackmcl.swapopnds.t block:15 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.swapopnds.m i64 
    pushptroff                block:15 15 -15
    pop            pc_stackmcl.swapopnds.t block:15 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.swapopnds.n i64 
    pushptroff                block:15 15 -15
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.swapopnds.m i64 
    popptroff                 block:15 15 -15
    push           pc_stackmcl.swapopnds.t block:15 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.swapopnds.n i64 
    popptroff                 block:15 15 -15
#8239: 
    retproc                   
End


Proc pc_stackmcl.swapopndregs:
    param          pc_stackmcl.swapopndregs.reg2 i64 
    local          pc_stackmcl.swapopndregs.reg1 i64 
    local          pc_stackmcl.swapopndregs.i i64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_stackmcl.swapopndregs.reg1 i64 
#8241: 
    push           2          i64 
    pop            pc_stackmcl.swapopndregs.i i64 
    push           pci_mcl.noperands i64 
    push           2          i64 
    jumplt         #8242      i64 
#8243: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.swapopndregs.i i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8244      i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.swapopndregs.i i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    push           pc_stackmcl.swapopndregs.reg2 i64 
    jumpne         #8244      i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    addrefoff                 u64 1 0
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    addrefoff                 u64 1 0
    swap                      u8 
    jump           #8245      
#8244: 
#8246: 
    forup          #8243      i64 1
    opnd           pc_stackmcl.swapopndregs.i 
    opnd           pci_mcl.noperands 
#8242: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           pci_mcl.procdef u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           ""         u64 
    push           "swapopndregs/reg not found" u64 
    callproc       &pc_libmcl.merror 
#8247: 
#8245: 
    retproc                   
End


Proc pc_stackmcl.showopndstack:
    procentry                 
    setargs                   1 0
    setargs                   1 0
    push           1          i64 
    callfn         &pc_stackmcl.stropndstack u64 
    callproc       &pc_libmcl.mgencomment 
#8249: 
    retproc                   
End


Proc pc_genss.genss:
    local          pc_genss.genss.index i64 
    local          pc_genss.genss.m u64 
    procentry                 
    setargs                   1 0
    push           pci_mcl.mlabelno i64 
    callproc       &pc_genss.initlib 
    push           0          i64 
    pop            pci_mcl.ss_zdatalen i64 
    setargs                   1 0
    push           1024       i64 
    callfn         &pc_genss.buffercreate u64 
    pop            pci_mcl.ss_zdata u64 
    setargs                   1 0
    push           1024       i64 
    callfn         &pc_genss.buffercreate u64 
    pop            pci_mcl.ss_idata u64 
    setargs                   1 0
    push           1024       i64 
    callfn         &pc_genss.buffercreate u64 
    pop            pci_mcl.ss_code u64 
    push           0          u64 
    pop            pci_mcl.ss_idatarelocs u64 
    push           0          u64 
    pop            pci_mcl.ss_coderelocs u64 
    push           0          i64 
    pop            pci_mcl.ss_nsymbols i64 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_genss.switchseg 
    push           9999       i64 
    pop            pci_mcl.alineno i64 
    push           0          u64 
    pop            pc_genss.extraparam u64 
    setargs                   0 0
    callproc       &pc_genss.fixregvar 
    push           pci_mcl.mccode u64 
    pop            pc_genss.genss.m u64 
    push           0          i64 
    pop            pc_genss.genss.index i64 
    jump           #8251      
#8252: 
    setargs                   2 0
    push           &pc_genss.genss.index 
    incrload                  i64 1
    push           pc_genss.genss.m u64 
    callproc       &pc_genss.doinstr 
    push           pc_genss.genss.m u64 
    pushptr                   u64 
    pop            pc_genss.genss.m u64 
#8251: 
    push           pc_genss.genss.m u64 
    jumptrue       #8252      u64 
#8253: 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_genss.switchseg 
    setargs                   1 0
    push           pci_mcl.ss_zdata u64 
    callfn         &pc_genss.bufferlength i64 
    jumpfalse      #8254      i64 
    setargs                   1 0
    push           "Zdata contains code or data" u64 
    callproc       &pci_mcl.axerror 
#8254: 
#8255: 
    retproc                   
End


Proc pc_genss.doinstr:
    param          pc_genss.doinstr.m u64 
    param          pc_genss.doinstr.index i64 
    local          pc_genss.doinstr.a u64 
    local          pc_genss.doinstr.b u64 
    local          pc_genss.doinstr.d u64 
    local          pc_genss.doinstr.e u64 
    local          pc_genss.doinstr.x i64 
    local          pc_genss.doinstr.offset i64 
    local          pc_genss.doinstr.shortjmp i64 
    local          pc_genss.doinstr.n i64 
    local          pc_genss.doinstr.av_1 i64 
    local          pc_genss.doinstr.av_2 i64 
    procentry                 
    setargs                   2 0
    push           1024       i64 
    push           pc_genss.currdata u64 
    callproc       &pc_genss.buffercheck 
    push           0          i64 
    store          pc_genss.f3override i64 
    store          pc_genss.f2override i64 
    store          pc_genss.addroverride i64 
    store          pc_genss.sizeoverride i64 
    pop            pc_genss.rex i64 
    push           pc_genss.doinstr.m u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_genss.doinstr.a u64 
    push           pc_genss.doinstr.m u64 
    push           16         
    pushptroff                u64 1 0
    pop            pc_genss.doinstr.b u64 
    push           &pc_genss.instrno 
    incr                      i64 1
    push           pc_genss.instrno i64 
    pop            pci_mcl.alineno i64 
    push           pc_genss.doinstr.m u64 
    pop            pc_genss.currmcl u64 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    switch         #8257      1 148
    opnd           #8258      
#8257: 
    switchlabel    #8259      
    switchlabel    #8260      
    switchlabel    #8261      
    switchlabel    #8262      
    switchlabel    #8263      
    switchlabel    #8264      
    switchlabel    #8265      
    switchlabel    #8266      
    switchlabel    #8267      
    switchlabel    #8268      
    switchlabel    #8269      
    switchlabel    #8270      
    switchlabel    #8271      
    switchlabel    #8272      
    switchlabel    #8273      
    switchlabel    #8274      
    switchlabel    #8275      
    switchlabel    #8276      
    switchlabel    #8277      
    switchlabel    #8278      
    switchlabel    #8279      
    switchlabel    #8280      
    switchlabel    #8281      
    switchlabel    #8258      
    switchlabel    #8282      
    switchlabel    #8283      
    switchlabel    #8284      
    switchlabel    #8285      
    switchlabel    #8286      
    switchlabel    #8286      
    switchlabel    #8286      
    switchlabel    #8286      
    switchlabel    #8287      
    switchlabel    #8287      
    switchlabel    #8288      
    switchlabel    #8258      
    switchlabel    #8287      
    switchlabel    #8287      
    switchlabel    #8286      
    switchlabel    #8286      
    switchlabel    #8286      
    switchlabel    #8289      
    switchlabel    #8286      
    switchlabel    #8290      
    switchlabel    #8290      
    switchlabel    #8290      
    switchlabel    #8290      
    switchlabel    #8290      
    switchlabel    #8290      
    switchlabel    #8290      
    switchlabel    #8287      
    switchlabel    #8287      
    switchlabel    #8291      
    switchlabel    #8291      
    switchlabel    #8292      
    switchlabel    #8293      
    switchlabel    #8294      
    switchlabel    #8295      
    switchlabel    #8296      
    switchlabel    #8297      
    switchlabel    #8297      
    switchlabel    #8298      
    switchlabel    #8299      
    switchlabel    #8299      
    switchlabel    #8299      
    switchlabel    #8299      
    switchlabel    #8299      
    switchlabel    #8298      
    switchlabel    #8298      
    switchlabel    #8298      
    switchlabel    #8298      
    switchlabel    #8300      
    switchlabel    #8301      
    switchlabel    #8302      
    switchlabel    #8303      
    switchlabel    #8302      
    switchlabel    #8303      
    switchlabel    #8302      
    switchlabel    #8302      
    switchlabel    #8304      
    switchlabel    #8305      
    switchlabel    #8306      
    switchlabel    #8307      
    switchlabel    #8308      
    switchlabel    #8309      
    switchlabel    #8310      
    switchlabel    #8311      
    switchlabel    #8312      
    switchlabel    #8312      
    switchlabel    #8258      
    switchlabel    #8258      
    switchlabel    #8313      
    switchlabel    #8313      
    switchlabel    #8313      
    switchlabel    #8314      
    switchlabel    #8314      
    switchlabel    #8314      
    switchlabel    #8315      
    switchlabel    #8315      
    switchlabel    #8315      
    switchlabel    #8315      
    switchlabel    #8316      
    switchlabel    #8316      
    switchlabel    #8316      
    switchlabel    #8316      
    switchlabel    #8316      
    switchlabel    #8316      
    switchlabel    #8316      
    switchlabel    #8316      
    switchlabel    #8299      
    switchlabel    #8299      
    switchlabel    #8298      
    switchlabel    #8298      
    switchlabel    #8317      
    switchlabel    #8318      
    switchlabel    #8319      
    switchlabel    #8320      
    switchlabel    #8321      
    switchlabel    #8322      
    switchlabel    #8323      
    switchlabel    #8324      
    switchlabel    #8325      
    switchlabel    #8326      
    switchlabel    #8327      
    switchlabel    #8327      
    switchlabel    #8327      
    switchlabel    #8327      
    switchlabel    #8328      
    switchlabel    #8329      
    switchlabel    #8329      
    switchlabel    #8329      
    switchlabel    #8330      
    switchlabel    #8331      
    switchlabel    #8332      
    switchlabel    #8333      
    switchlabel    #8334      
    switchlabel    #8335      
    switchlabel    #8336      
    switchlabel    #8337      
    switchlabel    #8338      
    switchlabel    #8339      
    switchlabel    #8339      
    switchlabel    #8339      
    switchlabel    #8339      
    switchlabel    #8339      
    switchlabel    #8339      
    switchlabel    #8339      
    switchlabel    #8268      
    endswitch                 
#8259: 
    push           pc_genss.doinstr.m u64 
    push           8          
    pushptroff                u64 1 0
    pushptr                   u64 
    pop            pci_mcl.currasmproc u64 
    jump           #8340      
#8260: 
    jump           #8340      
#8265: 
    jump           #8340      
#8266: 
    jump           #8340      
#8263: 
    jump           #8340      
#8264: 
    push           pc_genss.doinstr.a u64 
    push           12         
    pushptroff                u8 1 0
    push           4          i64 
    casejumpeq     #8341      i64 0
    push           5          i64 
    casejumpeq     #8342      i64 0
    popstack                  i64 
    jump           #8343      
#8341: 
    jump           #8344      
#8342: 
    push           pc_genss.doinstr.a u64 
    pushptr                   u64 
    pop            pc_genss.doinstr.d u64 
    push           2          i64 
    push           pc_genss.doinstr.d u64 
    push           29         
    popptroff                 u8 1 0
    push           pc_genss.currseg i64 
    push           pc_genss.doinstr.d u64 
    push           30         
    popptroff                 u8 1 0
    setargs                   1 0
    push           6          i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           pc_genss.doinstr.d u64 
    push           32         
    popptroff                 i32 1 0
    push           pc_genss.doinstr.d u64 
    push           46         
    pushptroff                u16 1 0
    push           3          i64 
    dotindex                  i64 
    jumpfalse      #8345      u64 
    setargs                   1 0
    push           pc_genss.doinstr.d u64 
    callproc       &pc_genss.getstindex 
#8345: 
    setargs                   1 0
    push           pc_genss.doinstr.d u64 
    callproc       &pc_genss.dofwdrefs 
    jump           #8344      
#8343: 
#8344: 
    jump           #8340      
#8267: 
    push           pci_mcl.labeldeftable u64 
    push           pc_genss.doinstr.a u64 
    pushptr                   i64 
    pushptroff                u64 8 -8
    pop            pc_genss.doinstr.d u64 
    push           2          i64 
    push           pc_genss.doinstr.d u64 
    push           29         
    popptroff                 u8 1 0
    push           pc_genss.currseg i64 
    push           pc_genss.doinstr.d u64 
    push           30         
    popptroff                 u8 1 0
    setargs                   1 0
    push           6          i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           pc_genss.doinstr.d u64 
    push           32         
    popptroff                 i32 1 0
    setargs                   1 0
    push           pc_genss.doinstr.d u64 
    callproc       &pc_genss.dofwdrefs 
    jump           #8340      
#8280: 
    setargs                   1 0
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_call 
    jump           #8340      
#8283: 
    setargs                   2 0
    push           pc_genss.doinstr.m u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_jmp 
    jump           #8340      
#8284: 
    setargs                   2 0
    push           1          i64 
    push           pc_genss.doinstr.a u64 
    callfn         &pc_genss.getdef u64 
    pop            pc_genss.doinstr.d u64 
    setargs                   2 0
    setargs                   1 0
    push           7          i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           1          i64 
    add                       i64 
    push           pc_genss.doinstr.d u64 
    callfn         &pc_genss.getrel32 i64 
    pop            pc_genss.doinstr.offset i64 
    push           pc_genss.doinstr.offset i64 
    push           0          i64 
    jumpge         #8346      i64 
    push           pc_genss.doinstr.offset i64 
    push           -126       i64 
    jumpge         #8347      i64 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           128        i64 
    push           pc_genss.doinstr.m u64 
    push           25         
    pushptroff                u8 1 0
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.doinstr.offset i64 
    push           4          i64 
    sub                       i64 
    callproc       &pc_genss.gendword 
    jump           #8348      
#8347: 
    setargs                   1 0
    push           112        i64 
    push           pc_genss.doinstr.m u64 
    push           25         
    pushptroff                u8 1 0
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.doinstr.offset i64 
    callproc       &pc_genss.genbyte 
#8348: 
    jump           #8349      
#8346: 
    setargs                   2 0
    push           pc_genss.doinstr.d u64 
    push           pc_genss.doinstr.m u64 
    callfn         &pc_genss.checkshortjump i64 
    pop            pc_genss.doinstr.shortjmp i64 
    push           pc_genss.doinstr.shortjmp i64 
    jumptrue       #8350      i64 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           128        i64 
    push           pc_genss.doinstr.m u64 
    push           25         
    pushptroff                u8 1 0
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.genrel32 
    jump           #8351      
#8350: 
    setargs                   1 0
    push           112        i64 
    push           pc_genss.doinstr.m u64 
    push           25         
    pushptroff                u8 1 0
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.genrel8 
#8351: 
#8349: 
    jump           #8340      
#8317: 
    setargs                   2 0
    push           1          i64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.genopnd 
    jump           #8340      
#8318: 
    setargs                   2 0
    push           2          i64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.genopnd 
    jump           #8340      
#8319: 
    setargs                   2 0
    push           4          i64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.genopnd 
    jump           #8340      
#8320: 
    setargs                   2 0
    push           8          i64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.genopnd 
    jump           #8340      
#8321: 
    setargs                   1 0
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.genrel32 
    jump           #8340      
#8322: 
    setargs                   1 0
    push           pc_genss.doinstr.a u64 
    pushptr                   i64 
    callproc       &pc_genss.switchseg 
    jump           #8340      
#8325: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_genss.switchseg 
    jump           #8340      
#8323: 
    setargs                   1 0
    push           2          i64 
    callproc       &pc_genss.switchseg 
    jump           #8340      
#8324: 
    setargs                   1 0
    push           3          i64 
    callproc       &pc_genss.switchseg 
    jump           #8340      
#8268: 
    setargs                   1 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    callproc       &pc_genss.genbyte 
    jump           #8340      
#8292: 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           152        i64 
    callproc       &pc_genss.genbyte 
    jump           #8340      
#8293: 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           153        i64 
    callproc       &pc_genss.genbyte 
    jump           #8340      
#8294: 
    setargs                   1 0
    push           153        i64 
    callproc       &pc_genss.genbyte 
    jump           #8340      
#8295: 
    setargs                   1 0
    push           72         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           153        i64 
    callproc       &pc_genss.genbyte 
    jump           #8340      
#8281: 
    setargs                   1 0
    push           195        i64 
    callproc       &pc_genss.genbyte 
    jump           #8340      
#8282: 
    push           pc_genss.doinstr.a u64 
    push           9          
    pushptroff                u8 1 0
    push           2          i64 
    jumpeq         #8352      i64 
    setargs                   1 0
    push           "retn?"    u64 
    callproc       &pci_mcl.axerror 
#8352: 
    setargs                   1 0
    push           194        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.doinstr.a u64 
    pushptr                   i64 
    callproc       &pc_genss.genword 
    jump           #8340      
#8271: 
    setargs                   1 0
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_push 
    jump           #8340      
#8272: 
    setargs                   1 0
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_pop 
    jump           #8340      
#8291: 
    setargs                   2 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_inc 
    jump           #8340      
#8287: 
    setargs                   2 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_neg 
    jump           #8340      
#8286: 
    setargs                   3 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_arith 
    jump           #8340      
#8270: 
    setargs                   2 0
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_mov 
    jump           #8340      
#8273: 
    setargs                   2 0
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_lea 
    jump           #8340      
#8277: 
    setargs                   3 0
    push           190        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_movsx 
    jump           #8340      
#8278: 
    setargs                   3 0
    push           182        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_movsx 
    jump           #8340      
#8279: 
    setargs                   2 0
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_movsxd 
    jump           #8340      
#8285: 
    setargs                   2 0
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_exch 
    jump           #8340      
#8288: 
    setargs                   2 0
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_imul2 
    jump           #8340      
#8327: 
    push           pc_genss.doinstr.a u64 
    push           9          
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #8353      i64 
    push           pc_genss.doinstr.a u64 
    pushptr                   i64 
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    mul                       i64 
    pop            pc_genss.doinstr.n i64 
    push           pc_genss.currseg i64 
    push           1          i64 
    casejumpeq     #8354      i64 0
    push           2          i64 
    casejumpeq     #8355      i64 0
    popstack                  i64 
    jump           #8356      
#8354: 
#8357: 
    push           pc_genss.doinstr.n i64 
    pop            pc_genss.doinstr.av_1 i64 
    push           pc_genss.doinstr.av_1 i64 
    push           0          i64 
    jumple         #8358      i64 
#8359: 
    setargs                   1 0
    push           144        i64 
    callproc       &pc_genss.genbyte 
#8360: 
    to             #8359      
    opnd           pc_genss.doinstr.av_1 
#8358: 
    jump           #8361      
#8355: 
#8362: 
    push           pc_genss.doinstr.n i64 
    pop            pc_genss.doinstr.av_2 i64 
    push           pc_genss.doinstr.av_2 i64 
    push           0          i64 
    jumple         #8363      i64 
#8364: 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_genss.genbyte 
#8365: 
    to             #8364      
    opnd           pc_genss.doinstr.av_2 
#8363: 
    jump           #8361      
#8356: 
    push           &pci_mcl.ss_zdatalen 
    push           pc_genss.doinstr.n i64 
    addto                     i64 
#8361: 
    jump           #8366      
#8353: 
    setargs                   1 0
    push           "resb?"    u64 
    callproc       &pci_mcl.axerror 
#8366: 
    jump           #8340      
#8326: 
    push           pc_genss.doinstr.a u64 
    push           9          
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #8367      i64 
    push           pc_genss.doinstr.a u64 
    pushptr                   i64 
    pop            pc_genss.doinstr.x i64 
    push           pc_genss.doinstr.x i64 
    push           1          i64 
    jumplt         #8368      i64 
    push           pc_genss.doinstr.x i64 
    push           16384      i64 
    jumple         #8369      i64 
#8368: 
    setargs                   1 0
    push           "align2"   u64 
    callproc       &pci_mcl.axerror 
#8369: 
    push           pc_genss.currseg i64 
    push           3          i64 
    jumpeq         #8370      i64 
    jump           #8371      
#8372: 
    setargs                   1 0
    startmult                 
    push           pc_genss.currseg i64 
    push           1          i64 
    jumpne         #8373      i64 
    push           144        i64 
    resetmult                 
    jump           #8374      
#8373: 
    push           0          i64 
    endmult                   
#8374: 
    callproc       &pc_genss.genbyte 
#8371: 
    setargs                   1 0
    push           pc_genss.currdata u64 
    callfn         &pc_genss.bufferlength i64 
    push           pc_genss.doinstr.x i64 
    irem                      i64 
    jumptrue       #8372      i64 
#8375: 
    jump           #8376      
#8370: 
    jump           #8377      
#8378: 
    push           &pci_mcl.ss_zdatalen 
    incr                      i64 1
#8377: 
    push           pci_mcl.ss_zdatalen i64 
    push           pc_genss.doinstr.x i64 
    irem                      i64 
    jumptrue       #8378      i64 
#8379: 
#8376: 
    jump           #8380      
#8367: 
    setargs                   1 0
    push           "align?"   u64 
    callproc       &pci_mcl.axerror 
#8380: 
    jump           #8340      
#8290: 
    setargs                   3 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_shift 
    jump           #8340      
#8289: 
    setargs                   2 0
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_test 
    jump           #8340      
#8329: 
    setargs                   2 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_loop 
    jump           #8340      
#8330: 
    setargs                   2 0
    push           4          i64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_jcxz 
    jump           #8340      
#8331: 
    setargs                   2 0
    push           8          i64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_jcxz 
    jump           #8340      
#8328: 
    setargs                   1 0
    push           215        i64 
    callproc       &pc_genss.genbyte 
    jump           #8340      
#8296: 
    setargs                   2 0
    push           pc_genss.doinstr.a u64 
    push           pc_genss.doinstr.m u64 
    push           25         
    pushptroff                u8 1 0
    callproc       &pc_genss.do_setcc 
    jump           #8340      
#8275: 
    setargs                   3 0
    push           4          i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_movxmm 
    jump           #8340      
#8276: 
    setargs                   3 0
    push           8          i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_movxmm 
    jump           #8340      
#8299: 
    setargs                   4 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           243        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_arithxmm 
    jump           #8340      
#8298: 
    setargs                   4 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           242        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_arithxmm 
    jump           #8340      
#8303: 
    setargs                   4 0
    push           4          i64 
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_logicxmm 
    jump           #8340      
#8302: 
    setargs                   4 0
    push           8          i64 
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_logicxmm 
    jump           #8340      
#8300: 
    setargs                   4 0
    push           47         i64 
    push           0          i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_arithxmm 
    jump           #8340      
#8301: 
    setargs                   4 0
    push           47         i64 
    push           102        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_arithxmm 
    jump           #8340      
#8311: 
    setargs                   3 0
    push           243        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_convertfloat 
    jump           #8340      
#8310: 
    setargs                   3 0
    push           242        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_convertfloat 
    jump           #8340      
#8304: 
    setargs                   4 0
    push           45         i64 
    push           243        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_fix 
    jump           #8340      
#8305: 
    setargs                   4 0
    push           45         i64 
    push           242        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_fix 
    jump           #8340      
#8306: 
    setargs                   4 0
    push           44         i64 
    push           243        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_fix 
    jump           #8340      
#8307: 
    setargs                   4 0
    push           44         i64 
    push           242        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_fix 
    jump           #8340      
#8308: 
    setargs                   3 0
    push           243        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_float 
    jump           #8340      
#8309: 
    setargs                   3 0
    push           242        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_float 
    jump           #8340      
#8269: 
    push           pc_genss.doinstr.a u64 
    pop            pc_genss.extraparam u64 
    jump           #8340      
#8274: 
    setargs                   3 0
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    push           pc_genss.doinstr.m u64 
    push           25         
    pushptroff                u8 1 0
    callproc       &pc_genss.do_cmovcc 
    jump           #8340      
#8316: 
    setargs                   1 0
    push           217        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    callproc       &pc_genss.genbyte 
    jump           #8340      
#8313: 
    setargs                   3 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           1          i64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_fmem 
    jump           #8340      
#8314: 
    setargs                   3 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           0          i64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_fmem 
    jump           #8340      
#8315: 
    setargs                   1 0
    push           222        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    callproc       &pc_genss.genbyte 
    jump           #8340      
#8332: 
    setargs                   1 0
    push           166        i64 
    callproc       &pc_genss.genbyte 
    jump           #8340      
#8333: 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           167        i64 
    callproc       &pc_genss.genbyte 
    jump           #8340      
#8334: 
    setargs                   1 0
    push           167        i64 
    callproc       &pc_genss.genbyte 
    jump           #8340      
#8335: 
    setargs                   1 0
    push           72         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           167        i64 
    callproc       &pc_genss.genbyte 
    jump           #8340      
#8336: 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    callproc       &pc_genss.genbyte 
    jump           #8340      
#8312: 
    setargs                   3 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_movdqx 
    jump           #8340      
#8338: 
    setargs                   1 0
    push           219        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           227        i64 
    callproc       &pc_genss.genbyte 
    jump           #8340      
#8339: 
    setargs                   1 0
    push           217        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    callproc       &pc_genss.genbyte 
    jump           #8340      
#8337: 
    setargs                   2 0
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_popcnt 
    jump           #8340      
#8297: 
    setargs                   3 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_bsf 
    jump           #8340      
#8261: 
    jump           #8340      
#8262: 
    jump           #8340      
#8258: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "*** Can't do opcode" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pci_mcl.mclnames 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "line"     u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.alineno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           "M.OPCODE=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           "M_HALT="  u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           148        i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "STOPPING" u64 
    callproc       &pci_mcl.axerror 
#8340: 
#8381: 
    retproc                   
End


Proc pc_genss.genbyte:
    param          pc_genss.genbyte.x i64 
    procentry                 
    push           pc_genss.genbyte.x i64 
    push           pc_genss.currdata u64 
    push           8          
    addrefoff                 u64 1 0
    loadincr                  u64 1
    popptr                    u8 
#8383: 
    retproc                   
End


Proc pc_genss.genword:
    param          pc_genss.genword.x i64 
    procentry                 
    setargs                   2 0
    push           pc_genss.genword.x i64 
    push           pc_genss.currdata u64 
    callproc       &pc_genss.addword 
#8385: 
    retproc                   
End


Proc pc_genss.gendword:
    param          pc_genss.gendword.x i64 
    procentry                 
    setargs                   2 0
    push           pc_genss.gendword.x i64 
    push           pc_genss.currdata u64 
    callproc       &pc_genss.adddword 
#8387: 
    retproc                   
End


Proc pc_genss.genqword:
    param          pc_genss.genqword.x i64 
    procentry                 
    setargs                   2 0
    push           pc_genss.genqword.x i64 
    push           pc_genss.currdata u64 
    callproc       &pc_genss.addqword 
#8389: 
    retproc                   
End


Proc pc_genss.genopnd:
    param          pc_genss.genopnd.a u64 
    param          pc_genss.genopnd.size i64 
    local          pc_genss.genopnd.s u64 
    local          pc_genss.genopnd.x i64 
    local          pc_genss.genopnd.length i64 
    local          pc_genss.genopnd.x32 r32 
    procentry                 
    push           pc_genss.genopnd.size i64 
    push           0          i64 
    jumpne         #8391      i64 
    push           pc_genss.genopnd.a u64 
    push           8          
    pushptroff                u8 1 0
    pop            pc_genss.genopnd.size i64 
#8391: 
    push           pc_genss.genopnd.a u64 
    push           12         
    pushptroff                u8 1 0
    push           4          i64 
    casejumpeq     #8392      i64 0
    push           8          i64 
    casejumpeq     #8393      i64 0
    popstack                  i64 
    jump           #8394      
#8392: 
    push           pc_genss.genopnd.a u64 
    pushptr                   u64 
    pop            pc_genss.genopnd.s u64 
    setargs                   1 0
    push           pc_genss.genopnd.s u64 
    callfn         &strlen    i64 
    pop            pc_genss.genopnd.length i64 
    push           pc_genss.genopnd.length i64 
    push           100        i64 
    jumple         #8395      i64 
    setargs                   2 0
    push           1024       i64 
    push           pc_genss.genopnd.length i64 
    push           1          i64 
    add                       i64 
    max                       i64 
    push           pc_genss.currdata u64 
    callproc       &pc_genss.buffercheck 
#8395: 
    jump           #8396      
#8397: 
    setargs                   1 0
    push           &pc_genss.genopnd.s 
    loadincr                  u64 1
    pushptr                   u8 
    callproc       &pc_genss.genbyte 
#8396: 
    push           pc_genss.genopnd.s u64 
    pushptr                   u8 
    jumptrue       #8397      u64 
#8398: 
    jump           #8399      
    jump           #8400      
#8393: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "GENSS/NAME OPND" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #8400      
#8394: 
#8400: 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.genopnd.a u64 
    callfn         &pc_genss.getdef u64 
    jumpfalse      #8401      u64 
    push           pc_genss.genopnd.size i64 
    push           2          i64 
    jumpgt         #8401      i64 
    setargs                   1 0
    push           "8/16-BIT RELOC" u64 
    callproc       &pci_mcl.axerror 
#8401: 
    push           pc_genss.genopnd.size i64 
    push           1          i64 
    casejumpeq     #8402      i64 0
    push           2          i64 
    casejumpeq     #8403      i64 0
    push           4          i64 
    casejumpeq     #8404      i64 0
    push           8          i64 
    casejumpeq     #8405      i64 0
    popstack                  i64 
    jump           #8406      
#8402: 
    setargs                   1 0
    push           pc_genss.genopnd.a u64 
    pushptr                   i64 
    callproc       &pc_genss.genbyte 
    jump           #8407      
#8403: 
    setargs                   1 0
    push           pc_genss.genopnd.a u64 
    pushptr                   i64 
    callproc       &pc_genss.genword 
    jump           #8407      
#8404: 
    push           pc_genss.genopnd.a u64 
    push           12         
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8408      i64 0
    push           2          i64 
    casejumpeq     #8409      i64 0
    push           3          i64 
    casejumpeq     #8410      i64 0
    push           4          i64 
    casejumpeq     #8411      i64 0
    push           5          i64 
    casejumpeq     #8412      i64 0
    push           7          i64 
    casejumpeq     #8412      i64 0
    push           8          i64 
    casejumpeq     #8413      i64 0
    popstack                  i64 
    jump           #8414      
#8408: 
    setargs                   1 0
    push           pc_genss.genopnd.a u64 
    pushptr                   i64 
    callproc       &pc_genss.gendword 
    jump           #8415      
#8409: 
    push           pc_genss.genopnd.a u64 
    pushptr                   r64 
    fnarrow                   r32 r64 
    pop            pc_genss.genopnd.x32 r32 
    setargs                   1 0
    push           pc_genss.genopnd.x32 r32 
    typepun                   i32 void 0
    callproc       &pc_genss.gendword 
    jump           #8415      
#8410: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "\t\tOPND/REALMEM4" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #8415      
#8411: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "\t\tOPND/STRINGIMM4" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #8415      
#8412: 
    setargs                   1 0
    push           pc_genss.genopnd.a u64 
    callproc       &pc_genss.genabs32 
    jump           #8415      
#8413: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "\t\tOPND/NAME4" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #8415      
#8414: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pci_mcl.valtypenames 
    push           pc_genss.genopnd.a u64 
    push           12         
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "OPND/4/VALTYPE?" u64 
    callproc       &pci_mcl.axerror 
#8415: 
    jump           #8407      
#8405: 
    push           pc_genss.genopnd.a u64 
    push           12         
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8416      i64 0
    push           2          i64 
    casejumpeq     #8417      i64 0
    push           3          i64 
    casejumpeq     #8418      i64 0
    push           4          i64 
    casejumpeq     #8419      i64 0
    push           5          i64 
    casejumpeq     #8420      i64 0
    push           7          i64 
    casejumpeq     #8420      i64 0
    push           8          i64 
    casejumpeq     #8421      i64 0
    popstack                  i64 
    jump           #8422      
#8416: 
    setargs                   1 0
    push           pc_genss.genopnd.a u64 
    pushptr                   i64 
    callproc       &pc_genss.genqword 
    jump           #8423      
#8417: 
    setargs                   1 0
    push           pc_genss.genopnd.a u64 
    pushptr                   r64 
    typepun                   i64 void 0
    callproc       &pc_genss.genqword 
    jump           #8423      
#8418: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "\t\tOPND/REALMEM8" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.alineno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #8423      
#8419: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "\t\tOPND/STRINGIMM8" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #8423      
#8420: 
    setargs                   1 0
    push           pc_genss.genopnd.a u64 
    callproc       &pc_genss.genabs64 
    jump           #8423      
#8421: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "\t\tOPND/NAME8" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #8423      
#8422: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "HERE"     u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pci_mcl.valtypenames 
    push           pc_genss.genopnd.a u64 
    push           12         
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "OPND/8/VALTYPE?" u64 
    callproc       &pci_mcl.axerror 
#8423: 
    jump           #8407      
#8406: 
#8407: 
#8399: 
    retproc                   
End


Proc pc_genss.addrelocitem:
    param          pc_genss.addrelocitem.reloctype i64 
    param          pc_genss.addrelocitem.d u64 
    local          pc_genss.addrelocitem.r u64 
    local          pc_genss.addrelocitem.stindex i64 
    local          pc_genss.addrelocitem.adjust i64 
    procentry                 
    setargs                   1 0
    push           pc_genss.addrelocitem.d u64 
    callfn         &pc_genss.getstindex i64 
    pop            pc_genss.addrelocitem.stindex i64 
    push           4          i64 
    pop            pc_genss.addrelocitem.adjust i64 
    push           pc_genss.addrelocitem.reloctype i64 
    push           1          i64 
    jumpne         #8425      i64 
    push           8          i64 
    pop            pc_genss.addrelocitem.adjust i64 
#8425: 
    setargs                   1 0
    push           32         i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pc_genss.addrelocitem.r u64 
    push           pc_genss.currrelocs u64 
    push           pc_genss.addrelocitem.r u64 
    push           0          
    popptroff                 u64 1 0
    push           pc_genss.addrelocitem.reloctype i64 
    push           pc_genss.addrelocitem.r u64 
    push           8          
    popptroff                 i64 1 0
    setargs                   1 0
    push           1          i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           pc_genss.addrelocitem.adjust i64 
    sub                       i64 
    push           pc_genss.addrelocitem.r u64 
    push           16         
    popptroff                 i64 1 0
    push           pc_genss.addrelocitem.stindex i64 
    push           pc_genss.addrelocitem.r u64 
    push           24         
    popptroff                 i64 1 0
    push           &pc_genss.nrelocs 
    incr                      i64 1
    push           pc_genss.addrelocitem.r u64 
    pop            pc_genss.currrelocs u64 
#8426: 
    retproc                   
End


Proc pc_genss.getstindex: i64
    param          pc_genss.getstindex.d u64 
    procentry                 
    push           pc_genss.getstindex.d u64 
    push           36         
    pushptroff                i32 1 0
    push           0          i64 
    jumpne         #8428      i64 
    push           pci_mcl.ss_nsymbols i64 
    push           pci_mcl.ss_symboltablesize i64 
    jumplt         #8429      i64 
    setargs                   0 0
    callproc       &pc_genss.extendsymboltable 
#8429: 
    push           &pci_mcl.ss_nsymbols 
    incrload                  i64 1
    push           pc_genss.getstindex.d u64 
    push           36         
    popptroff                 i32 1 0
    push           pc_genss.getstindex.d u64 
    push           pci_mcl.ss_symboltable u64 
    push           pc_genss.getstindex.d u64 
    push           36         
    pushptroff                i32 1 0
    popptroff                 u64 8 -8
    push           pc_genss.getstindex.d u64 
    push           30         
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #8430      i64 
    push           pc_genss.getstindex.d u64 
    push           46         
    pushptroff                u16 1 0
    push           1          i64 
    dotindex                  i64 
    jumpfalse      #8431      u64 
    push           1          i64 
    push           pc_genss.getstindex.d u64 
    push           30         
    popptroff                 u8 1 0
#8431: 
#8430: 
#8428: 
    push           pc_genss.getstindex.d u64 
    push           36         
    pushptroff                i32 1 0
    setret                    i64 
    jump           #8432      
#8432: 
    retfn                     i64 
End


Proc pc_genss.genrel32:
    param          pc_genss.genrel32.a u64 
    local          pc_genss.genrel32.d u64 
    procentry                 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.genrel32.a u64 
    callfn         &pc_genss.getdef u64 
    pop            pc_genss.genrel32.d u64 
    push           pc_genss.genrel32.d u64 
    push           0          u64 
    jumpne         #8434      u64 
    setargs                   1 0
    push           pc_genss.genrel32.a u64 
    pushptr                   i64 
    callproc       &pc_genss.gendword 
    jump           #8435      
#8434: 
    push           pc_genss.genrel32.d u64 
    push           29         
    pushptroff                u8 1 0
    push           2          i64 
    casejumpeq     #8436      i64 0
    push           1          i64 
    casejumpeq     #8437      i64 0
    popstack                  i64 
    jump           #8438      
#8436: 
    push           pc_genss.genrel32.d u64 
    push           30         
    pushptroff                u8 1 0
    push           pc_genss.currseg i64 
    jumpeq         #8439      i64 
    setargs                   1 0
    push           "Rel label across segments" u64 
    callproc       &pci_mcl.axerror 
#8439: 
    setargs                   1 0
    push           pc_genss.genrel32.d u64 
    push           32         
    pushptroff                i32 1 0
    setargs                   1 0
    push           2          i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           4          i64 
    add                       i64 
    sub                       i64 
    push           pc_genss.genrel32.a u64 
    push           14         
    pushptroff                i32 1 0
    add                       i64 
    callproc       &pc_genss.gendword 
    jump           #8440      
#8437: 
    setargs                   4 0
    push           0          i64 
    push           4          i64 
    setargs                   1 0
    push           3          i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           pc_genss.genrel32.d u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_genss.addfwdref u64 
    push           pc_genss.genrel32.d u64 
    push           8          
    popptroff                 u64 1 0
    setargs                   1 0
    push           pc_genss.genrel32.a u64 
    push           14         
    pushptroff                i32 1 0
    callproc       &pc_genss.gendword 
    jump           #8440      
#8438: 
    setargs                   1 0
    push           pc_genss.genrel32.a u64 
    push           14         
    pushptroff                i32 1 0
    callproc       &pc_genss.gendword 
    setargs                   2 0
    push           pc_genss.genrel32.d u64 
    push           4          i64 
    callproc       &pc_genss.addrelocitem 
#8440: 
#8435: 
    retproc                   
End


Proc pc_genss.getdef: u64
    param          pc_genss.getdef.a u64 
    param          pc_genss.getdef.dneeded i64 
    local          pc_genss.getdef.d u64 
    procentry                 
    push           pc_genss.getdef.a u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    setjumpeq      #8442      i64 
    push           2          i64 
    setjumpne      #8443      i64 
#8442: 
    push           pc_genss.getdef.a u64 
    push           12         
    pushptroff                u8 1 0
    push           7          i64 
    casejumpeq     #8444      i64 0
    push           5          i64 
    casejumpeq     #8445      i64 0
    popstack                  i64 
    jump           #8446      
#8444: 
    push           pci_mcl.labeldeftable u64 
    push           pc_genss.getdef.a u64 
    pushptr                   i64 
    pushptroff                u64 8 -8
    setret                    u64 
    jump           #8447      
    jump           #8448      
#8445: 
    push           pc_genss.getdef.a u64 
    pushptr                   u64 
    pop            pc_genss.getdef.d u64 
    push           pc_genss.getdef.d u64 
    push           29         
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #8449      i64 
    push           pc_genss.getdef.d u64 
    push           46         
    pushptroff                u16 1 0
    push           1          i64 
    dotindex                  i64 
    jumptrue       #8450      u64 
    push           1          i64 
    push           pc_genss.getdef.d u64 
    push           29         
    popptroff                 u8 1 0
#8450: 
#8449: 
    push           pc_genss.getdef.d u64 
    setret                    u64 
    jump           #8447      
    jump           #8448      
#8446: 
#8448: 
#8443: 
    push           pc_genss.getdef.dneeded i64 
    jumpfalse      #8451      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pci_mcl.opndnames_ma 
    push           pc_genss.getdef.a u64 
    push           9          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pci_mcl.valtypenames 
    push           pc_genss.getdef.a u64 
    push           12         
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "getdef/no def" u64 
    callproc       &pci_mcl.axerror 
#8451: 
    push           0          u64 
    setret                    u64 
    jump           #8447      
#8447: 
    retfn                     u64 
End


Proc pc_genss.genabs32:
    param          pc_genss.genabs32.a u64 
    local          pc_genss.genabs32.d u64 
    procentry                 
    setargs                   2 0
    push           1          i64 
    push           pc_genss.genabs32.a u64 
    callfn         &pc_genss.getdef u64 
    pop            pc_genss.genabs32.d u64 
    push           pc_genss.genabs32.d u64 
    push           29         
    pushptroff                u8 1 0
    push           2          i64 
    casejumpeq     #8453      i64 0
    push           1          i64 
    casejumpeq     #8454      i64 0
    popstack                  i64 
    jump           #8455      
#8453: 
    setargs                   1 0
    push           pc_genss.genabs32.d u64 
    push           32         
    pushptroff                i32 1 0
    push           pc_genss.genabs32.a u64 
    push           14         
    pushptroff                i32 1 0
    add                       i64 
    callproc       &pc_genss.gendword 
    setargs                   2 0
    push           pc_genss.genabs32.d u64 
    push           2          i64 
    callproc       &pc_genss.addrelocitem 
    jump           #8456      
#8454: 
    setargs                   4 0
    push           pc_genss.currseg i64 
    push           2          i64 
    setargs                   1 0
    push           4          i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           pc_genss.genabs32.d u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_genss.addfwdref u64 
    push           pc_genss.genabs32.d u64 
    push           8          
    popptroff                 u64 1 0
    push           pc_genss.genabs32.d u64 
    push           16         
    pushptroff                u64 1 0
    jumpfalse      #8457      u64 
    push           pc_genss.genabs32.d u64 
    push           16         
    pushptroff                u64 1 0
    push           1          
    pushptroff                u8 1 0
    push           18         i64 
    setjumpeq      #8458      i64 
    push           19         i64 
    setjumpne      #8457      i64 
#8458: 
    setargs                   1 0
    push           pc_genss.genabs32.d u64 
    push           32         
    pushptroff                i32 1 0
    push           pc_genss.genabs32.a u64 
    push           14         
    pushptroff                i32 1 0
    add                       i64 
    callproc       &pc_genss.gendword 
    jump           #8459      
#8457: 
    setargs                   1 0
    push           pc_genss.genabs32.a u64 
    push           14         
    pushptroff                i32 1 0
    callproc       &pc_genss.gendword 
    setargs                   2 0
    push           pc_genss.genabs32.d u64 
    push           2          i64 
    callproc       &pc_genss.addrelocitem 
#8459: 
    jump           #8456      
#8455: 
    setargs                   1 0
    push           pc_genss.genabs32.a u64 
    push           14         
    pushptroff                i32 1 0
    callproc       &pc_genss.gendword 
    setargs                   2 0
    push           pc_genss.genabs32.d u64 
    push           2          i64 
    callproc       &pc_genss.addrelocitem 
#8456: 
#8460: 
    retproc                   
End


Proc pc_genss.genabs64:
    param          pc_genss.genabs64.a u64 
    local          pc_genss.genabs64.d u64 
    procentry                 
    setargs                   2 0
    push           1          i64 
    push           pc_genss.genabs64.a u64 
    callfn         &pc_genss.getdef u64 
    pop            pc_genss.genabs64.d u64 
    push           pc_genss.genabs64.d u64 
    push           29         
    pushptroff                u8 1 0
    push           2          i64 
    casejumpeq     #8462      i64 0
    push           1          i64 
    casejumpeq     #8463      i64 0
    popstack                  i64 
    jump           #8464      
#8462: 
    setargs                   1 0
    push           pc_genss.genabs64.d u64 
    push           32         
    pushptroff                i32 1 0
    push           pc_genss.genabs64.a u64 
    push           14         
    pushptroff                i32 1 0
    add                       i64 
    callproc       &pc_genss.genqword 
    setargs                   2 0
    push           pc_genss.genabs64.d u64 
    push           1          i64 
    callproc       &pc_genss.addrelocitem 
    jump           #8465      
#8463: 
    setargs                   4 0
    push           pc_genss.currseg i64 
    push           1          i64 
    setargs                   1 0
    push           5          i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           pc_genss.genabs64.d u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_genss.addfwdref u64 
    push           pc_genss.genabs64.d u64 
    push           8          
    popptroff                 u64 1 0
    push           pc_genss.genabs64.d u64 
    push           16         
    pushptroff                u64 1 0
    jumpfalse      #8466      u64 
    push           pc_genss.genabs64.d u64 
    push           16         
    pushptroff                u64 1 0
    push           1          
    pushptroff                u8 1 0
    push           18         i64 
    setjumpeq      #8467      i64 
    push           19         i64 
    setjumpne      #8466      i64 
#8467: 
    setargs                   1 0
    push           pc_genss.genabs64.d u64 
    push           32         
    pushptroff                i32 1 0
    push           pc_genss.genabs64.a u64 
    push           14         
    pushptroff                i32 1 0
    add                       i64 
    callproc       &pc_genss.genqword 
    jump           #8468      
#8466: 
    setargs                   1 0
    push           pc_genss.genabs64.a u64 
    push           14         
    pushptroff                i32 1 0
    callproc       &pc_genss.genqword 
    setargs                   2 0
    push           pc_genss.genabs64.d u64 
    push           1          i64 
    callproc       &pc_genss.addrelocitem 
#8468: 
    jump           #8465      
#8464: 
    setargs                   1 0
    push           pc_genss.genabs64.a u64 
    push           14         
    pushptroff                i32 1 0
    callproc       &pc_genss.genqword 
    setargs                   2 0
    push           pc_genss.genabs64.d u64 
    push           1          i64 
    callproc       &pc_genss.addrelocitem 
#8465: 
#8469: 
    retproc                   
End


Proc pc_genss.getrel32: i64
    param          pc_genss.getrel32.d u64 
    param          pc_genss.getrel32.offset i64 
    procentry                 
    startmult                 
    push           pc_genss.getrel32.d u64 
    push           29         
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #8471      i64 
    push           pc_genss.getrel32.d u64 
    push           30         
    pushptroff                u8 1 0
    push           pc_genss.currseg i64 
    jumpeq         #8472      i64 
    setargs                   1 0
    push           "Rel label across segments2" u64 
    callproc       &pci_mcl.axerror 
#8472: 
    push           pc_genss.getrel32.d u64 
    push           32         
    pushptroff                i32 1 0
    push           pc_genss.getrel32.offset i64 
    push           1          i64 
    add                       i64 
    sub                       i64 
    resetmult                 
    jump           #8473      
#8471: 
    push           2147483647 i64 
    endmult                   
#8473: 
    setret                    i64 
    jump           #8474      
#8474: 
    retfn                     i64 
End


Proc pc_genss.dofwdrefs:
    param          pc_genss.dofwdrefs.d u64 
    local          pc_genss.dofwdrefs.f u64 
    local          pc_genss.dofwdrefs.offset i64 
    local          pc_genss.dofwdrefs.seg i64 
    local          pc_genss.dofwdrefs.p8 u64 
    local          pc_genss.dofwdrefs.p32 u64 
    local          pc_genss.dofwdrefs.p64 u64 
    local          pc_genss.dofwdrefs.data u64 
    procentry                 
    push           pc_genss.dofwdrefs.d u64 
    push           8          
    pushptroff                u64 1 0
    push           0          u64 
    jumpne         #8476      u64 
    jump           #8477      
#8476: 
    push           pc_genss.dofwdrefs.d u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_genss.dofwdrefs.f u64 
    jump           #8478      
#8479: 
    push           pc_genss.dofwdrefs.f u64 
    push           8          
    pushptroff                i32 1 0
    pop            pc_genss.dofwdrefs.offset i64 
    push           pc_genss.dofwdrefs.f u64 
    push           12         
    pushptroff                i16 1 0
    push           4          i64 
    casejumpeq     #8480      i64 0
    push           2          i64 
    casejumpeq     #8481      i64 0
    push           1          i64 
    casejumpeq     #8481      i64 0
    push           6          i64 
    casejumpeq     #8482      i64 0
    popstack                  i64 
    jump           #8483      
#8480: 
    setargs                   2 0
    push           pc_genss.dofwdrefs.offset i64 
    push           pc_genss.currdata u64 
    callfn         &pc_genss.bufferelemptr u64 
    pop            pc_genss.dofwdrefs.p32 u64 
    push           pc_genss.dofwdrefs.d u64 
    push           32         
    pushptroff                i32 1 0
    push           pc_genss.dofwdrefs.offset i64 
    sub                       i64 
    push           4          i64 
    sub                       i64 
    push           pc_genss.dofwdrefs.p32 u64 
    popptr                    i32 
    jump           #8484      
#8481: 
    push           pc_genss.dofwdrefs.f u64 
    push           14         
    pushptroff                i16 1 0
    push           1          i64 
    casejumpeq     #8485      i64 0
    push           3          i64 
    casejumpeq     #8486      i64 0
    push           2          i64 
    casejumpeq     #8487      i64 0
    popstack                  i64 
    jump           #8488      
#8485: 
    push           pci_mcl.ss_code u64 
    pop            pc_genss.dofwdrefs.data u64 
    jump           #8489      
#8486: 
    setargs                   1 0
    push           "Fwd ref in zdata" u64 
    callproc       &pci_mcl.axerror 
    jump           #8489      
#8487: 
    push           pci_mcl.ss_idata u64 
    pop            pc_genss.dofwdrefs.data u64 
    jump           #8489      
#8488: 
#8489: 
    setargs                   2 0
    push           pc_genss.dofwdrefs.offset i64 
    push           pc_genss.dofwdrefs.data u64 
    callfn         &pc_genss.bufferelemptr u64 
    pop            pc_genss.dofwdrefs.p32 u64 
    push           pc_genss.dofwdrefs.f u64 
    push           12         
    pushptroff                i16 1 0
    push           2          i64 
    jumpne         #8490      i64 
    push           pc_genss.dofwdrefs.p32 u64 
    pushptr                   i32 
    push           pc_genss.dofwdrefs.d u64 
    push           32         
    pushptroff                i32 1 0
    add                       i64 
    push           pc_genss.dofwdrefs.p32 u64 
    popptr                    i32 
    jump           #8491      
#8490: 
    push           pc_genss.dofwdrefs.p32 u64 
    pop            pc_genss.dofwdrefs.p64 u64 
    push           pc_genss.dofwdrefs.p64 u64 
    pushptr                   i64 
    push           pc_genss.dofwdrefs.d u64 
    push           32         
    pushptroff                i32 1 0
    add                       i64 
    push           pc_genss.dofwdrefs.p64 u64 
    popptr                    i64 
#8491: 
    jump           #8484      
#8482: 
    setargs                   2 0
    push           pc_genss.dofwdrefs.offset i64 
    push           pc_genss.currdata u64 
    callfn         &pc_genss.bufferelemptr u64 
    pop            pc_genss.dofwdrefs.p8 u64 
    push           pc_genss.dofwdrefs.d u64 
    push           32         
    pushptroff                i32 1 0
    push           pc_genss.dofwdrefs.offset i64 
    sub                       i64 
    push           1          i64 
    sub                       i64 
    push           pc_genss.dofwdrefs.p8 u64 
    popptr                    u8 
    jump           #8484      
#8483: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pc_objdecls.relocnames 
    push           pc_genss.dofwdrefs.f u64 
    push           12         
    pushptroff                i16 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_genss.dofwdrefs.d u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "DOFWDREFS/CAN'T DO RELTYPE" u64 
    callproc       &pci_mcl.axerror 
#8484: 
    push           pc_genss.dofwdrefs.f u64 
    pushptr                   u64 
    pop            pc_genss.dofwdrefs.f u64 
#8478: 
    push           pc_genss.dofwdrefs.f u64 
    jumptrue       #8479      u64 
#8492: 
#8477: 
    retproc                   
End


Proc pc_genss.genrex:
    procentry                 
    push           pc_genss.sizeoverride i64 
    jumpfalse      #8494      i64 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
#8494: 
    push           pc_genss.addroverride i64 
    jumpfalse      #8495      i64 
    setargs                   1 0
    push           103        i64 
    callproc       &pc_genss.genbyte 
#8495: 
    push           pc_genss.rex i64 
    jumpfalse      #8496      i64 
    push           pc_genss.rex i64 
    push           64         i64 
    jumpge         #8497      i64 
    setargs                   1 0
    push           64         i64 
    push           pc_genss.rex i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    jump           #8498      
#8497: 
    setargs                   1 0
    push           pc_genss.rex i64 
    callproc       &pc_genss.genbyte 
#8498: 
#8496: 
#8499: 
    retproc                   
End


Proc pc_genss.isbytesized: i64
    param          pc_genss.isbytesized.x i64 
    procentry                 
    startmult                 
    push           -128       i64 
    push           pc_genss.isbytesized.x i64 
    jumpgt         #8501      i64 
    push           pc_genss.isbytesized.x i64 
    push           127        i64 
    jumpgt         #8501      i64 
    push           1          
    resetmult                 
    jump           #8502      
#8501: 
    push           0          
    endmult                   
#8502: 
    setret                    i64 
    jump           #8503      
#8503: 
    retfn                     i64 
End


Proc pc_genss.isdwordsized: i64
    param          pc_genss.isdwordsized.x i64 
    procentry                 
    startmult                 
    push           -2147483648 i64 
    push           pc_genss.isdwordsized.x i64 
    jumpgt         #8505      i64 
    push           pc_genss.isdwordsized.x i64 
    push           2147483647 i64 
    jumpgt         #8505      i64 
    push           1          
    resetmult                 
    jump           #8506      
#8505: 
    push           0          
    endmult                   
#8506: 
    setret                    i64 
    jump           #8507      
#8507: 
    retfn                     i64 
End


Proc pc_genss.do_push:
    param          pc_genss.do_push.a u64 
    local          pc_genss.do_push.code i64 
    local          pc_genss.do_push.am i64 
    procentry                 
    push           pc_genss.do_push.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8509      i64 0
    push           2          i64 
    casejumpeq     #8510      i64 0
    push           3          i64 
    casejumpeq     #8511      i64 0
    popstack                  i64 
    jump           #8512      
#8509: 
    push           pc_genss.do_push.a u64 
    push           8          
    pushptroff                u8 1 0
    push           8          i64 
    jumpeq         #8513      i64 
    setargs                   1 0
    push           "pushreg not 64-bit" u64 
    callproc       &pci_mcl.axerror 
#8513: 
    push           &pci_mcl.regcodes 
    push           pc_genss.do_push.a u64 
    push           10         
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    pop            pc_genss.do_push.code i64 
    push           pc_genss.do_push.code i64 
    push           8          i64 
    jumplt         #8514      i64 
    push           1          i64 
    pop            pc_genss.rex i64 
    push           &pc_genss.do_push.code 
    push           7          i64 
    iandto                    i64 
#8514: 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           80         i64 
    push           pc_genss.do_push.code i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    jump           #8515      
#8510: 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_push.a u64 
    callfn         &pc_genss.getdef u64 
    jumpfalse      #8516      u64 
    setargs                   1 0
    push           104        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           4          i64 
    push           pc_genss.do_push.a u64 
    callproc       &pc_genss.genopnd 
    jump           #8517      
#8516: 
    setargs                   1 0
    push           pc_genss.do_push.a u64 
    pushptr                   i64 
    callfn         &pc_genss.isbytesized i64 
    jumpfalse      #8518      i64 
    setargs                   1 0
    push           106        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_push.a u64 
    pushptr                   i64 
    callproc       &pc_genss.genbyte 
    jump           #8517      
#8518: 
    setargs                   1 0
    push           pc_genss.do_push.a u64 
    pushptr                   i64 
    callfn         &pc_genss.isdwordsized i64 
    jumpfalse      #8519      i64 
    setargs                   1 0
    push           104        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_push.a u64 
    pushptr                   i64 
    callproc       &pc_genss.gendword 
    jump           #8517      
#8519: 
    setargs                   1 0
    push           "push imm value too large" u64 
    callproc       &pci_mcl.axerror 
#8517: 
    jump           #8515      
#8511: 
    push           pc_genss.do_push.a u64 
    push           8          
    pushptroff                u8 1 0
    push           8          i64 
    jumpeq         #8520      i64 
    setargs                   1 0
    push           "push not 64-bit" u64 
    callproc       &pci_mcl.axerror 
#8520: 
    setargs                   2 0
    push           6          i64 
    push           pc_genss.do_push.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_push.am i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           255        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_push.am i64 
    push           pc_genss.do_push.a u64 
    callproc       &pc_genss.genamode 
    jump           #8515      
#8512: 
    setargs                   1 0
    push           "push opnd?" u64 
    callproc       &pci_mcl.axerror 
#8515: 
#8521: 
    retproc                   
End


Proc pc_genss.do_pop:
    param          pc_genss.do_pop.a u64 
    local          pc_genss.do_pop.code i64 
    local          pc_genss.do_pop.am i64 
    procentry                 
    push           pc_genss.do_pop.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8523      i64 0
    push           3          i64 
    casejumpeq     #8524      i64 0
    popstack                  i64 
    jump           #8525      
#8523: 
    push           pc_genss.do_pop.a u64 
    push           8          
    pushptroff                u8 1 0
    push           8          i64 
    jumpeq         #8526      i64 
    setargs                   1 0
    push           "popreg not 64-bit" u64 
    callproc       &pci_mcl.axerror 
#8526: 
    push           &pci_mcl.regcodes 
    push           pc_genss.do_pop.a u64 
    push           10         
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    pop            pc_genss.do_pop.code i64 
    push           pc_genss.do_pop.code i64 
    push           8          i64 
    jumplt         #8527      i64 
    push           1          i64 
    pop            pc_genss.rex i64 
    push           &pc_genss.do_pop.code 
    push           7          i64 
    iandto                    i64 
#8527: 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           88         i64 
    push           pc_genss.do_pop.code i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    jump           #8528      
#8524: 
    push           pc_genss.do_pop.a u64 
    push           8          
    pushptroff                u8 1 0
    push           8          i64 
    jumpeq         #8529      i64 
    setargs                   1 0
    push           "pop not 64-bit" u64 
    callproc       &pci_mcl.axerror 
#8529: 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_pop.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_pop.am i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           143        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_pop.am i64 
    push           pc_genss.do_pop.a u64 
    callproc       &pc_genss.genamode 
    jump           #8528      
#8525: 
    setargs                   1 0
    push           "pop opnd?" u64 
    callproc       &pci_mcl.axerror 
#8528: 
#8530: 
    retproc                   
End


Proc pc_genss.do_inc:
    param          pc_genss.do_inc.a u64 
    param          pc_genss.do_inc.code i64 
    local          pc_genss.do_inc.opc i64 
    local          pc_genss.do_inc.am i64 
    procentry                 
    startmult                 
    push           pc_genss.do_inc.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8532      i64 
    push           254        i64 
    resetmult                 
    jump           #8533      
#8532: 
    push           255        i64 
    endmult                   
#8533: 
    pop            pc_genss.do_inc.opc i64 
    push           pc_genss.do_inc.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8534      i64 0
    push           3          i64 
    casejumpeq     #8534      i64 0
    popstack                  i64 
    jump           #8535      
#8534: 
    setargs                   2 0
    push           pc_genss.do_inc.code i64 
    push           pc_genss.do_inc.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_inc.am i64 
    setargs                   1 0
    push           pc_genss.do_inc.a u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_inc.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           pc_genss.do_inc.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_inc.am i64 
    push           pc_genss.do_inc.a u64 
    callproc       &pc_genss.genamode 
    jump           #8536      
#8535: 
    setargs                   1 0
    push           "inc/opnd?" u64 
    callproc       &pci_mcl.axerror 
#8536: 
#8537: 
    retproc                   
End


Proc pc_genss.do_neg:
    param          pc_genss.do_neg.a u64 
    param          pc_genss.do_neg.code i64 
    local          pc_genss.do_neg.opc i64 
    local          pc_genss.do_neg.am i64 
    procentry                 
    startmult                 
    push           pc_genss.do_neg.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8539      i64 
    push           246        i64 
    resetmult                 
    jump           #8540      
#8539: 
    push           247        i64 
    endmult                   
#8540: 
    pop            pc_genss.do_neg.opc i64 
    push           pc_genss.do_neg.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8541      i64 0
    push           3          i64 
    casejumpeq     #8541      i64 0
    popstack                  i64 
    jump           #8542      
#8541: 
    setargs                   2 0
    push           pc_genss.do_neg.code i64 
    push           pc_genss.do_neg.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_neg.am i64 
    setargs                   1 0
    push           pc_genss.do_neg.a u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_neg.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           pc_genss.do_neg.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_neg.am i64 
    push           pc_genss.do_neg.a u64 
    callproc       &pc_genss.genamode 
    jump           #8543      
#8542: 
    setargs                   1 0
    push           "neg/div/etc opnd?" u64 
    callproc       &pci_mcl.axerror 
#8543: 
#8544: 
    retproc                   
End


Proc pc_genss.genamode:
    param          pc_genss.genamode.a u64 
    param          pc_genss.genamode.am i64 
    local          pc_genss.genamode.sib i64 
    local          pc_genss.genamode.mode i64 
    local          pc_genss.genamode.dispsize i64 
    local          pc_genss.genamode.offset i64 
    local          pc_genss.genamode.d u64 
    procentry                 
    push           pc_genss.genamode.am i64 
    push           16         i64 
    shr                       i64 
    pop            pc_genss.genamode.sib i64 
    push           pc_genss.genamode.am i64 
    push           8          i64 
    shr                       i64 
    push           255        i64 
    iand                      i64 
    pop            pc_genss.genamode.mode i64 
    push           pc_genss.genamode.am i64 
    push           255        i64 
    iand                      i64 
    pop            pc_genss.genamode.dispsize i64 
    setargs                   1 0
    push           pc_genss.genamode.mode i64 
    callproc       &pc_genss.genbyte 
    push           pc_genss.genamode.sib i64 
    push           0          i64 
    jumplt         #8546      i64 
    setargs                   1 0
    push           pc_genss.genamode.sib i64 
    callproc       &pc_genss.genbyte 
#8546: 
    push           pc_genss.genamode.dispsize i64 
    push           0          i64 
    casejumpeq     #8547      i64 0
    push           1          i64 
    casejumpeq     #8548      i64 0
    push           4          i64 
    casejumpeq     #8549      i64 0
    popstack                  i64 
    jump           #8550      
#8547: 
    jump           #8551      
#8548: 
    setargs                   2 0
    push           &pc_genss.genamode.offset 
    push           pc_genss.genamode.a u64 
    callproc       &pc_genss.getdispsize 
    setargs                   1 0
    push           pc_genss.genamode.offset i64 
    callproc       &pc_genss.genbyte 
    jump           #8551      
#8549: 
    push           pc_genss.genamode.a u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    casejumpeq     #8552      i64 0
    popstack                  i64 
    jump           #8553      
#8552: 
    push           pc_genss.genamode.a u64 
    push           12         
    pushptroff                u8 1 0
    push           5          i64 
    casejumpeq     #8554      i64 0
    push           7          i64 
    casejumpeq     #8554      i64 0
    push           0          i64 
    casejumpeq     #8555      i64 0
    popstack                  i64 
    jump           #8556      
#8554: 
    setargs                   1 0
    push           pc_genss.genamode.a u64 
    callproc       &pc_genss.genabs32 
    jump           #8557      
#8555: 
    setargs                   2 0
    push           &pc_genss.genamode.offset 
    push           pc_genss.genamode.a u64 
    callproc       &pc_genss.getdispsize 
    setargs                   1 0
    push           pc_genss.genamode.offset i64 
    callproc       &pc_genss.gendword 
    jump           #8557      
#8556: 
    setargs                   1 0
    push           "genam/3"  u64 
    callproc       &pci_mcl.axerror 
#8557: 
    jump           #8558      
#8553: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pci_mcl.opndnames_ma 
    push           pc_genss.genamode.a u64 
    push           9          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "GENAMODE/MODE?" u64 
    callproc       &pci_mcl.axerror 
#8558: 
    jump           #8551      
#8550: 
    setargs                   1 0
    push           "genamode size 2/8" u64 
    callproc       &pci_mcl.axerror 
#8551: 
#8559: 
    retproc                   
End


Proc pc_genss.makemodrm: i64
    param          pc_genss.makemodrm.mode i64 
    param          pc_genss.makemodrm.opc i64 
    param          pc_genss.makemodrm.rm i64 
    procentry                 
    push           pc_genss.makemodrm.mode i64 
    push           6          i64 
    shl                       i64 
    push           pc_genss.makemodrm.opc i64 
    push           3          i64 
    shl                       i64 
    add                       i64 
    push           pc_genss.makemodrm.rm i64 
    add                       i64 
    setret                    i64 
    jump           #8561      
#8561: 
    retfn                     i64 
End


Proc pc_genss.setopsize:
    param          pc_genss.setopsize.a u64 
    procentry                 
    push           pc_genss.setopsize.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8563      i64 0
    push           2          i64 
    casejumpeq     #8564      i64 0
    push           8          i64 
    casejumpeq     #8565      i64 0
    push           4          i64 
    casejumpeq     #8566      i64 0
    popstack                  i64 
    jump           #8567      
#8563: 
    jump           #8568      
#8564: 
    push           1          i64 
    pop            pc_genss.sizeoverride i64 
    jump           #8568      
#8565: 
    push           &pc_genss.rex 
    push           8          i64 
    iorto                     i64 
    jump           #8568      
#8566: 
    jump           #8568      
#8567: 
    setargs                   1 0
    push           "Operand size not set" u64 
    callproc       &pci_mcl.axerror 
#8568: 
#8569: 
    retproc                   
End


Proc pc_genss.setaddrsize:
    param          pc_genss.setaddrsize.a u64 
    procentry                 
    push           pc_genss.setaddrsize.a u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #8571      i64 
    push           pc_genss.setaddrsize.a u64 
    push           18         
    pushptroff                u8 1 0
    push           4          i64 
    jumpne         #8571      i64 
    push           1          i64 
    pop            pc_genss.addroverride i64 
#8571: 
#8572: 
    retproc                   
End


Proc pc_genss.getdispsize: i64
    param          pc_genss.getdispsize.a u64 
    param          pc_genss.getdispsize.offset u64 
    local          pc_genss.getdispsize.d u64 
    procentry                 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.getdispsize.a u64 
    callfn         &pc_genss.getdef u64 
    pop            pc_genss.getdispsize.d u64 
    push           pc_genss.getdispsize.a u64 
    push           14         
    pushptroff                i32 1 0
    push           pc_genss.getdispsize.offset u64 
    popptr                    i64 
    push           pc_genss.getdispsize.d u64 
    jumpfalse      #8574      u64 
    push           pc_genss.getdispsize.d u64 
    push           16         
    pushptroff                u64 1 0
    jumpfalse      #8575      u64 
    push           pc_genss.getdispsize.d u64 
    push           16         
    pushptroff                u64 1 0
    push           1          
    pushptroff                u8 1 0
    push           18         i64 
    setjumpeq      #8576      i64 
    push           19         i64 
    setjumpne      #8575      i64 
#8576: 
    push           pc_genss.getdispsize.offset u64 
    push           pc_genss.getdispsize.d u64 
    push           32         
    pushptroff                i32 1 0
    addto                     i64 
    jump           #8577      
#8575: 
    push           4          i64 
    setret                    i64 
    jump           #8578      
#8577: 
#8574: 
    startmult                 
    push           pc_genss.getdispsize.offset u64 
    pushptr                   i64 
    jumpfalse      #8579      i64 
    startmult                 
    setargs                   1 0
    push           pc_genss.getdispsize.offset u64 
    pushptr                   i64 
    callfn         &pc_genss.isbytesized i64 
    jumpfalse      #8580      i64 
    push           1          i64 
    resetmult                 
    jump           #8581      
#8580: 
    push           4          i64 
    endmult                   
#8581: 
    resetmult                 
    jump           #8582      
#8579: 
    push           0          i64 
    endmult                   
#8582: 
    setret                    i64 
    jump           #8578      
#8578: 
    retfn                     i64 
End


Proc pc_genss.genrm: i64
    param          pc_genss.genrm.a u64 
    param          pc_genss.genrm.opc i64 
    local          pc_genss.genrm.mode i64 
    local          pc_genss.genrm.rm i64 
    local          pc_genss.genrm.scale i64 
    local          pc_genss.genrm.dispsize i64 
    local          pc_genss.genrm.sib i64 
    local          pc_genss.genrm.index i64 
    local          pc_genss.genrm.base i64 
    local          pc_genss.genrm.reg i64 
    local          pc_genss.genrm.regix i64 
    local          pc_genss.genrm.code i64 
    local          pc_genss.genrm.offset i64 
    procentry                 
    push           0          i64 
    store          pc_genss.genrm.rm i64 
    pop            pc_genss.genrm.mode i64 
    push           0          i64 
    pop            pc_genss.genrm.scale i64 
    push           0          i64 
    pop            pc_genss.genrm.dispsize i64 
    push           -1         i64 
    pop            pc_genss.genrm.sib i64 
    push           pc_genss.genrm.a u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #8584      i64 
    push           pc_genss.genrm.a u64 
    push           18         
    pushptroff                u8 1 0
    push           4          i64 
    jumpne         #8584      i64 
    push           1          i64 
    pop            pc_genss.addroverride i64 
#8584: 
    push           pc_genss.genrm.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8585      i64 0
    push           3          i64 
    casejumpeq     #8586      i64 0
    push           5          i64 
    casejumpeq     #8587      i64 0
    popstack                  i64 
    jump           #8588      
#8585: 
    setargs                   1 0
    push           pc_genss.genrm.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcodeb i64 
    pop            pc_genss.genrm.code i64 
    setargs                   3 0
    push           pc_genss.genrm.dispsize i64 
    push           pc_genss.genrm.sib i64 
    setargs                   3 0
    push           pc_genss.genrm.code i64 
    push           pc_genss.genrm.opc i64 
    push           3          i64 
    callfn         &pc_genss.makemodrm i64 
    callfn         &pc_genss.makeam i64 
    setret                    i64 
    jump           #8589      
    jump           #8590      
#8586: 
    jump           #8590      
#8587: 
    setargs                   1 0
    push           pc_genss.genrm.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcodebx i64 
    pop            pc_genss.genrm.code i64 
    setargs                   3 0
    push           pc_genss.genrm.dispsize i64 
    push           pc_genss.genrm.sib i64 
    setargs                   3 0
    push           pc_genss.genrm.code i64 
    push           pc_genss.genrm.opc i64 
    push           3          i64 
    callfn         &pc_genss.makemodrm i64 
    callfn         &pc_genss.makeam i64 
    setret                    i64 
    jump           #8589      
    jump           #8590      
#8588: 
    setargs                   1 0
    push           "genrm not mem" u64 
    callproc       &pci_mcl.axerror 
#8590: 
    push           pc_genss.genrm.a u64 
    push           10         
    pushptroff                u8 1 0
    pop            pc_genss.genrm.reg i64 
    push           pc_genss.genrm.a u64 
    push           11         
    pushptroff                u8 1 0
    pop            pc_genss.genrm.regix i64 
    push           pc_genss.genrm.reg i64 
    push           pc_genss.genrm.regix i64 
    jumpne         #8591      i64 
    push           pc_genss.genrm.regix i64 
    push           0          i64 
    jumpne         #8591      i64 
    push           0          i64 
    pop            pc_genss.genrm.mode i64 
    push           4          i64 
    pop            pc_genss.genrm.rm i64 
    push           1          i64 
    pop            pc_genss.genrm.scale i64 
    push           4          i64 
    pop            pc_genss.genrm.index i64 
    push           5          i64 
    pop            pc_genss.genrm.base i64 
    push           4          i64 
    pop            pc_genss.genrm.dispsize i64 
    jump           #8592      
#8591: 
    push           pc_genss.genrm.a u64 
    push           13         
    pushptroff                u8 1 0
    push           1          i64 
    jumpgt         #8593      i64 
    push           pc_genss.genrm.regix i64 
    push           0          i64 
    jumpne         #8593      i64 
    setargs                   2 0
    push           &pc_genss.genrm.offset 
    push           pc_genss.genrm.a u64 
    callfn         &pc_genss.getdispsize i64 
    pop            pc_genss.genrm.dispsize i64 
    push           pc_genss.genrm.dispsize i64 
    jumpfalse      #8594      i64 
    startmult                 
    push           pc_genss.genrm.dispsize i64 
    push           1          i64 
    jumpne         #8595      i64 
    push           1          i64 
    resetmult                 
    jump           #8596      
#8595: 
    push           2          i64 
    endmult                   
#8596: 
    pop            pc_genss.genrm.mode i64 
#8594: 
    push           &pci_mcl.regcodes 
    push           pc_genss.genrm.reg i64 
    pushptroff                u8 1 0
    pop            pc_genss.genrm.rm i64 
    push           pc_genss.genrm.rm i64 
    push           4          i64 
    jumpeq         #8597      i64 
    push           pc_genss.genrm.rm i64 
    push           12         i64 
    jumpeq         #8597      i64 
    push           pc_genss.genrm.rm i64 
    pop            pc_genss.genrm.base i64 
    push           pc_genss.genrm.rm i64 
    push           5          i64 
    jumpeq         #8598      i64 
    push           pc_genss.genrm.rm i64 
    push           13         i64 
    jumpne         #8599      i64 
#8598: 
    push           pc_genss.genrm.dispsize i64 
    push           0          i64 
    jumpne         #8599      i64 
    push           1          i64 
    pop            pc_genss.genrm.mode i64 
    push           1          i64 
    pop            pc_genss.genrm.dispsize i64 
#8599: 
    push           0          i64 
    pop            pc_genss.genrm.index i64 
    jump           #8600      
#8597: 
    push           4          i64 
    pop            pc_genss.genrm.index i64 
    push           pc_genss.genrm.rm i64 
    pop            pc_genss.genrm.base i64 
    push           1          i64 
    pop            pc_genss.genrm.scale i64 
#8600: 
    jump           #8592      
#8593: 
    push           pc_genss.genrm.regix i64 
    jumpfalse      #8601      i64 
    push           pc_genss.genrm.reg i64 
    push           0          i64 
    jumpne         #8601      i64 
    push           4          i64 
    pop            pc_genss.genrm.dispsize i64 
    push           0          i64 
    pop            pc_genss.genrm.mode i64 
    push           4          i64 
    pop            pc_genss.genrm.rm i64 
    startmult                 
    push           pc_genss.genrm.a u64 
    push           13         
    pushptroff                u8 1 0
    jumpfalse      #8602      i64 
    push           pc_genss.genrm.a u64 
    push           13         
    pushptroff                u8 1 0
    resetmult                 
    jump           #8603      
#8602: 
    push           1          i64 
    endmult                   
#8603: 
    pop            pc_genss.genrm.scale i64 
    push           5          i64 
    pop            pc_genss.genrm.base i64 
    push           &pci_mcl.regcodes 
    push           pc_genss.genrm.regix i64 
    pushptroff                u8 1 0
    pop            pc_genss.genrm.index i64 
    push           pc_genss.genrm.regix i64 
    push           16         i64 
    jumpne         #8604      i64 
    setargs                   1 0
    push           "Scaled rstack?" u64 
    callproc       &pci_mcl.axerror 
#8604: 
    jump           #8592      
#8601: 
    setargs                   2 0
    push           &pc_genss.genrm.offset 
    push           pc_genss.genrm.a u64 
    callfn         &pc_genss.getdispsize i64 
    pop            pc_genss.genrm.dispsize i64 
    push           pc_genss.genrm.dispsize i64 
    jumpfalse      #8605      i64 
    startmult                 
    push           pc_genss.genrm.dispsize i64 
    push           1          i64 
    jumpne         #8606      i64 
    push           1          i64 
    resetmult                 
    jump           #8607      
#8606: 
    push           2          i64 
    endmult                   
#8607: 
    pop            pc_genss.genrm.mode i64 
#8605: 
    push           4          i64 
    pop            pc_genss.genrm.rm i64 
    startmult                 
    push           pc_genss.genrm.a u64 
    push           13         
    pushptroff                u8 1 0
    jumpfalse      #8608      i64 
    push           pc_genss.genrm.a u64 
    push           13         
    pushptroff                u8 1 0
    resetmult                 
    jump           #8609      
#8608: 
    push           1          i64 
    endmult                   
#8609: 
    pop            pc_genss.genrm.scale i64 
    push           pc_genss.genrm.reg i64 
    push           0          i64 
    jumpne         #8610      i64 
    push           5          i64 
    pop            pc_genss.genrm.base i64 
    jump           #8611      
#8610: 
    push           pc_genss.genrm.reg i64 
    push           15         i64 
    setjumpeq      #8612      i64 
    push           8          i64 
    setjumpne      #8613      i64 
#8612: 
    push           pc_genss.genrm.dispsize i64 
    push           0          i64 
    jumpne         #8613      i64 
    push           1          i64 
    pop            pc_genss.genrm.mode i64 
    push           1          i64 
    pop            pc_genss.genrm.dispsize i64 
#8613: 
    push           &pci_mcl.regcodes 
    push           pc_genss.genrm.reg i64 
    pushptroff                u8 1 0
    pop            pc_genss.genrm.base i64 
#8611: 
    push           pc_genss.genrm.regix i64 
    push           0          i64 
    jumpne         #8614      i64 
    push           4          i64 
    pop            pc_genss.genrm.index i64 
    jump           #8615      
#8614: 
    push           &pci_mcl.regcodes 
    push           pc_genss.genrm.regix i64 
    pushptroff                u8 1 0
    pop            pc_genss.genrm.index i64 
#8615: 
    push           pc_genss.genrm.regix i64 
    jumpfalse      #8616      i64 
    push           pc_genss.genrm.reg i64 
    jumptrue       #8616      i64 
    push           4          i64 
    pop            pc_genss.genrm.dispsize i64 
#8616: 
    push           pc_genss.genrm.regix i64 
    push           16         i64 
    jumpne         #8617      i64 
    push           pc_genss.genrm.scale i64 
    push           1          i64 
    jumple         #8617      i64 
    setargs                   1 0
    push           "Can't scale rstack" u64 
    callproc       &pci_mcl.axerror 
#8617: 
#8592: 
    push           pc_genss.genrm.index i64 
    push           8          i64 
    jumplt         #8618      i64 
    push           &pc_genss.rex 
    push           2          i64 
    iorto                     i64 
    push           &pc_genss.genrm.index 
    push           7          i64 
    iandto                    i64 
#8618: 
    push           pc_genss.genrm.base i64 
    push           8          i64 
    jumplt         #8619      i64 
    push           &pc_genss.rex 
    push           1          i64 
    iorto                     i64 
    push           &pc_genss.genrm.base 
    push           7          i64 
    iandto                    i64 
#8619: 
    push           pc_genss.genrm.scale i64 
    jumpfalse      #8620      i64 
    push           &pc_genss.genrm.scaletable 
    push           pc_genss.genrm.scale i64 
    pushptroff                i64 8 -8
    push           6          i64 
    shl                       i64 
    push           pc_genss.genrm.index i64 
    push           3          i64 
    shl                       i64 
    add                       i64 
    push           pc_genss.genrm.base i64 
    add                       i64 
    pop            pc_genss.genrm.sib i64 
#8620: 
    push           &pc_genss.genrm.rm 
    push           7          i64 
    iandto                    i64 
    setargs                   3 0
    push           pc_genss.genrm.dispsize i64 
    push           pc_genss.genrm.sib i64 
    setargs                   3 0
    push           pc_genss.genrm.rm i64 
    push           pc_genss.genrm.opc i64 
    push           pc_genss.genrm.mode i64 
    callfn         &pc_genss.makemodrm i64 
    callfn         &pc_genss.makeam i64 
    setret                    i64 
    jump           #8589      
#8589: 
    retfn                     i64 
End


Proc pc_genss.makeam: i64
    param          pc_genss.makeam.m i64 
    param          pc_genss.makeam.s i64 
    param          pc_genss.makeam.d i64 
    procentry                 
    push           pc_genss.makeam.s i64 
    push           16         i64 
    shl                       i64 
    push           pc_genss.makeam.m i64 
    push           8          i64 
    shl                       i64 
    add                       i64 
    push           pc_genss.makeam.d i64 
    add                       i64 
    setret                    i64 
    jump           #8622      
#8622: 
    retfn                     i64 
End


Proc pc_genss.do_arith:
    param          pc_genss.do_arith.a u64 
    param          pc_genss.do_arith.b u64 
    param          pc_genss.do_arith.code i64 
    local          pc_genss.do_arith.am i64 
    local          pc_genss.do_arith.regcode i64 
    local          pc_genss.do_arith.opc i64 
    local          pc_genss.do_arith.dispsize i64 
    local          pc_genss.do_arith.x i64 
    procentry                 
    push           pc_genss.do_arith.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8624      i64 0
    push           3          i64 
    casejumpeq     #8625      i64 0
    popstack                  i64 
    jump           #8626      
#8624: 
    push           pc_genss.do_arith.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8627      i64 0
    push           3          i64 
    casejumpeq     #8627      i64 0
    push           2          i64 
    casejumpeq     #8628      i64 0
    popstack                  i64 
    jump           #8629      
#8627: 
    setargs                   1 0
    push           pc_genss.do_arith.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_arith.regcode i64 
    setargs                   2 0
    push           pc_genss.do_arith.regcode i64 
    push           pc_genss.do_arith.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_arith.am i64 
    setargs                   1 0
    push           pc_genss.do_arith.a u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_arith.b u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_arith.a u64 
    callproc       &pc_genss.setopsize 
    push           pc_genss.do_arith.code i64 
    push           3          i64 
    shl                       i64 
    startmult                 
    push           pc_genss.do_arith.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8630      i64 
    push           2          i64 
    resetmult                 
    jump           #8631      
#8630: 
    push           3          i64 
    endmult                   
#8631: 
    ior                       i64 
    pop            pc_genss.do_arith.opc i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           pc_genss.do_arith.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_arith.am i64 
    push           pc_genss.do_arith.b u64 
    callproc       &pc_genss.genamode 
    jump           #8632      
#8628: 
!doregimm::
#8633: 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_arith.b u64 
    callfn         &pc_genss.getdef u64 
    jumpfalse      #8634      u64 
    push           pc_genss.do_arith.code i64 
    push           0          i64 
    jumplt         #8635      i64 
    push           pc_genss.do_arith.code i64 
    push           7          i64 
    jumple         #8636      i64 
#8635: 
    setargs                   1 0
    push           "non-add arith/label" u64 
    callproc       &pci_mcl.axerror 
#8636: 
    push           pc_genss.do_arith.a u64 
    push           8          
    pushptroff                u8 1 0
    push           4          i64 
    jumpge         #8637      i64 
    setargs                   1 0
    push           "add imm/size" u64 
    callproc       &pci_mcl.axerror 
#8637: 
    setargs                   2 0
    push           pc_genss.do_arith.code i64 
    push           pc_genss.do_arith.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_arith.am i64 
    setargs                   1 0
    push           pc_genss.do_arith.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           129        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_arith.am i64 
    push           pc_genss.do_arith.a u64 
    callproc       &pc_genss.genamode 
    setargs                   2 0
    push           4          i64 
    push           pc_genss.do_arith.b u64 
    callproc       &pc_genss.genopnd 
    jump           #8638      
#8634: 
    push           pc_genss.do_arith.b u64 
    pushptr                   i64 
    pop            pc_genss.do_arith.x i64 
    push           1          i64 
    pop            pc_genss.do_arith.dispsize i64 
    push           pc_genss.do_arith.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8639      i64 
    push           128        i64 
    pop            pc_genss.do_arith.opc i64 
    jump           #8640      
#8639: 
    push           -128       i64 
    push           pc_genss.do_arith.x i64 
    jumpgt         #8641      i64 
    push           pc_genss.do_arith.x i64 
    push           127        i64 
    jumpgt         #8641      i64 
    push           131        i64 
    pop            pc_genss.do_arith.opc i64 
    jump           #8640      
#8641: 
    push           -2147483648 i64 
    push           pc_genss.do_arith.x i64 
    jumpgt         #8642      i64 
    push           pc_genss.do_arith.x i64 
    push           4294967295 i64 
    jumple         #8643      i64 
#8642: 
    setargs                   1 0
    push           "3:exceeding word32 value" u64 
    callproc       &pci_mcl.axerror 
#8643: 
    push           129        i64 
    pop            pc_genss.do_arith.opc i64 
    startmult                 
    push           pc_genss.do_arith.a u64 
    push           8          
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #8644      i64 
    push           2          i64 
    resetmult                 
    jump           #8645      
#8644: 
    push           4          i64 
    endmult                   
#8645: 
    pop            pc_genss.do_arith.dispsize i64 
#8640: 
    setargs                   2 0
    push           pc_genss.do_arith.code i64 
    push           pc_genss.do_arith.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_arith.am i64 
    setargs                   1 0
    push           pc_genss.do_arith.a u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_arith.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           pc_genss.do_arith.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_arith.am i64 
    push           pc_genss.do_arith.a u64 
    callproc       &pc_genss.genamode 
    push           pc_genss.do_arith.dispsize i64 
    push           1          i64 
    casejumpeq     #8646      i64 0
    push           2          i64 
    casejumpeq     #8647      i64 0
    push           4          i64 
    casejumpeq     #8648      i64 0
    popstack                  i64 
    jump           #8649      
#8646: 
    setargs                   1 0
    push           pc_genss.do_arith.x i64 
    callproc       &pc_genss.genbyte 
    jump           #8650      
#8647: 
    setargs                   1 0
    push           pc_genss.do_arith.x i64 
    callproc       &pc_genss.genword 
    jump           #8650      
#8648: 
    setargs                   1 0
    push           pc_genss.do_arith.x i64 
    callproc       &pc_genss.gendword 
    jump           #8650      
#8649: 
#8650: 
    jump           #8632      
#8629: 
    setargs                   1 0
    push           "ADD reg,???" u64 
    callproc       &pci_mcl.axerror 
#8632: 
    jump           #8651      
#8625: 
    push           pc_genss.do_arith.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8652      i64 0
    push           2          i64 
    casejumpeq     #8653      i64 0
    popstack                  i64 
    jump           #8654      
#8652: 
    setargs                   1 0
    push           pc_genss.do_arith.b u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_arith.regcode i64 
    setargs                   2 0
    push           pc_genss.do_arith.regcode i64 
    push           pc_genss.do_arith.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_arith.am i64 
    setargs                   1 0
    push           pc_genss.do_arith.b u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_arith.b u64 
    callproc       &pc_genss.setopsize 
    push           pc_genss.do_arith.code i64 
    push           3          i64 
    shl                       i64 
    startmult                 
    push           pc_genss.do_arith.b u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8655      i64 
    push           0          i64 
    resetmult                 
    jump           #8656      
#8655: 
    push           1          i64 
    endmult                   
#8656: 
    ior                       i64 
    pop            pc_genss.do_arith.opc i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           pc_genss.do_arith.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_arith.am i64 
    push           pc_genss.do_arith.a u64 
    callproc       &pc_genss.genamode 
    jump           #8657      
#8653: 
    jump           #8633      
    jump           #8657      
#8654: 
    setargs                   1 0
    push           "ADD mem,???" u64 
    callproc       &pci_mcl.axerror 
#8657: 
    jump           #8651      
#8626: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pci_mcl.opndnames_ma 
    push           pc_genss.do_arith.a u64 
    push           9          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Can't add to this opnd" u64 
    callproc       &pci_mcl.axerror 
#8651: 
#8638: 
    retproc                   
End


Proc pc_genss.do_mov:
    param          pc_genss.do_mov.a u64 
    param          pc_genss.do_mov.b u64 
    local          pc_genss.do_mov.regcode i64 
    local          pc_genss.do_mov.am i64 
    local          pc_genss.do_mov.value i64 
    procentry                 
    push           pc_genss.do_mov.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8659      i64 0
    push           3          i64 
    casejumpeq     #8660      i64 0
    popstack                  i64 
    jump           #8661      
#8659: 
    push           pc_genss.do_mov.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8662      i64 0
    push           3          i64 
    casejumpeq     #8662      i64 0
    push           2          i64 
    casejumpeq     #8663      i64 0
    popstack                  i64 
    jump           #8664      
#8662: 
    push           pc_genss.do_mov.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_mov.b u64 
    push           8          
    pushptroff                u8 1 0
    jumpeq         #8665      i64 
    push           pc_genss.do_mov.b u64 
    push           8          
    pushptroff                u8 1 0
    jumpfalse      #8665      i64 
    setargs                   1 0
    push           "1:Opnd size mismatch" u64 
    callproc       &pci_mcl.axerror 
#8665: 
    setargs                   1 0
    push           pc_genss.do_mov.a u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_mov.b u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_mov.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_mov.regcode i64 
    setargs                   2 0
    push           pc_genss.do_mov.regcode i64 
    push           pc_genss.do_mov.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_mov.am i64 
    setargs                   1 0
    push           pc_genss.do_mov.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    startmult                 
    push           pc_genss.do_mov.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8666      i64 
    push           138        i64 
    resetmult                 
    jump           #8667      
#8666: 
    push           139        i64 
    endmult                   
#8667: 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_mov.am i64 
    push           pc_genss.do_mov.b u64 
    callproc       &pc_genss.genamode 
    jump           #8668      
#8663: 
    push           pc_genss.do_mov.b u64 
    pushptr                   i64 
    pop            pc_genss.do_mov.value i64 
    setargs                   1 0
    push           pc_genss.do_mov.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcodeb i64 
    pop            pc_genss.do_mov.regcode i64 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_mov.b u64 
    callfn         &pc_genss.getdef u64 
    jumpfalse      #8669      u64 
    push           pc_genss.do_mov.a u64 
    push           8          
    pushptroff                u8 1 0
    push           2          i64 
    jumpgt         #8669      i64 
    setargs                   1 0
    push           "mov imm?" u64 
    callproc       &pci_mcl.axerror 
#8669: 
    push           pc_genss.do_mov.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8670      i64 0
    push           2          i64 
    casejumpeq     #8671      i64 0
    push           4          i64 
    casejumpeq     #8672      i64 0
    popstack                  i64 
    jump           #8673      
#8670: 
    setargs                   1 0
    push           pc_genss.do_mov.a u64 
    callproc       &pc_genss.checkhighreg 
    push           pc_genss.do_mov.a u64 
    push           10         
    pushptroff                u8 1 0
    push           6          i64 
    casejumpeq     #8674      i64 0
    push           4          i64 
    casejumpeq     #8674      i64 0
    push           15         i64 
    casejumpeq     #8674      i64 0
    push           16         i64 
    casejumpeq     #8674      i64 0
    popstack                  i64 
    jump           #8675      
#8674: 
    push           &pc_genss.rex 
    push           64         i64 
    iorto                     i64 
    jump           #8676      
#8675: 
#8676: 
    push           -128       i64 
    push           pc_genss.do_mov.value i64 
    jumpgt         #8677      i64 
    push           pc_genss.do_mov.value i64 
    push           255        i64 
    jumple         #8678      i64 
#8677: 
    setargs                   1 0
    push           "exceeding byte value" u64 
    callproc       &pci_mcl.axerror 
#8678: 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           176        i64 
    push           pc_genss.do_mov.regcode i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_mov.value i64 
    callproc       &pc_genss.genbyte 
    jump           #8679      
#8671: 
    push           -32768     i64 
    push           pc_genss.do_mov.value i64 
    jumpgt         #8680      i64 
    push           pc_genss.do_mov.value i64 
    push           65535      i64 
    jumple         #8681      i64 
#8680: 
    setargs                   1 0
    push           "exceeding word16 value" u64 
    callproc       &pci_mcl.axerror 
#8681: 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           184        i64 
    push           pc_genss.do_mov.regcode i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_mov.value i64 
    callproc       &pc_genss.genword 
    jump           #8679      
#8672: 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_mov.b u64 
    callfn         &pc_genss.getdef u64 
    jumpfalse      #8682      u64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           184        i64 
    push           pc_genss.do_mov.regcode i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           4          i64 
    push           pc_genss.do_mov.b u64 
    callproc       &pc_genss.genopnd 
    jump           #8683      
#8682: 
    push           -2147483648 i64 
    push           pc_genss.do_mov.value i64 
    jumpgt         #8684      i64 
    push           pc_genss.do_mov.value i64 
    push           4294967295 i64 
    truncate                  i64 u32 
    jumple         #8685      i64 
#8684: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           pc_genss.do_mov.value i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           pc_genss.do_mov.value u64 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "1:exceeding word32 value" u64 
    callproc       &pci_mcl.axerror 
#8685: 
!doreg32::
#8686: 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           184        i64 
    push           pc_genss.do_mov.regcode i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_mov.value i64 
    callproc       &pc_genss.gendword 
#8683: 
    jump           #8679      
#8673: 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_mov.b u64 
    callfn         &pc_genss.getdef u64 
    jumpfalse      #8687      u64 
    push           &pc_genss.rex 
    push           8          i64 
    iorto                     i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           184        i64 
    push           pc_genss.do_mov.regcode i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           8          i64 
    push           pc_genss.do_mov.b u64 
    callproc       &pc_genss.genopnd 
    jump           #8688      
#8687: 
    push           pc_genss.do_mov.value i64 
    push           0          i64 
    jumplt         #8689      i64 
    push           pc_genss.do_mov.value i64 
    push           4294967295 i64 
    jumpgt         #8689      i64 
    jump           #8686      
#8689: 
    push           &pc_genss.rex 
    push           8          i64 
    iorto                     i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           184        i64 
    push           pc_genss.do_mov.regcode i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_mov.value i64 
    callproc       &pc_genss.genqword 
#8688: 
#8679: 
    jump           #8668      
#8664: 
    setargs                   1 0
    push           "MOV REG/??" u64 
    callproc       &pci_mcl.axerror 
#8668: 
    jump           #8690      
#8660: 
    push           pc_genss.do_mov.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8691      i64 0
    push           2          i64 
    casejumpeq     #8692      i64 0
    popstack                  i64 
    jump           #8693      
#8691: 
    push           pc_genss.do_mov.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_mov.b u64 
    push           8          
    pushptroff                u8 1 0
    jumpeq         #8694      i64 
    push           pc_genss.do_mov.a u64 
    push           8          
    pushptroff                u8 1 0
    jumpfalse      #8694      i64 
    setargs                   1 0
    push           "2:Opnd size mismatch" u64 
    callproc       &pci_mcl.axerror 
#8694: 
    setargs                   1 0
    push           pc_genss.do_mov.b u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_mov.regcode i64 
    setargs                   1 0
    push           pc_genss.do_mov.b u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   2 0
    push           pc_genss.do_mov.regcode i64 
    push           pc_genss.do_mov.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_mov.am i64 
    setargs                   1 0
    push           pc_genss.do_mov.b u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    startmult                 
    push           pc_genss.do_mov.b u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8695      i64 
    push           136        i64 
    resetmult                 
    jump           #8696      
#8695: 
    push           137        i64 
    endmult                   
#8696: 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_mov.am i64 
    push           pc_genss.do_mov.a u64 
    callproc       &pc_genss.genamode 
    jump           #8697      
#8692: 
    push           pc_genss.do_mov.b u64 
    pushptr                   i64 
    pop            pc_genss.do_mov.value i64 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_mov.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_mov.am i64 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_mov.b u64 
    callfn         &pc_genss.getdef u64 
    jumpfalse      #8698      u64 
    push           pc_genss.do_mov.a u64 
    push           8          
    pushptroff                u8 1 0
    push           2          i64 
    jumpgt         #8698      i64 
    setargs                   1 0
    push           "mov imm?" u64 
    callproc       &pci_mcl.axerror 
#8698: 
    push           pc_genss.do_mov.a u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #8699      i64 
    push           1          i64 
    push           pc_genss.do_mov.a u64 
    push           8          
    popptroff                 u8 1 0
#8699: 
    push           pc_genss.do_mov.a u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    casejumpeq     #8700      i64 0
    push           1          i64 
    casejumpeq     #8700      i64 0
    push           2          i64 
    casejumpeq     #8701      i64 0
    push           4          i64 
    casejumpeq     #8702      i64 0
    push           8          i64 
    casejumpeq     #8702      i64 0
    popstack                  i64 
    jump           #8703      
#8700: 
    push           -128       i64 
    push           pc_genss.do_mov.value i64 
    jumpgt         #8704      i64 
    push           pc_genss.do_mov.value i64 
    push           255        i64 
    jumple         #8705      i64 
#8704: 
    setargs                   1 0
    push           "exceeding byte value" u64 
    callproc       &pci_mcl.axerror 
#8705: 
    setargs                   1 0
    push           pc_genss.do_mov.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           198        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_mov.am i64 
    push           pc_genss.do_mov.a u64 
    callproc       &pc_genss.genamode 
    setargs                   1 0
    push           pc_genss.do_mov.value i64 
    callproc       &pc_genss.genbyte 
    jump           #8706      
#8701: 
    push           -32768     i64 
    push           pc_genss.do_mov.value i64 
    jumpgt         #8707      i64 
    push           pc_genss.do_mov.value i64 
    push           65535      i64 
    jumple         #8708      i64 
#8707: 
    setargs                   1 0
    push           "exceeding word16 value" u64 
    callproc       &pci_mcl.axerror 
#8708: 
    setargs                   1 0
    push           pc_genss.do_mov.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           199        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_mov.am i64 
    push           pc_genss.do_mov.a u64 
    callproc       &pc_genss.genamode 
    setargs                   1 0
    push           pc_genss.do_mov.value i64 
    callproc       &pc_genss.genword 
    jump           #8706      
#8702: 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_mov.b u64 
    callfn         &pc_genss.getdef u64 
    jumptrue       #8709      u64 
    push           -2147483648 i64 
    push           pc_genss.do_mov.value i64 
    jumpgt         #8710      i64 
    push           pc_genss.do_mov.value i64 
    push           4294967295 i64 
    jumple         #8711      i64 
#8710: 
    setargs                   1 0
    push           "2:exceeding word32 value" u64 
    callproc       &pci_mcl.axerror 
#8711: 
#8709: 
    setargs                   1 0
    push           pc_genss.do_mov.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           199        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_mov.am i64 
    push           pc_genss.do_mov.a u64 
    callproc       &pc_genss.genamode 
    setargs                   2 0
    push           4          i64 
    push           pc_genss.do_mov.b u64 
    callproc       &pc_genss.genopnd 
    jump           #8706      
#8703: 
#8706: 
    jump           #8697      
#8693: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pci_mcl.opndnames_ma 
    push           pc_genss.do_mov.a u64 
    push           9          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pci_mcl.opndnames_ma 
    push           pc_genss.do_mov.b u64 
    push           9          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "MOV MEM/?" u64 
    callproc       &pci_mcl.axerror 
#8697: 
    jump           #8690      
#8661: 
    setargs                   1 0
    push           "MOV ?/.." u64 
    callproc       &pci_mcl.axerror 
#8690: 
#8712: 
    retproc                   
End


Proc pc_genss.getregcoder: i64
    param          pc_genss.getregcoder.reg i64 
    local          pc_genss.getregcoder.regcode i64 
    procentry                 
    push           &pci_mcl.regcodes 
    push           pc_genss.getregcoder.reg i64 
    pushptroff                u8 1 0
    pop            pc_genss.getregcoder.regcode i64 
    push           pc_genss.getregcoder.regcode i64 
    push           8          i64 
    jumplt         #8714      i64 
    push           &pc_genss.getregcoder.regcode 
    push           8          i64 
    subto                     i64 
    push           &pc_genss.rex 
    push           4          i64 
    iorto                     i64 
#8714: 
    push           pc_genss.getregcoder.regcode i64 
    setret                    i64 
    jump           #8715      
#8715: 
    retfn                     i64 
End


Proc pc_genss.getregcodeb: i64
    param          pc_genss.getregcodeb.reg i64 
    local          pc_genss.getregcodeb.regcode i64 
    procentry                 
    push           &pci_mcl.regcodes 
    push           pc_genss.getregcodeb.reg i64 
    pushptroff                u8 1 0
    pop            pc_genss.getregcodeb.regcode i64 
    push           pc_genss.getregcodeb.regcode i64 
    push           8          i64 
    jumplt         #8717      i64 
    push           &pc_genss.getregcodeb.regcode 
    push           8          i64 
    subto                     i64 
    push           &pc_genss.rex 
    push           1          i64 
    iorto                     i64 
#8717: 
    push           pc_genss.getregcodeb.regcode i64 
    setret                    i64 
    jump           #8718      
#8718: 
    retfn                     i64 
End


Proc pc_genss.getregcodebx: i64
    param          pc_genss.getregcodebx.reg i64 
    local          pc_genss.getregcodebx.regcode i64 
    procentry                 
    push           pc_genss.getregcodebx.reg i64 
    push           1          i64 
    sub                       i64 
    pop            pc_genss.getregcodebx.regcode i64 
    push           pc_genss.getregcodebx.regcode i64 
    push           8          i64 
    jumplt         #8720      i64 
    push           &pc_genss.getregcodebx.regcode 
    push           8          i64 
    subto                     i64 
    push           &pc_genss.rex 
    push           1          i64 
    iorto                     i64 
#8720: 
    push           pc_genss.getregcodebx.regcode i64 
    setret                    i64 
    jump           #8721      
#8721: 
    retfn                     i64 
End


Proc pc_genss.getregcoderx: i64
    param          pc_genss.getregcoderx.reg i64 
    local          pc_genss.getregcoderx.regcode i64 
    procentry                 
    push           pc_genss.getregcoderx.reg i64 
    push           1          i64 
    sub                       i64 
    pop            pc_genss.getregcoderx.regcode i64 
    push           pc_genss.getregcoderx.regcode i64 
    push           8          i64 
    jumplt         #8723      i64 
    push           &pc_genss.getregcoderx.regcode 
    push           8          i64 
    subto                     i64 
    push           &pc_genss.rex 
    push           4          i64 
    iorto                     i64 
#8723: 
    push           pc_genss.getregcoderx.regcode i64 
    setret                    i64 
    jump           #8724      
#8724: 
    retfn                     i64 
End


Proc pc_genss.do_lea:
    param          pc_genss.do_lea.a u64 
    param          pc_genss.do_lea.b u64 
    local          pc_genss.do_lea.regcode i64 
    local          pc_genss.do_lea.am i64 
    procentry                 
    push           pc_genss.do_lea.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8726      i64 
    push           pc_genss.do_lea.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpeq         #8727      i64 
#8726: 
    setargs                   1 0
    push           "LEA not reg/mem" u64 
    callproc       &pci_mcl.axerror 
#8727: 
    push           pc_genss.do_lea.a u64 
    push           8          
    pushptroff                u8 1 0
    push           4          i64 
    jumpge         #8728      i64 
    setargs                   1 0
    push           "LEA size error" u64 
    callproc       &pci_mcl.axerror 
#8728: 
    setargs                   1 0
    push           pc_genss.do_lea.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_lea.regcode i64 
    setargs                   2 0
    push           pc_genss.do_lea.regcode i64 
    push           pc_genss.do_lea.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_lea.am i64 
    setargs                   1 0
    push           pc_genss.do_lea.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           141        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_lea.am i64 
    push           pc_genss.do_lea.b u64 
    callproc       &pc_genss.genamode 
#8729: 
    retproc                   
End


Proc pc_genss.do_movsx:
    param          pc_genss.do_movsx.a u64 
    param          pc_genss.do_movsx.b u64 
    param          pc_genss.do_movsx.opc i64 
    local          pc_genss.do_movsx.am i64 
    local          pc_genss.do_movsx.regcode i64 
    procentry                 
    push           pc_genss.do_movsx.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #8731      i64 
    setargs                   1 0
    push           "movsx not reg" u64 
    callproc       &pci_mcl.axerror 
#8731: 
    push           pc_genss.do_movsx.a u64 
    push           8          
    pushptroff                u8 1 0
    push           8          i64 
    jumpne         #8732      i64 
    push           pc_genss.do_movsx.b u64 
    push           8          
    pushptroff                u8 1 0
    push           4          i64 
    jumpne         #8732      i64 
    push           pc_genss.do_movsx.opc i64 
    push           190        i64 
    jumpne         #8733      i64 
    setargs                   2 0
    push           pc_genss.do_movsx.b u64 
    push           pc_genss.do_movsx.a u64 
    callproc       &pc_genss.do_movsxd 
    jump           #8734      
#8733: 
    push           &pci_mcl.regtable 
    push           pc_genss.do_movsx.a u64 
    push           10         
    pushptroff                u8 1 0
    addrefoff                 block:128 128 -128
    push           4          i64 
    pushptroff                u64 8 -8
    pop            pc_genss.do_movsx.a u64 
    setargs                   2 0
    push           pc_genss.do_movsx.b u64 
    push           pc_genss.do_movsx.a u64 
    callproc       &pc_genss.do_mov 
#8734: 
    jump           #8735      
#8732: 
    push           pc_genss.do_movsx.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #8736      i64 
    push           pc_genss.do_movsx.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_movsx.b u64 
    push           8          
    pushptroff                u8 1 0
    jumpgt         #8737      i64 
#8736: 
    setargs                   1 0
    push           "movsx size error" u64 
    callproc       &pci_mcl.axerror 
#8737: 
    push           pc_genss.do_movsx.opc i64 
    push           182        i64 
    jumpne         #8738      i64 
    push           pc_genss.do_movsx.b u64 
    push           8          
    pushptroff                u8 1 0
    push           4          i64 
    jumpne         #8738      i64 
    setargs                   1 0
    push           "movsx 4=>8 bytes?" u64 
    callproc       &pci_mcl.axerror 
#8738: 
    push           pc_genss.do_movsx.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8739      i64 0
    push           3          i64 
    casejumpeq     #8740      i64 0
    popstack                  i64 
    jump           #8741      
#8739: 
    jump           #8742      
#8740: 
    push           pc_genss.do_movsx.b u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #8743      i64 
    setargs                   1 0
    push           "movsx need size prefix" u64 
    callproc       &pci_mcl.axerror 
#8743: 
    push           pc_genss.do_movsx.b u64 
    push           8          
    pushptroff                u8 1 0
    push           8          i64 
    jumpne         #8744      i64 
    setargs                   1 0
    push           "movsx size 8" u64 
    callproc       &pci_mcl.axerror 
#8744: 
    jump           #8742      
#8741: 
    setargs                   1 0
    push           "movsx not reg/mem" u64 
    callproc       &pci_mcl.axerror 
#8742: 
    setargs                   1 0
    push           pc_genss.do_movsx.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_movsx.regcode i64 
    setargs                   2 0
    push           pc_genss.do_movsx.regcode i64 
    push           pc_genss.do_movsx.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_movsx.am i64 
    setargs                   1 0
    push           pc_genss.do_movsx.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   1 0
    push           pc_genss.do_movsx.b u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    startmult                 
    push           pc_genss.do_movsx.b u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8745      i64 
    push           pc_genss.do_movsx.opc i64 
    resetmult                 
    jump           #8746      
#8745: 
    push           pc_genss.do_movsx.opc i64 
    push           1          i64 
    add                       i64 
    endmult                   
#8746: 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_movsx.am i64 
    push           pc_genss.do_movsx.b u64 
    callproc       &pc_genss.genamode 
#8735: 
    retproc                   
End


Proc pc_genss.checkhighreg:
    param          pc_genss.checkhighreg.a u64 
    procentry                 
    push           pc_genss.checkhighreg.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8748      i64 
    push           pc_genss.checkhighreg.a u64 
    push           10         
    pushptroff                u8 1 0
    push           6          i64 
    casejumpeq     #8749      i64 0
    push           4          i64 
    casejumpeq     #8749      i64 0
    push           15         i64 
    casejumpeq     #8749      i64 0
    push           16         i64 
    casejumpeq     #8749      i64 0
    popstack                  i64 
    jump           #8750      
#8749: 
    push           &pc_genss.rex 
    push           64         i64 
    iorto                     i64 
    jump           #8751      
#8750: 
#8751: 
#8748: 
#8752: 
    retproc                   
End


Proc pc_genss.do_exch:
    param          pc_genss.do_exch.a u64 
    param          pc_genss.do_exch.b u64 
    local          pc_genss.do_exch.regcode i64 
    local          pc_genss.do_exch.am i64 
    procentry                 
    push           pc_genss.do_exch.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8754      i64 
    push           pc_genss.do_exch.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8754      i64 
    push           pc_genss.do_exch.a u64 
    push           10         
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #8755      i64 
    push           pc_genss.do_exch.b u64 
    push           10         
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8754      i64 
#8755: 
    push           pc_genss.do_exch.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #8754      i64 
    push           pc_genss.do_exch.a u64 
    push           10         
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #8756      i64 
    push           &pc_genss.do_exch.a 
    push           &pc_genss.do_exch.b 
    swap                      u64 
#8756: 
    push           pc_genss.do_exch.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_exch.b u64 
    push           8          
    pushptroff                u8 1 0
    jumpeq         #8757      i64 
    setargs                   1 0
    push           "exch size" u64 
    callproc       &pci_mcl.axerror 
#8757: 
    setargs                   1 0
    push           pc_genss.do_exch.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   1 0
    push           pc_genss.do_exch.b u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcodeb i64 
    pop            pc_genss.do_exch.regcode i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           144        i64 
    push           pc_genss.do_exch.regcode i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    jump           #8758      
#8754: 
    push           pc_genss.do_exch.a u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #8759      i64 
    push           &pc_genss.do_exch.a 
    push           &pc_genss.do_exch.b 
    swap                      u64 
#8759: 
    push           pc_genss.do_exch.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8760      i64 
    push           pc_genss.do_exch.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #8761      i64 
    push           pc_genss.do_exch.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpeq         #8761      i64 
#8760: 
    setargs                   1 0
    push           "exch opnds" u64 
    callproc       &pci_mcl.axerror 
#8761: 
    push           pc_genss.do_exch.b u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #8762      i64 
    push           pc_genss.do_exch.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #8762      i64 
    push           pc_genss.do_exch.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_exch.b u64 
    push           8          
    popptroff                 u8 1 0
#8762: 
    push           pc_genss.do_exch.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_exch.b u64 
    push           8          
    pushptroff                u8 1 0
    jumpeq         #8763      i64 
    setargs                   1 0
    push           "exch size" u64 
    callproc       &pci_mcl.axerror 
#8763: 
    push           pc_genss.do_exch.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8764      i64 
    setargs                   1 0
    push           pc_genss.do_exch.a u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_exch.b u64 
    callproc       &pc_genss.checkhighreg 
#8764: 
    setargs                   1 0
    push           pc_genss.do_exch.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_exch.regcode i64 
    setargs                   2 0
    push           pc_genss.do_exch.regcode i64 
    push           pc_genss.do_exch.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_exch.am i64 
    setargs                   1 0
    push           pc_genss.do_exch.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    startmult                 
    push           pc_genss.do_exch.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8765      i64 
    push           134        i64 
    resetmult                 
    jump           #8766      
#8765: 
    push           135        i64 
    endmult                   
#8766: 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_exch.am i64 
    push           pc_genss.do_exch.b u64 
    callproc       &pc_genss.genamode 
#8758: 
    retproc                   
End


Proc pc_genss.do_movsxd:
    param          pc_genss.do_movsxd.a u64 
    param          pc_genss.do_movsxd.b u64 
    local          pc_genss.do_movsxd.regcode i64 
    local          pc_genss.do_movsxd.am i64 
    procentry                 
    push           pc_genss.do_movsxd.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #8768      i64 
    push           pc_genss.do_movsxd.b u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #8768      i64 
    push           4          i64 
    push           pc_genss.do_movsxd.b u64 
    push           8          
    popptroff                 u8 1 0
#8768: 
    push           pc_genss.do_movsxd.a u64 
    push           8          
    pushptroff                u8 1 0
    push           8          i64 
    jumpne         #8769      i64 
    push           pc_genss.do_movsxd.b u64 
    push           8          
    pushptroff                u8 1 0
    push           4          i64 
    jumple         #8770      i64 
#8769: 
    setargs                   1 0
    push           "movsxd size" u64 
    callproc       &pci_mcl.axerror 
#8770: 
    push           pc_genss.do_movsxd.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8771      i64 
    push           pc_genss.do_movsxd.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #8772      i64 
    push           pc_genss.do_movsxd.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpeq         #8772      i64 
#8771: 
    setargs                   1 0
    push           "movsxd opnds" u64 
    callproc       &pci_mcl.axerror 
#8772: 
    setargs                   1 0
    push           pc_genss.do_movsxd.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_movsxd.regcode i64 
    setargs                   2 0
    push           pc_genss.do_movsxd.regcode i64 
    push           pc_genss.do_movsxd.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_movsxd.am i64 
    setargs                   1 0
    push           pc_genss.do_movsxd.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           99         i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_movsxd.am i64 
    push           pc_genss.do_movsxd.b u64 
    callproc       &pc_genss.genamode 
#8773: 
    retproc                   
End


Proc pc_genss.do_imul2:
    param          pc_genss.do_imul2.a u64 
    param          pc_genss.do_imul2.b u64 
    local          pc_genss.do_imul2.regcode i64 
    local          pc_genss.do_imul2.am i64 
    local          pc_genss.do_imul2.opc i64 
    local          pc_genss.do_imul2.value i64 
    procentry                 
    push           pc_genss.do_imul2.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #8775      i64 
    setargs                   1 0
    push           "imul2 opnds" u64 
    callproc       &pci_mcl.axerror 
#8775: 
    push           pc_genss.do_imul2.b u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #8776      i64 
    push           pc_genss.do_imul2.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_imul2.b u64 
    push           8          
    popptroff                 u8 1 0
#8776: 
    push           pc_genss.do_imul2.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8777      i64 
    setargs                   1 0
    push           "imul2 byte" u64 
    callproc       &pci_mcl.axerror 
#8777: 
    push           pc_genss.do_imul2.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8778      i64 0
    push           3          i64 
    casejumpeq     #8778      i64 0
    push           2          i64 
    casejumpeq     #8779      i64 0
    popstack                  i64 
    jump           #8780      
#8778: 
    push           pc_genss.do_imul2.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_imul2.b u64 
    push           8          
    pushptroff                u8 1 0
    jumpeq         #8781      i64 
    setargs                   1 0
    push           "imul2 size" u64 
    callproc       &pci_mcl.axerror 
#8781: 
    setargs                   1 0
    push           pc_genss.do_imul2.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_imul2.regcode i64 
    setargs                   2 0
    push           pc_genss.do_imul2.regcode i64 
    push           pc_genss.do_imul2.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_imul2.am i64 
    setargs                   1 0
    push           pc_genss.do_imul2.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           175        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_imul2.am i64 
    push           pc_genss.do_imul2.b u64 
    callproc       &pc_genss.genamode 
    jump           #8782      
#8779: 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_imul2.b u64 
    callfn         &pc_genss.getdef u64 
    jumpfalse      #8783      u64 
    setargs                   1 0
    push           "mul/label" u64 
    callproc       &pci_mcl.axerror 
#8783: 
    push           pc_genss.do_imul2.b u64 
    pushptr                   i64 
    pop            pc_genss.do_imul2.value i64 
    setargs                   1 0
    push           pc_genss.do_imul2.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_imul2.regcode i64 
    setargs                   1 0
    push           pc_genss.do_imul2.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcodeb i64 
    pop            pc_genss.do_imul2.regcode i64 
    push           192        i64 
    push           pc_genss.do_imul2.regcode i64 
    push           3          i64 
    shl                       i64 
    add                       i64 
    push           pc_genss.do_imul2.regcode i64 
    add                       i64 
    pop            pc_genss.do_imul2.opc i64 
    setargs                   1 0
    push           pc_genss.do_imul2.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    push           -128       i64 
    push           pc_genss.do_imul2.value i64 
    jumpgt         #8784      i64 
    push           pc_genss.do_imul2.value i64 
    push           127        i64 
    jumpgt         #8784      i64 
    setargs                   1 0
    push           107        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_imul2.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_imul2.value i64 
    callproc       &pc_genss.genbyte 
    jump           #8785      
#8784: 
    push           pc_genss.do_imul2.a u64 
    push           8          
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #8786      i64 
    setargs                   1 0
    push           105        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_imul2.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_imul2.value i64 
    callproc       &pc_genss.genword 
    jump           #8785      
#8786: 
    setargs                   1 0
    push           105        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_imul2.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_imul2.value i64 
    callproc       &pc_genss.gendword 
#8785: 
    jump           #8782      
#8780: 
    setargs                   1 0
    push           "imul2 opnds" u64 
    callproc       &pci_mcl.axerror 
#8782: 
#8787: 
    retproc                   
End


Proc pc_genss.do_shift:
    param          pc_genss.do_shift.a u64 
    param          pc_genss.do_shift.b u64 
    param          pc_genss.do_shift.opc i64 
    local          pc_genss.do_shift.am i64 
    local          pc_genss.do_shift.w i64 
    procentry                 
    push           pc_genss.do_shift.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #8789      i64 
    push           pc_genss.do_shift.a u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpeq         #8789      i64 
    setargs                   1 0
    push           "shift opnds1?" u64 
    callproc       &pci_mcl.axerror 
#8789: 
    setargs                   2 0
    push           pc_genss.do_shift.opc i64 
    push           pc_genss.do_shift.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_shift.am i64 
    setargs                   1 0
    push           pc_genss.do_shift.a u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_shift.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    startmult                 
    push           pc_genss.do_shift.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8790      i64 
    push           0          i64 
    resetmult                 
    jump           #8791      
#8790: 
    push           1          i64 
    endmult                   
#8791: 
    pop            pc_genss.do_shift.w i64 
    push           pc_genss.do_shift.b u64 
    push           9          
    pushptroff                u8 1 0
    push           2          i64 
    casejumpeq     #8792      i64 0
    push           1          i64 
    casejumpeq     #8793      i64 0
    popstack                  i64 
    jump           #8794      
#8792: 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_shift.b u64 
    callfn         &pc_genss.getdef u64 
    jumpfalse      #8795      u64 
    setargs                   1 0
    push           "shift/label" u64 
    callproc       &pci_mcl.axerror 
#8795: 
    push           pc_genss.do_shift.b u64 
    pushptr                   i64 
    push           1          i64 
    jumpne         #8796      i64 
    setargs                   1 0
    push           208        i64 
    push           pc_genss.do_shift.w i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_shift.am i64 
    push           pc_genss.do_shift.a u64 
    callproc       &pc_genss.genamode 
    jump           #8797      
#8796: 
    setargs                   1 0
    push           192        i64 
    push           pc_genss.do_shift.w i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_shift.am i64 
    push           pc_genss.do_shift.a u64 
    callproc       &pc_genss.genamode 
    setargs                   1 0
    push           pc_genss.do_shift.b u64 
    pushptr                   i64 
    callproc       &pc_genss.genbyte 
#8797: 
    jump           #8798      
#8793: 
    push           pc_genss.do_shift.b u64 
    push           10         
    pushptroff                u8 1 0
    push           11         i64 
    jumpne         #8799      i64 
    push           pc_genss.do_shift.b u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #8800      i64 
#8799: 
    setargs                   1 0
    push           "cl or b10 needed" u64 
    callproc       &pci_mcl.axerror 
#8800: 
    setargs                   1 0
    push           210        i64 
    push           pc_genss.do_shift.w i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_shift.am i64 
    push           pc_genss.do_shift.a u64 
    callproc       &pc_genss.genamode 
    jump           #8798      
#8794: 
    setargs                   1 0
    push           "shift opnds2?" u64 
    callproc       &pci_mcl.axerror 
#8798: 
#8801: 
    retproc                   
End


Proc pc_genss.do_test:
    param          pc_genss.do_test.a u64 
    param          pc_genss.do_test.b u64 
    local          pc_genss.do_test.value i64 
    local          pc_genss.do_test.opc i64 
    local          pc_genss.do_test.am i64 
    local          pc_genss.do_test.regcode i64 
    procentry                 
    push           pc_genss.do_test.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8803      i64 
    push           pc_genss.do_test.a u64 
    push           10         
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8803      i64 
    push           pc_genss.do_test.b u64 
    push           9          
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #8803      i64 
    push           pc_genss.do_test.b u64 
    pushptr                   i64 
    pop            pc_genss.do_test.value i64 
    push           pc_genss.do_test.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8804      i64 0
    push           2          i64 
    casejumpeq     #8805      i64 0
    push           4          i64 
    casejumpeq     #8806      i64 0
    popstack                  i64 
    jump           #8807      
#8804: 
    setargs                   1 0
    push           168        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_test.value i64 
    callproc       &pc_genss.genbyte 
    jump           #8808      
#8805: 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           169        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_test.value i64 
    callproc       &pc_genss.genword 
    jump           #8808      
#8806: 
    setargs                   1 0
    push           169        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_test.value i64 
    callproc       &pc_genss.gendword 
    jump           #8808      
#8807: 
    setargs                   1 0
    push           72         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           169        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_test.value i64 
    callproc       &pc_genss.gendword 
#8808: 
    jump           #8809      
#8803: 
    push           pc_genss.do_test.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #8810      i64 
    push           pc_genss.do_test.a u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #8811      i64 
#8810: 
    push           pc_genss.do_test.b u64 
    push           9          
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #8811      i64 
    startmult                 
    push           pc_genss.do_test.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8812      i64 
    push           246        i64 
    resetmult                 
    jump           #8813      
#8812: 
    push           247        i64 
    endmult                   
#8813: 
    pop            pc_genss.do_test.opc i64 
    push           pc_genss.do_test.b u64 
    pushptr                   i64 
    pop            pc_genss.do_test.value i64 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_test.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_test.am i64 
    setargs                   1 0
    push           pc_genss.do_test.a u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_test.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           pc_genss.do_test.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_test.am i64 
    push           pc_genss.do_test.a u64 
    callproc       &pc_genss.genamode 
    push           pc_genss.do_test.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8814      i64 0
    push           2          i64 
    casejumpeq     #8815      i64 0
    popstack                  i64 
    jump           #8816      
#8814: 
    setargs                   1 0
    push           pc_genss.do_test.value i64 
    callproc       &pc_genss.genbyte 
    jump           #8817      
#8815: 
    setargs                   1 0
    push           pc_genss.do_test.value i64 
    callproc       &pc_genss.genword 
    jump           #8817      
#8816: 
    setargs                   1 0
    push           pc_genss.do_test.value i64 
    callproc       &pc_genss.gendword 
#8817: 
    jump           #8809      
#8811: 
    push           pc_genss.do_test.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8818      i64 
    push           pc_genss.do_test.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #8819      i64 
    push           pc_genss.do_test.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #8818      i64 
#8819: 
!doregmem::
#8820: 
    setargs                   1 0
    push           pc_genss.do_test.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_test.regcode i64 
    setargs                   2 0
    push           pc_genss.do_test.regcode i64 
    push           pc_genss.do_test.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_test.am i64 
    setargs                   1 0
    push           pc_genss.do_test.a u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_test.b u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_test.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    startmult                 
    push           pc_genss.do_test.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8821      i64 
    push           132        i64 
    resetmult                 
    jump           #8822      
#8821: 
    push           133        i64 
    endmult                   
#8822: 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_test.am i64 
    push           pc_genss.do_test.b u64 
    callproc       &pc_genss.genamode 
    jump           #8809      
#8818: 
    push           pc_genss.do_test.a u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #8823      i64 
    push           pc_genss.do_test.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8823      i64 
    push           &pc_genss.do_test.a 
    push           &pc_genss.do_test.b 
    swap                      u64 
    jump           #8820      
    jump           #8809      
#8823: 
    setargs                   1 0
    push           "test opnds" u64 
    callproc       &pci_mcl.axerror 
#8809: 
#8824: 
    retproc                   
End


Proc pc_genss.do_loop:
    param          pc_genss.do_loop.a u64 
    param          pc_genss.do_loop.opc i64 
    local          pc_genss.do_loop.offset i64 
    procentry                 
    setargs                   2 0
    setargs                   1 0
    push           9          i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           1          i64 
    add                       i64 
    setargs                   2 0
    push           1          i64 
    push           pc_genss.do_loop.a u64 
    callfn         &pc_genss.getdef u64 
    callfn         &pc_genss.getrel32 i64 
    pop            pc_genss.do_loop.offset i64 
    push           pc_genss.do_loop.offset i64 
    push           0          i64 
    jumpge         #8826      i64 
    push           pc_genss.do_loop.offset i64 
    push           -126       i64 
    jumpge         #8827      i64 
    setargs                   1 0
    push           "loop jmp out of range" u64 
    callproc       &pci_mcl.axerror 
#8827: 
    setargs                   1 0
    push           pc_genss.do_loop.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_loop.offset i64 
    callproc       &pc_genss.genbyte 
    jump           #8828      
#8826: 
    setargs                   1 0
    push           "Can't do loopxx fwd jump" u64 
    callproc       &pci_mcl.axerror 
#8828: 
#8829: 
    retproc                   
End


Proc pc_genss.do_jcxz:
    param          pc_genss.do_jcxz.a u64 
    param          pc_genss.do_jcxz.opsize i64 
    local          pc_genss.do_jcxz.offset i64 
    procentry                 
    setargs                   2 0
    setargs                   1 0
    push           10         i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           1          i64 
    add                       i64 
    setargs                   2 0
    push           1          i64 
    push           pc_genss.do_jcxz.a u64 
    callfn         &pc_genss.getdef u64 
    callfn         &pc_genss.getrel32 i64 
    pop            pc_genss.do_jcxz.offset i64 
    push           pc_genss.do_jcxz.offset i64 
    push           0          i64 
    jumpge         #8831      i64 
    push           pc_genss.do_jcxz.offset i64 
    push           -126       i64 
    jumpge         #8832      i64 
    setargs                   1 0
    push           "jcxz jmp out of range" u64 
    callproc       &pci_mcl.axerror 
#8832: 
    push           pc_genss.do_jcxz.opsize i64 
    push           4          i64 
    jumpne         #8833      i64 
    setargs                   1 0
    push           103        i64 
    callproc       &pc_genss.genbyte 
#8833: 
    setargs                   1 0
    push           227        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_jcxz.offset i64 
    callproc       &pc_genss.genbyte 
    jump           #8834      
#8831: 
    setargs                   1 0
    push           "Can't do jcxz fwd jump" u64 
    callproc       &pci_mcl.axerror 
#8834: 
#8835: 
    retproc                   
End


Proc pc_genss.do_setcc:
    param          pc_genss.do_setcc.cond i64 
    param          pc_genss.do_setcc.a u64 
    local          pc_genss.do_setcc.am i64 
    procentry                 
    push           pc_genss.do_setcc.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #8837      i64 
    push           pc_genss.do_setcc.a u64 
    push           10         
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #8838      i64 
#8837: 
    push           pc_genss.do_setcc.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumple         #8839      i64 
#8838: 
    setargs                   1 0
    push           "setcc opnd/size" u64 
    callproc       &pci_mcl.axerror 
#8839: 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_setcc.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_setcc.am i64 
    setargs                   1 0
    push           pc_genss.do_setcc.a u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           144        i64 
    push           pc_genss.do_setcc.cond i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_setcc.am i64 
    push           pc_genss.do_setcc.a u64 
    callproc       &pc_genss.genamode 
#8840: 
    retproc                   
End


Proc pc_genss.do_movxmm:
    param          pc_genss.do_movxmm.a u64 
    param          pc_genss.do_movxmm.b u64 
    param          pc_genss.do_movxmm.size i64 
    local          pc_genss.do_movxmm.am i64 
    local          pc_genss.do_movxmm.regcode i64 
    local          pc_genss.do_movxmm.regcode1 i64 
    local          pc_genss.do_movxmm.regcode2 i64 
    procentry                 
    push           pc_genss.do_movxmm.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8842      i64 0
    push           5          i64 
    casejumpeq     #8843      i64 0
    push           3          i64 
    casejumpeq     #8844      i64 0
    popstack                  i64 
    jump           #8845      
#8842: 
    push           pc_genss.do_movxmm.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    casejumpeq     #8846      i64 0
    popstack                  i64 
    jump           #8847      
#8846: 
    push           pc_genss.do_movxmm.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_movxmm.size i64 
    jumpeq         #8848      i64 
    setargs                   1 0
    push           "1:movdq size" u64 
    callproc       &pci_mcl.axerror 
#8848: 
    setargs                   1 0
    push           pc_genss.do_movxmm.b u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_movxmm.regcode i64 
    setargs                   2 0
    push           pc_genss.do_movxmm.regcode i64 
    push           pc_genss.do_movxmm.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_movxmm.am i64 
    setargs                   1 0
    push           pc_genss.do_movxmm.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           126        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_movxmm.am i64 
    push           pc_genss.do_movxmm.b u64 
    callproc       &pc_genss.genamode 
    jump           #8849      
#8847: 
    setargs                   1 0
    push           "movdq reg,?" u64 
    callproc       &pci_mcl.axerror 
#8849: 
    jump           #8850      
#8843: 
    push           pc_genss.do_movxmm.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8851      i64 0
    push           5          i64 
    casejumpeq     #8852      i64 0
    push           3          i64 
    casejumpeq     #8853      i64 0
    popstack                  i64 
    jump           #8854      
#8851: 
    push           pc_genss.do_movxmm.b u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_movxmm.size i64 
    jumpeq         #8855      i64 
    setargs                   1 0
    push           "3:movdq size" u64 
    callproc       &pci_mcl.axerror 
#8855: 
    setargs                   1 0
    push           pc_genss.do_movxmm.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_movxmm.regcode i64 
    setargs                   2 0
    push           pc_genss.do_movxmm.regcode i64 
    push           pc_genss.do_movxmm.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_movxmm.am i64 
    setargs                   1 0
    push           pc_genss.do_movxmm.b u64 
    callproc       &pc_genss.setopsize 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           110        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_movxmm.am i64 
    push           pc_genss.do_movxmm.a u64 
    callproc       &pc_genss.genamode 
    jump           #8856      
#8852: 
    setargs                   1 0
    push           pc_genss.do_movxmm.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_movxmm.regcode1 i64 
    setargs                   1 0
    push           pc_genss.do_movxmm.b u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcodebx i64 
    pop            pc_genss.do_movxmm.regcode2 i64 
    setargs                   1 0
    push           243        i64 
    callproc       &pc_genss.genbyte 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           126        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           192        i64 
    push           pc_genss.do_movxmm.regcode1 i64 
    push           3          i64 
    shl                       i64 
    add                       i64 
    push           pc_genss.do_movxmm.regcode2 i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    jump           #8856      
#8853: 
    push           pc_genss.do_movxmm.b u64 
    push           8          
    pushptroff                u8 1 0
    jumpfalse      #8857      i64 
    push           pc_genss.do_movxmm.b u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_movxmm.size i64 
    jumpeq         #8857      i64 
    setargs                   1 0
    push           "4:movdq size" u64 
    callproc       &pci_mcl.axerror 
#8857: 
    setargs                   1 0
    push           pc_genss.do_movxmm.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_movxmm.regcode i64 
    setargs                   2 0
    push           pc_genss.do_movxmm.regcode i64 
    push           pc_genss.do_movxmm.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_movxmm.am i64 
    push           pc_genss.do_movxmm.size i64 
    push           4          i64 
    jumpne         #8858      i64 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           110        i64 
    callproc       &pc_genss.genbyte 
    jump           #8859      
#8858: 
    setargs                   1 0
    push           243        i64 
    callproc       &pc_genss.genbyte 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           126        i64 
    callproc       &pc_genss.genbyte 
#8859: 
    setargs                   2 0
    push           pc_genss.do_movxmm.am i64 
    push           pc_genss.do_movxmm.b u64 
    callproc       &pc_genss.genamode 
    jump           #8856      
#8854: 
    setargs                   1 0
    push           "movdq xreg,?" u64 
    callproc       &pci_mcl.axerror 
#8856: 
    jump           #8850      
#8844: 
    push           pc_genss.do_movxmm.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    casejumpeq     #8860      i64 0
    popstack                  i64 
    jump           #8861      
#8860: 
    push           pc_genss.do_movxmm.a u64 
    push           8          
    pushptroff                u8 1 0
    jumpfalse      #8862      i64 
    push           pc_genss.do_movxmm.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_movxmm.size i64 
    jumpeq         #8862      i64 
    setargs                   1 0
    push           "5:movdq size" u64 
    callproc       &pci_mcl.axerror 
#8862: 
    setargs                   1 0
    push           pc_genss.do_movxmm.b u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_movxmm.regcode i64 
    setargs                   2 0
    push           pc_genss.do_movxmm.regcode i64 
    push           pc_genss.do_movxmm.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_movxmm.am i64 
    push           pc_genss.do_movxmm.size i64 
    push           4          i64 
    jumpne         #8863      i64 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           126        i64 
    callproc       &pc_genss.genbyte 
    jump           #8864      
#8863: 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           214        i64 
    callproc       &pc_genss.genbyte 
#8864: 
    setargs                   2 0
    push           pc_genss.do_movxmm.am i64 
    push           pc_genss.do_movxmm.a u64 
    callproc       &pc_genss.genamode 
    jump           #8865      
#8861: 
    setargs                   1 0
    push           "movdq mem,?" u64 
    callproc       &pci_mcl.axerror 
#8865: 
    jump           #8850      
#8845: 
    setargs                   1 0
    push           "movdq opnds" u64 
    callproc       &pci_mcl.axerror 
#8850: 
#8866: 
    retproc                   
End


Proc pc_genss.do_arithxmm:
    param          pc_genss.do_arithxmm.a u64 
    param          pc_genss.do_arithxmm.b u64 
    param          pc_genss.do_arithxmm.prefix i64 
    param          pc_genss.do_arithxmm.opc i64 
    local          pc_genss.do_arithxmm.am i64 
    local          pc_genss.do_arithxmm.regcode i64 
    procentry                 
    push           pc_genss.do_arithxmm.a u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #8868      i64 
    push           pc_genss.do_arithxmm.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpeq         #8869      i64 
    push           pc_genss.do_arithxmm.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpeq         #8869      i64 
#8868: 
    setargs                   1 0
    push           "arithxmm opnds" u64 
    callproc       &pci_mcl.axerror 
#8869: 
    push           pc_genss.do_arithxmm.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #8870      i64 
    setargs                   1 0
    push           pc_genss.do_arithxmm.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_arithxmm.regcode i64 
    setargs                   2 0
    push           pc_genss.do_arithxmm.regcode i64 
    push           pc_genss.do_arithxmm.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_arithxmm.am i64 
    push           pc_genss.do_arithxmm.prefix i64 
    jumpfalse      #8871      i64 
    setargs                   1 0
    push           pc_genss.do_arithxmm.prefix i64 
    callproc       &pc_genss.genbyte 
#8871: 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_arithxmm.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_arithxmm.am i64 
    push           pc_genss.do_arithxmm.a u64 
    callproc       &pc_genss.genamode 
    jump           #8872      
#8870: 
    setargs                   1 0
    push           pc_genss.do_arithxmm.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_arithxmm.regcode i64 
    setargs                   2 0
    push           pc_genss.do_arithxmm.regcode i64 
    push           pc_genss.do_arithxmm.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_arithxmm.am i64 
    push           pc_genss.do_arithxmm.prefix i64 
    jumpfalse      #8873      i64 
    setargs                   1 0
    push           pc_genss.do_arithxmm.prefix i64 
    callproc       &pc_genss.genbyte 
#8873: 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_arithxmm.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_arithxmm.am i64 
    push           pc_genss.do_arithxmm.b u64 
    callproc       &pc_genss.genamode 
#8872: 
#8874: 
    retproc                   
End


Proc pc_genss.do_logicxmm:
    param          pc_genss.do_logicxmm.a u64 
    param          pc_genss.do_logicxmm.b u64 
    param          pc_genss.do_logicxmm.opc i64 
    param          pc_genss.do_logicxmm.size i64 
    local          pc_genss.do_logicxmm.am i64 
    local          pc_genss.do_logicxmm.regcode i64 
    procentry                 
    push           pc_genss.do_logicxmm.a u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #8876      i64 
    push           pc_genss.do_logicxmm.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpeq         #8877      i64 
    push           pc_genss.do_logicxmm.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpeq         #8877      i64 
#8876: 
    setargs                   1 0
    push           "logicxmm opnds" u64 
    callproc       &pci_mcl.axerror 
#8877: 
    push           pc_genss.do_logicxmm.size i64 
    push           8          i64 
    jumpne         #8878      i64 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
#8878: 
    push           pc_genss.do_logicxmm.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #8879      i64 
    setargs                   1 0
    push           pc_genss.do_logicxmm.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_logicxmm.regcode i64 
    setargs                   2 0
    push           pc_genss.do_logicxmm.regcode i64 
    push           pc_genss.do_logicxmm.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_logicxmm.am i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_logicxmm.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_logicxmm.am i64 
    push           pc_genss.do_logicxmm.b u64 
    callproc       &pc_genss.genamode 
    jump           #8880      
#8879: 
    setargs                   1 0
    push           pc_genss.do_logicxmm.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_logicxmm.regcode i64 
    setargs                   2 0
    push           pc_genss.do_logicxmm.regcode i64 
    push           pc_genss.do_logicxmm.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_logicxmm.am i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_logicxmm.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_logicxmm.am i64 
    push           pc_genss.do_logicxmm.b u64 
    callproc       &pc_genss.genamode 
#8880: 
#8881: 
    retproc                   
End


Proc pc_genss.do_convertfloat:
    param          pc_genss.do_convertfloat.a u64 
    param          pc_genss.do_convertfloat.b u64 
    param          pc_genss.do_convertfloat.prefix i64 
    local          pc_genss.do_convertfloat.am i64 
    local          pc_genss.do_convertfloat.regcode i64 
    procentry                 
    push           pc_genss.do_convertfloat.a u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #8883      i64 
    push           pc_genss.do_convertfloat.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpeq         #8884      i64 
    push           pc_genss.do_convertfloat.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpeq         #8884      i64 
#8883: 
    setargs                   1 0
    push           "convertfloat opnds" u64 
    callproc       &pci_mcl.axerror 
#8884: 
    setargs                   1 0
    push           pc_genss.do_convertfloat.prefix i64 
    callproc       &pc_genss.genbyte 
    push           pc_genss.do_convertfloat.a u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #8885      i64 
    setargs                   1 0
    push           pc_genss.do_convertfloat.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_convertfloat.regcode i64 
    setargs                   2 0
    push           pc_genss.do_convertfloat.regcode i64 
    push           pc_genss.do_convertfloat.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_convertfloat.am i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           90         i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_convertfloat.am i64 
    push           pc_genss.do_convertfloat.b u64 
    callproc       &pc_genss.genamode 
    jump           #8886      
#8885: 
    setargs                   1 0
    push           pc_genss.do_convertfloat.b u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_convertfloat.regcode i64 
    setargs                   2 0
    push           pc_genss.do_convertfloat.regcode i64 
    push           pc_genss.do_convertfloat.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_convertfloat.am i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           90         i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_convertfloat.am i64 
    push           pc_genss.do_convertfloat.b u64 
    callproc       &pc_genss.genamode 
#8886: 
#8887: 
    retproc                   
End


Proc pc_genss.do_fix:
    param          pc_genss.do_fix.a u64 
    param          pc_genss.do_fix.b u64 
    param          pc_genss.do_fix.prefix i64 
    param          pc_genss.do_fix.opc i64 
    local          pc_genss.do_fix.am i64 
    local          pc_genss.do_fix.regcode i64 
    procentry                 
    push           pc_genss.do_fix.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8889      i64 
    push           pc_genss.do_fix.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpeq         #8890      i64 
    push           pc_genss.do_fix.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpeq         #8890      i64 
#8889: 
    setargs                   1 0
    push           "fix opnds" u64 
    callproc       &pci_mcl.axerror 
#8890: 
    setargs                   1 0
    push           pc_genss.do_fix.prefix i64 
    callproc       &pc_genss.genbyte 
    push           pc_genss.do_fix.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #8891      i64 
    setargs                   1 0
    push           pc_genss.do_fix.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_fix.regcode i64 
    setargs                   2 0
    push           pc_genss.do_fix.regcode i64 
    push           pc_genss.do_fix.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_fix.am i64 
    setargs                   1 0
    push           pc_genss.do_fix.a u64 
    callproc       &pc_genss.setopsize 
    jump           #8892      
#8891: 
    setargs                   1 0
    push           pc_genss.do_fix.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_fix.regcode i64 
    setargs                   2 0
    push           pc_genss.do_fix.regcode i64 
    push           pc_genss.do_fix.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_fix.am i64 
    setargs                   1 0
    push           pc_genss.do_fix.a u64 
    callproc       &pc_genss.setopsize 
#8892: 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_fix.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_fix.am i64 
    push           pc_genss.do_fix.b u64 
    callproc       &pc_genss.genamode 
#8893: 
    retproc                   
End


Proc pc_genss.do_float:
    param          pc_genss.do_float.a u64 
    param          pc_genss.do_float.b u64 
    param          pc_genss.do_float.prefix i64 
    local          pc_genss.do_float.am i64 
    local          pc_genss.do_float.regcode i64 
    procentry                 
    push           pc_genss.do_float.a u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #8895      i64 
    push           pc_genss.do_float.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #8896      i64 
    push           pc_genss.do_float.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpeq         #8896      i64 
#8895: 
    setargs                   1 0
    push           "float opnds" u64 
    callproc       &pci_mcl.axerror 
#8896: 
    push           pc_genss.do_float.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #8897      i64 
    push           pc_genss.do_float.b u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #8898      i64 
    push           4          i64 
    push           pc_genss.do_float.b u64 
    push           8          
    popptroff                 u8 1 0
#8898: 
    push           pc_genss.do_float.b u64 
    push           8          
    pushptroff                u8 1 0
    push           4          i64 
    jumpeq         #8899      i64 
    push           pc_genss.do_float.b u64 
    push           8          
    pushptroff                u8 1 0
    push           8          i64 
    jumpeq         #8899      i64 
    setargs                   1 0
    push           "float size" u64 
    callproc       &pci_mcl.axerror 
#8899: 
#8897: 
    setargs                   1 0
    push           pc_genss.do_float.prefix i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_float.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_float.regcode i64 
    setargs                   2 0
    push           pc_genss.do_float.regcode i64 
    push           pc_genss.do_float.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_float.am i64 
    setargs                   1 0
    push           pc_genss.do_float.b u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           42         i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_float.am i64 
    push           pc_genss.do_float.b u64 
    callproc       &pc_genss.genamode 
#8900: 
    retproc                   
End


Proc pc_genss.do_call:
    param          pc_genss.do_call.a u64 
    local          pc_genss.do_call.am i64 
    local          pc_genss.do_call.regcode i64 
    procentry                 
    push           pc_genss.do_call.a u64 
    push           9          
    pushptroff                u8 1 0
    push           2          i64 
    casejumpeq     #8902      i64 0
    popstack                  i64 
    jump           #8903      
#8902: 
    setargs                   1 0
    push           232        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_call.a u64 
    callproc       &pc_genss.genrel32 
    jump           #8904      
#8903: 
    push           pc_genss.do_call.a u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    casejumpeq     #8905      i64 0
    push           1          i64 
    casejumpeq     #8906      i64 0
    push           2          i64 
    casejumpeq     #8906      i64 0
    push           4          i64 
    casejumpeq     #8906      i64 0
    popstack                  i64 
    jump           #8907      
#8905: 
    push           8          i64 
    push           pc_genss.do_call.a u64 
    push           8          
    popptroff                 u8 1 0
    jump           #8908      
#8906: 
    setargs                   1 0
    push           "call[]size" u64 
    callproc       &pci_mcl.axerror 
    jump           #8908      
#8907: 
#8908: 
    setargs                   2 0
    push           2          i64 
    push           pc_genss.do_call.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_call.am i64 
    setargs                   1 0
    push           pc_genss.do_call.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   1 0
    push           pc_genss.do_call.a u64 
    callproc       &pc_genss.setaddrsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           255        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_call.am i64 
    push           pc_genss.do_call.a u64 
    callproc       &pc_genss.genamode 
#8904: 
#8909: 
    retproc                   
End


Proc pc_genss.do_jmp:
    param          pc_genss.do_jmp.a u64 
    param          pc_genss.do_jmp.m u64 
    local          pc_genss.do_jmp.am i64 
    local          pc_genss.do_jmp.regcode i64 
    local          pc_genss.do_jmp.offset i64 
    local          pc_genss.do_jmp.shortjmp i64 
    local          pc_genss.do_jmp.d u64 
    procentry                 
    push           pc_genss.do_jmp.a u64 
    push           9          
    pushptroff                u8 1 0
    push           2          i64 
    casejumpeq     #8911      i64 0
    popstack                  i64 
    jump           #8912      
#8911: 
    push           pc_genss.do_jmp.a u64 
    push           12         
    pushptroff                u8 1 0
    push           7          i64 
    casejumpeq     #8913      i64 0
    push           5          i64 
    casejumpeq     #8913      i64 0
    popstack                  i64 
    jump           #8914      
#8913: 
    setargs                   2 0
    push           1          i64 
    push           pc_genss.do_jmp.a u64 
    callfn         &pc_genss.getdef u64 
    pop            pc_genss.do_jmp.d u64 
    setargs                   2 0
    setargs                   1 0
    push           11         i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           1          i64 
    add                       i64 
    push           pc_genss.do_jmp.d u64 
    callfn         &pc_genss.getrel32 i64 
    push           pc_genss.do_jmp.a u64 
    push           14         
    pushptroff                i32 1 0
    add                       i64 
    pop            pc_genss.do_jmp.offset i64 
    push           pc_genss.do_jmp.offset i64 
    push           0          i64 
    jumpge         #8915      i64 
    push           pc_genss.do_jmp.offset i64 
    push           -126       i64 
    jumple         #8915      i64 
    setargs                   1 0
    push           235        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_jmp.offset i64 
    callproc       &pc_genss.genbyte 
    jump           #8916      
#8915: 
    push           0          i64 
    pop            pc_genss.do_jmp.shortjmp i64 
    push           pc_genss.do_jmp.offset i64 
    push           0          i64 
    jumple         #8917      i64 
    setargs                   2 0
    push           pc_genss.do_jmp.d u64 
    push           pc_genss.do_jmp.m u64 
    callfn         &pc_genss.checkshortjump i64 
    pop            pc_genss.do_jmp.shortjmp i64 
#8917: 
    push           pc_genss.do_jmp.shortjmp i64 
    jumptrue       #8918      i64 
    setargs                   1 0
    push           233        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_jmp.a u64 
    callproc       &pc_genss.genrel32 
    jump           #8919      
#8918: 
    setargs                   1 0
    push           235        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_jmp.a u64 
    callproc       &pc_genss.genrel8 
#8919: 
#8916: 
    jump           #8920      
#8914: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pci_mcl.valtypenames 
    push           pc_genss.do_jmp.a u64 
    push           12         
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "JMP/IMM NOT LABELNO" u64 
    callproc       &pci_mcl.axerror 
#8920: 
    jump           #8921      
#8912: 
    push           pc_genss.do_jmp.a u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    casejumpeq     #8922      i64 0
    push           1          i64 
    casejumpeq     #8923      i64 0
    push           2          i64 
    casejumpeq     #8923      i64 0
    push           4          i64 
    casejumpeq     #8923      i64 0
    popstack                  i64 
    jump           #8924      
#8922: 
    push           8          i64 
    push           pc_genss.do_jmp.a u64 
    push           8          
    popptroff                 u8 1 0
    jump           #8925      
#8923: 
    setargs                   1 0
    push           "jmp[]size" u64 
    callproc       &pci_mcl.axerror 
    jump           #8925      
#8924: 
#8925: 
    setargs                   2 0
    push           4          i64 
    push           pc_genss.do_jmp.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_jmp.am i64 
    setargs                   1 0
    push           pc_genss.do_jmp.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   1 0
    push           pc_genss.do_jmp.a u64 
    callproc       &pc_genss.setaddrsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           255        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_jmp.am i64 
    push           pc_genss.do_jmp.a u64 
    callproc       &pc_genss.genamode 
#8921: 
#8926: 
    retproc                   
End


Proc pc_genss.getcurrdatalen: i64
    param          pc_genss.getcurrdatalen.id i64 
    procentry                 
    push           pc_genss.currseg i64 
    push           3          i64 
    jumpne         #8928      i64 
    push           pci_mcl.ss_zdatalen i64 
    setret                    i64 
    jump           #8929      
#8928: 
    setargs                   1 0
    push           pc_genss.currdata u64 
    callfn         &pc_genss.bufferlength i64 
    setret                    i64 
    jump           #8929      
#8929: 
    retfn                     i64 
End


Proc pc_genss.do_cmovcc:
    param          pc_genss.do_cmovcc.cond i64 
    param          pc_genss.do_cmovcc.a u64 
    param          pc_genss.do_cmovcc.b u64 
    local          pc_genss.do_cmovcc.am i64 
    local          pc_genss.do_cmovcc.regcode i64 
    procentry                 
    push           pc_genss.do_cmovcc.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_cmovcc.b u64 
    push           8          
    pushptroff                u8 1 0
    jumpeq         #8931      i64 
    push           pc_genss.do_cmovcc.b u64 
    push           8          
    pushptroff                u8 1 0
    jumpfalse      #8931      i64 
    setargs                   1 0
    push           "3:Opnd size mismatch" u64 
    callproc       &pci_mcl.axerror 
#8931: 
    push           pc_genss.do_cmovcc.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8932      i64 
    setargs                   1 0
    push           "cmov/byte" u64 
    callproc       &pci_mcl.axerror 
#8932: 
    setargs                   1 0
    push           pc_genss.do_cmovcc.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_cmovcc.regcode i64 
    setargs                   2 0
    push           pc_genss.do_cmovcc.regcode i64 
    push           pc_genss.do_cmovcc.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_cmovcc.am i64 
    setargs                   1 0
    push           pc_genss.do_cmovcc.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           64         i64 
    push           pc_genss.do_cmovcc.cond i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_cmovcc.am i64 
    push           pc_genss.do_cmovcc.b u64 
    callproc       &pc_genss.genamode 
#8933: 
    retproc                   
End


Proc pc_genss.do_fmem:
    param          pc_genss.do_fmem.a u64 
    param          pc_genss.do_fmem.freal i64 
    param          pc_genss.do_fmem.code i64 
    local          pc_genss.do_fmem.am i64 
    local          pc_genss.do_fmem.regcode i64 
    local          pc_genss.do_fmem.mf i64 
    procentry                 
    push           pc_genss.do_fmem.a u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpeq         #8935      i64 
    setargs                   1 0
    push           "fmem/not mem" u64 
    callproc       &pci_mcl.axerror 
#8935: 
    push           pc_genss.do_fmem.freal i64 
    jumpfalse      #8936      i64 
    push           pc_genss.do_fmem.a u64 
    push           8          
    pushptroff                u8 1 0
    push           4          i64 
    casejumpeq     #8937      i64 0
    push           8          i64 
    casejumpeq     #8938      i64 0
    push           16         i64 
    casejumpeq     #8939      i64 0
    popstack                  i64 
    jump           #8940      
#8937: 
    push           0          i64 
    pop            pc_genss.do_fmem.mf i64 
    jump           #8941      
#8938: 
    push           2          i64 
    pop            pc_genss.do_fmem.mf i64 
    jump           #8941      
#8939: 
    push           1          i64 
    pop            pc_genss.do_fmem.mf i64 
    push           pc_genss.do_fmem.code i64 
    push           0          i64 
    casejumpeq     #8942      i64 0
    push           3          i64 
    casejumpeq     #8943      i64 0
    popstack                  i64 
    jump           #8944      
#8942: 
    push           5          i64 
    pop            pc_genss.do_fmem.code i64 
    jump           #8945      
#8943: 
    push           7          i64 
    pop            pc_genss.do_fmem.code i64 
    jump           #8945      
#8944: 
    setargs                   1 0
    push           "r80 not allowed" u64 
    callproc       &pci_mcl.axerror 
#8945: 
    jump           #8941      
#8940: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "SIZE="    u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_genss.do_fmem.a u64 
    push           8          
    pushptroff                u8 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "fmem size" u64 
    callproc       &pci_mcl.axerror 
#8941: 
    jump           #8946      
#8936: 
    push           pc_genss.do_fmem.a u64 
    push           8          
    pushptroff                u8 1 0
    push           2          i64 
    casejumpeq     #8947      i64 0
    push           4          i64 
    casejumpeq     #8948      i64 0
    push           8          i64 
    casejumpeq     #8949      i64 0
    popstack                  i64 
    jump           #8950      
#8947: 
    push           3          i64 
    pop            pc_genss.do_fmem.mf i64 
    jump           #8951      
#8948: 
    push           1          i64 
    pop            pc_genss.do_fmem.mf i64 
    jump           #8951      
#8949: 
    push           3          i64 
    pop            pc_genss.do_fmem.mf i64 
    push           pc_genss.do_fmem.code i64 
    push           0          i64 
    casejumpeq     #8952      i64 0
    push           3          i64 
    casejumpeq     #8953      i64 0
    popstack                  i64 
    jump           #8954      
#8952: 
    push           5          i64 
    pop            pc_genss.do_fmem.code i64 
    jump           #8955      
#8953: 
    push           7          i64 
    pop            pc_genss.do_fmem.code i64 
    jump           #8955      
#8954: 
    setargs                   1 0
    push           "fst i64?" u64 
    callproc       &pci_mcl.axerror 
#8955: 
    jump           #8951      
#8950: 
    setargs                   1 0
    push           "fmem int size" u64 
    callproc       &pci_mcl.axerror 
#8951: 
#8946: 
    setargs                   2 0
    push           pc_genss.do_fmem.code i64 
    push           pc_genss.do_fmem.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_fmem.am i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           217        i64 
    push           pc_genss.do_fmem.mf i64 
    push           1          i64 
    shl                       i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_fmem.am i64 
    push           pc_genss.do_fmem.a u64 
    callproc       &pc_genss.genamode 
#8956: 
    retproc                   
End


Proc pc_genss.genrel8:
    param          pc_genss.genrel8.a u64 
    local          pc_genss.genrel8.d u64 
    procentry                 
    setargs                   2 0
    push           1          i64 
    push           pc_genss.genrel8.a u64 
    callfn         &pc_genss.getdef u64 
    pop            pc_genss.genrel8.d u64 
    push           pc_genss.genrel8.d u64 
    push           29         
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8958      i64 
    setargs                   4 0
    push           0          i64 
    push           6          i64 
    setargs                   1 0
    push           3          i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           pc_genss.genrel8.d u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_genss.addfwdref u64 
    push           pc_genss.genrel8.d u64 
    push           8          
    popptroff                 u64 1 0
    setargs                   1 0
    push           0          i64 
    callproc       &pc_genss.genbyte 
    jump           #8959      
#8958: 
    setargs                   1 0
    push           "genrel8"  u64 
    callproc       &pci_mcl.axerror 
#8959: 
#8960: 
    retproc                   
End


Proc pc_genss.checkshortjump: i64
    param          pc_genss.checkshortjump.m u64 
    param          pc_genss.checkshortjump.d u64 
    local          pc_genss.checkshortjump.n i64 
    procentry                 
    push           0          i64 
    pop            pc_genss.checkshortjump.n i64 
    push           pc_genss.checkshortjump.m u64 
    pushptr                   u64 
    pop            pc_genss.checkshortjump.m u64 
    jump           #8962      
#8963: 
    push           pc_genss.checkshortjump.m u64 
    push           24         
    pushptroff                u8 1 0
    push           9          i64 
    casejumpeq     #8964      i64 0
    push           3          i64 
    casejumpeq     #8965      i64 0
    push           4          i64 
    casejumpeq     #8965      i64 0
    popstack                  i64 
    jump           #8966      
#8964: 
    push           pc_genss.checkshortjump.m u64 
    push           8          
    pushptroff                u64 1 0
    pushptr                   i64 
    push           pc_genss.checkshortjump.d u64 
    push           40         
    pushptroff                i32 1 0
    jumpne         #8967      i64 
    push           1          i64 
    setret                    i64 
    jump           #8968      
#8967: 
    jump           #8969      
#8965: 
    jump           #8969      
#8966: 
    push           &pc_genss.checkshortjump.n 
    incr                      i64 1
#8969: 
    push           pc_genss.checkshortjump.m u64 
    pushptr                   u64 
    pop            pc_genss.checkshortjump.m u64 
#8962: 
    push           pc_genss.checkshortjump.m u64 
    jumpfalse      #8970      u64 
    push           pc_genss.checkshortjump.n i64 
    push           8          i64 
    jumple         #8963      i64 
#8970: 
#8971: 
    push           0          i64 
    setret                    i64 
    jump           #8968      
#8968: 
    retfn                     i64 
End


Proc pc_genss.addfwdref: u64
    param          pc_genss.addfwdref.p u64 
    param          pc_genss.addfwdref.offset i64 
    param          pc_genss.addfwdref.reltype i64 
    param          pc_genss.addfwdref.seg i64 
    local          pc_genss.addfwdref.q u64 
    procentry                 
    setargs                   1 0
    push           16         i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pc_genss.addfwdref.q u64 
    push           pc_genss.addfwdref.p u64 
    push           pc_genss.addfwdref.q u64 
    push           0          
    popptroff                 u64 1 0
    push           pc_genss.addfwdref.offset i64 
    push           pc_genss.addfwdref.q u64 
    push           8          
    popptroff                 i32 1 0
    push           pc_genss.addfwdref.reltype i64 
    push           pc_genss.addfwdref.q u64 
    push           12         
    popptroff                 i16 1 0
    push           pc_genss.addfwdref.seg i64 
    push           pc_genss.addfwdref.q u64 
    push           14         
    popptroff                 i16 1 0
    push           pc_genss.addfwdref.q u64 
    setret                    u64 
    jump           #8973      
#8973: 
    retfn                     u64 
End


Proc pc_genss.switchseg:
    param          pc_genss.switchseg.newseg i64 
    procentry                 
    push           pc_genss.switchseg.newseg i64 
    push           pc_genss.currseg i64 
    jumpne         #8975      i64 
    jump           #8976      
#8975: 
    push           pc_genss.currseg i64 
    push           1          i64 
    casejumpeq     #8977      i64 0
    push           2          i64 
    casejumpeq     #8978      i64 0
    popstack                  i64 
    jump           #8979      
#8977: 
    push           pc_genss.currrelocs u64 
    pop            pci_mcl.ss_coderelocs u64 
    push           pc_genss.nrelocs i64 
    pop            pci_mcl.ss_ncoderelocs i64 
    jump           #8980      
#8978: 
    push           pc_genss.currrelocs u64 
    pop            pci_mcl.ss_idatarelocs u64 
    push           pc_genss.nrelocs i64 
    pop            pci_mcl.ss_nidatarelocs i64 
    jump           #8980      
#8979: 
#8980: 
    push           pc_genss.switchseg.newseg i64 
    pop            pc_genss.currseg i64 
    push           pc_genss.currseg i64 
    push           1          i64 
    casejumpeq     #8981      i64 0
    push           2          i64 
    casejumpeq     #8982      i64 0
    push           3          i64 
    casejumpeq     #8983      i64 0
    popstack                  i64 
    jump           #8984      
#8981: 
    push           pci_mcl.ss_code u64 
    pop            pc_genss.currdata u64 
    push           pci_mcl.ss_coderelocs u64 
    pop            pc_genss.currrelocs u64 
    push           pci_mcl.ss_ncoderelocs i64 
    pop            pc_genss.nrelocs i64 
    jump           #8985      
#8982: 
    push           pci_mcl.ss_idata u64 
    pop            pc_genss.currdata u64 
    push           pci_mcl.ss_idatarelocs u64 
    pop            pc_genss.currrelocs u64 
    push           pci_mcl.ss_nidatarelocs i64 
    pop            pc_genss.nrelocs i64 
    jump           #8985      
#8983: 
    push           pci_mcl.ss_zdata u64 
    pop            pc_genss.currdata u64 
    jump           #8985      
#8984: 
#8985: 
#8976: 
    retproc                   
End


Proc pc_genss.do_movdqx:
    param          pc_genss.do_movdqx.a u64 
    param          pc_genss.do_movdqx.b u64 
    param          pc_genss.do_movdqx.opc i64 
    local          pc_genss.do_movdqx.am i64 
    local          pc_genss.do_movdqx.regcode i64 
    procentry                 
    push           pc_genss.do_movdqx.a u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    casejumpeq     #8987      i64 0
    push           3          i64 
    casejumpeq     #8988      i64 0
    popstack                  i64 
    jump           #8989      
#8987: 
    push           pc_genss.do_movdqx.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    casejumpeq     #8990      i64 0
    push           3          i64 
    casejumpeq     #8991      i64 0
    popstack                  i64 
    jump           #8992      
#8990: 
    setargs                   1 0
    push           pc_genss.do_movdqx.b u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcodebx i64 
    pop            pc_genss.do_movdqx.regcode i64 
    setargs                   2 0
    push           pc_genss.do_movdqx.regcode i64 
    push           pc_genss.do_movdqx.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_movdqx.am i64 
    setargs                   1 0
    push           pc_genss.do_movdqx.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           111        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_movdqx.am i64 
    push           pc_genss.do_movdqx.a u64 
    callproc       &pc_genss.genamode 
    jump           #8993      
#8991: 
    setargs                   1 0
    push           pc_genss.do_movdqx.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_movdqx.regcode i64 
    setargs                   2 0
    push           pc_genss.do_movdqx.regcode i64 
    push           pc_genss.do_movdqx.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_movdqx.am i64 
    setargs                   1 0
    push           pc_genss.do_movdqx.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           111        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_movdqx.am i64 
    push           pc_genss.do_movdqx.b u64 
    callproc       &pc_genss.genamode 
    jump           #8993      
#8992: 
    setargs                   1 0
    push           "movdqx?"  u64 
    callproc       &pci_mcl.axerror 
#8993: 
    jump           #8994      
#8988: 
    push           pc_genss.do_movdqx.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    casejumpeq     #8995      i64 0
    popstack                  i64 
    jump           #8996      
#8995: 
    setargs                   1 0
    push           pc_genss.do_movdqx.b u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_movdqx.regcode i64 
    setargs                   2 0
    push           pc_genss.do_movdqx.regcode i64 
    push           pc_genss.do_movdqx.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_movdqx.am i64 
    setargs                   1 0
    push           pc_genss.do_movdqx.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           127        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_movdqx.am i64 
    push           pc_genss.do_movdqx.a u64 
    callproc       &pc_genss.genamode 
    jump           #8997      
#8996: 
    setargs                   1 0
    push           "movdqx"   u64 
    callproc       &pci_mcl.axerror 
#8997: 
    jump           #8994      
#8989: 
    setargs                   1 0
    push           "movdqx"   u64 
    callproc       &pci_mcl.axerror 
#8994: 
#8998: 
    retproc                   
End


Proc pc_genss.do_popcnt:
    param          pc_genss.do_popcnt.a u64 
    param          pc_genss.do_popcnt.b u64 
    local          pc_genss.do_popcnt.am i64 
    local          pc_genss.do_popcnt.regcode i64 
    procentry                 
    push           pc_genss.do_popcnt.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #9000      i64 
    push           pc_genss.do_popcnt.b u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #9001      i64 
    push           8          i64 
    push           pc_genss.do_popcnt.b u64 
    push           8          
    popptroff                 u8 1 0
#9001: 
#9000: 
    setargs                   1 0
    push           243        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_popcnt.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcodebx i64 
    pop            pc_genss.do_popcnt.regcode i64 
    setargs                   2 0
    push           pc_genss.do_popcnt.regcode i64 
    push           pc_genss.do_popcnt.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_popcnt.am i64 
    setargs                   1 0
    push           pc_genss.do_popcnt.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           184        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_popcnt.am i64 
    push           pc_genss.do_popcnt.b u64 
    callproc       &pc_genss.genamode 
#9002: 
    retproc                   
End


Proc pc_genss.do_bsf:
    param          pc_genss.do_bsf.a u64 
    param          pc_genss.do_bsf.b u64 
    param          pc_genss.do_bsf.opc i64 
    local          pc_genss.do_bsf.am i64 
    local          pc_genss.do_bsf.regcode i64 
    procentry                 
    push           pc_genss.do_bsf.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #9004      i64 
    push           pc_genss.do_bsf.b u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #9005      i64 
    push           8          i64 
    push           pc_genss.do_bsf.b u64 
    push           8          
    popptroff                 u8 1 0
#9005: 
#9004: 
    push           pc_genss.do_bsf.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_bsf.b u64 
    push           8          
    pushptroff                u8 1 0
    jumpeq         #9006      i64 
    setargs                   1 0
    push           "bsf size" u64 
    callproc       &pci_mcl.axerror 
#9006: 
    setargs                   1 0
    push           pc_genss.do_bsf.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcodebx i64 
    pop            pc_genss.do_bsf.regcode i64 
    setargs                   2 0
    push           pc_genss.do_bsf.regcode i64 
    push           pc_genss.do_bsf.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_bsf.am i64 
    setargs                   1 0
    push           pc_genss.do_bsf.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_bsf.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_bsf.am i64 
    push           pc_genss.do_bsf.b u64 
    callproc       &pc_genss.genamode 
#9007: 
    retproc                   
End


Proc pc_genss.extendsymboltable:
    local          pc_genss.extendsymboltable.oldsymboltable u64 
    local          pc_genss.extendsymboltable.oldsymboltablesize i64 
    local          pc_genss.extendsymboltable.i i64 
    procentry                 
    push           pci_mcl.ss_symboltablesize i64 
    pop            pc_genss.extendsymboltable.oldsymboltablesize i64 
    push           pci_mcl.ss_symboltable u64 
    pop            pc_genss.extendsymboltable.oldsymboltable u64 
    push           &pci_mcl.ss_symboltablesize 
    push           2          i64 
    multo                     i64 
    setargs                   1 0
    push           8          i64 
    push           pci_mcl.ss_symboltablesize i64 
    mul                       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pci_mcl.ss_symboltable u64 
#9009: 
    push           1          i64 
    pop            pc_genss.extendsymboltable.i i64 
    push           pci_mcl.ss_nsymbols i64 
    push           1          i64 
    jumplt         #9010      i64 
#9011: 
    push           pc_genss.extendsymboltable.oldsymboltable u64 
    push           pc_genss.extendsymboltable.i i64 
    pushptroff                u64 8 -8
    push           pci_mcl.ss_symboltable u64 
    push           pc_genss.extendsymboltable.i i64 
    popptroff                 u64 8 -8
#9012: 
    forup          #9011      i64 1
    opnd           pc_genss.extendsymboltable.i 
    opnd           pci_mcl.ss_nsymbols 
#9010: 
    setargs                   2 0
    push           8          i64 
    push           pc_genss.extendsymboltable.oldsymboltablesize i64 
    mul                       i64 
    push           pc_genss.extendsymboltable.oldsymboltable u64 
    callproc       &mlibp.pcm_free 
#9013: 
    retproc                   
End


Proc pc_genss.fixregvar:
    local          pc_genss.fixregvar.m u64 
    procentry                 
    push           pci_mcl.mccode u64 
    pop            pc_genss.fixregvar.m u64 
#9015: 
    retproc                   
End


Proc pc_genss.initlib:
    param          pc_genss.initlib.nlabels i64 
    local          pc_genss.initlib.str block:256 
    local          pc_genss.initlib.i i64 
    procentry                 
    setargs                   1 0
    push           262144     i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pci_mcl.ss_symboltable u64 
    push           32768      i64 
    pop            pci_mcl.ss_symboltablesize i64 
    push           0          i64 
    pop            pci_mcl.ss_nsymbols i64 
    setargs                   1 0
    push           pc_genss.initlib.nlabels i64 
    push           8          i64 
    mul                       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pci_mcl.labeldeftable u64 
#9017: 
    push           1          i64 
    pop            pc_genss.initlib.i i64 
    push           pc_genss.initlib.nlabels i64 
    push           1          i64 
    jumplt         #9018      i64 
#9019: 
    setargs                   1 0
    push           64         i64 
    callfn         &mlibp.pcm_allocz u64 
    push           pci_mcl.labeldeftable u64 
    push           pc_genss.initlib.i i64 
    popptroff                 u64 8 -8
    push           pc_genss.initlib.i i64 
    push           pci_mcl.labeldeftable u64 
    push           pc_genss.initlib.i i64 
    pushptroff                u64 8 -8
    push           40         
    popptroff                 i32 1 0
    setargs                   1 0
    push           &pc_genss.initlib.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "(L#)"     u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           pc_genss.initlib.i i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           &pc_genss.initlib.str 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           pci_mcl.labeldeftable u64 
    push           pc_genss.initlib.i i64 
    pushptroff                u64 8 -8
    push           0          
    popptroff                 u64 1 0
    push           1          i64 
    push           pci_mcl.labeldeftable u64 
    push           pc_genss.initlib.i i64 
    pushptroff                u64 8 -8
    push           29         
    popptroff                 u8 1 0
#9020: 
    forup          #9019      i64 1
    opnd           pc_genss.initlib.i 
    opnd           pc_genss.initlib.nlabels 
#9018: 
#9021: 
    retproc                   
End


Proc pc_genss.buffercreate: u64
    param          pc_genss.buffercreate.size i64 
    local          pc_genss.buffercreate.a u64 
    procentry                 
    setargs                   1 0
    push           32         i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pc_genss.buffercreate.a u64 
    push           pc_genss.buffercreate.size i64 
    push           pc_genss.buffercreate.a u64 
    push           24         
    popptroff                 i64 1 0
    setargs                   1 0
    push           pc_genss.buffercreate.a u64 
    push           24         
    pushptroff                i64 1 0
    callfn         &mlibp.pcm_alloc u64 
    push           pc_genss.buffercreate.a u64 
    push           8          
    storeptroff               u64 1 0
    push           pc_genss.buffercreate.a u64 
    push           0          
    popptroff                 u64 1 0
    push           pc_genss.buffercreate.a u64 
    pushptr                   u64 
    push           pc_genss.buffercreate.a u64 
    push           24         
    pushptroff                i64 1 0
    addrefoff                 u64 1 0
    push           pc_genss.buffercreate.a u64 
    push           16         
    popptroff                 u64 1 0
    push           pc_genss.buffercreate.a u64 
    setret                    u64 
    jump           #9023      
#9023: 
    retfn                     u64 
End


Proc pc_genss.bufferexpand:
    param          pc_genss.bufferexpand.a u64 
    local          pc_genss.bufferexpand.newalloc i64 
    local          pc_genss.bufferexpand.usedbytes i64 
    local          pc_genss.bufferexpand.p u64 
    procentry                 
    push           pc_genss.bufferexpand.a u64 
    push           24         
    pushptroff                i64 1 0
    push           2          i64 
    mul                       i64 
    pop            pc_genss.bufferexpand.newalloc i64 
    push           pc_genss.bufferexpand.a u64 
    push           8          
    pushptroff                u64 1 0
    push           pc_genss.bufferexpand.a u64 
    pushptr                   u64 
    subref                    i64 1
    pop            pc_genss.bufferexpand.usedbytes i64 
    push           pc_genss.bufferexpand.usedbytes i64 
    push           pc_genss.bufferexpand.a u64 
    push           24         
    pushptroff                i64 1 0
    jumple         #9025      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "dbuffer error" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           0          
    stop                      
#9025: 
    setargs                   1 0
    push           pc_genss.bufferexpand.newalloc i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pc_genss.bufferexpand.p u64 
    setargs                   3 0
    push           pc_genss.bufferexpand.usedbytes u64 
    push           pc_genss.bufferexpand.a u64 
    pushptr                   u64 
    push           pc_genss.bufferexpand.p u64 
    callproc       &memcpy    
    push           pc_genss.bufferexpand.p u64 
    push           pc_genss.bufferexpand.a u64 
    push           0          
    popptroff                 u64 1 0
    push           pc_genss.bufferexpand.p u64 
    push           pc_genss.bufferexpand.usedbytes i64 
    addrefoff                 u64 1 0
    push           pc_genss.bufferexpand.a u64 
    push           8          
    popptroff                 u64 1 0
    push           pc_genss.bufferexpand.newalloc i64 
    push           pc_genss.bufferexpand.a u64 
    push           24         
    popptroff                 i64 1 0
    push           pc_genss.bufferexpand.p u64 
    push           pc_genss.bufferexpand.newalloc i64 
    addrefoff                 u64 1 0
    push           pc_genss.bufferexpand.a u64 
    push           16         
    popptroff                 u64 1 0
#9026: 
    retproc                   
End


Proc pc_genss.buffercheck:
    param          pc_genss.buffercheck.a u64 
    param          pc_genss.buffercheck.n i64 
    procentry                 
    jump           #9028      
#9029: 
    setargs                   1 0
    push           pc_genss.buffercheck.a u64 
    callproc       &pc_genss.bufferexpand 
#9028: 
    push           pc_genss.buffercheck.a u64 
    push           16         
    pushptroff                u64 1 0
    push           pc_genss.buffercheck.a u64 
    push           8          
    pushptroff                u64 1 0
    subref                    i64 1
    push           pc_genss.buffercheck.n i64 
    jumplt         #9029      i64 
#9030: 
#9031: 
    retproc                   
End


Proc pc_genss.bufferlength: i64
    param          pc_genss.bufferlength.a u64 
    procentry                 
    push           pc_genss.bufferlength.a u64 
    push           8          
    pushptroff                u64 1 0
    push           pc_genss.bufferlength.a u64 
    pushptr                   u64 
    subref                    i64 1
    setret                    i64 
    jump           #9033      
#9033: 
    retfn                     i64 
End


Proc pc_genss.bufferelemptr: u64
    param          pc_genss.bufferelemptr.a u64 
    param          pc_genss.bufferelemptr.offset i64 
    procentry                 
    push           pc_genss.bufferelemptr.a u64 
    pushptr                   u64 
    push           pc_genss.bufferelemptr.offset i64 
    addrefoff                 u64 1 0
    setret                    u64 
    jump           #9035      
#9035: 
    retfn                     u64 
End


Proc pc_genss.addword:
    param          pc_genss.addword.a u64 
    param          pc_genss.addword.x i64 
    procentry                 
    push           pc_genss.addword.x i64 
    push           pc_genss.addword.a u64 
    push           8          
    pushptroff                u64 1 0
    popptr                    u16 
    push           pc_genss.addword.a u64 
    push           8          
    addrefoff                 u64 1 0
    incr                      u64 2
#9037: 
    retproc                   
End


Proc pc_genss.adddword:
    param          pc_genss.adddword.a u64 
    param          pc_genss.adddword.x i64 
    procentry                 
    push           pc_genss.adddword.x i64 
    push           pc_genss.adddword.a u64 
    push           8          
    pushptroff                u64 1 0
    popptr                    u32 
    push           pc_genss.adddword.a u64 
    push           8          
    addrefoff                 u64 1 0
    incr                      u64 4
#9039: 
    retproc                   
End


Proc pc_genss.addqword:
    param          pc_genss.addqword.a u64 
    param          pc_genss.addqword.x i64 
    procentry                 
    push           pc_genss.addqword.x u64 
    push           pc_genss.addqword.a u64 
    push           8          
    pushptroff                u64 1 0
    popptr                    u64 
    push           pc_genss.addqword.a u64 
    push           8          
    addrefoff                 u64 1 0
    incr                      u64 8
#9041: 
    retproc                   
End


Proc pc_writeexe.writeexe:
    param          pc_writeexe.writeexe.outfile u64 
    param          pc_writeexe.writeexe.dodll i64 
    local          pc_writeexe.writeexe.header block:20 
    local          pc_writeexe.writeexe.optheader block:240 
    local          pc_writeexe.writeexe.offset i64 
    local          pc_writeexe.writeexe.i i64 
    local          pc_writeexe.writeexe.aa i64 
    procentry                 
    push           pc_writeexe.writeexe.outfile u64 
    pop            pc_writeexe.dllfilename u64 
    push           pc_writeexe.writeexe.dodll i64 
    pop            pc_writeexe.isdll i64 
    setargs                   1 0
    push           pc_writeexe.filesize i64 
    callfn         &mlibp.pcm_allocz u64 
    store          pc_writeexe.dataptr u64 
    pop            pc_writeexe.datastart u64 
    setargs                   0 0
    callproc       &pc_writeexe.writedosstub 
    setargs                   0 0
    callproc       &pc_writeexe.writepesig 
    setargs                   0 0
    callproc       &pc_writeexe.writefileheader 
    setargs                   0 0
    callproc       &pc_writeexe.writeoptheader 
#9043: 
    push           1          i64 
    pop            pc_writeexe.writeexe.i i64 
    push           pc_writeexe.nsections i64 
    push           1          i64 
    jumplt         #9044      i64 
#9045: 
    setargs                   1 0
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.writeexe.i i64 
    addrefoff                 block:72 72 -72
    callproc       &pc_writeexe.writesectionheader 
#9046: 
    forup          #9045      i64 1
    opnd           pc_writeexe.writeexe.i 
    opnd           pc_writeexe.nsections 
#9044: 
    setargs                   1 0
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           32         
    pushptroff                i64 1 0
    callproc       &pc_writeexe.writepadding 
#9047: 
    push           1          i64 
    pop            pc_writeexe.writeexe.i i64 
    push           pc_writeexe.nsections i64 
    push           1          i64 
    jumplt         #9048      i64 
#9049: 
    setargs                   1 0
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.writeexe.i i64 
    addrefoff                 block:72 72 -72
    callproc       &pc_writeexe.writesectiondata 
#9050: 
    forup          #9049      i64 1
    opnd           pc_writeexe.writeexe.i 
    opnd           pc_writeexe.nsections 
#9048: 
    setargs                   3 0
    push           pc_writeexe.dataptr u64 
    push           pc_writeexe.datastart u64 
    subref                    i64 1
    push           pc_writeexe.datastart u64 
    push           pc_writeexe.writeexe.outfile u64 
    callfn         &mlibp.writefile i64 
    push           0          i64 
    jumpne         #9051      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Error writing exe file (possibly still running)" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#9051: 
#9052: 
    retproc                   
End


Proc pc_writeexe.genexe:
    param          pc_writeexe.genexe.entrypoint u64 
    param          pc_writeexe.genexe.outfile u64 
    param          pc_writeexe.genexe.dodll i64 
    procentry                 
    push           pc_writeexe.genexe.outfile u64 
    pop            pc_writeexe.dllfilename u64 
    push           pc_writeexe.genexe.dodll i64 
    pop            pc_writeexe.isdll i64 
    setargs                   0 0
    callproc       &pc_writeexe.setuplibfiles 
    startmult                 
    push           pc_writeexe.isdll i64 
    jumpfalse      #9054      i64 
    push           1713635328 i64 
    resetmult                 
    jump           #9055      
#9054: 
    push           4194304    i64 
    endmult                   
#9055: 
    pop            pc_writeexe.imagebase i64 
    push           pc_writeexe.genexe.entrypoint u64 
    pop            pc_writeexe.userentrypoint u64 
    setargs                   0 0
    callproc       &pc_writeexe.loadlibs 
    setargs                   0 0
    callproc       &pc_writeexe.scanst 
    setargs                   0 0
    callproc       &pc_writeexe.getoffsets 
    setargs                   1 0
    push           &pc_writeexe.sectiontable 
    push           0          
    addrefoff                 u8 1 0
    callproc       &pc_writeexe.relocdata 
    setargs                   1 0
    push           &pc_writeexe.sectiontable 
    push           72         
    addrefoff                 u8 1 0
    callproc       &pc_writeexe.relocdata 
#9056: 
    retproc                   
End


Proc pc_writeexe.loadlibs:
    local          pc_writeexe.loadlibs.i i64 
    local          pc_writeexe.loadlibs.hinst i64 
    local          pc_writeexe.loadlibs.file u64 
    local          pc_writeexe.loadlibs.filename block:300 
    procentry                 
#9058: 
    push           1          i64 
    pop            pc_writeexe.loadlibs.i i64 
    push           pci_mcl.npsearchlibs i64 
    push           1          i64 
    jumplt         #9059      i64 
#9060: 
    setargs                   2 0
    push           &pci_mcl.psearchlibs 
    push           pc_writeexe.loadlibs.i i64 
    pushptroff                u64 8 -8
    push           &pc_writeexe.loadlibs.filename 
    callproc       &strcpy    
    setargs                   1 0
    push           &pc_writeexe.loadlibs.filename 
    callfn         &mwindowsp.os_getdllinst i64 
    pop            pc_writeexe.loadlibs.hinst i64 
    push           pc_writeexe.loadlibs.hinst i64 
    push           0          i64 
    jumpne         #9061      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "File:"    u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pc_writeexe.loadlibs.filename 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Can't load search lib" u64 
    callproc       &pci_mcl.axerror 
#9061: 
    push           pc_writeexe.loadlibs.hinst i64 
    push           &pc_writeexe.libinsttable 
    push           pc_writeexe.loadlibs.i i64 
    popptroff                 i64 8 -8
    setargs                   1 0
    push           &pc_writeexe.loadlibs.filename 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &pc_writeexe.libinstnames 
    push           pc_writeexe.loadlibs.i i64 
    popptroff                 u64 8 -8
#9062: 
    forup          #9060      i64 1
    opnd           pc_writeexe.loadlibs.i 
    opnd           pci_mcl.npsearchlibs 
#9059: 
#9063: 
    retproc                   
End


Proc pc_writeexe.initsectiontable:
    procentry                 
    push           ".text"    u64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           8          
    popptroff                 u64 1 0
    push           1          i64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           16         
    popptroff                 i64 1 0
    push           pci_mcl.ss_code u64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           0          
    popptroff                 u64 1 0
    setargs                   1 0
    push           pci_mcl.ss_code u64 
    callfn         &pc_genss.bufferlength i64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           40         
    popptroff                 i64 1 0
    setargs                   1 0
    push           pci_mcl.ss_idata u64 
    callfn         &pc_genss.bufferlength i64 
    push           0          i64 
    jumpne         #9065      i64 
    setargs                   2 0
    push           0          i64 
    push           pci_mcl.ss_idata u64 
    callproc       &pc_genss.addqword 
#9065: 
    push           ".data"    u64 
    push           &pc_writeexe.sectiontable 
    push           2          i64 
    addrefoff                 block:72 72 -72
    push           8          
    popptroff                 u64 1 0
    push           2          i64 
    push           &pc_writeexe.sectiontable 
    push           2          i64 
    addrefoff                 block:72 72 -72
    push           16         
    popptroff                 i64 1 0
    push           pci_mcl.ss_idata u64 
    push           &pc_writeexe.sectiontable 
    push           2          i64 
    addrefoff                 block:72 72 -72
    push           0          
    popptroff                 u64 1 0
    setargs                   1 0
    push           pci_mcl.ss_idata u64 
    callfn         &pc_genss.bufferlength i64 
    push           &pc_writeexe.sectiontable 
    push           2          i64 
    addrefoff                 block:72 72 -72
    push           40         
    popptroff                 i64 1 0
    setargs                   2 0
    push           512        i64 
    push           &pc_writeexe.sectiontable 
    push           2          i64 
    addrefoff                 block:72 72 -72
    push           40         
    pushptroff                i64 1 0
    callfn         &pc_writeexe.roundtoblock i64 
    push           &pc_writeexe.sectiontable 
    push           2          i64 
    addrefoff                 block:72 72 -72
    push           24         
    popptroff                 i64 1 0
    push           pci_mcl.ss_nidatarelocs i64 
    push           &pc_writeexe.sectiontable 
    push           2          i64 
    addrefoff                 block:72 72 -72
    push           64         
    popptroff                 i64 1 0
    push           pci_mcl.ss_idatarelocs u64 
    push           &pc_writeexe.sectiontable 
    push           2          i64 
    addrefoff                 block:72 72 -72
    push           56         
    popptroff                 u64 1 0
    push           pci_mcl.ss_zdatalen i64 
    push           0          i64 
    jumpne         #9066      i64 
    push           16         i64 
    pop            pci_mcl.ss_zdatalen i64 
#9066: 
    push           ".bss"     u64 
    push           &pc_writeexe.sectiontable 
    push           3          i64 
    addrefoff                 block:72 72 -72
    push           8          
    popptroff                 u64 1 0
    push           3          i64 
    push           &pc_writeexe.sectiontable 
    push           3          i64 
    addrefoff                 block:72 72 -72
    push           16         
    popptroff                 i64 1 0
    push           pci_mcl.ss_zdatalen i64 
    push           &pc_writeexe.sectiontable 
    push           3          i64 
    addrefoff                 block:72 72 -72
    push           40         
    popptroff                 i64 1 0
    setargs                   2 0
    push           512        i64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           40         
    pushptroff                i64 1 0
    callfn         &pc_writeexe.roundtoblock i64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           24         
    popptroff                 i64 1 0
    push           pci_mcl.ss_ncoderelocs i64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           64         
    popptroff                 i64 1 0
    push           pci_mcl.ss_coderelocs u64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           56         
    popptroff                 u64 1 0
    push           ".idata"   u64 
    push           &pc_writeexe.sectiontable 
    push           4          i64 
    addrefoff                 block:72 72 -72
    push           8          
    popptroff                 u64 1 0
    push           5          i64 
    push           &pc_writeexe.sectiontable 
    push           4          i64 
    addrefoff                 block:72 72 -72
    push           16         
    popptroff                 i64 1 0
    push           0          i64 
    push           &pc_writeexe.sectiontable 
    push           4          i64 
    addrefoff                 block:72 72 -72
    push           40         
    popptroff                 i64 1 0
    push           0          i64 
    push           &pc_writeexe.sectiontable 
    push           4          i64 
    addrefoff                 block:72 72 -72
    push           24         
    popptroff                 i64 1 0
    push           4          i64 
    pop            pc_writeexe.nsections i64 
#9067: 
    retproc                   
End


Proc pc_writeexe.roundtoblock: i64
    param          pc_writeexe.roundtoblock.n i64 
    param          pc_writeexe.roundtoblock.align i64 
    procentry                 
    push           pc_writeexe.roundtoblock.n i64 
    push           pc_writeexe.roundtoblock.align i64 
    push           1          i64 
    sub                       i64 
    iand                      i64 
    push           0          i64 
    jumpne         #9069      i64 
    push           pc_writeexe.roundtoblock.n i64 
    setret                    i64 
    jump           #9070      
#9069: 
    push           pc_writeexe.roundtoblock.n i64 
    push           pc_writeexe.roundtoblock.align i64 
    push           pc_writeexe.roundtoblock.n i64 
    push           pc_writeexe.roundtoblock.align i64 
    push           1          i64 
    sub                       i64 
    iand                      i64 
    sub                       i64 
    add                       i64 
    setret                    i64 
    jump           #9070      
#9070: 
    retfn                     i64 
End


Proc pc_writeexe.extractlibname: u64
    param          pc_writeexe.extractlibname.name u64 
    param          pc_writeexe.extractlibname.libno u64 
    param          pc_writeexe.extractlibname.moduleno i64 
    local          pc_writeexe.extractlibname.s u64 
    local          pc_writeexe.extractlibname.name2 u64 
    local          pc_writeexe.extractlibname.str block:256 
    local          pc_writeexe.extractlibname.str2 block:256 
    local          pc_writeexe.extractlibname.i i64 
    local          pc_writeexe.extractlibname.n i64 
    procentry                 
    push           0          u64 
    pop            pc_writeexe.extractlibname.name2 u64 
!reenter::
#9072: 
    push           pc_writeexe.extractlibname.name u64 
    pop            pc_writeexe.extractlibname.s u64 
    push           0          i64 
    push           pc_writeexe.extractlibname.libno u64 
    popptr                    i64 
    jump           #9073      
#9074: 
    push           pc_writeexe.extractlibname.s u64 
    pushptr                   u8 
    push           46         u64 
    jumpne         #9075      u64 
    setargs                   3 0
    push           pc_writeexe.extractlibname.s u64 
    push           pc_writeexe.extractlibname.name u64 
    subref                    u64 1
    push           pc_writeexe.extractlibname.name u64 
    push           &pc_writeexe.extractlibname.str 
    callproc       &memcpy    
    push           0          u64 
    push           &pc_writeexe.extractlibname.str 
    push           pc_writeexe.extractlibname.s u64 
    push           pc_writeexe.extractlibname.name u64 
    subref                    i64 1
    popptroff                 u8 1 0
    setargs                   2 0
    push           ".dll"     u64 
    push           &pc_writeexe.extractlibname.str 
    callproc       &strcat    
#9076: 
    push           1          i64 
    pop            pc_writeexe.extractlibname.i i64 
    push           pc_writeexe.ndlls i64 
    push           1          i64 
    jumplt         #9077      i64 
#9078: 
    setargs                   2 0
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.extractlibname.i i64 
    addrefoff                 block:48 48 -48
    pushptr                   u64 
    push           &pc_writeexe.extractlibname.str 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #9079      i64 
    push           pc_writeexe.extractlibname.i i64 
    push           pc_writeexe.extractlibname.libno u64 
    popptr                    i64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.extractlibname.libno u64 
    pushptr                   i64 
    addrefoff                 block:48 48 -48
    push           8          
    addrefoff                 u64 1 0
    incr                      i64 1
    startmult                 
    push           pc_writeexe.extractlibname.name2 u64 
    jumpfalse      #9080      u64 
    push           pc_writeexe.extractlibname.name2 u64 
    resetmult                 
    jump           #9081      
#9080: 
    push           pc_writeexe.extractlibname.s u64 
    push           1          i64 
    addrefoff                 u64 1 0
    endmult                   
#9081: 
    setret                    u64 
    jump           #9082      
#9079: 
#9083: 
    forup          #9078      i64 1
    opnd           pc_writeexe.extractlibname.i 
    opnd           pc_writeexe.ndlls 
#9077: 
    push           pc_writeexe.ndlls i64 
    push           50         i64 
    jumplt         #9084      i64 
    setargs                   1 0
    push           "Too many libs" u64 
    callproc       &pci_mcl.axerror 
#9084: 
    push           &pc_writeexe.ndlls 
    incrload                  i64 1
    push           pc_writeexe.extractlibname.libno u64 
    popptr                    i64 
    setargs                   1 0
    push           &pc_writeexe.extractlibname.str 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.extractlibname.libno u64 
    pushptr                   i64 
    addrefoff                 block:48 48 -48
    push           0          
    popptroff                 u64 1 0
    push           1          i64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.extractlibname.libno u64 
    pushptr                   i64 
    addrefoff                 block:48 48 -48
    push           8          
    popptroff                 i64 1 0
    startmult                 
    push           pc_writeexe.extractlibname.name2 u64 
    jumpfalse      #9085      u64 
    push           pc_writeexe.extractlibname.name2 u64 
    resetmult                 
    jump           #9086      
#9085: 
    push           pc_writeexe.extractlibname.s u64 
    push           1          i64 
    addrefoff                 u64 1 0
    endmult                   
#9086: 
    setret                    u64 
    jump           #9082      
#9075: 
    push           &pc_writeexe.extractlibname.s 
    incr                      u64 1
#9073: 
    push           pc_writeexe.extractlibname.s u64 
    pushptr                   u8 
    jumptrue       #9074      u64 
#9087: 
#9088: 
    push           1          i64 
    pop            pc_writeexe.extractlibname.i i64 
    push           pci_mcl.npsearchlibs i64 
    push           1          i64 
    jumplt         #9089      i64 
#9090: 
    setargs                   2 0
    push           pc_writeexe.extractlibname.name u64 
    push           &pc_writeexe.libinsttable 
    push           pc_writeexe.extractlibname.i i64 
    pushptroff                i64 8 -8
    callfn         &mwindowsp.os_getdllprocaddr u64 
    jumpfalse      #9091      u64 
    push           pc_writeexe.extractlibname.i i64 
    pop            pc_writeexe.extractlibname.n i64 
    jump           #9092      
#9091: 
#9093: 
    forup          #9090      i64 1
    opnd           pc_writeexe.extractlibname.i 
    opnd           pci_mcl.npsearchlibs 
#9089: 
    setargs                   1 0
    push           "Can't find external function" u64 
    callproc       &pci_mcl.axerror 
#9092: 
    push           &pc_writeexe.libnotable 
    push           pc_writeexe.extractlibname.n i64 
    pushptroff                i64 8 -8
    push           pc_writeexe.extractlibname.libno u64 
    storeptr                  i64 
    jumpfalse      #9094      i64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.extractlibname.libno u64 
    pushptr                   i64 
    addrefoff                 block:48 48 -48
    push           8          
    addrefoff                 u64 1 0
    incr                      i64 1
    push           pc_writeexe.extractlibname.name u64 
    setret                    u64 
    jump           #9082      
#9094: 
    setargs                   2 0
    push           &pci_mcl.psearchlibs 
    push           pc_writeexe.extractlibname.n i64 
    pushptroff                u64 8 -8
    push           &pc_writeexe.extractlibname.str 
    callproc       &strcpy    
    setargs                   2 0
    push           ".dll"     u64 
    push           &pc_writeexe.extractlibname.str 
    callproc       &strcat    
    push           pc_writeexe.ndlls i64 
    push           50         i64 
    jumplt         #9095      i64 
    setargs                   1 0
    push           "2:Too many libs" u64 
    callproc       &pci_mcl.axerror 
#9095: 
    push           &pc_writeexe.ndlls 
    incrload                  i64 1
    push           pc_writeexe.extractlibname.libno u64 
    popptr                    i64 
    setargs                   1 0
    push           &pc_writeexe.extractlibname.str 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.extractlibname.libno u64 
    pushptr                   i64 
    addrefoff                 block:48 48 -48
    push           0          
    popptroff                 u64 1 0
    push           1          i64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.extractlibname.libno u64 
    pushptr                   i64 
    addrefoff                 block:48 48 -48
    push           8          
    popptroff                 i64 1 0
    push           pc_writeexe.extractlibname.libno u64 
    pushptr                   i64 
    push           &pc_writeexe.libnotable 
    push           pc_writeexe.extractlibname.n i64 
    popptroff                 i64 8 -8
    push           pc_writeexe.extractlibname.name u64 
    setret                    u64 
    jump           #9082      
#9082: 
    retfn                     u64 
End


Proc pc_writeexe.scanst:
    local          pc_writeexe.scanst.i i64 
    local          pc_writeexe.scanst.libno i64 
    local          pc_writeexe.scanst.d u64 
    local          pc_writeexe.scanst.name u64 
    local          pc_writeexe.scanst.libname u64 
    local          pc_writeexe.scanst.dname u64 
    local          pc_writeexe.scanst.basename u64 
    procentry                 
#9097: 
    push           1          i64 
    pop            pc_writeexe.scanst.i i64 
    push           pci_mcl.ss_nsymbols i64 
    push           1          i64 
    jumplt         #9098      i64 
#9099: 
    push           pci_mcl.ss_symboltable u64 
    push           pc_writeexe.scanst.i i64 
    pushptroff                u64 8 -8
    pop            pc_writeexe.scanst.d u64 
    push           pc_writeexe.scanst.d u64 
    push           46         
    pushptroff                u16 1 0
    push           1          i64 
    dotindex                  i64 
    jumpfalse      #9100      u64 
    push           pc_writeexe.nimports i64 
    push           3000       i64 
    jumplt         #9101      i64 
    setargs                   1 0
    push           "genexe: Too many imports" u64 
    callproc       &pci_mcl.axerror 
#9101: 
    push           &pc_writeexe.nimports 
    incr                      i64 1
    push           pc_writeexe.scanst.d u64 
    pushptr                   u64 
    pop            pc_writeexe.scanst.dname u64 
    setargs                   3 0
    push           1          i64 
    push           &pc_writeexe.scanst.libno 
    push           pc_writeexe.scanst.dname u64 
    callfn         &pc_writeexe.extractlibname u64 
    pop            pc_writeexe.scanst.name u64 
    push           pc_writeexe.scanst.libno i64 
    push           &pc_writeexe.importtable 
    push           pc_writeexe.nimports i64 
    addrefoff                 block:48 48 -48
    push           8          
    popptroff                 i64 1 0
    push           pc_writeexe.scanst.name u64 
    push           &pc_writeexe.importtable 
    push           pc_writeexe.nimports i64 
    addrefoff                 block:48 48 -48
    push           16         
    popptroff                 u64 1 0
    push           pc_writeexe.scanst.d u64 
    push           &pc_writeexe.importtable 
    push           pc_writeexe.nimports i64 
    addrefoff                 block:48 48 -48
    push           0          
    popptroff                 u64 1 0
    push           pc_writeexe.nimports i64 
    push           pc_writeexe.scanst.d u64 
    push           44         
    popptroff                 i16 1 0
    jump           #9102      
#9100: 
    push           pc_writeexe.scanst.d u64 
    push           46         
    pushptroff                u16 1 0
    push           3          i64 
    dotindex                  i64 
    jumpfalse      #9103      u64 
    setargs                   1 0
    push           pc_writeexe.scanst.d u64 
    pushptr                   u64 
    callfn         &pc_libpcl.getbasename u64 
    pop            pc_writeexe.scanst.basename u64 
    push           pc_writeexe.userentrypoint u64 
    jumpfalse      #9104      u64 
    setargs                   2 0
    push           pc_writeexe.userentrypoint u64 
    push           pc_writeexe.scanst.basename u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #9105      i64 
    push           pc_writeexe.scanst.d u64 
    pop            pc_writeexe.stentrypoint u64 
#9105: 
    jump           #9106      
#9104: 
    setargs                   2 0
    push           "main"     u64 
    push           pc_writeexe.scanst.basename u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #9107      i64 
    push           pc_writeexe.isdll i64 
    jumptrue       #9107      i64 
    push           pc_writeexe.scanst.d u64 
    pop            pc_writeexe.stentrypoint u64 
    jump           #9108      
#9107: 
    setargs                   2 0
    push           "start"    u64 
    push           pc_writeexe.scanst.basename u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #9109      i64 
    push           pc_writeexe.isdll i64 
    jumptrue       #9109      i64 
    push           pc_writeexe.scanst.d u64 
    pop            pc_writeexe.stentrypoint2 u64 
    jump           #9108      
#9109: 
    setargs                   2 0
    push           "dllmain"  u64 
    push           pc_writeexe.scanst.basename u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #9110      i64 
    push           pc_writeexe.isdll i64 
    jumpfalse      #9110      i64 
    push           pc_writeexe.scanst.d u64 
    pop            pc_writeexe.stentrypoint u64 
#9110: 
#9108: 
#9106: 
    push           pc_writeexe.nexports i64 
    push           1000       i64 
    jumplt         #9111      i64 
    setargs                   1 0
    push           "gendll: Too many exports" u64 
    callproc       &pci_mcl.axerror 
#9111: 
    push           &pc_writeexe.nexports 
    incr                      i64 1
    push           pc_writeexe.scanst.d u64 
    push           &pc_writeexe.exporttable 
    push           pc_writeexe.nexports i64 
    addrefoff                 block:16 16 -16
    push           0          
    popptroff                 u64 1 0
    push           pc_writeexe.scanst.dname u64 
    push           &pc_writeexe.exporttable 
    push           pc_writeexe.nexports i64 
    addrefoff                 block:16 16 -16
    push           8          
    popptroff                 u64 1 0
#9103: 
#9102: 
#9112: 
    forup          #9099      i64 1
    opnd           pc_writeexe.scanst.i 
    opnd           pci_mcl.ss_nsymbols 
#9098: 
#9113: 
    retproc                   
End


Proc pc_writeexe.relocdata:
    param          pc_writeexe.relocdata.s u64 
    local          pc_writeexe.relocdata.u u64 
    local          pc_writeexe.relocdata.r u64 
    local          pc_writeexe.relocdata.p u64 
    local          pc_writeexe.relocdata.p32 u64 
    local          pc_writeexe.relocdata.p64 u64 
    local          pc_writeexe.relocdata.d u64 
    local          pc_writeexe.relocdata.offset i64 
    local          pc_writeexe.relocdata.index i64 
    local          pc_writeexe.relocdata.thunkoffset i64 
    local          pc_writeexe.relocdata.iatoffset i64 
    procentry                 
    setargs                   2 0
    push           0          i64 
    push           pc_writeexe.relocdata.s u64 
    pushptr                   u64 
    callfn         &pc_genss.bufferelemptr u64 
    pop            pc_writeexe.relocdata.p u64 
    push           pc_writeexe.relocdata.s u64 
    push           56         
    pushptroff                u64 1 0
    pop            pc_writeexe.relocdata.r u64 
    jump           #9115      
#9116: 
    push           pci_mcl.ss_symboltable u64 
    push           pc_writeexe.relocdata.r u64 
    push           24         
    pushptroff                i64 1 0
    pushptroff                u64 8 -8
    pop            pc_writeexe.relocdata.d u64 
    push           pc_writeexe.relocdata.d u64 
    push           44         
    pushptroff                i16 1 0
    pop            pc_writeexe.relocdata.index i64 
    push           &pc_writeexe.importtable 
    push           pc_writeexe.relocdata.index i64 
    addrefoff                 block:48 48 -48
    push           40         
    pushptroff                i64 1 0
    pop            pc_writeexe.relocdata.thunkoffset i64 
    push           pc_writeexe.relocdata.r u64 
    push           8          
    pushptroff                i64 1 0
    push           4          i64 
    casejumpeq     #9117      i64 0
    push           2          i64 
    casejumpeq     #9118      i64 0
    push           1          i64 
    casejumpeq     #9118      i64 0
    popstack                  i64 
    jump           #9119      
#9117: 
    push           pc_writeexe.relocdata.d u64 
    push           46         
    pushptroff                u16 1 0
    push           1          i64 
    dotindex                  i64 
    jumptrue       #9120      u64 
    setargs                   1 0
    push           "rel32/not imported" u64 
    callproc       &pci_mcl.axerror 
#9120: 
    push           pc_writeexe.relocdata.thunkoffset i64 
    push           pc_writeexe.relocdata.r u64 
    push           16         
    pushptroff                i64 1 0
    sub                       i64 
    push           4          i64 
    sub                       i64 
    push           pc_writeexe.relocdata.p u64 
    push           pc_writeexe.relocdata.r u64 
    push           16         
    pushptroff                i64 1 0
    popptroff                 u32 1 0
    jump           #9121      
#9118: 
    push           pc_writeexe.relocdata.d u64 
    push           46         
    pushptroff                u16 1 0
    push           1          i64 
    dotindex                  i64 
    jumpfalse      #9122      u64 
    push           pc_writeexe.imagebase i64 
    push           pc_writeexe.relocdata.thunkoffset i64 
    add                       i64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           48         
    pushptroff                i64 1 0
    add                       i64 
    push           pc_writeexe.relocdata.p u64 
    push           pc_writeexe.relocdata.r u64 
    push           16         
    pushptroff                i64 1 0
    popptroff                 u32 1 0
    jump           #9123      
#9122: 
    push           0          u64 
    pop            pc_writeexe.relocdata.u u64 
    push           pc_writeexe.relocdata.d u64 
    push           30         
    pushptroff                u8 1 0
    push           3          i64 
    casejumpeq     #9124      i64 0
    push           2          i64 
    casejumpeq     #9125      i64 0
    push           1          i64 
    casejumpeq     #9126      i64 0
    popstack                  i64 
    jump           #9127      
#9124: 
    push           &pc_writeexe.sectiontable 
    push           144        
    addrefoff                 u8 1 0
    pop            pc_writeexe.relocdata.u u64 
    jump           #9128      
#9125: 
    push           &pc_writeexe.sectiontable 
    push           72         
    addrefoff                 u8 1 0
    pop            pc_writeexe.relocdata.u u64 
    jump           #9128      
#9126: 
    push           &pc_writeexe.sectiontable 
    push           0          
    addrefoff                 u8 1 0
    pop            pc_writeexe.relocdata.u u64 
    jump           #9128      
#9127: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           pc_writeexe.relocdata.d u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_writeexe.relocdata.d u64 
    push           30         
    pushptroff                u8 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "RELOCDATA/SEG?" u64 
    callproc       &pci_mcl.axerror 
#9128: 
    push           pc_writeexe.relocdata.p u64 
    push           pc_writeexe.relocdata.r u64 
    push           16         
    pushptroff                i64 1 0
    addrefoff                 u64 1 0
    pop            pc_writeexe.relocdata.p32 u64 
    push           pc_writeexe.relocdata.r u64 
    push           8          
    pushptroff                i64 1 0
    push           2          i64 
    jumpne         #9129      i64 
    push           pc_writeexe.relocdata.p32 u64 
    pushptr                   u32 
    push           pc_writeexe.relocdata.u u64 
    push           48         
    pushptroff                i64 1 0
    add                       i64 
    push           pc_writeexe.imagebase i64 
    add                       i64 
    push           pc_writeexe.relocdata.p32 u64 
    popptr                    u32 
    jump           #9130      
#9129: 
    push           pc_writeexe.relocdata.p32 u64 
    pop            pc_writeexe.relocdata.p64 u64 
    push           pc_writeexe.relocdata.p64 u64 
    pushptr                   i64 
    push           pc_writeexe.relocdata.u u64 
    push           48         
    pushptroff                i64 1 0
    add                       i64 
    push           pc_writeexe.imagebase i64 
    add                       u64 
    push           pc_writeexe.relocdata.p64 u64 
    popptr                    u64 
#9130: 
#9123: 
    jump           #9121      
#9119: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pc_objdecls.relocnames 
    push           pc_writeexe.relocdata.r u64 
    push           8          
    pushptroff                i64 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Can't do this rel type" u64 
    callproc       &pci_mcl.axerror 
#9121: 
    push           pc_writeexe.relocdata.r u64 
    pushptr                   u64 
    pop            pc_writeexe.relocdata.r u64 
#9115: 
    push           pc_writeexe.relocdata.r u64 
    jumptrue       #9116      u64 
#9131: 
#9132: 
    retproc                   
End


Proc pc_writeexe.getbaserelocs:
    param          pc_writeexe.getbaserelocs.s u64 
    local          pc_writeexe.getbaserelocs.u u64 
    local          pc_writeexe.getbaserelocs.r u64 
    local          pc_writeexe.getbaserelocs.p u64 
    local          pc_writeexe.getbaserelocs.d u64 
    local          pc_writeexe.getbaserelocs.index i64 
    procentry                 
    setargs                   2 0
    push           0          i64 
    push           pc_writeexe.getbaserelocs.s u64 
    pushptr                   u64 
    callfn         &pc_genss.bufferelemptr u64 
    pop            pc_writeexe.getbaserelocs.p u64 
    push           pc_writeexe.getbaserelocs.s u64 
    push           56         
    pushptroff                u64 1 0
    pop            pc_writeexe.getbaserelocs.r u64 
    jump           #9134      
#9135: 
    push           pci_mcl.ss_symboltable u64 
    push           pc_writeexe.getbaserelocs.r u64 
    push           24         
    pushptroff                i64 1 0
    pushptroff                u64 8 -8
    pop            pc_writeexe.getbaserelocs.d u64 
    push           pc_writeexe.getbaserelocs.r u64 
    push           8          
    pushptroff                i64 1 0
    push           2          i64 
    casejumpeq     #9136      i64 0
    push           1          i64 
    casejumpeq     #9136      i64 0
    popstack                  i64 
    jump           #9137      
#9136: 
    push           pc_writeexe.getbaserelocs.d u64 
    push           46         
    pushptroff                u16 1 0
    push           1          i64 
    dotindex                  i64 
    jumpfalse      #9138      u64 
    jump           #9139      
#9138: 
    push           pc_writeexe.getbaserelocs.d u64 
    push           30         
    pushptroff                u8 1 0
    push           3          i64 
    casejumpeq     #9140      i64 0
    push           2          i64 
    casejumpeq     #9141      i64 0
    push           1          i64 
    casejumpeq     #9142      i64 0
    popstack                  i64 
    jump           #9143      
#9140: 
    push           &pc_writeexe.sectiontable 
    push           144        
    addrefoff                 u8 1 0
    pop            pc_writeexe.getbaserelocs.u u64 
    jump           #9144      
#9141: 
    push           &pc_writeexe.sectiontable 
    push           72         
    addrefoff                 u8 1 0
    pop            pc_writeexe.getbaserelocs.u u64 
    jump           #9144      
#9142: 
    push           &pc_writeexe.sectiontable 
    push           0          
    addrefoff                 u8 1 0
    pop            pc_writeexe.getbaserelocs.u u64 
    jump           #9144      
#9143: 
#9144: 
    setargs                   2 0
    push           pc_writeexe.getbaserelocs.r u64 
    push           8          
    pushptroff                i64 1 0
    push           pc_writeexe.getbaserelocs.u u64 
    push           48         
    pushptroff                i64 1 0
    push           pc_writeexe.getbaserelocs.r u64 
    push           16         
    pushptroff                i64 1 0
    add                       i64 
    callproc       &pc_writeexe.newbasereloc 
#9139: 
    jump           #9145      
#9137: 
#9145: 
    push           pc_writeexe.getbaserelocs.r u64 
    pushptr                   u64 
    pop            pc_writeexe.getbaserelocs.r u64 
#9134: 
    push           pc_writeexe.getbaserelocs.r u64 
    jumptrue       #9135      u64 
#9146: 
#9147: 
    retproc                   
End


Proc pc_writeexe.writerecordx:
    param          pc_writeexe.writerecordx.r u64 
    param          pc_writeexe.writerecordx.length i64 
    procentry                 
    setargs                   3 0
    push           pc_writeexe.writerecordx.length u64 
    push           pc_writeexe.writerecordx.r u64 
    push           pc_writeexe.dataptr u64 
    callproc       &memcpy    
    push           &pc_writeexe.dataptr 
    push           pc_writeexe.writerecordx.length i64 
    addrefoffto               u64 1 0
#9149: 
    retproc                   
End


Proc pc_writeexe.writedosstub:
    procentry                 
    setargs                   2 0
    push           128        i64 
    push           &pc_writeexe.writedosstub.stubdata 
    callproc       &pc_writeexe.writerecordx 
#9151: 
    retproc                   
End


Proc pc_writeexe.writepesig:
    procentry                 
    push           80         i64 
    push           &pc_writeexe.dataptr 
    loadincr                  u64 1
    popptr                    u8 
    push           69         i64 
    push           &pc_writeexe.dataptr 
    loadincr                  u64 1
    popptr                    u8 
    push           0          i64 
    push           &pc_writeexe.dataptr 
    loadincr                  u64 1
    popptr                    u8 
    push           0          i64 
    push           &pc_writeexe.dataptr 
    loadincr                  u64 1
    popptr                    u8 
#9153: 
    retproc                   
End


Proc pc_writeexe.writepadding:
    param          pc_writeexe.writepadding.offset i64 
    procentry                 
    push           pc_writeexe.datastart u64 
    push           pc_writeexe.writepadding.offset i64 
    addrefoff                 u64 1 0
    pop            pc_writeexe.dataptr u64 
#9155: 
    retproc                   
End


Proc pc_writeexe.writefileheader:
    local          pc_writeexe.writefileheader.header block:20 
    procentry                 
    push           &pc_writeexe.writefileheader.header 
    clear                     block:20 
    push           34404      i64 
    push           &pc_writeexe.writefileheader.header 
    push           0          
    popptroff                 u16 1 0
    push           pc_writeexe.nsections i64 
    push           &pc_writeexe.writefileheader.header 
    push           2          
    popptroff                 u16 1 0
    push           240        i64 
    push           &pc_writeexe.writefileheader.header 
    push           16         
    popptroff                 u16 1 0
    push           559        i64 
    push           &pc_writeexe.writefileheader.header 
    push           18         
    popptroff                 u16 1 0
    setargs                   2 0
    push           20         i64 
    push           &pc_writeexe.writefileheader.header 
    callproc       &pc_writeexe.writerecordx 
#9157: 
    retproc                   
End


Proc pc_writeexe.writeoptheader:
    local          pc_writeexe.writeoptheader.header block:240 
    procentry                 
    push           &pc_writeexe.writeoptheader.header 
    clear                     block:240 
    push           523        i64 
    push           &pc_writeexe.writeoptheader.header 
    push           0          
    popptroff                 u16 1 0
    push           1          i64 
    push           &pc_writeexe.writeoptheader.header 
    push           2          
    popptroff                 u8 1 0
    push           0          i64 
    push           &pc_writeexe.writeoptheader.header 
    push           3          
    popptroff                 u8 1 0
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           24         
    pushptroff                i64 1 0
    push           &pc_writeexe.writeoptheader.header 
    push           4          
    popptroff                 u32 1 0
    push           &pc_writeexe.sectiontable 
    push           2          i64 
    addrefoff                 block:72 72 -72
    push           24         
    pushptroff                i64 1 0
    push           &pc_writeexe.sectiontable 
    push           4          i64 
    addrefoff                 block:72 72 -72
    push           24         
    pushptroff                i64 1 0
    add                       i64 
    push           &pc_writeexe.writeoptheader.header 
    push           8          
    popptroff                 u32 1 0
    setargs                   2 0
    push           512        i64 
    push           &pc_writeexe.sectiontable 
    push           3          i64 
    addrefoff                 block:72 72 -72
    push           40         
    pushptroff                i64 1 0
    callfn         &pc_writeexe.roundtoblock i64 
    push           &pc_writeexe.writeoptheader.header 
    push           12         
    popptroff                 u32 1 0
    push           pc_writeexe.stentrypoint u64 
    push           0          u64 
    jumpne         #9159      u64 
    push           pc_writeexe.stentrypoint2 u64 
    pop            pc_writeexe.stentrypoint u64 
#9159: 
    push           pc_writeexe.stentrypoint u64 
    push           0          u64 
    jumpne         #9160      u64 
    push           pc_writeexe.userentrypoint u64 
    jumpfalse      #9161      u64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           pc_writeexe.userentrypoint u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "User entry point not found" u64 
    callproc       &pci_mcl.axerror 
    jump           #9162      
#9161: 
    push           pc_writeexe.isdll i64 
    jumptrue       #9163      i64 
    setargs                   1 0
    push           "Entry point not found: main or start" u64 
    callproc       &pci_mcl.axerror 
#9163: 
#9162: 
    jump           #9164      
#9160: 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           48         
    pushptroff                i64 1 0
    push           pc_writeexe.stentrypoint u64 
    push           32         
    pushptroff                i32 1 0
    add                       i64 
    push           &pc_writeexe.writeoptheader.header 
    push           16         
    popptroff                 u32 1 0
#9164: 
    push           4096       i64 
    push           &pc_writeexe.writeoptheader.header 
    push           20         
    popptroff                 u32 1 0
    push           pc_writeexe.imagebase u64 
    push           &pc_writeexe.writeoptheader.header 
    push           24         
    popptroff                 u64 1 0
    push           4096       i64 
    push           &pc_writeexe.writeoptheader.header 
    push           32         
    popptroff                 u32 1 0
    push           512        i64 
    push           &pc_writeexe.writeoptheader.header 
    push           36         
    popptroff                 u32 1 0
    push           4          i64 
    push           &pc_writeexe.writeoptheader.header 
    push           40         
    popptroff                 u16 1 0
    push           0          i64 
    push           &pc_writeexe.writeoptheader.header 
    push           42         
    popptroff                 u16 1 0
    push           5          i64 
    push           &pc_writeexe.writeoptheader.header 
    push           48         
    popptroff                 u16 1 0
    push           2          i64 
    push           &pc_writeexe.writeoptheader.header 
    push           50         
    popptroff                 u16 1 0
    push           pc_writeexe.imagesize i64 
    push           &pc_writeexe.writeoptheader.header 
    push           56         
    popptroff                 u32 1 0
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           32         
    pushptroff                i64 1 0
    push           &pc_writeexe.writeoptheader.header 
    push           60         
    popptroff                 u32 1 0
    push           3          i64 
    push           &pc_writeexe.writeoptheader.header 
    push           68         
    popptroff                 u16 1 0
    push           4194304    u64 
    push           &pc_writeexe.writeoptheader.header 
    push           72         
    popptroff                 u64 1 0
    push           2097152    u64 
    push           &pc_writeexe.writeoptheader.header 
    push           80         
    popptroff                 u64 1 0
    push           1048576    u64 
    push           &pc_writeexe.writeoptheader.header 
    push           88         
    popptroff                 u64 1 0
    push           4096       u64 
    push           &pc_writeexe.writeoptheader.header 
    push           96         
    popptroff                 u64 1 0
    push           16         i64 
    push           &pc_writeexe.writeoptheader.header 
    push           108        
    popptroff                 u32 1 0
    push           &pc_writeexe.sectiontable 
    push           4          i64 
    addrefoff                 block:72 72 -72
    push           48         
    pushptroff                i64 1 0
    push           &pc_writeexe.writeoptheader.header 
    push           120        
    popptroff                 u32 1 0
    push           &pc_writeexe.sectiontable 
    push           4          i64 
    addrefoff                 block:72 72 -72
    push           40         
    pushptroff                i64 1 0
    push           pc_writeexe.exportdirvirtsize i64 
    sub                       i64 
    push           pc_writeexe.blockdirvirtsize i64 
    sub                       i64 
    push           &pc_writeexe.writeoptheader.header 
    push           124        
    popptroff                 u32 1 0
    push           pc_writeexe.isdll i64 
    jumpfalse      #9165      i64 
    push           64         i64 
    push           &pc_writeexe.writeoptheader.header 
    push           70         
    popptroff                 u16 1 0
    push           pc_writeexe.exportdirvirtaddr i64 
    push           &pc_writeexe.writeoptheader.header 
    push           112        
    popptroff                 u32 1 0
    push           pc_writeexe.exportdirvirtsize i64 
    push           &pc_writeexe.writeoptheader.header 
    push           116        
    popptroff                 u32 1 0
    push           pc_writeexe.blockdirvirtaddr i64 
    push           &pc_writeexe.writeoptheader.header 
    push           152        
    popptroff                 u32 1 0
    push           pc_writeexe.blockdirvirtsize i64 
    push           &pc_writeexe.writeoptheader.header 
    push           156        
    popptroff                 u32 1 0
#9165: 
    push           pc_writeexe.fileiatoffset i64 
    push           &pc_writeexe.writeoptheader.header 
    push           208        
    popptroff                 u32 1 0
    push           pc_writeexe.fileiatsize i64 
    push           &pc_writeexe.writeoptheader.header 
    push           212        
    popptroff                 u32 1 0
    setargs                   2 0
    push           240        i64 
    push           &pc_writeexe.writeoptheader.header 
    callproc       &pc_writeexe.writerecordx 
#9166: 
    retproc                   
End


Proc pc_writeexe.writesectionheader:
    param          pc_writeexe.writesectionheader.s u64 
    local          pc_writeexe.writesectionheader.sheader block:40 
    local          pc_writeexe.writesectionheader.aa i64 
    procentry                 
    push           &pc_writeexe.writesectionheader.sheader 
    clear                     block:40 
    setargs                   2 0
    push           pc_writeexe.writesectionheader.s u64 
    push           8          
    pushptroff                u64 1 0
    push           &pc_writeexe.writesectionheader.sheader 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcpy    
    push           pc_writeexe.writesectionheader.s u64 
    push           40         
    pushptroff                i64 1 0
    push           &pc_writeexe.writesectionheader.sheader 
    push           8          
    popptroff                 u32 1 0
    push           pc_writeexe.writesectionheader.s u64 
    push           48         
    pushptroff                i64 1 0
    push           &pc_writeexe.writesectionheader.sheader 
    push           12         
    popptroff                 u32 1 0
    push           pc_writeexe.writesectionheader.s u64 
    push           32         
    pushptroff                i64 1 0
    push           &pc_writeexe.writesectionheader.sheader 
    push           20         
    popptroff                 u32 1 0
    push           pc_writeexe.writesectionheader.s u64 
    push           24         
    pushptroff                i64 1 0
    push           &pc_writeexe.writesectionheader.sheader 
    push           16         
    popptroff                 u32 1 0
    push           pc_writeexe.writesectionheader.s u64 
    push           16         
    pushptroff                i64 1 0
    push           3          i64 
    casejumpeq     #9168      i64 0
    push           2          i64 
    casejumpeq     #9169      i64 0
    push           1          i64 
    casejumpeq     #9170      i64 0
    push           5          i64 
    casejumpeq     #9171      i64 0
    popstack                  i64 
    jump           #9172      
#9168: 
    push           3226468480 i64 
    pop            pc_writeexe.writesectionheader.aa i64 
    push           pc_writeexe.writesectionheader.aa i64 
    push           &pc_writeexe.writesectionheader.sheader 
    push           36         
    popptroff                 u32 1 0
    jump           #9173      
#9169: 
    push           3226468416 i64 
    pop            pc_writeexe.writesectionheader.aa i64 
    push           pc_writeexe.writesectionheader.aa i64 
    push           &pc_writeexe.writesectionheader.sheader 
    push           36         
    popptroff                 u32 1 0
    jump           #9173      
#9170: 
    push           1615855648 i64 
    pop            pc_writeexe.writesectionheader.aa i64 
    push           pc_writeexe.writesectionheader.aa i64 
    push           &pc_writeexe.writesectionheader.sheader 
    push           36         
    popptroff                 u32 1 0
    jump           #9173      
#9171: 
    push           3224371264 i64 
    pop            pc_writeexe.writesectionheader.aa i64 
    push           pc_writeexe.writesectionheader.aa i64 
    push           &pc_writeexe.writesectionheader.sheader 
    push           36         
    popptroff                 u32 1 0
    jump           #9173      
#9172: 
#9173: 
    setargs                   2 0
    push           40         i64 
    push           &pc_writeexe.writesectionheader.sheader 
    callproc       &pc_writeexe.writerecordx 
#9174: 
    retproc                   
End


Proc pc_writeexe.writesectiondata:
    param          pc_writeexe.writesectiondata.s u64 
    procentry                 
    push           pc_writeexe.writesectiondata.s u64 
    push           16         
    pushptroff                i64 1 0
    push           5          i64 
    casejumpeq     #9176      i64 0
    push           3          i64 
    casejumpeq     #9177      i64 0
    popstack                  i64 
    jump           #9178      
#9176: 
    setargs                   2 0
    push           pc_writeexe.writesectiondata.s u64 
    push           40         
    pushptroff                i64 1 0
    push           pc_writeexe.writesectiondata.s u64 
    pushptr                   u64 
    callproc       &pc_writeexe.writerecordx 
    push           pc_writeexe.writesectiondata.s u64 
    push           24         
    pushptroff                i64 1 0
    push           pc_writeexe.writesectiondata.s u64 
    push           40         
    pushptroff                i64 1 0
    jumple         #9179      i64 
    push           &pc_writeexe.dataptr 
    push           pc_writeexe.writesectiondata.s u64 
    push           24         
    pushptroff                i64 1 0
    push           pc_writeexe.writesectiondata.s u64 
    push           40         
    pushptroff                i64 1 0
    sub                       i64 
    addrefoffto               u64 1 0
#9179: 
    jump           #9180      
#9177: 
    jump           #9180      
#9178: 
    setargs                   2 0
    push           pc_writeexe.writesectiondata.s u64 
    push           24         
    pushptroff                i64 1 0
    setargs                   2 0
    push           0          i64 
    push           pc_writeexe.writesectiondata.s u64 
    pushptr                   u64 
    callfn         &pc_genss.bufferelemptr u64 
    callproc       &pc_writeexe.writerecordx 
#9180: 
#9181: 
    retproc                   
End


Proc pc_writeexe.getoffsets:
    local          pc_writeexe.getoffsets.fileoffset i64 
    local          pc_writeexe.getoffsets.imageoffset i64 
    local          pc_writeexe.getoffsets.i i64 
    local          pc_writeexe.getoffsets.diroffset i64 
    local          pc_writeexe.getoffsets.impdirno i64 
    local          pc_writeexe.getoffsets.hinttableoffset i64 
    local          pc_writeexe.getoffsets.j i64 
    local          pc_writeexe.getoffsets.n i64 
    local          pc_writeexe.getoffsets.codesize i64 
    local          pc_writeexe.getoffsets.length i64 
    local          pc_writeexe.getoffsets.thunkoffset i64 
    local          pc_writeexe.getoffsets.offset i64 
    local          pc_writeexe.getoffsets.dirstartoffset i64 
    local          pc_writeexe.getoffsets.pcode u64 
    local          pc_writeexe.getoffsets.pimpdir u64 
    local          pc_writeexe.getoffsets.pdir u64 
    local          pc_writeexe.getoffsets.paddr u64 
    local          pc_writeexe.getoffsets.pname u64 
    local          pc_writeexe.getoffsets.iatoffset i64 
    local          pc_writeexe.getoffsets.phint u64 
    local          pc_writeexe.getoffsets.pextra u64 
    local          pc_writeexe.getoffsets.xxx i64 
    local          pc_writeexe.getoffsets.av_1 i64 
    local          pc_writeexe.getoffsets.thunkptr u64 
    local          pc_writeexe.getoffsets.codebase u64 
    local          pc_writeexe.getoffsets.thunkaddr i64 
    procentry                 
    push           392        i64 
    pop            pc_writeexe.getoffsets.fileoffset i64 
    push           &pc_writeexe.getoffsets.fileoffset 
    push           40         i64 
    push           pc_writeexe.nsections i64 
    mul                       i64 
    addto                     i64 
    setargs                   2 0
    push           512        i64 
    push           pc_writeexe.getoffsets.fileoffset i64 
    callfn         &pc_writeexe.roundtoblock i64 
    pop            pc_writeexe.getoffsets.fileoffset i64 
    push           4096       i64 
    pop            pc_writeexe.getoffsets.imageoffset i64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           40         
    pushptroff                i64 1 0
    pop            pc_writeexe.getoffsets.codesize i64 
    setargs                   2 0
    push           pc_writeexe.getoffsets.codesize i64 
    push           pci_mcl.ss_code u64 
    callfn         &pc_genss.bufferelemptr u64 
    pop            pc_writeexe.getoffsets.pcode u64 
    jump           #9183      
#9184: 
    push           144        i64 
    push           &pc_writeexe.getoffsets.pcode 
    loadincr                  u64 1
    popptr                    u8 
    push           &pc_writeexe.getoffsets.codesize 
    incr                      i64 1
#9183: 
    push           pc_writeexe.getoffsets.codesize i64 
    push           7          i64 
    iand                      i64 
    jumptrue       #9184      i64 
#9185: 
    push           pc_writeexe.getoffsets.codesize i64 
    pop            pc_writeexe.getoffsets.thunkoffset i64 
    push           &pc_writeexe.getoffsets.codesize 
    push           pc_writeexe.nimports i64 
    push           8          i64 
    mul                       i64 
    addto                     i64 
    push           pc_writeexe.getoffsets.codesize i64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           40         
    popptroff                 i64 1 0
    setargs                   2 0
    push           512        i64 
    push           pc_writeexe.getoffsets.codesize i64 
    callfn         &pc_writeexe.roundtoblock i64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           24         
    popptroff                 i64 1 0
    setargs                   2 0
    push           pc_writeexe.getoffsets.codesize i64 
    push           pc_writeexe.getoffsets.thunkoffset i64 
    sub                       i64 
    push           16         i64 
    add                       i64 
    push           pci_mcl.ss_code u64 
    callproc       &pc_genss.buffercheck 
#9186: 
    push           1          i64 
    pop            pc_writeexe.getoffsets.i i64 
    push           pc_writeexe.nsections i64 
    push           1          i64 
    jumplt         #9187      i64 
#9188: 
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:72 72 -72
    push           16         
    pushptroff                i64 1 0
    push           3          i64 
    jumpeq         #9189      i64 
    push           pc_writeexe.getoffsets.fileoffset i64 
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:72 72 -72
    push           32         
    popptroff                 i64 1 0
#9189: 
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:72 72 -72
    push           16         
    pushptroff                i64 1 0
    push           3          i64 
    jumpeq         #9190      i64 
    setargs                   2 0
    push           512        i64 
    push           pc_writeexe.getoffsets.fileoffset i64 
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:72 72 -72
    push           40         
    pushptroff                i64 1 0
    add                       i64 
    callfn         &pc_writeexe.roundtoblock i64 
    pop            pc_writeexe.getoffsets.fileoffset i64 
#9190: 
    push           pc_writeexe.getoffsets.imageoffset i64 
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:72 72 -72
    push           48         
    popptroff                 i64 1 0
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:72 72 -72
    push           16         
    pushptroff                i64 1 0
    push           5          i64 
    jumpne         #9191      i64 
    push           pc_writeexe.getoffsets.imageoffset i64 
    pop            pc_writeexe.getoffsets.diroffset i64 
    push           pc_writeexe.getoffsets.i i64 
    pop            pc_writeexe.getoffsets.impdirno i64 
#9191: 
    setargs                   2 0
    push           4096       i64 
    push           pc_writeexe.getoffsets.imageoffset i64 
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:72 72 -72
    push           40         
    pushptroff                i64 1 0
    add                       i64 
    callfn         &pc_writeexe.roundtoblock i64 
    pop            pc_writeexe.getoffsets.imageoffset i64 
#9192: 
    forup          #9188      i64 1
    opnd           pc_writeexe.getoffsets.i 
    opnd           pc_writeexe.nsections 
#9187: 
    push           pc_writeexe.isdll i64 
    jumpfalse      #9193      i64 
    setargs                   1 0
    push           &pc_writeexe.sectiontable 
    push           0          
    addrefoff                 u8 1 0
    callproc       &pc_writeexe.getbaserelocs 
    setargs                   1 0
    push           &pc_writeexe.sectiontable 
    push           72         
    addrefoff                 u8 1 0
    callproc       &pc_writeexe.getbaserelocs 
#9193: 
    push           &pc_writeexe.getoffsets.diroffset 
    push           pc_writeexe.ndlls i64 
    push           1          i64 
    add                       i64 
    push           20         i64 
    mul                       i64 
    addto                     i64 
#9194: 
    push           1          i64 
    pop            pc_writeexe.getoffsets.i i64 
    push           pc_writeexe.ndlls i64 
    push           1          i64 
    jumplt         #9195      i64 
#9196: 
    push           pc_writeexe.getoffsets.diroffset i64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           16         
    popptroff                 i64 1 0
    push           &pc_writeexe.getoffsets.diroffset 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           8          
    pushptroff                i64 1 0
    push           1          i64 
    add                       i64 
    push           8          i64 
    mul                       i64 
    addto                     i64 
#9197: 
    forup          #9196      i64 1
    opnd           pc_writeexe.getoffsets.i 
    opnd           pc_writeexe.ndlls 
#9195: 
    push           pc_writeexe.getoffsets.diroffset i64 
    pop            pc_writeexe.fileiatoffset i64 
#9198: 
    push           1          i64 
    pop            pc_writeexe.getoffsets.i i64 
    push           pc_writeexe.ndlls i64 
    push           1          i64 
    jumplt         #9199      i64 
#9200: 
    push           pc_writeexe.getoffsets.diroffset i64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           24         
    popptroff                 i64 1 0
    push           &pc_writeexe.getoffsets.diroffset 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           8          
    pushptroff                i64 1 0
    push           1          i64 
    add                       i64 
    push           8          i64 
    mul                       i64 
    addto                     i64 
#9201: 
    forup          #9200      i64 1
    opnd           pc_writeexe.getoffsets.i 
    opnd           pc_writeexe.ndlls 
#9199: 
    push           pc_writeexe.getoffsets.diroffset i64 
    push           pc_writeexe.fileiatoffset i64 
    sub                       i64 
    pop            pc_writeexe.fileiatsize i64 
    push           pc_writeexe.getoffsets.diroffset i64 
    pop            pc_writeexe.getoffsets.hinttableoffset i64 
#9202: 
    push           1          i64 
    pop            pc_writeexe.getoffsets.i i64 
    push           pc_writeexe.nimports i64 
    push           1          i64 
    jumplt         #9203      i64 
#9204: 
    setargs                   1 0
    push           &pc_writeexe.importtable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           16         
    pushptroff                u64 1 0
    callfn         &strlen    i64 
    push           3          i64 
    add                       i64 
    pop            pc_writeexe.getoffsets.length i64 
    push           pc_writeexe.getoffsets.length i64 
    push           1          i64 
    iand                      i64 
    jumpfalse      #9205      i64 
    push           &pc_writeexe.getoffsets.length 
    incr                      i64 1
#9205: 
    push           pc_writeexe.getoffsets.diroffset i64 
    push           &pc_writeexe.importtable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           24         
    popptroff                 i64 1 0
    push           &pc_writeexe.getoffsets.diroffset 
    push           pc_writeexe.getoffsets.length i64 
    addto                     i64 
#9206: 
    forup          #9204      i64 1
    opnd           pc_writeexe.getoffsets.i 
    opnd           pc_writeexe.nimports 
#9203: 
    setargs                   2 0
    push           4          i64 
    push           pc_writeexe.getoffsets.diroffset i64 
    callfn         &pc_writeexe.roundtoblock i64 
    pop            pc_writeexe.getoffsets.diroffset i64 
#9207: 
    push           1          i64 
    pop            pc_writeexe.getoffsets.i i64 
    push           pc_writeexe.ndlls i64 
    push           1          i64 
    jumplt         #9208      i64 
#9209: 
    setargs                   1 0
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    pushptr                   u64 
    callfn         &strlen    i64 
    push           1          i64 
    add                       i64 
    pop            pc_writeexe.getoffsets.length i64 
    push           pc_writeexe.getoffsets.length i64 
    push           1          i64 
    iand                      i64 
    jumpfalse      #9210      i64 
    push           &pc_writeexe.getoffsets.length 
    incr                      i64 1
#9210: 
    push           pc_writeexe.getoffsets.diroffset i64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           40         
    popptroff                 i64 1 0
    push           &pc_writeexe.getoffsets.diroffset 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           8          
    pushptroff                i64 1 0
    push           4          i64 
    mul                       i64 
    addto                     i64 
    push           pc_writeexe.getoffsets.diroffset i64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           32         
    popptroff                 i64 1 0
    push           &pc_writeexe.getoffsets.diroffset 
    push           pc_writeexe.getoffsets.length i64 
    addto                     i64 
#9211: 
    forup          #9209      i64 1
    opnd           pc_writeexe.getoffsets.i 
    opnd           pc_writeexe.ndlls 
#9208: 
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.getoffsets.impdirno i64 
    addrefoff                 block:72 72 -72
    push           48         
    pushptroff                i64 1 0
    pop            pc_writeexe.getoffsets.dirstartoffset i64 
    push           pc_writeexe.isdll i64 
    jumpfalse      #9212      i64 
    push           pc_writeexe.getoffsets.diroffset i64 
    pop            pc_writeexe.exportdirvirtaddr i64 
    push           pc_writeexe.getoffsets.diroffset i64 
    push           pc_writeexe.getoffsets.dirstartoffset i64 
    sub                       i64 
    pop            pc_writeexe.exportdiroffset i64 
    setargs                   0 0
    callfn         &pc_writeexe.getexporttablesize i64 
    pop            pc_writeexe.exportdirvirtsize i64 
    push           &pc_writeexe.getoffsets.diroffset 
    push           pc_writeexe.exportdirvirtsize i64 
    addto                     i64 
    setargs                   0 0
    callproc       &pc_writeexe.scanbaserelocs 
    push           pc_writeexe.getoffsets.diroffset i64 
    pop            pc_writeexe.blockdirvirtaddr i64 
    push           pc_writeexe.getoffsets.diroffset i64 
    push           pc_writeexe.getoffsets.dirstartoffset i64 
    sub                       i64 
    pop            pc_writeexe.blockdiroffset i64 
    push           pc_writeexe.basetablesize i64 
    pop            pc_writeexe.blockdirvirtsize i64 
    push           &pc_writeexe.getoffsets.diroffset 
    push           pc_writeexe.blockdirvirtsize i64 
    addto                     i64 
#9212: 
    push           pc_writeexe.getoffsets.diroffset i64 
    push           pc_writeexe.getoffsets.dirstartoffset i64 
    sub                       i64 
    pop            pc_writeexe.getoffsets.offset i64 
    push           pc_writeexe.getoffsets.offset i64 
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.getoffsets.impdirno i64 
    addrefoff                 block:72 72 -72
    push           40         
    popptroff                 i64 1 0
    setargs                   2 0
    push           512        i64 
    push           pc_writeexe.getoffsets.offset i64 
    callfn         &pc_writeexe.roundtoblock i64 
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.getoffsets.impdirno i64 
    addrefoff                 block:72 72 -72
    push           24         
    popptroff                 i64 1 0
    setargs                   2 0
    push           512        i64 
    push           pc_writeexe.getoffsets.fileoffset i64 
    push           pc_writeexe.getoffsets.offset i64 
    add                       i64 
    callfn         &pc_writeexe.roundtoblock i64 
    pop            pc_writeexe.filesize i64 
    setargs                   2 0
    push           4096       i64 
    push           pc_writeexe.getoffsets.imageoffset i64 
    push           pc_writeexe.getoffsets.diroffset i64 
    push           pc_writeexe.getoffsets.dirstartoffset i64 
    sub                       i64 
    add                       i64 
    callfn         &pc_writeexe.roundtoblock i64 
    pop            pc_writeexe.imagesize i64 
    setargs                   1 0
    push           pc_writeexe.getoffsets.offset i64 
    callfn         &mlibp.pcm_allocz u64 
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.getoffsets.impdirno i64 
    addrefoff                 block:72 72 -72
    push           0          
    storeptroff               u64 1 0
    pop            pc_writeexe.getoffsets.pimpdir u64 
    push           pc_writeexe.getoffsets.pimpdir u64 
    pop            pc_writeexe.getoffsets.pdir u64 
#9213: 
    push           1          i64 
    pop            pc_writeexe.getoffsets.i i64 
    push           pc_writeexe.ndlls i64 
    push           1          i64 
    jumplt         #9214      i64 
#9215: 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           16         
    pushptroff                i64 1 0
    push           pc_writeexe.getoffsets.pdir u64 
    push           0          
    popptroff                 u32 1 0
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           24         
    pushptroff                i64 1 0
    push           pc_writeexe.getoffsets.pdir u64 
    push           16         
    popptroff                 u32 1 0
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           32         
    pushptroff                i64 1 0
    push           pc_writeexe.getoffsets.pdir u64 
    push           12         
    popptroff                 u32 1 0
    push           &pc_writeexe.getoffsets.pdir 
    incr                      u64 20
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           24         
    pushptroff                i64 1 0
    pop            pc_writeexe.getoffsets.iatoffset i64 
    push           pc_writeexe.getoffsets.pimpdir u64 
    push           pc_writeexe.getoffsets.iatoffset i64 
    addrefoff                 u64 1 0
    push           pc_writeexe.getoffsets.dirstartoffset i64 
    subrefoff                 u64 1 0
    pop            pc_writeexe.getoffsets.paddr u64 
    push           pc_writeexe.getoffsets.pimpdir u64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           16         
    pushptroff                i64 1 0
    addrefoff                 u64 1 0
    push           pc_writeexe.getoffsets.dirstartoffset i64 
    subrefoff                 u64 1 0
    pop            pc_writeexe.getoffsets.pname u64 
#9216: 
    push           1          i64 
    pop            pc_writeexe.getoffsets.j i64 
    push           pc_writeexe.nimports i64 
    push           1          i64 
    jumplt         #9217      i64 
#9218: 
    push           &pc_writeexe.importtable 
    push           pc_writeexe.getoffsets.j i64 
    addrefoff                 block:48 48 -48
    push           8          
    pushptroff                i64 1 0
    push           pc_writeexe.getoffsets.i i64 
    jumpne         #9219      i64 
    push           &pc_writeexe.importtable 
    push           pc_writeexe.getoffsets.j i64 
    addrefoff                 block:48 48 -48
    push           24         
    pushptroff                i64 1 0
    push           pc_writeexe.getoffsets.paddr u64 
    storeptr                  i64 
    push           pc_writeexe.getoffsets.pname u64 
    popptr                    i64 
    push           pc_writeexe.getoffsets.iatoffset i64 
    push           &pc_writeexe.importtable 
    push           pc_writeexe.getoffsets.j i64 
    addrefoff                 block:48 48 -48
    push           32         
    popptroff                 i64 1 0
    push           &pc_writeexe.getoffsets.iatoffset 
    push           8          i64 
    addto                     i64 
    push           &pc_writeexe.getoffsets.pname 
    incr                      u64 8
    push           &pc_writeexe.getoffsets.paddr 
    incr                      u64 8
#9219: 
#9220: 
    forup          #9218      i64 1
    opnd           pc_writeexe.getoffsets.j 
    opnd           pc_writeexe.nimports 
#9217: 
#9221: 
    forup          #9215      i64 1
    opnd           pc_writeexe.getoffsets.i 
    opnd           pc_writeexe.ndlls 
#9214: 
#9222: 
    push           1          i64 
    pop            pc_writeexe.getoffsets.i i64 
    push           pc_writeexe.nimports i64 
    push           1          i64 
    jumplt         #9223      i64 
#9224: 
    push           pc_writeexe.getoffsets.pimpdir u64 
    push           &pc_writeexe.importtable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           24         
    pushptroff                i64 1 0
    addrefoff                 u64 1 0
    push           pc_writeexe.getoffsets.dirstartoffset i64 
    subrefoff                 u64 1 0
    pop            pc_writeexe.getoffsets.phint u64 
    push           &pc_writeexe.getoffsets.phint 
    push           2          i64 
    addrefoffto               u64 1 0
    setargs                   2 0
    push           &pc_writeexe.importtable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           16         
    pushptroff                u64 1 0
    push           pc_writeexe.getoffsets.phint u64 
    callproc       &strcpy    
#9225: 
    forup          #9224      i64 1
    opnd           pc_writeexe.getoffsets.i 
    opnd           pc_writeexe.nimports 
#9223: 
    push           pc_writeexe.getoffsets.dirstartoffset i64 
    pop            pc_writeexe.getoffsets.xxx i64 
#9226: 
    push           1          i64 
    pop            pc_writeexe.getoffsets.i i64 
    push           pc_writeexe.ndlls i64 
    push           1          i64 
    jumplt         #9227      i64 
#9228: 
    push           pc_writeexe.getoffsets.pimpdir u64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           40         
    pushptroff                i64 1 0
    addrefoff                 u64 1 0
    push           pc_writeexe.getoffsets.dirstartoffset i64 
    subrefoff                 u64 1 0
    pop            pc_writeexe.getoffsets.pextra u64 
#9229: 
    push           1          i64 
    pop            pc_writeexe.getoffsets.j i64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           8          
    pushptroff                i64 1 0
    pop            pc_writeexe.getoffsets.av_1 i64 
    push           pc_writeexe.getoffsets.av_1 i64 
    push           1          i64 
    jumplt         #9230      i64 
#9231: 
    push           pc_writeexe.getoffsets.xxx i64 
    push           pc_writeexe.getoffsets.pextra u64 
    popptr                    u32 
    push           &pc_writeexe.getoffsets.pextra 
    incr                      u64 4
#9232: 
    forup          #9231      i64 1
    opnd           pc_writeexe.getoffsets.j 
    opnd           pc_writeexe.getoffsets.av_1 
#9230: 
    push           &pc_writeexe.getoffsets.xxx 
    push           20         i64 
    addto                     i64 
    push           pc_writeexe.getoffsets.pimpdir u64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           32         
    pushptroff                i64 1 0
    addrefoff                 u64 1 0
    push           pc_writeexe.getoffsets.dirstartoffset i64 
    subrefoff                 u64 1 0
    pop            pc_writeexe.getoffsets.phint u64 
    setargs                   2 0
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    pushptr                   u64 
    push           pc_writeexe.getoffsets.phint u64 
    callproc       &strcpy    
#9233: 
    forup          #9228      i64 1
    opnd           pc_writeexe.getoffsets.i 
    opnd           pc_writeexe.ndlls 
#9227: 
    push           pc_writeexe.isdll i64 
    jumpfalse      #9234      i64 
    setargs                   1 0
    push           pc_writeexe.getoffsets.pimpdir u64 
    push           pc_writeexe.exportdiroffset i64 
    addrefoff                 u64 1 0
    callproc       &pc_writeexe.writeexporttable 
    setargs                   1 0
    push           pc_writeexe.getoffsets.pimpdir u64 
    push           pc_writeexe.blockdiroffset i64 
    addrefoff                 u64 1 0
    callproc       &pc_writeexe.writebasereloctable 
#9234: 
    setargs                   2 0
    push           pc_writeexe.getoffsets.thunkoffset i64 
    push           pci_mcl.ss_code u64 
    callfn         &pc_genss.bufferelemptr u64 
    pop            pc_writeexe.getoffsets.thunkptr u64 
    setargs                   2 0
    push           0          i64 
    push           pci_mcl.ss_code u64 
    callfn         &pc_genss.bufferelemptr u64 
    pop            pc_writeexe.getoffsets.codebase u64 
#9235: 
    push           1          i64 
    pop            pc_writeexe.getoffsets.i i64 
    push           pc_writeexe.nimports i64 
    push           1          i64 
    jumplt         #9236      i64 
#9237: 
    push           pc_writeexe.getoffsets.thunkptr u64 
    push           pc_writeexe.getoffsets.codebase u64 
    subref                    i64 1
    push           &pc_writeexe.importtable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           40         
    popptroff                 i64 1 0
    push           72         i64 
    push           &pc_writeexe.getoffsets.thunkptr 
    loadincr                  u64 1
    popptr                    u8 
    push           255        i64 
    push           &pc_writeexe.getoffsets.thunkptr 
    loadincr                  u64 1
    popptr                    u8 
    push           36         i64 
    push           &pc_writeexe.getoffsets.thunkptr 
    loadincr                  u64 1
    popptr                    u8 
    push           37         i64 
    push           &pc_writeexe.getoffsets.thunkptr 
    loadincr                  u64 1
    popptr                    u8 
    push           pc_writeexe.imagebase i64 
    push           &pc_writeexe.importtable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           32         
    pushptroff                i64 1 0
    add                       i64 
    pop            pc_writeexe.getoffsets.thunkaddr i64 
    push           pc_writeexe.getoffsets.thunkaddr i64 
    push           pc_writeexe.getoffsets.thunkptr u64 
    popptr                    i32 
    push           &pc_writeexe.getoffsets.thunkptr 
    push           4          i64 
    addrefoffto               u64 1 0
#9238: 
    forup          #9237      i64 1
    opnd           pc_writeexe.getoffsets.i 
    opnd           pc_writeexe.nimports 
#9236: 
#9239: 
    retproc                   
End


Proc pc_writeexe.addsearchlib:
    param          pc_writeexe.addsearchlib.name u64 
    local          pc_writeexe.addsearchlib.i i64 
    procentry                 
    setargs                   2 0
    push           ""         u64 
    push           pc_writeexe.addsearchlib.name u64 
    callfn         &mlibp.changeext u64 
    pop            pc_writeexe.addsearchlib.name u64 
#9241: 
    push           1          i64 
    pop            pc_writeexe.addsearchlib.i i64 
    push           pci_mcl.npsearchlibs i64 
    push           1          i64 
    jumplt         #9242      i64 
#9243: 
    setargs                   2 0
    push           pc_writeexe.addsearchlib.name u64 
    push           &pci_mcl.psearchlibs 
    push           pc_writeexe.addsearchlib.i i64 
    pushptroff                u64 8 -8
    callfn         &mlibp.eqstring i64 
    jumpfalse      #9244      i64 
    jump           #9245      
#9244: 
#9246: 
    forup          #9243      i64 1
    opnd           pc_writeexe.addsearchlib.i 
    opnd           pci_mcl.npsearchlibs 
#9242: 
    push           pci_mcl.npsearchlibs i64 
    push           30         i64 
    jumplt         #9247      i64 
    setargs                   1 0
    push           "Too many LIB files" u64 
    callproc       &pci_mcl.axerror 
#9247: 
    setargs                   1 0
    push           pc_writeexe.addsearchlib.name u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &pci_mcl.psearchlibs 
    push           &pci_mcl.npsearchlibs 
    incrload                  i64 1
    popptroff                 u64 8 -8
#9245: 
    retproc                   
End


Proc pc_writeexe.setuplibfiles:
    local          pc_writeexe.setuplibfiles.i i64 
    procentry                 
    push           0          i64 
    pop            pci_mcl.npsearchlibs i64 
    push           "msvcrt"   u64 
    push           &pci_mcl.psearchlibs 
    push           1          i64 
    popptroff                 u64 8 -8
    push           "gdi32"    u64 
    push           &pci_mcl.psearchlibs 
    push           2          i64 
    popptroff                 u64 8 -8
    push           "user32"   u64 
    push           &pci_mcl.psearchlibs 
    push           3          i64 
    popptroff                 u64 8 -8
    push           "kernel32" u64 
    push           &pci_mcl.psearchlibs 
    push           4          i64 
    popptroff                 u64 8 -8
    push           4          i64 
    pop            pci_mcl.npsearchlibs i64 
#9249: 
    push           1          i64 
    pop            pc_writeexe.setuplibfiles.i i64 
    push           pci_mcl.nplibfiles i64 
    push           1          i64 
    jumplt         #9250      i64 
#9251: 
    setargs                   1 0
    push           &pci_mcl.plibfiles 
    push           pc_writeexe.setuplibfiles.i i64 
    pushptroff                u64 8 0
    callproc       &pc_writeexe.addsearchlib 
#9252: 
    forup          #9251      i64 1
    opnd           pc_writeexe.setuplibfiles.i 
    opnd           pci_mcl.nplibfiles 
#9250: 
#9253: 
    push           1          i64 
    pop            pc_writeexe.setuplibfiles.i i64 
    push           pc_decls.npdllnametable i64 
    push           1          i64 
    jumplt         #9254      i64 
#9255: 
    push           &pc_decls.pdllnametable 
    push           pc_writeexe.setuplibfiles.i i64 
    pushptroff                u64 8 -8
    pushptr                   u8 
    push           36         u64 
    jumpeq         #9256      u64 
    setargs                   1 0
    push           &pc_decls.pdllnametable 
    push           pc_writeexe.setuplibfiles.i i64 
    pushptroff                u64 8 -8
    callproc       &pc_writeexe.addsearchlib 
#9256: 
#9257: 
    forup          #9255      i64 1
    opnd           pc_writeexe.setuplibfiles.i 
    opnd           pc_decls.npdllnametable 
#9254: 
#9258: 
    retproc                   
End


Proc pc_writeexe.writeexporttable:
    param          pc_writeexe.writeexporttable.pstart u64 
    local          pc_writeexe.writeexporttable.sortindex block:16000 
    local          pc_writeexe.writeexporttable.phdr u64 
    local          pc_writeexe.writeexporttable.paddrtable u64 
    local          pc_writeexe.writeexporttable.pnametable u64 
    local          pc_writeexe.writeexporttable.pordtable u64 
    local          pc_writeexe.writeexporttable.pdllname u64 
    local          pc_writeexe.writeexporttable.pnames u64 
    local          pc_writeexe.writeexporttable.addrtableoffset i64 
    local          pc_writeexe.writeexporttable.nametableoffset i64 
    local          pc_writeexe.writeexporttable.ordtableoffset i64 
    local          pc_writeexe.writeexporttable.dllnameoffset i64 
    local          pc_writeexe.writeexporttable.namesoffset i64 
    local          pc_writeexe.writeexporttable.virtoffset i64 
    local          pc_writeexe.writeexporttable.sectionno i64 
    local          pc_writeexe.writeexporttable.d u64 
    local          pc_writeexe.writeexporttable.i i64 
    procentry                 
    push           pc_writeexe.writeexporttable.pstart u64 
    pop            pc_writeexe.writeexporttable.phdr u64 
    push           1602876664 i64 
    push           pc_writeexe.writeexporttable.phdr u64 
    push           4          
    popptroff                 u32 1 0
    push           1          i64 
    push           pc_writeexe.writeexporttable.phdr u64 
    push           16         
    popptroff                 u32 1 0
    push           pc_writeexe.nexports i64 
    push           pc_writeexe.writeexporttable.phdr u64 
    push           20         
    popptroff                 u32 1 0
    push           pc_writeexe.nexports i64 
    push           pc_writeexe.writeexporttable.phdr u64 
    push           24         
    popptroff                 u32 1 0
    push           40         i64 
    pop            pc_writeexe.writeexporttable.addrtableoffset i64 
    push           pc_writeexe.writeexporttable.addrtableoffset i64 
    push           pc_writeexe.nexports i64 
    push           4          i64 
    mul                       i64 
    add                       i64 
    pop            pc_writeexe.writeexporttable.nametableoffset i64 
    push           pc_writeexe.writeexporttable.nametableoffset i64 
    push           pc_writeexe.nexports i64 
    push           4          i64 
    mul                       i64 
    add                       i64 
    pop            pc_writeexe.writeexporttable.ordtableoffset i64 
    push           pc_writeexe.writeexporttable.ordtableoffset i64 
    push           pc_writeexe.nexports i64 
    push           2          i64 
    mul                       i64 
    add                       i64 
    pop            pc_writeexe.writeexporttable.dllnameoffset i64 
    push           pc_writeexe.writeexporttable.dllnameoffset i64 
    setargs                   1 0
    push           pc_writeexe.dllfilename u64 
    callfn         &strlen    i64 
    add                       i64 
    push           1          i64 
    add                       i64 
    pop            pc_writeexe.writeexporttable.namesoffset i64 
    push           &pc_writeexe.sectiontable 
    push           4          i64 
    addrefoff                 block:72 72 -72
    push           48         
    pushptroff                i64 1 0
    push           pc_writeexe.exportdiroffset i64 
    add                       i64 
    pop            pc_writeexe.writeexporttable.virtoffset i64 
    push           pc_writeexe.writeexporttable.pstart u64 
    push           pc_writeexe.writeexporttable.addrtableoffset i64 
    addrefoff                 u64 1 0
    pop            pc_writeexe.writeexporttable.paddrtable u64 
    push           pc_writeexe.writeexporttable.pstart u64 
    push           pc_writeexe.writeexporttable.nametableoffset i64 
    addrefoff                 u64 1 0
    pop            pc_writeexe.writeexporttable.pnametable u64 
    push           pc_writeexe.writeexporttable.pstart u64 
    push           pc_writeexe.writeexporttable.ordtableoffset i64 
    addrefoff                 u64 1 0
    pop            pc_writeexe.writeexporttable.pordtable u64 
    push           pc_writeexe.writeexporttable.pstart u64 
    push           pc_writeexe.writeexporttable.dllnameoffset i64 
    addrefoff                 u64 1 0
    pop            pc_writeexe.writeexporttable.pdllname u64 
    push           pc_writeexe.writeexporttable.pstart u64 
    push           pc_writeexe.writeexporttable.namesoffset i64 
    addrefoff                 u64 1 0
    pop            pc_writeexe.writeexporttable.pnames u64 
    push           pc_writeexe.writeexporttable.dllnameoffset i64 
    push           pc_writeexe.writeexporttable.virtoffset i64 
    add                       i64 
    push           pc_writeexe.writeexporttable.phdr u64 
    push           12         
    popptroff                 u32 1 0
    push           pc_writeexe.writeexporttable.addrtableoffset i64 
    push           pc_writeexe.writeexporttable.virtoffset i64 
    add                       i64 
    push           pc_writeexe.writeexporttable.phdr u64 
    push           28         
    popptroff                 u32 1 0
    push           pc_writeexe.writeexporttable.nametableoffset i64 
    push           pc_writeexe.writeexporttable.virtoffset i64 
    add                       i64 
    push           pc_writeexe.writeexporttable.phdr u64 
    push           32         
    popptroff                 u32 1 0
    push           pc_writeexe.writeexporttable.ordtableoffset i64 
    push           pc_writeexe.writeexporttable.virtoffset i64 
    add                       i64 
    push           pc_writeexe.writeexporttable.phdr u64 
    push           36         
    popptroff                 u32 1 0
    setargs                   2 0
    push           pc_writeexe.dllfilename u64 
    push           pc_writeexe.writeexporttable.pdllname u64 
    callproc       &strcpy    
    push           pc_writeexe.nexports i64 
    push           2000       i64 
    jumple         #9260      i64 
    setargs                   1 0
    push           "Too many exports - can't sort" u64 
    callproc       &pci_mcl.axerror 
#9260: 
    setargs                   1 0
    push           &pc_writeexe.writeexporttable.sortindex 
    callproc       &pc_writeexe.sortexports 
#9261: 
    push           1          i64 
    pop            pc_writeexe.writeexporttable.i i64 
    push           pc_writeexe.nexports i64 
    push           1          i64 
    jumplt         #9262      i64 
#9263: 
    push           &pc_writeexe.exporttable 
    push           &pc_writeexe.writeexporttable.sortindex 
    push           pc_writeexe.writeexporttable.i i64 
    pushptroff                i64 8 -8
    addrefoff                 block:16 16 -16
    pushptr                   u64 
    pop            pc_writeexe.writeexporttable.d u64 
    setargs                   1 0
    push           pc_writeexe.writeexporttable.d u64 
    push           30         
    pushptroff                u8 1 0
    callfn         &pc_writeexe.getsectionno i64 
    pop            pc_writeexe.writeexporttable.sectionno i64 
    setargs                   2 0
    push           pc_writeexe.writeexporttable.d u64 
    pushptr                   u64 
    push           pc_writeexe.writeexporttable.pnames u64 
    callproc       &strcpy    
    push           pc_writeexe.writeexporttable.namesoffset i64 
    push           pc_writeexe.writeexporttable.virtoffset i64 
    add                       i64 
    push           pc_writeexe.writeexporttable.pnametable u64 
    popptr                    u32 
    push           &pc_writeexe.writeexporttable.pnametable 
    incr                      u64 4
    push           &pc_writeexe.writeexporttable.namesoffset 
    setargs                   1 0
    push           pc_writeexe.writeexporttable.d u64 
    pushptr                   u64 
    callfn         &strlen    i64 
    push           1          i64 
    add                       i64 
    addto                     i64 
    push           &pc_writeexe.writeexporttable.pnames 
    setargs                   1 0
    push           pc_writeexe.writeexporttable.d u64 
    pushptr                   u64 
    callfn         &strlen    i64 
    push           1          i64 
    add                       i64 
    addrefoffto               u64 1 0
    push           pc_writeexe.writeexporttable.d u64 
    push           32         
    pushptroff                i32 1 0
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.writeexporttable.sectionno i64 
    addrefoff                 block:72 72 -72
    push           48         
    pushptroff                i64 1 0
    add                       i64 
    push           pc_writeexe.writeexporttable.paddrtable u64 
    popptr                    u32 
    push           &pc_writeexe.writeexporttable.paddrtable 
    incr                      u64 4
    push           pc_writeexe.writeexporttable.i i64 
    push           1          i64 
    sub                       i64 
    push           pc_writeexe.writeexporttable.pordtable u64 
    popptr                    u16 
    push           &pc_writeexe.writeexporttable.pordtable 
    incr                      u64 2
#9264: 
    forup          #9263      i64 1
    opnd           pc_writeexe.writeexporttable.i 
    opnd           pc_writeexe.nexports 
#9262: 
#9265: 
    retproc                   
End


Proc pc_writeexe.getexporttablesize: i64
    local          pc_writeexe.getexporttablesize.size i64 
    local          pc_writeexe.getexporttablesize.i i64 
    procentry                 
    push           40         i64 
    pop            pc_writeexe.getexporttablesize.size i64 
    push           &pc_writeexe.getexporttablesize.size 
    push           pc_writeexe.nexports i64 
    push           4          i64 
    mul                       i64 
    addto                     i64 
    push           &pc_writeexe.getexporttablesize.size 
    push           pc_writeexe.nexports i64 
    push           4          i64 
    mul                       i64 
    addto                     i64 
    push           &pc_writeexe.getexporttablesize.size 
    push           pc_writeexe.nexports i64 
    push           2          i64 
    mul                       i64 
    addto                     i64 
    push           &pc_writeexe.getexporttablesize.size 
    setargs                   1 0
    push           pc_writeexe.dllfilename u64 
    callfn         &strlen    i64 
    push           1          i64 
    add                       i64 
    addto                     i64 
#9267: 
    push           1          i64 
    pop            pc_writeexe.getexporttablesize.i i64 
    push           pc_writeexe.nexports i64 
    push           1          i64 
    jumplt         #9268      i64 
#9269: 
    push           &pc_writeexe.getexporttablesize.size 
    setargs                   1 0
    push           &pc_writeexe.exporttable 
    push           pc_writeexe.getexporttablesize.i i64 
    addrefoff                 block:16 16 -16
    pushptr                   u64 
    pushptr                   u64 
    callfn         &strlen    i64 
    push           1          i64 
    add                       i64 
    addto                     i64 
#9270: 
    forup          #9269      i64 1
    opnd           pc_writeexe.getexporttablesize.i 
    opnd           pc_writeexe.nexports 
#9268: 
    push           pc_writeexe.getexporttablesize.size i64 
    setret                    i64 
    jump           #9271      
#9271: 
    retfn                     i64 
End


Proc pc_writeexe.newbasereloc:
    param          pc_writeexe.newbasereloc.addr i64 
    param          pc_writeexe.newbasereloc.reltype i64 
    local          pc_writeexe.newbasereloc.p u64 
    procentry                 
    setargs                   1 0
    push           16         i64 
    callfn         &mlibp.pcm_allocz u64 
    pop            pc_writeexe.newbasereloc.p u64 
    push           pc_writeexe.newbasereloc.addr i64 
    push           pc_writeexe.newbasereloc.p u64 
    push           8          
    popptroff                 u32 1 0
    push           pc_writeexe.newbasereloc.reltype i64 
    push           pc_writeexe.newbasereloc.p u64 
    push           12         
    popptroff                 i32 1 0
    push           pc_writeexe.basereloclist u64 
    push           pc_writeexe.newbasereloc.p u64 
    push           0          
    popptroff                 u64 1 0
    push           pc_writeexe.newbasereloc.p u64 
    pop            pc_writeexe.basereloclist u64 
    push           &pc_writeexe.nbaserelocs 
    incr                      i64 1
    push           &pc_writeexe.maxrelocaddr 
    push           pc_writeexe.newbasereloc.addr i64 
    maxto                     i64 
#9273: 
    retproc                   
End


Proc pc_writeexe.scanbaserelocs:
    local          pc_writeexe.scanbaserelocs.baseaddr i64 
    local          pc_writeexe.scanbaserelocs.addr i64 
    local          pc_writeexe.scanbaserelocs.nextblock i64 
    local          pc_writeexe.scanbaserelocs.p u64 
    local          pc_writeexe.scanbaserelocs.i i64 
    procentry                 
    push           4096       i64 
    pop            pc_writeexe.scanbaserelocs.baseaddr i64 
    push           0          i64 
    pop            pc_writeexe.nbaseblocks i64 
#9275: 
    push           pc_writeexe.scanbaserelocs.baseaddr i64 
    push           4096       i64 
    add                       i64 
    pop            pc_writeexe.scanbaserelocs.nextblock i64 
    push           pc_writeexe.nbaseblocks i64 
    push           500        i64 
    jumplt         #9276      i64 
    setargs                   1 0
    push           "Too many blocks" u64 
    callproc       &pci_mcl.axerror 
#9276: 
    push           &pc_writeexe.nbaseblocks 
    incr                      i64 1
    push           pc_writeexe.scanbaserelocs.baseaddr i64 
    push           &pc_writeexe.blockbases 
    push           pc_writeexe.nbaseblocks i64 
    popptroff                 i64 8 -8
    push           0          i64 
    push           &pc_writeexe.blockcounts 
    push           pc_writeexe.nbaseblocks i64 
    popptroff                 i32 4 -4
    push           pc_writeexe.basereloclist u64 
    pop            pc_writeexe.scanbaserelocs.p u64 
    jump           #9277      
#9278: 
    push           pc_writeexe.scanbaserelocs.p u64 
    push           8          
    pushptroff                u32 1 0
    pop            pc_writeexe.scanbaserelocs.addr i64 
    push           pc_writeexe.scanbaserelocs.addr i64 
    push           pc_writeexe.scanbaserelocs.baseaddr i64 
    jumplt         #9279      i64 
    push           pc_writeexe.scanbaserelocs.addr i64 
    push           pc_writeexe.scanbaserelocs.nextblock i64 
    jumpge         #9279      i64 
    push           &pc_writeexe.blockcounts 
    push           pc_writeexe.nbaseblocks i64 
    addrefoff                 i32 4 -4
    incr                      i32 1
#9279: 
    push           pc_writeexe.scanbaserelocs.p u64 
    pushptr                   u64 
    pop            pc_writeexe.scanbaserelocs.p u64 
#9277: 
    push           pc_writeexe.scanbaserelocs.p u64 
    jumptrue       #9278      u64 
#9280: 
    push           pc_writeexe.scanbaserelocs.nextblock i64 
    pop            pc_writeexe.scanbaserelocs.baseaddr i64 
#9281: 
    push           pc_writeexe.scanbaserelocs.baseaddr i64 
    push           pc_writeexe.maxrelocaddr i64 
    jumple         #9275      i64 
#9282: 
#9283: 
    push           1          i64 
    pop            pc_writeexe.scanbaserelocs.i i64 
    push           pc_writeexe.nbaseblocks i64 
    push           1          i64 
    jumplt         #9284      i64 
#9285: 
    push           &pc_writeexe.blockcounts 
    push           pc_writeexe.scanbaserelocs.i i64 
    pushptroff                i32 4 -4
    jumpfalse      #9286      i64 
    push           &pc_writeexe.blockcounts 
    push           pc_writeexe.scanbaserelocs.i i64 
    pushptroff                i32 4 -4
    push           0          i64 
    dotindex                  i64 
    jumpfalse      #9287      u64 
    push           &pc_writeexe.blockcounts 
    push           pc_writeexe.scanbaserelocs.i i64 
    addrefoff                 i32 4 -4
    incr                      i32 1
    push           &pc_writeexe.blockpadding 
    push           pc_writeexe.scanbaserelocs.i i64 
    addrefoff                 u8 1 -1
    incr                      u8 1
#9287: 
    push           &pc_writeexe.blockcounts 
    push           pc_writeexe.scanbaserelocs.i i64 
    pushptroff                i32 4 -4
    push           2          i64 
    mul                       i64 
    push           8          i64 
    add                       i64 
    push           &pc_writeexe.blockbytes 
    push           pc_writeexe.scanbaserelocs.i i64 
    popptroff                 i32 4 -4
    push           &pc_writeexe.basetablesize 
    push           &pc_writeexe.blockbytes 
    push           pc_writeexe.scanbaserelocs.i i64 
    pushptroff                i32 4 -4
    addto                     i64 
#9286: 
#9288: 
    forup          #9285      i64 1
    opnd           pc_writeexe.scanbaserelocs.i 
    opnd           pc_writeexe.nbaseblocks 
#9284: 
#9289: 
    retproc                   
End


Proc pc_writeexe.writebasereloctable:
    param          pc_writeexe.writebasereloctable.pstart u64 
    local          pc_writeexe.writebasereloctable.p32 u64 
    local          pc_writeexe.writebasereloctable.p16 u64 
    local          pc_writeexe.writebasereloctable.baseaddr i64 
    local          pc_writeexe.writebasereloctable.addr i64 
    local          pc_writeexe.writebasereloctable.nextblock i64 
    local          pc_writeexe.writebasereloctable.q u64 
    local          pc_writeexe.writebasereloctable.i i64 
    procentry                 
    push           pc_writeexe.writebasereloctable.pstart u64 
    pop            pc_writeexe.writebasereloctable.p32 u64 
#9291: 
    push           1          i64 
    pop            pc_writeexe.writebasereloctable.i i64 
    push           pc_writeexe.nbaseblocks i64 
    push           1          i64 
    jumplt         #9292      i64 
#9293: 
    push           &pc_writeexe.blockcounts 
    push           pc_writeexe.writebasereloctable.i i64 
    pushptroff                i32 4 -4
    jumpfalse      #9294      i64 
    push           &pc_writeexe.blockbases 
    push           pc_writeexe.writebasereloctable.i i64 
    pushptroff                i64 8 -8
    push           pc_writeexe.writebasereloctable.p32 u64 
    popptr                    u32 
    push           &pc_writeexe.writebasereloctable.p32 
    incr                      u64 4
    push           &pc_writeexe.blockbytes 
    push           pc_writeexe.writebasereloctable.i i64 
    pushptroff                i32 4 -4
    push           pc_writeexe.writebasereloctable.p32 u64 
    popptr                    u32 
    push           &pc_writeexe.writebasereloctable.p32 
    incr                      u64 4
    push           pc_writeexe.writebasereloctable.p32 u64 
    pop            pc_writeexe.writebasereloctable.p16 u64 
    push           pc_writeexe.basereloclist u64 
    pop            pc_writeexe.writebasereloctable.q u64 
    push           &pc_writeexe.blockbases 
    push           pc_writeexe.writebasereloctable.i i64 
    pushptroff                i64 8 -8
    pop            pc_writeexe.writebasereloctable.baseaddr i64 
    push           pc_writeexe.writebasereloctable.baseaddr i64 
    push           4096       i64 
    add                       i64 
    pop            pc_writeexe.writebasereloctable.nextblock i64 
    jump           #9295      
#9296: 
    push           pc_writeexe.writebasereloctable.q u64 
    push           8          
    pushptroff                u32 1 0
    pop            pc_writeexe.writebasereloctable.addr i64 
    push           pc_writeexe.writebasereloctable.addr i64 
    push           pc_writeexe.writebasereloctable.baseaddr i64 
    jumplt         #9297      i64 
    push           pc_writeexe.writebasereloctable.addr i64 
    push           pc_writeexe.writebasereloctable.nextblock i64 
    jumpge         #9297      i64 
    push           pc_writeexe.writebasereloctable.addr i64 
    push           pc_writeexe.writebasereloctable.baseaddr i64 
    sub                       i64 
    startmult                 
    push           pc_writeexe.writebasereloctable.q u64 
    push           12         
    pushptroff                i32 1 0
    push           2          i64 
    jumpne         #9298      i64 
    push           3          i64 
    resetmult                 
    jump           #9299      
#9298: 
    push           10         i64 
    endmult                   
#9299: 
    push           12         i64 
    shl                       i64 
    add                       i64 
    push           pc_writeexe.writebasereloctable.p16 u64 
    popptr                    u16 
    push           &pc_writeexe.writebasereloctable.p16 
    incr                      u64 2
#9297: 
    push           pc_writeexe.writebasereloctable.q u64 
    pushptr                   u64 
    pop            pc_writeexe.writebasereloctable.q u64 
#9295: 
    push           pc_writeexe.writebasereloctable.q u64 
    jumptrue       #9296      u64 
#9300: 
    push           &pc_writeexe.blockpadding 
    push           pc_writeexe.writebasereloctable.i i64 
    pushptroff                u8 1 -1
    jumpfalse      #9301      i64 
    push           0          i64 
    push           &pc_writeexe.writebasereloctable.p16 
    loadincr                  u64 2
    popptr                    u16 
#9301: 
    push           pc_writeexe.writebasereloctable.p16 u64 
    pop            pc_writeexe.writebasereloctable.p32 u64 
#9294: 
#9302: 
    forup          #9293      i64 1
    opnd           pc_writeexe.writebasereloctable.i 
    opnd           pc_writeexe.nbaseblocks 
#9292: 
#9303: 
    retproc                   
End


Proc pc_writeexe.sortexports:
    param          pc_writeexe.sortexports.sortindex u64 
    local          pc_writeexe.sortexports.d u64 
    local          pc_writeexe.sortexports.e u64 
    local          pc_writeexe.sortexports.swapped i64 
    local          pc_writeexe.sortexports.av_1 i64 
    local          pc_writeexe.sortexports.i i64 
    procentry                 
#9305: 
    push           1          i64 
    pop            pc_writeexe.sortexports.i i64 
    push           pc_writeexe.nexports i64 
    push           1          i64 
    jumplt         #9306      i64 
#9307: 
    push           pc_writeexe.sortexports.i i64 
    push           pc_writeexe.sortexports.sortindex u64 
    push           pc_writeexe.sortexports.i i64 
    popptroff                 i64 8 -8
#9308: 
    forup          #9307      i64 1
    opnd           pc_writeexe.sortexports.i 
    opnd           pc_writeexe.nexports 
#9306: 
#9309: 
    push           0          i64 
    pop            pc_writeexe.sortexports.swapped i64 
#9310: 
    push           1          i64 
    pop            pc_writeexe.sortexports.i i64 
    push           pc_writeexe.nexports i64 
    push           1          i64 
    sub                       i64 
    pop            pc_writeexe.sortexports.av_1 i64 
    push           pc_writeexe.sortexports.av_1 i64 
    push           1          i64 
    jumplt         #9311      i64 
#9312: 
    push           &pc_writeexe.exporttable 
    push           pc_writeexe.sortexports.sortindex u64 
    push           pc_writeexe.sortexports.i i64 
    pushptroff                i64 8 -8
    addrefoff                 block:16 16 -16
    pushptr                   u64 
    pop            pc_writeexe.sortexports.d u64 
    push           &pc_writeexe.exporttable 
    push           pc_writeexe.sortexports.sortindex u64 
    push           pc_writeexe.sortexports.i i64 
    pushptroff                i64 8 0
    addrefoff                 block:16 16 -16
    pushptr                   u64 
    pop            pc_writeexe.sortexports.e u64 
    setargs                   2 0
    push           pc_writeexe.sortexports.e u64 
    pushptr                   u64 
    push           pc_writeexe.sortexports.d u64 
    pushptr                   u64 
    callfn         &strcmp    i32 
    push           0          i64 
    jumple         #9313      i64 
    push           1          i64 
    pop            pc_writeexe.sortexports.swapped i64 
    push           pc_writeexe.sortexports.sortindex u64 
    push           pc_writeexe.sortexports.i i64 
    addrefoff                 i64 8 -8
    push           pc_writeexe.sortexports.sortindex u64 
    push           pc_writeexe.sortexports.i i64 
    addrefoff                 i64 8 0
    swap                      i64 
#9313: 
#9314: 
    forup          #9312      i64 1
    opnd           pc_writeexe.sortexports.i 
    opnd           pc_writeexe.sortexports.av_1 
#9311: 
#9315: 
    push           pc_writeexe.sortexports.swapped i64 
    jumptrue       #9309      i64 
#9316: 
#9317: 
    retproc                   
End


Proc pc_writeexe.getsectionno: i64
    param          pc_writeexe.getsectionno.segment i64 
    procentry                 
    startmult                 
    push           pc_writeexe.getsectionno.segment i64 
    push           3          i64 
    casejumpeq     #9319      i64 0
    push           2          i64 
    casejumpeq     #9320      i64 0
    push           1          i64 
    casejumpeq     #9321      i64 0
    popstack                  i64 
    jump           #9322      
#9319: 
    push           3          i64 
    resetmult                 
    jump           #9323      
#9320: 
    push           2          i64 
    resetmult                 
    jump           #9323      
#9321: 
    push           1          i64 
    resetmult                 
    jump           #9323      
#9322: 
    setargs                   1 0
    push           "GSN"      u64 
    callproc       &pci_mcl.axerror 
    push           0          i64 
    endmult                   
#9323: 
    setret                    i64 
    jump           #9324      
#9324: 
    retfn                     i64 
End


Proc pc_writessx.writessdata: u64
    param          pc_writessx.writessdata.fexe i64 
    procentry                 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_init 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_line 
    push           pci_mcl.dest u64 
    setret                    u64 
    jump           #9326      
#9326: 
    retfn                     u64 
End


Proc pci_clangx.genclang:
    param          pci_clangx.genclang.filename u64 
    procentry                 
    setargs                   1 0
    push           "-CLANG Target Not Included" u64 
    callproc       &mlibp.abortprogram 
#9328: 
    retproc                   
End


Proc pc.start::
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$init 
    setargs                   0 0
    callproc       &pc.getinputoptions 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Processing" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc.infile  u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "to"       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc.destfile u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           pc.freadpcl u8 
    jumpfalse      #9330      i64 
    setargs                   2 0
    startmult                 
    push           pc.freadrts u8 
    jumpfalse      #9331      i64 
    push           "rts.pcl"  u64 
    resetmult                 
    jump           #9332      
#9331: 
    push           0          u64 
    endmult                   
#9332: 
    push           pc.infile  u64 
    callfn         &pc_parse.pcl_readpclfile i64 
    jumptrue       #9333      i64 
    setargs                   2 0
    push           pc.infile  u64 
    setargs                   0 0
    callfn         &pc_libpcl.pcl_lasterror u64 
    callproc       &pc.loaderror 
#9333: 
    jump           #9334      
#9330: 
    setargs                   2 0
    push           ""         u64 
    push           "Can't load .pcl files yet" u64 
    callproc       &pc.loaderror 
#9334: 
    push           pc.target  i64 
    push           1          i64 
    casejumpeq     #9335      i64 0
    push           2          i64 
    casejumpeq     #9336      i64 0
    push           3          i64 
    casejumpeq     #9337      i64 0
    push           4          i64 
    casejumpeq     #9338      i64 0
    push           9          i64 
    casejumpeq     #9339      i64 0
    push           7          i64 
    casejumpeq     #9340      i64 0
    push           5          i64 
    casejumpeq     #9341      i64 0
    push           6          i64 
    casejumpeq     #9342      i64 0
    popstack                  i64 
    jump           #9343      
#9335: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Done"     u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #9344      
#9336: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Writing to:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc.destfile u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           pc.destfile u64 
    callproc       &pc_libpcl.pcl_writepclfile 
    setargs                   1 0
    push           pc.fshowpcl u8 
    callproc       &pc.showoutputfile 
    jump           #9344      
#9337: 
    setargs                   2 0
    push           ""         u64 
    push           "PCB writing not ready" u64 
    callproc       &pc.loaderror 
    jump           #9344      
#9338: 
    setargs                   1 0
    push           pc.destfile u64 
    callproc       &pc_win64.pcl_writeclangfile 
    setargs                   1 0
    push           pc.fshowc  u8 
    callproc       &pc.showoutputfile 
    jump           #9344      
#9339: 
    setargs                   2 0
    push           ""         u64 
    push           "RunVM target not ready" u64 
    callproc       &pc.loaderror 
    jump           #9344      
#9340: 
    setargs                   2 0
    push           pc.foptim  u8 
    push           pc.destfile u64 
    callproc       &pc_win64.pcl_writeasmfile 
    setargs                   1 0
    push           pc.fshowmcl u8 
    callproc       &pc.showoutputfile 
    jump           #9344      
#9341: 
    setargs                   2 0
    push           pc.foptim  u8 
    push           pc.destfile u64 
    callproc       &pc_win64.pcl_writeexefile 
    push           pc.fshowss u8 
    jumpfalse      #9345      i64 
    setargs                   2 0
    push           1          i64 
    push           "SS"       u64 
    callproc       &pc_win64.pcl_showss 
    push           "SS"       u64 
    pop            pc.destfile u64 
    setargs                   1 0
    push           1          i64 
    callproc       &pc.showoutputfile 
#9345: 
    jump           #9344      
#9342: 
    setargs                   2 0
    push           pc.foptim  u8 
    push           pc.destfile u64 
    callproc       &pc_win64.pcl_writedllfile 
    jump           #9344      
#9343: 
#9344: 
#9346: 
    push           0          
    stop                      
    retproc                   
End


Proc pc.showoutputfile:
    param          pc.showoutputfile.flag i64 
    local          pc.showoutputfile.str block:300 
    procentry                 
    push           pc.showoutputfile.flag i64 
    jumpfalse      #9348      i64 
    setargs                   1 0
    push           &pc.showoutputfile.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "\\m\\olded.bat -w " u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc.destfile u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   3 0
    push           0          u64 
    push           1          i64 
    push           &pc.showoutputfile.str 
    callproc       &mwindowsp.os_execwait 
#9348: 
#9349: 
    retproc                   
End


Proc pc.getinputoptions:
    local          pc.getinputoptions.paramno i64 
    local          pc.getinputoptions.pmtype i64 
    local          pc.getinputoptions.name u64 
    local          pc.getinputoptions.value u64 
    local          pc.getinputoptions.ext u64 
    local          pc.getinputoptions.filespec block:300 
    local          pc.getinputoptions.av_1 i64 
    local          pc.getinputoptions.sw i64 
    procentry                 
    push           2          i64 
    pop            pc.getinputoptions.paramno i64 
    jump           #9351      
#9352: 
    push           pc.getinputoptions.pmtype i64 
    push           1          i64 
    casejumpeq     #9353      i64 0
    push           2          i64 
    casejumpeq     #9354      i64 0
    push           3          i64 
    casejumpeq     #9355      i64 0
    popstack                  i64 
    jump           #9356      
#9353: 
    setargs                   1 0
    push           pc.getinputoptions.name u64 
    callproc       &mlibp.convlcstring 
#9357: 
    push           1          i64 
    pop            pc.getinputoptions.sw i64 
    push           28         i64 
    pop            pc.getinputoptions.av_1 i64 
    push           pc.getinputoptions.av_1 i64 
    push           1          i64 
    jumplt         #9358      i64 
#9359: 
    setargs                   2 0
    push           &pc.optionnames 
    push           pc.getinputoptions.sw i64 
    pushptroff                u64 8 -8
    push           pc.getinputoptions.name u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #9360      i64 
    setargs                   2 0
    push           pc.getinputoptions.value u64 
    push           pc.getinputoptions.sw i64 
    callproc       &pc.do_option 
    jump           #9361      
#9360: 
#9362: 
    forup          #9359      i64 1
    opnd           pc.getinputoptions.sw 
    opnd           pc.getinputoptions.av_1 
#9358: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Unknown option:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc.getinputoptions.name u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           99         i64 
    stop                      
#9361: 
    jump           #9363      
#9354: 
    push           pc.ninputfiles i64 
    push           20         i64 
    jumplt         #9364      i64 
    setargs                   2 0
    push           ""         u64 
    push           "Too many input files" u64 
    callproc       &pc.loaderror 
#9364: 
    setargs                   1 0
    push           pc.getinputoptions.name u64 
    callproc       &mlibp.convlcstring 
    setargs                   1 0
    push           pc.getinputoptions.name u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &pc.inputfiles 
    push           &pc.ninputfiles 
    incrload                  i64 1
    popptroff                 u64 8 0
    jump           #9363      
#9355: 
    push           pc.nlibfiles i64 
    push           20         i64 
    jumplt         #9365      i64 
    setargs                   2 0
    push           ""         u64 
    push           "Too many lib files" u64 
    callproc       &pc.loaderror 
#9365: 
    setargs                   1 0
    push           pc.getinputoptions.name u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &pc.libfiles 
    push           &pc.nlibfiles 
    incrload                  i64 1
    popptroff                 u64 8 0
    jump           #9363      
#9356: 
#9363: 
#9351: 
    setargs                   4 0
    push           "pcl"      u64 
    push           &pc.getinputoptions.value 
    push           &pc.getinputoptions.name 
    push           &pc.getinputoptions.paramno 
    callfn         &mlibp.nextcmdparam i64 
    store          pc.getinputoptions.pmtype i64 
    jumptrue       #9352      i64 
#9366: 
    push           pc.target  i64 
    push           0          i64 
    jumpne         #9367      i64 
    push           5          i64 
    pop            pc.target  i64 
    push           "exe"      u64 
    pop            pc.destext u64 
#9367: 
    push           pc.ninputfiles i64 
    push           0          i64 
    jumpne         #9368      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Usage:"   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "\t"       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           &msysp.sysparams 
    push           1          i64 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "filename[.pcl]      # Compile to executable" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "\t"       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           &msysp.sysparams 
    push           1          i64 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "-help               # Show other options" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           0          
    stop                      
    jump           #9369      
#9368: 
    push           pc.ninputfiles i64 
    push           1          i64 
    jumpne         #9370      i64 
    push           &pc.inputfiles 
    push           1          i64 
    pushptroff                u64 8 0
    pop            pc.infile  u64 
    setargs                   2 0
    push           0          i64 
    push           pc.infile  u64 
    callfn         &mlibp.extractext u64 
    pop            pc.getinputoptions.ext u64 
    setargs                   1 0
    setargs                   2 0
    push           pc.destext u64 
    push           pc.infile  u64 
    callfn         &mlibp.changeext u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    pop            pc.destfile u64 
    push           pc.destfilename u64 
    jumpfalse      #9371      u64 
    setargs                   1 0
    setargs                   2 0
    push           pc.destext u64 
    push           pc.destfilename u64 
    callfn         &mlibp.addext u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    pop            pc.destfile u64 
    jump           #9372      
#9371: 
    push           pc.destfilepath u64 
    jumpfalse      #9373      u64 
    setargs                   2 0
    push           pc.destfilepath u64 
    push           &pc.getinputoptions.filespec 
    callproc       &strcpy    
    setargs                   2 0
    push           pc.destfile u64 
    setargs                   1 0
    push           &pc.getinputoptions.filespec 
    callfn         &mlibp.extractfile u64 
    callproc       &strcat    
    setargs                   1 0
    push           &pc.getinputoptions.filespec 
    callfn         &mlibp.pcm_copyheapstring u64 
    pop            pc.destfile u64 
#9373: 
#9372: 
    setargs                   2 0
    push           &pc.inputfiles 
    push           1          i64 
    pushptroff                u64 8 0
    push           pc.destfile u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #9374      i64 
    setargs                   2 0
    push           pc.destfile u64 
    push           "Overwriting input file:" u64 
    callproc       &pc.loaderror 
#9374: 
    setargs                   2 0
    push           "pcl"      u64 
    setargs                   1 0
    setargs                   2 0
    push           0          i64 
    push           &pc.inputfiles 
    push           1          i64 
    pushptroff                u64 8 0
    callfn         &mlibp.extractext u64 
    callfn         &mlibp.convlcstring u64 
    callfn         &mlibp.eqstring i64 
    pop            pc.freadpcl u8 
    jump           #9369      
#9370: 
    setargs                   2 0
    push           ""         u64 
    push           "Can't do multiple pcl/pcb modules yet" u64 
    callproc       &pc.loaderror 
#9369: 
    push           pc.target  i64 
    push           5          i64 
    setjumpeq      #9375      i64 
    push           6          i64 
    setjumpeq      #9375      i64 
    push           7          i64 
    setjumpeq      #9375      i64 
    push           10         i64 
    setjumpne      #9376      i64 
#9375: 
    push           1          i64 
    pop            pc.mcltarget u8 
#9376: 
#9377: 
    retproc                   
End


Proc pc.do_option:
    param          pc.do_option.sw i64 
    param          pc.do_option.value u64 
    procentry                 
    push           pc.do_option.sw i64 
    switch         #9379      1 28
    opnd           #9380      
#9379: 
    switchlabel    #9381      
    switchlabel    #9382      
    switchlabel    #9380      
    switchlabel    #9383      
    switchlabel    #9384      
    switchlabel    #9385      
    switchlabel    #9386      
    switchlabel    #9387      
    switchlabel    #9388      
    switchlabel    #9389      
    switchlabel    #9390      
    switchlabel    #9391      
    switchlabel    #9392      
    switchlabel    #9393      
    switchlabel    #9394      
    switchlabel    #9395      
    switchlabel    #9396      
    switchlabel    #9397      
    switchlabel    #9398      
    switchlabel    #9399      
    switchlabel    #9400      
    switchlabel    #9401      
    switchlabel    #9402      
    switchlabel    #9380      
    switchlabel    #9403      
    switchlabel    #9403      
    switchlabel    #9404      
    switchlabel    #9405      
    endswitch                 
#9381: 
    push           5          i64 
    pop            pc.target  i64 
    push           "exe"      u64 
    pop            pc.destext u64 
    jump           #9406      
#9382: 
    push           6          i64 
    pop            pc.target  i64 
    push           "dll"      u64 
    pop            pc.destext u64 
    jump           #9406      
#9383: 
    push           7          i64 
    pop            pc.target  i64 
    push           "asm"      u64 
    pop            pc.destext u64 
    jump           #9406      
#9384: 
    push           4          i64 
    pop            pc.target  i64 
    push           "c"        u64 
    pop            pc.destext u64 
    jump           #9406      
#9385: 
    push           2          i64 
    pop            pc.target  i64 
    push           "pcl"      u64 
    pop            pc.destext u64 
    jump           #9406      
#9386: 
    push           3          i64 
    pop            pc.target  i64 
    push           "pcb"      u64 
    pop            pc.destext u64 
    jump           #9406      
#9388: 
    push           9          i64 
    pop            pc.target  i64 
    push           ""         u64 
    pop            pc.destext u64 
    jump           #9406      
#9389: 
    push           10         i64 
    pop            pc.target  i64 
    push           ""         u64 
    pop            pc.destext u64 
    jump           #9406      
#9387: 
    push           1          i64 
    pop            pc.target  i64 
    push           ""         u64 
    pop            pc.destext u64 
    jump           #9406      
#9390: 
    push           2          i64 
    pop            pc.foptim  u8 
    jump           #9406      
#9391: 
    push           1          i64 
    pop            pc.foptim  u8 
    jump           #9406      
#9392: 
    push           2          i64 
    pop            pc.foptim  u8 
    jump           #9406      
#9393: 
    push           1          i64 
    pop            pc.freadrts u8 
    jump           #9406      
#9394: 
    push           0          i64 
    pop            pc.freadrts u8 
    jump           #9406      
#9401: 
    push           1          i64 
    pop            pc.fshowtiming u8 
    jump           #9406      
#9402: 
    push           1          i64 
    pop            pc.fverbose u8 
    jump           #9406      
#9403: 
    setargs                   0 0
    callproc       &pc.showhelp 
    push           0          
    stop                      
    jump           #9406      
#9404: 
    push           pc.do_option.outpathused u8 
    jumpfalse      #9407      i64 
    setargs                   2 0
    push           ""         u64 
    push           "mixed out/path" u64 
    callproc       &pc.loaderror 
#9407: 
    setargs                   1 0
    push           pc.do_option.value u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    pop            pc.destfilename u64 
    push           1          i64 
    pop            pc.do_option.outused u8 
    jump           #9406      
#9405: 
    push           pc.do_option.outused u8 
    jumpfalse      #9408      i64 
    setargs                   2 0
    push           ""         u64 
    push           "mixed out/path" u64 
    callproc       &pc.loaderror 
#9408: 
    push           pc.do_option.value u64 
    setargs                   1 0
    push           pc.do_option.value u64 
    callfn         &strlen    i64 
    pushptroff                u8 1 -1
    push           92         i64 
    setjumpeq      #9409      u64 
    push           47         i64 
    setjumpeqx     #9409      u64 
    setargs                   2 0
    push           ""         u64 
    push           "Path needs to end with \\ or /" u64 
    callproc       &pc.loaderror 
#9409: 
    setargs                   1 0
    push           pc.do_option.value u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    pop            pc.destfilepath u64 
    push           1          i64 
    pop            pc.do_option.outpathused u8 
    jump           #9406      
#9395: 
    push           1          i64 
    pop            pc.fshowpcl u8 
    jump           #9406      
#9396: 
    push           1          i64 
    pop            pc.fshowmcl u8 
    jump           #9406      
#9397: 
    push           1          i64 
    pop            pc.fshowc  u8 
    jump           #9406      
#9398: 
    push           1          i64 
    pop            pc.fshowss u8 
    jump           #9406      
#9399: 
    push           1          i64 
    pop            pc.fshowst u8 
    jump           #9406      
#9400: 
    push           1          i64 
    pop            pc.fshowstflat u8 
    jump           #9406      
#9380: 
#9406: 
#9410: 
    retproc                   
End


Proc pc.showhelp:
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "PC.EXE PCL Processor\n\nUsage:\n\n    pc prog        Compile prog.pcl to prog.exe (.pcl optional)\n\nOptions:\n\n    -exe           (Default) generate native x64 and write EXE file\n    -dll           Generate native x64 code and write DLL file\n    -asm           Generate native x64 code and write ASM source file\n    -pcl           Generate PCL source code (use -out to set dest file)\n\n    -clang         Generate linear C source code (if backend present)\n\n    -opt           Apply optimiser to x64 backend\n    -norts         Don't include runtime PCL code\n\n    -out:file      Set name of output file (default is based on input file)\n" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           0          
    stop                      
#9412: 
    retproc                   
End


Proc pc.loaderror:
    param          pc.loaderror.mess u64 
    param          pc.loaderror.param u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Load error:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc.loaderror.mess u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc.loaderror.param u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#9414: 
    retproc                   
End


Endprogram
