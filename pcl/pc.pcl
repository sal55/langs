Extproc malloc u64
    extparam                  u64 
Endext

Extproc realloc u64
    extparam                  u64 
    extparam                  u64 
Endext

Extproc free
    extparam                  u64 
Endext

Extproc memset
    extparam                  u64 
    extparam                  i32 
    extparam                  u64 
Endext

Extproc memcpy
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
Endext

Extproc clock i32
Endext

Extproc ftell i32
    extparam                  u64 
Endext

Extproc fseek i32
    extparam                  u64 
    extparam                  i32 
    extparam                  i32 
Endext

Extproc fread u64
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
Endext

Extproc fwrite u64
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
Endext

Extproc ungetc i32
    extparam                  i32 
    extparam                  u64 
Endext

Extproc fopen u64
    extparam                  u64 
    extparam                  u64 
Endext

Extproc fclose i32
    extparam                  u64 
Endext

Extproc fgets u64
    extparam                  u64 
    extparam                  i64 
    extparam                  u64 
Endext

Extproc getchar i32
Endext

Extproc strlen i64
    extparam                  u64 
Endext

Extproc strcpy u64
    extparam                  u64 
    extparam                  u64 
Endext

Extproc strcmp i32
    extparam                  u64 
    extparam                  u64 
Endext

Extproc strncmp i32
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
Endext

Extproc strncpy u64
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
Endext

Extproc memcmp i32
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
Endext

Extproc strcat u64
    extparam                  u64 
    extparam                  u64 
Endext

Extproc tolower i32
    extparam                  i32 
Endext

Extproc toupper i32
    extparam                  i32 
Endext

Extproc strtod r64
    extparam                  u64 
    extparam                  u64 
Endext

Extproc puts i32
    extparam                  u64 
Endext

Extproc printf i32
    extparam                  u64 
    extvariadics              
Endext

Extproc sprintf i32
    extparam                  u64 
    extparam                  u64 
    extvariadics              
Endext

Extproc sscanf i32
    extparam                  u64 
    extparam                  u64 
    extvariadics              
Endext

Extproc system i32
    extparam                  u64 
Endext

Extproc fgetc i32
    extparam                  u64 
Endext

Extproc fprintf i32
    extparam                  u64 
    extparam                  u64 
    extvariadics              
Endext

Extproc strchr u64
    extparam                  u64 
    extparam                  i32 
Endext

Extproc __getmainargs i32
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
    extparam                  i64 
    extparam                  u64 
Endext

Extproc `GetStdHandle u64
    extparam                  u32 
Endext

Extproc `SetConsoleCtrlHandler i64
    extparam                  u64 
    extparam                  i64 
Endext

Extproc `SetConsoleMode i64
    extparam                  u64 
    extparam                  u32 
Endext

Extproc `CreateProcessA i64
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
    extparam                  i64 
    extparam                  u32 
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
Endext

Extproc `GetLastError u32
Endext

Extproc `WaitForSingleObject u32
    extparam                  u64 
    extparam                  u32 
Endext

Extproc `GetExitCodeProcess i64
    extparam                  u64 
    extparam                  u64 
Endext

Extproc `CloseHandle i64
    extparam                  u64 
Endext

Extproc `GetNumberOfConsoleInputEvents i64
    extparam                  u64 
    extparam                  u64 
Endext

Extproc `FlushConsoleInputBuffer i64
    extparam                  u64 
Endext

Extproc `LoadLibraryA u64
    extparam                  u64 
Endext

Extproc `GetProcAddress u64
    extparam                  u64 
    extparam                  u64 
Endext

Extproc `LoadCursorA u64
    extparam                  u64 
    extparam                  u64 
Endext

Extproc `RegisterClassExA u32
    extparam                  u64 
Endext

Extproc `DefWindowProcA i64
    extparam                  u64 
    extparam                  u32 
    extparam                  u64 
    extparam                  u64 
Endext

Extproc `ReadConsoleInputA i64
    extparam                  u64 
    extparam                  u64 
    extparam                  u32 
    extparam                  u64 
Endext

Extproc `Sleep
    extparam                  u32 
Endext

Extproc `GetModuleFileNameA u32
    extparam                  u64 
    extparam                  u64 
    extparam                  u32 
Endext

Extproc `MessageBoxA
    extparam                  i32 
    extparam                  u64 
    extparam                  u64 
    extparam                  i32 
Endext

Extproc `QueryPerformanceCounter u32
    extparam                  u64 
Endext

Extproc `QueryPerformanceFrequency u32
    extparam                  u64 
Endext

Extproc `CreateFileA u64
    extparam                  u64 
    extparam                  u32 
    extparam                  u32 
    extparam                  u64 
    extparam                  u32 
    extparam                  u32 
    extparam                  u64 
Endext

Extproc `GetFileTime u32
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
Endext

Extproc `GetLocalTime
    extparam                  u64 
Endext

Extproc `GetTickCount64 u64
Endext

Extproc `PeekMessageA u32
    extparam                  u64 
    extparam                  u64 
    extparam                  u32 
    extparam                  u32 
    extparam                  u32 
Endext

    zstatic        msysp.fmtparam: i64 
    istatic        msysp.needgap: i64 
    data           0          u64 
    istatic        msysp.outdev: i64 
    data           1          u64 
    istatic        msysp.outchan: u64 
    data           0          u64 
    istatic        msysp.fmtstr: u64 
    data           0          u64 
    zstatic        msysp.outchan_stack: block:80 
    zstatic        msysp.outdev_stack: block:80 
    zstatic        msysp.fmtstr_stack: block:80 
    zstatic        msysp.needgap_stack: block:10 
    zstatic        msysp.ptr_stack: block:80 
    istatic        msysp.niostack: i64 
    data           0          u64 
    istatic        msysp.digits: block:16 
    data           48         u8 
    data           49         u8 
    data           50         u8 
    data           51         u8 
    data           52         u8 
    data           53         u8 
    data           54         u8 
    data           55         u8 
    data           56         u8 
    data           57         u8 
    data           65         u8 
    data           66         u8 
    data           67         u8 
    data           68         u8 
    data           69         u8 
    data           70         u8 
    istatic        msysp.defaultfmt: block:16 
    data           0          u8 
    data           0          u8 
    data           10         u8 
    data           0          u8 
    data           32         u8 
    data           102        u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           82         u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    zstatic        msysp.rd_buffer: u64 
    zstatic        msysp.rd_length: i64 
    zstatic        msysp.rd_pos: u64 
    zstatic        msysp.rd_lastpos: u64 
    zstatic        msysp.termchar: i64 
    zstatic        msysp.itemerror: i64 
    zstatic        msysp.nsysparams: i64 
    zstatic        msysp.nenvstrings: i64 
    zstatic        msysp.sysparams: block:1024 
    zstatic        msysp.envstrings: block:1024 
    zstatic        msysp.callbackstack: block:576 
    istatic        msysp.ncallbacks: i64 
    data           0          u64 
    istatic        msysp.mask63: u64 
    data           9223372036854775807 u64 
    istatic        msysp.offset64: r64 
    data           9.2233720368547758e+018 u64 
    istatic        msysp.offset32: r64 
    data           9.2233720368547758e+018 u64 
    zstatic        msysp.m$init.startupinfo: block:128 
    zstatic        msysp.getfmt.fmt: block:16 
    zstatic        msysp.strint.str: block:100 
    zstatic        msysp.strword.str: block:100 
    zstatic        msysp.strreal.str: block:320 
    zstatic        mlibp.mdebug: i64 
    zstatic        mlibp.npcmalloc: i64 
    zstatic        mlibp.allocupper: block:2408 
    zstatic        mlibp.alloccode: i64 
    zstatic        mlibp.allocbytes: i64 
    istatic        mlibp.fdebug: i64 
    data           0          u64 
    zstatic        mlibp.rfsize: i64 
    zstatic        mlibp.maxmemory: u64 
    zstatic        mlibp.maxalloccode: i64 
    istatic        mlibp.pcm_setup: u8 
    data           0          u8 
    istatic        mlibp.show: i64 
    data           0          u64 
    zstatic        mlibp.allocbase: u64 
    istatic        mlibp.memtotal: i64 
    data           0          u64 
    istatic        mlibp.smallmemtotal: i64 
    data           0          u64 
    istatic        mlibp.smallmemobjs: i64 
    data           0          u64 
    istatic        mlibp.maxmemtotal: i64 
    data           0          u64 
    zstatic        mlibp.memalloctable: block:24 
    zstatic        mlibp.memallocsize: block:12 
    zstatic        mlibp.pcheapstart: u64 
    zstatic        mlibp.pcheapend: u64 
    zstatic        mlibp.pcheapptr: u64 
    zstatic        mlibp.sizeindextable: block:2049 
    zstatic        mlibp.freelist: block:72 
    istatic        mlibp.pmnames: block:48 
    data           "pm_end"   u64 
    data           "pm_option" u64 
    data           "pm_sourcefile" u64 
    data           "pm_libfile" u64 
    data           "pm_colon" u64 
    data           "pm_extra" u64 
    istatic        mlibp.seed: block:16 
    data           2993073034246558322 u64 
    data           1617678968452121188 u64 
    zstatic        mlibp.pcm_newblock.totalheapsize: i64 
    istatic        mlibp.pcm_round.allocbytes: block:36 
    data           0          u32 
    data           16         u32 
    data           32         u32 
    data           64         u32 
    data           128        u32 
    data           256        u32 
    data           512        u32 
    data           1024       u32 
    data           2048       u32 
    zstatic        mlibp.changeext.newfile: block:260 
    zstatic        mlibp.extractpath.str: block:260 
    zstatic        mlibp.extractbasefile.str: block:100 
    istatic        mlibp.nextcmdparam.infile: i64 
    data           0          u64 
    istatic        mlibp.nextcmdparam.filestart: u64 
    data           0          u64 
    istatic        mlibp.nextcmdparam.fileptr: u64 
    data           0          u64 
    istatic        mlibp.nextcmdparam.colonseen: u8 
    data           0          u8 
    zstatic        mlibp.nextcmdparam.str: block:300 
    zstatic        mlibp.readnextfileitem.str: block:256 
    zstatic        mlibp.padstr.str: block:256 
    zstatic        mlibp.chr.str: block:8 
    zstatic        mwindowsp.hconsole: u64 
    zstatic        mwindowsp.hconsolein: u64 
    zstatic        mwindowsp.lastkey: block:20 
    zstatic        mwindowsp.pendkey: block:20 
    zstatic        mwindowsp.keypending: i64 
    istatic        mwindowsp.wndproc_callbackfn: u64 
    data           0          u64 
    istatic        mwindowsp.init_flag: i64 
    data           0          u64 
    zstatic        mwindowsp.os_gxregisterclass.registered: u8 
    istatic        mwindowsp.mainwndproc.count: i64 
    data           0          u64 
    zstatic        mwindowsp.os_gethostname.name: block:300 
    zstatic        mwindowsp.os_gethostname.n: i64 
    zstatic        mwindowsp.os_peek.lastticks: i64 
    zstatic        pc_decls.optimflag: i64 
    zstatic        pc_decls.rtsproctable: block:48 
    zstatic        pc_decls.npdllnametable: i64 
    zstatic        pc_decls.pdllnametable: block:400 
    zstatic        pc_libpcl.pcstart: u64 
    zstatic        pc_libpcl.pccurr: u64 
    zstatic        pc_libpcl.pcend: u64 
    zstatic        pc_libpcl.pcalloc: i64 
    zstatic        pc_libpcl.pcfixed: u8 
    zstatic        pc_libpcl.pcseqno: i64 
    zstatic        pc_libpcl.pcneedfntable: i64 
    istatic        pc_libpcl.initpcalloc: i64 
    data           65536      u64 
    zstatic        pc_libpcl.sbuffer: block:16 
    istatic        pc_libpcl.dest: u64 
    data           &pc_libpcl.sbuffer u64 
    zstatic        pc_libpcl.destlinestart: i64 
    zstatic        pc_libpcl.labelmap: block:400000 
    zstatic        pc_libpcl.labelno: i64 
    zstatic        pc_libpcl.maxuserlabel: i64 
    zstatic        pc_libpcl.labelnooffset: i64 
    zstatic        pc_libpcl.npcl: i64 
    zstatic        pc_libpcl.labeloffset: block:800000 
    zstatic        pc_libpcl.longstring: u64 
    zstatic        pc_libpcl.longstringlen: i64 
    zstatic        pc_libpcl.errormess: u64 
    zstatic        pc_libpcl.mcldone: i64 
    zstatic        pc_libpcl.stropnd.str: block:512 
    zstatic        pc_libpcl.strpmode.str: block:64 
    istatic        pc_lex.symbolnames: block:176 
    data           "errorsym" u64 
    data           "commasym" u64 
    data           "colonsym" u64 
    data           "dcolonsym" u64 
    data           "lsqsym"   u64 
    data           "rsqsym"   u64 
    data           "addsym"   u64 
    data           "subsym"   u64 
    data           "mulsym"   u64 
    data           "addrsym"  u64 
    data           "eqsym"    u64 
    data           "eolsym"   u64 
    data           "eofsym"   u64 
    data           "labelsym" u64 
    data           "intconstsym" u64 
    data           "realconstsym" u64 
    data           "stringconstsym" u64 
    data           "int128constsym" u64 
    data           "namesym"  u64 
    data           "kopcodesym" u64 
    data           "typesym"  u64 
    data           "kdummysym" u64 
    zstatic        pc_lex.lexhashtable: block:2097152 
    zstatic        pc_lex.nsymbols: i64 
    istatic        pc_lex.lxfileno: i64 
    data           0          u64 
    istatic        pc_lex.lxlineno: i64 
    data           0          u64 
    istatic        pc_lex.nsourcefiles: i64 
    data           0          u64 
    zstatic        pc_lex.lxsymbol: i64 
    zstatic        pc_lex.lxsubcode: i64 
    zstatic        pc_lex.lxvalue: i64 
    zstatic        pc_lex.lxuvalue128: u128 
    zstatic        pc_lex.lxxvalue: r64 
    zstatic        pc_lex.lxsvalue: u64 
    zstatic        pc_lex.lxlength: i64 
    zstatic        pc_lex.lxtruename: u8 
    zstatic        pc_lex.lxhashvalue: i64 
    zstatic        pc_lex.lxsptr: u64 
    zstatic        pc_lex.lxstart: u64 
    zstatic        pc_lex.lxsymptr: u64 
    zstatic        pc_lex.commentmap: block:256 
    istatic        pc_lex.initlex.done: u8 
    data           0          u8 
    zstatic        pc_parse.insideproc: i64 
    istatic        pc_parse.parse_readrts.source: u64 
    data           "!\c\nProcrts rts.$power_i64: i64\c\n    param          rts.$power_i64.a i64 \c\n    param          rts.$power_i64.n i64 \c\n    procentry                 \c\n!-------------------------------------------------\c\n    startmult                 \c\n    push           rts.$power_i64.n i64 \c\n    push           0          i64 \c\n    jumpge         #8         i64 \c\n    push           0          i64 \c\n    resetmult                 \c\n    jump           #9         \c\n#8: \c\n    push           rts.$power_i64.n i64 \c\n    push           0          i64 \c\n    jumpne         #10        i64 \c\n    push           1          i64 \c\n    resetmult                 \c\n    jump           #9         \c\n#10: \c\n    push           rts.$power_i64.n i64 \c\n    push           1          i64 \c\n    jumpne         #11        i64 \c\n    push           rts.$power_i64.a i64 \c\n    resetmult                 \c\n    jump           #9         \c\n#11: \c\n    push           rts.$power_i64.n i64 \c\n    push           0          i64 \c\n    dotindex                  i64 \c\n    jumptrue       #12        i64 \c\n    setargs                   2 0\c\n    push           rts.$power_i64.n i64 \c\n    push           2          i64 \c\n    idiv                      i64 \c\n    push           rts.$power_i64.a i64 \c\n    sqr                       i64 \c\n    callfn         &rts.$power_i64 i64 \c\n    resetmult                 \c\n    jump           #9         \c\n#12: \c\n    setargs                   2 0\c\n    push           rts.$power_i64.n i64 \c\n    push           1          i64 \c\n    sub                       i64 \c\n    push           2          i64 \c\n    idiv                      i64 \c\n    push           rts.$power_i64.a i64 \c\n    sqr                       i64 \c\n    callfn         &rts.$power_i64 i64 \c\n    push           rts.$power_i64.a i64 \c\n    mul                       i64 \c\n    endmult                   \c\n#9: \c\n    setret                    i64 \c\n    jump           #13        \c\n!-------------------------------------------------\c\n#13: \c\n    retfn                     i64 \c\nEnd\c\n\c\n!\c\n    endprogram                \c\n" u64 
    istatic        pc_tables.pstdnames: block:120 
    data           "void"     u64 
    data           "u8"       u64 
    data           "u16"      u64 
    data           "u32"      u64 
    data           "u64"      u64 
    data           "u128"     u64 
    data           "i8"       u64 
    data           "i16"      u64 
    data           "i32"      u64 
    data           "i64"      u64 
    data           "i128"     u64 
    data           "r32"      u64 
    data           "r64"      u64 
    data           "block"    u64 
    data           "$last"    u64 
    istatic        pc_tables.psize: block:15 
    data           0          u8 
    data           1          u8 
    data           2          u8 
    data           4          u8 
    data           8          u8 
    data           16         u8 
    data           1          u8 
    data           2          u8 
    data           4          u8 
    data           8          u8 
    data           16         u8 
    data           4          u8 
    data           8          u8 
    data           0          u8 
    data           0          u8 
    istatic        pc_tables.psigned: block:15 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    istatic        pc_tables.pfloat: block:15 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    istatic        pc_tables.pcat: block:15 
    data           0          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           1          u8 
    data           5          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           1          u8 
    data           5          u8 
    data           2          u8 
    data           3          u8 
    data           6          u8 
    data           0          u8 
    istatic        pc_tables.catnames: block:56 
    data           "voidcat"  u64 
    data           "d64cat"   u64 
    data           "x32cat"   u64 
    data           "x64cat"   u64 
    data           "shortcat" u64 
    data           "widecat"  u64 
    data           "blockcat" u64 
    istatic        pc_tables.opndnames: block:80 
    data           "no_opnd"  u64 
    data           "mem_opnd" u64 
    data           "memaddr_opnd" u64 
    data           "label_opnd" u64 
    data           "int_opnd" u64 
    data           "real_opnd" u64 
    data           "int128_opnd" u64 
    data           "real32_opnd" u64 
    data           "string_opnd" u64 
    data           "assem_opnd" u64 
    istatic        pc_tables.pclnames: block:1752 
    data           "kzero"    u64 
    data           "knop"     u64 
    data           "kstop"    u64 
    data           "kcomment" u64 
    data           "kimportdll" u64 
    data           "kistatic" u64 
    data           "kzstatic" u64 
    data           "kequiv"   u64 
    data           "kprocdef" u64 
    data           "kprocentry" u64 
    data           "kendproc" u64 
    data           "kendprogram" u64 
    data           "kextproc" u64 
    data           "kextparam" u64 
    data           "kextvariadics" u64 
    data           "kendextproc" u64 
    data           "kthreadedproc" u64 
    data           "kprocrts" u64 
    data           "klocal"   u64 
    data           "kparam"   u64 
    data           "klabel"   u64 
    data           "klabelname" u64 
    data           "kpush"    u64 
    data           "kpop"     u64 
    data           "kstore"   u64 
    data           "kpushnc"  u64 
    data           "kpushlabel" u64 
    data           "kopnd"    u64 
    data           "ktype"    u64 
    data           "kduplstack" u64 
    data           "kswapstack" u64 
    data           "kpushptroff" u64 
    data           "kpopptroff" u64 
    data           "kstoreptroff" u64 
    data           "kpushptr" u64 
    data           "kpopptr"  u64 
    data           "kstoreptr" u64 
    data           "kdotindex" u64 
    data           "kpopdotindex" u64 
    data           "kstoredotindex" u64 
    data           "kdotslice" u64 
    data           "kpopdotslice" u64 
    data           "kstoredotslice" u64 
    data           "kpopstack" u64 
    data           "keval"    u64 
    data           "kcallproc" u64 
    data           "kcallprocptr" u64 
    data           "kretproc" u64 
    data           "kcallfn"  u64 
    data           "kcallfnptr" u64 
    data           "kretfn"   u64 
    data           "kjump"    u64 
    data           "kjumpptr" u64 
    data           "kjumpeq"  u64 
    data           "kjumpne"  u64 
    data           "kjumplt"  u64 
    data           "kjumple"  u64 
    data           "kjumpge"  u64 
    data           "kjumpgt"  u64 
    data           "kjumptrue" u64 
    data           "kjumpfalse" u64 
    data           "kjumpinrange" u64 
    data           "kjumpnotinrange" u64 
    data           "ksetjumpeq" u64 
    data           "ksetjumpeqx" u64 
    data           "ksetjumpne" u64 
    data           "kseteq"   u64 
    data           "ksetne"   u64 
    data           "ksetlt"   u64 
    data           "ksetle"   u64 
    data           "ksetge"   u64 
    data           "ksetgt"   u64 
    data           "kcasejumpeq" u64 
    data           "kselecteq" u64 
    data           "kselectne" u64 
    data           "kselectlt" u64 
    data           "kselectle" u64 
    data           "kselectge" u64 
    data           "kselectgt" u64 
    data           "kselecttrue" u64 
    data           "kto"      u64 
    data           "kforup"   u64 
    data           "kfordown" u64 
    data           "kswap"    u64 
    data           "kmakeslice" u64 
    data           "kswitch"  u64 
    data           "kswitchlabel" u64 
    data           "kendswitch" u64 
    data           "kclear"   u64 
    data           "kcsegment" u64 
    data           "kisegment" u64 
    data           "kzsegment" u64 
    data           "krosegment" u64 
    data           "kdata"    u64 
    data           "kdb"      u64 
    data           "kdw"      u64 
    data           "kdd"      u64 
    data           "kdq"      u64 
    data           "kdstring" u64 
    data           "kdstringz" u64 
    data           "kreserve" u64 
    data           "kassem"   u64 
    data           "kadd"     u64 
    data           "ksub"     u64 
    data           "kmul"     u64 
    data           "kdiv"     u64 
    data           "kidiv"    u64 
    data           "kirem"    u64 
    data           "kiand"    u64 
    data           "kior"     u64 
    data           "kixor"    u64 
    data           "kshl"     u64 
    data           "kshr"     u64 
    data           "kin"      u64 
    data           "knotin"   u64 
    data           "kmin"     u64 
    data           "kmax"     u64 
    data           "keq"      u64 
    data           "kne"      u64 
    data           "klt"      u64 
    data           "kle"      u64 
    data           "kge"      u64 
    data           "kgt"      u64 
    data           "ksame"    u64 
    data           "kandl"    u64 
    data           "korl"     u64 
    data           "kaddrefoff" u64 
    data           "ksubrefoff" u64 
    data           "ksubref"  u64 
    data           "kneg"     u64 
    data           "kabs"     u64 
    data           "kinot"    u64 
    data           "knotl"    u64 
    data           "kistruel" u64 
    data           "ksqr"     u64 
    data           "ksqrt"    u64 
    data           "ksin"     u64 
    data           "kcos"     u64 
    data           "ktan"     u64 
    data           "kasin"    u64 
    data           "kacos"    u64 
    data           "katan"    u64 
    data           "kln"      u64 
    data           "klog"     u64 
    data           "kexp"     u64 
    data           "kround"   u64 
    data           "kfloor"   u64 
    data           "kceil"    u64 
    data           "kfract"   u64 
    data           "ksign"    u64 
    data           "katan2"   u64 
    data           "kpower"   u64 
    data           "kfmod"    u64 
    data           "kincr"    u64 
    data           "kdecr"    u64 
    data           "kincrload" u64 
    data           "kdecrload" u64 
    data           "kloadincr" u64 
    data           "kloaddecr" u64 
    data           "kaddto"   u64 
    data           "ksubto"   u64 
    data           "kmulto"   u64 
    data           "kdivto"   u64 
    data           "kidivto"  u64 
    data           "kiremto"  u64 
    data           "kiandto"  u64 
    data           "kiorto"   u64 
    data           "kixorto"  u64 
    data           "kshlto"   u64 
    data           "kshrto"   u64 
    data           "kminto"   u64 
    data           "kmaxto"   u64 
    data           "kandlto"  u64 
    data           "korlto"   u64 
    data           "kaddrefoffto" u64 
    data           "ksubrefoffto" u64 
    data           "knegto"   u64 
    data           "kabsto"   u64 
    data           "kinotto"  u64 
    data           "knotlto"  u64 
    data           "kistruelto" u64 
    data           "ktypepun" u64 
    data           "ksoftconv" u64 
    data           "kwiden"   u64 
    data           "knarrow"  u64 
    data           "kfloat"   u64 
    data           "kfix"     u64 
    data           "ktruncate" u64 
    data           "kfwiden"  u64 
    data           "kfnarrow" u64 
    data           "ksofttruncw" u64 
    data           "kwidenw"  u64 
    data           "kstartmult" u64 
    data           "kresetmult" u64 
    data           "kendmult" u64 
    data           "ksetret"  u64 
    data           "ksetretmult" u64 
    data           "ksetargs" u64 
    data           "kgetnprocs" u64 
    data           "kgetprocname" u64 
    data           "kgetprocaddr" u64 
    data           "klen"     u64 
    data           "klwb"     u64 
    data           "kupb"     u64 
    data           "kbounds"  u64 
    data           "klenstr"  u64 
    data           "kbitwidth" u64 
    data           "kbytesize" u64 
    data           "kbytes"   u64 
    data           "kminvalue" u64 
    data           "kmaxvalue" u64 
    data           "ktypestr" u64 
    data           "kerror"   u64 
    data           "karraytoslice" u64 
    data           "kichartoslice" u64 
    data           "ksofttruncshort" u64 
    data           "kcharaxtoichar" u64 
    data           "ksliceptr" u64 
    data           "klast"    u64 
    istatic        pc_tables.pclhasopnd: block:219 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           4          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           2          u8 
    data           2          u8 
    data           3          u8 
    data           3          u8 
    data           1          u8 
    data           2          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    istatic        pc_tables.pclhastype: block:219 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    istatic        pc_tables.pclextra: block:219 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           2          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           2          u8 
    data           2          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           2          u8 
    data           2          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           2          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    istatic        pc_tables.rtsnames: block:48 
    data           "rts_rts_unimpl" u64 
    data           "rts_power_i64" u64 
    data           "rts_float_u64r64" u64 
    data           "rts_mul_i128" u64 
    data           "rts_div_i128" u64 
    data           "rts_div_u128" u64 
    istatic        pci_mcl.valtypenames: block:80 
    data           "no_val"   u64 
    data           "intimm_val" u64 
    data           "realimm_val" u64 
    data           "realmem_val" u64 
    data           "stringimm_val" u64 
    data           "def_val"  u64 
    data           "temp_val" u64 
    data           "label_val" u64 
    data           "name_val" u64 
    data           "syscall_val" u64 
    istatic        pci_mcl.mclnames: block:1184 
    data           "m_procstart" u64 
    data           "m_procend" u64 
    data           "m_comment" u64 
    data           "m_blank"  u64 
    data           "m_deleted" u64 
    data           "m_labelname" u64 
    data           "m_define" u64 
    data           "m_definereg" u64 
    data           "m_label"  u64 
    data           "m_nop"    u64 
    data           "m_param"  u64 
    data           "m_mov"    u64 
    data           "m_push"   u64 
    data           "m_pop"    u64 
    data           "m_lea"    u64 
    data           "m_cmovcc" u64 
    data           "m_movd"   u64 
    data           "m_movq"   u64 
    data           "m_movsx"  u64 
    data           "m_movzx"  u64 
    data           "m_movsxd" u64 
    data           "m_call"   u64 
    data           "m_ret"    u64 
    data           "m_leave"  u64 
    data           "m_retn"   u64 
    data           "m_jmp"    u64 
    data           "m_jmpcc"  u64 
    data           "m_xchg"   u64 
    data           "m_add"    u64 
    data           "m_sub"    u64 
    data           "m_adc"    u64 
    data           "m_sbb"    u64 
    data           "m_imul"   u64 
    data           "m_mul"    u64 
    data           "m_imul2"  u64 
    data           "m_imul3"  u64 
    data           "m_idiv"   u64 
    data           "m_div"    u64 
    data           "m_andx"   u64 
    data           "m_orx"    u64 
    data           "m_xorx"   u64 
    data           "m_test"   u64 
    data           "m_cmp"    u64 
    data           "m_shl"    u64 
    data           "m_sar"    u64 
    data           "m_shr"    u64 
    data           "m_rol"    u64 
    data           "m_ror"    u64 
    data           "m_rcl"    u64 
    data           "m_rcr"    u64 
    data           "m_neg"    u64 
    data           "m_notx"   u64 
    data           "m_inc"    u64 
    data           "m_dec"    u64 
    data           "m_cbw"    u64 
    data           "m_cwd"    u64 
    data           "m_cdq"    u64 
    data           "m_cqo"    u64 
    data           "m_setcc"  u64 
    data           "m_bsf"    u64 
    data           "m_bsr"    u64 
    data           "m_sqrtsd" u64 
    data           "m_sqrtss" u64 
    data           "m_addss"  u64 
    data           "m_subss"  u64 
    data           "m_mulss"  u64 
    data           "m_divss"  u64 
    data           "m_addsd"  u64 
    data           "m_subsd"  u64 
    data           "m_mulsd"  u64 
    data           "m_divsd"  u64 
    data           "m_comiss" u64 
    data           "m_comisd" u64 
    data           "m_xorpd"  u64 
    data           "m_xorps"  u64 
    data           "m_andpd"  u64 
    data           "m_andps"  u64 
    data           "m_pxor"   u64 
    data           "m_pand"   u64 
    data           "m_cvtss2si" u64 
    data           "m_cvtsd2si" u64 
    data           "m_cvttss2si" u64 
    data           "m_cvttsd2si" u64 
    data           "m_cvtsi2ss" u64 
    data           "m_cvtsi2sd" u64 
    data           "m_cvtsd2ss" u64 
    data           "m_cvtss2sd" u64 
    data           "m_movdqa" u64 
    data           "m_movdqu" u64 
    data           "m_pcmpistri" u64 
    data           "m_pcmpistrm" u64 
    data           "m_fld"    u64 
    data           "m_fst"    u64 
    data           "m_fstp"   u64 
    data           "m_fild"   u64 
    data           "m_fist"   u64 
    data           "m_fistp"  u64 
    data           "m_fadd"   u64 
    data           "m_fsub"   u64 
    data           "m_fmul"   u64 
    data           "m_fdiv"   u64 
    data           "m_fsqrt"  u64 
    data           "m_fsin"   u64 
    data           "m_fcos"   u64 
    data           "m_fsincos" u64 
    data           "m_fptan"  u64 
    data           "m_fpatan" u64 
    data           "m_fabs"   u64 
    data           "m_fchs"   u64 
    data           "m_minss"  u64 
    data           "m_maxss"  u64 
    data           "m_minsd"  u64 
    data           "m_maxsd"  u64 
    data           "m_db"     u64 
    data           "m_dw"     u64 
    data           "m_dd"     u64 
    data           "m_dq"     u64 
    data           "m_ddoffset" u64 
    data           "m_segment" u64 
    data           "m_isegment" u64 
    data           "m_zsegment" u64 
    data           "m_csegment" u64 
    data           "m_align"  u64 
    data           "m_resb"   u64 
    data           "m_resw"   u64 
    data           "m_resd"   u64 
    data           "m_resq"   u64 
    data           "m_xlat"   u64 
    data           "m_loopnz" u64 
    data           "m_loopz"  u64 
    data           "m_loopcx" u64 
    data           "m_jecxz"  u64 
    data           "m_jrcxz"  u64 
    data           "m_cmpsb"  u64 
    data           "m_cmpsw"  u64 
    data           "m_cmpsd"  u64 
    data           "m_cmpsq"  u64 
    data           "m_rdtsc"  u64 
    data           "m_popcnt" u64 
    data           "m_finit"  u64 
    data           "m_fldz"   u64 
    data           "m_fld1"   u64 
    data           "m_fldpi"  u64 
    data           "m_fld2t"  u64 
    data           "m_fld2e"  u64 
    data           "m_fldlg2" u64 
    data           "m_fldln2" u64 
    data           "m_halt"   u64 
    istatic        pci_mcl.mclnopnds: block:148 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           1          u8 
    data           2          u8 
    data           1          u8 
    data           1          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           1          u8 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           1          u8 
    data           1          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           3          u8 
    data           3          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           2          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    istatic        pci_mcl.mclcodes: block:148 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           144        u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           232        u8 
    data           195        u8 
    data           201        u8 
    data           0          u8 
    data           233        u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           5          u8 
    data           2          u8 
    data           3          u8 
    data           5          u8 
    data           4          u8 
    data           0          u8 
    data           0          u8 
    data           7          u8 
    data           6          u8 
    data           4          u8 
    data           1          u8 
    data           6          u8 
    data           0          u8 
    data           7          u8 
    data           4          u8 
    data           7          u8 
    data           5          u8 
    data           0          u8 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           3          u8 
    data           2          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           188        u8 
    data           189        u8 
    data           81         u8 
    data           81         u8 
    data           88         u8 
    data           92         u8 
    data           89         u8 
    data           94         u8 
    data           88         u8 
    data           92         u8 
    data           89         u8 
    data           94         u8 
    data           0          u8 
    data           0          u8 
    data           87         u8 
    data           87         u8 
    data           84         u8 
    data           84         u8 
    data           239        u8 
    data           219        u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           102        u8 
    data           243        u8 
    data           99         u8 
    data           98         u8 
    data           0          u8 
    data           2          u8 
    data           3          u8 
    data           0          u8 
    data           2          u8 
    data           3          u8 
    data           193        u8 
    data           233        u8 
    data           201        u8 
    data           249        u8 
    data           250        u8 
    data           254        u8 
    data           255        u8 
    data           251        u8 
    data           242        u8 
    data           243        u8 
    data           225        u8 
    data           224        u8 
    data           93         u8 
    data           95         u8 
    data           93         u8 
    data           95         u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           2          u8 
    data           4          u8 
    data           8          u8 
    data           215        u8 
    data           224        u8 
    data           225        u8 
    data           226        u8 
    data           227        u8 
    data           227        u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           49         u8 
    data           0          u8 
    data           0          u8 
    data           238        u8 
    data           232        u8 
    data           235        u8 
    data           233        u8 
    data           234        u8 
    data           236        u8 
    data           237        u8 
    data           244        u8 
    istatic        pci_mcl.regnames: block:168 
    data           "rnone"    u64 
    data           "r0"       u64 
    data           "r1"       u64 
    data           "r2"       u64 
    data           "r3"       u64 
    data           "r4"       u64 
    data           "r5"       u64 
    data           "r6"       u64 
    data           "r7"       u64 
    data           "r8"       u64 
    data           "r9"       u64 
    data           "r10"      u64 
    data           "r11"      u64 
    data           "r12"      u64 
    data           "r13"      u64 
    data           "r14"      u64 
    data           "r15"      u64 
    data           "r16"      u64 
    data           "r17"      u64 
    data           "r18"      u64 
    data           "r19"      u64 
    istatic        pci_mcl.regcodes: block:21 
    data           0          u8 
    data           0          u8 
    data           10         u8 
    data           11         u8 
    data           7          u8 
    data           3          u8 
    data           6          u8 
    data           12         u8 
    data           13         u8 
    data           14         u8 
    data           15         u8 
    data           1          u8 
    data           2          u8 
    data           8          u8 
    data           9          u8 
    data           5          u8 
    data           4          u8 
    data           4          u8 
    data           7          u8 
    data           5          u8 
    data           6          u8 
    istatic        pci_mcl.condnames: block:160 
    data           "ov"       u64 
    data           "nov"      u64 
    data           "ltu"      u64 
    data           "geu"      u64 
    data           "eq"       u64 
    data           "ne"       u64 
    data           "leu"      u64 
    data           "gtu"      u64 
    data           "s"        u64 
    data           "ns"       u64 
    data           "p"        u64 
    data           "np"       u64 
    data           "lt"       u64 
    data           "ge"       u64 
    data           "le"       u64 
    data           "gt"       u64 
    data           "flt"      u64 
    data           "fge"      u64 
    data           "fle"      u64 
    data           "fgt"      u64 
    istatic        pci_mcl.asmcondnames: block:160 
    data           "o"        u64 
    data           "no"       u64 
    data           "b"        u64 
    data           "ae"       u64 
    data           "z"        u64 
    data           "nz"       u64 
    data           "be"       u64 
    data           "a"        u64 
    data           "s"        u64 
    data           "ns"       u64 
    data           "p"        u64 
    data           "np"       u64 
    data           "l"        u64 
    data           "ge"       u64 
    data           "le"       u64 
    data           "g"        u64 
    data           "b"        u64 
    data           "ae"       u64 
    data           "be"       u64 
    data           "a"        u64 
    istatic        pci_mcl.asmrevcond: block:160 
    data           1          u64 
    data           0          u64 
    data           3          u64 
    data           2          u64 
    data           5          u64 
    data           4          u64 
    data           7          u64 
    data           6          u64 
    data           9          u64 
    data           8          u64 
    data           11         u64 
    data           10         u64 
    data           13         u64 
    data           12         u64 
    data           15         u64 
    data           14         u64 
    data           17         u64 
    data           16         u64 
    data           19         u64 
    data           18         u64 
    istatic        pci_mcl.dregnames: block:1088 
    data           "d0"       u64 
    data           "d1"       u64 
    data           "d2"       u64 
    data           "d3"       u64 
    data           "d4"       u64 
    data           "d5"       u64 
    data           "d6"       u64 
    data           "d7"       u64 
    data           "d8"       u64 
    data           "d9"       u64 
    data           "d10"      u64 
    data           "d11"      u64 
    data           "d12"      u64 
    data           "d13"      u64 
    data           "d14"      u64 
    data           "d15"      u64 
    data           "a0"       u64 
    data           "a1"       u64 
    data           "a2"       u64 
    data           "a3"       u64 
    data           "a4"       u64 
    data           "a5"       u64 
    data           "a6"       u64 
    data           "a7"       u64 
    data           "a8"       u64 
    data           "a9"       u64 
    data           "a10"      u64 
    data           "a11"      u64 
    data           "a12"      u64 
    data           "a13"      u64 
    data           "a14"      u64 
    data           "a15"      u64 
    data           "w0"       u64 
    data           "w1"       u64 
    data           "w2"       u64 
    data           "w3"       u64 
    data           "w4"       u64 
    data           "w5"       u64 
    data           "w6"       u64 
    data           "w7"       u64 
    data           "w8"       u64 
    data           "w9"       u64 
    data           "w10"      u64 
    data           "w11"      u64 
    data           "w12"      u64 
    data           "w13"      u64 
    data           "w14"      u64 
    data           "w15"      u64 
    data           "b0"       u64 
    data           "b1"       u64 
    data           "b2"       u64 
    data           "b3"       u64 
    data           "b4"       u64 
    data           "b5"       u64 
    data           "b6"       u64 
    data           "b7"       u64 
    data           "b8"       u64 
    data           "b9"       u64 
    data           "b10"      u64 
    data           "b11"      u64 
    data           "b12"      u64 
    data           "b13"      u64 
    data           "b14"      u64 
    data           "b15"      u64 
    data           "b16"      u64 
    data           "b17"      u64 
    data           "b18"      u64 
    data           "b19"      u64 
    data           "rax"      u64 
    data           "rbx"      u64 
    data           "rcx"      u64 
    data           "rdx"      u64 
    data           "rsi"      u64 
    data           "rdi"      u64 
    data           "rbp"      u64 
    data           "rsp"      u64 
    data           "r8"       u64 
    data           "r9"       u64 
    data           "r10"      u64 
    data           "r11"      u64 
    data           "r12"      u64 
    data           "r13"      u64 
    data           "r14"      u64 
    data           "r15"      u64 
    data           "eax"      u64 
    data           "ebx"      u64 
    data           "ecx"      u64 
    data           "edx"      u64 
    data           "esi"      u64 
    data           "edi"      u64 
    data           "ebp"      u64 
    data           "esp"      u64 
    data           "r8d"      u64 
    data           "r9d"      u64 
    data           "r10d"     u64 
    data           "r11d"     u64 
    data           "r12d"     u64 
    data           "r13d"     u64 
    data           "r14d"     u64 
    data           "r15d"     u64 
    data           "ax"       u64 
    data           "bx"       u64 
    data           "cx"       u64 
    data           "dx"       u64 
    data           "si"       u64 
    data           "di"       u64 
    data           "bp"       u64 
    data           "sp"       u64 
    data           "r8w"      u64 
    data           "r9w"      u64 
    data           "r10w"     u64 
    data           "r11w"     u64 
    data           "r12w"     u64 
    data           "r13w"     u64 
    data           "r14w"     u64 
    data           "r15w"     u64 
    data           "al"       u64 
    data           "bl"       u64 
    data           "cl"       u64 
    data           "dl"       u64 
    data           "ah"       u64 
    data           "bh"       u64 
    data           "ch"       u64 
    data           "dh"       u64 
    data           "sil"      u64 
    data           "dil"      u64 
    data           "bpl"      u64 
    data           "spl"      u64 
    data           "r8b"      u64 
    data           "r9b"      u64 
    data           "r10b"     u64 
    data           "r11b"     u64 
    data           "r12b"     u64 
    data           "r13b"     u64 
    data           "r14b"     u64 
    data           "r15b"     u64 
    istatic        pci_mcl.regsizes: block:136 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    istatic        pci_mcl.regindices: block:136 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           4          u8 
    data           5          u8 
    data           6          u8 
    data           7          u8 
    data           8          u8 
    data           9          u8 
    data           10         u8 
    data           11         u8 
    data           12         u8 
    data           13         u8 
    data           14         u8 
    data           15         u8 
    data           16         u8 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           4          u8 
    data           5          u8 
    data           6          u8 
    data           7          u8 
    data           8          u8 
    data           9          u8 
    data           10         u8 
    data           11         u8 
    data           12         u8 
    data           13         u8 
    data           14         u8 
    data           15         u8 
    data           16         u8 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           4          u8 
    data           5          u8 
    data           6          u8 
    data           7          u8 
    data           8          u8 
    data           9          u8 
    data           10         u8 
    data           11         u8 
    data           12         u8 
    data           13         u8 
    data           14         u8 
    data           15         u8 
    data           16         u8 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           4          u8 
    data           5          u8 
    data           6          u8 
    data           7          u8 
    data           8          u8 
    data           9          u8 
    data           10         u8 
    data           11         u8 
    data           12         u8 
    data           13         u8 
    data           14         u8 
    data           15         u8 
    data           16         u8 
    data           17         u8 
    data           18         u8 
    data           19         u8 
    data           20         u8 
    data           1          u8 
    data           5          u8 
    data           11         u8 
    data           12         u8 
    data           6          u8 
    data           4          u8 
    data           15         u8 
    data           16         u8 
    data           13         u8 
    data           14         u8 
    data           2          u8 
    data           3          u8 
    data           7          u8 
    data           8          u8 
    data           9          u8 
    data           10         u8 
    data           1          u8 
    data           5          u8 
    data           11         u8 
    data           12         u8 
    data           6          u8 
    data           4          u8 
    data           15         u8 
    data           16         u8 
    data           13         u8 
    data           14         u8 
    data           2          u8 
    data           3          u8 
    data           7          u8 
    data           8          u8 
    data           9          u8 
    data           10         u8 
    data           1          u8 
    data           5          u8 
    data           11         u8 
    data           12         u8 
    data           6          u8 
    data           4          u8 
    data           15         u8 
    data           16         u8 
    data           13         u8 
    data           14         u8 
    data           2          u8 
    data           3          u8 
    data           7          u8 
    data           8          u8 
    data           9          u8 
    data           10         u8 
    data           1          u8 
    data           5          u8 
    data           11         u8 
    data           12         u8 
    data           17         u8 
    data           18         u8 
    data           19         u8 
    data           20         u8 
    data           6          u8 
    data           4          u8 
    data           15         u8 
    data           16         u8 
    data           13         u8 
    data           14         u8 
    data           2          u8 
    data           3          u8 
    data           7          u8 
    data           8          u8 
    data           9          u8 
    data           10         u8 
    istatic        pci_mcl.xmmregnames: block:128 
    data           "xmm0"     u64 
    data           "xmm1"     u64 
    data           "xmm2"     u64 
    data           "xmm3"     u64 
    data           "xmm4"     u64 
    data           "xmm5"     u64 
    data           "xmm6"     u64 
    data           "xmm7"     u64 
    data           "xmm8"     u64 
    data           "xmm9"     u64 
    data           "xmm10"    u64 
    data           "xmm11"    u64 
    data           "xmm12"    u64 
    data           "xmm13"    u64 
    data           "xmm14"    u64 
    data           "xmm15"    u64 
    istatic        pci_mcl.fregnames: block:64 
    data           "st0"      u64 
    data           "st1"      u64 
    data           "st2"      u64 
    data           "st3"      u64 
    data           "st4"      u64 
    data           "st5"      u64 
    data           "st6"      u64 
    data           "st7"      u64 
    istatic        pci_mcl.mregnames: block:64 
    data           "mmx0"     u64 
    data           "mmx1"     u64 
    data           "mmx2"     u64 
    data           "mmx3"     u64 
    data           "mmx4"     u64 
    data           "mmx5"     u64 
    data           "mmx6"     u64 
    data           "mmx7"     u64 
    istatic        pci_mcl.jmpccnames: block:128 
    data           "jo"       u64 
    data           "jno"      u64 
    data           "jb"       u64 
    data           "jae"      u64 
    data           "jz"       u64 
    data           "jnz"      u64 
    data           "jbe"      u64 
    data           "ja"       u64 
    data           "js"       u64 
    data           "jns"      u64 
    data           "jp"       u64 
    data           "jnp"      u64 
    data           "jl"       u64 
    data           "jge"      u64 
    data           "jle"      u64 
    data           "jg"       u64 
    istatic        pci_mcl.jmpcccodes: block:16 
    data           0          u8 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           4          u8 
    data           5          u8 
    data           6          u8 
    data           7          u8 
    data           8          u8 
    data           9          u8 
    data           10         u8 
    data           11         u8 
    data           12         u8 
    data           13         u8 
    data           14         u8 
    data           15         u8 
    istatic        pci_mcl.setccnames: block:128 
    data           "seto"     u64 
    data           "setno"    u64 
    data           "setb"     u64 
    data           "setae"    u64 
    data           "setz"     u64 
    data           "setnz"    u64 
    data           "setbe"    u64 
    data           "seta"     u64 
    data           "sets"     u64 
    data           "setns"    u64 
    data           "setp"     u64 
    data           "setnp"    u64 
    data           "setl"     u64 
    data           "setge"    u64 
    data           "setle"    u64 
    data           "setg"     u64 
    istatic        pci_mcl.setcccodes: block:16 
    data           0          u8 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           4          u8 
    data           5          u8 
    data           6          u8 
    data           7          u8 
    data           8          u8 
    data           9          u8 
    data           10         u8 
    data           11         u8 
    data           12         u8 
    data           13         u8 
    data           14         u8 
    data           15         u8 
    istatic        pci_mcl.cmovccnames: block:128 
    data           "cmovo"    u64 
    data           "cmovno"   u64 
    data           "cmovb"    u64 
    data           "cmovae"   u64 
    data           "cmovz"    u64 
    data           "cmovnz"   u64 
    data           "cmovbe"   u64 
    data           "cmova"    u64 
    data           "cmovs"    u64 
    data           "cmovns"   u64 
    data           "cmovp"    u64 
    data           "cmovnp"   u64 
    data           "cmovl"    u64 
    data           "cmovge"   u64 
    data           "cmovle"   u64 
    data           "cmovg"    u64 
    istatic        pci_mcl.cmovcccodes: block:16 
    data           0          u8 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           4          u8 
    data           5          u8 
    data           6          u8 
    data           7          u8 
    data           8          u8 
    data           9          u8 
    data           10         u8 
    data           11         u8 
    data           12         u8 
    data           13         u8 
    data           14         u8 
    data           15         u8 
    istatic        pci_mcl.segmentnames: block:48 
    data           "no_seg"   u64 
    data           "code_seg" u64 
    data           "idata_seg" u64 
    data           "zdata_seg" u64 
    data           "rodata_seg" u64 
    data           "impdata_seg" u64 
    istatic        pci_mcl.reftypenames: block:24 
    data           "extern_ref" u64 
    data           "fwd_ref"  u64 
    data           "back_ref" u64 
    istatic        pci_mcl.opndnames_ma: block:56 
    data           "a_none"   u64 
    data           "a_reg"    u64 
    data           "a_imm"    u64 
    data           "a_mem"    u64 
    data           "a_cond"   u64 
    data           "a_xreg"   u64 
    data           "a_wreg"   u64 
    zstatic        pci_mcl.mlabelno: i64 
    zstatic        pci_mcl.pclopndstack: block:3150 
    zstatic        pci_mcl.noperands: i64 
    zstatic        pci_mcl.mstackdepth: i64 
    zstatic        pci_mcl.pclstack: u64 
    zstatic        pci_mcl.pclstackzero: block:15 
    istatic        pci_mcl.locnames: block:72 
    data           "no_loc"   u64 
    data           "reg_loc"  u64 
    data           "xreg_loc" u64 
    data           "stack_loc" u64 
    data           "imm_loc"  u64 
    data           "mem_loc"  u64 
    data           "memhigh_loc" u64 
    data           "regvar_loc" u64 
    data           "xregvar_loc" u64 
    istatic        pci_mcl.fmtnames: block:160 
    data           "nofmt_void" u64 
    data           "reg_d64"  u64 
    data           "xreg_x64" u64 
    data           "xreg_x32" u64 
    data           "stack_d64" u64 
    data           "stack_x64" u64 
    data           "stack_x32" u64 
    data           "imm_d64"  u64 
    data           "imm_x64"  u64 
    data           "imm_x32"  u64 
    data           "imm_str"  u64 
    data           "imm_memaddr" u64 
    data           "imm_label" u64 
    data           "imm_labaddr" u64 
    data           "mem_d64"  u64 
    data           "mem_x64"  u64 
    data           "mem_x32"  u64 
    data           "memhigh_d64" u64 
    data           "regvar_d64" u64 
    data           "xregvar_x64" u64 
    istatic        pci_mcl.loccodes: block:20 
    data           0          u8 
    data           1          u8 
    data           2          u8 
    data           2          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           5          u8 
    data           5          u8 
    data           5          u8 
    data           5          u8 
    data           7          u8 
    data           8          u8 
    istatic        pci_mcl.floatloc: block:20 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    istatic        pci_mcl.loadfmt: block:20 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           1          u8 
    data           1          u8 
    data           2          u8 
    istatic        pci_mcl.pushfmt: block:20 
    data           0          u8 
    data           4          u8 
    data           5          u8 
    data           6          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           4          u8 
    data           5          u8 
    data           6          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           5          u8 
    data           6          u8 
    data           4          u8 
    data           4          u8 
    data           5          u8 
    zstatic        pci_mcl.regset: block:16 
    zstatic        pci_mcl.xregset: block:16 
    zstatic        pci_mcl.isregvar: block:16 
    zstatic        pci_mcl.isxregvar: block:16 
    zstatic        pci_mcl.inf_proccalls: i64 
    zstatic        pci_mcl.inf_proclocals: i64 
    zstatic        pci_mcl.inf_procxlocals: i64 
    zstatic        pci_mcl.inf_leafproc: i64 
    zstatic        pci_mcl.inf_highreg: i64 
    zstatic        pci_mcl.inf_highxreg: i64 
    zstatic        pci_mcl.inf_maxargs: i64 
    zstatic        pci_mcl.inf_assem: i64 
    zstatic        pci_mcl.inf_r10used: i64 
    zstatic        pci_mcl.inf_r11used: i64 
    zstatic        pci_mcl.inf_r13used: i64 
    zstatic        pci_mcl.dsaveregs: block:128 
    zstatic        pci_mcl.xsaveregs: block:128 
    zstatic        pci_mcl.ndsaveregs: i64 
    zstatic        pci_mcl.ndsavepush: i64 
    zstatic        pci_mcl.nxsaveregs: i64 
    zstatic        pci_mcl.dsaveoffset: i64 
    zstatic        pci_mcl.xsaveoffset: i64 
    zstatic        pci_mcl.needstackframe: i64 
    zstatic        pci_mcl.framebytes: i64 
    zstatic        pci_mcl.needshadow48: i64 
    zstatic        pci_mcl.needshadow32: i64 
    zstatic        pci_mcl.noxorclear: u8 
    istatic        pci_mcl.xregnames: block:136 
    data           "xnone"    u64 
    data           "xr0"      u64 
    data           "xr1"      u64 
    data           "xr2"      u64 
    data           "xr3"      u64 
    data           "xr4"      u64 
    data           "xr5"      u64 
    data           "xr6"      u64 
    data           "xr7"      u64 
    data           "xr8"      u64 
    data           "xr9"      u64 
    data           "xr10"     u64 
    data           "xr11"     u64 
    data           "xr12"     u64 
    data           "xr13"     u64 
    data           "xr14"     u64 
    data           "xr15"     u64 
    zstatic        pci_mcl.procdefpcl: u64 
    zstatic        pci_mcl.procdef: u64 
    zstatic        pci_mcl.callshadow: block:128 
    zstatic        pci_mcl.callslots: block:128 
    zstatic        pci_mcl.callalign: block:16 
    zstatic        pci_mcl.callargs: block:16 
    zstatic        pci_mcl.callnvars: block:16 
    zstatic        pci_mcl.ncalldepth: i64 
    zstatic        pci_mcl.paramdefs: block:256 
    zstatic        pci_mcl.localdefs: block:2048 
    zstatic        pci_mcl.nparams: i64 
    zstatic        pci_mcl.nlocals: i64 
    zstatic        pci_mcl.retmode: i64 
    zstatic        pci_mcl.passno: i64 
    zstatic        pci_mcl.sa_nargs: i64 
    istatic        pci_mcl.multregs: block:48 
    data           1          u64 
    data           2          u64 
    data           3          u64 
    data           11         u64 
    data           12         u64 
    data           13         u64 
    istatic        pci_mcl.multxregs: block:48 
    data           1          u64 
    data           2          u64 
    data           3          u64 
    data           4          u64 
    data           5          u64 
    data           6          u64 
    zstatic        pci_mcl.paramoffset: i64 
    zstatic        pci_mcl.lababs32: i64 
    zstatic        pci_mcl.lababs64: i64 
    zstatic        pci_mcl.labneg32: i64 
    zstatic        pci_mcl.labneg64: i64 
    zstatic        pci_mcl.labmask63: i64 
    zstatic        pci_mcl.laboffset64: i64 
    zstatic        pci_mcl.labzero: i64 
    istatic        pci_mcl.kk0used: i64 
    data           0          u64 
    zstatic        pci_mcl.stackaligned: i64 
    zstatic        pci_mcl.mccode: u64 
    zstatic        pci_mcl.mccodex: u64 
    istatic        pci_mcl.currsegment: i64 
    data           0          u64 
    istatic        pci_mcl.currzdataalign: i64 
    data           0          u64 
    istatic        pci_mcl.curridataalign: i64 
    data           0          u64 
    zstatic        pci_mcl.frameoffset: i64 
    zstatic        pci_mcl.isthreadedproc: i64 
    zstatic        pci_mcl.iscallbackproc: i64 
    zstatic        pci_mcl.structretoffset: i64 
    zstatic        pci_mcl.stacksetinstr: u64 
    zstatic        pci_mcl.currblocksize: i64 
    zstatic        pci_mcl.allasmstr: u64 
    zstatic        pci_mcl.allasmstrlen: i64 
    zstatic        pci_mcl.dstackopnd: u64 
    zstatic        pci_mcl.dframeopnd: u64 
    istatic        pci_mcl.zero_opnd: u64 
    data           0          u64 
    zstatic        pci_mcl.regtable: block:2048 
    zstatic        pci_mcl.smallinttable: block:264 
    zstatic        pci_mcl.frameregtable: block:1544 
    zstatic        pci_mcl.stringtable: u64 
    zstatic        pci_mcl.stringlabtable: u64 
    zstatic        pci_mcl.realtable: u64 
    zstatic        pci_mcl.reallabtable: u64 
    zstatic        pci_mcl.stringtablesize: i64 
    zstatic        pci_mcl.realtablesize: i64 
    istatic        pci_mcl.nstrings: i64 
    data           0          u64 
    istatic        pci_mcl.nreals: i64 
    data           0          u64 
    zstatic        pci_mcl.labeltable: block:6400000 
    zstatic        pci_mcl.sbuffer: block:16 
    istatic        pci_mcl.dest: u64 
    data           &pci_mcl.sbuffer u64 
    zstatic        pci_mcl.destlinestart: i64 
    zstatic        pci_mcl.currasmproc: u64 
    zstatic        pci_mcl.noregvar: i64 
    zstatic        pci_mcl.mseqno: i64 
    zstatic        pci_mcl.rtsproclabels: block:48 
    zstatic        pci_mcl.lab_funcnametable: i64 
    zstatic        pci_mcl.lab_funcaddrtable: i64 
    zstatic        pci_mcl.lab_funcnprocs: i64 
    zstatic        pci_mcl.ss_zdatalen: i64 
    zstatic        pci_mcl.ss_zdata: u64 
    zstatic        pci_mcl.ss_idata: u64 
    zstatic        pci_mcl.ss_code: u64 
    zstatic        pci_mcl.ss_idatarelocs: u64 
    zstatic        pci_mcl.ss_coderelocs: u64 
    zstatic        pci_mcl.ss_nidatarelocs: i64 
    zstatic        pci_mcl.ss_ncoderelocs: i64 
    zstatic        pci_mcl.ss_symboltable: u64 
    zstatic        pci_mcl.ss_nsymbols: i64 
    zstatic        pci_mcl.ss_symboltablesize: i64 
    zstatic        pci_mcl.labeldeftable: u64 
    zstatic        pci_mcl.alineno: i64 
    zstatic        pci_mcl.psearchlibs: block:240 
    zstatic        pci_mcl.npsearchlibs: i64 
    zstatic        pci_mcl.plibfiles: block:408 
    zstatic        pci_mcl.nplibfiles: i64 
    zstatic        pci_mcl.hostasmhandler: u64 
    zstatic        pc_genmcl.procdefmcl: u64 
    zstatic        pc_genmcl.currpcl: u64 
    zstatic        pc_genmcl.px_handlertable: block:1752 
    istatic        pc_genmcl.scondcodes: block:6 
    data           4          u8 
    data           5          u8 
    data           12         u8 
    data           14         u8 
    data           13         u8 
    data           15         u8 
    istatic        pc_genmcl.ucondcodes: block:6 
    data           4          u8 
    data           5          u8 
    data           2          u8 
    data           6          u8 
    data           3          u8 
    data           7          u8 
    istatic        pc_genmcl.multregs: block:48 
    data           1          u64 
    data           2          u64 
    data           3          u64 
    data           11         u64 
    data           12         u64 
    data           13         u64 
    istatic        pc_genmcl.multxregs: block:48 
    data           1          u64 
    data           2          u64 
    data           3          u64 
    data           4          u64 
    data           5          u64 
    data           6          u64 
    istatic        pc_genmcl.inithandlers.initdone: u8 
    data           0          u8 
    istatic        pc_libmcl.fshowmsource: i64 
    data           0          u64 
    zstatic        pc_libmcl.rd: block:120 
    zstatic        pc_libmcl.strmcl.str: block:512 
    istatic        pc_libmcl.getregname.prefix: block:136 
    data           "B"        u64 
    data           "W"        u64 
    data           ""         u64 
    data           "A"        u64 
    data           ""         u64 
    data           ""         u64 
    data           ""         u64 
    data           "D"        u64 
    data           ""         u64 
    data           ""         u64 
    data           ""         u64 
    data           ""         u64 
    data           ""         u64 
    data           ""         u64 
    data           ""         u64 
    data           "Q"        u64 
    data           "N"        u64 
    zstatic        pc_libmcl.getregname.str: block:32 
    zstatic        pc_libmcl.fgetregname.str: block:32 
    zstatic        pc_libmcl.getfullname.str: block:256 
    zstatic        pc_libmcl.stropnd.str: block:512 
    zstatic        pc_libmcl.strvalue.str: block:512 
    zstatic        pc_stackmcl.stropndstack.str: block:512 
    zstatic        pc_genss.rex: i64 
    zstatic        pc_genss.sizeoverride: i64 
    zstatic        pc_genss.addroverride: i64 
    zstatic        pc_genss.f2override: i64 
    zstatic        pc_genss.f3override: i64 
    zstatic        pc_genss.ddd: u64 
    zstatic        pc_genss.extraparam: u64 
    istatic        pc_genss.currseg: i64 
    data           0          u64 
    zstatic        pc_genss.currdata: u64 
    zstatic        pc_genss.currrelocs: u64 
    zstatic        pc_genss.nrelocs: i64 
    istatic        pc_genss.instrno: i64 
    data           2          u64 
    zstatic        pc_genss.currmcl: u64 
    istatic        pc_genss.genrm.scaletable: block:64 
    data           0          u64 
    data           1          u64 
    data           0          u64 
    data           2          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           3          u64 
    istatic        pc_objdecls.relocnames: block:56 
    data           "abs_rel"  u64 
    data           "addr64_rel" u64 
    data           "addr32_rel" u64 
    data           "addr32nb_rel" u64 
    data           "rel32_rel" u64 
    data           "rel321_rel" u64 
    data           "rel8_rel" u64 
    istatic        pc_optim.peephole.count: i64 
    data           0          u64 
    zstatic        pc_writeexe.libinsttable: block:240 
    zstatic        pc_writeexe.libinstnames: block:240 
    zstatic        pc_writeexe.libnotable: block:240 
    zstatic        pc_writeexe.basereloclist: u64 
    zstatic        pc_writeexe.nbaserelocs: i64 
    zstatic        pc_writeexe.maxrelocaddr: i64 
    zstatic        pc_writeexe.blockbases: block:4000 
    zstatic        pc_writeexe.blockcounts: block:2000 
    zstatic        pc_writeexe.blockbytes: block:2000 
    zstatic        pc_writeexe.blockpadding: block:500 
    zstatic        pc_writeexe.nbaseblocks: i64 
    zstatic        pc_writeexe.basetablesize: i64 
    zstatic        pc_writeexe.imagebase: i64 
    zstatic        pc_writeexe.imagesize: i64 
    zstatic        pc_writeexe.filesize: i64 
    zstatic        pc_writeexe.thunktable: u64 
    zstatic        pc_writeexe.fileiatoffset: i64 
    zstatic        pc_writeexe.fileiatsize: i64 
    zstatic        pc_writeexe.stentrypoint: u64 
    zstatic        pc_writeexe.stentrypoint2: u64 
    zstatic        pc_writeexe.stentrypoint3: u64 
    zstatic        pc_writeexe.sectiontable: block:720 
    zstatic        pc_writeexe.nsections: i64 
    zstatic        pc_writeexe.importdir: u64 
    zstatic        pc_writeexe.importtable: block:144000 
    zstatic        pc_writeexe.nimports: i64 
    zstatic        pc_writeexe.exporttable: block:16000 
    zstatic        pc_writeexe.nexports: i64 
    zstatic        pc_writeexe.dllfilename: u64 
    zstatic        pc_writeexe.isdll: i64 
    zstatic        pc_writeexe.dlltable: block:2400 
    zstatic        pc_writeexe.ndlls: i64 
    zstatic        pc_writeexe.datastart: u64 
    zstatic        pc_writeexe.dataptr: u64 
    zstatic        pc_writeexe.userentrypoint: u64 
    zstatic        pc_writeexe.exportdirvirtaddr: i64 
    zstatic        pc_writeexe.exportdirvirtsize: i64 
    zstatic        pc_writeexe.exportdiroffset: i64 
    zstatic        pc_writeexe.blockdirvirtaddr: i64 
    zstatic        pc_writeexe.blockdirvirtsize: i64 
    zstatic        pc_writeexe.blockdiroffset: i64 
    istatic        pc_writeexe.writedosstub.stubdata: block:128 
    data           77         u8 
    data           90         u8 
    data           144        u8 
    data           0          u8 
    data           3          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           4          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           255        u8 
    data           255        u8 
    data           0          u8 
    data           0          u8 
    data           184        u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           64         u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           128        u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           14         u8 
    data           31         u8 
    data           186        u8 
    data           14         u8 
    data           0          u8 
    data           180        u8 
    data           9          u8 
    data           205        u8 
    data           33         u8 
    data           184        u8 
    data           1          u8 
    data           76         u8 
    data           205        u8 
    data           33         u8 
    data           84         u8 
    data           104        u8 
    data           105        u8 
    data           115        u8 
    data           32         u8 
    data           112        u8 
    data           114        u8 
    data           111        u8 
    data           103        u8 
    data           114        u8 
    data           97         u8 
    data           109        u8 
    data           32         u8 
    data           99         u8 
    data           97         u8 
    data           110        u8 
    data           110        u8 
    data           111        u8 
    data           116        u8 
    data           32         u8 
    data           98         u8 
    data           101        u8 
    data           32         u8 
    data           114        u8 
    data           117        u8 
    data           110        u8 
    data           32         u8 
    data           105        u8 
    data           110        u8 
    data           32         u8 
    data           68         u8 
    data           79         u8 
    data           83         u8 
    data           32         u8 
    data           109        u8 
    data           111        u8 
    data           100        u8 
    data           101        u8 
    data           46         u8 
    data           13         u8 
    data           13         u8 
    data           10         u8 
    data           36         u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    zstatic        pc.target: i64 
    zstatic        pc.fshowc: u8 
    zstatic        pc.fshowpcl: u8 
    zstatic        pc.fshowmcl: u8 
    zstatic        pc.fshowss: u8 
    zstatic        pc.fshowst: u8 
    zstatic        pc.fshowstflat: u8 
    zstatic        pc.fshowtiming: u8 
    zstatic        pc.fverbose: u8 
    zstatic        pc.freadpcl: u8 
    istatic        pc.freadrts: u8 
    data           1          u8 
    zstatic        pc.mcltarget: u8 
    zstatic        pc.foptim: u8 
    zstatic        pc.destfile: u64 
    zstatic        pc.destext: u64 
    zstatic        pc.destfilename: u64 
    zstatic        pc.destfilepath: u64 
    zstatic        pc.infile: u64 
    istatic        pc.targetnames: block:80 
    data           "load_target" u64 
    data           "pcl_target" u64 
    data           "pcb_target" u64 
    data           "clang_target" u64 
    data           "exe_target" u64 
    data           "dll_target" u64 
    data           "asm_target" u64 
    data           "run_target" u64 
    data           "runvm_target" u64 
    data           "runjit_target" u64 
    istatic        pc.optionnames: block:224 
    data           "exe"      u64 
    data           "dll"      u64 
    data           "obj"      u64 
    data           "asm"      u64 
    data           "clang"    u64 
    data           "pcl"      u64 
    data           "pcb"      u64 
    data           "load"     u64 
    data           "runvm"    u64 
    data           "runjit"   u64 
    data           "opt"      u64 
    data           "opt1"     u64 
    data           "opt2"     u64 
    data           "rts"      u64 
    data           "norts"    u64 
    data           "showpcl"  u64 
    data           "showmcl"  u64 
    data           "showc"    u64 
    data           "showss"   u64 
    data           "st"       u64 
    data           "stflat"   u64 
    data           "time"     u64 
    data           "v"        u64 
    data           "q"        u64 
    data           "h"        u64 
    data           "help"     u64 
    data           "out"      u64 
    data           "outpath"  u64 
    zstatic        pc.progsource: u64 
    zstatic        pc.error:  u64 
    zstatic        pc.inputfiles: block:168 
    zstatic        pc.libfiles: block:168 
    zstatic        pc.ninputfiles: i64 
    zstatic        pc.nlibfiles: i64 
    zstatic        pc.do_option.outused: u8 
    zstatic        pc.do_option.outpathused: u8 

Proc msysp.m$init:
    local          msysp.m$init.nargs i32 
    local          msysp.m$init.nargs64 i64 
    local          msysp.m$init.args u64 
    local          msysp.m$init.env u64 
    local          msysp.m$init.res i64 
    local          msysp.m$init.s u64 
    local          msysp.m$init.j i64 
    local          msysp.m$init.i i64 
    procentry                 
    setargs                   5 0
    push           &msysp.m$init.startupinfo 
    push           0          i64 
    push           &msysp.m$init.env 
    push           &msysp.m$init.args 
    push           &msysp.m$init.nargs 
    callfn         &__getmainargs i32 
    pop            msysp.m$init.res i64 
    push           msysp.m$init.nargs i32 
    pop            msysp.nsysparams i64 
    push           msysp.nsysparams i64 
    push           128        i64 
    jumple         #4579      i64 
    setargs                   1 0
    push           "Too many params\n" u64 
    callproc       &printf    
    push           50         i64 
    stop                      
#4579: 
    push           msysp.m$init.nargs i32 
    pop            msysp.m$init.nargs64 i64 
#4580: 
    push           1          i64 
    pop            msysp.m$init.i i64 
    push           msysp.m$init.nargs64 i64 
    push           1          i64 
    jumplt         #4581      i64 
#4582: 
    push           msysp.m$init.args u64 
    push           msysp.m$init.i i64 
    pushptroff                u64 8 -8
    push           &msysp.sysparams 
    push           msysp.m$init.i i64 
    popptroff                 u64 8 -8
#4583: 
    forup          #4582      i64 1
    opnd           msysp.m$init.i 
    opnd           msysp.m$init.nargs64 
#4581: 
    push           1          i64 
    pop            msysp.m$init.j i64 
    push           0          i64 
    pop            msysp.nenvstrings i64 
    jump           #4584      
#4585: 
    push           msysp.m$init.env u64 
    push           msysp.m$init.j i64 
    pushptroff                u64 8 -8
    push           &msysp.envstrings 
    push           &msysp.nenvstrings 
    incrload                  i64 1
    popptroff                 u64 8 -8
    push           &msysp.m$init.j 
    incr                      i64 1
#4584: 
    push           msysp.m$init.env u64 
    push           msysp.m$init.j i64 
    pushptroff                u64 8 -8
    jumptrue       #4585      u64 
#4586: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
#4587: 
    retproc                   
End


Proc msysp.pushio:
    procentry                 
    push           msysp.niostack i64 
    push           10         i64 
    jumplt         #4589      i64 
    setargs                   1 0
    push           "Too many io levels\n" u64 
    callproc       &printf    
    push           53         i64 
    stop                      
#4589: 
    push           &msysp.niostack 
    incr                      i64 1
    push           msysp.outchan u64 
    push           &msysp.outchan_stack 
    push           msysp.niostack i64 
    popptroff                 u64 8 -8
    push           msysp.outdev i64 
    push           &msysp.outdev_stack 
    push           msysp.niostack i64 
    popptroff                 i64 8 -8
    push           msysp.fmtstr u64 
    push           &msysp.fmtstr_stack 
    push           msysp.niostack i64 
    popptroff                 u64 8 -8
    push           msysp.needgap i64 
    push           &msysp.needgap_stack 
    push           msysp.niostack i64 
    popptroff                 u8 1 -1
    push           0          i64 
    pop            msysp.needgap i64 
    push           0          u64 
    pop            msysp.fmtstr u64 
    push           0          u64 
    pop            msysp.outchan u64 
#4590: 
    retproc                   
End


Proc msysp.m$print_startfile:
    param          msysp.m$print_startfile.dev u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.pushio 
    push           msysp.m$print_startfile.dev u64 
    pop            msysp.outchan u64 
    push           msysp.m$print_startfile.dev u64 
    jumpfalse      #4592      u64 
    push           2          i64 
    pop            msysp.outdev i64 
    jump           #4593      
#4592: 
    push           1          i64 
    pop            msysp.outdev i64 
#4593: 
#4594: 
    retproc                   
End


Proc msysp.m$print_startstr:
    param          msysp.m$print_startstr.s u64 
    local          msysp.m$print_startstr.p u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.pushio 
    push           msysp.m$print_startstr.s u64 
    push           &msysp.ptr_stack 
    push           msysp.niostack i64 
    popptroff                 u64 8 -8
    push           &msysp.ptr_stack 
    push           msysp.niostack i64 
    addrefoff                 u64 8 -8
    pop            msysp.m$print_startstr.p u64 
    push           msysp.m$print_startstr.p u64 
    pop            msysp.outchan u64 
    push           3          i64 
    pop            msysp.outdev i64 
#4596: 
    retproc                   
End


Proc msysp.m$print_startptr:
    param          msysp.m$print_startptr.p u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.pushio 
    push           msysp.m$print_startptr.p u64 
    pop            msysp.outchan u64 
    push           3          i64 
    pop            msysp.outdev i64 
#4598: 
    retproc                   
End


Proc msysp.m$print_startcon:
    procentry                 
    setargs                   0 0
    callproc       &msysp.pushio 
    push           1          i64 
    pop            msysp.outdev i64 
#4600: 
    retproc                   
End


Proc msysp.m$freddy:
    procentry                 
    setargs                   0 0
    callproc       &msysp.pushio 
    push           1          i64 
    pop            msysp.outdev i64 
#4602: 
    retproc                   
End


Proc msysp.m$print_setfmt:
    param          msysp.m$print_setfmt.format u64 
    procentry                 
    push           msysp.m$print_setfmt.format u64 
    pop            msysp.fmtstr u64 
#4604: 
    retproc                   
End


Proc msysp.m$print_end:
    procentry                 
    push           0          i64 
    pop            msysp.needgap i64 
    setargs                   1 0
    push           1          i64 
    callproc       &msysp.nextfmtchars 
    push           msysp.niostack i64 
    push           0          i64 
    jumpne         #4606      i64 
    jump           #4607      
#4606: 
    push           &msysp.outchan_stack 
    push           msysp.niostack i64 
    pushptroff                u64 8 -8
    pop            msysp.outchan u64 
    push           &msysp.outdev_stack 
    push           msysp.niostack i64 
    pushptroff                i64 8 -8
    pop            msysp.outdev i64 
    push           &msysp.fmtstr_stack 
    push           msysp.niostack i64 
    pushptroff                u64 8 -8
    pop            msysp.fmtstr u64 
    push           &msysp.needgap_stack 
    push           msysp.niostack i64 
    pushptroff                u8 1 -1
    pop            msysp.needgap i64 
    push           &msysp.niostack 
    decr                      i64 1
#4607: 
    retproc                   
End


Proc msysp.m$print_ptr:
    param          msysp.m$print_ptr.a u64 
    param          msysp.m$print_ptr.fmtstyle u64 
    local          msysp.m$print_ptr.s block:20 
    procentry                 
    push           msysp.m$print_ptr.fmtstyle u64 
    push           0          u64 
    jumpne         #4609      u64 
    push           "z8H"      u64 
    pop            msysp.m$print_ptr.fmtstyle u64 
#4609: 
    setargs                   2 0
    push           msysp.m$print_ptr.fmtstyle u64 
    push           msysp.m$print_ptr.a u64 
    callproc       &msysp.m$print_u64 
#4610: 
    retproc                   
End


Proc msysp.m$print_ptr_nf:
    param          msysp.m$print_ptr_nf.a u64 
    procentry                 
    setargs                   2 0
    push           0          u64 
    push           msysp.m$print_ptr_nf.a u64 
    callproc       &msysp.m$print_ptr 
#4612: 
    retproc                   
End


Proc msysp.m$print_i64:
    param          msysp.m$print_i64.a i64 
    param          msysp.m$print_i64.fmtstyle u64 
    local          msysp.m$print_i64.s block:40 
    local          msysp.m$print_i64.fmt block:16 
    local          msysp.m$print_i64.n i64 
    procentry                 
    setargs                   1 0
    push           0          i64 
    callproc       &msysp.nextfmtchars 
    push           msysp.m$print_i64.fmtstyle u64 
    push           0          u64 
    jumpne         #4614      u64 
    push           msysp.m$print_i64.a i64 
    push           0          i64 
    jumplt         #4615      i64 
    setargs                   4 0
    push           0          i64 
    push           10         u64 
    push           &msysp.m$print_i64.s 
    push           msysp.m$print_i64.a u64 
    callfn         &msysp.u64tostr i64 
    pop            msysp.m$print_i64.n i64 
    jump           #4616      
#4615: 
    push           45         u64 
    push           &msysp.m$print_i64.s 
    push           1          i64 
    popptroff                 u8 1 -1
    setargs                   4 0
    push           0          i64 
    push           10         u64 
    push           &msysp.m$print_i64.s 
    push           1          
    addrefoff                 u8 1 0
    push           msysp.m$print_i64.a i64 
    neg                       u64 
    callfn         &msysp.u64tostr i64 
    push           1          i64 
    add                       i64 
    pop            msysp.m$print_i64.n i64 
#4616: 
    setargs                   2 0
    push           msysp.m$print_i64.n i64 
    push           &msysp.m$print_i64.s 
    callproc       &msysp.printstr_n 
    jump           #4617      
#4614: 
    setargs                   3 0
    push           &msysp.m$print_i64.fmt 
    push           -1         i64 
    push           msysp.m$print_i64.fmtstyle u64 
    callproc       &msysp.strtofmt 
    push           &msysp.m$print_i64.fmt 
    push           14         
    pushptroff                u8 1 0
    push           86         u64 
    jumpne         #4618      u64 
    push           msysp.m$print_i64.a i64 
    pop            msysp.fmtparam i64 
    push           0          i64 
    pop            msysp.needgap i64 
    jump           #4619      
#4618: 
    setargs                   2 0
    push           &msysp.m$print_i64.fmt 
    push           msysp.m$print_i64.a i64 
    callproc       &msysp.tostr_i64 
#4619: 
#4617: 
    push           1          i64 
    pop            msysp.needgap i64 
#4620: 
    retproc                   
End


Proc msysp.m$print_i64_nf:
    param          msysp.m$print_i64_nf.a i64 
    procentry                 
    setargs                   2 0
    push           0          u64 
    push           msysp.m$print_i64_nf.a i64 
    callproc       &msysp.m$print_i64 
#4622: 
    retproc                   
End


Proc msysp.m$print_u64:
    param          msysp.m$print_u64.a u64 
    param          msysp.m$print_u64.fmtstyle u64 
    local          msysp.m$print_u64.s block:40 
    local          msysp.m$print_u64.fmt block:16 
    procentry                 
    setargs                   1 0
    push           0          i64 
    callproc       &msysp.nextfmtchars 
    push           msysp.m$print_u64.fmtstyle u64 
    push           0          u64 
    jumpne         #4624      u64 
    setargs                   3 3
    push           msysp.m$print_u64.a u64 
    push           "%llu"     u64 
    push           &msysp.m$print_u64.s 
    callproc       &sprintf   
    setargs                   1 0
    push           &msysp.m$print_u64.s 
    callproc       &msysp.printstr 
    jump           #4625      
#4624: 
    setargs                   3 0
    push           &msysp.m$print_u64.fmt 
    push           -1         i64 
    push           msysp.m$print_u64.fmtstyle u64 
    callproc       &msysp.strtofmt 
    setargs                   2 0
    push           &msysp.m$print_u64.fmt 
    push           msysp.m$print_u64.a u64 
    callproc       &msysp.tostr_u64 
#4625: 
    push           1          i64 
    pop            msysp.needgap i64 
#4626: 
    retproc                   
End


Proc msysp.m$print_i128:
    param          msysp.m$print_i128.a i128 
    param          msysp.m$print_i128.fmtstyle u64 
    local          msysp.m$print_i128.s block:40 
    local          msysp.m$print_i128.fmt block:16 
    procentry                 
    setargs                   1 0
    push           0          i64 
    callproc       &msysp.nextfmtchars 
    setargs                   3 0
    push           &msysp.m$print_i128.fmt 
    push           -1         i64 
    push           msysp.m$print_i128.fmtstyle u64 
    callproc       &msysp.strtofmt 
    push           msysp.m$print_i128.a i128 
    push           0          i64 
    widenw                    i128 i64 
    jumplt         #4628      i128 
    setargs                   4 0
    push           0          i64 
    push           &msysp.m$print_i128.fmt 
    push           msysp.m$print_i128.a u128 
    callproc       &msysp.tostr_u128 
    jump           #4629      
#4628: 
    setargs                   4 0
    push           1          i64 
    push           &msysp.m$print_i128.fmt 
    push           msysp.m$print_i128.a i128 
    neg                       u128 
    callproc       &msysp.tostr_u128 
#4629: 
    push           1          i64 
    pop            msysp.needgap i64 
#4630: 
    retproc                   
End


Proc msysp.m$print_u128:
    param          msysp.m$print_u128.a u128 
    param          msysp.m$print_u128.fmtstyle u64 
    local          msysp.m$print_u128.s block:40 
    local          msysp.m$print_u128.fmt block:16 
    procentry                 
    setargs                   1 0
    push           0          i64 
    callproc       &msysp.nextfmtchars 
    setargs                   3 0
    push           &msysp.m$print_u128.fmt 
    push           -1         i64 
    push           msysp.m$print_u128.fmtstyle u64 
    callproc       &msysp.strtofmt 
    setargs                   4 0
    push           0          i64 
    push           &msysp.m$print_u128.fmt 
    push           msysp.m$print_u128.a u128 
    callproc       &msysp.tostr_u128 
    push           1          i64 
    pop            msysp.needgap i64 
#4632: 
    retproc                   
End


Proc msysp.m$print_r64:
    param          msysp.m$print_r64.x r64 
    param          msysp.m$print_r64.fmtstyle u64 
    local          msysp.m$print_r64.s block:360 
    local          msysp.m$print_r64.fmt block:16 
    procentry                 
    setargs                   1 0
    push           0          i64 
    callproc       &msysp.nextfmtchars 
    push           msysp.m$print_r64.fmtstyle u64 
    push           0          u64 
    jumpne         #4634      u64 
    setargs                   3 3
    push           msysp.m$print_r64.x r64 
    push           "%f"       u64 
    push           &msysp.m$print_r64.s 
    callproc       &sprintf   
    setargs                   1 0
    push           &msysp.m$print_r64.s 
    callproc       &msysp.printstr 
    jump           #4635      
#4634: 
    setargs                   3 0
    push           &msysp.m$print_r64.fmt 
    push           -1         i64 
    push           msysp.m$print_r64.fmtstyle u64 
    callproc       &msysp.strtofmt 
    setargs                   2 0
    push           &msysp.m$print_r64.fmt 
    push           msysp.m$print_r64.x r64 
    callproc       &msysp.tostr_r64 
#4635: 
    push           1          i64 
    pop            msysp.needgap i64 
#4636: 
    retproc                   
End


Proc msysp.m$print_r32:
    param          msysp.m$print_r32.x r32 
    param          msysp.m$print_r32.fmtstyle u64 
    procentry                 
    setargs                   2 0
    push           msysp.m$print_r32.fmtstyle u64 
    push           msysp.m$print_r32.x r32 
    fwiden                    r64 r32 
    callproc       &msysp.m$print_r64 
#4638: 
    retproc                   
End


Proc msysp.m$print_c8:
    param          msysp.m$print_c8.a i64 
    param          msysp.m$print_c8.fmtstyle u64 
    local          msysp.m$print_c8.s block:40 
    local          msysp.m$print_c8.fmt block:16 
    local          msysp.m$print_c8.n i64 
    procentry                 
    setargs                   1 0
    push           0          i64 
    callproc       &msysp.nextfmtchars 
    push           msysp.m$print_c8.a u64 
    push           &msysp.m$print_c8.s 
    push           1          i64 
    popptroff                 u8 1 -1
    push           0          u64 
    push           &msysp.m$print_c8.s 
    push           2          i64 
    popptroff                 u8 1 -1
    setargs                   1 0
    push           &msysp.m$print_c8.s 
    callproc       &msysp.printstr 
    push           1          i64 
    pop            msysp.needgap i64 
#4640: 
    retproc                   
End


Proc msysp.m$print_str:
    param          msysp.m$print_str.s u64 
    param          msysp.m$print_str.fmtstyle u64 
    local          msysp.m$print_str.fmt block:16 
    procentry                 
    setargs                   1 0
    push           0          i64 
    callproc       &msysp.nextfmtchars 
    push           msysp.m$print_str.s u64 
    push           0          u64 
    jumpne         #4642      u64 
    setargs                   1 0
    push           "<null>"   u64 
    callproc       &msysp.printstr 
    jump           #4643      
#4642: 
    push           msysp.m$print_str.fmtstyle u64 
    push           0          u64 
    jumpne         #4644      u64 
    setargs                   1 0
    push           msysp.m$print_str.s u64 
    callproc       &msysp.printstr 
    jump           #4645      
#4644: 
    setargs                   3 0
    push           &msysp.m$print_str.fmt 
    push           -1         i64 
    push           msysp.m$print_str.fmtstyle u64 
    callproc       &msysp.strtofmt 
    setargs                   2 0
    push           &msysp.m$print_str.fmt 
    push           msysp.m$print_str.s u64 
    callproc       &msysp.tostr_str 
#4645: 
    push           1          i64 
    pop            msysp.needgap i64 
#4643: 
    retproc                   
End


Proc msysp.m$print_str_nf:
    param          msysp.m$print_str_nf.s u64 
    procentry                 
    setargs                   2 0
    push           0          u64 
    push           msysp.m$print_str_nf.s u64 
    callproc       &msysp.m$print_str 
#4647: 
    retproc                   
End


Proc msysp.m$print_strsl:
    param          msysp.m$print_strsl.s u128 
    param          msysp.m$print_strsl.fmtstyle u64 
    local          msysp.m$print_strsl.fmt block:16 
    procentry                 
    setargs                   1 0
    push           0          i64 
    callproc       &msysp.nextfmtchars 
    setargs                   1 0
    push           "FORMATED PRINT SLICE NOT READY" u64 
    callproc       &mlibp.abortprogram 
    push           1          i64 
    pop            msysp.needgap i64 
#4649: 
    retproc                   
End


Proc msysp.m$print_newline:
    procentry                 
    push           0          i64 
    pop            msysp.needgap i64 
    setargs                   1 0
    push           1          i64 
    callproc       &msysp.nextfmtchars 
    setargs                   1 0
    push           "\c\n"     u64 
    callproc       &msysp.printstr 
#4651: 
    retproc                   
End


Proc msysp.m$print_nogap:
    procentry                 
    push           0          i64 
    pop            msysp.needgap i64 
#4653: 
    retproc                   
End


Proc msysp.m$print_space:
    procentry                 
    push           0          i64 
    pop            msysp.needgap i64 
    setargs                   1 0
    push           " "        u64 
    callproc       &msysp.printstr 
#4655: 
    retproc                   
End


Proc msysp.printstr:
    param          msysp.printstr.s u64 
    local          msysp.printstr.n i64 
    local          msysp.printstr.p u64 
    procentry                 
    push           msysp.outdev i64 
    push           1          i64 
    casejumpeq     #4657      i64 0
    push           2          i64 
    casejumpeq     #4658      i64 0
    push           3          i64 
    casejumpeq     #4659      i64 0
    popstack                  i64 
    jump           #4660      
#4657: 
    setargs                   2 2
    push           msysp.printstr.s u64 
    push           "%s"       u64 
    callproc       &printf    
    jump           #4661      
#4658: 
    setargs                   3 3
    push           msysp.printstr.s u64 
    push           "%s"       u64 
    push           msysp.outchan u64 
    callproc       &fprintf   
    jump           #4661      
#4659: 
    push           msysp.outchan u64 
    pop            msysp.printstr.p u64 
    setargs                   2 0
    push           msysp.printstr.s u64 
    push           msysp.printstr.p u64 
    pushptr                   u64 
    callproc       &strcpy    
    push           msysp.printstr.p u64 
    setargs                   1 0
    push           msysp.printstr.s u64 
    callfn         &strlen    i64 
    addrefoffto               u64 1 0
    push           0          u64 
    push           msysp.printstr.p u64 
    pushptr                   u64 
    popptr                    u8 
    jump           #4661      
#4660: 
#4661: 
#4662: 
    retproc                   
End


Proc msysp.printstr_n:
    param          msysp.printstr_n.s u64 
    param          msysp.printstr_n.n i64 
    local          msysp.printstr_n.p u64 
    procentry                 
    push           msysp.printstr_n.n i64 
    push           -1         i64 
    casejumpeq     #4664      i64 0
    push           0          i64 
    casejumpeq     #4665      i64 0
    popstack                  i64 
    jump           #4666      
#4664: 
    setargs                   1 0
    push           msysp.printstr_n.s u64 
    callfn         &strlen    i64 
    pop            msysp.printstr_n.n i64 
    jump           #4667      
#4665: 
    jump           #4668      
    jump           #4667      
#4666: 
#4667: 
    push           msysp.outdev i64 
    push           1          i64 
    casejumpeq     #4669      i64 0
    push           2          i64 
    casejumpeq     #4670      i64 0
    push           3          i64 
    casejumpeq     #4671      i64 0
    popstack                  i64 
    jump           #4672      
#4669: 
    setargs                   3 2
    push           msysp.printstr_n.s u64 
    push           msysp.printstr_n.n i64 
    push           "%.*s"     u64 
    callproc       &printf    
    jump           #4673      
#4670: 
    setargs                   4 3
    push           msysp.printstr_n.s u64 
    push           msysp.printstr_n.n i64 
    push           "%.*s"     u64 
    push           msysp.outchan u64 
    callproc       &fprintf   
    jump           #4673      
#4671: 
    push           msysp.outchan u64 
    pop            msysp.printstr_n.p u64 
    setargs                   3 0
    push           msysp.printstr_n.n u64 
    push           msysp.printstr_n.s u64 
    push           msysp.printstr_n.p u64 
    pushptr                   u64 
    callproc       &memcpy    
    push           msysp.printstr_n.p u64 
    push           msysp.printstr_n.n i64 
    addrefoffto               u64 1 0
    push           0          u64 
    push           msysp.printstr_n.p u64 
    pushptr                   u64 
    popptr                    u8 
    jump           #4673      
#4672: 
#4673: 
#4668: 
    retproc                   
End


Proc msysp.printstrn_app:
    param          msysp.printstrn_app.s u64 
    param          msysp.printstrn_app.length i64 
    param          msysp.printstrn_app.f u64 
    procentry                 
    push           msysp.printstrn_app.length i64 
    jumpfalse      #4675      i64 
    push           msysp.printstrn_app.f u64 
    push           0          u64 
    jumpne         #4676      u64 
    setargs                   3 2
    push           msysp.printstrn_app.s u64 
    push           msysp.printstrn_app.length i64 
    push           "%.*s"     u64 
    callproc       &printf    
    jump           #4677      
#4676: 
    setargs                   4 3
    push           msysp.printstrn_app.s u64 
    push           msysp.printstrn_app.length i64 
    push           "%.*s"     u64 
    push           msysp.printstrn_app.f u64 
    callproc       &fprintf   
#4677: 
#4675: 
#4678: 
    retproc                   
End


Proc msysp.printchar:
    param          msysp.printchar.ch i64 
    local          msysp.printchar.p u64 
    procentry                 
    push           msysp.outdev i64 
    push           1          i64 
    casejumpeq     #4680      i64 0
    push           2          i64 
    casejumpeq     #4681      i64 0
    push           3          i64 
    casejumpeq     #4682      i64 0
    popstack                  i64 
    jump           #4683      
#4680: 
    setargs                   2 2
    push           msysp.printchar.ch i64 
    push           "%c"       u64 
    callproc       &printf    
    jump           #4684      
#4681: 
    setargs                   3 3
    push           msysp.printchar.ch i64 
    push           "%c"       u64 
    push           msysp.outchan u64 
    callproc       &fprintf   
    jump           #4684      
#4682: 
    push           msysp.outchan u64 
    pop            msysp.printchar.p u64 
    push           msysp.printchar.ch u64 
    push           msysp.printchar.p u64 
    pushptr                   u64 
    popptr                    u8 
    push           msysp.printchar.p u64 
    push           1          i64 
    addrefoffto               u64 1 0
    push           0          u64 
    push           msysp.printchar.p u64 
    pushptr                   u64 
    popptr                    u8 
    jump           #4684      
#4683: 
#4684: 
#4685: 
    retproc                   
End


Proc msysp.nextfmtchars:
    param          msysp.nextfmtchars.lastx i64 
    local          msysp.nextfmtchars.c u8 
    local          msysp.nextfmtchars.pstart u64 
    local          msysp.nextfmtchars.n i64 
    procentry                 
    push           msysp.fmtstr u64 
    jumptrue       #4687      u64 
    push           msysp.needgap i64 
    jumpfalse      #4688      i64 
    setargs                   1 0
    push           32         i64 
    callproc       &msysp.printchar 
#4688: 
    push           0          i64 
    pop            msysp.needgap i64 
    jump           #4689      
#4687: 
    push           msysp.fmtstr u64 
    pop            msysp.nextfmtchars.pstart u64 
    push           0          i64 
    pop            msysp.nextfmtchars.n i64 
#4690: 
    push           msysp.fmtstr u64 
    pushptr                   u8 
    pop            msysp.nextfmtchars.c u8 
    push           msysp.nextfmtchars.c u8 
    switch         #4691      0 126
    opnd           #4692      
#4691: 
    switchlabel    #4693      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4694      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4692      
    switchlabel    #4695      
    endswitch                 
#4694: 
    push           msysp.nextfmtchars.lastx i64 
    jumpfalse      #4696      i64 
    jump           #4697      
#4696: 
    push           &msysp.fmtstr 
    incr                      u64 1
    push           msysp.nextfmtchars.n i64 
    jumpfalse      #4698      i64 
    setargs                   2 0
    push           msysp.nextfmtchars.n i64 
    push           msysp.nextfmtchars.pstart u64 
    callproc       &msysp.printstr_n 
#4698: 
    jump           #4689      
    jump           #4699      
#4693: 
    push           msysp.nextfmtchars.n i64 
    jumpfalse      #4700      i64 
    setargs                   2 0
    push           msysp.nextfmtchars.n i64 
    push           msysp.nextfmtchars.pstart u64 
    callproc       &msysp.printstr_n 
    jump           #4701      
#4700: 
    push           msysp.nextfmtchars.lastx i64 
    jumptrue       #4702      i64 
    setargs                   2 0
    push           1          i64 
    push           "|"        u64 
    callproc       &msysp.printstr_n 
#4702: 
#4701: 
    jump           #4689      
    jump           #4699      
#4695: 
    push           msysp.nextfmtchars.n i64 
    jumpfalse      #4703      i64 
    setargs                   2 0
    push           msysp.nextfmtchars.n i64 
    push           msysp.nextfmtchars.pstart u64 
    callproc       &msysp.printstr_n 
    push           0          i64 
    pop            msysp.nextfmtchars.n i64 
#4703: 
    push           &msysp.fmtstr 
    incr                      u64 1
    push           msysp.fmtstr u64 
    pushptr                   u8 
    pop            msysp.nextfmtchars.c u8 
    push           msysp.nextfmtchars.c u8 
    jumpfalse      #4704      u64 
    push           &msysp.fmtstr 
    incr                      u64 1
    setargs                   1 0
    push           msysp.nextfmtchars.c u8 
    callproc       &msysp.printchar 
#4704: 
    push           msysp.fmtstr u64 
    pop            msysp.nextfmtchars.pstart u64 
    jump           #4699      
#4692: 
!skip::
#4697: 
    push           &msysp.nextfmtchars.n 
    incr                      i64 1
    push           &msysp.fmtstr 
    incr                      u64 1
#4699: 
    jump           #4690      
#4705: 
#4689: 
    retproc                   
End


Proc msysp.strtofmt:
    param          msysp.strtofmt.s u64 
    param          msysp.strtofmt.slen i64 
    param          msysp.strtofmt.fmt u64 
    local          msysp.strtofmt.c i64 
    local          msysp.strtofmt.wset u8 
    local          msysp.strtofmt.n i64 
    local          msysp.strtofmt.str block:100 
    procentry                 
    push           msysp.defaultfmt block:16 
    push           msysp.strtofmt.fmt u64 
    popptr                    block:16 
    push           msysp.strtofmt.s u64 
    push           0          u64 
    jumpne         #4707      u64 
    jump           #4708      
#4707: 
    push           msysp.strtofmt.slen i64 
    push           -1         i64 
    jumpne         #4709      i64 
    setargs                   1 0
    push           msysp.strtofmt.s u64 
    callfn         &strlen    i64 
    pop            msysp.strtofmt.slen i64 
#4709: 
    setargs                   3 0
    push           msysp.strtofmt.slen u64 
    push           msysp.strtofmt.s u64 
    push           &msysp.strtofmt.str 
    callproc       &memcpy    
    push           0          u64 
    push           &msysp.strtofmt.str 
    push           msysp.strtofmt.slen i64 
    popptroff                 u8 1 0
    push           &msysp.strtofmt.str 
    pop            msysp.strtofmt.s u64 
    push           0          i64 
    pop            msysp.strtofmt.wset u8 
    jump           #4710      
#4711: 
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    pop            msysp.strtofmt.c i64 
    push           &msysp.strtofmt.s 
    incr                      u64 1
    push           msysp.strtofmt.c i64 
    switch         #4712      42 126
    opnd           #4713      
#4712: 
    switchlabel    #4714      
    switchlabel    #4715      
    switchlabel    #4716      
    switchlabel    #4713      
    switchlabel    #4717      
    switchlabel    #4713      
    switchlabel    #4713      
    switchlabel    #4713      
    switchlabel    #4713      
    switchlabel    #4713      
    switchlabel    #4713      
    switchlabel    #4713      
    switchlabel    #4713      
    switchlabel    #4713      
    switchlabel    #4713      
    switchlabel    #4713      
    switchlabel    #4713      
    switchlabel    #4713      
    switchlabel    #4713      
    switchlabel    #4713      
    switchlabel    #4713      
    switchlabel    #4713      
    switchlabel    #4713      
    switchlabel    #4718      
    switchlabel    #4719      
    switchlabel    #4720      
    switchlabel    #4721      
    switchlabel    #4722      
    switchlabel    #4723      
    switchlabel    #4724      
    switchlabel    #4725      
    switchlabel    #4713      
    switchlabel    #4726      
    switchlabel    #4713      
    switchlabel    #4713      
    switchlabel    #4727      
    switchlabel    #4713      
    switchlabel    #4728      
    switchlabel    #4729      
    switchlabel    #4730      
    switchlabel    #4713      
    switchlabel    #4731      
    switchlabel    #4732      
    switchlabel    #4713      
    switchlabel    #4733      
    switchlabel    #4734      
    switchlabel    #4735      
    switchlabel    #4713      
    switchlabel    #4736      
    switchlabel    #4713      
    switchlabel    #4713      
    switchlabel    #4713      
    switchlabel    #4713      
    switchlabel    #4716      
    switchlabel    #4713      
    switchlabel    #4737      
    switchlabel    #4719      
    switchlabel    #4720      
    switchlabel    #4721      
    switchlabel    #4722      
    switchlabel    #4723      
    switchlabel    #4724      
    switchlabel    #4725      
    switchlabel    #4713      
    switchlabel    #4726      
    switchlabel    #4713      
    switchlabel    #4713      
    switchlabel    #4727      
    switchlabel    #4713      
    switchlabel    #4728      
    switchlabel    #4729      
    switchlabel    #4730      
    switchlabel    #4713      
    switchlabel    #4731      
    switchlabel    #4732      
    switchlabel    #4713      
    switchlabel    #4733      
    switchlabel    #4734      
    switchlabel    #4735      
    switchlabel    #4713      
    switchlabel    #4736      
    switchlabel    #4713      
    switchlabel    #4713      
    switchlabel    #4713      
    switchlabel    #4738      
    endswitch                 
#4719: 
    push           2          i64 
    push           msysp.strtofmt.fmt u64 
    push           2          
    popptroff                 u8 1 0
    jump           #4739      
#4725: 
    push           16         i64 
    push           msysp.strtofmt.fmt u64 
    push           2          
    popptroff                 u8 1 0
    jump           #4739      
#4728: 
    push           8          i64 
    push           msysp.strtofmt.fmt u64 
    push           2          
    popptroff                 u8 1 0
    jump           #4739      
#4735: 
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    pop            msysp.strtofmt.c i64 
    push           msysp.strtofmt.c i64 
    jumpfalse      #4740      i64 
    push           msysp.strtofmt.c i64 
    switch         #4741      48 102
    opnd           #4742      
#4741: 
    switchlabel    #4743      
    switchlabel    #4743      
    switchlabel    #4743      
    switchlabel    #4743      
    switchlabel    #4743      
    switchlabel    #4743      
    switchlabel    #4743      
    switchlabel    #4743      
    switchlabel    #4743      
    switchlabel    #4743      
    switchlabel    #4742      
    switchlabel    #4742      
    switchlabel    #4742      
    switchlabel    #4742      
    switchlabel    #4742      
    switchlabel    #4742      
    switchlabel    #4742      
    switchlabel    #4744      
    switchlabel    #4744      
    switchlabel    #4744      
    switchlabel    #4744      
    switchlabel    #4744      
    switchlabel    #4744      
    switchlabel    #4742      
    switchlabel    #4742      
    switchlabel    #4742      
    switchlabel    #4742      
    switchlabel    #4742      
    switchlabel    #4742      
    switchlabel    #4742      
    switchlabel    #4742      
    switchlabel    #4742      
    switchlabel    #4742      
    switchlabel    #4742      
    switchlabel    #4742      
    switchlabel    #4742      
    switchlabel    #4742      
    switchlabel    #4742      
    switchlabel    #4742      
    switchlabel    #4742      
    switchlabel    #4742      
    switchlabel    #4742      
    switchlabel    #4742      
    switchlabel    #4742      
    switchlabel    #4742      
    switchlabel    #4742      
    switchlabel    #4742      
    switchlabel    #4742      
    switchlabel    #4742      
    switchlabel    #4745      
    switchlabel    #4745      
    switchlabel    #4745      
    switchlabel    #4745      
    switchlabel    #4745      
    switchlabel    #4745      
    endswitch                 
#4743: 
    push           msysp.strtofmt.c i64 
    push           48         i64 
    sub                       i64 
    pop            msysp.strtofmt.c i64 
    jump           #4746      
#4744: 
    push           msysp.strtofmt.c i64 
    push           65         i64 
    sub                       i64 
    push           10         i64 
    add                       i64 
    pop            msysp.strtofmt.c i64 
    jump           #4746      
#4745: 
    push           msysp.strtofmt.c i64 
    push           97         i64 
    sub                       i64 
    push           10         i64 
    add                       i64 
    pop            msysp.strtofmt.c i64 
    jump           #4746      
#4742: 
    push           10         i64 
    pop            msysp.strtofmt.c i64 
#4746: 
    push           msysp.strtofmt.c i64 
    push           msysp.strtofmt.fmt u64 
    push           2          
    popptroff                 u8 1 0
    push           &msysp.strtofmt.s 
    incr                      u64 1
#4740: 
    jump           #4739      
#4730: 
    push           34         u64 
    push           msysp.strtofmt.fmt u64 
    push           3          
    popptroff                 u8 1 0
    jump           #4739      
#4738: 
    push           126        u64 
    push           msysp.strtofmt.fmt u64 
    push           3          
    popptroff                 u8 1 0
    jump           #4739      
#4726: 
    setargs                   1 0
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    callfn         &toupper   i32 
    push           msysp.strtofmt.fmt u64 
    push           9          
    popptroff                 u8 1 0
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    jumpfalse      #4747      u64 
    push           &msysp.strtofmt.s 
    incr                      u64 1
#4747: 
    jump           #4739      
#4718: 
    push           65         u64 
    push           msysp.strtofmt.fmt u64 
    push           8          
    popptroff                 u8 1 0
    jump           #4739      
#4737: 
    push           97         u64 
    push           msysp.strtofmt.fmt u64 
    push           8          
    popptroff                 u8 1 0
    jump           #4739      
#4736: 
    push           48         u64 
    push           msysp.strtofmt.fmt u64 
    push           4          
    popptroff                 u8 1 0
    jump           #4739      
#4731: 
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    push           msysp.strtofmt.fmt u64 
    push           7          
    popptroff                 u8 1 0
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    jumpfalse      #4748      u64 
    push           &msysp.strtofmt.s 
    incr                      u64 1
#4748: 
    jump           #4739      
#4729: 
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    push           msysp.strtofmt.fmt u64 
    push           4          
    popptroff                 u8 1 0
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    jumpfalse      #4749      u64 
    push           &msysp.strtofmt.s 
    incr                      u64 1
#4749: 
    jump           #4739      
#4732: 
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    push           msysp.strtofmt.fmt u64 
    push           10         
    popptroff                 u8 1 0
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    jumpfalse      #4750      u64 
    push           &msysp.strtofmt.s 
    incr                      u64 1
#4750: 
    jump           #4739      
#4734: 
    push           87         u64 
    push           msysp.strtofmt.fmt u64 
    push           11         
    popptroff                 u8 1 0
    jump           #4739      
#4722: 
    push           101        u64 
    push           msysp.strtofmt.fmt u64 
    push           5          
    popptroff                 u8 1 0
    jump           #4739      
#4723: 
    push           102        u64 
    push           msysp.strtofmt.fmt u64 
    push           5          
    popptroff                 u8 1 0
    jump           #4739      
#4724: 
    push           103        u64 
    push           msysp.strtofmt.fmt u64 
    push           5          
    popptroff                 u8 1 0
    jump           #4739      
#4717: 
    push           1          i64 
    pop            msysp.strtofmt.wset u8 
    jump           #4739      
#4716: 
    push           msysp.strtofmt.c u64 
    push           msysp.strtofmt.fmt u64 
    push           7          
    popptroff                 u8 1 0
    jump           #4739      
#4715: 
    push           43         u64 
    push           msysp.strtofmt.fmt u64 
    push           6          
    popptroff                 u8 1 0
    jump           #4739      
#4721: 
    push           68         u64 
    push           msysp.strtofmt.fmt u64 
    push           12         
    popptroff                 u8 1 0
    jump           #4739      
#4720: 
    push           67         u64 
    push           msysp.strtofmt.fmt u64 
    push           12         
    popptroff                 u8 1 0
    jump           #4739      
#4727: 
    push           77         u64 
    push           msysp.strtofmt.fmt u64 
    push           13         
    popptroff                 u8 1 0
    jump           #4739      
#4733: 
    push           86         u64 
    push           msysp.strtofmt.fmt u64 
    push           14         
    popptroff                 u8 1 0
    jump           #4739      
#4714: 
    push           msysp.fmtparam i64 
    pop            msysp.strtofmt.n i64 
    jump           #4751      
    jump           #4739      
#4713: 
    push           msysp.strtofmt.c i64 
    push           48         i64 
    jumplt         #4752      i64 
    push           msysp.strtofmt.c i64 
    push           57         i64 
    jumpgt         #4752      i64 
    push           msysp.strtofmt.c i64 
    push           48         i64 
    sub                       i64 
    pop            msysp.strtofmt.n i64 
#4753: 
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    pop            msysp.strtofmt.c i64 
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    push           0          i64 
    jumpne         #4754      i64 
    jump           #4755      
#4754: 
    push           msysp.strtofmt.c i64 
    push           48         i64 
    jumplt         #4756      i64 
    push           msysp.strtofmt.c i64 
    push           57         i64 
    jumpgt         #4756      i64 
    push           &msysp.strtofmt.s 
    incr                      u64 1
    push           msysp.strtofmt.n i64 
    push           10         i64 
    mul                       i64 
    push           msysp.strtofmt.c i64 
    add                       i64 
    push           48         i64 
    sub                       i64 
    pop            msysp.strtofmt.n i64 
    jump           #4757      
#4756: 
    jump           #4755      
#4757: 
    jump           #4753      
#4755: 
!gotwidth::
#4751: 
    push           msysp.strtofmt.wset u8 
    jumptrue       #4758      i64 
    push           msysp.strtofmt.n i64 
    push           msysp.strtofmt.fmt u64 
    push           0          
    popptroff                 u8 1 0
    push           1          i64 
    pop            msysp.strtofmt.wset u8 
    jump           #4759      
#4758: 
    push           msysp.strtofmt.n i64 
    push           msysp.strtofmt.fmt u64 
    push           1          
    popptroff                 i8 1 0
#4759: 
#4752: 
#4739: 
#4710: 
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    jumptrue       #4711      u64 
#4760: 
#4708: 
    retproc                   
End


Proc msysp.domultichar: i64
    param          msysp.domultichar.p u64 
    param          msysp.domultichar.n i64 
    param          msysp.domultichar.dest u64 
    param          msysp.domultichar.fmt u64 
    local          msysp.domultichar.str block:20 
    local          msysp.domultichar.q u64 
    local          msysp.domultichar.i i64 
    local          msysp.domultichar.nchars i64 
    local          msysp.domultichar.av_1 i64 
    procentry                 
    push           &msysp.domultichar.str 
    pop            msysp.domultichar.q u64 
    push           msysp.domultichar.n i64 
    pop            msysp.domultichar.nchars i64 
#4762: 
    push           msysp.domultichar.n i64 
    pop            msysp.domultichar.av_1 i64 
    push           msysp.domultichar.av_1 i64 
    push           0          i64 
    jumple         #4763      i64 
#4764: 
    push           msysp.domultichar.p u64 
    pushptr                   u8 
    push           0          i64 
    jumpne         #4765      i64 
    jump           #4763      
#4765: 
    push           msysp.domultichar.p u64 
    pushptr                   u8 
    push           msysp.domultichar.q u64 
    popptr                    u8 
    push           &msysp.domultichar.q 
    incr                      u64 1
    push           &msysp.domultichar.p 
    incr                      u64 1
#4766: 
    to             #4764      
    opnd           msysp.domultichar.av_1 
#4763: 
    push           0          u64 
    push           msysp.domultichar.q u64 
    popptr                    u8 
    setargs                   4 0
    push           msysp.domultichar.fmt u64 
    setargs                   1 0
    push           &msysp.domultichar.str 
    callfn         &strlen    i64 
    push           msysp.domultichar.dest u64 
    push           &msysp.domultichar.str 
    callfn         &msysp.expandstr i64 
    setret                    i64 
    jump           #4767      
#4767: 
    retfn                     i64 
End


Proc msysp.expandstr: i64
    param          msysp.expandstr.s u64 
    param          msysp.expandstr.t u64 
    param          msysp.expandstr.n i64 
    param          msysp.expandstr.fmt u64 
    local          msysp.expandstr.i i64 
    local          msysp.expandstr.w i64 
    local          msysp.expandstr.m i64 
    local          msysp.expandstr.av_1 i64 
    local          msysp.expandstr.av_2 i64 
    local          msysp.expandstr.av_3 i64 
    local          msysp.expandstr.av_4 i64 
    local          msysp.expandstr.av_5 i64 
    procentry                 
    push           msysp.expandstr.fmt u64 
    pushptr                   u8 
    pop            msysp.expandstr.w i64 
    push           msysp.expandstr.w i64 
    push           0          i64 
    jumpeq         #4769      i64 
    push           msysp.expandstr.w i64 
    push           msysp.expandstr.n i64 
    jumpgt         #4770      i64 
#4769: 
    setargs                   3 0
    push           msysp.expandstr.n u64 
    push           msysp.expandstr.s u64 
    push           msysp.expandstr.t u64 
    callproc       &strncpy   
    push           0          u64 
    push           msysp.expandstr.t u64 
    push           msysp.expandstr.n i64 
    popptroff                 u8 1 0
    push           msysp.expandstr.n i64 
    setret                    i64 
    jump           #4771      
#4770: 
    push           msysp.expandstr.fmt u64 
    push           9          
    pushptroff                u8 1 0
    push           76         u64 
    jumpne         #4772      u64 
    setargs                   3 0
    push           msysp.expandstr.n u64 
    push           msysp.expandstr.s u64 
    push           msysp.expandstr.t u64 
    callproc       &strncpy   
    push           &msysp.expandstr.t 
    push           msysp.expandstr.n i64 
    addrefoffto               u64 1 0
#4773: 
    push           1          i64 
    pop            msysp.expandstr.i i64 
    push           msysp.expandstr.w i64 
    push           msysp.expandstr.n i64 
    sub                       i64 
    pop            msysp.expandstr.av_1 i64 
    push           msysp.expandstr.av_1 i64 
    push           1          i64 
    jumplt         #4774      i64 
#4775: 
    push           msysp.expandstr.fmt u64 
    push           4          
    pushptroff                u8 1 0
    push           msysp.expandstr.t u64 
    popptr                    u8 
    push           &msysp.expandstr.t 
    incr                      u64 1
#4776: 
    forup          #4775      i64 1
    opnd           msysp.expandstr.i 
    opnd           msysp.expandstr.av_1 
#4774: 
    push           0          u64 
    push           msysp.expandstr.t u64 
    popptr                    u8 
    jump           #4777      
#4772: 
    push           msysp.expandstr.fmt u64 
    push           9          
    pushptroff                u8 1 0
    push           82         u64 
    jumpne         #4778      u64 
    push           msysp.expandstr.fmt u64 
    push           4          
    pushptroff                u8 1 0
    push           48         u64 
    jumpne         #4779      u64 
    push           msysp.expandstr.fmt u64 
    push           2          
    pushptroff                u8 1 0
    jumpfalse      #4779      i64 
    push           msysp.expandstr.s u64 
    pushptr                   u8 
    push           45         u64 
    jumpeq         #4780      u64 
    push           msysp.expandstr.s u64 
    pushptr                   u8 
    push           43         u64 
    jumpne         #4779      u64 
#4780: 
    push           msysp.expandstr.s u64 
    pushptr                   u8 
    push           msysp.expandstr.t u64 
    popptr                    u8 
    push           &msysp.expandstr.t 
    incr                      u64 1
#4781: 
    push           msysp.expandstr.w i64 
    push           msysp.expandstr.n i64 
    sub                       i64 
    pop            msysp.expandstr.av_2 i64 
    push           msysp.expandstr.av_2 i64 
    push           0          i64 
    jumple         #4782      i64 
#4783: 
    push           msysp.expandstr.fmt u64 
    push           4          
    pushptroff                u8 1 0
    push           msysp.expandstr.t u64 
    popptr                    u8 
    push           &msysp.expandstr.t 
    incr                      u64 1
#4784: 
    to             #4783      
    opnd           msysp.expandstr.av_2 
#4782: 
    setargs                   3 0
    push           msysp.expandstr.n i64 
    push           1          i64 
    sub                       u64 
    push           msysp.expandstr.s u64 
    push           1          i64 
    addrefoff                 u64 1 0
    push           msysp.expandstr.t u64 
    callproc       &strncpy   
    push           0          u64 
    push           msysp.expandstr.t u64 
    push           msysp.expandstr.n i64 
    popptroff                 u8 1 -1
    jump           #4785      
#4779: 
#4786: 
    push           msysp.expandstr.w i64 
    push           msysp.expandstr.n i64 
    sub                       i64 
    pop            msysp.expandstr.av_3 i64 
    push           msysp.expandstr.av_3 i64 
    push           0          i64 
    jumple         #4787      i64 
#4788: 
    push           msysp.expandstr.fmt u64 
    push           4          
    pushptroff                u8 1 0
    push           msysp.expandstr.t u64 
    popptr                    u8 
    push           &msysp.expandstr.t 
    incr                      u64 1
#4789: 
    to             #4788      
    opnd           msysp.expandstr.av_3 
#4787: 
    setargs                   3 0
    push           msysp.expandstr.n u64 
    push           msysp.expandstr.s u64 
    push           msysp.expandstr.t u64 
    callproc       &strncpy   
    push           0          u64 
    push           msysp.expandstr.t u64 
    push           msysp.expandstr.n i64 
    popptroff                 u8 1 0
#4785: 
    jump           #4777      
#4778: 
    push           msysp.expandstr.w i64 
    push           msysp.expandstr.n i64 
    sub                       i64 
    push           1          i64 
    add                       i64 
    push           2          i64 
    idiv                      i64 
    pop            msysp.expandstr.m i64 
#4790: 
    push           msysp.expandstr.m i64 
    pop            msysp.expandstr.av_4 i64 
    push           msysp.expandstr.av_4 i64 
    push           0          i64 
    jumple         #4791      i64 
#4792: 
    push           msysp.expandstr.fmt u64 
    push           4          
    pushptroff                u8 1 0
    push           msysp.expandstr.t u64 
    popptr                    u8 
    push           &msysp.expandstr.t 
    incr                      u64 1
#4793: 
    to             #4792      
    opnd           msysp.expandstr.av_4 
#4791: 
    setargs                   3 0
    push           msysp.expandstr.n u64 
    push           msysp.expandstr.s u64 
    push           msysp.expandstr.t u64 
    callproc       &strncpy   
    push           &msysp.expandstr.t 
    push           msysp.expandstr.n i64 
    addrefoffto               u64 1 0
#4794: 
    push           msysp.expandstr.w i64 
    push           msysp.expandstr.n i64 
    sub                       i64 
    push           msysp.expandstr.m i64 
    sub                       i64 
    pop            msysp.expandstr.av_5 i64 
    push           msysp.expandstr.av_5 i64 
    push           0          i64 
    jumple         #4795      i64 
#4796: 
    push           msysp.expandstr.fmt u64 
    push           4          
    pushptroff                u8 1 0
    push           msysp.expandstr.t u64 
    popptr                    u8 
    push           &msysp.expandstr.t 
    incr                      u64 1
#4797: 
    to             #4796      
    opnd           msysp.expandstr.av_5 
#4795: 
    push           0          u64 
    push           msysp.expandstr.t u64 
    popptr                    u8 
#4777: 
    push           msysp.expandstr.w i64 
    setret                    i64 
    jump           #4771      
#4771: 
    retfn                     i64 
End


Proc msysp.u64tostr: i64
    param          msysp.u64tostr.aa u64 
    param          msysp.u64tostr.s u64 
    param          msysp.u64tostr.base u64 
    param          msysp.u64tostr.sep i64 
    local          msysp.u64tostr.t block:360 
    local          msysp.u64tostr.dd u64 
    local          msysp.u64tostr.i i64 
    local          msysp.u64tostr.j i64 
    local          msysp.u64tostr.k i64 
    local          msysp.u64tostr.g i64 
    local          msysp.u64tostr.cc i64 
    local          msysp.u64tostr.dummy i64 
    local          msysp.u64tostr.s0 u64 
    procentry                 
    push           0          i64 
    pop            msysp.u64tostr.i i64 
    push           0          i64 
    pop            msysp.u64tostr.k i64 
    startmult                 
    push           msysp.u64tostr.base i64 
    push           10         i64 
    jumpne         #4799      i64 
    push           3          i64 
    resetmult                 
    jump           #4800      
#4799: 
    push           4          i64 
    endmult                   
#4800: 
    pop            msysp.u64tostr.g i64 
#4801: 
    push           msysp.u64tostr.aa u64 
    push           msysp.u64tostr.base u64 
    irem                      u64 
    pop            msysp.u64tostr.dd u64 
    push           msysp.u64tostr.aa u64 
    push           msysp.u64tostr.base u64 
    idiv                      u64 
    pop            msysp.u64tostr.aa u64 
    push           &msysp.digits 
    push           msysp.u64tostr.dd i64 
    pushptroff                u8 1 0
    push           &msysp.u64tostr.t 
    push           &msysp.u64tostr.i 
    incrload                  i64 1
    popptroff                 u8 1 0
    push           &msysp.u64tostr.k 
    incr                      i64 1
    push           msysp.u64tostr.sep i64 
    jumpfalse      #4802      i64 
    push           msysp.u64tostr.aa i64 
    push           0          i64 
    jumpeq         #4802      i64 
    push           msysp.u64tostr.k i64 
    push           msysp.u64tostr.g i64 
    jumpne         #4802      i64 
    push           msysp.u64tostr.sep u64 
    push           &msysp.u64tostr.t 
    push           &msysp.u64tostr.i 
    incrload                  i64 1
    popptroff                 u8 1 0
    push           0          i64 
    pop            msysp.u64tostr.k i64 
#4802: 
#4803: 
    push           msysp.u64tostr.aa i64 
    push           0          i64 
    jumpne         #4801      i64 
#4804: 
    push           msysp.u64tostr.i i64 
    pop            msysp.u64tostr.j i64 
    push           msysp.u64tostr.s u64 
    pop            msysp.u64tostr.s0 u64 
    jump           #4805      
#4806: 
    push           &msysp.u64tostr.t 
    push           &msysp.u64tostr.i 
    loaddecr                  i64 1
    pushptroff                u8 1 0
    push           msysp.u64tostr.s u64 
    popptr                    u8 
    push           &msysp.u64tostr.s 
    incr                      u64 1
#4805: 
    push           msysp.u64tostr.i i64 
    jumptrue       #4806      i64 
#4807: 
    push           0          u64 
    push           msysp.u64tostr.s u64 
    popptr                    u8 
    push           msysp.u64tostr.j i64 
    setret                    i64 
    jump           #4808      
#4808: 
    retfn                     i64 
End


Proc msysp.u128tostr: i64
    param          msysp.u128tostr.aa u128 
    param          msysp.u128tostr.s u64 
    param          msysp.u128tostr.base u64 
    param          msysp.u128tostr.sep i64 
    local          msysp.u128tostr.t block:160 
    local          msysp.u128tostr.dd u64 
    local          msysp.u128tostr.i i64 
    local          msysp.u128tostr.j i64 
    local          msysp.u128tostr.k i64 
    local          msysp.u128tostr.g i64 
    local          msysp.u128tostr.dummy i64 
    local          msysp.u128tostr.s0 u64 
    procentry                 
    push           0          i64 
    pop            msysp.u128tostr.i i64 
    push           0          i64 
    pop            msysp.u128tostr.k i64 
    startmult                 
    push           msysp.u128tostr.base i64 
    push           10         i64 
    jumpne         #4810      i64 
    push           3          i64 
    resetmult                 
    jump           #4811      
#4810: 
    push           4          i64 
    endmult                   
#4811: 
    pop            msysp.u128tostr.g i64 
#4812: 
    setargs                   4 0
    push           &msysp.u128tostr.dd 
    push           msysp.u128tostr.base u64 
    push           msysp.u128tostr.aa u128 
    callfn         &msysp.xdivrem128 u128 
    pop            msysp.u128tostr.aa u128 
    push           &msysp.digits 
    push           msysp.u128tostr.dd i64 
    pushptroff                u8 1 0
    push           &msysp.u128tostr.t 
    push           &msysp.u128tostr.i 
    incrload                  i64 1
    popptroff                 u8 1 0
    push           &msysp.u128tostr.k 
    incr                      i64 1
    push           msysp.u128tostr.sep i64 
    jumpfalse      #4813      i64 
    push           msysp.u128tostr.aa u128 
    push           0          i64 
    widenw                    u128 i64 
    jumpeq         #4813      u128 
    push           msysp.u128tostr.k i64 
    push           msysp.u128tostr.g i64 
    jumpne         #4813      i64 
    push           msysp.u128tostr.sep u64 
    push           &msysp.u128tostr.t 
    push           &msysp.u128tostr.i 
    incrload                  i64 1
    popptroff                 u8 1 0
    push           0          i64 
    pop            msysp.u128tostr.k i64 
#4813: 
#4814: 
    push           msysp.u128tostr.aa u128 
    push           0          i64 
    widenw                    u128 i64 
    jumpne         #4812      u128 
#4815: 
    push           msysp.u128tostr.i i64 
    pop            msysp.u128tostr.j i64 
    push           msysp.u128tostr.s u64 
    pop            msysp.u128tostr.s0 u64 
    jump           #4816      
#4817: 
    push           &msysp.u128tostr.t 
    push           &msysp.u128tostr.i 
    loaddecr                  i64 1
    pushptroff                u8 1 0
    push           msysp.u128tostr.s u64 
    popptr                    u8 
    push           &msysp.u128tostr.s 
    incr                      u64 1
#4816: 
    push           msysp.u128tostr.i i64 
    jumptrue       #4817      i64 
#4818: 
    push           0          u64 
    push           msysp.u128tostr.s u64 
    popptr                    u8 
    push           msysp.u128tostr.j i64 
    setret                    i64 
    jump           #4819      
#4819: 
    retfn                     i64 
End


Proc msysp.xdivrem128: u128
    param          msysp.xdivrem128.a u128 
    param          msysp.xdivrem128.b u64 
    param          msysp.xdivrem128.remainder u64 
    local          msysp.xdivrem128.d u128 
    local          msysp.xdivrem128.e u128 
    local          msysp.xdivrem128.r u128 
    local          msysp.xdivrem128.rlow u64 
    local          msysp.xdivrem128.dlow u64 
    local          msysp.xdivrem128.p u64 
    local          msysp.xdivrem128.q u64 
    procentry                 
    push           &msysp.xdivrem128.d 
    pop            msysp.xdivrem128.p u64 
    push           &msysp.xdivrem128.d 
    pop            msysp.xdivrem128.q u64 
    push           msysp.xdivrem128.a u128 
    push           msysp.xdivrem128.b u64 
    widenw                    u128 u64 
    idiv                      u128 
    pop            msysp.xdivrem128.d u128 
    push           msysp.xdivrem128.a u128 
    push           msysp.xdivrem128.d u128 
    push           msysp.xdivrem128.b u64 
    widenw                    u128 u64 
    mul                       u128 
    sub                       u128 
    pop            msysp.xdivrem128.r u128 
    push           msysp.xdivrem128.r u128 
    softtruncw                u64 u128 
    pop            msysp.xdivrem128.rlow u64 
    push           msysp.xdivrem128.d u128 
    softtruncw                u64 u128 
    pop            msysp.xdivrem128.dlow u64 
    push           msysp.xdivrem128.rlow u64 
    push           msysp.xdivrem128.remainder u64 
    popptr                    u64 
    push           msysp.xdivrem128.d u128 
    setretmult                u128 2
    jump           #4821      
#4821: 
    retfn                     u128 
End


Proc msysp.i64tostrfmt: i64
    param          msysp.i64tostrfmt.aa i64 
    param          msysp.i64tostrfmt.s u64 
    param          msysp.i64tostrfmt.fmt u64 
    local          msysp.i64tostrfmt.str block:360 
    local          msysp.i64tostrfmt.i i64 
    local          msysp.i64tostrfmt.j i64 
    local          msysp.i64tostrfmt.k i64 
    local          msysp.i64tostrfmt.n i64 
    local          msysp.i64tostrfmt.w i64 
    local          msysp.i64tostrfmt.usigned i64 
    procentry                 
    push           0          i64 
    pop            msysp.i64tostrfmt.usigned i64 
    push           msysp.i64tostrfmt.fmt u64 
    push           11         
    pushptroff                u8 1 0
    jumpfalse      #4823      u64 
    push           1          i64 
    pop            msysp.i64tostrfmt.usigned i64 
#4823: 
    push           msysp.i64tostrfmt.aa i64 
    push           -9223372036854775808 i64 
    jumpne         #4824      i64 
    push           msysp.i64tostrfmt.usigned i64 
    jumptrue       #4824      i64 
    push           45         u64 
    push           &msysp.i64tostrfmt.str 
    push           0          i64 
    popptroff                 u8 1 0
    setargs                   3 0
    push           msysp.i64tostrfmt.fmt u64 
    push           7          
    pushptroff                u8 1 0
    push           msysp.i64tostrfmt.fmt u64 
    push           2          
    pushptroff                u8 1 0
    push           &msysp.i64tostrfmt.str 
    push           1          
    addrefoff                 u8 1 0
    callfn         &msysp.i64mintostr i64 
    push           1          i64 
    add                       i64 
    pop            msysp.i64tostrfmt.n i64 
    jump           #4825      
#4824: 
    push           msysp.i64tostrfmt.usigned i64 
    jumptrue       #4826      i64 
    push           msysp.i64tostrfmt.aa i64 
    push           0          i64 
    jumplt         #4827      i64 
#4826: 
    push           msysp.i64tostrfmt.fmt u64 
    push           6          
    pushptroff                u8 1 0
    jumpfalse      #4828      u64 
#4827: 
    push           msysp.i64tostrfmt.aa i64 
    push           0          i64 
    jumpge         #4829      i64 
    push           msysp.i64tostrfmt.aa i64 
    neg                       i64 
    pop            msysp.i64tostrfmt.aa i64 
    push           45         u64 
    push           &msysp.i64tostrfmt.str 
    push           0          i64 
    popptroff                 u8 1 0
    jump           #4830      
#4829: 
    push           43         u64 
    push           &msysp.i64tostrfmt.str 
    push           0          i64 
    popptroff                 u8 1 0
#4830: 
    setargs                   4 0
    push           msysp.i64tostrfmt.fmt u64 
    push           7          
    pushptroff                u8 1 0
    push           msysp.i64tostrfmt.fmt u64 
    push           2          
    pushptroff                u8 1 0
    push           &msysp.i64tostrfmt.str 
    push           1          
    addrefoff                 u8 1 0
    push           msysp.i64tostrfmt.aa u64 
    callfn         &msysp.u64tostr i64 
    push           1          i64 
    add                       i64 
    pop            msysp.i64tostrfmt.n i64 
    jump           #4831      
#4828: 
    setargs                   4 0
    push           msysp.i64tostrfmt.fmt u64 
    push           7          
    pushptroff                u8 1 0
    push           msysp.i64tostrfmt.fmt u64 
    push           2          
    pushptroff                u8 1 0
    push           &msysp.i64tostrfmt.str 
    push           msysp.i64tostrfmt.aa u64 
    callfn         &msysp.u64tostr i64 
    pop            msysp.i64tostrfmt.n i64 
#4831: 
#4825: 
    push           msysp.i64tostrfmt.fmt u64 
    push           10         
    pushptroff                u8 1 0
    jumpfalse      #4832      u64 
    push           msysp.i64tostrfmt.fmt u64 
    push           10         
    pushptroff                u8 1 0
    push           &msysp.i64tostrfmt.str 
    push           msysp.i64tostrfmt.n i64 
    popptroff                 u8 1 0
    push           0          u64 
    push           &msysp.i64tostrfmt.str 
    push           &msysp.i64tostrfmt.n 
    incrload                  i64 1
    popptroff                 u8 1 0
#4832: 
    push           msysp.i64tostrfmt.fmt u64 
    push           2          
    pushptroff                u8 1 0
    push           10         i64 
    jumpgt         #4833      i64 
    push           msysp.i64tostrfmt.fmt u64 
    push           10         
    pushptroff                u8 1 0
    jumpfalse      #4834      u64 
#4833: 
    push           msysp.i64tostrfmt.fmt u64 
    push           8          
    pushptroff                u8 1 0
    push           97         u64 
    jumpne         #4834      u64 
    setargs                   1 0
    push           &msysp.i64tostrfmt.str 
    callproc       &mlibp.convlcstring 
#4834: 
    setargs                   4 0
    push           msysp.i64tostrfmt.fmt u64 
    push           msysp.i64tostrfmt.n i64 
    push           msysp.i64tostrfmt.s u64 
    push           &msysp.i64tostrfmt.str 
    callfn         &msysp.expandstr i64 
    setret                    i64 
    jump           #4835      
#4835: 
    retfn                     i64 
End


Proc msysp.u64tostrfmt: i64
    param          msysp.u64tostrfmt.aa i64 
    param          msysp.u64tostrfmt.s u64 
    param          msysp.u64tostrfmt.fmt u64 
    local          msysp.u64tostrfmt.str block:360 
    local          msysp.u64tostrfmt.i i64 
    local          msysp.u64tostrfmt.j i64 
    local          msysp.u64tostrfmt.k i64 
    local          msysp.u64tostrfmt.n i64 
    local          msysp.u64tostrfmt.w i64 
    procentry                 
    setargs                   4 0
    push           msysp.u64tostrfmt.fmt u64 
    push           7          
    pushptroff                u8 1 0
    push           msysp.u64tostrfmt.fmt u64 
    push           2          
    pushptroff                u8 1 0
    push           &msysp.u64tostrfmt.str 
    push           msysp.u64tostrfmt.aa u64 
    callfn         &msysp.u64tostr i64 
    pop            msysp.u64tostrfmt.n i64 
    push           msysp.u64tostrfmt.fmt u64 
    push           10         
    pushptroff                u8 1 0
    jumpfalse      #4837      u64 
    push           msysp.u64tostrfmt.fmt u64 
    push           10         
    pushptroff                u8 1 0
    push           &msysp.u64tostrfmt.str 
    push           msysp.u64tostrfmt.n i64 
    popptroff                 u8 1 0
    push           0          u64 
    push           &msysp.u64tostrfmt.str 
    push           &msysp.u64tostrfmt.n 
    incrload                  i64 1
    popptroff                 u8 1 0
#4837: 
    push           msysp.u64tostrfmt.fmt u64 
    push           2          
    pushptroff                u8 1 0
    push           10         i64 
    jumpgt         #4838      i64 
    push           msysp.u64tostrfmt.fmt u64 
    push           10         
    pushptroff                u8 1 0
    jumpfalse      #4839      u64 
    push           msysp.u64tostrfmt.fmt u64 
    push           8          
    pushptroff                u8 1 0
    push           97         u64 
    jumpne         #4839      u64 
#4838: 
#4839: 
    setargs                   4 0
    push           msysp.u64tostrfmt.fmt u64 
    push           msysp.u64tostrfmt.n i64 
    push           msysp.u64tostrfmt.s u64 
    push           &msysp.u64tostrfmt.str 
    callfn         &msysp.expandstr i64 
    setret                    i64 
    jump           #4840      
#4840: 
    retfn                     i64 
End


Proc msysp.u128tostrfmt: i64
    param          msysp.u128tostrfmt.aa i128 
    param          msysp.u128tostrfmt.s u64 
    param          msysp.u128tostrfmt.fmt u64 
    local          msysp.u128tostrfmt.str block:360 
    local          msysp.u128tostrfmt.i i64 
    local          msysp.u128tostrfmt.j i64 
    local          msysp.u128tostrfmt.k i64 
    local          msysp.u128tostrfmt.n i64 
    local          msysp.u128tostrfmt.w i64 
    procentry                 
    setargs                   5 0
    push           msysp.u128tostrfmt.fmt u64 
    push           7          
    pushptroff                u8 1 0
    push           msysp.u128tostrfmt.fmt u64 
    push           2          
    pushptroff                u8 1 0
    push           &msysp.u128tostrfmt.str 
    push           msysp.u128tostrfmt.aa u128 
    callfn         &msysp.u128tostr i64 
    pop            msysp.u128tostrfmt.n i64 
    push           msysp.u128tostrfmt.fmt u64 
    push           10         
    pushptroff                u8 1 0
    jumpfalse      #4842      u64 
    push           msysp.u128tostrfmt.fmt u64 
    push           10         
    pushptroff                u8 1 0
    push           &msysp.u128tostrfmt.str 
    push           msysp.u128tostrfmt.n i64 
    popptroff                 u8 1 0
    push           0          u64 
    push           &msysp.u128tostrfmt.str 
    push           &msysp.u128tostrfmt.n 
    incrload                  i64 1
    popptroff                 u8 1 0
#4842: 
    push           msysp.u128tostrfmt.fmt u64 
    push           2          
    pushptroff                u8 1 0
    push           10         i64 
    jumpgt         #4843      i64 
    push           msysp.u128tostrfmt.fmt u64 
    push           10         
    pushptroff                u8 1 0
    jumpfalse      #4844      u64 
    push           msysp.u128tostrfmt.fmt u64 
    push           8          
    pushptroff                u8 1 0
    push           97         u64 
    jumpne         #4844      u64 
#4843: 
    setargs                   1 0
    push           &msysp.u128tostrfmt.str 
    callproc       &mlibp.convlcstring 
#4844: 
    setargs                   4 0
    push           msysp.u128tostrfmt.fmt u64 
    push           msysp.u128tostrfmt.n i64 
    push           msysp.u128tostrfmt.s u64 
    push           &msysp.u128tostrfmt.str 
    callfn         &msysp.expandstr i64 
    setret                    i64 
    jump           #4845      
#4845: 
    retfn                     i64 
End


Proc msysp.i64mintostr: i64
    param          msysp.i64mintostr.s u64 
    param          msysp.i64mintostr.base i64 
    param          msysp.i64mintostr.sep i64 
    local          msysp.i64mintostr.t block:360 
    local          msysp.i64mintostr.i i64 
    local          msysp.i64mintostr.j i64 
    local          msysp.i64mintostr.k i64 
    local          msysp.i64mintostr.g i64 
    local          msysp.i64mintostr.neg i64 
    procentry                 
    push           msysp.i64mintostr.base i64 
    switch         #4847      2 16
    opnd           #4848      
#4847: 
    switchlabel    #4849      
    switchlabel    #4848      
    switchlabel    #4848      
    switchlabel    #4848      
    switchlabel    #4848      
    switchlabel    #4848      
    switchlabel    #4848      
    switchlabel    #4848      
    switchlabel    #4850      
    switchlabel    #4848      
    switchlabel    #4848      
    switchlabel    #4848      
    switchlabel    #4848      
    switchlabel    #4848      
    switchlabel    #4851      
    endswitch                 
#4850: 
    setargs                   2 0
    push           "9223372036854775808" u64 
    push           &msysp.i64mintostr.t 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcpy    
    push           3          i64 
    pop            msysp.i64mintostr.j i64 
    jump           #4852      
#4851: 
    setargs                   2 0
    push           "8000000000000000" u64 
    push           &msysp.i64mintostr.t 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcpy    
    push           1          i64 
    pop            msysp.i64mintostr.j i64 
    jump           #4852      
#4849: 
    setargs                   2 0
    push           "1000000000000000000000000000000000000000000000000000000000000000" u64 
    push           &msysp.i64mintostr.t 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcpy    
    push           7          i64 
    pop            msysp.i64mintostr.j i64 
    jump           #4852      
#4848: 
    setargs                   2 0
    push           "<mindint>" u64 
    push           &msysp.i64mintostr.t 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcpy    
#4852: 
    setargs                   1 0
    push           &msysp.i64mintostr.t 
    push           0          
    addrefoff                 u8 1 0
    callfn         &strlen    i64 
    pop            msysp.i64mintostr.i i64 
    push           &msysp.i64mintostr.s 
    push           msysp.i64mintostr.i i64 
    addrefoffto               u64 1 0
    push           msysp.i64mintostr.sep i64 
    jumpfalse      #4853      i64 
    push           &msysp.i64mintostr.s 
    push           msysp.i64mintostr.j i64 
    addrefoffto               u64 1 0
#4853: 
    push           0          u64 
    push           msysp.i64mintostr.s u64 
    popptr                    u8 
    push           0          i64 
    pop            msysp.i64mintostr.k i64 
    startmult                 
    push           msysp.i64mintostr.base i64 
    push           10         i64 
    jumpne         #4854      i64 
    push           3          i64 
    resetmult                 
    jump           #4855      
#4854: 
    push           4          i64 
    endmult                   
#4855: 
    pop            msysp.i64mintostr.g i64 
    jump           #4856      
#4857: 
    push           &msysp.i64mintostr.s 
    decr                      u64 1
    push           &msysp.i64mintostr.t 
    push           &msysp.i64mintostr.i 
    loaddecr                  i64 1
    pushptroff                u8 1 -1
    push           msysp.i64mintostr.s u64 
    popptr                    u8 
    push           msysp.i64mintostr.sep i64 
    jumpfalse      #4858      i64 
    push           msysp.i64mintostr.i i64 
    jumpfalse      #4858      i64 
    push           &msysp.i64mintostr.k 
    incrload                  i64 1
    push           msysp.i64mintostr.g i64 
    jumpne         #4858      i64 
    push           &msysp.i64mintostr.s 
    decr                      u64 1
    push           msysp.i64mintostr.sep u64 
    push           msysp.i64mintostr.s u64 
    popptr                    u8 
    push           0          i64 
    pop            msysp.i64mintostr.k i64 
#4858: 
#4856: 
    push           msysp.i64mintostr.i i64 
    jumptrue       #4857      i64 
#4859: 
    setargs                   1 0
    push           msysp.i64mintostr.s u64 
    callfn         &strlen    i64 
    setret                    i64 
    jump           #4860      
#4860: 
    retfn                     i64 
End


Proc msysp.strtostrfmt: i64
    param          msysp.strtostrfmt.s u64 
    param          msysp.strtostrfmt.t u64 
    param          msysp.strtostrfmt.n i64 
    param          msysp.strtostrfmt.fmt u64 
    local          msysp.strtostrfmt.u u64 
    local          msysp.strtostrfmt.v u64 
    local          msysp.strtostrfmt.str block:256 
    local          msysp.strtostrfmt.w i64 
    local          msysp.strtostrfmt.nheap i64 
    procentry                 
    push           0          i64 
    pop            msysp.strtostrfmt.nheap i64 
    push           msysp.strtostrfmt.fmt u64 
    push           3          
    pushptroff                u8 1 0
    jumptrue       #4862      u64 
    push           msysp.strtostrfmt.fmt u64 
    push           8          
    pushptroff                u8 1 0
    jumpfalse      #4863      u64 
#4862: 
    push           msysp.strtostrfmt.n i64 
    push           256        i64 
    jumpge         #4864      i64 
    push           &msysp.strtostrfmt.str 
    pop            msysp.strtostrfmt.u u64 
    jump           #4865      
#4864: 
    push           msysp.strtostrfmt.n i64 
    push           3          i64 
    add                       i64 
    pop            msysp.strtostrfmt.nheap i64 
    setargs                   1 0
    push           msysp.strtostrfmt.nheap i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            msysp.strtostrfmt.u u64 
#4865: 
    push           msysp.strtostrfmt.fmt u64 
    push           3          
    pushptroff                u8 1 0
    jumpfalse      #4866      u64 
    push           msysp.strtostrfmt.u u64 
    pop            msysp.strtostrfmt.v u64 
    push           msysp.strtostrfmt.fmt u64 
    push           3          
    pushptroff                u8 1 0
    push           msysp.strtostrfmt.v u64 
    popptr                    u8 
    push           &msysp.strtostrfmt.v 
    incr                      u64 1
    push           msysp.strtostrfmt.n i64 
    jumpfalse      #4867      i64 
    setargs                   2 0
    push           msysp.strtostrfmt.s u64 
    push           msysp.strtostrfmt.v u64 
    callproc       &strcpy    
    push           &msysp.strtostrfmt.v 
    push           msysp.strtostrfmt.n i64 
    addrefoffto               u64 1 0
#4867: 
    push           msysp.strtostrfmt.fmt u64 
    push           3          
    pushptroff                u8 1 0
    push           msysp.strtostrfmt.v u64 
    popptr                    u8 
    push           &msysp.strtostrfmt.v 
    incr                      u64 1
    push           0          u64 
    push           msysp.strtostrfmt.v u64 
    popptr                    u8 
    push           &msysp.strtostrfmt.n 
    push           2          i64 
    addto                     i64 
    jump           #4868      
#4866: 
    setargs                   3 0
    push           msysp.strtostrfmt.n u64 
    push           msysp.strtostrfmt.s u64 
    push           msysp.strtostrfmt.u u64 
    callproc       &memcpy    
#4868: 
    push           msysp.strtostrfmt.fmt u64 
    push           8          
    pushptroff                u8 1 0
    switch         #4869      65 97
    opnd           #4870      
#4869: 
    switchlabel    #4871      
    switchlabel    #4870      
    switchlabel    #4870      
    switchlabel    #4870      
    switchlabel    #4870      
    switchlabel    #4870      
    switchlabel    #4870      
    switchlabel    #4870      
    switchlabel    #4870      
    switchlabel    #4870      
    switchlabel    #4870      
    switchlabel    #4870      
    switchlabel    #4870      
    switchlabel    #4870      
    switchlabel    #4870      
    switchlabel    #4870      
    switchlabel    #4870      
    switchlabel    #4870      
    switchlabel    #4870      
    switchlabel    #4870      
    switchlabel    #4870      
    switchlabel    #4870      
    switchlabel    #4870      
    switchlabel    #4870      
    switchlabel    #4870      
    switchlabel    #4870      
    switchlabel    #4870      
    switchlabel    #4870      
    switchlabel    #4870      
    switchlabel    #4870      
    switchlabel    #4870      
    switchlabel    #4870      
    switchlabel    #4872      
    endswitch                 
#4872: 
    setargs                   1 0
    push           msysp.strtostrfmt.u u64 
    callproc       &mlibp.convlcstring 
    jump           #4873      
#4871: 
    setargs                   1 0
    push           msysp.strtostrfmt.u u64 
    callproc       &mlibp.convucstring 
    jump           #4873      
#4870: 
#4873: 
    push           msysp.strtostrfmt.u u64 
    pop            msysp.strtostrfmt.s u64 
#4863: 
    push           msysp.strtostrfmt.fmt u64 
    pushptr                   u8 
    pop            msysp.strtostrfmt.w i64 
    push           msysp.strtostrfmt.w i64 
    push           msysp.strtostrfmt.n i64 
    jumple         #4874      i64 
    setargs                   4 0
    push           msysp.strtostrfmt.fmt u64 
    push           msysp.strtostrfmt.n i64 
    push           msysp.strtostrfmt.t u64 
    push           msysp.strtostrfmt.s u64 
    callfn         &msysp.expandstr i64 
    pop            msysp.strtostrfmt.n i64 
    jump           #4875      
#4874: 
    setargs                   3 0
    push           msysp.strtostrfmt.n u64 
    push           msysp.strtostrfmt.s u64 
    push           msysp.strtostrfmt.t u64 
    callproc       &memcpy    
#4875: 
    push           msysp.strtostrfmt.nheap i64 
    jumpfalse      #4876      i64 
    setargs                   2 0
    push           msysp.strtostrfmt.nheap i64 
    push           msysp.strtostrfmt.u u64 
    callproc       &mlibp.pcm_free 
#4876: 
    push           msysp.strtostrfmt.n i64 
    setret                    i64 
    jump           #4877      
#4877: 
    retfn                     i64 
End


Proc msysp.tostr_i64:
    param          msysp.tostr_i64.a i64 
    param          msysp.tostr_i64.fmt u64 
    local          msysp.tostr_i64.str block:360 
    local          msysp.tostr_i64.n i64 
    procentry                 
    push           msysp.tostr_i64.fmt u64 
    push           12         
    pushptroff                u8 1 0
    push           0          u64 
    casejumpeq     #4879      u64 0
    push           68         u64 
    casejumpeq     #4880      u64 0
    push           100        u64 
    casejumpeq     #4880      u64 0
    popstack                  u64 
    jump           #4881      
#4879: 
    setargs                   3 0
    push           msysp.tostr_i64.fmt u64 
    push           &msysp.tostr_i64.str 
    push           msysp.tostr_i64.a i64 
    callfn         &msysp.i64tostrfmt i64 
    pop            msysp.tostr_i64.n i64 
    jump           #4882      
#4880: 
    setargs                   4 0
    push           msysp.tostr_i64.fmt u64 
    push           &msysp.tostr_i64.str 
    push           8          i64 
    push           &msysp.tostr_i64.a 
    callfn         &msysp.domultichar i64 
    pop            msysp.tostr_i64.n i64 
    jump           #4882      
#4881: 
    setargs                   1 0
    push           msysp.tostr_i64.a i64 
    callproc       &msysp.printchar 
    jump           #4883      
#4882: 
    setargs                   2 0
    push           msysp.tostr_i64.n i64 
    push           &msysp.tostr_i64.str 
    callproc       &msysp.printstr_n 
#4883: 
    retproc                   
End


Proc msysp.tostr_u64:
    param          msysp.tostr_u64.a u64 
    param          msysp.tostr_u64.fmt u64 
    local          msysp.tostr_u64.str block:360 
    local          msysp.tostr_u64.n i64 
    procentry                 
    push           msysp.tostr_u64.fmt u64 
    push           12         
    pushptroff                u8 1 0
    push           68         u64 
    casejumpeq     #4885      u64 0
    push           100        u64 
    casejumpeq     #4885      u64 0
    push           67         u64 
    casejumpeq     #4886      u64 0
    push           99         u64 
    casejumpeq     #4886      u64 0
    popstack                  u64 
    jump           #4887      
#4885: 
    setargs                   4 0
    push           msysp.tostr_u64.fmt u64 
    push           &msysp.tostr_u64.str 
    push           8          i64 
    push           &msysp.tostr_u64.a 
    callfn         &msysp.domultichar i64 
    pop            msysp.tostr_u64.n i64 
    jump           #4888      
#4886: 
    setargs                   1 0
    push           msysp.tostr_u64.a i64 
    callproc       &msysp.printchar 
    jump           #4889      
    jump           #4888      
#4887: 
    setargs                   3 0
    push           msysp.tostr_u64.fmt u64 
    push           &msysp.tostr_u64.str 
    push           msysp.tostr_u64.a i64 
    callfn         &msysp.u64tostrfmt i64 
    pop            msysp.tostr_u64.n i64 
#4888: 
    setargs                   2 0
    push           msysp.tostr_u64.n i64 
    push           &msysp.tostr_u64.str 
    callproc       &msysp.printstr_n 
#4889: 
    retproc                   
End


Proc msysp.tostr_u128:
    param          msysp.tostr_u128.a u128 
    param          msysp.tostr_u128.fmt u64 
    param          msysp.tostr_u128.neg i64 
    local          msysp.tostr_u128.str block:360 
    local          msysp.tostr_u128.n i64 
    procentry                 
    push           msysp.tostr_u128.fmt u64 
    push           12         
    pushptroff                u8 1 0
    push           68         u64 
    casejumpeq     #4891      u64 0
    push           100        u64 
    casejumpeq     #4891      u64 0
    push           67         u64 
    casejumpeq     #4892      u64 0
    push           99         u64 
    casejumpeq     #4892      u64 0
    popstack                  u64 
    jump           #4893      
#4891: 
    setargs                   4 0
    push           msysp.tostr_u128.fmt u64 
    push           &msysp.tostr_u128.str 
    push           8          i64 
    push           &msysp.tostr_u128.a 
    callfn         &msysp.domultichar i64 
    pop            msysp.tostr_u128.n i64 
    jump           #4894      
#4892: 
    setargs                   1 0
    push           msysp.tostr_u128.a u128 
    softtruncw                i64 u128 
    callproc       &msysp.printchar 
    jump           #4895      
    jump           #4894      
#4893: 
    push           msysp.tostr_u128.neg i64 
    jumpfalse      #4896      i64 
    push           45         u64 
    push           &msysp.tostr_u128.str 
    push           1          i64 
    popptroff                 u8 1 -1
    setargs                   4 0
    push           msysp.tostr_u128.fmt u64 
    push           &msysp.tostr_u128.str 
    push           1          
    addrefoff                 u8 1 0
    push           msysp.tostr_u128.a i128 
    callfn         &msysp.u128tostrfmt i64 
    push           1          i64 
    add                       i64 
    pop            msysp.tostr_u128.n i64 
    jump           #4897      
#4896: 
    setargs                   4 0
    push           msysp.tostr_u128.fmt u64 
    push           &msysp.tostr_u128.str 
    push           msysp.tostr_u128.a i128 
    callfn         &msysp.u128tostrfmt i64 
    pop            msysp.tostr_u128.n i64 
#4897: 
#4894: 
    setargs                   2 0
    push           msysp.tostr_u128.n i64 
    push           &msysp.tostr_u128.str 
    callproc       &msysp.printstr_n 
#4895: 
    retproc                   
End


Proc msysp.tostr_r64:
    param          msysp.tostr_r64.x r64 
    param          msysp.tostr_r64.fmt u64 
    local          msysp.tostr_r64.str block:360 
    local          msysp.tostr_r64.str2 block:360 
    local          msysp.tostr_r64.cfmt block:10 
    local          msysp.tostr_r64.n i64 
    procentry                 
    push           37         u64 
    push           &msysp.tostr_r64.cfmt 
    push           0          i64 
    popptroff                 u8 1 0
    push           msysp.tostr_r64.fmt u64 
    push           1          
    pushptroff                i8 1 0
    jumpfalse      #4899      i64 
    push           46         u64 
    push           &msysp.tostr_r64.cfmt 
    push           1          i64 
    popptroff                 u8 1 0
    push           42         u64 
    push           &msysp.tostr_r64.cfmt 
    push           2          i64 
    popptroff                 u8 1 0
    push           msysp.tostr_r64.fmt u64 
    push           5          
    pushptroff                u8 1 0
    push           &msysp.tostr_r64.cfmt 
    push           3          i64 
    popptroff                 u8 1 0
    push           0          u64 
    push           &msysp.tostr_r64.cfmt 
    push           4          i64 
    popptroff                 u8 1 0
    setargs                   4 3
    push           msysp.tostr_r64.x r64 
    push           msysp.tostr_r64.fmt u64 
    push           1          
    pushptroff                i8 1 0
    push           &msysp.tostr_r64.cfmt 
    push           &msysp.tostr_r64.str 
    callproc       &sprintf   
    jump           #4900      
#4899: 
    push           msysp.tostr_r64.fmt u64 
    push           5          
    pushptroff                u8 1 0
    push           &msysp.tostr_r64.cfmt 
    push           1          i64 
    popptroff                 u8 1 0
    push           0          u64 
    push           &msysp.tostr_r64.cfmt 
    push           2          i64 
    popptroff                 u8 1 0
    setargs                   3 3
    push           msysp.tostr_r64.x r64 
    push           &msysp.tostr_r64.cfmt 
    push           &msysp.tostr_r64.str 
    callproc       &sprintf   
#4900: 
    setargs                   1 0
    push           &msysp.tostr_r64.str 
    callfn         &strlen    i64 
    pop            msysp.tostr_r64.n i64 
    push           msysp.tostr_r64.n i64 
    push           msysp.tostr_r64.fmt u64 
    pushptr                   u8 
    jumpge         #4901      i64 
    setargs                   4 0
    push           msysp.tostr_r64.fmt u64 
    push           msysp.tostr_r64.n i64 
    push           &msysp.tostr_r64.str2 
    push           &msysp.tostr_r64.str 
    callfn         &msysp.expandstr i64 
    pop            msysp.tostr_r64.n i64 
    setargs                   2 0
    push           &msysp.tostr_r64.str2 
    push           &msysp.tostr_r64.str 
    callproc       &strcpy    
#4901: 
    setargs                   2 0
    push           msysp.tostr_r64.n i64 
    push           &msysp.tostr_r64.str 
    callproc       &msysp.printstr_n 
#4902: 
    retproc                   
End


Proc msysp.tostr_str:
    param          msysp.tostr_str.s u64 
    param          msysp.tostr_str.fmt u64 
    local          msysp.tostr_str.oldlen i64 
    local          msysp.tostr_str.newlen i64 
    local          msysp.tostr_str.n i64 
    local          msysp.tostr_str.t u64 
    procentry                 
    setargs                   1 0
    push           msysp.tostr_str.s u64 
    callfn         &strlen    i64 
    pop            msysp.tostr_str.oldlen i64 
    push           msysp.tostr_str.oldlen i64 
    pop            msysp.tostr_str.newlen i64 
    push           msysp.tostr_str.fmt u64 
    push           3          
    pushptroff                u8 1 0
    jumptrue       #4904      u64 
    push           msysp.tostr_str.fmt u64 
    pushptr                   u8 
    push           msysp.tostr_str.newlen i64 
    jumpgt         #4904      i64 
    push           msysp.tostr_str.fmt u64 
    push           8          
    pushptroff                u8 1 0
    jumptrue       #4904      u64 
    push           msysp.tostr_str.fmt u64 
    push           1          
    pushptroff                i8 1 0
    jumpfalse      #4905      i64 
#4904: 
    push           msysp.tostr_str.fmt u64 
    push           3          
    pushptroff                u8 1 0
    jumpfalse      #4906      u64 
    push           &msysp.tostr_str.newlen 
    push           2          i64 
    addto                     i64 
#4906: 
    push           msysp.tostr_str.fmt u64 
    pushptr                   u8 
    push           msysp.tostr_str.newlen i64 
    jumple         #4907      i64 
    push           msysp.tostr_str.fmt u64 
    pushptr                   u8 
    pop            msysp.tostr_str.newlen i64 
#4907: 
    setargs                   1 0
    push           msysp.tostr_str.newlen i64 
    push           1          i64 
    add                       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            msysp.tostr_str.t u64 
    setargs                   4 0
    push           msysp.tostr_str.fmt u64 
    push           msysp.tostr_str.oldlen i64 
    push           msysp.tostr_str.t u64 
    push           msysp.tostr_str.s u64 
    callfn         &msysp.strtostrfmt i64 
    pop            msysp.tostr_str.n i64 
    push           msysp.tostr_str.fmt u64 
    push           1          
    pushptroff                i8 1 0
    jumpfalse      #4908      i64 
    push           &msysp.tostr_str.n 
    push           msysp.tostr_str.fmt u64 
    push           1          
    pushptroff                i8 1 0
    minto                     i64 
#4908: 
    setargs                   2 0
    push           msysp.tostr_str.n i64 
    push           msysp.tostr_str.t u64 
    callproc       &msysp.printstr_n 
    setargs                   2 0
    push           msysp.tostr_str.newlen i64 
    push           1          i64 
    add                       i64 
    push           msysp.tostr_str.t u64 
    callproc       &mlibp.pcm_free 
    jump           #4909      
#4905: 
    setargs                   2 0
    push           msysp.tostr_str.oldlen i64 
    push           msysp.tostr_str.s u64 
    callproc       &msysp.printstr_n 
#4909: 
#4910: 
    retproc                   
End


Proc msysp.getfmt: u64
    param          msysp.getfmt.fmtstyle u64 
    procentry                 
    startmult                 
    push           msysp.getfmt.fmtstyle u64 
    jumpfalse      #4912      u64 
    setargs                   3 0
    push           &msysp.getfmt.fmt 
    push           -1         i64 
    push           msysp.getfmt.fmtstyle u64 
    callproc       &msysp.strtofmt 
    push           &msysp.getfmt.fmt 
    resetmult                 
    jump           #4913      
#4912: 
    push           &msysp.defaultfmt 
    endmult                   
#4913: 
    setret                    u64 
    jump           #4914      
#4914: 
    retfn                     u64 
End


Proc msysp.strint: u64
    param          msysp.strint.a i64 
    param          msysp.strint.fmtstyle u64 
    local          msysp.strint.fmt u64 
    procentry                 
    setargs                   1 0
    push           &msysp.strint.str 
    callproc       &msysp.m$print_startstr 
    setargs                   2 0
    setargs                   1 0
    push           msysp.strint.fmtstyle u64 
    callfn         &msysp.getfmt u64 
    store          msysp.strint.fmt u64 
    push           msysp.strint.a i64 
    callproc       &msysp.tostr_i64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           msysp.strint.fmt u64 
    push           &msysp.strint.str 
    callfn         &msysp.getstr u64 
    setret                    u64 
    jump           #4916      
#4916: 
    retfn                     u64 
End


Proc msysp.getstrint:
    param          msysp.getstrint.a i64 
    param          msysp.getstrint.dest u64 
    procentry                 
    setargs                   1 0
    push           msysp.getstrint.dest u64 
    callproc       &msysp.m$print_startstr 
    setargs                   2 0
    setargs                   1 0
    push           0          u64 
    callfn         &msysp.getfmt u64 
    push           msysp.getstrint.a i64 
    callproc       &msysp.tostr_i64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#4918: 
    retproc                   
End


Proc msysp.strword: u64
    param          msysp.strword.a u64 
    param          msysp.strword.fmtstyle u64 
    local          msysp.strword.fmt u64 
    procentry                 
    setargs                   1 0
    push           &msysp.strword.str 
    callproc       &msysp.m$print_startstr 
    setargs                   2 0
    setargs                   1 0
    push           msysp.strword.fmtstyle u64 
    callfn         &msysp.getfmt u64 
    store          msysp.strword.fmt u64 
    push           msysp.strword.a u64 
    callproc       &msysp.tostr_u64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           msysp.strword.fmt u64 
    push           &msysp.strword.str 
    callfn         &msysp.getstr u64 
    setret                    u64 
    jump           #4920      
#4920: 
    retfn                     u64 
End


Proc msysp.strreal: u64
    param          msysp.strreal.a r64 
    param          msysp.strreal.fmtstyle u64 
    local          msysp.strreal.fmt u64 
    procentry                 
    setargs                   1 0
    push           &msysp.strreal.str 
    callproc       &msysp.m$print_startstr 
    setargs                   2 0
    setargs                   1 0
    push           msysp.strreal.fmtstyle u64 
    callfn         &msysp.getfmt u64 
    store          msysp.strreal.fmt u64 
    push           msysp.strreal.a r64 
    callproc       &msysp.tostr_r64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           msysp.strreal.fmt u64 
    push           &msysp.strreal.str 
    callfn         &msysp.getstr u64 
    setret                    u64 
    jump           #4922      
#4922: 
    retfn                     u64 
End


Proc msysp.getstr: u64
    param          msysp.getstr.s u64 
    param          msysp.getstr.fmt u64 
    procentry                 
    startmult                 
    push           msysp.getstr.fmt u64 
    push           13         
    pushptroff                u8 1 0
    jumpfalse      #4924      u64 
    setargs                   1 0
    push           msysp.getstr.s u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    resetmult                 
    jump           #4925      
#4924: 
    push           msysp.getstr.s u64 
    endmult                   
#4925: 
    setret                    u64 
    jump           #4926      
#4926: 
    retfn                     u64 
End


Proc msysp.initreadbuffer:
    procentry                 
    push           msysp.rd_buffer u64 
    jumpfalse      #4928      u64 
    jump           #4929      
#4928: 
    setargs                   1 0
    push           524288     i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            msysp.rd_buffer u64 
    push           0          u64 
    push           msysp.rd_buffer u64 
    popptr                    u8 
    push           msysp.rd_buffer u64 
    store          msysp.rd_lastpos u64 
    pop            msysp.rd_pos u64 
#4929: 
    retproc                   
End


Proc msysp.m$read_conline:
    procentry                 
    setargs                   0 0
    callproc       &msysp.initreadbuffer 
    setargs                   3 0
    push           524288     i64 
    push           msysp.rd_buffer u64 
    push           0          u64 
    callproc       &mlibp.readlinen 
    setargs                   1 0
    push           msysp.rd_buffer u64 
    callfn         &strlen    i64 
    pop            msysp.rd_length i64 
    push           msysp.rd_buffer u64 
    pop            msysp.rd_pos u64 
    push           0          u64 
    pop            msysp.rd_lastpos u64 
#4931: 
    retproc                   
End


Proc msysp.m$read_fileline:
    param          msysp.m$read_fileline.f u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.initreadbuffer 
    setargs                   3 0
    push           524288     i64 
    push           msysp.rd_buffer u64 
    push           msysp.m$read_fileline.f u64 
    callproc       &mlibp.readlinen 
    setargs                   1 0
    push           msysp.rd_buffer u64 
    callfn         &strlen    i64 
    pop            msysp.rd_length i64 
    push           msysp.rd_buffer u64 
    pop            msysp.rd_pos u64 
    push           0          u64 
    pop            msysp.rd_lastpos u64 
#4933: 
    retproc                   
End


Proc msysp.m$read_strline:
    param          msysp.m$read_strline.s u64 
    local          msysp.m$read_strline.n i64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.initreadbuffer 
    setargs                   1 0
    push           msysp.m$read_strline.s u64 
    callfn         &strlen    i64 
    pop            msysp.m$read_strline.n i64 
    push           msysp.m$read_strline.n i64 
    push           524288     i64 
    jumpge         #4935      i64 
    setargs                   2 0
    push           msysp.m$read_strline.s u64 
    push           msysp.rd_buffer u64 
    callproc       &strcpy    
    jump           #4936      
#4935: 
    setargs                   3 0
    push           524287     u64 
    push           msysp.m$read_strline.s u64 
    push           msysp.rd_buffer u64 
    callproc       &memcpy    
    push           0          u64 
    push           msysp.rd_buffer u64 
    push           524288     i64 
    popptroff                 u8 1 -1
#4936: 
    push           msysp.m$read_strline.n i64 
    pop            msysp.rd_length i64 
    push           msysp.rd_buffer u64 
    pop            msysp.rd_pos u64 
    push           0          u64 
    pop            msysp.rd_lastpos u64 
#4937: 
    retproc                   
End


Proc msysp.readitem: u64
    param          msysp.readitem.itemlength u64 
    local          msysp.readitem.p u64 
    local          msysp.readitem.s u64 
    local          msysp.readitem.itemstr u64 
    local          msysp.readitem.quotechar u8 
    local          msysp.readitem.c u8 
    procentry                 
    push           msysp.rd_buffer u64 
    jumptrue       #4939      u64 
    setargs                   0 0
    callproc       &msysp.initreadbuffer 
#4939: 
    push           msysp.rd_pos u64 
    pop            msysp.readitem.s u64 
    jump           #4940      
#4941: 
    push           &msysp.readitem.s 
    incr                      u64 1
#4940: 
    push           msysp.readitem.s u64 
    pushptr                   u8 
    push           32         u64 
    jumpeq         #4941      u64 
    push           msysp.readitem.s u64 
    pushptr                   u8 
    push           9          i64 
    jumpeq         #4941      i64 
#4942: 
    push           msysp.readitem.s u64 
    pop            msysp.readitem.itemstr u64 
    push           msysp.readitem.s u64 
    store          msysp.rd_pos u64 
    pop            msysp.rd_lastpos u64 
    push           msysp.readitem.s u64 
    pushptr                   u8 
    push           0          i64 
    jumpne         #4943      i64 
    push           0          i64 
    pop            msysp.termchar i64 
    push           0          i64 
    push           msysp.readitem.itemlength u64 
    popptr                    i64 
    push           msysp.readitem.s u64 
    setret                    u64 
    jump           #4944      
#4943: 
    push           0          u64 
    pop            msysp.readitem.quotechar u8 
    push           msysp.readitem.s u64 
    pushptr                   u8 
    push           34         u64 
    jumpne         #4945      u64 
    push           34         u64 
    pop            msysp.readitem.quotechar u8 
    push           &msysp.readitem.s 
    incr                      u64 1
    jump           #4946      
#4945: 
    push           msysp.readitem.s u64 
    pushptr                   u8 
    push           39         u64 
    jumpne         #4947      u64 
    push           39         u64 
    pop            msysp.readitem.quotechar u8 
    push           &msysp.readitem.s 
    incr                      u64 1
#4947: 
#4946: 
    push           msysp.readitem.s u64 
    store          msysp.readitem.itemstr u64 
    pop            msysp.readitem.p u64 
    jump           #4948      
#4949: 
    push           &msysp.readitem.s 
    loadincr                  u64 1
    pushptr                   u8 
    pop            msysp.readitem.c u8 
    push           msysp.readitem.c u8 
    switch         #4950      9 61
    opnd           #4951      
#4950: 
    switchlabel    #4952      
    switchlabel    #4951      
    switchlabel    #4951      
    switchlabel    #4951      
    switchlabel    #4951      
    switchlabel    #4951      
    switchlabel    #4951      
    switchlabel    #4951      
    switchlabel    #4951      
    switchlabel    #4951      
    switchlabel    #4951      
    switchlabel    #4951      
    switchlabel    #4951      
    switchlabel    #4951      
    switchlabel    #4951      
    switchlabel    #4951      
    switchlabel    #4951      
    switchlabel    #4951      
    switchlabel    #4951      
    switchlabel    #4951      
    switchlabel    #4951      
    switchlabel    #4951      
    switchlabel    #4951      
    switchlabel    #4952      
    switchlabel    #4951      
    switchlabel    #4951      
    switchlabel    #4951      
    switchlabel    #4951      
    switchlabel    #4951      
    switchlabel    #4951      
    switchlabel    #4951      
    switchlabel    #4951      
    switchlabel    #4951      
    switchlabel    #4951      
    switchlabel    #4951      
    switchlabel    #4952      
    switchlabel    #4951      
    switchlabel    #4951      
    switchlabel    #4951      
    switchlabel    #4951      
    switchlabel    #4951      
    switchlabel    #4951      
    switchlabel    #4951      
    switchlabel    #4951      
    switchlabel    #4951      
    switchlabel    #4951      
    switchlabel    #4951      
    switchlabel    #4951      
    switchlabel    #4951      
    switchlabel    #4951      
    switchlabel    #4951      
    switchlabel    #4951      
    switchlabel    #4952      
    endswitch                 
#4952: 
    push           msysp.readitem.quotechar u8 
    jumptrue       #4953      u64 
    push           msysp.readitem.p u64 
    push           msysp.readitem.s u64 
    jumpne         #4954      u64 
#4953: 
    jump           #4955      
#4954: 
    push           msysp.readitem.c u8 
    pop            msysp.termchar i64 
    jump           #4956      
    jump           #4957      
#4951: 
!normalchar::
#4955: 
    push           msysp.readitem.c u8 
    push           msysp.readitem.quotechar u8 
    jumpne         #4958      u64 
    push           msysp.readitem.s u64 
    pushptr                   u8 
    push           msysp.readitem.quotechar u8 
    jumpne         #4959      u64 
    push           msysp.readitem.c u8 
    push           msysp.readitem.p u64 
    popptr                    u8 
    push           &msysp.readitem.s 
    incr                      u64 1
    push           &msysp.readitem.p 
    incr                      u64 1
    jump           #4960      
#4959: 
    push           msysp.readitem.s u64 
    pushptr                   u8 
    pop            msysp.termchar i64 
    push           msysp.termchar i64 
    push           44         i64 
    jumpeq         #4961      i64 
    push           msysp.termchar i64 
    push           61         i64 
    jumpne         #4962      i64 
#4961: 
    push           &msysp.readitem.s 
    incr                      u64 1
    push           msysp.readitem.s u64 
    pushptr                   u8 
    pop            msysp.termchar i64 
#4962: 
    jump           #4956      
#4960: 
    jump           #4963      
#4958: 
    push           msysp.readitem.c u8 
    push           msysp.readitem.p u64 
    popptr                    u8 
    push           &msysp.readitem.p 
    incr                      u64 1
#4963: 
#4957: 
#4948: 
    push           msysp.readitem.s u64 
    pushptr                   u8 
    jumptrue       #4949      u64 
#4956: 
    push           msysp.readitem.s u64 
    pushptr                   u8 
    push           0          i64 
    jumpne         #4964      i64 
    push           0          i64 
    pop            msysp.termchar i64 
#4964: 
    push           msysp.readitem.p u64 
    push           msysp.readitem.itemstr u64 
    subref                    i64 1
    push           msysp.readitem.itemlength u64 
    popptr                    i64 
    push           msysp.readitem.s u64 
    pop            msysp.rd_pos u64 
    push           msysp.readitem.itemstr u64 
    setret                    u64 
    jump           #4944      
#4944: 
    retfn                     u64 
End


Proc msysp.strtoint: i64
    param          msysp.strtoint.s u64 
    param          msysp.strtoint.length i64 
    param          msysp.strtoint.base u64 
    local          msysp.strtoint.signd u8 
    local          msysp.strtoint.aa u64 
    local          msysp.strtoint.c u64 
    local          msysp.strtoint.d u64 
    procentry                 
    push           0          i64 
    pop            msysp.itemerror i64 
    push           msysp.strtoint.length i64 
    push           -1         i64 
    jumpne         #4966      i64 
    setargs                   1 0
    push           msysp.strtoint.s u64 
    callfn         &strlen    i64 
    pop            msysp.strtoint.length i64 
#4966: 
    push           0          i64 
    pop            msysp.strtoint.signd u8 
    push           msysp.strtoint.length i64 
    jumpfalse      #4967      i64 
    push           msysp.strtoint.s u64 
    pushptr                   u8 
    push           45         u64 
    jumpne         #4967      u64 
    push           1          i64 
    pop            msysp.strtoint.signd u8 
    push           &msysp.strtoint.s 
    incr                      u64 1
    push           &msysp.strtoint.length 
    decr                      i64 1
    jump           #4968      
#4967: 
    push           msysp.strtoint.length i64 
    jumpfalse      #4969      i64 
    push           msysp.strtoint.s u64 
    pushptr                   u8 
    push           43         u64 
    jumpne         #4969      u64 
    push           &msysp.strtoint.s 
    incr                      u64 1
    push           &msysp.strtoint.length 
    decr                      i64 1
#4969: 
#4968: 
    push           0          u64 
    pop            msysp.strtoint.aa u64 
    jump           #4970      
#4971: 
    push           &msysp.strtoint.s 
    loadincr                  u64 1
    pushptr                   u8 
    pop            msysp.strtoint.c u64 
    push           &msysp.strtoint.length 
    decr                      i64 1
    push           msysp.strtoint.c i64 
    switch         #4972      39 102
    opnd           #4973      
#4972: 
    switchlabel    #4974      
    switchlabel    #4973      
    switchlabel    #4973      
    switchlabel    #4973      
    switchlabel    #4973      
    switchlabel    #4973      
    switchlabel    #4973      
    switchlabel    #4973      
    switchlabel    #4973      
    switchlabel    #4975      
    switchlabel    #4975      
    switchlabel    #4975      
    switchlabel    #4975      
    switchlabel    #4975      
    switchlabel    #4975      
    switchlabel    #4975      
    switchlabel    #4975      
    switchlabel    #4975      
    switchlabel    #4975      
    switchlabel    #4973      
    switchlabel    #4973      
    switchlabel    #4973      
    switchlabel    #4973      
    switchlabel    #4973      
    switchlabel    #4973      
    switchlabel    #4973      
    switchlabel    #4976      
    switchlabel    #4976      
    switchlabel    #4976      
    switchlabel    #4976      
    switchlabel    #4976      
    switchlabel    #4976      
    switchlabel    #4973      
    switchlabel    #4973      
    switchlabel    #4973      
    switchlabel    #4973      
    switchlabel    #4973      
    switchlabel    #4973      
    switchlabel    #4973      
    switchlabel    #4973      
    switchlabel    #4973      
    switchlabel    #4973      
    switchlabel    #4973      
    switchlabel    #4973      
    switchlabel    #4973      
    switchlabel    #4973      
    switchlabel    #4973      
    switchlabel    #4973      
    switchlabel    #4973      
    switchlabel    #4973      
    switchlabel    #4973      
    switchlabel    #4973      
    switchlabel    #4973      
    switchlabel    #4973      
    switchlabel    #4973      
    switchlabel    #4973      
    switchlabel    #4974      
    switchlabel    #4973      
    switchlabel    #4977      
    switchlabel    #4977      
    switchlabel    #4977      
    switchlabel    #4977      
    switchlabel    #4977      
    switchlabel    #4977      
    endswitch                 
#4976: 
    push           msysp.strtoint.c u64 
    push           65         u64 
    sub                       i64 
    push           10         i64 
    add                       u64 
    pop            msysp.strtoint.d u64 
    jump           #4978      
#4977: 
    push           msysp.strtoint.c u64 
    push           97         u64 
    sub                       i64 
    push           10         i64 
    add                       u64 
    pop            msysp.strtoint.d u64 
    jump           #4978      
#4975: 
    push           msysp.strtoint.c u64 
    push           48         u64 
    sub                       u64 
    pop            msysp.strtoint.d u64 
    jump           #4978      
#4974: 
    jump           #4970      
    jump           #4978      
#4973: 
    push           1          i64 
    pop            msysp.itemerror i64 
    jump           #4979      
#4978: 
    push           msysp.strtoint.d u64 
    push           msysp.strtoint.base u64 
    jumplt         #4980      u64 
    push           1          i64 
    pop            msysp.itemerror i64 
    jump           #4979      
#4980: 
    push           msysp.strtoint.aa u64 
    push           msysp.strtoint.base u64 
    mul                       u64 
    push           msysp.strtoint.d u64 
    add                       u64 
    pop            msysp.strtoint.aa u64 
#4970: 
    push           msysp.strtoint.length i64 
    jumptrue       #4971      i64 
#4979: 
    startmult                 
    push           msysp.strtoint.signd u8 
    jumpfalse      #4981      i64 
    push           msysp.strtoint.aa u64 
    neg                       i64 
    resetmult                 
    jump           #4982      
#4981: 
    push           msysp.strtoint.aa i64 
    endmult                   
#4982: 
    setret                    i64 
    jump           #4983      
#4983: 
    retfn                     i64 
End


Proc msysp.m$read_i64: i64
    param          msysp.m$read_i64.fmt i64 
    local          msysp.m$read_i64.s u64 
    local          msysp.m$read_i64.length i64 
    local          msysp.m$read_i64.c i64 
    local          msysp.m$read_i64.aa i64 
    procentry                 
    push           msysp.m$read_i64.fmt i64 
    push           67         i64 
    casejumpeq     #4985      i64 0
    push           99         i64 
    casejumpeq     #4985      i64 0
    push           84         i64 
    casejumpeq     #4986      i64 0
    push           116        i64 
    casejumpeq     #4986      i64 0
    push           69         i64 
    casejumpeq     #4987      i64 0
    push           101        i64 
    casejumpeq     #4987      i64 0
    popstack                  i64 
    jump           #4988      
#4985: 
    push           msysp.rd_pos u64 
    pop            msysp.rd_lastpos u64 
    push           msysp.rd_pos u64 
    pushptr                   u8 
    jumpfalse      #4989      u64 
    push           &msysp.rd_pos 
    loadincr                  u64 1
    pushptr                   u8 
    setret                    i64 
    jump           #4990      
    jump           #4991      
#4989: 
    push           0          i64 
    setret                    i64 
    jump           #4990      
#4991: 
    jump           #4992      
#4986: 
    push           msysp.termchar i64 
    setret                    i64 
    jump           #4990      
    jump           #4992      
#4987: 
    push           msysp.itemerror i64 
    setret                    i64 
    jump           #4990      
    jump           #4992      
#4988: 
#4992: 
    setargs                   1 0
    push           &msysp.m$read_i64.length 
    callfn         &msysp.readitem u64 
    pop            msysp.m$read_i64.s u64 
    push           msysp.m$read_i64.fmt i64 
    push           0          i64 
    casejumpeq     #4993      i64 0
    push           73         i64 
    casejumpeq     #4993      i64 0
    push           105        i64 
    casejumpeq     #4993      i64 0
    push           66         i64 
    casejumpeq     #4994      i64 0
    push           98         i64 
    casejumpeq     #4994      i64 0
    push           72         i64 
    casejumpeq     #4995      i64 0
    push           104        i64 
    casejumpeq     #4995      i64 0
    popstack                  i64 
    jump           #4996      
#4993: 
    setargs                   3 0
    push           10         u64 
    push           msysp.m$read_i64.length i64 
    push           msysp.m$read_i64.s u64 
    callfn         &msysp.strtoint i64 
    setret                    i64 
    jump           #4990      
    jump           #4997      
#4994: 
    setargs                   3 0
    push           2          u64 
    push           msysp.m$read_i64.length i64 
    push           msysp.m$read_i64.s u64 
    callfn         &msysp.strtoint i64 
    setret                    i64 
    jump           #4990      
    jump           #4997      
#4995: 
    setargs                   3 0
    push           16         u64 
    push           msysp.m$read_i64.length i64 
    push           msysp.m$read_i64.s u64 
    callfn         &msysp.strtoint i64 
    setret                    i64 
    jump           #4990      
    jump           #4997      
#4996: 
#4997: 
    push           0          i64 
    setret                    i64 
    jump           #4990      
#4990: 
    retfn                     i64 
End


Proc msysp.m$read_r64: r64
    param          msysp.m$read_r64.fmt i64 
    local          msysp.m$read_r64.str block:512 
    local          msysp.m$read_r64.s u64 
    local          msysp.m$read_r64.length i64 
    local          msysp.m$read_r64.numlength i32 
    local          msysp.m$read_r64.x r64 
    procentry                 
    setargs                   1 0
    push           &msysp.m$read_r64.length 
    callfn         &msysp.readitem u64 
    pop            msysp.m$read_r64.s u64 
    push           msysp.m$read_r64.length i64 
    push           0          i64 
    jumpeq         #4999      i64 
    push           msysp.m$read_r64.length i64 
    push           512        i64 
    jumplt         #5000      i64 
#4999: 
    push           0.0000000000000000e+000 r64 
    setret                    r64 
    jump           #5001      
#5000: 
    setargs                   3 0
    push           msysp.m$read_r64.length u64 
    push           msysp.m$read_r64.s u64 
    push           &msysp.m$read_r64.str 
    callproc       &memcpy    
    push           0          u64 
    push           &msysp.m$read_r64.str 
    push           msysp.m$read_r64.length i64 
    popptroff                 u8 1 0
    push           0          i64 
    pop            msysp.itemerror i64 
    setargs                   4 3
    push           &msysp.m$read_r64.numlength 
    push           &msysp.m$read_r64.x 
    push           "%lf%n"    u64 
    push           &msysp.m$read_r64.str 
    callfn         &sscanf    i32 
    push           0          i64 
    jumpeq         #5002      i64 
    push           msysp.m$read_r64.numlength i32 
    push           msysp.m$read_r64.length i64 
    jumpeq         #5003      i64 
#5002: 
    push           0.0000000000000000e+000 r64 
    pop            msysp.m$read_r64.x r64 
    push           1          i64 
    pop            msysp.itemerror i64 
#5003: 
    push           msysp.m$read_r64.x r64 
    setret                    r64 
    jump           #5001      
#5001: 
    retfn                     r64 
End


Proc msysp.m$read_str:
    param          msysp.m$read_str.dest u64 
    param          msysp.m$read_str.destlen i64 
    param          msysp.m$read_str.fmt i64 
    local          msysp.m$read_str.s u64 
    local          msysp.m$read_str.length i64 
    local          msysp.m$read_str.numlength i64 
    local          msysp.m$read_str.x r64 
    procentry                 
    push           0          i64 
    pop            msysp.itemerror i64 
    push           msysp.m$read_str.fmt i64 
    push           76         i64 
    jumpeq         #5005      i64 
    push           msysp.m$read_str.fmt i64 
    push           108        i64 
    jumpne         #5006      i64 
#5005: 
    push           msysp.rd_pos u64 
    pop            msysp.m$read_str.s u64 
    push           msysp.rd_buffer u64 
    push           msysp.rd_length i64 
    addrefoff                 u64 1 0
    push           msysp.rd_pos u64 
    subref                    i64 1
    pop            msysp.m$read_str.length i64 
    jump           #5007      
#5006: 
    setargs                   1 0
    push           &msysp.m$read_str.length 
    callfn         &msysp.readitem u64 
    pop            msysp.m$read_str.s u64 
    push           msysp.m$read_str.fmt i64 
    push           78         i64 
    jumpeq         #5008      i64 
    push           msysp.m$read_str.fmt i64 
    push           110        i64 
    jumpne         #5009      i64 
#5008: 
    setargs                   2 0
    push           msysp.m$read_str.length i64 
    push           msysp.m$read_str.s u64 
    callproc       &mlibp.iconvlcn 
#5009: 
#5007: 
    push           msysp.m$read_str.destlen i64 
    push           0          i64 
    jumple         #5010      i64 
    push           msysp.m$read_str.length i64 
    push           msysp.m$read_str.destlen i64 
    jumplt         #5011      i64 
    push           msysp.m$read_str.destlen i64 
    push           1          i64 
    sub                       i64 
    pop            msysp.m$read_str.length i64 
    push           1          i64 
    pop            msysp.itemerror i64 
#5011: 
#5010: 
    setargs                   3 0
    push           msysp.m$read_str.length u64 
    push           msysp.m$read_str.s u64 
    push           msysp.m$read_str.dest u64 
    callproc       &memcpy    
    push           0          u64 
    push           msysp.m$read_str.dest u64 
    push           msysp.m$read_str.length i64 
    popptroff                 u8 1 0
#5012: 
    retproc                   
End


Proc msysp.readstr:
    param          msysp.readstr.dest u64 
    param          msysp.readstr.fmt i64 
    param          msysp.readstr.destlen i64 
    procentry                 
    setargs                   3 0
    push           msysp.readstr.fmt i64 
    push           msysp.readstr.destlen i64 
    push           msysp.readstr.dest u64 
    callproc       &msysp.m$read_str 
#5014: 
    retproc                   
End


Proc msysp.rereadln:
    procentry                 
    push           msysp.rd_buffer u64 
    pop            msysp.rd_pos u64 
    push           msysp.rd_pos u64 
    pop            msysp.rd_lastpos u64 
#5016: 
    retproc                   
End


Proc msysp.reread:
    procentry                 
    push           msysp.rd_lastpos u64 
    pop            msysp.rd_pos u64 
#5018: 
    retproc                   
End


Proc msysp.valint: i64
    param          msysp.valint.s u64 
    param          msysp.valint.fmt i64 
    local          msysp.valint.old_pos u64 
    local          msysp.valint.old_lastpos u64 
    local          msysp.valint.aa i64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.initreadbuffer 
    push           msysp.rd_pos u64 
    pop            msysp.valint.old_pos u64 
    push           msysp.rd_lastpos u64 
    pop            msysp.valint.old_lastpos u64 
    push           msysp.valint.s u64 
    pop            msysp.rd_pos u64 
    setargs                   1 0
    push           msysp.valint.fmt i64 
    callfn         &msysp.m$read_i64 i64 
    pop            msysp.valint.aa i64 
    push           msysp.valint.old_pos u64 
    pop            msysp.rd_pos u64 
    push           msysp.valint.old_lastpos u64 
    pop            msysp.rd_lastpos u64 
    push           msysp.valint.aa i64 
    setret                    i64 
    jump           #5020      
#5020: 
    retfn                     i64 
End


Proc msysp.valreal: r64
    param          msysp.valreal.s u64 
    local          msysp.valreal.old_pos u64 
    local          msysp.valreal.old_lastpos u64 
    local          msysp.valreal.x r64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.initreadbuffer 
    push           msysp.rd_pos u64 
    pop            msysp.valreal.old_pos u64 
    push           msysp.rd_lastpos u64 
    pop            msysp.valreal.old_lastpos u64 
    push           msysp.valreal.s u64 
    pop            msysp.rd_pos u64 
    setargs                   1 0
    push           0          i64 
    callfn         &msysp.m$read_r64 r64 
    pop            msysp.valreal.x r64 
    push           msysp.valreal.old_pos u64 
    pop            msysp.rd_pos u64 
    push           msysp.valreal.old_lastpos u64 
    pop            msysp.rd_lastpos u64 
    push           msysp.valreal.x r64 
    setret                    r64 
    jump           #5022      
#5022: 
    retfn                     r64 
End


Proc msysp.mclunimpl:
    param          msysp.mclunimpl.mess u64 
    procentry                 
    setargs                   2 2
    push           msysp.mclunimpl.mess u64 
    push           "MCL-UNIMPL: %s\n" u64 
    callproc       &printf    
    push           1          i64 
    stop                      
#5024: 
    retproc                   
End


Proc mlibp.pcm_alloc: u64
    param          mlibp.pcm_alloc.n i64 
    local          mlibp.pcm_alloc.p u64 
    procentry                 
    push           mlibp.pcm_setup u8 
    jumptrue       #5026      i64 
    setargs                   0 0
    callproc       &mlibp.pcm_init 
#5026: 
    push           mlibp.pcm_alloc.n i64 
    push           2048       i64 
    jumple         #5027      i64 
    setargs                   1 0
    push           mlibp.pcm_alloc.n i64 
    callfn         &mlibp.pcm_getac i64 
    pop            mlibp.alloccode i64 
    push           &mlibp.allocupper 
    push           mlibp.alloccode i64 
    pushptroff                i64 8 0
    pop            mlibp.allocbytes i64 
    setargs                   1 0
    push           mlibp.allocbytes i64 
    callfn         &mlibp.allocmem u64 
    pop            mlibp.pcm_alloc.p u64 
    push           mlibp.pcm_alloc.p u64 
    jumptrue       #5028      u64 
    setargs                   1 0
    push           "pcm_alloc failure" u64 
    callproc       &mlibp.abortprogram 
#5028: 
    push           mlibp.pcm_alloc.p u64 
    setret                    u64 
    jump           #5029      
#5027: 
    push           &mlibp.sizeindextable 
    push           mlibp.pcm_alloc.n i64 
    pushptroff                u8 1 0
    pop            mlibp.alloccode i64 
    push           &mlibp.allocupper 
    push           mlibp.alloccode i64 
    pushptroff                i64 8 0
    pop            mlibp.allocbytes i64 
    push           &mlibp.smallmemtotal 
    push           mlibp.allocbytes i64 
    addto                     i64 
    push           &mlibp.freelist 
    push           mlibp.alloccode i64 
    pushptroff                u64 8 0
    store          mlibp.pcm_alloc.p u64 
    jumpfalse      #5030      u64 
    push           &mlibp.freelist 
    push           mlibp.alloccode i64 
    pushptroff                u64 8 0
    pushptr                   u64 
    push           &mlibp.freelist 
    push           mlibp.alloccode i64 
    popptroff                 u64 8 0
    push           mlibp.pcm_alloc.p u64 
    setret                    u64 
    jump           #5029      
#5030: 
    push           mlibp.pcheapptr u64 
    pop            mlibp.pcm_alloc.p u64 
    push           &mlibp.pcheapptr 
    push           mlibp.allocbytes i64 
    addrefoffto               u64 1 0
    push           mlibp.pcheapptr u64 
    push           mlibp.pcheapend u64 
    jumplt         #5031      u64 
    setargs                   1 0
    push           mlibp.allocbytes i64 
    callfn         &mlibp.pcm_newblock u64 
    pop            mlibp.pcm_alloc.p u64 
    push           mlibp.pcm_alloc.p u64 
    setret                    u64 
    jump           #5029      
#5031: 
    push           mlibp.pcm_alloc.p u64 
    setret                    u64 
    jump           #5029      
#5029: 
    retfn                     u64 
End


Proc mlibp.pcm_free:
    param          mlibp.pcm_free.p u64 
    param          mlibp.pcm_free.n i64 
    local          mlibp.pcm_free.acode i64 
    procentry                 
    push           mlibp.pcm_free.n i64 
    push           0          i64 
    jumpne         #5033      i64 
    jump           #5034      
#5033: 
    push           mlibp.pcm_free.n i64 
    push           2048       i64 
    jumple         #5035      i64 
    setargs                   1 0
    push           mlibp.pcm_free.p u64 
    callproc       &free      
    jump           #5034      
#5035: 
    push           mlibp.pcm_free.p u64 
    jumpfalse      #5036      u64 
    push           &mlibp.sizeindextable 
    push           mlibp.pcm_free.n i64 
    pushptroff                u8 1 0
    pop            mlibp.pcm_free.acode i64 
    push           &mlibp.smallmemtotal 
    push           &mlibp.allocupper 
    push           mlibp.pcm_free.acode i64 
    pushptroff                i64 8 0
    subto                     i64 
    push           &mlibp.freelist 
    push           mlibp.pcm_free.acode i64 
    pushptroff                u64 8 0
    push           mlibp.pcm_free.p u64 
    popptr                    u64 
    push           mlibp.pcm_free.p u64 
    push           &mlibp.freelist 
    push           mlibp.pcm_free.acode i64 
    popptroff                 u64 8 0
#5036: 
#5034: 
    retproc                   
End


Proc mlibp.pcm_freeac:
    param          mlibp.pcm_freeac.p u64 
    param          mlibp.pcm_freeac.alloc i64 
    procentry                 
    setargs                   2 0
    push           &mlibp.allocupper 
    push           mlibp.pcm_freeac.alloc i64 
    pushptroff                i64 8 0
    push           mlibp.pcm_freeac.p u64 
    callproc       &mlibp.pcm_free 
#5038: 
    retproc                   
End


Proc mlibp.pcm_copymem4:
    param          mlibp.pcm_copymem4.p u64 
    param          mlibp.pcm_copymem4.q u64 
    param          mlibp.pcm_copymem4.n i64 
    procentry                 
    setargs                   3 0
    push           mlibp.pcm_copymem4.n u64 
    push           mlibp.pcm_copymem4.q u64 
    push           mlibp.pcm_copymem4.p u64 
    callproc       &memcpy    
#5040: 
    retproc                   
End


Proc mlibp.pcm_clearmem:
    param          mlibp.pcm_clearmem.p u64 
    param          mlibp.pcm_clearmem.n i64 
    procentry                 
    setargs                   3 0
    push           mlibp.pcm_clearmem.n u64 
    push           0          i64 
    push           mlibp.pcm_clearmem.p u64 
    callproc       &memset    
#5042: 
    retproc                   
End


Proc mlibp.pcm_init:
    local          mlibp.pcm_init.j i64 
    local          mlibp.pcm_init.k i64 
    local          mlibp.pcm_init.k1 i64 
    local          mlibp.pcm_init.k2 i64 
    local          mlibp.pcm_init.size i64 
    local          mlibp.pcm_init.av_1 i64 
    local          mlibp.pcm_init.i i64 
    procentry                 
    push           0          i64 
    pop            mlibp.alloccode i64 
    push           mlibp.pcm_setup u8 
    jumpfalse      #5044      i64 
    jump           #5045      
#5044: 
    setargs                   1 0
    push           0          i64 
    callproc       &mlibp.pcm_newblock 
    push           mlibp.pcheapptr u64 
    pop            mlibp.allocbase u64 
#5046: 
    push           1          i64 
    pop            mlibp.pcm_init.i i64 
#5047: 
    push           1          i64 
    pop            mlibp.pcm_init.j i64 
    push           16         i64 
    pop            mlibp.pcm_init.k i64 
    jump           #5048      
#5049: 
    push           mlibp.pcm_init.k i64 
    push           1          i64 
    shl                       i64 
    pop            mlibp.pcm_init.k i64 
    push           &mlibp.pcm_init.j 
    incr                      i64 1
#5048: 
    push           mlibp.pcm_init.i i64 
    push           mlibp.pcm_init.k i64 
    jumpgt         #5049      i64 
#5050: 
    push           mlibp.pcm_init.j i64 
    push           &mlibp.sizeindextable 
    push           mlibp.pcm_init.i i64 
    popptroff                 u8 1 0
#5051: 
    forup          #5047      i64 1
    opnd           mlibp.pcm_init.i 
    opnd           2048       
#5052: 
    push           16         u64 
    push           &mlibp.allocupper 
    push           1          i64 
    popptroff                 u64 8 0
    push           16         i64 
    pop            mlibp.pcm_init.size i64 
#5053: 
    push           2          i64 
    pop            mlibp.pcm_init.i i64 
#5054: 
    push           &mlibp.pcm_init.size 
    push           2          i64 
    multo                     i64 
    push           mlibp.pcm_init.size u64 
    push           &mlibp.allocupper 
    push           mlibp.pcm_init.i i64 
    popptroff                 u64 8 0
    push           mlibp.pcm_init.size i64 
    push           33554432   i64 
    jumplt         #5055      i64 
    push           mlibp.pcm_init.i i64 
    pop            mlibp.pcm_init.k i64 
    jump           #5056      
#5055: 
#5057: 
    forup          #5054      i64 1
    opnd           mlibp.pcm_init.i 
    opnd           27         
#5056: 
#5058: 
    push           mlibp.pcm_init.k i64 
    push           1          i64 
    add                       i64 
    pop            mlibp.pcm_init.i i64 
    push           300        i64 
    pop            mlibp.pcm_init.av_1 i64 
    push           mlibp.pcm_init.i i64 
    push           mlibp.pcm_init.av_1 i64 
    jumpgt         #5059      i64 
#5060: 
    push           &mlibp.pcm_init.size 
    push           33554432   i64 
    addto                     i64 
    push           mlibp.pcm_init.size i64 
    push           8589934592 i64 
    jumpge         #5061      i64 
    push           mlibp.pcm_init.size u64 
    push           &mlibp.allocupper 
    push           mlibp.pcm_init.i i64 
    popptroff                 u64 8 0
    push           mlibp.pcm_init.size u64 
    pop            mlibp.maxmemory u64 
    jump           #5062      
#5061: 
    push           mlibp.pcm_init.i i64 
    push           1          i64 
    sub                       i64 
    pop            mlibp.maxalloccode i64 
    jump           #5059      
#5062: 
#5063: 
    forup          #5060      i64 1
    opnd           mlibp.pcm_init.i 
    opnd           mlibp.pcm_init.av_1 
#5059: 
    push           1          i64 
    pop            mlibp.pcm_setup u8 
#5045: 
    retproc                   
End


Proc mlibp.pcm_getac: i64
    param          mlibp.pcm_getac.size i64 
    procentry                 
    push           mlibp.pcm_getac.size i64 
    push           2048       i64 
    jumpgt         #5065      i64 
    push           &mlibp.sizeindextable 
    push           mlibp.pcm_getac.size i64 
    pushptroff                u8 1 0
    setret                    i64 
    jump           #5066      
#5065: 
    push           mlibp.pcm_getac.size i64 
    push           255        i64 
    add                       i64 
    push           8          i64 
    shr                       i64 
    pop            mlibp.pcm_getac.size i64 
    push           mlibp.pcm_getac.size i64 
    push           2048       i64 
    jumpgt         #5067      i64 
    push           &mlibp.sizeindextable 
    push           mlibp.pcm_getac.size i64 
    pushptroff                u8 1 0
    push           8          i64 
    add                       i64 
    setret                    i64 
    jump           #5066      
#5067: 
    push           mlibp.pcm_getac.size i64 
    push           63         i64 
    add                       i64 
    push           6          i64 
    shr                       i64 
    pop            mlibp.pcm_getac.size i64 
    push           mlibp.pcm_getac.size i64 
    push           2048       i64 
    jumpgt         #5068      i64 
    push           &mlibp.sizeindextable 
    push           mlibp.pcm_getac.size i64 
    pushptroff                u8 1 0
    push           14         i64 
    add                       i64 
    setret                    i64 
    jump           #5066      
#5068: 
    push           mlibp.pcm_getac.size i64 
    push           2048       i64 
    sub                       i64 
    push           2047       i64 
    add                       i64 
    push           2048       i64 
    idiv                      i64 
    push           22         i64 
    add                       i64 
    pop            mlibp.pcm_getac.size i64 
    push           mlibp.pcm_getac.size i64 
    setret                    i64 
    jump           #5066      
#5066: 
    retfn                     i64 
End


Proc mlibp.pcm_newblock: u64
    param          mlibp.pcm_newblock.itemsize i64 
    local          mlibp.pcm_newblock.p u64 
    procentry                 
    push           &mlibp.pcm_newblock.totalheapsize 
    push           2097152    i64 
    addto                     i64 
    push           0          i64 
    pop            mlibp.alloccode i64 
    setargs                   1 0
    push           2097152    i64 
    callfn         &mlibp.allocmem u64 
    pop            mlibp.pcm_newblock.p u64 
    push           mlibp.pcm_newblock.p u64 
    push           0          u64 
    jumpne         #5070      u64 
    setargs                   1 0
    push           "Can't alloc pc heap" u64 
    callproc       &mlibp.abortprogram 
#5070: 
    push           mlibp.pcm_newblock.p u64 
    pop            mlibp.pcheapptr u64 
    push           mlibp.pcm_newblock.p u64 
    push           2097152    i64 
    addrefoff                 u64 1 0
    pop            mlibp.pcheapend u64 
    push           mlibp.pcheapstart u64 
    push           0          u64 
    jumpne         #5071      u64 
    push           mlibp.pcm_newblock.p u64 
    pop            mlibp.pcheapstart u64 
#5071: 
    push           &mlibp.pcheapptr 
    push           mlibp.pcm_newblock.itemsize i64 
    addrefoffto               u64 1 0
    push           mlibp.pcm_newblock.p u64 
    setret                    u64 
    jump           #5072      
#5072: 
    retfn                     u64 
End


Proc mlibp.pcm_round: i64
    param          mlibp.pcm_round.n i64 
    procentry                 
    startmult                 
    push           mlibp.pcm_round.n i64 
    push           2048       i64 
    jumple         #5074      i64 
    push           mlibp.pcm_round.n i64 
    resetmult                 
    jump           #5075      
#5074: 
    push           &mlibp.pcm_round.allocbytes 
    push           &mlibp.sizeindextable 
    push           mlibp.pcm_round.n i64 
    pushptroff                u8 1 0
    pushptroff                i32 4 0
    endmult                   
#5075: 
    setret                    i64 
    jump           #5076      
#5076: 
    retfn                     i64 
End


Proc mlibp.pcm_array: i64
    param          mlibp.pcm_array.n i64 
    local          mlibp.pcm_array.m i64 
    procentry                 
    startmult                 
    push           mlibp.pcm_array.n i64 
    push           2048       i64 
    jumpgt         #5078      i64 
    setargs                   1 0
    push           mlibp.pcm_array.n i64 
    callfn         &mlibp.pcm_round i64 
    resetmult                 
    jump           #5079      
#5078: 
    push           2048       i64 
    pop            mlibp.pcm_array.m i64 
    jump           #5080      
#5081: 
    push           &mlibp.pcm_array.m 
    push           1          i64 
    shlto                     i64 
#5080: 
    push           mlibp.pcm_array.n i64 
    push           mlibp.pcm_array.m i64 
    jumpgt         #5081      i64 
#5082: 
    push           mlibp.pcm_array.m i64 
    endmult                   
#5079: 
    setret                    i64 
    jump           #5083      
#5083: 
    retfn                     i64 
End


Proc mlibp.pcm_printfreelist:
    param          mlibp.pcm_printfreelist.size i64 
    param          mlibp.pcm_printfreelist.p u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Size: "   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mlibp.pcm_printfreelist.size i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #5085      
#5086: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           " "        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   2 0
    push           "h"        u64 
    push           mlibp.pcm_printfreelist.p u64 
    callproc       &msysp.m$print_ptr 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           mlibp.pcm_printfreelist.p u64 
    pushptr                   u64 
    pop            mlibp.pcm_printfreelist.p u64 
#5085: 
    push           mlibp.pcm_printfreelist.p u64 
    jumptrue       #5086      u64 
#5087: 
    setargs                   1 0
    push           ""         u64 
    callproc       &puts      
#5088: 
    retproc                   
End


Proc mlibp.pcm_diags:
    param          mlibp.pcm_diags.caption u64 
    local          mlibp.pcm_diags.m i64 
    local          mlibp.pcm_diags.i i64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "HEAP FREELISTS:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mlibp.pcm_diags.caption u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           16         i64 
    pop            mlibp.pcm_diags.m i64 
#5090: 
    push           1          i64 
    pop            mlibp.pcm_diags.i i64 
#5091: 
    setargs                   2 0
    push           &mlibp.freelist 
    push           mlibp.pcm_diags.i i64 
    pushptroff                u64 8 0
    push           mlibp.pcm_diags.m i64 
    callproc       &mlibp.pcm_printfreelist 
    push           &mlibp.pcm_diags.m 
    push           1          i64 
    shlto                     i64 
#5092: 
    forup          #5091      i64 1
    opnd           mlibp.pcm_diags.i 
    opnd           8          
#5093: 
#5094: 
    retproc                   
End


Proc mlibp.pcm_allocz: u64
    param          mlibp.pcm_allocz.n i64 
    local          mlibp.pcm_allocz.p u64 
    procentry                 
    setargs                   1 0
    push           mlibp.pcm_allocz.n i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            mlibp.pcm_allocz.p u64 
    setargs                   3 0
    push           mlibp.pcm_allocz.n u64 
    push           0          i64 
    push           mlibp.pcm_allocz.p u64 
    callproc       &memset    
    push           mlibp.pcm_allocz.p u64 
    setret                    u64 
    jump           #5096      
#5096: 
    retfn                     u64 
End


Proc mlibp.pcm_copyheapstring: u64
    param          mlibp.pcm_copyheapstring.s u64 
    local          mlibp.pcm_copyheapstring.q u64 
    local          mlibp.pcm_copyheapstring.n i64 
    procentry                 
    push           mlibp.pcm_copyheapstring.s u64 
    push           0          u64 
    jumpne         #5098      u64 
    push           0          u64 
    setret                    u64 
    jump           #5099      
#5098: 
    setargs                   1 0
    push           mlibp.pcm_copyheapstring.s u64 
    callfn         &strlen    i64 
    push           1          i64 
    add                       i64 
    pop            mlibp.pcm_copyheapstring.n i64 
    setargs                   1 0
    push           mlibp.pcm_copyheapstring.n i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            mlibp.pcm_copyheapstring.q u64 
    setargs                   3 0
    push           mlibp.pcm_copyheapstring.n u64 
    push           mlibp.pcm_copyheapstring.s u64 
    push           mlibp.pcm_copyheapstring.q u64 
    callproc       &memcpy    
    push           mlibp.pcm_copyheapstring.q u64 
    setret                    u64 
    jump           #5099      
#5099: 
    retfn                     u64 
End


Proc mlibp.pcm_copyheapstringn: u64
    param          mlibp.pcm_copyheapstringn.s u64 
    param          mlibp.pcm_copyheapstringn.n i64 
    local          mlibp.pcm_copyheapstringn.q u64 
    procentry                 
    push           mlibp.pcm_copyheapstringn.s u64 
    push           0          u64 
    jumpne         #5101      u64 
    push           0          u64 
    setret                    u64 
    jump           #5102      
#5101: 
    setargs                   1 0
    push           mlibp.pcm_copyheapstringn.n i64 
    push           1          i64 
    add                       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            mlibp.pcm_copyheapstringn.q u64 
    setargs                   3 0
    push           mlibp.pcm_copyheapstringn.n u64 
    push           mlibp.pcm_copyheapstringn.s u64 
    push           mlibp.pcm_copyheapstringn.q u64 
    callproc       &memcpy    
    push           0          u64 
    push           mlibp.pcm_copyheapstringn.q u64 
    push           mlibp.pcm_copyheapstringn.n i64 
    popptroff                 u8 1 0
    push           mlibp.pcm_copyheapstringn.q u64 
    setret                    u64 
    jump           #5102      
#5102: 
    retfn                     u64 
End


Proc mlibp.pcm_copyheapblock: u64
    param          mlibp.pcm_copyheapblock.s u64 
    param          mlibp.pcm_copyheapblock.length i64 
    local          mlibp.pcm_copyheapblock.q u64 
    procentry                 
    push           mlibp.pcm_copyheapblock.length i64 
    push           0          i64 
    jumpne         #5104      i64 
    push           0          u64 
    setret                    u64 
    jump           #5105      
#5104: 
    setargs                   1 0
    push           mlibp.pcm_copyheapblock.length i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            mlibp.pcm_copyheapblock.q u64 
    setargs                   3 0
    push           mlibp.pcm_copyheapblock.length u64 
    push           mlibp.pcm_copyheapblock.s u64 
    push           mlibp.pcm_copyheapblock.q u64 
    callproc       &memcpy    
    push           mlibp.pcm_copyheapblock.q u64 
    setret                    u64 
    jump           #5105      
#5105: 
    retfn                     u64 
End


Proc mlibp.addtomemalloc:
    param          mlibp.addtomemalloc.ptr u64 
    param          mlibp.addtomemalloc.size i64 
    local          mlibp.addtomemalloc.i i64 
    procentry                 
#5107: 
    push           1          i64 
    pop            mlibp.addtomemalloc.i i64 
#5108: 
    push           &mlibp.memalloctable 
    push           mlibp.addtomemalloc.i i64 
    pushptroff                u64 8 -8
    push           mlibp.addtomemalloc.ptr u64 
    jumpne         #5109      u64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "ALLOC ERROR:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mlibp.addtomemalloc.ptr u64 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   1 0
    push           "ALREADY ALLOCATED\n\n\n" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           2          i64 
    stop                      
#5109: 
    push           &mlibp.memalloctable 
    push           mlibp.addtomemalloc.i i64 
    pushptroff                u64 8 -8
    push           0          u64 
    jumpne         #5110      u64 
    push           mlibp.addtomemalloc.ptr u64 
    push           &mlibp.memalloctable 
    push           mlibp.addtomemalloc.i i64 
    popptroff                 u64 8 -8
    push           mlibp.addtomemalloc.size i64 
    push           &mlibp.memallocsize 
    push           mlibp.addtomemalloc.i i64 
    popptroff                 i32 4 -4
    jump           #5111      
#5110: 
#5112: 
    forup          #5108      i64 1
    opnd           mlibp.addtomemalloc.i 
    opnd           2          
#5113: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "MEMALLOCTABLE FULL\n\n\n\n" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &mwindowsp.os_getch 
    push           3          i64 
    stop                      
#5111: 
    retproc                   
End


Proc mlibp.removefrommemalloc:
    param          mlibp.removefrommemalloc.ptr u64 
    param          mlibp.removefrommemalloc.size i64 
    local          mlibp.removefrommemalloc.i i64 
    procentry                 
#5115: 
    push           1          i64 
    pop            mlibp.removefrommemalloc.i i64 
#5116: 
    push           &mlibp.memalloctable 
    push           mlibp.removefrommemalloc.i i64 
    pushptroff                u64 8 -8
    push           mlibp.removefrommemalloc.ptr u64 
    jumpne         #5117      u64 
    push           &mlibp.memallocsize 
    push           mlibp.removefrommemalloc.i i64 
    pushptroff                i32 4 -4
    push           mlibp.removefrommemalloc.size i64 
    jumpeq         #5118      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "REMOVE:FOUND" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mlibp.removefrommemalloc.ptr u64 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   1 0
    push           "IN MEMALLOCTABLE, FREESIZE=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mlibp.removefrommemalloc.size i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           ", BUT STORED AS BLOCK SIZE:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mlibp.memallocsize 
    push           mlibp.removefrommemalloc.i i64 
    pushptroff                i32 4 -4
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "MEMSIZE"  u64 
    callproc       &mlibp.abortprogram 
#5118: 
    push           0          u64 
    push           &mlibp.memalloctable 
    push           mlibp.removefrommemalloc.i i64 
    popptroff                 u64 8 -8
    jump           #5119      
#5117: 
#5120: 
    forup          #5116      i64 1
    opnd           mlibp.removefrommemalloc.i 
    opnd           2          
#5121: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "CAN'T FIND" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mlibp.removefrommemalloc.ptr u64 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   1 0
    push           "IN MEMALLOCTABLE" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mlibp.removefrommemalloc.size i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "MEM"      u64 
    callproc       &mlibp.abortprogram 
    push           4          i64 
    stop                      
#5119: 
    retproc                   
End


Proc mlibp.allocmem: u64
    param          mlibp.allocmem.n i64 
    local          mlibp.allocmem.p u64 
    procentry                 
    setargs                   1 0
    push           mlibp.allocmem.n u64 
    callfn         &malloc    u64 
    pop            mlibp.allocmem.p u64 
    push           mlibp.allocmem.p u64 
    jumpfalse      #5123      u64 
    push           mlibp.allocmem.p u64 
    setret                    u64 
    jump           #5124      
#5123: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mlibp.allocmem.n i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           mlibp.memtotal i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Alloc mem failure" u64 
    callproc       &mlibp.abortprogram 
    push           0          u64 
    setret                    u64 
    jump           #5124      
#5124: 
    retfn                     u64 
End


Proc mlibp.reallocmem: u64
    param          mlibp.reallocmem.p u64 
    param          mlibp.reallocmem.n i64 
    procentry                 
    setargs                   2 0
    push           mlibp.reallocmem.n u64 
    push           mlibp.reallocmem.p u64 
    callfn         &realloc   u64 
    pop            mlibp.reallocmem.p u64 
    push           mlibp.reallocmem.p u64 
    jumpfalse      #5126      u64 
    push           mlibp.reallocmem.p u64 
    setret                    u64 
    jump           #5127      
#5126: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mlibp.reallocmem.n i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Realloc mem failure" u64 
    callproc       &mlibp.abortprogram 
    push           0          u64 
    setret                    u64 
    jump           #5127      
#5127: 
    retfn                     u64 
End


Proc mlibp.abortprogram:
    param          mlibp.abortprogram.s u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mlibp.abortprogram.s u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "ABORTING: Press key..." u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           5          i64 
    stop                      
#5129: 
    retproc                   
End


Proc mlibp.getfilesize: i64
    param          mlibp.getfilesize.handlex u64 
    local          mlibp.getfilesize.p u32 
    local          mlibp.getfilesize.size u32 
    procentry                 
    setargs                   1 0
    push           mlibp.getfilesize.handlex u64 
    callfn         &ftell     i32 
    pop            mlibp.getfilesize.p u32 
    setargs                   3 0
    push           2          i64 
    push           0          i64 
    push           mlibp.getfilesize.handlex u64 
    callproc       &fseek     
    setargs                   1 0
    push           mlibp.getfilesize.handlex u64 
    callfn         &ftell     i32 
    pop            mlibp.getfilesize.size u32 
    setargs                   3 0
    push           0          i64 
    push           mlibp.getfilesize.p u32 
    push           mlibp.getfilesize.handlex u64 
    callproc       &fseek     
    push           mlibp.getfilesize.size u32 
    setret                    i64 
    jump           #5131      
#5131: 
    retfn                     i64 
End


Proc mlibp.readrandom:
    param          mlibp.readrandom.handlex u64 
    param          mlibp.readrandom.mem u64 
    param          mlibp.readrandom.offset i64 
    param          mlibp.readrandom.size i64 
    local          mlibp.readrandom.a i64 
    procentry                 
    setargs                   3 0
    push           0          i64 
    push           mlibp.readrandom.offset i64 
    push           mlibp.readrandom.handlex u64 
    callproc       &fseek     
    setargs                   4 0
    push           mlibp.readrandom.handlex u64 
    push           mlibp.readrandom.size u64 
    push           1          u64 
    push           mlibp.readrandom.mem u64 
    callfn         &fread     i64 
    pop            mlibp.readrandom.a i64 
#5133: 
    retproc                   
End


Proc mlibp.writerandom: i64
    param          mlibp.writerandom.handlex u64 
    param          mlibp.writerandom.mem u64 
    param          mlibp.writerandom.offset i64 
    param          mlibp.writerandom.size i64 
    procentry                 
    setargs                   3 0
    push           0          i64 
    push           mlibp.writerandom.offset i64 
    push           mlibp.writerandom.handlex u64 
    callproc       &fseek     
    setargs                   4 0
    push           mlibp.writerandom.handlex u64 
    push           mlibp.writerandom.size u64 
    push           1          u64 
    push           mlibp.writerandom.mem u64 
    callfn         &fwrite    i64 
    setret                    i64 
    jump           #5135      
#5135: 
    retfn                     i64 
End


Proc mlibp.setfilepos: i64
    param          mlibp.setfilepos.file u64 
    param          mlibp.setfilepos.offset i64 
    procentry                 
    setargs                   3 0
    push           0          i64 
    push           mlibp.setfilepos.offset i64 
    push           mlibp.setfilepos.file u64 
    callfn         &fseek     i32 
    setret                    i64 
    jump           #5137      
#5137: 
    retfn                     i64 
End


Proc mlibp.getfilepos: i64
    param          mlibp.getfilepos.file u64 
    procentry                 
    setargs                   1 0
    push           mlibp.getfilepos.file u64 
    callfn         &ftell     i32 
    setret                    i64 
    jump           #5139      
#5139: 
    retfn                     i64 
End


Proc mlibp.readfile: u64
    param          mlibp.readfile.filename u64 
    local          mlibp.readfile.f u64 
    local          mlibp.readfile.size i64 
    local          mlibp.readfile.m u64 
    local          mlibp.readfile.p u64 
    procentry                 
    setargs                   2 0
    push           "rb"       u64 
    push           mlibp.readfile.filename u64 
    callfn         &fopen     u64 
    pop            mlibp.readfile.f u64 
    push           mlibp.readfile.f u64 
    push           0          u64 
    jumpne         #5141      u64 
    push           0          u64 
    setret                    u64 
    jump           #5142      
#5141: 
    setargs                   1 0
    push           mlibp.readfile.f u64 
    callfn         &mlibp.getfilesize i64 
    store          mlibp.readfile.size i64 
    pop            mlibp.rfsize i64 
    setargs                   1 0
    push           mlibp.readfile.size i64 
    push           4          i64 
    add                       u64 
    callfn         &malloc    u64 
    pop            mlibp.readfile.m u64 
    push           mlibp.readfile.m u64 
    push           0          u64 
    jumpne         #5143      u64 
    push           0          u64 
    setret                    u64 
    jump           #5142      
#5143: 
    setargs                   4 0
    push           mlibp.readfile.size i64 
    push           0          i64 
    push           mlibp.readfile.m u64 
    push           mlibp.readfile.f u64 
    callproc       &mlibp.readrandom 
    push           mlibp.readfile.m u64 
    push           mlibp.readfile.size i64 
    addrefoff                 u64 1 0
    pop            mlibp.readfile.p u64 
    push           0          i64 
    push           mlibp.readfile.p u64 
    popptr                    u8 
    push           26         i64 
    push           mlibp.readfile.p u64 
    push           1          i64 
    popptroff                 u8 1 0
    push           0          i64 
    push           mlibp.readfile.p u64 
    push           2          i64 
    popptroff                 u8 1 0
    setargs                   1 0
    push           mlibp.readfile.f u64 
    callproc       &fclose    
    push           mlibp.readfile.m u64 
    setret                    u64 
    jump           #5142      
#5142: 
    retfn                     u64 
End


Proc mlibp.writefile: i64
    param          mlibp.writefile.filename u64 
    param          mlibp.writefile.data u64 
    param          mlibp.writefile.size i64 
    local          mlibp.writefile.f u64 
    local          mlibp.writefile.n i64 
    procentry                 
    setargs                   2 0
    push           "wb"       u64 
    push           mlibp.writefile.filename u64 
    callfn         &fopen     u64 
    pop            mlibp.writefile.f u64 
    push           mlibp.writefile.f u64 
    push           0          u64 
    jumpne         #5145      u64 
    push           0          i64 
    setret                    i64 
    jump           #5146      
#5145: 
    setargs                   4 0
    push           mlibp.writefile.size i64 
    push           0          i64 
    push           mlibp.writefile.data u64 
    push           mlibp.writefile.f u64 
    callfn         &mlibp.writerandom i64 
    pop            mlibp.writefile.n i64 
    setargs                   1 0
    push           mlibp.writefile.f u64 
    callproc       &fclose    
    push           mlibp.writefile.n i64 
    setret                    i64 
    jump           #5146      
#5146: 
    retfn                     i64 
End


Proc mlibp.checkfile: i64
    param          mlibp.checkfile.file u64 
    local          mlibp.checkfile.f u64 
    procentry                 
    setargs                   2 0
    push           "rb"       u64 
    push           mlibp.checkfile.file u64 
    callfn         &fopen     u64 
    store          mlibp.checkfile.f u64 
    jumpfalse      #5148      u64 
    setargs                   1 0
    push           mlibp.checkfile.f u64 
    callproc       &fclose    
    push           1          i64 
    setret                    i64 
    jump           #5149      
#5148: 
    push           0          i64 
    setret                    i64 
    jump           #5149      
#5149: 
    retfn                     i64 
End


Proc mlibp.readlinen:
    param          mlibp.readlinen.handlex u64 
    param          mlibp.readlinen.buffer u64 
    param          mlibp.readlinen.size i64 
    local          mlibp.readlinen.ch i64 
    local          mlibp.readlinen.p u64 
    local          mlibp.readlinen.n i64 
    local          mlibp.readlinen.buff block:100 
    local          mlibp.readlinen.crseen u8 
    procentry                 
    push           mlibp.readlinen.handlex u64 
    push           0          u64 
    jumpne         #5151      u64 
    setargs                   0 0
    callfn         &mwindowsp.os_getstdin u64 
    pop            mlibp.readlinen.handlex u64 
#5151: 
    push           mlibp.readlinen.handlex u64 
    push           0          u64 
    jumpne         #5152      u64 
    push           0          i64 
    pop            mlibp.readlinen.n i64 
    push           mlibp.readlinen.buffer u64 
    pop            mlibp.readlinen.p u64 
#5153: 
    setargs                   0 0
    callfn         &getchar   i32 
    pop            mlibp.readlinen.ch i64 
    push           mlibp.readlinen.ch i64 
    push           13         i64 
    jumpeq         #5154      i64 
    push           mlibp.readlinen.ch i64 
    push           10         i64 
    jumpeq         #5154      i64 
    push           mlibp.readlinen.ch i64 
    push           -1         i64 
    jumpne         #5155      i64 
#5154: 
    push           0          u64 
    push           mlibp.readlinen.p u64 
    popptr                    u8 
    jump           #5156      
#5155: 
    push           mlibp.readlinen.ch u64 
    push           &mlibp.readlinen.p 
    loadincr                  u64 1
    popptr                    u8 
    push           &mlibp.readlinen.n 
    incr                      i64 1
    push           mlibp.readlinen.n i64 
    push           mlibp.readlinen.size i64 
    push           2          i64 
    sub                       i64 
    jumplt         #5157      i64 
    push           0          u64 
    push           mlibp.readlinen.p u64 
    popptr                    u8 
    jump           #5156      
#5157: 
    jump           #5153      
#5158: 
#5152: 
    push           0          u64 
    push           mlibp.readlinen.buffer u64 
    popptr                    u8 
    setargs                   3 0
    push           mlibp.readlinen.handlex u64 
    push           mlibp.readlinen.size i64 
    push           2          i64 
    sub                       i64 
    push           mlibp.readlinen.buffer u64 
    callfn         &fgets     u64 
    push           0          u64 
    jumpne         #5159      u64 
    jump           #5156      
#5159: 
    setargs                   1 0
    push           mlibp.readlinen.buffer u64 
    callfn         &strlen    i64 
    pop            mlibp.readlinen.n i64 
    push           mlibp.readlinen.n i64 
    push           0          i64 
    jumpne         #5160      i64 
    jump           #5156      
#5160: 
    push           mlibp.readlinen.buffer u64 
    push           mlibp.readlinen.n i64 
    addrefoff                 u64 1 -1
    pop            mlibp.readlinen.p u64 
    push           0          i64 
    pop            mlibp.readlinen.crseen u8 
    jump           #5161      
#5162: 
    push           mlibp.readlinen.p u64 
    pushptr                   u8 
    push           13         i64 
    jumpeq         #5163      i64 
    push           mlibp.readlinen.p u64 
    pushptr                   u8 
    push           10         i64 
    jumpne         #5164      i64 
#5163: 
    push           1          i64 
    pop            mlibp.readlinen.crseen u8 
#5164: 
    push           0          u64 
    push           &mlibp.readlinen.p 
    loaddecr                  u64 1
    popptr                    u8 
#5161: 
    push           mlibp.readlinen.p u64 
    push           mlibp.readlinen.buffer u64 
    jumplt         #5165      u64 
    push           mlibp.readlinen.p u64 
    pushptr                   u8 
    push           13         i64 
    jumpeq         #5162      i64 
    push           mlibp.readlinen.p u64 
    pushptr                   u8 
    push           10         i64 
    jumpeq         #5162      i64 
#5165: 
#5166: 
    push           mlibp.readlinen.crseen u8 
    jumptrue       #5167      i64 
    push           mlibp.readlinen.n i64 
    push           4          i64 
    add                       i64 
    push           mlibp.readlinen.size i64 
    jumple         #5167      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mlibp.readlinen.size i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           mlibp.readlinen.n i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "line too long" u64 
    callproc       &mlibp.abortprogram 
#5167: 
#5156: 
    retproc                   
End


Proc mlibp.iconvlcn:
    param          mlibp.iconvlcn.s u64 
    param          mlibp.iconvlcn.n i64 
    local          mlibp.iconvlcn.av_1 i64 
    procentry                 
#5169: 
    push           mlibp.iconvlcn.n i64 
    pop            mlibp.iconvlcn.av_1 i64 
    push           mlibp.iconvlcn.av_1 i64 
    push           0          i64 
    jumple         #5170      i64 
#5171: 
    setargs                   1 0
    push           mlibp.iconvlcn.s u64 
    pushptr                   u8 
    callfn         &tolower   i32 
    push           mlibp.iconvlcn.s u64 
    popptr                    u8 
    push           &mlibp.iconvlcn.s 
    incr                      u64 1
#5172: 
    to             #5171      
    opnd           mlibp.iconvlcn.av_1 
#5170: 
#5173: 
    retproc                   
End


Proc mlibp.iconvucn:
    param          mlibp.iconvucn.s u64 
    param          mlibp.iconvucn.n i64 
    local          mlibp.iconvucn.av_1 i64 
    procentry                 
#5175: 
    push           mlibp.iconvucn.n i64 
    pop            mlibp.iconvucn.av_1 i64 
    push           mlibp.iconvucn.av_1 i64 
    push           0          i64 
    jumple         #5176      i64 
#5177: 
    setargs                   1 0
    push           mlibp.iconvucn.s u64 
    pushptr                   u8 
    callfn         &toupper   i32 
    push           mlibp.iconvucn.s u64 
    popptr                    u8 
    push           &mlibp.iconvucn.s 
    incr                      u64 1
#5178: 
    to             #5177      
    opnd           mlibp.iconvucn.av_1 
#5176: 
#5179: 
    retproc                   
End


Proc mlibp.convlcstring: u64
    param          mlibp.convlcstring.s u64 
    local          mlibp.convlcstring.s0 u64 
    procentry                 
    push           mlibp.convlcstring.s u64 
    pop            mlibp.convlcstring.s0 u64 
    jump           #5181      
#5182: 
    setargs                   1 0
    push           mlibp.convlcstring.s u64 
    pushptr                   u8 
    callfn         &tolower   i32 
    push           mlibp.convlcstring.s u64 
    popptr                    u8 
    push           &mlibp.convlcstring.s 
    incr                      u64 1
#5181: 
    push           mlibp.convlcstring.s u64 
    pushptr                   u8 
    jumptrue       #5182      u64 
#5183: 
    push           mlibp.convlcstring.s0 u64 
    setret                    u64 
    jump           #5184      
#5184: 
    retfn                     u64 
End


Proc mlibp.convucstring: u64
    param          mlibp.convucstring.s u64 
    local          mlibp.convucstring.s0 u64 
    procentry                 
    push           mlibp.convucstring.s u64 
    pop            mlibp.convucstring.s0 u64 
    jump           #5186      
#5187: 
    setargs                   1 0
    push           mlibp.convucstring.s u64 
    pushptr                   u8 
    callfn         &toupper   i32 
    push           mlibp.convucstring.s u64 
    popptr                    u8 
    push           &mlibp.convucstring.s 
    incr                      u64 1
#5186: 
    push           mlibp.convucstring.s u64 
    pushptr                   u8 
    jumptrue       #5187      u64 
#5188: 
    push           mlibp.convucstring.s0 u64 
    setret                    u64 
    jump           #5189      
#5189: 
    retfn                     u64 
End


Proc mlibp.changeext: u64
    param          mlibp.changeext.s u64 
    param          mlibp.changeext.newext u64 
    local          mlibp.changeext.newext2 block:32 
    local          mlibp.changeext.sext u64 
    local          mlibp.changeext.n i64 
    procentry                 
    setargs                   2 0
    push           mlibp.changeext.s u64 
    push           &mlibp.changeext.newfile 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcpy    
    push           mlibp.changeext.newext u64 
    pushptr                   u8 
    push           0          u64 
    casejumpeq     #5191      u64 0
    push           46         u64 
    casejumpeq     #5192      u64 0
    popstack                  u64 
    jump           #5193      
#5191: 
    push           0          u64 
    push           &mlibp.changeext.newext2 
    push           1          i64 
    popptroff                 u8 1 -1
    push           0          u64 
    push           &mlibp.changeext.newext2 
    push           2          i64 
    popptroff                 u8 1 -1
    jump           #5194      
#5192: 
    setargs                   2 0
    push           mlibp.changeext.newext u64 
    push           &mlibp.changeext.newext2 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcpy    
    jump           #5194      
#5193: 
    setargs                   2 0
    push           "."        u64 
    push           &mlibp.changeext.newext2 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcpy    
    setargs                   2 0
    push           mlibp.changeext.newext u64 
    push           &mlibp.changeext.newext2 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcat    
#5194: 
    setargs                   2 0
    push           1          i64 
    push           mlibp.changeext.s u64 
    callfn         &mlibp.extractext u64 
    pop            mlibp.changeext.sext u64 
    push           mlibp.changeext.sext u64 
    pushptr                   u8 
    push           0          u64 
    casejumpeq     #5195      u64 0
    push           46         u64 
    casejumpeq     #5196      u64 0
    popstack                  u64 
    jump           #5197      
#5195: 
    setargs                   2 0
    push           &mlibp.changeext.newext2 
    push           0          
    addrefoff                 u8 1 0
    push           &mlibp.changeext.newfile 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcat    
    jump           #5198      
#5196: 
    setargs                   2 0
    push           &mlibp.changeext.newext2 
    push           1          
    addrefoff                 u8 1 0
    push           &mlibp.changeext.newfile 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcat    
    jump           #5198      
#5197: 
    push           mlibp.changeext.sext u64 
    push           mlibp.changeext.s u64 
    subref                    i64 1
    push           2          i64 
    sub                       i64 
    pop            mlibp.changeext.n i64 
    setargs                   2 0
    push           &mlibp.changeext.newext2 
    push           0          
    addrefoff                 u8 1 0
    push           &mlibp.changeext.newfile 
    push           0          
    addrefoff                 u8 1 0
    push           mlibp.changeext.n i64 
    addrefoff                 u64 1 1
    callproc       &strcpy    
#5198: 
    push           &mlibp.changeext.newfile 
    push           0          
    addrefoff                 u8 1 0
    setret                    u64 
    jump           #5199      
#5199: 
    retfn                     u64 
End


Proc mlibp.extractext: u64
    param          mlibp.extractext.s u64 
    param          mlibp.extractext.period i64 
    local          mlibp.extractext.t u64 
    local          mlibp.extractext.u u64 
    procentry                 
    setargs                   1 0
    push           mlibp.extractext.s u64 
    callfn         &mlibp.extractfile u64 
    pop            mlibp.extractext.t u64 
    push           mlibp.extractext.t u64 
    pushptr                   u8 
    push           0          i64 
    jumpne         #5201      i64 
    push           ""         u64 
    setret                    u64 
    jump           #5202      
#5201: 
    push           mlibp.extractext.t u64 
    setargs                   1 0
    push           mlibp.extractext.t u64 
    callfn         &strlen    i64 
    addrefoff                 u64 1 -1
    pop            mlibp.extractext.u u64 
    jump           #5203      
#5204: 
    push           mlibp.extractext.u u64 
    pushptr                   u8 
    push           46         u64 
    jumpne         #5205      u64 
    push           mlibp.extractext.u u64 
    push           1          i64 
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #5206      i64 
    startmult                 
    push           mlibp.extractext.period i64 
    jumpfalse      #5207      i64 
    push           "."        u64 
    resetmult                 
    jump           #5208      
#5207: 
    push           ""         u64 
    endmult                   
#5208: 
    setret                    u64 
    jump           #5202      
#5206: 
    push           mlibp.extractext.u u64 
    push           1          i64 
    addrefoff                 u64 1 0
    setret                    u64 
    jump           #5202      
#5205: 
    push           &mlibp.extractext.u 
    decr                      u64 1
#5203: 
    push           mlibp.extractext.u u64 
    push           mlibp.extractext.t u64 
    jumpge         #5204      u64 
#5209: 
    push           ""         u64 
    setret                    u64 
    jump           #5202      
#5202: 
    retfn                     u64 
End


Proc mlibp.extractpath: u64
    param          mlibp.extractpath.s u64 
    local          mlibp.extractpath.t u64 
    local          mlibp.extractpath.n i64 
    procentry                 
    push           mlibp.extractpath.s u64 
    setargs                   1 0
    push           mlibp.extractpath.s u64 
    callfn         &strlen    i64 
    addrefoff                 u64 1 -1
    pop            mlibp.extractpath.t u64 
    jump           #5211      
#5212: 
    push           mlibp.extractpath.t u64 
    pushptr                   u8 
    switch         #5213      47 92
    opnd           #5214      
#5213: 
    switchlabel    #5215      
    switchlabel    #5214      
    switchlabel    #5214      
    switchlabel    #5214      
    switchlabel    #5214      
    switchlabel    #5214      
    switchlabel    #5214      
    switchlabel    #5214      
    switchlabel    #5214      
    switchlabel    #5214      
    switchlabel    #5214      
    switchlabel    #5215      
    switchlabel    #5214      
    switchlabel    #5214      
    switchlabel    #5214      
    switchlabel    #5214      
    switchlabel    #5214      
    switchlabel    #5214      
    switchlabel    #5214      
    switchlabel    #5214      
    switchlabel    #5214      
    switchlabel    #5214      
    switchlabel    #5214      
    switchlabel    #5214      
    switchlabel    #5214      
    switchlabel    #5214      
    switchlabel    #5214      
    switchlabel    #5214      
    switchlabel    #5214      
    switchlabel    #5214      
    switchlabel    #5214      
    switchlabel    #5214      
    switchlabel    #5214      
    switchlabel    #5214      
    switchlabel    #5214      
    switchlabel    #5214      
    switchlabel    #5214      
    switchlabel    #5214      
    switchlabel    #5214      
    switchlabel    #5214      
    switchlabel    #5214      
    switchlabel    #5214      
    switchlabel    #5214      
    switchlabel    #5214      
    switchlabel    #5214      
    switchlabel    #5215      
    endswitch                 
#5215: 
    push           mlibp.extractpath.t u64 
    push           mlibp.extractpath.s u64 
    subref                    i64 1
    push           1          i64 
    add                       i64 
    pop            mlibp.extractpath.n i64 
    setargs                   3 0
    push           mlibp.extractpath.n u64 
    push           mlibp.extractpath.s u64 
    push           &mlibp.extractpath.str 
    callproc       &memcpy    
    push           0          u64 
    push           &mlibp.extractpath.str 
    push           mlibp.extractpath.n i64 
    popptroff                 u8 1 0
    push           &mlibp.extractpath.str 
    setret                    u64 
    jump           #5216      
    jump           #5217      
#5214: 
#5217: 
    push           &mlibp.extractpath.t 
    decr                      u64 1
#5211: 
    push           mlibp.extractpath.t u64 
    push           mlibp.extractpath.s u64 
    jumpge         #5212      u64 
#5218: 
    push           ""         u64 
    setret                    u64 
    jump           #5216      
#5216: 
    retfn                     u64 
End


Proc mlibp.extractfile: u64
    param          mlibp.extractfile.s u64 
    local          mlibp.extractfile.t u64 
    procentry                 
    setargs                   1 0
    push           mlibp.extractfile.s u64 
    callfn         &mlibp.extractpath u64 
    pop            mlibp.extractfile.t u64 
    push           mlibp.extractfile.t u64 
    pushptr                   u8 
    push           0          i64 
    jumpne         #5220      i64 
    push           mlibp.extractfile.s u64 
    setret                    u64 
    jump           #5221      
#5220: 
    push           mlibp.extractfile.s u64 
    setargs                   1 0
    push           mlibp.extractfile.t u64 
    callfn         &strlen    i64 
    addrefoff                 u64 1 0
    setret                    u64 
    jump           #5221      
#5221: 
    retfn                     u64 
End


Proc mlibp.extractbasefile: u64
    param          mlibp.extractbasefile.s u64 
    local          mlibp.extractbasefile.f u64 
    local          mlibp.extractbasefile.e u64 
    local          mlibp.extractbasefile.n i64 
    local          mlibp.extractbasefile.flen i64 
    procentry                 
    setargs                   1 0
    push           mlibp.extractbasefile.s u64 
    callfn         &mlibp.extractfile u64 
    pop            mlibp.extractbasefile.f u64 
    setargs                   1 0
    push           mlibp.extractbasefile.f u64 
    callfn         &strlen    i64 
    pop            mlibp.extractbasefile.flen i64 
    push           mlibp.extractbasefile.flen i64 
    push           0          i64 
    jumpne         #5223      i64 
    push           ""         u64 
    setret                    u64 
    jump           #5224      
#5223: 
    setargs                   2 0
    push           0          i64 
    push           mlibp.extractbasefile.f u64 
    callfn         &mlibp.extractext u64 
    pop            mlibp.extractbasefile.e u64 
    push           mlibp.extractbasefile.e u64 
    pushptr                   u8 
    jumpfalse      #5225      u64 
    push           mlibp.extractbasefile.flen i64 
    setargs                   1 0
    push           mlibp.extractbasefile.e u64 
    callfn         &strlen    i64 
    sub                       i64 
    push           1          i64 
    sub                       i64 
    pop            mlibp.extractbasefile.n i64 
    setargs                   3 0
    push           mlibp.extractbasefile.n u64 
    push           mlibp.extractbasefile.f u64 
    push           &mlibp.extractbasefile.str 
    callproc       &memcpy    
    push           0          u64 
    push           &mlibp.extractbasefile.str 
    push           mlibp.extractbasefile.n i64 
    popptroff                 u8 1 0
    push           &mlibp.extractbasefile.str 
    setret                    u64 
    jump           #5224      
#5225: 
    push           mlibp.extractbasefile.f u64 
    push           mlibp.extractbasefile.flen i64 
    pushptroff                u8 1 -1
    push           46         u64 
    jumpne         #5226      u64 
    setargs                   3 0
    push           mlibp.extractbasefile.flen i64 
    push           1          i64 
    sub                       u64 
    push           mlibp.extractbasefile.f u64 
    push           &mlibp.extractbasefile.str 
    callproc       &memcpy    
    push           0          u64 
    push           &mlibp.extractbasefile.str 
    push           mlibp.extractbasefile.flen i64 
    popptroff                 u8 1 -1
    push           &mlibp.extractbasefile.str 
    setret                    u64 
    jump           #5224      
#5226: 
    push           mlibp.extractbasefile.f u64 
    setret                    u64 
    jump           #5224      
#5224: 
    retfn                     u64 
End


Proc mlibp.addext: u64
    param          mlibp.addext.s u64 
    param          mlibp.addext.newext u64 
    local          mlibp.addext.sext u64 
    procentry                 
    setargs                   2 0
    push           1          i64 
    push           mlibp.addext.s u64 
    callfn         &mlibp.extractext u64 
    pop            mlibp.addext.sext u64 
    push           mlibp.addext.sext u64 
    pushptr                   u8 
    push           0          i64 
    jumpne         #5228      i64 
    setargs                   2 0
    push           mlibp.addext.newext u64 
    push           mlibp.addext.s u64 
    callfn         &mlibp.changeext u64 
    setret                    u64 
    jump           #5229      
#5228: 
    push           mlibp.addext.s u64 
    setret                    u64 
    jump           #5229      
#5229: 
    retfn                     u64 
End


Proc mlibp.alloctable: u64
    param          mlibp.alloctable.n i64 
    param          mlibp.alloctable.size i64 
    local          mlibp.alloctable.p u64 
    procentry                 
    setargs                   1 0
    push           mlibp.alloctable.n i64 
    push           1          i64 
    add                       i64 
    push           mlibp.alloctable.size i64 
    mul                       u64 
    callfn         &malloc    u64 
    pop            mlibp.alloctable.p u64 
    push           mlibp.alloctable.p u64 
    jumptrue       #5231      u64 
    setargs                   1 0
    push           "Alloctable failure" u64 
    callproc       &mlibp.abortprogram 
#5231: 
    push           mlibp.alloctable.p u64 
    setret                    u64 
    jump           #5232      
#5232: 
    retfn                     u64 
End


Proc mlibp.zalloctable: u64
    param          mlibp.zalloctable.n i64 
    param          mlibp.zalloctable.size i64 
    local          mlibp.zalloctable.p u64 
    procentry                 
    setargs                   2 0
    push           mlibp.zalloctable.size i64 
    push           mlibp.zalloctable.n i64 
    callfn         &mlibp.alloctable u64 
    pop            mlibp.zalloctable.p u64 
    setargs                   2 0
    push           mlibp.zalloctable.n i64 
    push           1          i64 
    add                       i64 
    push           mlibp.zalloctable.size i64 
    mul                       i64 
    push           mlibp.zalloctable.p u64 
    callproc       &mlibp.pcm_clearmem 
    push           mlibp.zalloctable.p u64 
    setret                    u64 
    jump           #5234      
#5234: 
    retfn                     u64 
End


Proc mlibp.checkfreelists:
    param          mlibp.checkfreelists.s u64 
    local          mlibp.checkfreelists.p u64 
    local          mlibp.checkfreelists.q u64 
    local          mlibp.checkfreelists.aa i64 
    local          mlibp.checkfreelists.i i64 
    procentry                 
#5236: 
    push           2          i64 
    pop            mlibp.checkfreelists.i i64 
#5237: 
    push           &mlibp.freelist 
    push           mlibp.checkfreelists.i i64 
    pushptroff                u64 8 0
    pop            mlibp.checkfreelists.p u64 
    jump           #5238      
#5239: 
    push           mlibp.checkfreelists.p i64 
    pop            mlibp.checkfreelists.aa i64 
    push           mlibp.checkfreelists.aa i64 
    push           4294967295 i64 
    jumpgt         #5240      i64 
    push           mlibp.checkfreelists.aa i64 
    push           100        i64 
    jumpge         #5241      i64 
#5240: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mlibp.checkfreelists.s u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "FREE LIST ERROR" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mlibp.checkfreelists.i i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           mlibp.checkfreelists.p u64 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   1 0
    push           mlibp.checkfreelists.q u64 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#5241: 
    push           mlibp.checkfreelists.p u64 
    pop            mlibp.checkfreelists.q u64 
    push           mlibp.checkfreelists.p u64 
    pushptr                   u64 
    pop            mlibp.checkfreelists.p u64 
#5238: 
    push           mlibp.checkfreelists.p u64 
    jumptrue       #5239      u64 
#5242: 
#5243: 
    forup          #5237      i64 1
    opnd           mlibp.checkfreelists.i 
    opnd           2          
#5244: 
#5245: 
    retproc                   
End


Proc mlibp.pcm_alloc32: u64
    local          mlibp.pcm_alloc32.p u64 
    procentry                 
    push           32         i64 
    pop            mlibp.allocbytes i64 
    push           &mlibp.smallmemtotal 
    push           32         i64 
    addto                     i64 
    push           &mlibp.freelist 
    push           2          i64 
    pushptroff                u64 8 0
    store          mlibp.pcm_alloc32.p u64 
    jumpfalse      #5247      u64 
    push           &mlibp.freelist 
    push           2          i64 
    pushptroff                u64 8 0
    pushptr                   u64 
    push           &mlibp.freelist 
    push           2          i64 
    popptroff                 u64 8 0
    push           mlibp.pcm_alloc32.p u64 
    setret                    u64 
    jump           #5248      
#5247: 
    setargs                   1 0
    push           32         i64 
    callfn         &mlibp.pcm_alloc u64 
    setret                    u64 
    jump           #5248      
#5248: 
    retfn                     u64 
End


Proc mlibp.pcm_free32:
    param          mlibp.pcm_free32.p u64 
    procentry                 
    push           &mlibp.smallmemtotal 
    push           32         i64 
    subto                     i64 
    push           &mlibp.freelist 
    push           2          i64 
    pushptroff                u64 8 0
    push           mlibp.pcm_free32.p u64 
    popptr                    u64 
    push           mlibp.pcm_free32.p u64 
    push           &mlibp.freelist 
    push           2          i64 
    popptroff                 u64 8 0
#5250: 
    retproc                   
End


Proc mlibp.outbyte:
    param          mlibp.outbyte.f u64 
    param          mlibp.outbyte.x i64 
    procentry                 
    setargs                   4 0
    push           mlibp.outbyte.f u64 
    push           1          u64 
    push           1          u64 
    push           &mlibp.outbyte.x 
    callproc       &fwrite    
#5252: 
    retproc                   
End


Proc mlibp.outword16:
    param          mlibp.outword16.f u64 
    param          mlibp.outword16.x u64 
    procentry                 
    setargs                   4 0
    push           mlibp.outword16.f u64 
    push           1          u64 
    push           2          u64 
    push           &mlibp.outword16.x 
    callproc       &fwrite    
#5254: 
    retproc                   
End


Proc mlibp.outword:
    param          mlibp.outword.f u64 
    param          mlibp.outword.x u64 
    procentry                 
    setargs                   4 0
    push           mlibp.outword.f u64 
    push           1          u64 
    push           4          u64 
    push           &mlibp.outword.x 
    callproc       &fwrite    
#5256: 
    retproc                   
End


Proc mlibp.outword64:
    param          mlibp.outword64.f u64 
    param          mlibp.outword64.x u64 
    procentry                 
    setargs                   4 0
    push           mlibp.outword64.f u64 
    push           1          u64 
    push           8          u64 
    push           &mlibp.outword64.x 
    callproc       &fwrite    
#5258: 
    retproc                   
End


Proc mlibp.myeof: i64
    param          mlibp.myeof.f u64 
    local          mlibp.myeof.c i64 
    procentry                 
    setargs                   1 0
    push           mlibp.myeof.f u64 
    callfn         &fgetc     i32 
    pop            mlibp.myeof.c i64 
    push           mlibp.myeof.c i64 
    push           -1         i64 
    jumpne         #5260      i64 
    push           1          i64 
    setret                    i64 
    jump           #5261      
#5260: 
    setargs                   2 0
    push           mlibp.myeof.f u64 
    push           mlibp.myeof.c i64 
    callproc       &ungetc    
    push           0          i64 
    setret                    i64 
    jump           #5261      
#5261: 
    retfn                     i64 
End


Proc mlibp.pcm_smallallocz: u64
    param          mlibp.pcm_smallallocz.n i64 
    local          mlibp.pcm_smallallocz.p u64 
    procentry                 
    push           &mlibp.allocupper 
    push           &mlibp.sizeindextable 
    push           mlibp.pcm_smallallocz.n i64 
    pushptroff                u8 1 0
    store          mlibp.alloccode i64 
    pushptroff                i64 8 0
    pop            mlibp.allocbytes i64 
    push           mlibp.pcheapptr u64 
    pop            mlibp.pcm_smallallocz.p u64 
    push           &mlibp.pcheapptr 
    push           mlibp.allocbytes i64 
    addrefoffto               u64 1 0
    push           mlibp.pcheapptr u64 
    push           mlibp.pcheapend u64 
    jumplt         #5263      u64 
    setargs                   1 0
    push           mlibp.allocbytes i64 
    callfn         &mlibp.pcm_newblock u64 
    pop            mlibp.pcm_smallallocz.p u64 
    setargs                   3 0
    push           mlibp.pcm_smallallocz.n u64 
    push           0          i64 
    push           mlibp.pcm_smallallocz.p u64 
    callproc       &memset    
    push           mlibp.pcm_smallallocz.p u64 
    setret                    u64 
    jump           #5264      
#5263: 
    setargs                   3 0
    push           mlibp.pcm_smallallocz.n u64 
    push           0          i64 
    push           mlibp.pcm_smallallocz.p u64 
    callproc       &memset    
    push           mlibp.pcm_smallallocz.p u64 
    setret                    u64 
    jump           #5264      
#5264: 
    retfn                     u64 
End


Proc mlibp.pcm_smallalloc: u64
    param          mlibp.pcm_smallalloc.n i64 
    local          mlibp.pcm_smallalloc.p u64 
    procentry                 
    push           &mlibp.allocupper 
    push           &mlibp.sizeindextable 
    push           mlibp.pcm_smallalloc.n i64 
    pushptroff                u8 1 0
    store          mlibp.alloccode i64 
    pushptroff                i64 8 0
    pop            mlibp.allocbytes i64 
    push           mlibp.pcheapptr u64 
    pop            mlibp.pcm_smallalloc.p u64 
    push           &mlibp.pcheapptr 
    push           mlibp.allocbytes i64 
    addrefoffto               u64 1 0
    push           mlibp.pcheapptr u64 
    push           mlibp.pcheapend u64 
    jumplt         #5266      u64 
    setargs                   1 0
    push           mlibp.allocbytes i64 
    callfn         &mlibp.pcm_newblock u64 
    pop            mlibp.pcm_smallalloc.p u64 
    push           mlibp.pcm_smallalloc.p u64 
    setret                    u64 
    jump           #5267      
#5266: 
    push           mlibp.pcm_smallalloc.p u64 
    setret                    u64 
    jump           #5267      
#5267: 
    retfn                     u64 
End


Proc mlibp.strbuffer_add:
    param          mlibp.strbuffer_add.dest u64 
    param          mlibp.strbuffer_add.s u64 
    param          mlibp.strbuffer_add.n i64 
    local          mlibp.strbuffer_add.newlen i64 
    local          mlibp.strbuffer_add.oldlen i64 
    local          mlibp.strbuffer_add.newptr u64 
    procentry                 
    push           mlibp.strbuffer_add.n i64 
    push           0          i64 
    jumpne         #5269      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "N=0"      u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#5269: 
    push           mlibp.strbuffer_add.n i64 
    push           -1         i64 
    jumpne         #5270      i64 
    setargs                   1 0
    push           mlibp.strbuffer_add.s u64 
    callfn         &strlen    i64 
    pop            mlibp.strbuffer_add.n i64 
#5270: 
    push           mlibp.strbuffer_add.dest u64 
    push           8          
    pushptroff                i32 1 0
    pop            mlibp.strbuffer_add.oldlen i64 
    push           mlibp.strbuffer_add.oldlen i64 
    push           0          i64 
    jumpne         #5271      i64 
    setargs                   1 0
    push           mlibp.strbuffer_add.n i64 
    push           1          i64 
    add                       i64 
    callfn         &mlibp.pcm_alloc u64 
    push           mlibp.strbuffer_add.dest u64 
    push           0          
    popptroff                 u64 1 0
    push           mlibp.allocbytes i64 
    push           mlibp.strbuffer_add.dest u64 
    push           12         
    popptroff                 i32 1 0
    push           mlibp.strbuffer_add.n i64 
    push           mlibp.strbuffer_add.dest u64 
    push           8          
    popptroff                 i32 1 0
    setargs                   3 0
    push           mlibp.strbuffer_add.n u64 
    push           mlibp.strbuffer_add.s u64 
    push           mlibp.strbuffer_add.dest u64 
    pushptr                   u64 
    callproc       &memcpy    
    push           0          u64 
    push           mlibp.strbuffer_add.dest u64 
    pushptr                   u64 
    push           mlibp.strbuffer_add.n i64 
    popptroff                 u8 1 0
    jump           #5272      
#5271: 
    push           mlibp.strbuffer_add.oldlen i64 
    push           mlibp.strbuffer_add.n i64 
    add                       i64 
    pop            mlibp.strbuffer_add.newlen i64 
    push           mlibp.strbuffer_add.newlen i64 
    push           1          i64 
    add                       i64 
    push           mlibp.strbuffer_add.dest u64 
    push           12         
    pushptroff                i32 1 0
    jumple         #5273      i64 
    setargs                   1 0
    push           mlibp.strbuffer_add.newlen i64 
    push           1          i64 
    add                       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            mlibp.strbuffer_add.newptr u64 
    setargs                   3 0
    push           mlibp.strbuffer_add.oldlen u64 
    push           mlibp.strbuffer_add.dest u64 
    pushptr                   u64 
    push           mlibp.strbuffer_add.newptr u64 
    callproc       &memcpy    
    push           mlibp.strbuffer_add.newptr u64 
    push           mlibp.strbuffer_add.dest u64 
    push           0          
    popptroff                 u64 1 0
    push           mlibp.allocbytes i64 
    push           mlibp.strbuffer_add.dest u64 
    push           12         
    popptroff                 i32 1 0
#5273: 
    setargs                   3 0
    push           mlibp.strbuffer_add.n u64 
    push           mlibp.strbuffer_add.s u64 
    push           mlibp.strbuffer_add.dest u64 
    pushptr                   u64 
    push           mlibp.strbuffer_add.oldlen i64 
    addrefoff                 u64 1 0
    callproc       &memcpy    
    push           0          u64 
    push           mlibp.strbuffer_add.dest u64 
    pushptr                   u64 
    push           mlibp.strbuffer_add.newlen i64 
    popptroff                 u8 1 0
    push           mlibp.strbuffer_add.newlen i64 
    push           mlibp.strbuffer_add.dest u64 
    push           8          
    popptroff                 i32 1 0
#5272: 
    retproc                   
End


Proc mlibp.gs_init:
    param          mlibp.gs_init.dest u64 
    procentry                 
    setargs                   2 0
    push           16         i64 
    push           mlibp.gs_init.dest u64 
    callproc       &mlibp.pcm_clearmem 
#5275: 
    retproc                   
End


Proc mlibp.gs_free:
    param          mlibp.gs_free.dest u64 
    procentry                 
    push           mlibp.gs_free.dest u64 
    push           12         
    pushptroff                i32 1 0
    jumpfalse      #5277      i64 
    setargs                   2 0
    push           mlibp.gs_free.dest u64 
    push           12         
    pushptroff                i32 1 0
    push           mlibp.gs_free.dest u64 
    pushptr                   u64 
    callproc       &mlibp.pcm_free 
#5277: 
#5278: 
    retproc                   
End


Proc mlibp.gs_str:
    param          mlibp.gs_str.dest u64 
    param          mlibp.gs_str.s u64 
    procentry                 
    setargs                   3 0
    push           -1         i64 
    push           mlibp.gs_str.s u64 
    push           mlibp.gs_str.dest u64 
    callproc       &mlibp.strbuffer_add 
#5280: 
    retproc                   
End


Proc mlibp.gs_char:
    param          mlibp.gs_char.dest u64 
    param          mlibp.gs_char.c i64 
    local          mlibp.gs_char.s block:16 
    procentry                 
    push           mlibp.gs_char.c u64 
    push           &mlibp.gs_char.s 
    push           1          i64 
    popptroff                 u8 1 -1
    push           0          u64 
    push           &mlibp.gs_char.s 
    push           2          i64 
    popptroff                 u8 1 -1
    setargs                   3 0
    push           1          i64 
    push           &mlibp.gs_char.s 
    push           mlibp.gs_char.dest u64 
    callproc       &mlibp.strbuffer_add 
#5282: 
    retproc                   
End


Proc mlibp.gs_strn:
    param          mlibp.gs_strn.dest u64 
    param          mlibp.gs_strn.s u64 
    param          mlibp.gs_strn.length i64 
    procentry                 
    setargs                   3 0
    push           mlibp.gs_strn.length i64 
    push           mlibp.gs_strn.s u64 
    push           mlibp.gs_strn.dest u64 
    callproc       &mlibp.strbuffer_add 
#5284: 
    retproc                   
End


Proc mlibp.gs_strvar:
    param          mlibp.gs_strvar.dest u64 
    param          mlibp.gs_strvar.s u64 
    procentry                 
    setargs                   3 0
    push           -1         i64 
    push           mlibp.gs_strvar.s u64 
    pushptr                   u64 
    push           mlibp.gs_strvar.dest u64 
    callproc       &mlibp.strbuffer_add 
#5286: 
    retproc                   
End


Proc mlibp.gs_strint:
    param          mlibp.gs_strint.dest u64 
    param          mlibp.gs_strint.a i64 
    procentry                 
    setargs                   3 0
    push           -1         i64 
    setargs                   2 0
    push           0          u64 
    push           mlibp.gs_strint.a i64 
    callfn         &msysp.strint u64 
    push           mlibp.gs_strint.dest u64 
    callproc       &mlibp.strbuffer_add 
#5288: 
    retproc                   
End


Proc mlibp.gs_strln:
    param          mlibp.gs_strln.dest u64 
    param          mlibp.gs_strln.s u64 
    procentry                 
    setargs                   2 0
    push           mlibp.gs_strln.s u64 
    push           mlibp.gs_strln.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   1 0
    push           mlibp.gs_strln.dest u64 
    callproc       &mlibp.gs_line 
#5290: 
    retproc                   
End


Proc mlibp.gs_strsp:
    param          mlibp.gs_strsp.dest u64 
    param          mlibp.gs_strsp.s u64 
    procentry                 
    setargs                   2 0
    push           mlibp.gs_strsp.s u64 
    push           mlibp.gs_strsp.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           " "        u64 
    push           mlibp.gs_strsp.dest u64 
    callproc       &mlibp.gs_str 
#5292: 
    retproc                   
End


Proc mlibp.gs_line:
    param          mlibp.gs_line.dest u64 
    procentry                 
    setargs                   3 0
    push           -1         i64 
    push           "\c\n"     u64 
    push           mlibp.gs_line.dest u64 
    callproc       &mlibp.strbuffer_add 
#5294: 
    retproc                   
End


Proc mlibp.gs_getcol: i64
    param          mlibp.gs_getcol.dest u64 
    procentry                 
    push           mlibp.gs_getcol.dest u64 
    push           8          
    pushptroff                i32 1 0
    setret                    i64 
    jump           #5296      
#5296: 
    retfn                     i64 
End


Proc mlibp.gs_leftstr:
    param          mlibp.gs_leftstr.dest u64 
    param          mlibp.gs_leftstr.s u64 
    param          mlibp.gs_leftstr.w i64 
    param          mlibp.gs_leftstr.padch i64 
    local          mlibp.gs_leftstr.col i64 
    local          mlibp.gs_leftstr.i i64 
    local          mlibp.gs_leftstr.n i64 
    local          mlibp.gs_leftstr.slen i64 
    local          mlibp.gs_leftstr.str block:2560 
    procentry                 
    push           mlibp.gs_leftstr.dest u64 
    push           8          
    pushptroff                i32 1 0
    pop            mlibp.gs_leftstr.col i64 
    setargs                   2 0
    push           mlibp.gs_leftstr.s u64 
    push           &mlibp.gs_leftstr.str 
    callproc       &strcpy    
    setargs                   1 0
    push           mlibp.gs_leftstr.s u64 
    callfn         &strlen    i64 
    pop            mlibp.gs_leftstr.slen i64 
    push           mlibp.gs_leftstr.w i64 
    push           mlibp.gs_leftstr.slen i64 
    sub                       i64 
    pop            mlibp.gs_leftstr.n i64 
    push           mlibp.gs_leftstr.n i64 
    push           0          i64 
    jumple         #5298      i64 
#5299: 
    push           1          i64 
    pop            mlibp.gs_leftstr.i i64 
    push           mlibp.gs_leftstr.n i64 
    push           1          i64 
    jumplt         #5300      i64 
#5301: 
    push           mlibp.gs_leftstr.padch u64 
    push           &mlibp.gs_leftstr.str 
    push           mlibp.gs_leftstr.slen i64 
    push           mlibp.gs_leftstr.i i64 
    add                       i64 
    popptroff                 u8 1 -1
#5302: 
    forup          #5301      i64 1
    opnd           mlibp.gs_leftstr.i 
    opnd           mlibp.gs_leftstr.n 
#5300: 
    push           0          u64 
    push           &mlibp.gs_leftstr.str 
    push           mlibp.gs_leftstr.slen i64 
    push           mlibp.gs_leftstr.n i64 
    add                       i64 
    popptroff                 u8 1 0
#5298: 
    setargs                   2 0
    push           &mlibp.gs_leftstr.str 
    push           mlibp.gs_leftstr.dest u64 
    callproc       &mlibp.gs_str 
#5303: 
    retproc                   
End


Proc mlibp.gs_leftint:
    param          mlibp.gs_leftint.dest u64 
    param          mlibp.gs_leftint.a i64 
    param          mlibp.gs_leftint.w i64 
    param          mlibp.gs_leftint.padch i64 
    procentry                 
    setargs                   4 0
    push           mlibp.gs_leftint.padch i64 
    push           mlibp.gs_leftint.w i64 
    setargs                   2 0
    push           0          u64 
    push           mlibp.gs_leftint.a i64 
    callfn         &msysp.strint u64 
    push           mlibp.gs_leftint.dest u64 
    callproc       &mlibp.gs_leftstr 
#5305: 
    retproc                   
End


Proc mlibp.gs_padto:
    param          mlibp.gs_padto.dest u64 
    param          mlibp.gs_padto.col i64 
    param          mlibp.gs_padto.ch i64 
    local          mlibp.gs_padto.n i64 
    local          mlibp.gs_padto.str block:2560 
    local          mlibp.gs_padto.i i64 
    procentry                 
    push           mlibp.gs_padto.col i64 
    push           mlibp.gs_padto.dest u64 
    push           8          
    pushptroff                i32 1 0
    sub                       i64 
    pop            mlibp.gs_padto.n i64 
    push           mlibp.gs_padto.n i64 
    push           0          i64 
    jumpgt         #5307      i64 
    jump           #5308      
#5307: 
#5309: 
    push           1          i64 
    pop            mlibp.gs_padto.i i64 
    push           mlibp.gs_padto.n i64 
    push           1          i64 
    jumplt         #5310      i64 
#5311: 
    push           mlibp.gs_padto.ch u64 
    push           &mlibp.gs_padto.str 
    push           mlibp.gs_padto.i i64 
    popptroff                 u8 1 -1
#5312: 
    forup          #5311      i64 1
    opnd           mlibp.gs_padto.i 
    opnd           mlibp.gs_padto.n 
#5310: 
    push           0          u64 
    push           &mlibp.gs_padto.str 
    push           mlibp.gs_padto.n i64 
    popptroff                 u8 1 0
    setargs                   2 0
    push           &mlibp.gs_padto.str 
    push           mlibp.gs_padto.dest u64 
    callproc       &mlibp.gs_str 
#5308: 
    retproc                   
End


Proc mlibp.gs_println:
    param          mlibp.gs_println.dest u64 
    param          mlibp.gs_println.f u64 
    procentry                 
    push           0          u64 
    push           mlibp.gs_println.dest u64 
    pushptr                   u64 
    push           mlibp.gs_println.dest u64 
    push           8          
    pushptroff                i32 1 0
    popptroff                 u8 1 0
    push           mlibp.gs_println.f u64 
    push           0          u64 
    jumpne         #5314      u64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mlibp.gs_println.dest u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           "\c"       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #5315      
#5314: 
    setargs                   1 0
    push           mlibp.gs_println.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           mlibp.gs_println.dest u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           "\c"       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#5315: 
#5316: 
    retproc                   
End


Proc mlibp.nextcmdparam: i64
    param          mlibp.nextcmdparam.paramno u64 
    param          mlibp.nextcmdparam.name u64 
    param          mlibp.nextcmdparam.value u64 
    param          mlibp.nextcmdparam.defext u64 
    local          mlibp.nextcmdparam.q u64 
    local          mlibp.nextcmdparam.item u64 
    local          mlibp.nextcmdparam.fileext u64 
    local          mlibp.nextcmdparam.rest u64 
    local          mlibp.nextcmdparam.length i64 
    procentry                 
!reenter::
#5318: 
    push           0          u64 
    push           mlibp.nextcmdparam.value u64 
    popptr                    u64 
    push           0          u64 
    push           mlibp.nextcmdparam.name u64 
    popptr                    u64 
    push           mlibp.nextcmdparam.infile i64 
    jumpfalse      #5319      i64 
    setargs                   2 0
    push           &mlibp.nextcmdparam.item 
    push           &mlibp.nextcmdparam.fileptr 
    callfn         &mlibp.readnextfileitem i64 
    push           0          i64 
    jumpne         #5320      i64 
    setargs                   1 0
    push           mlibp.nextcmdparam.filestart u64 
    callproc       &free      
    push           0          i64 
    pop            mlibp.nextcmdparam.infile i64 
    jump           #5318      
#5320: 
    jump           #5321      
#5319: 
    push           mlibp.nextcmdparam.paramno u64 
    pushptr                   i64 
    push           msysp.nsysparams i64 
    jumple         #5322      i64 
    push           0          i64 
    setret                    i64 
    jump           #5323      
#5322: 
    push           &msysp.sysparams 
    push           mlibp.nextcmdparam.paramno u64 
    pushptr                   i64 
    pushptroff                u64 8 -8
    pop            mlibp.nextcmdparam.item u64 
    push           mlibp.nextcmdparam.paramno u64 
    incr                      i64 1
    setargs                   1 0
    push           mlibp.nextcmdparam.item u64 
    callfn         &strlen    i64 
    pop            mlibp.nextcmdparam.length i64 
    push           mlibp.nextcmdparam.item u64 
    pushptr                   u8 
    push           64         u64 
    jumpne         #5324      u64 
    setargs                   1 0
    push           mlibp.nextcmdparam.item u64 
    push           1          i64 
    addrefoff                 u64 1 0
    callfn         &mlibp.readfile u64 
    store          mlibp.nextcmdparam.fileptr u64 
    pop            mlibp.nextcmdparam.filestart u64 
    push           mlibp.nextcmdparam.filestart u64 
    push           0          u64 
    jumpne         #5325      u64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Can't open" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mlibp.nextcmdparam.item u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           7          i64 
    stop                      
#5325: 
    push           1          i64 
    pop            mlibp.nextcmdparam.infile i64 
    jump           #5318      
#5324: 
    push           mlibp.nextcmdparam.item u64 
    pushptr                   u8 
    push           58         u64 
    jumpne         #5326      u64 
    push           1          i64 
    pop            mlibp.nextcmdparam.colonseen u8 
    push           4          i64 
    setret                    i64 
    jump           #5323      
#5326: 
#5321: 
    push           0          u64 
    push           mlibp.nextcmdparam.value u64 
    popptr                    u64 
    push           mlibp.nextcmdparam.item u64 
    pushptr                   u8 
    push           45         u64 
    jumpne         #5327      u64 
    push           mlibp.nextcmdparam.item u64 
    startmult                 
    push           mlibp.nextcmdparam.colonseen u8 
    jumpfalse      #5328      i64 
    push           0          i64 
    resetmult                 
    jump           #5329      
#5328: 
    push           1          i64 
    endmult                   
#5329: 
    addrefoff                 u64 1 0
    push           mlibp.nextcmdparam.name u64 
    popptr                    u64 
    setargs                   2 0
    push           58         u64 
    push           mlibp.nextcmdparam.item u64 
    callfn         &strchr    u64 
    pop            mlibp.nextcmdparam.q u64 
    push           mlibp.nextcmdparam.q u64 
    jumptrue       #5330      u64 
    setargs                   2 0
    push           61         u64 
    push           mlibp.nextcmdparam.item u64 
    callfn         &strchr    u64 
    pop            mlibp.nextcmdparam.q u64 
#5330: 
    push           mlibp.nextcmdparam.q u64 
    jumpfalse      #5331      u64 
    push           mlibp.nextcmdparam.q u64 
    push           1          i64 
    addrefoff                 u64 1 0
    push           mlibp.nextcmdparam.value u64 
    popptr                    u64 
    push           0          u64 
    push           mlibp.nextcmdparam.q u64 
    popptr                    u8 
#5331: 
    startmult                 
    push           mlibp.nextcmdparam.colonseen u8 
    jumpfalse      #5332      i64 
    push           5          i64 
    resetmult                 
    jump           #5333      
#5332: 
    push           1          i64 
    endmult                   
#5333: 
    setret                    i64 
    jump           #5323      
#5327: 
    setargs                   2 0
    push           0          i64 
    push           mlibp.nextcmdparam.item u64 
    callfn         &mlibp.extractext u64 
    pop            mlibp.nextcmdparam.fileext u64 
    push           mlibp.nextcmdparam.item u64 
    push           mlibp.nextcmdparam.name u64 
    popptr                    u64 
    push           mlibp.nextcmdparam.fileext u64 
    pushptr                   u8 
    push           0          i64 
    jumpne         #5334      i64 
    setargs                   2 0
    push           mlibp.nextcmdparam.name u64 
    pushptr                   u64 
    push           &mlibp.nextcmdparam.str 
    callproc       &strcpy    
    push           mlibp.nextcmdparam.defext u64 
    jumpfalse      #5335      u64 
    push           mlibp.nextcmdparam.colonseen u8 
    jumptrue       #5335      i64 
    setargs                   2 0
    push           mlibp.nextcmdparam.defext u64 
    push           &mlibp.nextcmdparam.str 
    callfn         &mlibp.addext u64 
    push           mlibp.nextcmdparam.name u64 
    popptr                    u64 
#5335: 
    jump           #5336      
#5334: 
    setargs                   2 0
    push           "dll"      u64 
    push           mlibp.nextcmdparam.fileext u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #5337      i64 
    startmult                 
    push           mlibp.nextcmdparam.colonseen u8 
    jumpfalse      #5338      i64 
    push           5          i64 
    resetmult                 
    jump           #5339      
#5338: 
    push           3          i64 
    endmult                   
#5339: 
    setret                    i64 
    jump           #5323      
#5337: 
#5336: 
    startmult                 
    push           mlibp.nextcmdparam.colonseen u8 
    jumpfalse      #5340      i64 
    push           5          i64 
    resetmult                 
    jump           #5341      
#5340: 
    push           2          i64 
    endmult                   
#5341: 
    setret                    i64 
    jump           #5323      
#5323: 
    retfn                     i64 
End


Proc mlibp.readnextfileitem: i64
    param          mlibp.readnextfileitem.fileptr u64 
    param          mlibp.readnextfileitem.item u64 
    local          mlibp.readnextfileitem.p u64 
    local          mlibp.readnextfileitem.pstart u64 
    local          mlibp.readnextfileitem.pend u64 
    local          mlibp.readnextfileitem.n i64 
    procentry                 
    push           mlibp.readnextfileitem.fileptr u64 
    pushptr                   u64 
    pop            mlibp.readnextfileitem.p u64 
!reenter::
#5343: 
#5344: 
    push           mlibp.readnextfileitem.p u64 
    pushptr                   u8 
    push           32         u64 
    casejumpeq     #5345      u64 0
    push           9          u64 
    casejumpeq     #5345      u64 0
    push           13         u64 
    casejumpeq     #5345      u64 0
    push           10         u64 
    casejumpeq     #5345      u64 0
    push           26         u64 
    casejumpeq     #5346      u64 0
    push           0          u64 
    casejumpeq     #5346      u64 0
    popstack                  u64 
    jump           #5347      
#5345: 
    push           &mlibp.readnextfileitem.p 
    incr                      u64 1
    jump           #5348      
#5346: 
    push           0          i64 
    setret                    i64 
    jump           #5349      
    jump           #5348      
#5347: 
    jump           #5350      
#5348: 
    jump           #5344      
#5350: 
    push           mlibp.readnextfileitem.p u64 
    pushptr                   u8 
    push           33         u64 
    casejumpeq     #5351      u64 0
    push           35         u64 
    casejumpeq     #5351      u64 0
    popstack                  u64 
    jump           #5352      
#5351: 
    push           &mlibp.readnextfileitem.p 
    incr                      u64 1
#5353: 
    push           &mlibp.readnextfileitem.p 
    loadincr                  u64 1
    pushptr                   u8 
    push           10         u64 
    casejumpeq     #5354      u64 0
    push           26         u64 
    casejumpeq     #5355      u64 0
    push           0          u64 
    casejumpeq     #5355      u64 0
    popstack                  u64 
    jump           #5356      
#5354: 
    jump           #5343      
    jump           #5353      
#5355: 
    push           mlibp.readnextfileitem.p u64 
    push           1          i64 
    subrefoff                 u64 1 0
    push           mlibp.readnextfileitem.fileptr u64 
    popptr                    u64 
    push           0          i64 
    setret                    i64 
    jump           #5349      
    jump           #5353      
#5356: 
    jump           #5353      
#5357: 
    jump           #5358      
#5352: 
#5358: 
    push           mlibp.readnextfileitem.p u64 
    pushptr                   u8 
    push           34         u64 
    casejumpeq     #5359      u64 0
    popstack                  u64 
    jump           #5360      
#5359: 
    push           &mlibp.readnextfileitem.p 
    incrload                  u64 1
    pop            mlibp.readnextfileitem.pstart u64 
#5361: 
    push           mlibp.readnextfileitem.p u64 
    pushptr                   u8 
    push           0          u64 
    casejumpeq     #5362      u64 0
    push           26         u64 
    casejumpeq     #5362      u64 0
    push           34         u64 
    casejumpeq     #5363      u64 0
    popstack                  u64 
    jump           #5364      
#5362: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Unexpected EOF in @file" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           8          i64 
    stop                      
    jump           #5365      
#5363: 
    push           &mlibp.readnextfileitem.p 
    loadincr                  u64 1
    pop            mlibp.readnextfileitem.pend u64 
    push           mlibp.readnextfileitem.p u64 
    pushptr                   u8 
    push           44         u64 
    jumpne         #5366      u64 
    push           &mlibp.readnextfileitem.p 
    incr                      u64 1
#5366: 
    jump           #5367      
    jump           #5365      
#5364: 
#5365: 
    push           &mlibp.readnextfileitem.p 
    incr                      u64 1
    jump           #5361      
#5367: 
    jump           #5368      
#5360: 
    push           mlibp.readnextfileitem.p u64 
    pop            mlibp.readnextfileitem.pstart u64 
#5369: 
    push           mlibp.readnextfileitem.p u64 
    pushptr                   u8 
    push           0          u64 
    casejumpeq     #5370      u64 0
    push           26         u64 
    casejumpeq     #5370      u64 0
    push           32         u64 
    casejumpeq     #5371      u64 0
    push           9          u64 
    casejumpeq     #5371      u64 0
    push           44         u64 
    casejumpeq     #5371      u64 0
    push           13         u64 
    casejumpeq     #5371      u64 0
    push           10         u64 
    casejumpeq     #5371      u64 0
    popstack                  u64 
    jump           #5372      
#5370: 
    push           mlibp.readnextfileitem.p u64 
    pop            mlibp.readnextfileitem.pend u64 
    jump           #5373      
    jump           #5374      
#5371: 
    push           &mlibp.readnextfileitem.p 
    loadincr                  u64 1
    pop            mlibp.readnextfileitem.pend u64 
    jump           #5373      
    jump           #5374      
#5372: 
#5374: 
    push           &mlibp.readnextfileitem.p 
    incr                      u64 1
    jump           #5369      
#5373: 
#5368: 
    push           mlibp.readnextfileitem.pend u64 
    push           mlibp.readnextfileitem.pstart u64 
    subref                    i64 1
    pop            mlibp.readnextfileitem.n i64 
    push           mlibp.readnextfileitem.n i64 
    push           256        i64 
    jumplt         #5375      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "@file item too long" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           9          i64 
    stop                      
#5375: 
    setargs                   3 0
    push           mlibp.readnextfileitem.n u64 
    push           mlibp.readnextfileitem.pstart u64 
    push           &mlibp.readnextfileitem.str 
    callproc       &memcpy    
    push           0          u64 
    push           &mlibp.readnextfileitem.str 
    push           mlibp.readnextfileitem.n i64 
    popptroff                 u8 1 0
    push           &mlibp.readnextfileitem.str 
    push           mlibp.readnextfileitem.item u64 
    popptr                    u64 
    push           mlibp.readnextfileitem.p u64 
    push           mlibp.readnextfileitem.fileptr u64 
    popptr                    u64 
    push           1          i64 
    setret                    i64 
    jump           #5349      
#5349: 
    retfn                     i64 
End


Proc mlibp.ipadstr:
    param          mlibp.ipadstr.s u64 
    param          mlibp.ipadstr.width i64 
    param          mlibp.ipadstr.padchar u64 
    local          mlibp.ipadstr.n i64 
    local          mlibp.ipadstr.av_1 i64 
    procentry                 
    setargs                   1 0
    push           mlibp.ipadstr.s u64 
    callfn         &strlen    i64 
    pop            mlibp.ipadstr.n i64 
#5377: 
    push           mlibp.ipadstr.width i64 
    push           mlibp.ipadstr.n i64 
    sub                       i64 
    pop            mlibp.ipadstr.av_1 i64 
    push           mlibp.ipadstr.av_1 i64 
    push           0          i64 
    jumple         #5378      i64 
#5379: 
    setargs                   2 0
    push           mlibp.ipadstr.padchar u64 
    push           mlibp.ipadstr.s u64 
    callproc       &strcat    
#5380: 
    to             #5379      
    opnd           mlibp.ipadstr.av_1 
#5378: 
#5381: 
    retproc                   
End


Proc mlibp.padstr: u64
    param          mlibp.padstr.s u64 
    param          mlibp.padstr.width i64 
    param          mlibp.padstr.padchar u64 
    procentry                 
    setargs                   2 0
    push           mlibp.padstr.s u64 
    push           &mlibp.padstr.str 
    callproc       &strcpy    
    setargs                   3 0
    push           mlibp.padstr.padchar u64 
    push           mlibp.padstr.width i64 
    push           &mlibp.padstr.str 
    callproc       &mlibp.ipadstr 
    push           &mlibp.padstr.str 
    setret                    u64 
    jump           #5383      
#5383: 
    retfn                     u64 
End


Proc mlibp.chr: u64
    param          mlibp.chr.c i64 
    procentry                 
    push           mlibp.chr.c u64 
    push           &mlibp.chr.str 
    push           1          i64 
    popptroff                 u8 1 -1
    push           0          u64 
    push           &mlibp.chr.str 
    push           2          i64 
    popptroff                 u8 1 -1
    push           &mlibp.chr.str 
    setret                    u64 
    jump           #5385      
#5385: 
    retfn                     u64 
End


Proc mlibp.cmpstring: i64
    param          mlibp.cmpstring.s u64 
    param          mlibp.cmpstring.t u64 
    local          mlibp.cmpstring.res i64 
    procentry                 
    startmult                 
    setargs                   2 0
    push           mlibp.cmpstring.t u64 
    push           mlibp.cmpstring.s u64 
    callfn         &strcmp    i32 
    store          mlibp.cmpstring.res i64 
    push           0          i64 
    jumpge         #5387      i64 
    push           -1         i64 
    resetmult                 
    jump           #5388      
#5387: 
    push           mlibp.cmpstring.res i64 
    push           0          i64 
    jumple         #5389      i64 
    push           1          i64 
    resetmult                 
    jump           #5388      
#5389: 
    push           0          i64 
    endmult                   
#5388: 
    setret                    i64 
    jump           #5390      
#5390: 
    retfn                     i64 
End


Proc mlibp.cmpstringn: i64
    param          mlibp.cmpstringn.s u64 
    param          mlibp.cmpstringn.t u64 
    param          mlibp.cmpstringn.n i64 
    local          mlibp.cmpstringn.res i64 
    procentry                 
    startmult                 
    setargs                   3 0
    push           mlibp.cmpstringn.n u64 
    push           mlibp.cmpstringn.t u64 
    push           mlibp.cmpstringn.s u64 
    callfn         &strncmp   i32 
    store          mlibp.cmpstringn.res i64 
    push           0          i64 
    jumpge         #5392      i64 
    push           -1         i64 
    resetmult                 
    jump           #5393      
#5392: 
    push           mlibp.cmpstringn.res i64 
    push           0          i64 
    jumple         #5394      i64 
    push           1          i64 
    resetmult                 
    jump           #5393      
#5394: 
    push           0          i64 
    endmult                   
#5393: 
    setret                    i64 
    jump           #5395      
#5395: 
    retfn                     i64 
End


Proc mlibp.eqstring: i64
    param          mlibp.eqstring.s u64 
    param          mlibp.eqstring.t u64 
    procentry                 
    setargs                   2 0
    push           mlibp.eqstring.t u64 
    push           mlibp.eqstring.s u64 
    callfn         &strcmp    i32 
    push           0          i64 
    seteq                     i64 
    setret                    i64 
    jump           #5397      
#5397: 
    retfn                     i64 
End


Proc mlibp.cmpbytes: i64
    param          mlibp.cmpbytes.p u64 
    param          mlibp.cmpbytes.q u64 
    param          mlibp.cmpbytes.n i64 
    local          mlibp.cmpbytes.res i64 
    procentry                 
    startmult                 
    setargs                   3 0
    push           mlibp.cmpbytes.n u64 
    push           mlibp.cmpbytes.q u64 
    push           mlibp.cmpbytes.p u64 
    callfn         &memcmp    i32 
    store          mlibp.cmpbytes.res i64 
    push           0          i64 
    jumpge         #5399      i64 
    push           -1         i64 
    resetmult                 
    jump           #5400      
#5399: 
    push           mlibp.cmpbytes.res i64 
    push           0          i64 
    jumple         #5401      i64 
    push           1          i64 
    resetmult                 
    jump           #5400      
#5401: 
    push           0          i64 
    endmult                   
#5400: 
    setret                    i64 
    jump           #5402      
#5402: 
    retfn                     i64 
End


Proc mlibp.eqbytes: i64
    param          mlibp.eqbytes.p u64 
    param          mlibp.eqbytes.q u64 
    param          mlibp.eqbytes.n i64 
    procentry                 
    setargs                   3 0
    push           mlibp.eqbytes.n u64 
    push           mlibp.eqbytes.q u64 
    push           mlibp.eqbytes.p u64 
    callfn         &memcmp    i32 
    push           0          i64 
    seteq                     i64 
    setret                    i64 
    jump           #5404      
#5404: 
    retfn                     i64 
End


Proc mlibp.mseed:
    param          mlibp.mseed.a u64 
    param          mlibp.mseed.b u64 
    procentry                 
    push           mlibp.mseed.a i64 
    push           &mlibp.seed 
    push           1          i64 
    popptroff                 i64 8 -8
    push           mlibp.mseed.b u64 
    jumpfalse      #5406      u64 
    push           mlibp.mseed.b i64 
    push           &mlibp.seed 
    push           2          i64 
    popptroff                 i64 8 -8
    jump           #5407      
#5406: 
    push           &mlibp.seed 
    push           2          i64 
    addrefoff                 i64 8 -8
    push           mlibp.mseed.a i64 
    ixorto                    i64 
#5407: 
#5408: 
    retproc                   
End


Proc mlibp.mrandom: u64
    local          mlibp.mrandom.x i64 
    local          mlibp.mrandom.y i64 
    procentry                 
    push           &mlibp.seed 
    push           1          i64 
    pushptroff                i64 8 -8
    pop            mlibp.mrandom.x i64 
    push           &mlibp.seed 
    push           2          i64 
    pushptroff                i64 8 -8
    pop            mlibp.mrandom.y i64 
    push           mlibp.mrandom.y i64 
    push           &mlibp.seed 
    push           1          i64 
    popptroff                 i64 8 -8
    push           &mlibp.mrandom.x 
    push           mlibp.mrandom.x i64 
    push           23         i64 
    shl                       i64 
    ixorto                    i64 
    push           mlibp.mrandom.x i64 
    push           mlibp.mrandom.y i64 
    ixor                      i64 
    push           mlibp.mrandom.x i64 
    push           17         i64 
    shr                       i64 
    ixor                      i64 
    push           mlibp.mrandom.y i64 
    push           26         i64 
    shr                       i64 
    ixor                      i64 
    push           &mlibp.seed 
    push           2          i64 
    popptroff                 i64 8 -8
    push           &mlibp.seed 
    push           2          i64 
    pushptroff                i64 8 -8
    push           mlibp.mrandom.y i64 
    add                       u64 
    setret                    u64 
    jump           #5410      
#5410: 
    retfn                     u64 
End


Proc mlibp.mrandomp: i64
    procentry                 
    setargs                   0 0
    callfn         &mlibp.mrandom i64 
    push           9223372036854775807 i64 
    iand                      i64 
    setret                    i64 
    jump           #5412      
#5412: 
    retfn                     i64 
End


Proc mlibp.mrandomint: i64
    param          mlibp.mrandomint.n i64 
    procentry                 
    setargs                   0 0
    callfn         &mlibp.mrandomp i64 
    push           mlibp.mrandomint.n i64 
    irem                      i64 
    setret                    i64 
    jump           #5414      
#5414: 
    retfn                     i64 
End


Proc mlibp.mrandomrange: i64
    param          mlibp.mrandomrange.a i64 
    param          mlibp.mrandomrange.b i64 
    local          mlibp.mrandomrange.span i64 
    procentry                 
    push           mlibp.mrandomrange.b i64 
    push           mlibp.mrandomrange.a i64 
    sub                       i64 
    push           1          i64 
    add                       i64 
    pop            mlibp.mrandomrange.span i64 
    push           mlibp.mrandomrange.span i64 
    push           0          i64 
    jumpgt         #5416      i64 
    push           0          i64 
    setret                    i64 
    jump           #5417      
#5416: 
    setargs                   0 0
    callfn         &mlibp.mrandomp i64 
    push           mlibp.mrandomrange.span i64 
    irem                      i64 
    push           mlibp.mrandomrange.a i64 
    add                       i64 
    setret                    i64 
    jump           #5417      
#5417: 
    retfn                     i64 
End


Proc mlibp.mrandomreal: r64
    local          mlibp.mrandomreal.x r64 
    procentry                 
#5419: 
    setargs                   0 0
    callfn         &mlibp.mrandomp i64 
    float                     r64 i64 
    push           9.2233720368547758e+018 r64 
    div                       r64 
    pop            mlibp.mrandomreal.x r64 
#5420: 
    push           mlibp.mrandomreal.x r64 
    push           1.0000000000000000e+000 r64 
    jumpeq         #5419      r64 
#5421: 
    push           mlibp.mrandomreal.x r64 
    setret                    r64 
    jump           #5422      
#5422: 
    retfn                     r64 
End


Proc mlibp.mrandomreal1: r64
    procentry                 
    setargs                   0 0
    callfn         &mlibp.mrandomp i64 
    push           9223372036854775807 i64 
    idiv                      i64 
    float                     r64 i64 
    setret                    r64 
    jump           #5424      
#5424: 
    retfn                     r64 
End


Proc mlibp.checkpackfile: u64
    local          mlibp.checkpackfile.a i64 
    local          mlibp.checkpackfile.offset i64 
    local          mlibp.checkpackfile.i i64 
    local          mlibp.checkpackfile.size i64 
    local          mlibp.checkpackfile.name block:100 
    local          mlibp.checkpackfile.exefile block:300 
    local          mlibp.checkpackfile.packexeptr u64 
    local          mlibp.checkpackfile.packexesize i64 
    local          mlibp.checkpackfile.packfilename u64 
    local          mlibp.checkpackfile.packfilesize i64 
    local          mlibp.checkpackfile.packfileptr u64 
    procentry                 
    setargs                   2 0
    setargs                   0 0
    callfn         &mwindowsp.os_gethostname u64 
    push           &mlibp.checkpackfile.exefile 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcpy    
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Attempting to open" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mlibp.checkpackfile.exefile 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           &mlibp.checkpackfile.exefile 
    push           0          
    addrefoff                 u8 1 0
    callfn         &mlibp.readfile u64 
    pop            mlibp.checkpackfile.packexeptr u64 
    push           mlibp.checkpackfile.packexeptr u64 
    jumptrue       #5426      u64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Can't open" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mlibp.checkpackfile.exefile 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   1 0
    push           &mlibp.checkpackfile.packexeptr 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           0          
    stop                      
#5426: 
    push           mlibp.rfsize i64 
    pop            mlibp.checkpackfile.packexesize i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "File read OK. Size" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mlibp.checkpackfile.packexesize i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           mlibp.checkpackfile.packexeptr u64 
    push           mlibp.checkpackfile.packexesize i64 
    push           4          i64 
    sub                       i64 
    pushptroff                i32 1 0
    pop            mlibp.checkpackfile.a i64 
    push           mlibp.checkpackfile.a i64 
    push           1262568272 i64 
    jumpeq         #5427      i64 
    setargs                   1 0
    push           mlibp.checkpackfile.packexeptr u64 
    callproc       &free      
    push           0          u64 
    pop            mlibp.checkpackfile.packfileptr u64 
    push           0          u64 
    setret                    u64 
    jump           #5428      
#5427: 
    push           mlibp.checkpackfile.packexeptr u64 
    push           mlibp.checkpackfile.packexesize i64 
    push           8          i64 
    sub                       i64 
    pushptroff                i32 1 0
    pop            mlibp.checkpackfile.offset i64 
    push           mlibp.checkpackfile.packexeptr u64 
    push           mlibp.checkpackfile.offset i64 
    addrefoff                 u64 1 0
    pop            mlibp.checkpackfile.packfilename u64 
    push           &mlibp.checkpackfile.offset 
    setargs                   1 0
    push           mlibp.checkpackfile.packfilename u64 
    callfn         &strlen    i64 
    push           1          i64 
    add                       i64 
    addto                     i64 
    push           mlibp.checkpackfile.packexeptr u64 
    push           mlibp.checkpackfile.offset i64 
    pushptroff                i32 1 0
    pop            mlibp.checkpackfile.packfilesize i64 
    push           mlibp.checkpackfile.packexeptr u64 
    push           mlibp.checkpackfile.offset i64 
    addrefoff                 u64 1 4
    pop            mlibp.checkpackfile.packfileptr u64 
    push           mlibp.checkpackfile.packfileptr u64 
    setret                    u64 
    jump           #5428      
#5428: 
    retfn                     u64 
End


Proc mlibp.pcm_allocx: u64
    local          mlibp.pcm_allocx.p u64 
    procentry                 
    push           32         i64 
    pop            mlibp.allocbytes i64 
    startmult                 
    push           &mlibp.freelist 
    push           2          i64 
    pushptroff                u64 8 0
    store          mlibp.pcm_allocx.p u64 
    jumpfalse      #5430      u64 
    push           &mlibp.freelist 
    push           2          i64 
    pushptroff                u64 8 0
    pushptr                   u64 
    push           &mlibp.freelist 
    push           2          i64 
    storeptroff               u64 8 0
    resetmult                 
    jump           #5431      
#5430: 
    push           mlibp.pcheapptr u64 
    pop            mlibp.pcm_allocx.p u64 
    push           &mlibp.pcheapptr 
    push           32         i64 
    addrefoffto               u64 1 0
    push           mlibp.pcheapptr u64 
    push           mlibp.pcheapend u64 
    jumplt         #5432      u64 
    setargs                   1 0
    push           32         i64 
    callfn         &mlibp.pcm_newblock u64 
    pop            mlibp.pcm_allocx.p u64 
#5432: 
    push           0          u64 
    push           mlibp.pcm_allocx.p u64 
    popptr                    u64 
    push           0          u64 
    push           mlibp.pcm_allocx.p u64 
    push           1          i64 
    popptroff                 u64 8 0
    push           0          u64 
    push           mlibp.pcm_allocx.p u64 
    push           2          i64 
    popptroff                 u64 8 0
    push           0          u64 
    push           mlibp.pcm_allocx.p u64 
    push           3          i64 
    popptroff                 u64 8 0
    push           mlibp.pcm_allocx.p u64 
    endmult                   
#5431: 
    setret                    u64 
    jump           #5433      
#5433: 
    retfn                     u64 
End


Proc mlibp.readline: u64
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$read_conline 
    push           msysp.rd_buffer u64 
    setret                    u64 
    jump           #5435      
#5435: 
    retfn                     u64 
End


Proc mlibp.stralloc: u64
    param          mlibp.stralloc.p u64 
    procentry                 
    setargs                   2 0
    push           0          u64 
    push           mlibp.stralloc.p u64 
    push           mlibp.allocbase u64 
    subref                    i64 1
    callfn         &msysp.strint u64 
    setret                    u64 
    jump           #5437      
#5437: 
    retfn                     u64 
End


Proc mlibp.findfunction: u64
    param          mlibp.findfunction.name u64 
    local          mlibp.findfunction.av_1 i64 
    local          mlibp.findfunction.i i64 
    procentry                 
#5439: 
    push           1          i64 
    pop            mlibp.findfunction.i i64 
    getnprocs                 i64 
    pop            mlibp.findfunction.av_1 i64 
    push           mlibp.findfunction.av_1 i64 
    push           1          i64 
    jumplt         #5440      i64 
#5441: 
    setargs                   2 0
    push           mlibp.findfunction.name u64 
    push           mlibp.findfunction.i i64 
    getprocname               i64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #5442      i64 
    push           mlibp.findfunction.i i64 
    getprocaddr               i64 
    setret                    u64 
    jump           #5443      
#5442: 
#5444: 
    forup          #5441      i64 1
    opnd           mlibp.findfunction.i 
    opnd           mlibp.findfunction.av_1 
#5440: 
    push           0          u64 
    setret                    u64 
    jump           #5443      
#5443: 
    retfn                     u64 
End


Proc mwindowsp.os_init:
    local          mwindowsp.os_init.i i64 
    local          mwindowsp.os_init.count i64 
    local          mwindowsp.os_init.info block:22 
    procentry                 
    setargs                   1 0
    push           -11        i64 
    truncate                  i64 u32 
    callfn         &`GetStdHandle u64 
    pop            mwindowsp.hconsole u64 
    setargs                   1 0
    push           -10        i64 
    truncate                  i64 u32 
    callfn         &`GetStdHandle u64 
    pop            mwindowsp.hconsolein u64 
    push           0          i64 
    push           &mwindowsp.lastkey 
    push           8          
    popptroff                 u16 1 0
    push           0          i64 
    pop            mwindowsp.keypending i64 
    setargs                   2 0
    push           1          i64 
    push           0          u64 
    callproc       &`SetConsoleCtrlHandler 
    setargs                   2 0
    push           3          i64 
    push           mwindowsp.hconsole u64 
    callproc       &`SetConsoleMode 
    push           1          i64 
    pop            mwindowsp.init_flag i64 
#5446: 
    retproc                   
End


Proc mwindowsp.os_execwait: i64
    param          mwindowsp.os_execwait.cmdline u64 
    param          mwindowsp.os_execwait.newconsole i64 
    param          mwindowsp.os_execwait.workdir u64 
    local          mwindowsp.os_execwait.exitcode u32 
    local          mwindowsp.os_execwait.status i64 
    local          mwindowsp.os_execwait.cflags i64 
    local          mwindowsp.os_execwait.si block:104 
    local          mwindowsp.os_execwait.xpi block:24 
    procentry                 
    push           0          i64 
    pop            mwindowsp.os_execwait.cflags i64 
    push           &mwindowsp.os_execwait.si 
    clear                     block:104 
    push           &mwindowsp.os_execwait.xpi 
    clear                     block:24 
    push           mwindowsp.os_execwait.newconsole i64 
    switch         #5448      0 2
    opnd           #5449      
#5448: 
    switchlabel    #5450      
    switchlabel    #5451      
    switchlabel    #5452      
    endswitch                 
#5450: 
    push           32         i64 
    pop            mwindowsp.os_execwait.cflags i64 
    jump           #5453      
#5451: 
    push           48         i64 
    pop            mwindowsp.os_execwait.cflags i64 
    jump           #5453      
#5452: 
    push           48         i64 
    pop            mwindowsp.os_execwait.cflags i64 
    jump           #5453      
#5449: 
#5453: 
    push           104        i64 
    push           &mwindowsp.os_execwait.si 
    push           0          
    popptroff                 u32 1 0
    setargs                   10 0
    push           &mwindowsp.os_execwait.xpi 
    push           &mwindowsp.os_execwait.si 
    push           0          u64 
    push           0          u64 
    push           mwindowsp.os_execwait.cflags i64 
    push           1          i64 
    push           0          u64 
    push           0          u64 
    push           mwindowsp.os_execwait.cmdline u64 
    push           0          u64 
    callfn         &`CreateProcessA i64 
    pop            mwindowsp.os_execwait.status i64 
    push           mwindowsp.os_execwait.status i64 
    push           0          i64 
    jumpne         #5454      i64 
    setargs                   0 0
    callfn         &`GetLastError u32 
    pop            mwindowsp.os_execwait.status i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Winexec error:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mwindowsp.os_execwait.status i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           -1         i64 
    setret                    i64 
    jump           #5455      
#5454: 
    setargs                   2 0
    push           4294967295 i64 
    push           &mwindowsp.os_execwait.xpi 
    pushptr                   u64 
    callproc       &`WaitForSingleObject 
    setargs                   2 0
    push           &mwindowsp.os_execwait.exitcode 
    push           &mwindowsp.os_execwait.xpi 
    pushptr                   u64 
    callproc       &`GetExitCodeProcess 
    setargs                   1 0
    push           &mwindowsp.os_execwait.xpi 
    pushptr                   u64 
    callproc       &`CloseHandle 
    setargs                   1 0
    push           &mwindowsp.os_execwait.xpi 
    push           8          
    pushptroff                u64 1 0
    callproc       &`CloseHandle 
    push           mwindowsp.os_execwait.exitcode u32 
    setret                    i64 
    jump           #5455      
#5455: 
    retfn                     i64 
End


Proc mwindowsp.os_execcmd: i64
    param          mwindowsp.os_execcmd.cmdline u64 
    param          mwindowsp.os_execcmd.newconsole i64 
    local          mwindowsp.os_execcmd.exitcode u32 
    local          mwindowsp.os_execcmd.i i64 
    local          mwindowsp.os_execcmd.j i64 
    local          mwindowsp.os_execcmd.k i64 
    local          mwindowsp.os_execcmd.si block:104 
    local          mwindowsp.os_execcmd.xpi block:24 
    procentry                 
    push           &mwindowsp.os_execcmd.si 
    clear                     block:104 
    push           &mwindowsp.os_execcmd.xpi 
    clear                     block:24 
    push           104        i64 
    push           &mwindowsp.os_execcmd.si 
    push           0          
    popptroff                 u32 1 0
    setargs                   10 0
    push           &mwindowsp.os_execcmd.xpi 
    push           &mwindowsp.os_execcmd.si 
    push           0          u64 
    push           0          u64 
    push           32         i64 
    startmult                 
    push           mwindowsp.os_execcmd.newconsole i64 
    jumpfalse      #5457      i64 
    push           16         i64 
    resetmult                 
    jump           #5458      
#5457: 
    push           0          i64 
    endmult                   
#5458: 
    ior                       i64 
    push           1          i64 
    push           0          u64 
    push           0          u64 
    push           mwindowsp.os_execcmd.cmdline u64 
    push           0          u64 
    callproc       &`CreateProcessA 
    setargs                   1 0
    push           &mwindowsp.os_execcmd.xpi 
    pushptr                   u64 
    callproc       &`CloseHandle 
    setargs                   1 0
    push           &mwindowsp.os_execcmd.xpi 
    push           8          
    pushptroff                u64 1 0
    callproc       &`CloseHandle 
    push           1          i64 
    setret                    i64 
    jump           #5459      
#5459: 
    retfn                     i64 
End


Proc mwindowsp.os_getch: i64
    local          mwindowsp.os_getch.k i64 
    procentry                 
    setargs                   0 0
    callfn         &mwindowsp.os_getchx i64 
    push           255        i64 
    iand                      i64 
    pop            mwindowsp.os_getch.k i64 
    push           mwindowsp.os_getch.k i64 
    setret                    i64 
    jump           #5461      
#5461: 
    retfn                     i64 
End


Proc mwindowsp.os_kbhit: i64
    local          mwindowsp.os_kbhit.count u32 
    procentry                 
    push           mwindowsp.init_flag i64 
    jumptrue       #5463      i64 
    setargs                   0 0
    callproc       &mwindowsp.os_init 
#5463: 
    setargs                   2 0
    push           &mwindowsp.os_kbhit.count 
    push           mwindowsp.hconsolein u64 
    callproc       &`GetNumberOfConsoleInputEvents 
    push           mwindowsp.os_kbhit.count u32 
    push           1          i64 
    setgt                     i64 
    setret                    i64 
    jump           #5464      
#5464: 
    retfn                     i64 
End


Proc mwindowsp.os_flushkeys:
    procentry                 
    setargs                   1 0
    push           mwindowsp.hconsolein u64 
    callproc       &`FlushConsoleInputBuffer 
#5466: 
    retproc                   
End


Proc mwindowsp.os_getconsolein: u64
    procentry                 
    push           mwindowsp.hconsolein u64 
    setret                    u64 
    jump           #5468      
#5468: 
    retfn                     u64 
End


Proc mwindowsp.os_getconsoleout: u64
    procentry                 
    push           mwindowsp.hconsole u64 
    setret                    u64 
    jump           #5470      
#5470: 
    retfn                     u64 
End


Proc mwindowsp.os_proginstance: u64
    procentry                 
    setargs                   1 0
    push           "PROGINST" u64 
    callproc       &mlibp.abortprogram 
    push           0          u64 
    setret                    u64 
    jump           #5472      
#5472: 
    retfn                     u64 
End


Proc mwindowsp.os_getdllinst: u64
    param          mwindowsp.os_getdllinst.name u64 
    local          mwindowsp.os_getdllinst.hinst u64 
    procentry                 
    setargs                   1 0
    push           mwindowsp.os_getdllinst.name u64 
    callfn         &`LoadLibraryA u64 
    pop            mwindowsp.os_getdllinst.hinst u64 
    push           mwindowsp.os_getdllinst.hinst u64 
    setret                    u64 
    jump           #5474      
#5474: 
    retfn                     u64 
End


Proc mwindowsp.os_getdllprocaddr: u64
    param          mwindowsp.os_getdllprocaddr.hinst i64 
    param          mwindowsp.os_getdllprocaddr.name u64 
    procentry                 
    setargs                   2 0
    push           mwindowsp.os_getdllprocaddr.name u64 
    push           mwindowsp.os_getdllprocaddr.hinst u64 
    callfn         &`GetProcAddress u64 
    setret                    u64 
    jump           #5476      
#5476: 
    retfn                     u64 
End


Proc mwindowsp.os_initwindows:
    procentry                 
    setargs                   0 0
    callproc       &mwindowsp.os_init 
    setargs                   1 0
    push           "pcc001"   u64 
    callproc       &mwindowsp.os_gxregisterclass 
#5478: 
    retproc                   
End


Proc mwindowsp.os_gxregisterclass:
    param          mwindowsp.os_gxregisterclass.classname u64 
    local          mwindowsp.os_gxregisterclass.r block:80 
    procentry                 
    push           mwindowsp.os_gxregisterclass.registered u8 
    jumpfalse      #5480      i64 
    jump           #5481      
#5480: 
    push           &mwindowsp.os_gxregisterclass.r 
    clear                     block:80 
    push           80         i64 
    push           &mwindowsp.os_gxregisterclass.r 
    push           0          
    popptroff                 u32 1 0
    push           40         i64 
    push           &mwindowsp.os_gxregisterclass.r 
    push           4          
    popptroff                 u32 1 0
    push           &mwindowsp.mainwndproc 
    push           &mwindowsp.os_gxregisterclass.r 
    push           8          
    popptroff                 u64 1 0
    push           0          u64 
    push           &mwindowsp.os_gxregisterclass.r 
    push           24         
    popptroff                 u64 1 0
    push           0          u64 
    push           &mwindowsp.os_gxregisterclass.r 
    push           32         
    popptroff                 u64 1 0
    setargs                   2 0
    push           32512      u64 
    push           0          u64 
    callfn         &`LoadCursorA u64 
    push           &mwindowsp.os_gxregisterclass.r 
    push           40         
    popptroff                 u64 1 0
    push           16         u64 
    push           &mwindowsp.os_gxregisterclass.r 
    push           48         
    popptroff                 u64 1 0
    push           0          u64 
    push           &mwindowsp.os_gxregisterclass.r 
    push           56         
    popptroff                 u64 1 0
    push           mwindowsp.os_gxregisterclass.classname u64 
    push           &mwindowsp.os_gxregisterclass.r 
    push           64         
    popptroff                 u64 1 0
    push           0          u64 
    push           &mwindowsp.os_gxregisterclass.r 
    push           72         
    popptroff                 u64 1 0
    setargs                   1 0
    push           &mwindowsp.os_gxregisterclass.r 
    callfn         &`RegisterClassExA u32 
    push           0          i64 
    jumpne         #5482      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mwindowsp.os_gxregisterclass.classname u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &`GetLastError 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Registerclass error" u64 
    callproc       &mlibp.abortprogram 
#5482: 
    push           1          i64 
    pop            mwindowsp.os_gxregisterclass.registered u8 
#5481: 
    retproc                   
End


Proc mwindowsp.mainwndproc: i64
    param          mwindowsp.mainwndproc.hwnd u64 
    param          mwindowsp.mainwndproc.message u32 
    param          mwindowsp.mainwndproc.wparam u64 
    param          mwindowsp.mainwndproc.lparam u64 
    local          mwindowsp.mainwndproc.m block:48 
    local          mwindowsp.mainwndproc.i i64 
    local          mwindowsp.mainwndproc.result i64 
    local          mwindowsp.mainwndproc.l i64 
    procentry                 
    push           mwindowsp.mainwndproc.hwnd u64 
    push           &mwindowsp.mainwndproc.m 
    push           0          
    popptroff                 u64 1 0
    push           mwindowsp.mainwndproc.message u32 
    push           &mwindowsp.mainwndproc.m 
    push           8          
    popptroff                 u32 1 0
    push           mwindowsp.mainwndproc.wparam u64 
    push           &mwindowsp.mainwndproc.m 
    push           16         
    popptroff                 u64 1 0
    push           mwindowsp.mainwndproc.lparam u64 
    push           &mwindowsp.mainwndproc.m 
    push           24         
    popptroff                 u64 1 0
    push           0          i64 
    push           &mwindowsp.mainwndproc.m 
    push           40         
    popptroff                 i32 1 0
    push           0          i64 
    push           &mwindowsp.mainwndproc.m 
    push           44         
    popptroff                 i32 1 0
    push           mwindowsp.wndproc_callbackfn u64 
    jumpfalse      #5484      u64 
    setargs                   1 0
    push           &mwindowsp.mainwndproc.m 
    push           mwindowsp.wndproc_callbackfn u64 
    callfnptr                 i64 
    pop            mwindowsp.mainwndproc.result i64 
    jump           #5485      
#5484: 
    push           0          i64 
    pop            mwindowsp.mainwndproc.result i64 
#5485: 
    push           &mwindowsp.mainwndproc.m 
    push           8          
    pushptroff                u32 1 0
    push           2          i64 
    jumpne         #5486      i64 
    push           0          i64 
    setret                    i64 
    jump           #5487      
#5486: 
    startmult                 
    push           mwindowsp.mainwndproc.result i64 
    jumptrue       #5488      i64 
    setargs                   4 0
    push           mwindowsp.mainwndproc.lparam u64 
    push           mwindowsp.mainwndproc.wparam u64 
    push           mwindowsp.mainwndproc.message u32 
    push           mwindowsp.mainwndproc.hwnd u64 
    callfn         &`DefWindowProcA i64 
    resetmult                 
    jump           #5489      
#5488: 
    push           0          i64 
    endmult                   
#5489: 
    setret                    i64 
    jump           #5487      
#5487: 
    retfn                     i64 
End


Proc mwindowsp.timerproc:
    param          mwindowsp.timerproc.hwnd u64 
    param          mwindowsp.timerproc.msg i64 
    param          mwindowsp.timerproc.id i64 
    param          mwindowsp.timerproc.time i64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "TIMERPROC" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#5491: 
    retproc                   
End


Proc mwindowsp.os_testcallback:
    param          mwindowsp.os_testcallback.p u64 
    procentry                 
    push           mwindowsp.wndproc_callbackfn u64 
    jumpfalse      #5493      u64 
    setargs                   1 0
    push           mwindowsp.os_testcallback.p u64 
    push           mwindowsp.wndproc_callbackfn u64 
    callprocptr               
    jump           #5494      
#5493: 
    setargs                   1 0
    push           "MESS HANDLER NOT DEFINED" u64 
    callproc       &mlibp.abortprogram 
#5494: 
#5495: 
    retproc                   
End


Proc mwindowsp.os_setmesshandler:
    param          mwindowsp.os_setmesshandler.addr u64 
    procentry                 
    push           mwindowsp.os_setmesshandler.addr u64 
    pop            mwindowsp.wndproc_callbackfn u64 
#5497: 
    retproc                   
End


Proc mwindowsp.os_getchx: i64
    local          mwindowsp.os_getchx.count i64 
    local          mwindowsp.os_getchx.charcode i64 
    local          mwindowsp.os_getchx.keyshift i64 
    local          mwindowsp.os_getchx.keycode i64 
    local          mwindowsp.os_getchx.altdown i64 
    local          mwindowsp.os_getchx.ctrldown i64 
    local          mwindowsp.os_getchx.shiftdown i64 
    local          mwindowsp.os_getchx.capslock i64 
    procentry                 
    push           mwindowsp.init_flag i64 
    jumptrue       #5499      i64 
    setargs                   0 0
    callproc       &mwindowsp.os_init 
#5499: 
    push           mwindowsp.keypending i64 
    jumpfalse      #5500      i64 
    push           mwindowsp.pendkey block:20 
    pop            mwindowsp.lastkey block:20 
    push           0          i64 
    pop            mwindowsp.keypending i64 
    jump           #5501      
#5500: 
    push           &mwindowsp.lastkey 
    push           8          
    pushptroff                u16 1 0
    push           0          i64 
    jumpne         #5502      i64 
#5503: 
    push           0          i64 
    pop            mwindowsp.os_getchx.count i64 
    setargs                   4 0
    push           &mwindowsp.os_getchx.count 
    push           1          i64 
    push           &mwindowsp.lastkey 
    push           mwindowsp.hconsolein u64 
    callproc       &`ReadConsoleInputA 
#5504: 
    push           &mwindowsp.lastkey 
    pushptr                   u16 
    push           1          i64 
    jumpne         #5503      i64 
    push           &mwindowsp.lastkey 
    push           4          
    pushptroff                u32 1 0
    push           1          i64 
    jumpne         #5503      i64 
#5505: 
#5502: 
#5501: 
    startmult                 
    push           &mwindowsp.lastkey 
    push           16         
    pushptroff                u32 1 0
    push           3          i64 
    iand                      i64 
    jumpfalse      #5506      i64 
    push           1          i64 
    resetmult                 
    jump           #5507      
#5506: 
    push           0          i64 
    endmult                   
#5507: 
    pop            mwindowsp.os_getchx.altdown i64 
    startmult                 
    push           &mwindowsp.lastkey 
    push           16         
    pushptroff                u32 1 0
    push           12         i64 
    iand                      i64 
    jumpfalse      #5508      i64 
    push           1          i64 
    resetmult                 
    jump           #5509      
#5508: 
    push           0          i64 
    endmult                   
#5509: 
    pop            mwindowsp.os_getchx.ctrldown i64 
    startmult                 
    push           &mwindowsp.lastkey 
    push           16         
    pushptroff                u32 1 0
    push           16         i64 
    iand                      i64 
    jumpfalse      #5510      i64 
    push           1          i64 
    resetmult                 
    jump           #5511      
#5510: 
    push           0          i64 
    endmult                   
#5511: 
    pop            mwindowsp.os_getchx.shiftdown i64 
    startmult                 
    push           &mwindowsp.lastkey 
    push           16         
    pushptroff                u32 1 0
    push           128        i64 
    iand                      i64 
    jumpfalse      #5512      i64 
    push           1          i64 
    resetmult                 
    jump           #5513      
#5512: 
    push           0          i64 
    endmult                   
#5513: 
    pop            mwindowsp.os_getchx.capslock i64 
    push           &mwindowsp.lastkey 
    push           8          
    addrefoff                 u64 1 0
    decr                      u16 1
    push           &mwindowsp.lastkey 
    push           14         
    pushptroff                u8 1 0
    pop            mwindowsp.os_getchx.charcode i64 
    push           &mwindowsp.lastkey 
    push           10         
    pushptroff                u16 1 0
    push           255        i64 
    iand                      i64 
    pop            mwindowsp.os_getchx.keycode i64 
    push           mwindowsp.os_getchx.charcode i64 
    push           0          i64 
    jumpge         #5514      i64 
    push           mwindowsp.os_getchx.charcode i64 
    push           -128       i64 
    jumpge         #5515      i64 
    push           0          i64 
    pop            mwindowsp.os_getchx.charcode i64 
    jump           #5516      
#5515: 
    push           &mwindowsp.os_getchx.charcode 
    push           256        i64 
    addto                     i64 
#5516: 
#5514: 
    push           mwindowsp.os_getchx.altdown i64 
    jumpfalse      #5517      i64 
    push           mwindowsp.os_getchx.ctrldown i64 
    jumpfalse      #5517      i64 
    push           mwindowsp.os_getchx.charcode i64 
    push           166        i64 
    jumpne         #5517      i64 
    push           0          i64 
    store          mwindowsp.os_getchx.ctrldown i64 
    pop            mwindowsp.os_getchx.altdown i64 
    jump           #5518      
#5517: 
    push           mwindowsp.os_getchx.altdown i64 
    jumptrue       #5519      i64 
    push           mwindowsp.os_getchx.ctrldown i64 
    jumpfalse      #5520      i64 
#5519: 
    push           0          i64 
    pop            mwindowsp.os_getchx.charcode i64 
    push           mwindowsp.os_getchx.keycode i64 
    push           65         i64 
    jumplt         #5521      i64 
    push           mwindowsp.os_getchx.keycode i64 
    push           90         i64 
    jumpgt         #5521      i64 
    push           mwindowsp.os_getchx.keycode i64 
    push           64         i64 
    sub                       i64 
    pop            mwindowsp.os_getchx.charcode i64 
#5521: 
#5520: 
#5518: 
    push           mwindowsp.os_getchx.capslock i64 
    push           3          i64 
    shl                       i64 
    push           mwindowsp.os_getchx.altdown i64 
    push           2          i64 
    shl                       i64 
    ior                       i64 
    push           mwindowsp.os_getchx.ctrldown i64 
    push           1          i64 
    shl                       i64 
    ior                       i64 
    push           mwindowsp.os_getchx.shiftdown i64 
    ior                       i64 
    pop            mwindowsp.os_getchx.keyshift i64 
    push           mwindowsp.os_getchx.keyshift i64 
    push           24         i64 
    shl                       i64 
    push           mwindowsp.os_getchx.keycode i64 
    push           16         i64 
    shl                       i64 
    ior                       i64 
    push           mwindowsp.os_getchx.charcode i64 
    ior                       i64 
    setret                    i64 
    jump           #5522      
#5522: 
    retfn                     i64 
End


Proc mwindowsp.os_getos: u64
    procentry                 
    push           "W64"      u64 
    setret                    u64 
    jump           #5524      
#5524: 
    retfn                     u64 
End


Proc mwindowsp.os_gethostsize: i64
    procentry                 
    push           64         i64 
    setret                    i64 
    jump           #5526      
#5526: 
    retfn                     i64 
End


Proc mwindowsp.os_shellexec: i64
    param          mwindowsp.os_shellexec.opc u64 
    param          mwindowsp.os_shellexec.file u64 
    procentry                 
    setargs                   1 0
    push           mwindowsp.os_shellexec.file u64 
    callfn         &system    i32 
    setret                    i64 
    jump           #5528      
#5528: 
    retfn                     i64 
End


Proc mwindowsp.os_sleep:
    param          mwindowsp.os_sleep.a i64 
    procentry                 
    setargs                   1 0
    push           mwindowsp.os_sleep.a i64 
    callproc       &`Sleep    
#5530: 
    retproc                   
End


Proc mwindowsp.os_getstdin: u64
    procentry                 
    setargs                   2 0
    push           "rb"       u64 
    push           "con"      u64 
    callfn         &fopen     u64 
    setret                    u64 
    jump           #5532      
#5532: 
    retfn                     u64 
End


Proc mwindowsp.os_getstdout: u64
    procentry                 
    setargs                   2 0
    push           "wb"       u64 
    push           "con"      u64 
    callfn         &fopen     u64 
    setret                    u64 
    jump           #5534      
#5534: 
    retfn                     u64 
End


Proc mwindowsp.os_gethostname: u64
    procentry                 
    setargs                   3 0
    push           300        i64 
    push           &mwindowsp.os_gethostname.name 
    push           0          u64 
    callproc       &`GetModuleFileNameA 
    push           &mwindowsp.os_gethostname.name 
    setret                    u64 
    jump           #5536      
#5536: 
    retfn                     u64 
End


Proc mwindowsp.os_getmpath: u64
    procentry                 
    push           "C:\\m\\"  u64 
    setret                    u64 
    jump           #5538      
#5538: 
    retfn                     u64 
End


Proc mwindowsp.os_exitprocess:
    param          mwindowsp.os_exitprocess.x i64 
    procentry                 
    push           mwindowsp.os_exitprocess.x i64 
    stop                      
#5540: 
    retproc                   
End


Proc mwindowsp.os_clock: i64
    procentry                 
    setargs                   0 0
    callfn         &clock     i32 
    setret                    i64 
    jump           #5542      
#5542: 
    retfn                     i64 
End


Proc mwindowsp.os_ticks: i64
    procentry                 
    setargs                   0 0
    callfn         &`GetTickCount64 i64 
    setret                    i64 
    jump           #5544      
#5544: 
    retfn                     i64 
End


Proc mwindowsp.os_getclockspersec: i64
    procentry                 
    push           1000       i64 
    setret                    i64 
    jump           #5546      
#5546: 
    retfn                     i64 
End


Proc mwindowsp.os_iswindows: i64
    procentry                 
    push           1          i64 
    setret                    i64 
    jump           #5548      
#5548: 
    retfn                     i64 
End


Proc mwindowsp.os_filelastwritetime: i64
    param          mwindowsp.os_filelastwritetime.filename u64 
    local          mwindowsp.os_filelastwritetime.f u64 
    local          mwindowsp.os_filelastwritetime.ctime i64 
    local          mwindowsp.os_filelastwritetime.atime i64 
    local          mwindowsp.os_filelastwritetime.wtime i64 
    procentry                 
    push           mwindowsp.os_filelastwritetime.filename u64 
    push           0          u64 
    jumpne         #5550      u64 
    push           1          i64 
    setret                    i64 
    jump           #5551      
#5550: 
    setargs                   7 0
    push           0          u64 
    push           3          i64 
    push           3          i64 
    push           0          u64 
    push           1          i64 
    push           2147483648 i64 
    push           mwindowsp.os_filelastwritetime.filename u64 
    callfn         &`CreateFileA u64 
    pop            mwindowsp.os_filelastwritetime.f u64 
    push           mwindowsp.os_filelastwritetime.f i64 
    push           -1         i64 
    jumpne         #5552      i64 
    push           0          i64 
    setret                    i64 
    jump           #5551      
#5552: 
    setargs                   4 0
    push           &mwindowsp.os_filelastwritetime.wtime 
    push           &mwindowsp.os_filelastwritetime.atime 
    push           &mwindowsp.os_filelastwritetime.ctime 
    push           mwindowsp.os_filelastwritetime.f u64 
    callproc       &`GetFileTime 
    setargs                   1 0
    push           mwindowsp.os_filelastwritetime.f u64 
    callproc       &`CloseHandle 
    push           mwindowsp.os_filelastwritetime.wtime i64 
    setret                    i64 
    jump           #5551      
#5551: 
    retfn                     i64 
End


Proc mwindowsp.os_getsystime:
    param          mwindowsp.os_getsystime.tm u64 
    procentry                 
    setargs                   1 0
    push           mwindowsp.os_getsystime.tm u64 
    callproc       &`GetLocalTime 
#5554: 
    retproc                   
End


Proc mwindowsp.os_messagebox:
    param          mwindowsp.os_messagebox.s u64 
    param          mwindowsp.os_messagebox.t u64 
    procentry                 
    setargs                   4 0
    push           0          i64 
    push           mwindowsp.os_messagebox.t u64 
    push           mwindowsp.os_messagebox.s u64 
    push           0          i64 
    callproc       &`MessageBoxA 
#5556: 
    retproc                   
End


Proc mwindowsp.os_hpcounter: i64
    local          mwindowsp.os_hpcounter.a i64 
    procentry                 
    setargs                   1 0
    push           &mwindowsp.os_hpcounter.a 
    callproc       &`QueryPerformanceCounter 
    push           mwindowsp.os_hpcounter.a i64 
    setret                    i64 
    jump           #5558      
#5558: 
    retfn                     i64 
End


Proc mwindowsp.os_hpfrequency: i64
    local          mwindowsp.os_hpfrequency.a i64 
    procentry                 
    setargs                   1 0
    push           &mwindowsp.os_hpfrequency.a 
    callproc       &`QueryPerformanceFrequency 
    push           mwindowsp.os_hpfrequency.a i64 
    setret                    i64 
    jump           #5560      
#5560: 
    retfn                     i64 
End


Proc mwindowsp.os_peek:
    local          mwindowsp.os_peek.ticks i64 
    local          mwindowsp.os_peek.m block:100 
    procentry                 
    setargs                   0 0
    callfn         &`GetTickCount64 i64 
    pop            mwindowsp.os_peek.ticks i64 
    push           mwindowsp.os_peek.ticks i64 
    push           mwindowsp.os_peek.lastticks i64 
    sub                       i64 
    push           1000       i64 
    jumplt         #5562      i64 
    push           mwindowsp.os_peek.ticks i64 
    pop            mwindowsp.os_peek.lastticks i64 
    setargs                   5 0
    push           0          i64 
    push           0          i64 
    push           0          i64 
    push           0          u64 
    push           &mwindowsp.os_peek.m 
    callproc       &`PeekMessageA 
#5562: 
#5563: 
    retproc                   
End


Proc pc_libpcl.pcl_start::
    param          pc_libpcl.pcl_start.nunits i64 
    procentry                 
    push           pc_libpcl.initpcalloc i64 
    pop            pc_libpcl.pcalloc i64 
    push           pc_libpcl.pcl_start.nunits i64 
    jumpfalse      #5565      i64 
    push           pc_libpcl.pcl_start.nunits i64 
    push           9          i64 
    mul                       i64 
    push           8          i64 
    idiv                      i64 
    pop            pc_libpcl.pcl_start.nunits i64 
    jump           #5566      
#5567: 
    push           &pc_libpcl.pcalloc 
    push           2          i64 
    multo                     i64 
#5566: 
    push           pc_libpcl.pcalloc i64 
    push           pc_libpcl.pcl_start.nunits i64 
    jumplt         #5567      i64 
#5568: 
#5565: 
    setargs                   1 0
    push           pc_libpcl.pcalloc i64 
    push           32         i64 
    mul                       i64 
    callfn         &mlibp.pcm_allocz u64 
    pop            pc_libpcl.pcstart u64 
    push           pc_libpcl.pcstart u64 
    push           pc_libpcl.pcalloc i64 
    addrefoff                 u64 32 -256
    pop            pc_libpcl.pcend u64 
    push           pc_libpcl.pcstart u64 
    push           1          i64 
    subrefoff                 u64 32 0
    pop            pc_libpcl.pccurr u64 
    push           0          i64 
    pop            pc_libpcl.pcfixed u8 
    push           0          i64 
    pop            pc_libpcl.pcseqno i64 
    push           0          i64 
    pop            pc_libpcl.pcneedfntable i64 
    push           0          i64 
    store          pc_libpcl.labelnooffset i64 
    store          pc_libpcl.maxuserlabel i64 
    pop            pc_libpcl.labelno i64 
    push           0          i64 
    pop            pc_libpcl.mcldone i64 
    push           &pc_decls.rtsproctable 
    clear                     block:48 
#5569: 
    retproc                   
End


Proc pc_libpcl.pcl_end::
    param          pc_libpcl.pcl_end.fixup i64 
    procentry                 
    push           pc_libpcl.pccurr u64 
    push           pc_libpcl.pccurr u64 
    jumplt         #5571      u64 
    push           pc_libpcl.pccurr u64 
    push           1          
    pushptroff                u8 1 0
    push           11         i64 
    jumpeq         #5571      i64 
    setargs                   2 0
    push           0          u64 
    push           11         i64 
    callproc       &pc_libpcl.pcl_gen 
#5571: 
    push           pc_libpcl.pcl_end.fixup i64 
    jumpfalse      #5572      i64 
    setargs                   0 0
    callproc       &pc_libpcl.fixuppcl 
#5572: 
#5573: 
    retproc                   
End


Proc pc_libpcl.pcl_free::
    param          pc_libpcl.pcl_free.fixup i64 
    procentry                 
    push           0          u64 
    store          pc_libpcl.pcend u64 
    store          pc_libpcl.pccurr u64 
    pop            pc_libpcl.pcstart u64 
    push           0          i64 
    pop            pc_libpcl.pcfixed u8 
#5575: 
    retproc                   
End


Proc pc_libpcl.fixuppcl:
    local          pc_libpcl.fixuppcl.d u64 
    local          pc_libpcl.fixuppcl.p u64 
    local          pc_libpcl.fixuppcl.pextproc u64 
    local          pc_libpcl.fixuppcl.labno i64 
    local          pc_libpcl.fixuppcl.insideproc i64 
    local          pc_libpcl.fixuppcl.extparams i64 
    local          pc_libpcl.fixuppcl.isthreaded i64 
    procentry                 
    push           pc_libpcl.pcfixed u8 
    jumpfalse      #5577      i64 
    jump           #5578      
#5577: 
    push           pc_libpcl.pcstart u64 
    pop            pc_libpcl.fixuppcl.p u64 
    push           0          i64 
    pop            pc_libpcl.fixuppcl.insideproc i64 
    push           0          u64 
    pop            pc_libpcl.fixuppcl.pextproc u64 
    jump           #5579      
#5580: 
    push           pc_libpcl.fixuppcl.p u64 
    push           1          
    pushptroff                u8 1 0
    switch         #5581      5 97
    opnd           #5582      
#5581: 
    switchlabel    #5583      
    switchlabel    #5583      
    switchlabel    #5582      
    switchlabel    #5584      
    switchlabel    #5582      
    switchlabel    #5585      
    switchlabel    #5582      
    switchlabel    #5586      
    switchlabel    #5587      
    switchlabel    #5588      
    switchlabel    #5589      
    switchlabel    #5590      
    switchlabel    #5582      
    switchlabel    #5591      
    switchlabel    #5591      
    switchlabel    #5582      
    switchlabel    #5592      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5582      
    switchlabel    #5593      
    switchlabel    #5594      
    switchlabel    #5595      
    switchlabel    #5596      
    switchlabel    #5597      
    endswitch                 
#5591: 
    push           pc_libpcl.fixuppcl.insideproc i64 
    push           1          i64 
    jumpeq         #5598      i64 
    setargs                   1 0
    push           "Not allowed" u64 
    callproc       &pc_libpcl.perror 
#5598: 
    push           pc_libpcl.fixuppcl.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_libpcl.fixuppcl.d u64 
    push           pc_libpcl.fixuppcl.p u64 
    push           1          
    pushptroff                u8 1 0
    push           pc_libpcl.fixuppcl.d u64 
    push           27         
    popptroff                 u8 1 0
    push           pc_libpcl.fixuppcl.p u64 
    push           pc_libpcl.fixuppcl.d u64 
    push           16         
    popptroff                 u64 1 0
    push           pc_libpcl.fixuppcl.d u64 
    push           46         
    pushptroff                u16 1 0
    push           0          i64 
    dotindex                  i64 
    jumpfalse      #5599      u64 
    setargs                   2 0
    push           pc_libpcl.fixuppcl.d u64 
    pushptr                   u64 
    push           "Redefining local/param/ext:" u64 
    callproc       &pc_libpcl.perror_s 
#5599: 
    push           1          u64 
    push           pc_libpcl.fixuppcl.d u64 
    push           46         
    addrefoff                 u64 1 0
    push           0          i64 
    popdotindex               u16 
    jump           #5600      
#5584: 
    push           0          i64 
    pop            pc_libpcl.fixuppcl.isthreaded i64 
!doprocdef::
#5601: 
    push           pc_libpcl.fixuppcl.insideproc i64 
    jumpfalse      #5602      i64 
    setargs                   1 0
    push           "Nested proc" u64 
    callproc       &pc_libpcl.perror 
#5602: 
    push           1          i64 
    pop            pc_libpcl.fixuppcl.insideproc i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_libpcl.fixuppcl.d u64 
    push           pc_libpcl.fixuppcl.p u64 
    push           1          
    pushptroff                u8 1 0
    push           pc_libpcl.fixuppcl.d u64 
    push           27         
    popptroff                 u8 1 0
    push           pc_libpcl.fixuppcl.p u64 
    push           pc_libpcl.fixuppcl.d u64 
    push           16         
    popptroff                 u64 1 0
    push           pc_libpcl.fixuppcl.d u64 
    push           46         
    pushptroff                u16 1 0
    push           0          i64 
    dotindex                  i64 
    jumpfalse      #5603      u64 
    setargs                   2 0
    push           pc_libpcl.fixuppcl.d u64 
    pushptr                   u64 
    push           "Redefining proc:" u64 
    callproc       &pc_libpcl.perror_s 
#5603: 
    push           1          u64 
    push           pc_libpcl.fixuppcl.d u64 
    push           46         
    addrefoff                 u64 1 0
    push           0          i64 
    popdotindex               u16 
    push           pc_libpcl.fixuppcl.isthreaded u64 
    push           pc_libpcl.fixuppcl.d u64 
    push           46         
    addrefoff                 u64 1 0
    push           7          i64 
    popdotindex               u16 
    setargs                   1 0
    push           pc_libpcl.fixuppcl.d u64 
    callproc       &pc_libpcl.assignlabeltoname 
    jump           #5600      
#5583: 
    push           pc_libpcl.fixuppcl.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_libpcl.fixuppcl.d u64 
    push           pc_libpcl.fixuppcl.p u64 
    push           1          
    pushptroff                u8 1 0
    push           pc_libpcl.fixuppcl.d u64 
    push           27         
    popptroff                 u8 1 0
    push           pc_libpcl.fixuppcl.p u64 
    push           pc_libpcl.fixuppcl.d u64 
    push           16         
    popptroff                 u64 1 0
    push           pc_libpcl.fixuppcl.d u64 
    push           46         
    pushptroff                u16 1 0
    push           0          i64 
    dotindex                  i64 
    jumpfalse      #5604      u64 
    setargs                   2 0
    push           pc_libpcl.fixuppcl.d u64 
    pushptr                   u64 
    push           "Redefining proc/static/label:" u64 
    callproc       &pc_libpcl.perror_s 
#5604: 
    push           1          u64 
    push           pc_libpcl.fixuppcl.d u64 
    push           46         
    addrefoff                 u64 1 0
    push           0          i64 
    popdotindex               u16 
    setargs                   1 0
    push           pc_libpcl.fixuppcl.d u64 
    callproc       &pc_libpcl.assignlabeltoname 
    jump           #5600      
#5585: 
    push           pc_libpcl.fixuppcl.insideproc i64 
    push           1          i64 
    jumpeq         #5605      i64 
    setargs                   1 0
    push           "End without proc" u64 
    callproc       &pc_libpcl.perror 
#5605: 
    push           0          i64 
    pop            pc_libpcl.fixuppcl.insideproc i64 
    jump           #5600      
#5589: 
    push           pc_libpcl.fixuppcl.insideproc i64 
    push           2          i64 
    jumpeq         #5606      i64 
    setargs                   1 0
    push           "End without extproc" u64 
    callproc       &pc_libpcl.perror 
#5606: 
    push           0          i64 
    pop            pc_libpcl.fixuppcl.insideproc i64 
    jump           #5600      
#5586: 
    push           pc_libpcl.fixuppcl.p u64 
    pop            pc_libpcl.fixuppcl.pextproc u64 
    push           0          i64 
    pop            pc_libpcl.fixuppcl.extparams i64 
    push           pc_libpcl.fixuppcl.insideproc i64 
    jumpfalse      #5607      i64 
    setargs                   1 0
    push           "Nested proc" u64 
    callproc       &pc_libpcl.perror 
#5607: 
    push           2          i64 
    pop            pc_libpcl.fixuppcl.insideproc i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_libpcl.fixuppcl.d u64 
    push           pc_libpcl.fixuppcl.d u64 
    push           46         
    pushptroff                u16 1 0
    push           0          i64 
    dotindex                  i64 
    jumptrue       #5608      u64 
    push           pc_libpcl.fixuppcl.p u64 
    push           1          
    pushptroff                u8 1 0
    push           pc_libpcl.fixuppcl.d u64 
    push           27         
    popptroff                 u8 1 0
    push           pc_libpcl.fixuppcl.p u64 
    push           pc_libpcl.fixuppcl.d u64 
    push           16         
    popptroff                 u64 1 0
    push           pc_libpcl.fixuppcl.d u64 
    push           46         
    pushptroff                u16 1 0
    push           0          i64 
    dotindex                  i64 
    jumpfalse      #5609      u64 
    setargs                   2 0
    push           pc_libpcl.fixuppcl.d u64 
    pushptr                   u64 
    push           "Redefining extproc:" u64 
    callproc       &pc_libpcl.perror_s 
#5609: 
    push           1          u64 
    push           pc_libpcl.fixuppcl.d u64 
    push           46         
    addrefoff                 u64 1 0
    push           0          i64 
    popdotindex               u16 
    push           1          u64 
    push           pc_libpcl.fixuppcl.d u64 
    push           46         
    addrefoff                 u64 1 0
    push           1          i64 
    popdotindex               u16 
#5608: 
    jump           #5600      
#5587: 
    push           pc_libpcl.fixuppcl.insideproc i64 
    push           2          i64 
    jumpeq         #5610      i64 
    setargs                   1 0
    push           "Not allowed" u64 
    callproc       &pc_libpcl.perror 
#5610: 
    push           &pc_libpcl.fixuppcl.extparams 
    incr                      i64 1
    jump           #5600      
#5588: 
    push           pc_libpcl.fixuppcl.insideproc i64 
    push           2          i64 
    jumpeq         #5611      i64 
    setargs                   1 0
    push           "Not allowed" u64 
    callproc       &pc_libpcl.perror 
#5611: 
    push           pc_libpcl.fixuppcl.extparams i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           16         
    popptroff                 i32 1 0
    jump           #5600      
#5590: 
    push           1          i64 
    pop            pc_libpcl.fixuppcl.isthreaded i64 
    jump           #5601      
    jump           #5600      
#5592: 
    push           pc_libpcl.fixuppcl.p u64 
    push           8          
    pushptroff                i64 1 0
    pop            pc_libpcl.fixuppcl.labno i64 
    push           pc_libpcl.fixuppcl.labno i64 
    push           1          i64 
    push           100000     i64 
    jumpinrange    #5612      i64 
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_libpcl.fixuppcl.labno i64 
    callfn         &msysp.strint u64 
    push           "3:Label out of range" u64 
    callproc       &pc_libpcl.perror_s 
#5612: 
    setargs                   1 0
    push           pc_libpcl.fixuppcl.labno i64 
    callfn         &pc_libpcl.fixlabel i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           8          
    popptroff                 i64 1 0
    push           3          i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           0          
    popptroff                 u8 1 0
    jump           #5600      
#5594: 
    push           93         i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           1          
    popptroff                 u8 1 0
    push           1          i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           3          
    popptroff                 u8 1 0
    push           1          i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           4          
    popptroff                 i32 1 0
    jump           #5600      
#5595: 
    push           93         i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           1          
    popptroff                 u8 1 0
    push           2          i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           3          
    popptroff                 u8 1 0
    push           2          i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           4          
    popptroff                 i32 1 0
    jump           #5600      
#5596: 
    push           93         i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           1          
    popptroff                 u8 1 0
    push           3          i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           3          
    popptroff                 u8 1 0
    push           4          i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           4          
    popptroff                 i32 1 0
    jump           #5600      
#5597: 
    push           93         i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           1          
    popptroff                 u8 1 0
    push           4          i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           3          
    popptroff                 u8 1 0
    push           8          i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           4          
    popptroff                 i32 1 0
    jump           #5600      
#5593: 
    push           pc_libpcl.fixuppcl.p u64 
    push           4          
    pushptroff                i32 1 0
    push           0          i64 
    jumpne         #5613      i64 
    push           &pc_tables.psize 
    push           pc_libpcl.fixuppcl.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           pc_libpcl.fixuppcl.p u64 
    push           4          
    popptroff                 i32 1 0
#5613: 
    jump           #5600      
#5582: 
    push           pc_libpcl.fixuppcl.p u64 
    pushptr                   u8 
    push           5          i64 
    casejumpeq     #5614      i64 0
    push           3          i64 
    casejumpeq     #5615      i64 0
    push           198        i64 
    casejumpeq     #5616      i64 0
    push           199        i64 
    casejumpeq     #5616      i64 0
    push           200        i64 
    casejumpeq     #5616      i64 0
    popstack                  i64 
    jump           #5617      
#5614: 
    push           pc_libpcl.fixuppcl.p u64 
    push           3          
    pushptroff                u8 1 0
    push           11         i64 
    jumpeq         #5618      i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           4          
    pushptroff                i32 1 0
    push           4          i64 
    jumpne         #5619      i64 
#5618: 
    push           7          i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           0          
    popptroff                 u8 1 0
    push           pc_libpcl.fixuppcl.p u64 
    push           8          
    pushptroff                r64 1 0
    fnarrow                   r32 r64 
    push           pc_libpcl.fixuppcl.p u64 
    push           8          
    popptroff                 r32 1 0
#5619: 
    jump           #5620      
#5615: 
    setargs                   1 0
    push           pc_libpcl.fixuppcl.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libpcl.fixlabel i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           8          
    popptroff                 i64 1 0
    jump           #5620      
#5616: 
    push           1          i64 
    pop            pc_libpcl.pcneedfntable i64 
    jump           #5620      
#5617: 
#5620: 
#5600: 
#5621: 
    push           &pc_libpcl.fixuppcl.p 
    incr                      u64 32
#5579: 
    push           pc_libpcl.fixuppcl.p u64 
    push           pc_libpcl.pcend u64 
    jumple         #5580      u64 
#5622: 
    push           pc_libpcl.fixuppcl.insideproc i64 
    jumpfalse      #5623      i64 
    setargs                   1 0
    push           "End missing" u64 
    callproc       &pc_libpcl.perror 
#5623: 
    push           1          i64 
    pop            pc_libpcl.pcfixed u8 
#5578: 
    retproc                   
End


Proc pc_libpcl.extendpclblock:
    local          pc_libpcl.extendpclblock.newpcalloc i64 
    local          pc_libpcl.extendpclblock.lengthused i64 
    local          pc_libpcl.extendpclblock.newpcstart u64 
    procentry                 
    push           pc_libpcl.pcalloc i64 
    push           2          i64 
    mul                       i64 
    pop            pc_libpcl.extendpclblock.newpcalloc i64 
    push           pc_libpcl.pccurr u64 
    push           pc_libpcl.pcstart u64 
    subref                    i64 32
    push           1          i64 
    add                       i64 
    pop            pc_libpcl.extendpclblock.lengthused i64 
    setargs                   1 0
    push           32         i64 
    push           pc_libpcl.extendpclblock.newpcalloc i64 
    mul                       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pc_libpcl.extendpclblock.newpcstart u64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "EXTEND PCL" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libpcl.extendpclblock.newpcalloc i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   3 0
    push           pc_libpcl.extendpclblock.lengthused i64 
    push           32         i64 
    mul                       u64 
    push           pc_libpcl.pcstart u64 
    push           pc_libpcl.extendpclblock.newpcstart u64 
    callproc       &memcpy    
    setargs                   2 0
    push           pc_libpcl.extendpclblock.newpcalloc i64 
    push           pc_libpcl.extendpclblock.lengthused i64 
    sub                       i64 
    push           32         i64 
    mul                       i64 
    push           pc_libpcl.extendpclblock.newpcstart u64 
    push           pc_libpcl.extendpclblock.lengthused i64 
    addrefoff                 u64 32 0
    callproc       &mlibp.pcm_clearmem 
    push           pc_libpcl.extendpclblock.newpcstart u64 
    push           pc_libpcl.pccurr u64 
    push           pc_libpcl.pcstart u64 
    subref                    i64 32
    addrefoff                 u64 32 0
    pop            pc_libpcl.pccurr u64 
    push           pc_libpcl.extendpclblock.newpcstart u64 
    push           pc_libpcl.extendpclblock.newpcalloc i64 
    addrefoff                 u64 32 -256
    pop            pc_libpcl.pcend u64 
    setargs                   2 0
    push           pc_libpcl.pcalloc i64 
    push           32         i64 
    mul                       i64 
    push           pc_libpcl.pcstart u64 
    callproc       &mlibp.pcm_free 
    push           pc_libpcl.extendpclblock.newpcstart u64 
    pop            pc_libpcl.pcstart u64 
    push           pc_libpcl.extendpclblock.newpcalloc i64 
    pop            pc_libpcl.pcalloc i64 
#5625: 
    retproc                   
End


Proc pc_libpcl.newpcl: u64
    procentry                 
    push           pc_libpcl.pccurr u64 
    push           pc_libpcl.pcend u64 
    jumplt         #5627      u64 
    setargs                   0 0
    callproc       &pc_libpcl.extendpclblock 
#5627: 
    push           &pc_libpcl.npcl 
    incr                      i64 1
    push           &pc_libpcl.pccurr 
    incr                      u64 32
    push           &pc_libpcl.pcseqno 
    incrload                  i64 1
    push           pc_libpcl.pccurr u64 
    push           24         
    popptroff                 u32 1 0
    push           pc_libpcl.pccurr u64 
    setret                    u64 
    jump           #5628      
#5628: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_gen::
    param          pc_libpcl.pcl_gen.opcode i64 
    param          pc_libpcl.pcl_gen.p u64 
    local          pc_libpcl.pcl_gen.d u64 
    procentry                 
    push           pc_libpcl.pcl_gen.p u64 
    push           0          u64 
    jumpne         #5630      u64 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_gen.p u64 
#5630: 
    push           pc_libpcl.pcl_gen.opcode i64 
    push           pc_libpcl.pcl_gen.p u64 
    push           1          
    popptroff                 u8 1 0
#5631: 
    retproc                   
End


Proc pc_libpcl.pcl_gent::
    param          pc_libpcl.pcl_gent.opcode i64 
    param          pc_libpcl.pcl_gent.t i64 
    param          pc_libpcl.pcl_gent.p u64 
    procentry                 
    push           pc_libpcl.pcl_gent.p u64 
    push           0          u64 
    jumpne         #5633      u64 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_gent.p u64 
#5633: 
    push           pc_libpcl.pcl_gent.opcode i64 
    push           pc_libpcl.pcl_gent.p u64 
    push           1          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_gent.t i64 
    push           0          i64 
    jumpge         #5634      i64 
    push           13         i64 
    push           pc_libpcl.pcl_gent.p u64 
    push           3          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_gent.t i64 
    neg                       i64 
    push           pc_libpcl.pcl_gent.p u64 
    push           4          
    popptroff                 i32 1 0
    jump           #5635      
#5634: 
    push           pc_libpcl.pcl_gent.t i64 
    push           pc_libpcl.pcl_gent.p u64 
    push           3          
    popptroff                 u8 1 0
#5635: 
#5636: 
    retproc                   
End


Proc pc_libpcl.pcl_genx::
    param          pc_libpcl.pcl_genx.opcode i64 
    param          pc_libpcl.pcl_genx.x i64 
    param          pc_libpcl.pcl_genx.p u64 
    procentry                 
    push           pc_libpcl.pcl_genx.p u64 
    push           0          u64 
    jumpne         #5638      u64 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_genx.p u64 
#5638: 
    push           pc_libpcl.pcl_genx.opcode i64 
    push           pc_libpcl.pcl_genx.p u64 
    push           1          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_genx.x i64 
    push           pc_libpcl.pcl_genx.p u64 
    push           16         
    popptroff                 i32 1 0
#5639: 
    retproc                   
End


Proc pc_libpcl.pcl_genxy::
    param          pc_libpcl.pcl_genxy.opcode i64 
    param          pc_libpcl.pcl_genxy.x i64 
    param          pc_libpcl.pcl_genxy.y i64 
    param          pc_libpcl.pcl_genxy.p u64 
    procentry                 
    push           pc_libpcl.pcl_genxy.p u64 
    push           0          u64 
    jumpne         #5641      u64 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_genxy.p u64 
#5641: 
    push           pc_libpcl.pcl_genxy.opcode i64 
    push           pc_libpcl.pcl_genxy.p u64 
    push           1          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_genxy.x i64 
    push           pc_libpcl.pcl_genxy.p u64 
    push           16         
    popptroff                 i32 1 0
    push           pc_libpcl.pcl_genxy.y i64 
    push           pc_libpcl.pcl_genxy.p u64 
    push           20         
    popptroff                 i32 1 0
#5642: 
    retproc                   
End


Proc pc_libpcl.pcl_genint:: u64
    param          pc_libpcl.pcl_genint.a i64 
    param          pc_libpcl.pcl_genint.mode i64 
    local          pc_libpcl.pcl_genint.p u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_genint.p u64 
    push           pc_libpcl.pcl_genint.a i64 
    push           pc_libpcl.pcl_genint.p u64 
    push           8          
    popptroff                 i64 1 0
    push           4          i64 
    push           pc_libpcl.pcl_genint.p u64 
    push           0          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_genint.p u64 
    setret                    u64 
    jump           #5644      
#5644: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_genint128:: u64
    param          pc_libpcl.pcl_genint128.a i128 
    param          pc_libpcl.pcl_genint128.mode i64 
    local          pc_libpcl.pcl_genint128.p u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_genint128.p u64 
    push           pc_libpcl.pcl_genint128.a i128 
    push           pc_libpcl.pcl_genint128.p u64 
    push           8          
    popptroff                 i128 1 0
    push           6          i64 
    push           pc_libpcl.pcl_genint128.p u64 
    push           0          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_genint128.p u64 
    setret                    u64 
    jump           #5646      
#5646: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_genreal:: u64
    param          pc_libpcl.pcl_genreal.x r64 
    local          pc_libpcl.pcl_genreal.p u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_genreal.p u64 
    push           pc_libpcl.pcl_genreal.x r64 
    push           pc_libpcl.pcl_genreal.p u64 
    push           8          
    popptroff                 r64 1 0
    push           5          i64 
    push           pc_libpcl.pcl_genreal.p u64 
    push           0          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_genreal.p u64 
    setret                    u64 
    jump           #5648      
#5648: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_genreal32:: u64
    param          pc_libpcl.pcl_genreal32.x r64 
    local          pc_libpcl.pcl_genreal32.p u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_genreal32.p u64 
    push           pc_libpcl.pcl_genreal32.x r64 
    fnarrow                   r32 r64 
    push           pc_libpcl.pcl_genreal32.p u64 
    push           8          
    popptroff                 r32 1 0
    push           7          i64 
    push           pc_libpcl.pcl_genreal32.p u64 
    push           0          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_genreal32.p u64 
    setret                    u64 
    jump           #5650      
#5650: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_genstring:: u64
    param          pc_libpcl.pcl_genstring.s u64 
    local          pc_libpcl.pcl_genstring.p u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_genstring.p u64 
    setargs                   1 0
    push           pc_libpcl.pcl_genstring.s u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           pc_libpcl.pcl_genstring.p u64 
    push           8          
    popptroff                 u64 1 0
    push           8          i64 
    push           pc_libpcl.pcl_genstring.p u64 
    push           0          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_genstring.p u64 
    setret                    u64 
    jump           #5652      
#5652: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_genlabel:: u64
    param          pc_libpcl.pcl_genlabel.a i64 
    local          pc_libpcl.pcl_genlabel.p u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_genlabel.p u64 
    push           pc_libpcl.pcl_genlabel.a i64 
    push           pc_libpcl.pcl_genlabel.p u64 
    push           8          
    popptroff                 i64 1 0
    push           3          i64 
    push           pc_libpcl.pcl_genlabel.p u64 
    push           0          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_genlabel.p u64 
    setret                    u64 
    jump           #5654      
#5654: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_genmem:: u64
    param          pc_libpcl.pcl_genmem.d u64 
    local          pc_libpcl.pcl_genmem.p u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_genmem.p u64 
    push           pc_libpcl.pcl_genmem.d u64 
    push           pc_libpcl.pcl_genmem.p u64 
    push           8          
    popptroff                 u64 1 0
    push           1          i64 
    push           pc_libpcl.pcl_genmem.p u64 
    push           0          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_genmem.p u64 
    setret                    u64 
    jump           #5656      
#5656: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_genmemaddr:: u64
    param          pc_libpcl.pcl_genmemaddr.d u64 
    local          pc_libpcl.pcl_genmemaddr.p u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_genmemaddr.p u64 
    push           pc_libpcl.pcl_genmemaddr.d u64 
    push           pc_libpcl.pcl_genmemaddr.p u64 
    push           8          
    popptroff                 u64 1 0
    push           2          i64 
    push           pc_libpcl.pcl_genmemaddr.p u64 
    push           0          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_genmemaddr.p u64 
    setret                    u64 
    jump           #5658      
#5658: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_gencomment::
    param          pc_libpcl.pcl_gencomment.s u64 
    procentry                 
    setargs                   2 0
    setargs                   1 0
    push           pc_libpcl.pcl_gencomment.s u64 
    callfn         &pc_libpcl.pcl_genstring u64 
    push           3          i64 
    callproc       &pc_libpcl.pcl_gen 
#5660: 
    retproc                   
End


Proc pc_libpcl.pcl_genname:: u64
    param          pc_libpcl.pcl_genname.s u64 
    procentry                 
    setargs                   1 0
    setargs                   1 0
    push           pc_libpcl.pcl_genname.s u64 
    callfn         &pc_libpcl.pcl_makesymbol u64 
    callfn         &pc_libpcl.pcl_genmem u64 
    setret                    u64 
    jump           #5662      
#5662: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_gennameaddr:: u64
    param          pc_libpcl.pcl_gennameaddr.s u64 
    procentry                 
    setargs                   1 0
    setargs                   1 0
    push           pc_libpcl.pcl_gennameaddr.s u64 
    callfn         &pc_libpcl.pcl_makesymbol u64 
    callfn         &pc_libpcl.pcl_genmemaddr u64 
    setret                    u64 
    jump           #5664      
#5664: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_genassem:: u64
    param          pc_libpcl.pcl_genassem.code u64 
    local          pc_libpcl.pcl_genassem.p u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_genassem.p u64 
    push           pc_libpcl.pcl_genassem.code u64 
    push           pc_libpcl.pcl_genassem.p u64 
    push           8          
    popptroff                 u64 1 0
    push           9          i64 
    push           pc_libpcl.pcl_genassem.p u64 
    push           0          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_genassem.p u64 
    setret                    u64 
    jump           #5666      
#5666: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_makesymbol:: u64
    param          pc_libpcl.pcl_makesymbol.s u64 
    local          pc_libpcl.pcl_makesymbol.d u64 
    procentry                 
    setargs                   1 0
    push           pc_libpcl.pcl_makesymbol.s u64 
    callfn         &pc_lex.addnamestr u64 
    pop            pc_libpcl.pcl_makesymbol.d u64 
    push           pc_libpcl.pcl_makesymbol.d u64 
    setret                    u64 
    jump           #5668      
#5668: 
    retfn                     u64 
End


Proc pc_libpcl.strpcl:
    param          pc_libpcl.strpcl.p u64 
    local          pc_libpcl.strpcl.pmodestr block:256 
    local          pc_libpcl.strpcl.str block:256 
    local          pc_libpcl.strpcl.opcode i64 
    local          pc_libpcl.strpcl.defused i64 
    procentry                 
    push           pc_libpcl.strpcl.p u64 
    push           1          
    pushptroff                u8 1 0
    pop            pc_libpcl.strpcl.opcode i64 
    push           pc_libpcl.strpcl.opcode i64 
    push           20         i64 
    casejumpeq     #5670      i64 0
    push           3          i64 
    casejumpeq     #5671      i64 0
    push           8          i64 
    casejumpeq     #5672      i64 0
    push           16         i64 
    casejumpeq     #5672      i64 0
    push           10         i64 
    casejumpeq     #5673      i64 0
    push           15         i64 
    casejumpeq     #5674      i64 0
    push           12         i64 
    casejumpeq     #5675      i64 0
    push           21         i64 
    casejumpeq     #5676      i64 0
    push           11         i64 
    casejumpeq     #5677      i64 0
    popstack                  i64 
    jump           #5678      
#5670: 
    setargs                   2 0
    push           1          i64 
    push           pc_libpcl.strpcl.p u64 
    push           8          
    pushptroff                i64 1 0
    callproc       &pc_libpcl.strlabel 
    jump           #5679      
    jump           #5680      
#5671: 
    push           pc_libpcl.strpcl.p u64 
    push           8          
    pushptroff                u64 1 0
    pushptr                   u8 
    jumpfalse      #5681      u64 
    setargs                   1 0
    push           "!"        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.strpcl.p u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &pc_libpcl.psstr 
#5681: 
    jump           #5679      
    jump           #5680      
#5672: 
    push           pc_libpcl.strpcl.p u64 
    push           8          
    pushptroff                u64 1 0
    push           46         
    pushptroff                u16 1 0
    push           9          i64 
    dotindex                  i64 
    jumpfalse      #5682      u64 
    setargs                   1 0
    push           "Procrts"  u64 
    callproc       &pc_libpcl.psstr 
    jump           #5683      
#5682: 
    push           pc_libpcl.strpcl.opcode i64 
    push           16         i64 
    jumpne         #5684      i64 
    setargs                   1 0
    push           "Threadedproc" u64 
    callproc       &pc_libpcl.psstr 
    jump           #5683      
#5684: 
    setargs                   1 0
    push           "Proc"     u64 
    callproc       &pc_libpcl.psstr 
#5683: 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.strpcl.p u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &pc_libpcl.psname 
    setargs                   1 0
    startmult                 
    push           pc_libpcl.strpcl.p u64 
    push           2          
    pushptroff                u8 1 0
    push           0          i64 
    dotindex                  i64 
    jumpfalse      #5685      u64 
    push           "::"       u64 
    resetmult                 
    jump           #5686      
#5685: 
    push           ":"        u64 
    endmult                   
#5686: 
    callproc       &pc_libpcl.psstr 
    push           pc_libpcl.strpcl.p u64 
    push           3          
    pushptroff                u8 1 0
    jumpfalse      #5687      i64 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    setargs                   2 0
    push           pc_libpcl.strpcl.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_libpcl.strpcl.p u64 
    push           3          
    pushptroff                u8 1 0
    callfn         &pc_libpcl.strpmode u64 
    callproc       &pc_libpcl.psstr 
#5687: 
    jump           #5679      
    jump           #5680      
#5673: 
    setargs                   1 0
    push           "End"      u64 
    callproc       &pc_libpcl.psstr 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    jump           #5679      
    jump           #5680      
#5674: 
    setargs                   1 0
    push           "Endext"   u64 
    callproc       &pc_libpcl.psstr 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    jump           #5679      
    jump           #5680      
#5675: 
    setargs                   1 0
    push           "Extproc"  u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.strpcl.p u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &pc_libpcl.psname 
    push           pc_libpcl.strpcl.p u64 
    push           3          
    pushptroff                u8 1 0
    jumpfalse      #5688      i64 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    setargs                   2 0
    push           pc_libpcl.strpcl.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_libpcl.strpcl.p u64 
    push           3          
    pushptroff                u8 1 0
    callfn         &pc_libpcl.strpmode u64 
    callproc       &pc_libpcl.psstr 
#5688: 
    jump           #5679      
    jump           #5680      
#5676: 
    setargs                   1 0
    push           pc_libpcl.strpcl.p u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &pc_libpcl.psname 
    setargs                   1 0
    startmult                 
    push           pc_libpcl.strpcl.p u64 
    push           8          
    pushptroff                u64 1 0
    push           46         
    pushptroff                u16 1 0
    push           3          i64 
    dotindex                  i64 
    jumpfalse      #5689      u64 
    push           "::"       u64 
    resetmult                 
    jump           #5690      
#5689: 
    push           ":"        u64 
    endmult                   
#5690: 
    callproc       &pc_libpcl.psstr 
    jump           #5679      
    jump           #5680      
#5677: 
    setargs                   1 0
    push           "Endprogram" u64 
    callproc       &pc_libpcl.psstr 
    jump           #5679      
    jump           #5680      
#5678: 
#5680: 
    setargs                   1 0
    push           "    "     u64 
    callproc       &pc_libpcl.psstr 
    setargs                   2 0
    push           &pc_tables.pclnames 
    push           pc_libpcl.strpcl.opcode i64 
    pushptroff                u64 8 0
    push           1          i64 
    addrefoff                 u64 1 0
    push           &pc_libpcl.strpcl.str 
    callproc       &strcpy    
    setargs                   4 0
    push           32         i64 
    push           15         i64 
    push           &pc_libpcl.strpcl.str 
    push           pc_libpcl.dest u64 
    callproc       &mlibp.gs_leftstr 
    push           pc_libpcl.strpcl.p u64 
    pushptr                   u8 
    push           0          i64 
    jumpeq         #5691      i64 
    setargs                   1 0
    setargs                   1 0
    push           pc_libpcl.strpcl.p u64 
    callfn         &pc_libpcl.stropnd u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
#5691: 
    setargs                   1 0
    push           30         i64 
    callproc       &pc_libpcl.pstabto 
    push           pc_libpcl.strpcl.p u64 
    push           3          
    pushptroff                u8 1 0
    push           0          i64 
    jumpeq         #5692      i64 
    setargs                   1 0
    setargs                   2 0
    push           pc_libpcl.strpcl.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_libpcl.strpcl.p u64 
    push           3          
    pushptroff                u8 1 0
    callfn         &pc_libpcl.strpmode u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
#5692: 
    push           &pc_tables.pclhastype 
    push           pc_libpcl.strpcl.opcode i64 
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #5693      i64 
    push           pc_libpcl.strpcl.p u64 
    push           3          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #5694      i64 
    setargs                   1 0
    push           "void"     u64 
    callproc       &pc_libpcl.psstr 
#5694: 
    setargs                   1 0
    setargs                   2 0
    push           pc_libpcl.strpcl.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_libpcl.strpcl.p u64 
    push           16         
    pushptroff                i32 1 0
    callfn         &pc_libpcl.strpmode u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
#5693: 
    push           &pc_tables.pclextra 
    push           pc_libpcl.strpcl.opcode i64 
    pushptroff                u8 1 0
    jumpfalse      #5695      i64 
    setargs                   1 0
    push           pc_libpcl.strpcl.p u64 
    push           16         
    pushptroff                i32 1 0
    callproc       &pc_libpcl.psint 
    push           &pc_tables.pclextra 
    push           pc_libpcl.strpcl.opcode i64 
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #5696      i64 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.strpcl.p u64 
    push           20         
    pushptroff                i32 1 0
    callproc       &pc_libpcl.psint 
#5696: 
#5695: 
#5679: 
    retproc                   
End


Proc pc_libpcl.stropnd: u64
    param          pc_libpcl.stropnd.p u64 
    local          pc_libpcl.stropnd.length i64 
    local          pc_libpcl.stropnd.d u64 
    procentry                 
    push           pc_libpcl.stropnd.p u64 
    push           0          u64 
    jumpne         #5698      u64 
    push           ""         u64 
    setret                    u64 
    jump           #5699      
#5698: 
    push           pc_libpcl.stropnd.p u64 
    pushptr                   u8 
    push           4          i64 
    casejumpeq     #5700      i64 0
    push           5          i64 
    casejumpeq     #5701      i64 0
    push           7          i64 
    casejumpeq     #5702      i64 0
    push           8          i64 
    casejumpeq     #5703      i64 0
    push           1          i64 
    casejumpeq     #5704      i64 0
    push           2          i64 
    casejumpeq     #5705      i64 0
    push           3          i64 
    casejumpeq     #5706      i64 0
    push           0          i64 
    casejumpeq     #5707      i64 0
    push           6          i64 
    casejumpeq     #5708      i64 0
    push           9          i64 
    casejumpeq     #5709      i64 0
    popstack                  i64 
    jump           #5710      
#5700: 
    setargs                   2 0
    push           0          u64 
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &msysp.strint u64 
    setret                    u64 
    jump           #5699      
    jump           #5711      
#5701: 
    setargs                   1 0
    push           &pc_libpcl.stropnd.str 
    callproc       &msysp.m$print_startstr 
    setargs                   2 0
    push           "e16.16"   u64 
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                r64 1 0
    callproc       &msysp.m$print_r64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #5711      
#5702: 
    setargs                   1 0
    push           &pc_libpcl.stropnd.str 
    callproc       &msysp.m$print_startstr 
    setargs                   2 0
    push           "e16.16"   u64 
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                r32 1 0
    callproc       &msysp.m$print_r32 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #5711      
#5703: 
    setargs                   1 0
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &strlen    i64 
    store          pc_libpcl.stropnd.length i64 
    push           256        i64 
    jumpge         #5712      i64 
    setargs                   2 0
    push           "\""       u64 
    push           &pc_libpcl.stropnd.str 
    callproc       &strcpy    
    setargs                   2 0
    push           &pc_libpcl.stropnd.str 
    push           1          i64 
    addrefoff                 u64 1 0
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &pc_libpcl.convertstring 
    setargs                   2 0
    push           "\""       u64 
    push           &pc_libpcl.stropnd.str 
    callproc       &strcat    
    jump           #5713      
#5712: 
    push           pc_libpcl.longstring u64 
    jumpfalse      #5714      u64 
    setargs                   2 0
    push           pc_libpcl.longstringlen i64 
    push           pc_libpcl.longstring u64 
    callproc       &mlibp.pcm_free 
#5714: 
    push           pc_libpcl.stropnd.length i64 
    push           2          i64 
    mul                       i64 
    pop            pc_libpcl.longstringlen i64 
    setargs                   1 0
    push           pc_libpcl.longstringlen i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pc_libpcl.longstring u64 
    push           34         u64 
    push           pc_libpcl.longstring u64 
    popptr                    u8 
    setargs                   2 0
    push           pc_libpcl.longstring u64 
    push           1          i64 
    addrefoff                 u64 1 0
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libpcl.convertstring i64 
    pop            pc_libpcl.stropnd.length i64 
    push           34         u64 
    push           pc_libpcl.longstring u64 
    push           pc_libpcl.stropnd.length i64 
    popptroff                 u8 1 1
    push           0          u64 
    push           pc_libpcl.longstring u64 
    push           pc_libpcl.stropnd.length i64 
    popptroff                 u8 1 2
    push           pc_libpcl.longstring u64 
    setret                    u64 
    jump           #5699      
#5713: 
    jump           #5711      
#5704: 
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_libpcl.stropnd.d u64 
    setargs                   1 0
    push           &pc_libpcl.stropnd.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    startmult                 
    push           pc_libpcl.stropnd.d u64 
    push           46         
    pushptroff                u16 1 0
    push           8          i64 
    dotindex                  i64 
    jumpfalse      #5715      u64 
    push           "`"        u64 
    resetmult                 
    jump           #5716      
#5715: 
    push           ""         u64 
    endmult                   
#5716: 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           pc_libpcl.stropnd.d u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           pc_libpcl.stropnd.p u64 
    push           1          
    pushptroff                u8 1 0
    push           5          i64 
    setjumpeq      #5717      i64 
    push           6          i64 
    setjumpne      #5718      i64 
#5717: 
    setargs                   2 0
    push           ":"        u64 
    push           &pc_libpcl.stropnd.str 
    callproc       &strcat    
#5718: 
    jump           #5711      
#5705: 
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_libpcl.stropnd.d u64 
    setargs                   1 0
    push           &pc_libpcl.stropnd.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "&##"      u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    startmult                 
    push           pc_libpcl.stropnd.d u64 
    push           46         
    pushptroff                u16 1 0
    push           8          i64 
    dotindex                  i64 
    jumpfalse      #5719      u64 
    push           "`"        u64 
    resetmult                 
    jump           #5720      
#5719: 
    push           ""         u64 
    endmult                   
#5720: 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libpcl.stropnd.d u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #5711      
#5706: 
    setargs                   1 0
    push           &pc_libpcl.stropnd.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "## "      u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           "#"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                i64 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #5711      
#5707: 
    push           ""         u64 
    setret                    u64 
    jump           #5699      
    jump           #5711      
#5708: 
    setargs                   1 0
    push           &pc_libpcl.stropnd.str 
    callproc       &msysp.m$print_startstr 
    setargs                   3 0
    push           0          i64 
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                i128 1 0
    callproc       &msysp.m$print_i128 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #5711      
#5709: 
    setargs                   2 0
    push           0          u64 
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &msysp.strint u64 
    setret                    u64 
    jump           #5699      
    jump           #5711      
#5710: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pc_tables.opndnames 
    push           pc_libpcl.stropnd.p u64 
    pushptr                   u8 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           "<PCLOPND?>" u64 
    setret                    u64 
    jump           #5699      
#5711: 
    push           &pc_libpcl.stropnd.str 
    setret                    u64 
    jump           #5699      
#5699: 
    retfn                     u64 
End


Proc pc_libpcl.psstr:
    param          pc_libpcl.psstr.s u64 
    procentry                 
    setargs                   2 0
    push           pc_libpcl.psstr.s u64 
    push           pc_libpcl.dest u64 
    callproc       &mlibp.gs_str 
#5722: 
    retproc                   
End


Proc pc_libpcl.psline:
    procentry                 
    setargs                   1 0
    push           pc_libpcl.dest u64 
    callproc       &mlibp.gs_line 
#5724: 
    retproc                   
End


Proc pc_libpcl.psint:
    param          pc_libpcl.psint.a i64 
    procentry                 
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_libpcl.psint.a i64 
    callfn         &msysp.strint u64 
    push           pc_libpcl.dest u64 
    callproc       &mlibp.gs_str 
#5726: 
    retproc                   
End


Proc pc_libpcl.psname:
    param          pc_libpcl.psname.d u64 
    procentry                 
    push           pc_libpcl.psname.d u64 
    push           46         
    pushptroff                u16 1 0
    push           8          i64 
    dotindex                  i64 
    jumpfalse      #5728      u64 
    setargs                   2 0
    push           "`"        u64 
    push           pc_libpcl.dest u64 
    callproc       &mlibp.gs_str 
#5728: 
    setargs                   2 0
    push           pc_libpcl.psname.d u64 
    pushptr                   u64 
    push           pc_libpcl.dest u64 
    callproc       &mlibp.gs_str 
#5729: 
    retproc                   
End


Proc pc_libpcl.pstabto:
    param          pc_libpcl.pstabto.n i64 
    local          pc_libpcl.pstabto.col i64 
    procentry                 
    push           pc_libpcl.dest u64 
    push           8          
    pushptroff                i32 1 0
    push           pc_libpcl.destlinestart i64 
    sub                       i64 
    pop            pc_libpcl.pstabto.col i64 
    jump           #5731      
#5732: 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
    push           &pc_libpcl.pstabto.col 
    incr                      i64 1
#5731: 
    push           pc_libpcl.pstabto.n i64 
    push           pc_libpcl.pstabto.col i64 
    jumpgt         #5732      i64 
#5733: 
#5734: 
    retproc                   
End


Proc pc_libpcl.convertstring: i64
    param          pc_libpcl.convertstring.s u64 
    param          pc_libpcl.convertstring.t u64 
    local          pc_libpcl.convertstring.c i64 
    local          pc_libpcl.convertstring.t0 u64 
    procentry                 
    push           pc_libpcl.convertstring.t u64 
    pop            pc_libpcl.convertstring.t0 u64 
    jump           #5736      
#5737: 
    push           pc_libpcl.convertstring.c i64 
    switch         #5738      7 92
    opnd           #5739      
#5738: 
    switchlabel    #5740      
    switchlabel    #5740      
    switchlabel    #5741      
    switchlabel    #5742      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5743      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5740      
    switchlabel    #5740      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5744      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5739      
    switchlabel    #5745      
    endswitch                 
#5744: 
    push           92         u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    push           34         u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    jump           #5746      
#5742: 
    push           92         u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    push           110        u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    jump           #5746      
#5743: 
    push           92         u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    push           99         u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    jump           #5746      
#5741: 
    push           92         u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    push           116        u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    jump           #5746      
#5745: 
    push           92         u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    push           92         u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    jump           #5746      
#5740: 
    push           60         u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    push           pc_libpcl.convertstring.c i64 
    push           10         i64 
    idiv                      i64 
    push           48         i64 
    add                       u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    push           pc_libpcl.convertstring.c i64 
    push           10         i64 
    irem                      i64 
    push           48         i64 
    add                       u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    push           62         u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    jump           #5746      
#5739: 
    push           pc_libpcl.convertstring.c u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
#5746: 
#5736: 
    push           &pc_libpcl.convertstring.s 
    loadincr                  u64 1
    pushptr                   u8 
    store          pc_libpcl.convertstring.c i64 
    jumptrue       #5737      i64 
#5747: 
    push           0          u64 
    push           pc_libpcl.convertstring.t u64 
    popptr                    u8 
    push           pc_libpcl.convertstring.t u64 
    push           pc_libpcl.convertstring.t0 u64 
    subref                    i64 1
    setret                    i64 
    jump           #5748      
#5748: 
    retfn                     i64 
End


Proc pc_libpcl.strlabel:
    param          pc_libpcl.strlabel.labelno i64 
    param          pc_libpcl.strlabel.colon i64 
    procentry                 
    setargs                   1 0
    push           "#"        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.strlabel.labelno i64 
    callproc       &pc_libpcl.psint 
    push           pc_libpcl.strlabel.colon i64 
    jumpfalse      #5750      i64 
    setargs                   1 0
    push           ":"        u64 
    callproc       &pc_libpcl.psstr 
#5750: 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
#5751: 
    retproc                   
End


Proc pc_libpcl.psopnd:
    param          pc_libpcl.psopnd.p u64 
    procentry                 
    setargs                   1 0
    setargs                   1 0
    push           pc_libpcl.psopnd.p u64 
    callfn         &pc_libpcl.stropnd u64 
    callproc       &pc_libpcl.psstr 
#5753: 
    retproc                   
End


Proc pc_libpcl.strpmode: u64
    param          pc_libpcl.strpmode.m i64 
    param          pc_libpcl.strpmode.size i64 
    procentry                 
    push           pc_libpcl.strpmode.m i64 
    push           13         i64 
    jumpeq         #5755      i64 
    setargs                   2 0
    push           &pc_tables.pstdnames 
    push           pc_libpcl.strpmode.m i64 
    pushptroff                u64 8 0
    push           &pc_libpcl.strpmode.str 
    callproc       &strcpy    
    jump           #5756      
#5755: 
    setargs                   1 0
    push           &pc_libpcl.strpmode.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "#:#"      u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           &pc_tables.pstdnames 
    push           pc_libpcl.strpmode.m i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libpcl.strpmode.size i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#5756: 
    push           &pc_libpcl.strpmode.str 
    setret                    u64 
    jump           #5757      
#5757: 
    retfn                     u64 
End


Proc pc_libpcl.writepcl:
    param          pc_libpcl.writepcl.p u64 
    procentry                 
    setargs                   1 0
    push           pc_libpcl.writepcl.p u64 
    callproc       &pc_libpcl.strpcl 
    setargs                   1 0
    push           pc_libpcl.dest u64 
    callproc       &mlibp.gs_line 
#5759: 
    retproc                   
End


Proc pc_libpcl.writeallpcl:
    local          pc_libpcl.writeallpcl.p u64 
    local          pc_libpcl.writeallpcl.d u64 
    local          pc_libpcl.writeallpcl.e u64 
    procentry                 
    setargs                   1 0
    push           pc_libpcl.dest u64 
    callproc       &mlibp.gs_init 
    push           pc_libpcl.dest u64 
    push           8          
    pushptroff                i32 1 0
    pop            pc_libpcl.destlinestart i64 
    push           pc_libpcl.pcstart u64 
    pop            pc_libpcl.writeallpcl.p u64 
    jump           #5761      
#5762: 
    setargs                   1 0
    push           pc_libpcl.writeallpcl.p u64 
    callproc       &pc_libpcl.writepcl 
    push           pc_libpcl.dest u64 
    push           8          
    pushptroff                i32 1 0
    pop            pc_libpcl.destlinestart i64 
    push           &pc_libpcl.writeallpcl.p 
    incr                      u64 32
#5761: 
    push           pc_libpcl.writeallpcl.p u64 
    push           pc_libpcl.pccurr u64 
    jumple         #5762      u64 
#5763: 
    push           pc_libpcl.longstring u64 
    jumpfalse      #5764      u64 
    setargs                   2 0
    push           pc_libpcl.longstringlen i64 
    push           pc_libpcl.longstring u64 
    callproc       &mlibp.pcm_free 
#5764: 
    push           pc_libpcl.dest u64 
    push           8          
    pushptroff                i32 1 0
    push           pc_libpcl.dest u64 
    pushptr                   u64 
    setretmult                2
    jump           #5765      
#5765: 
    retfn                     
End


Proc pc_libpcl.nextlabel: i64
    procentry                 
    push           pc_libpcl.labelno i64 
    push           100000     i64 
    jumplt         #5767      i64 
    setargs                   3 0
    push           0          i64 
    push           0          u64 
    push           "Too many global labels" u64 
    callproc       &pc_libpcl.pclerror 
#5767: 
    push           &pc_libpcl.labelno 
    incrload                  i64 1
    setret                    i64 
    jump           #5768      
#5768: 
    retfn                     i64 
End


Proc pc_libpcl.fixlabel: i64
    param          pc_libpcl.fixlabel.userlab i64 
    procentry                 
    push           pc_libpcl.fixlabel.userlab i64 
    push           1          i64 
    push           100000     i64 
    jumpinrange    #5770      i64 
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_libpcl.fixlabel.userlab i64 
    callfn         &msysp.strint u64 
    push           "Label no out of range:" u64 
    callproc       &pc_libpcl.perror_s 
#5770: 
    startmult                 
    push           &pc_libpcl.labelmap 
    push           pc_libpcl.fixlabel.userlab i64 
    pushptroff                i32 4 -4
    push           0          i64 
    jumpne         #5771      i64 
    setargs                   0 0
    callfn         &pc_libpcl.nextlabel i64 
    push           &pc_libpcl.labelmap 
    push           pc_libpcl.fixlabel.userlab i64 
    popptroff                 i32 4 -4
    push           pc_libpcl.labelno i64 
    resetmult                 
    jump           #5772      
#5771: 
    push           &pc_libpcl.labelmap 
    push           pc_libpcl.fixlabel.userlab i64 
    pushptroff                i32 4 -4
    endmult                   
#5772: 
    setret                    i64 
    jump           #5773      
#5773: 
    retfn                     i64 
End


Proc pc_libpcl.pdefinelabel:
    param          pc_libpcl.pdefinelabel.label i64 
    param          pc_libpcl.pdefinelabel.seqno i64 
    procentry                 
    push           &pc_libpcl.labeloffset 
    push           pc_libpcl.pdefinelabel.label i64 
    pushptroff                u64 8 -8
    jumpfalse      #5775      u64 
    setargs                   3 0
    push           0          i64 
    setargs                   2 0
    push           0          u64 
    push           pc_libpcl.pdefinelabel.label i64 
    callfn         &msysp.strint u64 
    push           "Redefining label:" u64 
    callproc       &pc_libpcl.pclerror 
#5775: 
    setargs                   2 0
    setargs                   1 0
    push           pc_libpcl.pdefinelabel.label i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    push           20         i64 
    callproc       &pc_libpcl.pcl_gen 
    push           pc_libpcl.pdefinelabel.seqno i64 
    push           pc_libpcl.pccurr u64 
    push           24         
    popptroff                 u32 1 0
    push           pc_libpcl.pccurr u64 
    push           &pc_libpcl.labeloffset 
    push           pc_libpcl.pdefinelabel.label i64 
    popptroff                 u64 8 -8
#5776: 
    retproc                   
End


Proc pc_libpcl.assignlabeltoname:
    param          pc_libpcl.assignlabeltoname.d u64 
    procentry                 
    push           pc_libpcl.assignlabeltoname.d u64 
    push           40         
    pushptroff                i32 1 0
    jumpfalse      #5778      i64 
    jump           #5779      
#5778: 
    setargs                   0 0
    callfn         &pc_libpcl.nextlabel i64 
    push           pc_libpcl.assignlabeltoname.d u64 
    push           40         
    popptroff                 i32 1 0
#5779: 
    retproc                   
End


Proc pc_libpcl.pclerror:
    param          pc_libpcl.pclerror.mess u64 
    param          pc_libpcl.pclerror.param u64 
    param          pc_libpcl.pclerror.lineno i64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "PCC error:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libpcl.pclerror.mess u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           pc_libpcl.pclerror.param u64 
    jumpfalse      #5781      u64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           pc_libpcl.pclerror.param u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#5781: 
    push           pc_libpcl.pclerror.lineno i64 
    jumpfalse      #5782      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           " on line:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libpcl.pclerror.lineno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#5782: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#5783: 
    retproc                   
End


Proc pc_libpcl.getpclstr: u64
    param          pc_libpcl.getpclstr.p u64 
    procentry                 
    setargs                   1 0
    push           pc_libpcl.dest u64 
    callproc       &mlibp.gs_init 
    push           pc_libpcl.dest u64 
    push           8          
    pushptroff                i32 1 0
    pop            pc_libpcl.destlinestart i64 
    setargs                   1 0
    push           pc_libpcl.getpclstr.p u64 
    callproc       &pc_libpcl.strpcl 
    push           0          u64 
    push           pc_libpcl.dest u64 
    pushptr                   u64 
    push           pc_libpcl.dest u64 
    push           8          
    pushptroff                i32 1 0
    popptroff                 u8 1 0
    push           pc_libpcl.dest u64 
    pushptr                   u64 
    setret                    u64 
    jump           #5785      
#5785: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_getopcode:: i64
    procentry                 
    push           pc_libpcl.pccurr u64 
    push           1          
    pushptroff                u8 1 0
    setret                    i64 
    jump           #5787      
#5787: 
    retfn                     i64 
End


Proc pc_libpcl.pcl_setopcode::
    param          pc_libpcl.pcl_setopcode.opc i64 
    procentry                 
    push           pc_libpcl.pcl_setopcode.opc i64 
    push           pc_libpcl.pccurr u64 
    push           1          
    popptroff                 u8 1 0
#5789: 
    retproc                   
End


Proc pc_libpcl.pcl_settype::
    param          pc_libpcl.pcl_settype.t i64 
    param          pc_libpcl.pcl_settype.size i64 
    procentry                 
    push           pc_libpcl.pcl_settype.t i64 
    push           pc_libpcl.pccurr u64 
    push           3          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_settype.size i64 
    push           pc_libpcl.pccurr u64 
    push           4          
    popptroff                 i32 1 0
    push           pc_libpcl.pcl_settype.t i64 
    push           0          i64 
    jumpge         #5791      i64 
    push           13         i64 
    push           pc_libpcl.pccurr u64 
    push           3          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_settype.t i64 
    neg                       i64 
    push           pc_libpcl.pccurr u64 
    push           4          
    popptroff                 i32 1 0
#5791: 
#5792: 
    retproc                   
End


Proc pc_libpcl.pcl_setxy::
    param          pc_libpcl.pcl_setxy.x i64 
    param          pc_libpcl.pcl_setxy.y i64 
    procentry                 
    push           pc_libpcl.pcl_setxy.x i64 
    push           pc_libpcl.pccurr u64 
    push           16         
    popptroff                 i32 1 0
    push           pc_libpcl.pcl_setxy.y i64 
    push           pc_libpcl.pccurr u64 
    push           20         
    popptroff                 i32 1 0
#5794: 
    retproc                   
End


Proc pc_libpcl.pcl_setscale::
    param          pc_libpcl.pcl_setscale.scale i64 
    procentry                 
    push           pc_libpcl.pcl_setscale.scale i64 
    push           pc_libpcl.pccurr u64 
    push           16         
    popptroff                 i32 1 0
#5796: 
    retproc                   
End


Proc pc_libpcl.pcl_setoffset::
    param          pc_libpcl.pcl_setoffset.offset i64 
    procentry                 
    push           pc_libpcl.pcl_setoffset.offset i64 
    push           pc_libpcl.pccurr u64 
    push           20         
    popptroff                 i32 1 0
#5798: 
    retproc                   
End


Proc pc_libpcl.pcl_addoffset::
    param          pc_libpcl.pcl_addoffset.offset i64 
    procentry                 
    push           pc_libpcl.pccurr u64 
    push           20         
    addrefoff                 u64 1 0
    push           pc_libpcl.pcl_addoffset.offset i64 
    addto                     i32 
#5800: 
    retproc                   
End


Proc pc_libpcl.pcl_setincr::
    param          pc_libpcl.pcl_setincr.n i64 
    procentry                 
    push           pc_libpcl.pcl_setincr.n i64 
    push           pc_libpcl.pccurr u64 
    push           16         
    popptroff                 i32 1 0
#5802: 
    retproc                   
End


Proc pc_libpcl.pcl_setnargs::
    param          pc_libpcl.pcl_setnargs.n i64 
    procentry                 
    push           pc_libpcl.pcl_setnargs.n i64 
    push           pc_libpcl.pccurr u64 
    push           16         
    popptroff                 i32 1 0
#5804: 
    retproc                   
End


Proc pc_libpcl.pcl_setnmult::
    param          pc_libpcl.pcl_setnmult.n i64 
    procentry                 
    setargs                   1 0
    push           "SETNMULT" u64 
    callproc       &mlibp.abortprogram 
#5806: 
    retproc                   
End


Proc pc_libpcl.pcl_setrettypes::
    param          pc_libpcl.pcl_setrettypes.types u64 
    param          pc_libpcl.pcl_setrettypes.n i64 
    procentry                 
    setargs                   1 0
    push           "SETRETTYPES" u64 
    callproc       &mlibp.abortprogram 
#5808: 
    retproc                   
End


Proc pc_libpcl.pcl_setexported::
    param          pc_libpcl.pcl_setexported.x i64 
    procentry                 
    push           pc_libpcl.pcl_setexported.x u64 
    push           pc_libpcl.pccurr u64 
    push           2          
    addrefoff                 u64 1 0
    push           0          i64 
    popdotindex               u8 
    push           pc_libpcl.pccurr u64 
    push           8          
    pushptroff                u64 1 0
    jumpfalse      #5810      u64 
    push           pc_libpcl.pcl_setexported.x u64 
    push           pc_libpcl.pccurr u64 
    push           8          
    pushptroff                u64 1 0
    push           46         
    addrefoff                 u64 1 0
    push           3          i64 
    popdotindex               u16 
#5810: 
#5811: 
    retproc                   
End


Proc pc_libpcl.pcl_isthreaded::
    param          pc_libpcl.pcl_isthreaded.x i64 
    procentry                 
    push           pc_libpcl.pccurr u64 
    push           8          
    pushptroff                u64 1 0
    jumpfalse      #5813      u64 
    push           pc_libpcl.pcl_isthreaded.x u64 
    push           pc_libpcl.pccurr u64 
    push           8          
    pushptroff                u64 1 0
    push           46         
    addrefoff                 u64 1 0
    push           7          i64 
    popdotindex               u16 
#5813: 
#5814: 
    retproc                   
End


Proc pc_libpcl.pcl_setnvariadics::
    param          pc_libpcl.pcl_setnvariadics.n i64 
    procentry                 
    push           pc_libpcl.pcl_setnvariadics.n i64 
    push           pc_libpcl.pccurr u64 
    push           20         
    popptroff                 i32 1 0
#5816: 
    retproc                   
End


Proc pc_libpcl.pcl_setalign::
    param          pc_libpcl.pcl_setalign.n i64 
    procentry                 
    push           pc_libpcl.pcl_setalign.n i64 
    push           pc_libpcl.pccurr u64 
    push           16         
    popptroff                 i32 1 0
#5818: 
    retproc                   
End


Proc pc_libpcl.pcl_setrtsproc::
    procentry                 
    push           pc_libpcl.pccurr u64 
    push           8          
    pushptroff                u64 1 0
    jumpfalse      #5820      u64 
    push           pc_libpcl.pccurr u64 
    push           1          
    pushptroff                u8 1 0
    push           8          i64 
    jumpne         #5820      i64 
    setargs                   1 0
    push           pc_libpcl.pccurr u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &pc_libpcl.definertsproc 
#5820: 
#5821: 
    retproc                   
End


Proc pc_libpcl.pcl_setoldtype::
    param          pc_libpcl.pcl_setoldtype.t i64 
    procentry                 
    push           pc_libpcl.pcl_setoldtype.t i64 
    push           pc_libpcl.pccurr u64 
    push           16         
    popptroff                 i32 1 0
#5823: 
    retproc                   
End


Proc pc_libpcl.pcl_setpos::
    param          pc_libpcl.pcl_setpos.pos i64 
    procentry                 
    setargs                   1 0
    push           "SETPOS"   u64 
    callproc       &mlibp.abortprogram 
#5825: 
    retproc                   
End


Proc pc_libpcl.pcl_lasterror:: u64
    procentry                 
    push           pc_libpcl.errormess u64 
    setret                    u64 
    jump           #5827      
#5827: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_writepclfile:: i64
    param          pc_libpcl.pcl_writepclfile.filename u64 
    local          pc_libpcl.pcl_writepclfile.source u64 
    local          pc_libpcl.pcl_writepclfile.length i64 
    procentry                 
    setargs                   0 0
    callproc       &pc_libpcl.fixuppcl 
    setargs                   0 0
    callfn         &pc_libpcl.writeallpcl 
    type                      u64 
    type                      i64 
    pop            pc_libpcl.pcl_writepclfile.source u64 
    pop            pc_libpcl.pcl_writepclfile.length i64 
    setargs                   3 0
    push           pc_libpcl.pcl_writepclfile.length i64 
    push           pc_libpcl.pcl_writepclfile.source u64 
    push           pc_libpcl.pcl_writepclfile.filename u64 
    callfn         &mlibp.writefile i64 
    setret                    i64 
    jump           #5829      
#5829: 
    retfn                     i64 
End


Proc pc_libpcl.perror:
    param          pc_libpcl.perror.mess u64 
    procentry                 
    setargs                   2 0
    push           0          u64 
    push           pc_libpcl.perror.mess u64 
    callproc       &pc_libpcl.perror_s 
#5831: 
    retproc                   
End


Proc pc_libpcl.perror_s:
    param          pc_libpcl.perror_s.mess u64 
    param          pc_libpcl.perror_s.param u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "PCL error:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libpcl.perror_s.mess u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           pc_libpcl.perror_s.param u64 
    jumpfalse      #5833      u64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           ":"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libpcl.perror_s.param u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#5833: 
    push           1          i64 
    stop                      
#5834: 
    retproc                   
End


Proc pc_libpcl.writesymbols:
    local          pc_libpcl.writesymbols.p u64 
    local          pc_libpcl.writesymbols.d u64 
    local          pc_libpcl.writesymbols.e u64 
    procentry                 
    push           pc_libpcl.pcstart u64 
    pop            pc_libpcl.writesymbols.p u64 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    setargs                   1 0
    push           "PROC PCL DEF OPS" u64 
    callproc       &pc_libpcl.psstr 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    jump           #5836      
#5837: 
    push           pc_libpcl.writesymbols.p u64 
    push           1          
    pushptroff                u8 1 0
    push           8          i64 
    casejumpeq     #5838      i64 0
    push           5          i64 
    casejumpeq     #5838      i64 0
    push           6          i64 
    casejumpeq     #5838      i64 0
    push           12         i64 
    casejumpeq     #5838      i64 0
    push           21         i64 
    casejumpeq     #5838      i64 0
    push           18         i64 
    casejumpeq     #5838      i64 0
    push           19         i64 
    casejumpeq     #5838      i64 0
    popstack                  i64 
    jump           #5839      
#5838: 
    push           pc_libpcl.writesymbols.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_libpcl.writesymbols.d u64 
    setargs                   1 0
    push           pc_libpcl.writesymbols.p i64 
    callproc       &pc_libpcl.psint 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.d i64 
    callproc       &pc_libpcl.psint 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.d u64 
    pushptr                   u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           ": "       u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.p u64 
    push           24         
    pushptroff                u32 1 0
    callproc       &pc_libpcl.psint 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    setargs                   1 0
    push           "\tOpcode:" u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           &pc_tables.pclnames 
    push           pc_libpcl.writesymbols.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &pc_libpcl.psstr 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    setargs                   1 0
    push           "\tPCLdef:" u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    startmult                 
    push           pc_libpcl.writesymbols.d u64 
    push           16         
    pushptroff                u64 1 0
    jumpfalse      #5840      u64 
    push           &pc_tables.pclnames 
    push           pc_libpcl.writesymbols.d u64 
    push           16         
    pushptroff                u64 1 0
    push           1          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    resetmult                 
    jump           #5841      
#5840: 
    push           "---"      u64 
    endmult                   
#5841: 
    callproc       &pc_libpcl.psstr 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    setargs                   1 0
    push           "\tIsdefined:" u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.d u64 
    push           46         
    pushptroff                u16 1 0
    push           0          i64 
    dotindex                  i64 
    callproc       &pc_libpcl.psint 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    setargs                   1 0
    push           "\tIsexported:" u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.d u64 
    push           46         
    pushptroff                u16 1 0
    push           3          i64 
    dotindex                  i64 
    callproc       &pc_libpcl.psint 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    setargs                   1 0
    push           "\tIsimported:" u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.d u64 
    push           46         
    pushptroff                u16 1 0
    push           1          i64 
    dotindex                  i64 
    callproc       &pc_libpcl.psint 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    setargs                   1 0
    push           "\tExtvariadics:" u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.p u64 
    push           16         
    pushptroff                i32 1 0
    callproc       &pc_libpcl.psint 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    setargs                   1 0
    push           "\tIsaddrof:" u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.d u64 
    push           46         
    pushptroff                u16 1 0
    push           2          i64 
    dotindex                  i64 
    callproc       &pc_libpcl.psint 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    setargs                   1 0
    push           "\tLabel#:" u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.d u64 
    push           40         
    pushptroff                i32 1 0
    callproc       &pc_libpcl.psint 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    jump           #5842      
#5839: 
#5842: 
#5843: 
    push           &pc_libpcl.writesymbols.p 
    incr                      u64 32
#5836: 
    push           pc_libpcl.writesymbols.p u64 
    push           pc_libpcl.pccurr u64 
    jumple         #5837      u64 
#5844: 
    push           pc_libpcl.pcstart u64 
    pop            pc_libpcl.writesymbols.p u64 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    setargs                   1 0
    push           "PROC PCL UNDEFINED MEM REFS" u64 
    callproc       &pc_libpcl.psstr 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    jump           #5845      
#5846: 
    push           pc_libpcl.writesymbols.p u64 
    pushptr                   u8 
    push           1          i64 
    setjumpeq      #5847      i64 
    push           2          i64 
    setjumpne      #5848      i64 
#5847: 
    push           pc_libpcl.writesymbols.p u64 
    push           8          
    pushptroff                u64 1 0
    push           46         
    pushptroff                u16 1 0
    push           0          i64 
    dotindex                  i64 
    jumptrue       #5848      u64 
    push           pc_libpcl.writesymbols.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_libpcl.writesymbols.d u64 
    setargs                   1 0
    push           pc_libpcl.writesymbols.p i64 
    callproc       &pc_libpcl.psint 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.d i64 
    callproc       &pc_libpcl.psint 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           "Not defined: " u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.d u64 
    pushptr                   u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.p u64 
    push           24         
    pushptroff                u32 1 0
    callproc       &pc_libpcl.psint 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    push           1          u64 
    push           pc_libpcl.writesymbols.d u64 
    push           46         
    addrefoff                 u64 1 0
    push           0          i64 
    popdotindex               u16 
#5848: 
#5849: 
    push           &pc_libpcl.writesymbols.p 
    incr                      u64 32
#5845: 
    push           pc_libpcl.writesymbols.p u64 
    push           pc_libpcl.pccurr u64 
    jumple         #5846      u64 
#5850: 
#5851: 
    retproc                   
End


Proc pc_libpcl.getbasename: u64
    param          pc_libpcl.getbasename.s u64 
    local          pc_libpcl.getbasename.t u64 
    procentry                 
    push           pc_libpcl.getbasename.s u64 
    setargs                   1 0
    push           pc_libpcl.getbasename.s u64 
    callfn         &strlen    i64 
    addrefoff                 u64 1 -1
    pop            pc_libpcl.getbasename.t u64 
    jump           #5853      
#5854: 
    push           &pc_libpcl.getbasename.t 
    decr                      u64 1
#5853: 
    push           pc_libpcl.getbasename.t u64 
    push           pc_libpcl.getbasename.s u64 
    jumple         #5855      u64 
    push           pc_libpcl.getbasename.t u64 
    push           1          i64 
    subrefoff                 u64 1 0
    pushptr                   u8 
    push           46         u64 
    jumpne         #5854      u64 
#5855: 
#5856: 
    push           pc_libpcl.getbasename.t u64 
    setret                    u64 
    jump           #5857      
#5857: 
    retfn                     u64 
End


Proc pc_libpcl.definertsproc:
    param          pc_libpcl.definertsproc.d u64 
    local          pc_libpcl.definertsproc.s u64 
    local          pc_libpcl.definertsproc.c i64 
    local          pc_libpcl.definertsproc.av_1 i64 
    local          pc_libpcl.definertsproc.i i64 
    procentry                 
    push           pc_libpcl.definertsproc.d u64 
    pushptr                   u64 
    pop            pc_libpcl.definertsproc.s u64 
    jump           #5859      
#5860: 
#5859: 
    push           &pc_libpcl.definertsproc.s 
    loadincr                  u64 1
    pushptr                   u8 
    store          pc_libpcl.definertsproc.c i64 
    push           36         i64 
    jumpne         #5860      i64 
#5861: 
#5862: 
    push           1          i64 
    pop            pc_libpcl.definertsproc.i i64 
    push           6          i64 
    pop            pc_libpcl.definertsproc.av_1 i64 
    push           pc_libpcl.definertsproc.av_1 i64 
    push           1          i64 
    jumplt         #5863      i64 
#5864: 
    setargs                   2 0
    push           pc_libpcl.definertsproc.s u64 
    push           &pc_tables.rtsnames 
    push           pc_libpcl.definertsproc.i i64 
    pushptroff                u64 8 -8
    push           4          i64 
    addrefoff                 u64 1 0
    callfn         &mlibp.eqstring i64 
    jumpfalse      #5865      i64 
    push           1          u64 
    push           pc_libpcl.definertsproc.d u64 
    push           46         
    addrefoff                 u64 1 0
    push           9          i64 
    popdotindex               u16 
    push           pc_libpcl.definertsproc.i i64 
    push           pc_libpcl.definertsproc.d u64 
    push           26         
    popptroff                 u8 1 0
    push           pc_libpcl.definertsproc.d u64 
    push           &pc_decls.rtsproctable 
    push           pc_libpcl.definertsproc.i i64 
    popptroff                 u64 8 -8
    jump           #5866      
#5865: 
#5867: 
    forup          #5864      i64 1
    opnd           pc_libpcl.definertsproc.i 
    opnd           pc_libpcl.definertsproc.av_1 
#5863: 
#5868: 
#5866: 
    retproc                   
End


Proc pc_lex.lex:
    local          pc_lex.lex.i i64 
    local          pc_lex.lex.c i64 
    local          pc_lex.lex.d i64 
    local          pc_lex.lex.hsum i64 
    local          pc_lex.lex.length i64 
    local          pc_lex.lex.pstart u64 
    procentry                 
    push           0          i64 
    pop            pc_lex.lxsubcode i64 
#5870: 
    push           &pc_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    store          pc_lex.lex.c i64 
    switch         #5871      0 122
    opnd           #5872      
#5871: 
    switchlabel    #5873      
    switchlabel    #5872      
    switchlabel    #5872      
    switchlabel    #5872      
    switchlabel    #5872      
    switchlabel    #5872      
    switchlabel    #5872      
    switchlabel    #5872      
    switchlabel    #5872      
    switchlabel    #5874      
    switchlabel    #5875      
    switchlabel    #5872      
    switchlabel    #5872      
    switchlabel    #5876      
    switchlabel    #5872      
    switchlabel    #5872      
    switchlabel    #5872      
    switchlabel    #5872      
    switchlabel    #5872      
    switchlabel    #5872      
    switchlabel    #5872      
    switchlabel    #5872      
    switchlabel    #5872      
    switchlabel    #5872      
    switchlabel    #5872      
    switchlabel    #5872      
    switchlabel    #5873      
    switchlabel    #5872      
    switchlabel    #5872      
    switchlabel    #5872      
    switchlabel    #5872      
    switchlabel    #5872      
    switchlabel    #5874      
    switchlabel    #5877      
    switchlabel    #5878      
    switchlabel    #5879      
    switchlabel    #5880      
    switchlabel    #5872      
    switchlabel    #5881      
    switchlabel    #5872      
    switchlabel    #5872      
    switchlabel    #5872      
    switchlabel    #5882      
    switchlabel    #5872      
    switchlabel    #5883      
    switchlabel    #5884      
    switchlabel    #5880      
    switchlabel    #5872      
    switchlabel    #5885      
    switchlabel    #5885      
    switchlabel    #5885      
    switchlabel    #5885      
    switchlabel    #5885      
    switchlabel    #5885      
    switchlabel    #5885      
    switchlabel    #5885      
    switchlabel    #5885      
    switchlabel    #5885      
    switchlabel    #5886      
    switchlabel    #5877      
    switchlabel    #5872      
    switchlabel    #5872      
    switchlabel    #5872      
    switchlabel    #5872      
    switchlabel    #5872      
    switchlabel    #5887      
    switchlabel    #5887      
    switchlabel    #5887      
    switchlabel    #5887      
    switchlabel    #5887      
    switchlabel    #5887      
    switchlabel    #5887      
    switchlabel    #5887      
    switchlabel    #5887      
    switchlabel    #5887      
    switchlabel    #5887      
    switchlabel    #5887      
    switchlabel    #5887      
    switchlabel    #5887      
    switchlabel    #5887      
    switchlabel    #5887      
    switchlabel    #5887      
    switchlabel    #5887      
    switchlabel    #5887      
    switchlabel    #5887      
    switchlabel    #5887      
    switchlabel    #5887      
    switchlabel    #5887      
    switchlabel    #5887      
    switchlabel    #5887      
    switchlabel    #5887      
    switchlabel    #5872      
    switchlabel    #5872      
    switchlabel    #5872      
    switchlabel    #5872      
    switchlabel    #5880      
    switchlabel    #5888      
    switchlabel    #5880      
    switchlabel    #5880      
    switchlabel    #5880      
    switchlabel    #5880      
    switchlabel    #5880      
    switchlabel    #5880      
    switchlabel    #5880      
    switchlabel    #5880      
    switchlabel    #5880      
    switchlabel    #5880      
    switchlabel    #5880      
    switchlabel    #5880      
    switchlabel    #5880      
    switchlabel    #5880      
    switchlabel    #5880      
    switchlabel    #5880      
    switchlabel    #5880      
    switchlabel    #5880      
    switchlabel    #5880      
    switchlabel    #5880      
    switchlabel    #5880      
    switchlabel    #5880      
    switchlabel    #5880      
    switchlabel    #5880      
    switchlabel    #5880      
    switchlabel    #5880      
    endswitch                 
#5880: 
    push           pc_lex.lxsptr u64 
    push           1          i64 
    subrefoff                 u64 1 0
    pop            pc_lex.lex.pstart u64 
!doname::
#5889: 
    push           pc_lex.lex.pstart u64 
    pushptr                   u8 
    pop            pc_lex.lex.hsum i64 
#5890: 
    push           &pc_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    store          pc_lex.lex.c i64 
    switch         #5891      36 122
    opnd           #5892      
#5891: 
    switchlabel    #5893      
    switchlabel    #5892      
    switchlabel    #5892      
    switchlabel    #5892      
    switchlabel    #5892      
    switchlabel    #5892      
    switchlabel    #5892      
    switchlabel    #5892      
    switchlabel    #5892      
    switchlabel    #5892      
    switchlabel    #5893      
    switchlabel    #5892      
    switchlabel    #5893      
    switchlabel    #5893      
    switchlabel    #5893      
    switchlabel    #5893      
    switchlabel    #5893      
    switchlabel    #5893      
    switchlabel    #5893      
    switchlabel    #5893      
    switchlabel    #5893      
    switchlabel    #5893      
    switchlabel    #5892      
    switchlabel    #5892      
    switchlabel    #5892      
    switchlabel    #5892      
    switchlabel    #5892      
    switchlabel    #5892      
    switchlabel    #5892      
    switchlabel    #5894      
    switchlabel    #5894      
    switchlabel    #5894      
    switchlabel    #5894      
    switchlabel    #5894      
    switchlabel    #5894      
    switchlabel    #5894      
    switchlabel    #5894      
    switchlabel    #5894      
    switchlabel    #5894      
    switchlabel    #5894      
    switchlabel    #5894      
    switchlabel    #5894      
    switchlabel    #5894      
    switchlabel    #5894      
    switchlabel    #5894      
    switchlabel    #5894      
    switchlabel    #5894      
    switchlabel    #5894      
    switchlabel    #5894      
    switchlabel    #5894      
    switchlabel    #5894      
    switchlabel    #5894      
    switchlabel    #5894      
    switchlabel    #5894      
    switchlabel    #5894      
    switchlabel    #5892      
    switchlabel    #5892      
    switchlabel    #5892      
    switchlabel    #5892      
    switchlabel    #5893      
    switchlabel    #5892      
    switchlabel    #5893      
    switchlabel    #5893      
    switchlabel    #5893      
    switchlabel    #5893      
    switchlabel    #5893      
    switchlabel    #5893      
    switchlabel    #5893      
    switchlabel    #5893      
    switchlabel    #5893      
    switchlabel    #5893      
    switchlabel    #5893      
    switchlabel    #5893      
    switchlabel    #5893      
    switchlabel    #5893      
    switchlabel    #5893      
    switchlabel    #5893      
    switchlabel    #5893      
    switchlabel    #5893      
    switchlabel    #5893      
    switchlabel    #5893      
    switchlabel    #5893      
    switchlabel    #5893      
    switchlabel    #5893      
    switchlabel    #5893      
    switchlabel    #5893      
    switchlabel    #5893      
    endswitch                 
#5893: 
    push           pc_lex.lex.hsum i64 
    push           4          i64 
    shl                       i64 
    push           pc_lex.lex.hsum i64 
    sub                       i64 
    push           pc_lex.lex.c i64 
    add                       i64 
    pop            pc_lex.lex.hsum i64 
    jump           #5890      
#5894: 
    push           pc_lex.lex.c i64 
    push           32         i64 
    add                       i64 
    push           pc_lex.lxsptr u64 
    push           1          i64 
    subrefoff                 u64 1 0
    popptr                    u8 
    push           pc_lex.lex.hsum i64 
    push           4          i64 
    shl                       i64 
    push           pc_lex.lex.hsum i64 
    sub                       i64 
    push           pc_lex.lex.c i64 
    add                       i64 
    push           32         i64 
    add                       i64 
    pop            pc_lex.lex.hsum i64 
    jump           #5890      
#5892: 
    push           &pc_lex.lxsptr 
    decr                      u64 1
    jump           #5895      
    jump           #5890      
#5895: 
    push           pc_lex.lxsptr u64 
    push           pc_lex.lex.pstart u64 
    subref                    i64 1
    pop            pc_lex.lxlength i64 
    push           pc_lex.lex.hsum i64 
    push           5          i64 
    shl                       i64 
    push           pc_lex.lex.hsum i64 
    sub                       i64 
    pop            pc_lex.lxhashvalue i64 
    push           0          i64 
    pop            pc_lex.lxtruename u8 
    setargs                   2 0
    push           pc_lex.lxlength i64 
    push           pc_lex.lex.pstart u64 
    callfn         &pc_lex.lookuplex i64 
    jumpfalse      #5896      i64 
    push           pc_lex.lxsymptr u64 
    push           25         
    pushptroff                u8 1 0
    jumpfalse      #5897      i64 
    push           pc_lex.lxsymptr u64 
    push           25         
    pushptroff                u8 1 0
    pop            pc_lex.lxsymbol i64 
    push           pc_lex.lxsymptr u64 
    push           26         
    pushptroff                u8 1 0
    pop            pc_lex.lxsubcode i64 
    jump           #5898      
#5897: 
    push           pc_lex.lxsymptr u64 
    push           24         
    pushptroff                u8 1 0
    pop            pc_lex.lxsymbol i64 
#5898: 
    jump           #5899      
#5896: 
    push           19         i64 
    pop            pc_lex.lxsymbol i64 
#5899: 
    jump           #5900      
    jump           #5870      
#5887: 
    push           pc_lex.lxsptr u64 
    push           1          i64 
    subrefoff                 u64 1 0
    pop            pc_lex.lex.pstart u64 
    push           pc_lex.lex.pstart u64 
    pushptr                   u8 
    push           32         i64 
    add                       i64 
    push           pc_lex.lex.pstart u64 
    storeptr                  u8 
    pop            pc_lex.lex.c i64 
    jump           #5889      
    jump           #5870      
#5885: 
    setargs                   2 0
    push           1          i64 
    push           pc_lex.lex.c i64 
    callproc       &pc_lex.readnumber 
    jump           #5900      
    jump           #5870      
#5888: 
    push           pc_lex.lxsptr u64 
    pop            pc_lex.lex.pstart u64 
    push           0          i64 
    pop            pc_lex.lex.hsum i64 
#5901: 
    push           pc_lex.lxsptr u64 
    pushptr                   u8 
    store          pc_lex.lex.c i64 
    switch         #5902      36 122
    opnd           #5903      
#5902: 
    switchlabel    #5904      
    switchlabel    #5903      
    switchlabel    #5903      
    switchlabel    #5903      
    switchlabel    #5903      
    switchlabel    #5903      
    switchlabel    #5903      
    switchlabel    #5903      
    switchlabel    #5903      
    switchlabel    #5903      
    switchlabel    #5904      
    switchlabel    #5903      
    switchlabel    #5904      
    switchlabel    #5904      
    switchlabel    #5904      
    switchlabel    #5904      
    switchlabel    #5904      
    switchlabel    #5904      
    switchlabel    #5904      
    switchlabel    #5904      
    switchlabel    #5904      
    switchlabel    #5904      
    switchlabel    #5903      
    switchlabel    #5903      
    switchlabel    #5903      
    switchlabel    #5903      
    switchlabel    #5903      
    switchlabel    #5903      
    switchlabel    #5903      
    switchlabel    #5904      
    switchlabel    #5904      
    switchlabel    #5904      
    switchlabel    #5904      
    switchlabel    #5904      
    switchlabel    #5904      
    switchlabel    #5904      
    switchlabel    #5904      
    switchlabel    #5904      
    switchlabel    #5904      
    switchlabel    #5904      
    switchlabel    #5904      
    switchlabel    #5904      
    switchlabel    #5904      
    switchlabel    #5904      
    switchlabel    #5904      
    switchlabel    #5904      
    switchlabel    #5904      
    switchlabel    #5904      
    switchlabel    #5904      
    switchlabel    #5904      
    switchlabel    #5904      
    switchlabel    #5904      
    switchlabel    #5904      
    switchlabel    #5904      
    switchlabel    #5904      
    switchlabel    #5903      
    switchlabel    #5903      
    switchlabel    #5903      
    switchlabel    #5903      
    switchlabel    #5904      
    switchlabel    #5903      
    switchlabel    #5904      
    switchlabel    #5904      
    switchlabel    #5904      
    switchlabel    #5904      
    switchlabel    #5904      
    switchlabel    #5904      
    switchlabel    #5904      
    switchlabel    #5904      
    switchlabel    #5904      
    switchlabel    #5904      
    switchlabel    #5904      
    switchlabel    #5904      
    switchlabel    #5904      
    switchlabel    #5904      
    switchlabel    #5904      
    switchlabel    #5904      
    switchlabel    #5904      
    switchlabel    #5904      
    switchlabel    #5904      
    switchlabel    #5904      
    switchlabel    #5904      
    switchlabel    #5904      
    switchlabel    #5904      
    switchlabel    #5904      
    switchlabel    #5904      
    switchlabel    #5904      
    endswitch                 
#5904: 
    push           &pc_lex.lxsptr 
    incr                      u64 1
    push           pc_lex.lex.hsum i64 
    push           4          i64 
    shl                       i64 
    push           pc_lex.lex.hsum i64 
    sub                       i64 
    push           pc_lex.lex.c i64 
    add                       i64 
    pop            pc_lex.lex.hsum i64 
    jump           #5901      
#5903: 
    jump           #5905      
    jump           #5901      
#5905: 
    push           19         i64 
    pop            pc_lex.lxsymbol i64 
    push           1          i64 
    pop            pc_lex.lxtruename u8 
    push           pc_lex.lex.pstart u64 
    push           pc_lex.lxsptr u64 
    jumpne         #5906      u64 
    setargs                   1 0
    push           "NULL ` name" u64 
    callproc       &pc_lex.lxerror 
#5906: 
    push           pc_lex.lxsptr u64 
    push           pc_lex.lex.pstart u64 
    subref                    i64 1
    pop            pc_lex.lxlength i64 
    push           pc_lex.lex.hsum i64 
    push           5          i64 
    shl                       i64 
    push           pc_lex.lex.hsum i64 
    sub                       i64 
    pop            pc_lex.lxhashvalue i64 
    setargs                   2 0
    push           pc_lex.lxlength i64 
    push           pc_lex.lex.pstart u64 
    callfn         &pc_lex.lookuplex i64 
    jumpfalse      #5907      i64 
    push           pc_lex.lxsymptr u64 
    push           24         
    pushptroff                u8 1 0
    pop            pc_lex.lxsymbol i64 
    push           pc_lex.lxsymbol i64 
    push           0          i64 
    jumpne         #5908      i64 
    push           19         i64 
    push           pc_lex.lxsymptr u64 
    push           24         
    storeptroff               u8 1 0
    pop            pc_lex.lxsymbol i64 
#5908: 
#5907: 
    jump           #5900      
    jump           #5870      
#5877: 
    jump           #5909      
#5910: 
#5909: 
    push           &pc_lex.commentmap 
    push           &pc_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    pushptroff                u8 1 0
    jumptrue       #5910      u64 
#5911: 
    push           pc_lex.lxsptr u64 
    push           1          i64 
    subrefoff                 u64 1 0
    pushptr                   u8 
    push           0          i64 
    jumpne         #5912      i64 
    push           &pc_lex.lxsptr 
    decr                      u64 1
#5912: 
    push           &pc_lex.lxlineno 
    incr                      i64 1
    push           12         i64 
    pop            pc_lex.lxsymbol i64 
    jump           #5900      
    jump           #5870      
#5879: 
    push           0          i64 
    pop            pc_lex.lxvalue i64 
#5913: 
    push           &pc_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    store          pc_lex.lex.c i64 
    switch         #5914      48 57
    opnd           #5915      
#5914: 
    switchlabel    #5916      
    switchlabel    #5916      
    switchlabel    #5916      
    switchlabel    #5916      
    switchlabel    #5916      
    switchlabel    #5916      
    switchlabel    #5916      
    switchlabel    #5916      
    switchlabel    #5916      
    switchlabel    #5916      
    endswitch                 
#5916: 
    push           pc_lex.lxvalue i64 
    push           10         i64 
    mul                       i64 
    push           pc_lex.lex.c i64 
    add                       i64 
    push           48         i64 
    sub                       i64 
    pop            pc_lex.lxvalue i64 
    jump           #5913      
#5915: 
    push           &pc_lex.lxsptr 
    decr                      u64 1
    jump           #5917      
    jump           #5913      
#5917: 
    push           pc_lex.lxvalue i64 
    push           0          i64 
    jumpne         #5918      i64 
    setargs                   1 0
    push           "Bad label" u64 
    callproc       &pc_lex.lxerror 
#5918: 
    push           pc_libpcl.labelnooffset i64 
    push           0          i64 
    jumpne         #5919      i64 
    push           &pc_libpcl.maxuserlabel 
    push           pc_lex.lxvalue i64 
    maxto                     i64 
    jump           #5920      
#5919: 
    push           &pc_lex.lxvalue 
    push           pc_libpcl.labelnooffset i64 
    addto                     i64 
#5920: 
    push           14         i64 
    pop            pc_lex.lxsymbol i64 
    jump           #5900      
    jump           #5870      
#5883: 
    push           2          i64 
    pop            pc_lex.lxsymbol i64 
    jump           #5900      
    jump           #5870      
#5886: 
    push           pc_lex.lxsptr u64 
    pushptr                   u8 
    push           58         i64 
    jumpne         #5921      i64 
    push           4          i64 
    pop            pc_lex.lxsymbol i64 
    push           &pc_lex.lxsptr 
    incr                      u64 1
    jump           #5922      
#5921: 
    push           3          i64 
    pop            pc_lex.lxsymbol i64 
#5922: 
    jump           #5900      
    jump           #5870      
#5884: 
    push           &pc_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    pop            pc_lex.lex.c i64 
    push           pc_lex.lex.c i64 
    push           48         u64 
    push           57         u64 
    jumpinrange    #5923      i64 
    setargs                   1 0
    push           "Bad no"   u64 
    callproc       &pc_lex.lxerror 
#5923: 
    setargs                   2 0
    push           -1         i64 
    push           pc_lex.lex.c i64 
    callproc       &pc_lex.readnumber 
    jump           #5900      
    jump           #5870      
#5882: 
    push           9          i64 
    pop            pc_lex.lxsymbol i64 
    jump           #5900      
    jump           #5870      
#5881: 
    push           10         i64 
    pop            pc_lex.lxsymbol i64 
    jump           #5900      
    jump           #5870      
#5878: 
    setargs                   0 0
    callproc       &pc_lex.readstring 
    jump           #5900      
    jump           #5870      
#5874: 
    jump           #5870      
#5876: 
    jump           #5870      
#5875: 
    push           &pc_lex.lxlineno 
    incr                      i64 1
    push           12         i64 
    pop            pc_lex.lxsymbol i64 
    jump           #5900      
    jump           #5870      
#5873: 
    push           13         i64 
    pop            pc_lex.lxsymbol i64 
    push           &pc_lex.lxsptr 
    decr                      u64 1
    jump           #5900      
    jump           #5870      
#5872: 
    push           1          i64 
    pop            pc_lex.lxsymbol i64 
    push           pc_lex.lex.c i64 
    pop            pc_lex.lxvalue i64 
    jump           #5900      
    jump           #5870      
#5924: 
#5900: 
    retproc                   
End


Proc pc_lex.initlex:
    local          pc_lex.initlex.i i64 
    procentry                 
    push           pc_lex.initlex.done u8 
    jumpfalse      #5926      i64 
    jump           #5927      
#5926: 
    push           0          i64 
    pop            pc_lex.lxsubcode i64 
    push           1          i64 
    pop            pc_lex.lxsymbol i64 
    push           0          i64 
    pop            pc_lex.lxlineno i64 
#5928: 
    push           0          i64 
    pop            pc_lex.initlex.i i64 
#5929: 
    push           1          u64 
    push           &pc_lex.commentmap 
    push           pc_lex.initlex.i i64 
    popptroff                 u8 1 0
#5930: 
    forup          #5929      i64 1
    opnd           pc_lex.initlex.i 
    opnd           255        
#5931: 
    push           0          u64 
    push           &pc_lex.commentmap 
    push           0          i64 
    popptroff                 u8 1 0
    push           0          u64 
    push           &pc_lex.commentmap 
    push           10         i64 
    popptroff                 u8 1 0
    setargs                   0 0
    callproc       &pc_lex.inithashtable 
    push           1          i64 
    pop            pc_lex.initlex.done u8 
#5927: 
    retproc                   
End


Proc pc_lex.readreal:
    param          pc_lex.readreal.s u64 
    param          pc_lex.readreal.slen i64 
    local          pc_lex.readreal.c i64 
    procentry                 
    push           pc_lex.lxsptr u64 
    pushptr                   u8 
    pop            pc_lex.readreal.c i64 
    push           0          i64 
    push           pc_lex.lxsptr u64 
    popptr                    u8 
    setargs                   2 0
    push           0          u64 
    push           pc_lex.readreal.s u64 
    callfn         &strtod    r64 
    pop            pc_lex.lxxvalue r64 
    push           pc_lex.readreal.c i64 
    push           pc_lex.lxsptr u64 
    popptr                    u8 
    push           16         i64 
    pop            pc_lex.lxsymbol i64 
#5933: 
    retproc                   
End


Proc pc_lex.readnumber:
    param          pc_lex.readnumber.c i64 
    param          pc_lex.readnumber.signx i64 
    local          pc_lex.readnumber.str block:256 
    local          pc_lex.readnumber.i i64 
    local          pc_lex.readnumber.d i64 
    local          pc_lex.readnumber.intlen i64 
    local          pc_lex.readnumber.slen i64 
    local          pc_lex.readnumber.isfloat i64 
    local          pc_lex.readnumber.sepseen i64 
    local          pc_lex.readnumber.s u64 
    procentry                 
    push           pc_lex.lxsptr u64 
    pushptr                   u8 
    pop            pc_lex.readnumber.d i64 
    push           pc_lex.readnumber.d i64 
    push           120        i64 
    casejumpeq     #5935      i64 0
    push           88         i64 
    casejumpeq     #5935      i64 0
    popstack                  i64 
    jump           #5936      
#5935: 
    push           pc_lex.readnumber.c i64 
    push           48         i64 
    casejumpeq     #5937      i64 0
    popstack                  i64 
    jump           #5938      
#5937: 
    push           &pc_lex.lxsptr 
    incr                      u64 1
    setargs                   0 0
    callproc       &pc_lex.readhex 
    push           &pc_lex.lxvalue 
    push           pc_lex.readnumber.signx i64 
    multo                     i64 
    jump           #5939      
    jump           #5940      
#5938: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           pc_lex.readnumber.c i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Base not supported" u64 
    callproc       &pc_lex.lxerror 
#5940: 
    jump           #5941      
#5936: 
#5941: 
    push           pc_lex.readnumber.c u64 
    push           &pc_lex.readnumber.str 
    push           1          i64 
    popptroff                 u8 1 -1
    push           pc_lex.lxsptr u64 
    push           1          i64 
    subrefoff                 u64 1 0
    pop            pc_lex.readnumber.s u64 
    push           1          i64 
    pop            pc_lex.readnumber.slen i64 
    push           0          i64 
    store          pc_lex.readnumber.sepseen i64 
    pop            pc_lex.readnumber.isfloat i64 
#5942: 
    push           &pc_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    store          pc_lex.readnumber.c i64 
    switch         #5943      39 101
    opnd           #5944      
#5943: 
    switchlabel    #5945      
    switchlabel    #5944      
    switchlabel    #5944      
    switchlabel    #5944      
    switchlabel    #5946      
    switchlabel    #5944      
    switchlabel    #5946      
    switchlabel    #5947      
    switchlabel    #5944      
    switchlabel    #5948      
    switchlabel    #5948      
    switchlabel    #5948      
    switchlabel    #5948      
    switchlabel    #5948      
    switchlabel    #5948      
    switchlabel    #5948      
    switchlabel    #5948      
    switchlabel    #5948      
    switchlabel    #5948      
    switchlabel    #5944      
    switchlabel    #5944      
    switchlabel    #5944      
    switchlabel    #5944      
    switchlabel    #5944      
    switchlabel    #5944      
    switchlabel    #5944      
    switchlabel    #5944      
    switchlabel    #5944      
    switchlabel    #5944      
    switchlabel    #5944      
    switchlabel    #5949      
    switchlabel    #5944      
    switchlabel    #5944      
    switchlabel    #5944      
    switchlabel    #5944      
    switchlabel    #5944      
    switchlabel    #5944      
    switchlabel    #5944      
    switchlabel    #5944      
    switchlabel    #5944      
    switchlabel    #5944      
    switchlabel    #5944      
    switchlabel    #5944      
    switchlabel    #5944      
    switchlabel    #5944      
    switchlabel    #5944      
    switchlabel    #5944      
    switchlabel    #5944      
    switchlabel    #5944      
    switchlabel    #5944      
    switchlabel    #5944      
    switchlabel    #5944      
    switchlabel    #5944      
    switchlabel    #5944      
    switchlabel    #5944      
    switchlabel    #5944      
    switchlabel    #5945      
    switchlabel    #5944      
    switchlabel    #5944      
    switchlabel    #5944      
    switchlabel    #5944      
    switchlabel    #5944      
    switchlabel    #5949      
    endswitch                 
#5948: 
    push           pc_lex.readnumber.c u64 
    push           &pc_lex.readnumber.str 
    push           &pc_lex.readnumber.slen 
    incrload                  i64 1
    popptroff                 u8 1 -1
    jump           #5942      
#5945: 
    push           1          i64 
    pop            pc_lex.readnumber.sepseen i64 
    jump           #5942      
#5947: 
    push           pc_lex.readnumber.isfloat i64 
    jumpfalse      #5950      i64 
    setargs                   1 0
    push           "float?"   u64 
    callproc       &pc_lex.lxerror 
#5950: 
    push           1          i64 
    pop            pc_lex.readnumber.isfloat i64 
    push           pc_lex.readnumber.slen i64 
    pop            pc_lex.readnumber.intlen i64 
    jump           #5942      
#5949: 
    push           pc_lex.readnumber.isfloat i64 
    push           2          i64 
    jumpne         #5951      i64 
    setargs                   1 0
    push           "float?"   u64 
    callproc       &pc_lex.lxerror 
#5951: 
    push           2          i64 
    pop            pc_lex.readnumber.isfloat i64 
    jump           #5942      
#5946: 
    push           pc_lex.readnumber.isfloat i64 
    push           2          i64 
    jumpeq         #5952      i64 
    setargs                   1 0
    push           "float?"   u64 
    callproc       &pc_lex.lxerror 
#5952: 
    push           3          i64 
    pop            pc_lex.readnumber.isfloat i64 
    jump           #5942      
#5944: 
    push           &pc_lex.lxsptr 
    decr                      u64 1
    jump           #5953      
    jump           #5942      
#5953: 
    push           pc_lex.readnumber.isfloat i64 
    jumpfalse      #5954      i64 
    push           pc_lex.readnumber.sepseen i64 
    jumpfalse      #5955      i64 
    setargs                   1 0
    push           "seps in float?" u64 
    callproc       &pc_lex.lxerror 
#5955: 
    setargs                   2 0
    push           pc_lex.lxsptr u64 
    push           pc_lex.readnumber.s u64 
    subref                    i64 1
    push           pc_lex.readnumber.s u64 
    callproc       &pc_lex.readreal 
    push           &pc_lex.lxxvalue 
    push           pc_lex.readnumber.signx i64 
    float                     r64 i64 
    multo                     r64 
    jump           #5939      
#5954: 
    push           pc_lex.readnumber.slen i64 
    push           20         i64 
    jumpgt         #5956      i64 
    push           pc_lex.readnumber.slen i64 
    push           20         i64 
    jumpne         #5957      i64 
    setargs                   2 0
    push           "18446744073709551615" u64 
    push           &pc_lex.readnumber.str 
    callfn         &mlibp.cmpstring i64 
    push           0          i64 
    jumple         #5957      i64 
#5956: 
    push           pc_lex.readnumber.slen i64 
    push           39         i64 
    jumpgt         #5958      i64 
    push           pc_lex.readnumber.slen i64 
    push           39         i64 
    jumpne         #5959      i64 
    setargs                   3 0
    push           39         u64 
    push           "340282366920938463463374607431768211455" u64 
    push           pc_lex.readnumber.s u64 
    callfn         &strncmp   i32 
    push           0          i64 
    jumple         #5959      i64 
#5958: 
    setargs                   1 0
    push           "Overflows 128 bits" u64 
    callproc       &pc_lex.lxerror 
#5959: 
    setargs                   3 0
    push           10         i64 
    push           pc_lex.readnumber.slen i64 
    push           &pc_lex.readnumber.str 
    callproc       &pc_lex.stringtonumber128 
    jump           #5939      
#5957: 
    push           15         i64 
    pop            pc_lex.lxsymbol i64 
    push           0          i64 
    pop            pc_lex.lxvalue i64 
#5960: 
    push           1          i64 
    pop            pc_lex.readnumber.i i64 
    push           pc_lex.readnumber.slen i64 
    push           1          i64 
    jumplt         #5961      i64 
#5962: 
    push           pc_lex.lxvalue i64 
    push           10         i64 
    mul                       i64 
    push           &pc_lex.readnumber.str 
    push           pc_lex.readnumber.i i64 
    pushptroff                u8 1 -1
    add                       i64 
    push           48         i64 
    sub                       i64 
    pop            pc_lex.lxvalue i64 
#5963: 
    forup          #5962      i64 1
    opnd           pc_lex.readnumber.i 
    opnd           pc_lex.readnumber.slen 
#5961: 
    push           &pc_lex.lxvalue 
    push           pc_lex.readnumber.signx i64 
    multo                     i64 
#5939: 
    retproc                   
End


Proc pc_lex.readhex:
    local          pc_lex.readhex.ndigs i64 
    local          pc_lex.readhex.c i64 
    procentry                 
    push           0          i64 
    pop            pc_lex.readhex.ndigs i64 
    push           0          i64 
    pop            pc_lex.lxvalue i64 
#5965: 
    push           &pc_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    store          pc_lex.readhex.c i64 
    switch         #5966      39 102
    opnd           #5967      
#5966: 
    switchlabel    #5968      
    switchlabel    #5967      
    switchlabel    #5967      
    switchlabel    #5967      
    switchlabel    #5967      
    switchlabel    #5967      
    switchlabel    #5967      
    switchlabel    #5967      
    switchlabel    #5967      
    switchlabel    #5969      
    switchlabel    #5969      
    switchlabel    #5969      
    switchlabel    #5969      
    switchlabel    #5969      
    switchlabel    #5969      
    switchlabel    #5969      
    switchlabel    #5969      
    switchlabel    #5969      
    switchlabel    #5969      
    switchlabel    #5967      
    switchlabel    #5967      
    switchlabel    #5967      
    switchlabel    #5967      
    switchlabel    #5967      
    switchlabel    #5967      
    switchlabel    #5967      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5970      
    switchlabel    #5967      
    switchlabel    #5967      
    switchlabel    #5967      
    switchlabel    #5967      
    switchlabel    #5967      
    switchlabel    #5967      
    switchlabel    #5967      
    switchlabel    #5967      
    switchlabel    #5967      
    switchlabel    #5967      
    switchlabel    #5967      
    switchlabel    #5967      
    switchlabel    #5967      
    switchlabel    #5967      
    switchlabel    #5967      
    switchlabel    #5967      
    switchlabel    #5967      
    switchlabel    #5967      
    switchlabel    #5967      
    switchlabel    #5967      
    switchlabel    #5967      
    switchlabel    #5967      
    switchlabel    #5967      
    switchlabel    #5967      
    switchlabel    #5968      
    switchlabel    #5968      
    switchlabel    #5971      
    switchlabel    #5971      
    switchlabel    #5971      
    switchlabel    #5971      
    switchlabel    #5971      
    switchlabel    #5971      
    endswitch                 
#5969: 
    push           pc_lex.lxvalue i64 
    push           16         i64 
    mul                       i64 
    push           pc_lex.readhex.c i64 
    add                       i64 
    push           48         i64 
    sub                       i64 
    pop            pc_lex.lxvalue i64 
    push           &pc_lex.readhex.ndigs 
    incr                      i64 1
    jump           #5965      
#5970: 
    push           pc_lex.lxvalue i64 
    push           16         i64 
    mul                       i64 
    push           pc_lex.readhex.c i64 
    push           65         i64 
    sub                       i64 
    push           10         i64 
    add                       i64 
    add                       i64 
    pop            pc_lex.lxvalue i64 
    push           &pc_lex.readhex.ndigs 
    incr                      i64 1
    jump           #5965      
#5971: 
    push           pc_lex.lxvalue i64 
    push           16         i64 
    mul                       i64 
    push           pc_lex.readhex.c i64 
    push           97         i64 
    sub                       i64 
    push           10         i64 
    add                       i64 
    add                       i64 
    pop            pc_lex.lxvalue i64 
    push           &pc_lex.readhex.ndigs 
    incr                      i64 1
    jump           #5965      
#5968: 
    jump           #5965      
#5967: 
    push           &pc_lex.lxsptr 
    decr                      u64 1
    jump           #5972      
    jump           #5965      
#5972: 
    push           pc_lex.readhex.ndigs i64 
    push           0          i64 
    jumpne         #5973      i64 
    setargs                   1 0
    push           "No hex digits" u64 
    callproc       &pc_lex.lxerror 
    jump           #5974      
#5973: 
    push           pc_lex.readhex.ndigs i64 
    push           32         i64 
    jumple         #5975      i64 
    setargs                   1 0
    push           "Overflow in hex number" u64 
    callproc       &pc_lex.lxerror 
    jump           #5974      
#5975: 
    push           pc_lex.readhex.ndigs i64 
    push           16         i64 
    jumple         #5976      i64 
    setargs                   1 0
    push           "hex/128 bits not ready" u64 
    callproc       &pc_lex.lxerror 
    jump           #5977      
#5976: 
#5974: 
    push           15         i64 
    pop            pc_lex.lxsymbol i64 
#5977: 
    retproc                   
End


Proc pc_lex.ps:
    param          pc_lex.ps.caption u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           pc_lex.ps.caption u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_lex.lxsptr u64 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   1 0
    push           ":"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           0          u64 
    callproc       &pc_lex.printsymbol 
#5979: 
    retproc                   
End


Proc pc_lex.printsymbol:
    param          pc_lex.printsymbol.dev u64 
    local          pc_lex.printsymbol.str block:256 
    local          pc_lex.printsymbol.av_1 i64 
    procentry                 
    setargs                   2 0
    push           &pc_lex.symbolnames 
    push           pc_lex.lxsymbol i64 
    pushptroff                u64 8 -8
    push           &pc_lex.printsymbol.str 
    callproc       &strcpy    
    push           0          u64 
    push           &pc_lex.printsymbol.str 
    setargs                   1 0
    push           &pc_lex.printsymbol.str 
    callfn         &strlen    i64 
    popptroff                 u8 1 -3
    setargs                   1 0
    push           pc_lex.printsymbol.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           &pc_lex.printsymbol.str 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#5981: 
    push           14         i64 
    setargs                   1 0
    push           &pc_lex.printsymbol.str 
    callfn         &strlen    i64 
    sub                       i64 
    pop            pc_lex.printsymbol.av_1 i64 
    push           pc_lex.printsymbol.av_1 i64 
    push           0          i64 
    jumple         #5982      i64 
#5983: 
    setargs                   1 0
    push           pc_lex.printsymbol.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           " "        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#5984: 
    to             #5983      
    opnd           pc_lex.printsymbol.av_1 
#5982: 
    push           pc_lex.lxsymbol i64 
    push           19         i64 
    casejumpeq     #5985      i64 0
    push           15         i64 
    casejumpeq     #5986      i64 0
    push           16         i64 
    casejumpeq     #5987      i64 0
    push           17         i64 
    casejumpeq     #5988      i64 0
    push           1          i64 
    casejumpeq     #5989      i64 0
    push           20         i64 
    casejumpeq     #5990      i64 0
    push           21         i64 
    casejumpeq     #5991      i64 0
    popstack                  i64 
    jump           #5992      
#5985: 
    setargs                   1 0
    push           pc_lex.printsymbol.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           pc_lex.lxsymptr u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #5993      
#5986: 
    setargs                   1 0
    push           pc_lex.printsymbol.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           pc_lex.lxvalue i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #5993      
#5987: 
    setargs                   1 0
    push           pc_lex.printsymbol.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   2 0
    push           0          i64 
    push           pc_lex.lxxvalue r64 
    callproc       &msysp.m$print_r64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #5993      
#5988: 
    setargs                   1 0
    push           pc_lex.printsymbol.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "\""       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           pc_lex.lxsvalue u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           "\""       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #5993      
#5989: 
    setargs                   1 0
    push           pc_lex.printsymbol.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           pc_lex.lxvalue i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #5993      
#5990: 
    setargs                   1 0
    push           pc_lex.printsymbol.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           &pc_tables.pclnames 
    push           pc_lex.lxsubcode i64 
    pushptroff                u64 8 0
    push           1          i64 
    addrefoff                 u64 1 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #5993      
#5991: 
    setargs                   1 0
    push           pc_lex.printsymbol.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           &pc_tables.pstdnames 
    push           pc_lex.lxsubcode i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #5993      
#5992: 
    setargs                   1 0
    push           pc_lex.printsymbol.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           &pc_lex.symbolnames 
    push           pc_lex.lxsymbol i64 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           pc_lex.lxsubcode i64 
    jumpfalse      #5994      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           " "        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           pc_lex.lxsubcode i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#5994: 
#5993: 
    setargs                   1 0
    push           pc_lex.printsymbol.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   0 0
    callproc       &msysp.m$print_space 
    setargs                   1 0
    push           pc_lex.lxlineno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#5995: 
    retproc                   
End


Proc pc_lex.inithashtable:
    local          pc_lex.inithashtable.av_1 i64 
    local          pc_lex.inithashtable.av_2 i64 
    local          pc_lex.inithashtable.i i64 
    procentry                 
#5997: 
    push           0          i64 
    pop            pc_lex.inithashtable.i i64 
    push           218        i64 
    pop            pc_lex.inithashtable.av_1 i64 
    push           pc_lex.inithashtable.av_1 i64 
    push           0          i64 
    jumplt         #5998      i64 
#5999: 
    setargs                   3 0
    push           pc_lex.inithashtable.i i64 
    push           20         i64 
    push           &pc_tables.pclnames 
    push           pc_lex.inithashtable.i i64 
    pushptroff                u64 8 0
    push           1          i64 
    addrefoff                 u64 1 0
    callproc       &pc_lex.addreservedword 
#6000: 
    forup          #5999      i64 1
    opnd           pc_lex.inithashtable.i 
    opnd           pc_lex.inithashtable.av_1 
#5998: 
#6001: 
    push           0          i64 
    pop            pc_lex.inithashtable.i i64 
    push           14         i64 
    pop            pc_lex.inithashtable.av_2 i64 
    push           pc_lex.inithashtable.av_2 i64 
    push           0          i64 
    jumplt         #6002      i64 
#6003: 
    setargs                   3 0
    push           pc_lex.inithashtable.i i64 
    push           21         i64 
    push           &pc_tables.pstdnames 
    push           pc_lex.inithashtable.i i64 
    pushptroff                u64 8 0
    callproc       &pc_lex.addreservedword 
#6004: 
    forup          #6003      i64 1
    opnd           pc_lex.inithashtable.i 
    opnd           pc_lex.inithashtable.av_2 
#6002: 
    setargs                   3 0
    push           8          i64 
    push           20         i64 
    push           "proc"     u64 
    callproc       &pc_lex.addreservedword 
    setargs                   3 0
    push           8          i64 
    push           20         i64 
    push           "function" u64 
    callproc       &pc_lex.addreservedword 
    setargs                   3 0
    push           10         i64 
    push           20         i64 
    push           "end"      u64 
    callproc       &pc_lex.addreservedword 
    setargs                   3 0
    push           15         i64 
    push           20         i64 
    push           "endext"   u64 
    callproc       &pc_lex.addreservedword 
#6005: 
    retproc                   
End


Proc pc_lex.addreservedword:
    param          pc_lex.addreservedword.name u64 
    param          pc_lex.addreservedword.symbol i64 
    param          pc_lex.addreservedword.subcode i64 
    procentry                 
    setargs                   1 0
    push           pc_lex.addreservedword.name u64 
    callfn         &pc_lex.gethashvalue i64 
    pop            pc_lex.lxhashvalue i64 
    setargs                   2 0
    push           0          i64 
    push           pc_lex.addreservedword.name u64 
    callfn         &pc_lex.lookuplex i64 
    jumpfalse      #6007      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "NAME="    u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_lex.addreservedword.name u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "DUPL NAME" u64 
    callproc       &pc_lex.lxerror 
#6007: 
    push           0          i64 
    push           pc_lex.lxsymptr u64 
    push           24         
    popptroff                 u8 1 0
    push           pc_lex.addreservedword.symbol i64 
    push           pc_lex.lxsymptr u64 
    push           25         
    popptroff                 u8 1 0
    push           pc_lex.addreservedword.subcode i64 
    push           pc_lex.lxsymptr u64 
    push           26         
    popptroff                 u8 1 0
#6008: 
    retproc                   
End


Proc pc_lex.printhashtable:
    param          pc_lex.printhashtable.devx u64 
    param          pc_lex.printhashtable.caption u64 
    local          pc_lex.printhashtable.r u64 
    local          pc_lex.printhashtable.count i64 
    local          pc_lex.printhashtable.i i64 
    local          pc_lex.printhashtable.av_1 i64 
    procentry                 
    setargs                   1 0
    push           pc_lex.printhashtable.devx u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           pc_lex.printhashtable.caption u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           ":"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           0          i64 
    pop            pc_lex.printhashtable.count i64 
#6010: 
    push           0          i64 
    pop            pc_lex.printhashtable.i i64 
    push           262143     i64 
    pop            pc_lex.printhashtable.av_1 i64 
    push           pc_lex.printhashtable.av_1 i64 
    push           0          i64 
    jumplt         #6011      i64 
#6012: 
    push           &pc_lex.lexhashtable 
    push           pc_lex.printhashtable.i i64 
    pushptroff                u64 8 0
    pop            pc_lex.printhashtable.r u64 
    push           pc_lex.printhashtable.r u64 
    jumpfalse      #6013      u64 
    push           pc_lex.printhashtable.r u64 
    pushptr                   u64 
    jumpfalse      #6013      u64 
    push           &pc_lex.printhashtable.count 
    push           1          i64 
    addto                     i64 
#6013: 
#6014: 
    forup          #6012      i64 1
    opnd           pc_lex.printhashtable.i 
    opnd           pc_lex.printhashtable.av_1 
#6011: 
    setargs                   1 0
    push           pc_lex.printhashtable.devx u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           pc_lex.printhashtable.count i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           " items in table" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           262144     i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#6015: 
    retproc                   
End


Proc pc_lex.lookuplex: i64
    param          pc_lex.lookuplex.name u64 
    param          pc_lex.lookuplex.length i64 
    local          pc_lex.lookuplex.e u64 
    local          pc_lex.lookuplex.j i64 
    local          pc_lex.lookuplex.wrapped i64 
    local          pc_lex.lookuplex.insource i64 
    local          pc_lex.lookuplex.firstj i64 
    procentry                 
    push           pc_lex.lookuplex.length i64 
    pop            pc_lex.lookuplex.insource i64 
    push           pc_lex.lookuplex.length i64 
    push           0          i64 
    jumpne         #6017      i64 
    setargs                   1 0
    push           pc_lex.lookuplex.name u64 
    callfn         &strlen    i64 
    pop            pc_lex.lookuplex.length i64 
#6017: 
    push           pc_lex.lxhashvalue i64 
    push           262143     i64 
    iand                      i64 
    store          pc_lex.lookuplex.j i64 
    pop            pc_lex.lookuplex.firstj i64 
    push           0          i64 
    pop            pc_lex.lookuplex.wrapped i64 
#6018: 
    push           &pc_lex.lexhashtable 
    push           pc_lex.lookuplex.j i64 
    pushptroff                u64 8 0
    pop            pc_lex.lxsymptr u64 
    push           pc_lex.lxsymptr u64 
    push           0          u64 
    jumpne         #6019      u64 
    jump           #6020      
#6019: 
    push           pc_lex.lxsymptr u64 
    push           31         
    pushptroff                u8 1 0
    push           pc_lex.lookuplex.length i64 
    jumpne         #6021      i64 
    setargs                   3 0
    push           pc_lex.lookuplex.length u64 
    push           pc_lex.lookuplex.name u64 
    push           pc_lex.lxsymptr u64 
    pushptr                   u64 
    callfn         &memcmp    i32 
    push           0          i64 
    jumpne         #6021      i64 
    push           1          i64 
    setret                    i64 
    jump           #6022      
#6021: 
    push           &pc_lex.lookuplex.j 
    incrload                  i64 1
    push           262144     i64 
    jumplt         #6023      i64 
    push           pc_lex.lookuplex.wrapped i64 
    jumpfalse      #6024      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "???????HASHTABLE FULL" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           262144     i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           pc_lex.lxlineno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#6024: 
    push           1          i64 
    pop            pc_lex.lookuplex.wrapped i64 
    push           1          i64 
    pop            pc_lex.lookuplex.j i64 
#6023: 
    jump           #6018      
#6020: 
    push           pc_lex.lookuplex.insource i64 
    jumpfalse      #6025      i64 
    setargs                   2 0
    push           pc_lex.lookuplex.length i64 
    push           pc_lex.lookuplex.name u64 
    callfn         &mlibp.pcm_copyheapstringn u64 
    pop            pc_lex.lookuplex.name u64 
#6025: 
    push           &pc_lex.nsymbols 
    incrload                  i64 1
    push           229376     i64 
    jumple         #6026      i64 
    setargs                   1 0
    push           "Hashtable getting full" u64 
    callproc       &pc_lex.lxerror 
#6026: 
    push           pc_lex.lxsymptr u64 
    push           0          u64 
    jumpne         #6027      u64 
    setargs                   1 0
    push           64         i64 
    callfn         &mlibp.pcm_allocz u64 
    pop            pc_lex.lxsymptr u64 
    push           pc_lex.lxsymptr u64 
    push           &pc_lex.lexhashtable 
    push           pc_lex.lookuplex.j i64 
    popptroff                 u64 8 0
#6027: 
    push           pc_lex.lookuplex.name u64 
    push           pc_lex.lxsymptr u64 
    push           0          
    popptroff                 u64 1 0
    push           pc_lex.lookuplex.length i64 
    push           pc_lex.lxsymptr u64 
    push           31         
    popptroff                 u8 1 0
    push           19         i64 
    push           pc_lex.lxsymptr u64 
    push           24         
    popptroff                 u8 1 0
    push           0          i64 
    push           pc_lex.lxsymptr u64 
    push           25         
    popptroff                 u8 1 0
    push           0          i64 
    setret                    i64 
    jump           #6022      
#6022: 
    retfn                     i64 
End


Proc pc_lex.startlex:
    param          pc_lex.startlex.source u64 
    procentry                 
    setargs                   0 0
    callproc       &pc_lex.initlex 
    push           pc_lex.startlex.source u64 
    store          pc_lex.lxsptr u64 
    pop            pc_lex.lxstart u64 
    push           1          i64 
    pop            pc_lex.lxlineno i64 
    push           1          i64 
    pop            pc_lex.lxsymbol i64 
#6029: 
    retproc                   
End


Proc pc_lex.addnamestr: u64
    param          pc_lex.addnamestr.name u64 
    procentry                 
    setargs                   1 0
    push           pc_lex.addnamestr.name u64 
    callfn         &pc_lex.gethashvalue i64 
    pop            pc_lex.lxhashvalue i64 
    setargs                   2 0
    push           0          i64 
    setargs                   1 0
    push           pc_lex.addnamestr.name u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    callproc       &pc_lex.lookuplex 
    push           pc_lex.lxsymptr u64 
    setret                    u64 
    jump           #6031      
#6031: 
    retfn                     u64 
End


Proc pc_lex.lxerror:
    param          pc_lex.lxerror.m u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "\c\n\c\n Lexical Error\n*** # *** on line #" u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           pc_lex.lxerror.m u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_lex.lxlineno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#6033: 
    retproc                   
End


Proc pc_lex.gethashvalue: i64
    param          pc_lex.gethashvalue.s u64 
    local          pc_lex.gethashvalue.c i64 
    local          pc_lex.gethashvalue.hsum i64 
    procentry                 
    push           pc_lex.gethashvalue.s u64 
    pushptr                   u8 
    push           0          i64 
    jumpne         #6035      i64 
    push           0          i64 
    setret                    i64 
    jump           #6036      
#6035: 
    push           &pc_lex.gethashvalue.s 
    loadincr                  u64 1
    pushptr                   u8 
    pop            pc_lex.gethashvalue.hsum i64 
#6037: 
    push           &pc_lex.gethashvalue.s 
    loadincr                  u64 1
    pushptr                   u8 
    pop            pc_lex.gethashvalue.c i64 
    push           pc_lex.gethashvalue.c i64 
    push           0          i64 
    jumpne         #6038      i64 
    jump           #6039      
#6038: 
    push           pc_lex.gethashvalue.hsum i64 
    push           4          i64 
    shl                       i64 
    push           pc_lex.gethashvalue.hsum i64 
    sub                       i64 
    push           pc_lex.gethashvalue.c i64 
    add                       i64 
    pop            pc_lex.gethashvalue.hsum i64 
    jump           #6037      
#6039: 
    push           pc_lex.gethashvalue.hsum i64 
    push           5          i64 
    shl                       i64 
    push           pc_lex.gethashvalue.hsum i64 
    sub                       i64 
    setret                    i64 
    jump           #6036      
#6036: 
    retfn                     i64 
End


Proc pc_lex.readstring:
    local          pc_lex.readstring.dest u64 
    local          pc_lex.readstring.c i64 
    local          pc_lex.readstring.d i64 
    local          pc_lex.readstring.str block:8 
    local          pc_lex.readstring.av_1 i64 
    procentry                 
    push           17         i64 
    pop            pc_lex.lxsymbol i64 
    push           pc_lex.lxsptr u64 
    pop            pc_lex.lxsvalue u64 
    push           pc_lex.lxsptr u64 
    pop            pc_lex.readstring.dest u64 
#6041: 
    push           &pc_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    store          pc_lex.readstring.c i64 
    switch         #6042      0 92
    opnd           #6043      
#6042: 
    switchlabel    #6044      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6044      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6044      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6045      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6043      
    switchlabel    #6046      
    endswitch                 
#6046: 
    push           pc_lex.lxsptr u64 
    pushptr                   u8 
    pop            pc_lex.readstring.c i64 
    push           pc_lex.readstring.c i64 
    push           65         i64 
    jumplt         #6047      i64 
    push           pc_lex.readstring.c i64 
    push           90         i64 
    jumpgt         #6047      i64 
    push           &pc_lex.readstring.c 
    push           32         i64 
    addto                     i64 
#6047: 
    push           &pc_lex.lxsptr 
    incr                      u64 1
    push           pc_lex.readstring.c i64 
    switch         #6048      34 122
    opnd           #6049      
#6048: 
    switchlabel    #6050      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6051      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6052      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6050      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6053      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6054      
    switchlabel    #6055      
    switchlabel    #6056      
    switchlabel    #6049      
    switchlabel    #6057      
    switchlabel    #6058      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6059      
    switchlabel    #6049      
    switchlabel    #6059      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6049      
    switchlabel    #6056      
    switchlabel    #6060      
    switchlabel    #6061      
    switchlabel    #6049      
    switchlabel    #6062      
    switchlabel    #6063      
    switchlabel    #6064      
    switchlabel    #6065      
    switchlabel    #6052      
    endswitch                 
#6054: 
    push           7          i64 
    pop            pc_lex.readstring.c i64 
    jump           #6066      
#6055: 
    push           8          i64 
    pop            pc_lex.readstring.c i64 
    jump           #6066      
#6056: 
    push           13         i64 
    pop            pc_lex.readstring.c i64 
    jump           #6066      
#6057: 
    push           26         i64 
    pop            pc_lex.readstring.c i64 
    jump           #6066      
#6058: 
    push           12         i64 
    pop            pc_lex.readstring.c i64 
    jump           #6066      
#6059: 
    push           10         i64 
    pop            pc_lex.readstring.c i64 
    jump           #6066      
#6060: 
    push           27         i64 
    pop            pc_lex.readstring.c i64 
    jump           #6066      
#6061: 
    push           9          i64 
    pop            pc_lex.readstring.c i64 
    jump           #6066      
#6062: 
    push           11         i64 
    pop            pc_lex.readstring.c i64 
    jump           #6066      
#6063: 
    push           13         u64 
    push           &pc_lex.readstring.dest 
    loadincr                  u64 1
    popptr                    u8 
    push           10         i64 
    pop            pc_lex.readstring.c i64 
    jump           #6066      
#6064: 
    push           0          i64 
    pop            pc_lex.readstring.c i64 
#6067: 
    push           2          i64 
    pop            pc_lex.readstring.av_1 i64 
#6068: 
    push           &pc_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    store          pc_lex.readstring.d i64 
    push           65         i64 
    casejumpeq     #6069      i64 0
    push           66         i64 
    casejumpeq     #6069      i64 0
    push           67         i64 
    casejumpeq     #6069      i64 0
    push           68         i64 
    casejumpeq     #6069      i64 0
    push           69         i64 
    casejumpeq     #6069      i64 0
    push           70         i64 
    casejumpeq     #6069      i64 0
    push           97         i64 
    casejumpeq     #6070      i64 0
    push           98         i64 
    casejumpeq     #6070      i64 0
    push           99         i64 
    casejumpeq     #6070      i64 0
    push           100        i64 
    casejumpeq     #6070      i64 0
    push           101        i64 
    casejumpeq     #6070      i64 0
    push           102        i64 
    casejumpeq     #6070      i64 0
    push           48         i64 
    casejumpeq     #6071      i64 0
    push           49         i64 
    casejumpeq     #6071      i64 0
    push           50         i64 
    casejumpeq     #6071      i64 0
    push           51         i64 
    casejumpeq     #6071      i64 0
    push           52         i64 
    casejumpeq     #6071      i64 0
    push           53         i64 
    casejumpeq     #6071      i64 0
    push           54         i64 
    casejumpeq     #6071      i64 0
    push           55         i64 
    casejumpeq     #6071      i64 0
    push           56         i64 
    casejumpeq     #6071      i64 0
    push           57         i64 
    casejumpeq     #6071      i64 0
    popstack                  i64 
    jump           #6072      
#6069: 
    push           pc_lex.readstring.c i64 
    push           16         i64 
    mul                       i64 
    push           pc_lex.readstring.d i64 
    add                       i64 
    push           65         i64 
    sub                       i64 
    push           10         i64 
    add                       i64 
    pop            pc_lex.readstring.c i64 
    jump           #6073      
#6070: 
    push           pc_lex.readstring.c i64 
    push           16         i64 
    mul                       i64 
    push           pc_lex.readstring.d i64 
    add                       i64 
    push           97         i64 
    sub                       i64 
    push           10         i64 
    add                       i64 
    pop            pc_lex.readstring.c i64 
    jump           #6073      
#6071: 
    push           pc_lex.readstring.c i64 
    push           16         i64 
    mul                       i64 
    push           pc_lex.readstring.d i64 
    add                       i64 
    push           48         i64 
    sub                       i64 
    pop            pc_lex.readstring.c i64 
    jump           #6073      
#6072: 
    setargs                   1 0
    push           "Bad \\x code" u64 
    callproc       &pc_lex.lxerror 
#6073: 
#6074: 
    to             #6068      
    opnd           pc_lex.readstring.av_1 
#6075: 
    jump           #6066      
#6065: 
    push           16         i64 
    pop            pc_lex.readstring.c i64 
    jump           #6066      
#6052: 
    push           0          i64 
    pop            pc_lex.readstring.c i64 
    jump           #6066      
#6050: 
    push           34         i64 
    pop            pc_lex.readstring.c i64 
    jump           #6066      
#6053: 
    push           92         i64 
    pop            pc_lex.readstring.c i64 
    jump           #6066      
#6051: 
    push           39         i64 
    pop            pc_lex.readstring.c i64 
    jump           #6066      
#6049: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "<"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   2 0
    push           0          i64 
    push           pc_lex.readstring.c i64 
    truncate                  u64 u8 
    callproc       &msysp.m$print_c8 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           ">"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Unknown string escape" u64 
    callproc       &pc_lex.lxerror 
#6066: 
    jump           #6076      
#6045: 
    push           pc_lex.lxsptr u64 
    pushptr                   u8 
    push           pc_lex.readstring.c i64 
    jumpne         #6077      i64 
    push           &pc_lex.lxsptr 
    incr                      u64 1
    jump           #6078      
#6077: 
    jump           #6079      
#6078: 
    jump           #6076      
#6044: 
    setargs                   1 0
    push           "String not terminated" u64 
    callproc       &pc_lex.lxerror 
    jump           #6076      
#6043: 
#6076: 
    push           pc_lex.readstring.c u64 
    push           &pc_lex.readstring.dest 
    loadincr                  u64 1
    popptr                    u8 
    jump           #6041      
#6079: 
    push           pc_lex.readstring.dest u64 
    push           pc_lex.lxsvalue u64 
    subref                    i64 1
    pop            pc_lex.lxlength i64 
    push           0          u64 
    push           pc_lex.lxsvalue u64 
    push           pc_lex.lxlength i64 
    popptroff                 u8 1 0
#6080: 
    retproc                   
End


Proc pc_lex.stringtonumber128:
    param          pc_lex.stringtonumber128.s u64 
    param          pc_lex.stringtonumber128.length i64 
    param          pc_lex.stringtonumber128.base i64 
    local          pc_lex.stringtonumber128.aa u128 
    local          pc_lex.stringtonumber128.c i64 
    local          pc_lex.stringtonumber128.d i64 
    local          pc_lex.stringtonumber128.av_1 i64 
    procentry                 
    push           0          i64 
    widenw                    u128 i64 
    pop            pc_lex.stringtonumber128.aa u128 
#6082: 
    push           pc_lex.stringtonumber128.length i64 
    pop            pc_lex.stringtonumber128.av_1 i64 
    push           pc_lex.stringtonumber128.av_1 i64 
    push           0          i64 
    jumple         #6083      i64 
#6084: 
    push           pc_lex.stringtonumber128.aa u128 
    push           pc_lex.stringtonumber128.base i64 
    widenw                    u128 i64 
    mul                       u128 
    pop            pc_lex.stringtonumber128.aa u128 
    push           &pc_lex.stringtonumber128.s 
    loadincr                  u64 1
    pushptr                   u8 
    pop            pc_lex.stringtonumber128.c i64 
    push           pc_lex.stringtonumber128.c i64 
    push           97         i64 
    jumplt         #6085      i64 
    push           pc_lex.stringtonumber128.c i64 
    push           97         i64 
    sub                       i64 
    push           10         i64 
    add                       i64 
    pop            pc_lex.stringtonumber128.d i64 
    jump           #6086      
#6085: 
    push           pc_lex.stringtonumber128.c i64 
    push           65         i64 
    jumplt         #6087      i64 
    push           pc_lex.stringtonumber128.c i64 
    push           65         i64 
    sub                       i64 
    push           10         i64 
    add                       i64 
    pop            pc_lex.stringtonumber128.d i64 
    jump           #6086      
#6087: 
    push           pc_lex.stringtonumber128.c i64 
    push           48         i64 
    sub                       i64 
    pop            pc_lex.stringtonumber128.d i64 
#6086: 
    push           pc_lex.stringtonumber128.aa u128 
    push           pc_lex.stringtonumber128.d i64 
    widenw                    u128 i64 
    add                       u128 
    pop            pc_lex.stringtonumber128.aa u128 
#6088: 
    to             #6084      
    opnd           pc_lex.stringtonumber128.av_1 
#6083: 
    push           pc_lex.stringtonumber128.aa u128 
    pop            pc_lex.lxuvalue128 u128 
    push           18         i64 
    pop            pc_lex.lxsymbol i64 
#6089: 
    retproc                   
End


Proc pc_parse.parse: i64
    param          pc_parse.parse.source u64 
    local          pc_parse.parse.d u64 
    local          pc_parse.parse.labno i64 
    procentry                 
    setargs                   1 0
    push           pc_parse.parse.source u64 
    callproc       &pc_lex.startlex 
    push           1          i64 
    pop            pc_lex.lxsymbol i64 
#6091: 
    setargs                   0 0
    callproc       &pc_lex.lex 
    push           pc_lex.lxsymbol i64 
    push           20         i64 
    casejumpeq     #6092      i64 0
    push           21         i64 
    casejumpeq     #6092      i64 0
    push           14         i64 
    casejumpeq     #6093      i64 0
    push           19         i64 
    casejumpeq     #6094      i64 0
    push           15         i64 
    casejumpeq     #6095      i64 0
    push           12         i64 
    casejumpeq     #6096      i64 0
    push           13         i64 
    casejumpeq     #6097      i64 0
    popstack                  i64 
    jump           #6098      
#6092: 
    push           pc_lex.lxsubcode i64 
    push           11         i64 
    jumpne         #6099      i64 
    jump           #6100      
#6099: 
    setargs                   0 0
    callproc       &pc_parse.readinstr 
    jump           #6101      
#6093: 
    setargs                   0 0
    callproc       &pc_parse.dolabel 
    jump           #6101      
#6094: 
    setargs                   1 0
    push           "\"NAME:\" NOT SUPPORTED" u64 
    callproc       &pc_parse.serror 
    jump           #6101      
#6095: 
    jump           #6091      
    jump           #6101      
#6096: 
    jump           #6091      
    jump           #6101      
#6097: 
    jump           #6100      
    jump           #6101      
#6098: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "SYMBOLNAMES[LXSYMBOL]=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pc_lex.symbolnames 
    push           pc_lex.lxsymbol i64 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Bad input" u64 
    callproc       &pc_parse.serror 
#6101: 
    setargs                   1 0
    push           12         i64 
    callproc       &pc_parse.checksymbol 
    jump           #6091      
#6100: 
    push           pc_parse.insideproc i64 
    jumpfalse      #6102      i64 
    setargs                   1 0
    push           "End missing" u64 
    callproc       &pc_parse.serror 
#6102: 
    push           1          i64 
    setret                    i64 
    jump           #6103      
#6103: 
    retfn                     i64 
End


Proc pc_parse.checksymbol:
    param          pc_parse.checksymbol.symbol i64 
    procentry                 
    push           pc_lex.lxsymbol i64 
    push           pc_parse.checksymbol.symbol i64 
    jumpeq         #6105      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pc_lex.symbolnames 
    push           pc_parse.checksymbol.symbol i64 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "expected, not" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pc_lex.symbolnames 
    push           pc_lex.lxsymbol i64 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           ", on line:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_lex.lxlineno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#6105: 
#6106: 
    retproc                   
End


Proc pc_parse.dolabel:
    procentry                 
    push           pc_lex.lxvalue i64 
    push           1          i64 
    push           100000     i64 
    jumpinrange    #6108      i64 
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_lex.lxvalue i64 
    callfn         &msysp.strint u64 
    push           "1:Label out of range:" u64 
    callproc       &pc_parse.serror_s 
#6108: 
    setargs                   2 0
    push           pc_lex.lxlineno i64 
    push           pc_lex.lxvalue i64 
    callproc       &pc_libpcl.pdefinelabel 
    setargs                   0 0
    callproc       &pc_lex.lex 
    setargs                   1 0
    push           3          i64 
    callproc       &pc_parse.checksymbol 
    setargs                   0 0
    callproc       &pc_lex.lex 
#6109: 
    retproc                   
End


Proc pc_parse.readmode:
    param          pc_parse.readmode.p u64 
    procentry                 
    push           pc_parse.readmode.p u64 
    push           3          
    pushptroff                u8 1 0
    push           0          i64 
    jumpeq         #6111      i64 
    push           pc_lex.lxsubcode i64 
    push           pc_parse.readmode.p u64 
    push           16         
    popptroff                 i32 1 0
    setargs                   0 0
    callproc       &pc_lex.lex 
    jump           #6112      
#6111: 
    push           pc_lex.lxsubcode i64 
    push           pc_parse.readmode.p u64 
    push           3          
    popptroff                 u8 1 0
    push           &pc_tables.psize 
    push           pc_lex.lxsubcode i64 
    pushptroff                u8 1 0
    push           pc_parse.readmode.p u64 
    push           4          
    popptroff                 i32 1 0
    setargs                   0 0
    callproc       &pc_lex.lex 
    push           pc_parse.readmode.p u64 
    push           3          
    pushptroff                u8 1 0
    push           13         i64 
    jumpne         #6113      i64 
    setargs                   1 0
    push           3          i64 
    callproc       &pc_parse.checksymbol 
    setargs                   0 0
    callproc       &pc_lex.lex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_parse.checksymbol 
    push           pc_lex.lxvalue i64 
    push           pc_parse.readmode.p u64 
    push           4          
    popptroff                 i32 1 0
    setargs                   0 0
    callproc       &pc_lex.lex 
#6113: 
#6112: 
    retproc                   
End


Proc pc_parse.readinstr:
    local          pc_parse.readinstr.opcode i64 
    local          pc_parse.readinstr.mode i64 
    local          pc_parse.readinstr.size i64 
    local          pc_parse.readinstr.p u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_parse.readinstr.p u64 
    push           pc_lex.lxlineno i64 
    push           pc_parse.readinstr.p u64 
    push           24         
    popptroff                 u32 1 0
    push           0          i64 
    pop            pc_parse.readinstr.mode i64 
    push           0          i64 
    pop            pc_parse.readinstr.size i64 
    push           pc_lex.lxsymbol i64 
    push           21         i64 
    jumpne         #6115      i64 
    setargs                   1 0
    push           pc_parse.readinstr.p u64 
    callproc       &pc_parse.readmode 
    setargs                   1 0
    push           20         i64 
    callproc       &pc_parse.checksymbol 
#6115: 
    push           pc_lex.lxsubcode i64 
    store          pc_parse.readinstr.opcode i64 
    push           pc_parse.readinstr.p u64 
    push           1          
    popptroff                 u8 1 0
    setargs                   0 0
    callproc       &pc_lex.lex 
    push           pc_lex.lxsymbol i64 
    push           21         i64 
    jumpne         #6116      i64 
    setargs                   1 0
    push           pc_parse.readinstr.p u64 
    callproc       &pc_parse.readmode 
#6116: 
    push           &pc_tables.pclhasopnd 
    push           pc_parse.readinstr.opcode i64 
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6117      i64 0
    push           2          i64 
    casejumpeq     #6118      i64 0
    push           3          i64 
    casejumpeq     #6119      i64 0
    push           4          i64 
    casejumpeq     #6120      i64 0
    popstack                  i64 
    jump           #6121      
#6117: 
    push           pc_lex.lxsymbol i64 
    push           15         i64 
    casejumpeq     #6122      i64 0
    push           16         i64 
    casejumpeq     #6123      i64 0
    push           17         i64 
    casejumpeq     #6124      i64 0
    push           14         i64 
    casejumpeq     #6125      i64 0
    push           19         i64 
    casejumpeq     #6126      i64 0
    push           18         i64 
    casejumpeq     #6127      i64 0
    push           10         i64 
    casejumpeq     #6128      i64 0
    popstack                  i64 
    jump           #6129      
#6122: 
    push           pc_lex.lxvalue i64 
    push           pc_parse.readinstr.p u64 
    push           8          
    popptroff                 i64 1 0
    push           4          i64 
    push           pc_parse.readinstr.p u64 
    push           0          
    popptroff                 u8 1 0
    push           9          i64 
    pop            pc_parse.readinstr.mode i64 
    setargs                   0 0
    callproc       &pc_lex.lex 
    jump           #6130      
#6123: 
    push           pc_lex.lxxvalue r64 
    push           pc_parse.readinstr.p u64 
    push           8          
    popptroff                 r64 1 0
    push           5          i64 
    push           pc_parse.readinstr.p u64 
    push           0          
    popptroff                 u8 1 0
    push           4          i64 
    pop            pc_parse.readinstr.mode i64 
    setargs                   0 0
    callproc       &pc_lex.lex 
    jump           #6130      
#6124: 
    setargs                   1 0
    push           pc_lex.lxsvalue u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           pc_parse.readinstr.p u64 
    push           8          
    popptroff                 u64 1 0
    push           8          i64 
    push           pc_parse.readinstr.p u64 
    push           0          
    popptroff                 u8 1 0
    push           4          i64 
    pop            pc_parse.readinstr.mode i64 
    setargs                   0 0
    callproc       &pc_lex.lex 
    jump           #6130      
#6125: 
    push           pc_lex.lxvalue i64 
    push           1          i64 
    push           100000     i64 
    jumpinrange    #6131      i64 
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_lex.lxvalue i64 
    callfn         &msysp.strint u64 
    push           "2:Label out of range:" u64 
    callproc       &pc_parse.serror_s 
#6131: 
    push           pc_lex.lxvalue i64 
    push           pc_parse.readinstr.p u64 
    push           8          
    popptroff                 i64 1 0
    push           3          i64 
    push           pc_parse.readinstr.p u64 
    push           0          
    popptroff                 u8 1 0
    setargs                   0 0
    callproc       &pc_lex.lex 
    jump           #6130      
#6126: 
    push           pc_lex.lxsymptr u64 
    push           pc_parse.readinstr.p u64 
    push           8          
    popptroff                 u64 1 0
    push           1          i64 
    push           pc_parse.readinstr.p u64 
    push           0          
    popptroff                 u8 1 0
    push           pc_lex.lxtruename u8 
    push           pc_parse.readinstr.p u64 
    push           8          
    pushptroff                u64 1 0
    push           46         
    addrefoff                 u64 1 0
    push           8          i64 
    popdotindex               u16 
    setargs                   0 0
    callproc       &pc_lex.lex 
    jump           #6130      
#6127: 
    push           pc_lex.lxuvalue128 i128 
    push           pc_parse.readinstr.p u64 
    push           8          
    popptroff                 i128 1 0
    push           6          i64 
    push           pc_parse.readinstr.p u64 
    push           0          
    popptroff                 u8 1 0
    push           10         i64 
    pop            pc_parse.readinstr.mode i64 
    setargs                   0 0
    callproc       &pc_lex.lex 
    jump           #6130      
#6128: 
    setargs                   0 0
    callproc       &pc_lex.lex 
    setargs                   1 0
    push           19         i64 
    callproc       &pc_parse.checksymbol 
    push           pc_lex.lxsymptr u64 
    push           pc_parse.readinstr.p u64 
    push           8          
    popptroff                 u64 1 0
    push           pc_lex.lxtruename u8 
    push           pc_parse.readinstr.p u64 
    push           8          
    pushptroff                u64 1 0
    push           46         
    addrefoff                 u64 1 0
    push           8          i64 
    popdotindex               u16 
    push           2          i64 
    push           pc_parse.readinstr.p u64 
    push           0          
    popptroff                 u8 1 0
    setargs                   0 0
    callproc       &pc_lex.lex 
    push           pc_lex.lxsymbol i64 
    push           9          i64 
    jumpne         #6132      i64 
    push           1          u64 
    push           pc_parse.readinstr.p u64 
    push           8          
    pushptroff                u64 1 0
    push           46         
    addrefoff                 u64 1 0
    push           1          i64 
    popdotindex               u16 
    setargs                   0 0
    callproc       &pc_lex.lex 
#6132: 
    jump           #6130      
#6129: 
    setargs                   1 0
    push           "Missing or Bad Operand" u64 
    callproc       &pc_parse.serror 
#6130: 
    jump           #6133      
#6118: 
    setargs                   1 0
    push           19         i64 
    callproc       &pc_parse.checksymbol 
    push           pc_lex.lxsymptr u64 
    push           pc_parse.readinstr.p u64 
    push           8          
    popptroff                 u64 1 0
    push           pc_parse.readinstr.opcode i64 
    push           17         i64 
    jumpne         #6134      i64 
    push           8          i64 
    push           pc_parse.readinstr.p u64 
    push           1          
    popptroff                 u8 1 0
    setargs                   1 0
    push           pc_parse.readinstr.p u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &pc_libpcl.definertsproc 
#6134: 
    push           1          i64 
    push           pc_parse.readinstr.p u64 
    push           0          
    popptroff                 u8 1 0
    setargs                   0 0
    callproc       &pc_lex.lex 
    push           pc_lex.lxsymbol i64 
    push           3          i64 
    casejumpeq     #6135      i64 0
    push           4          i64 
    casejumpeq     #6136      i64 0
    popstack                  i64 
    jump           #6137      
#6135: 
    jump           #6138      
#6136: 
    push           1          u64 
    push           pc_parse.readinstr.p u64 
    push           8          
    pushptroff                u64 1 0
    push           46         
    addrefoff                 u64 1 0
    push           3          i64 
    popdotindex               u16 
    push           1          u64 
    push           pc_parse.readinstr.p u64 
    push           2          
    addrefoff                 u64 1 0
    push           0          i64 
    popdotindex               u8 
    jump           #6138      
#6137: 
    setargs                   1 0
    push           "Colon expected" u64 
    callproc       &pc_parse.serror 
#6138: 
    setargs                   0 0
    callproc       &pc_lex.lex 
    jump           #6133      
#6119: 
    setargs                   1 0
    push           19         i64 
    callproc       &pc_parse.checksymbol 
    push           pc_lex.lxsymptr u64 
    push           pc_parse.readinstr.p u64 
    push           8          
    popptroff                 u64 1 0
    push           1          i64 
    push           pc_parse.readinstr.p u64 
    push           0          
    popptroff                 u8 1 0
    setargs                   0 0
    callproc       &pc_lex.lex 
    push           pc_lex.lxsymbol i64 
    push           3          i64 
    jumpne         #6139      i64 
    setargs                   1 0
    push           ": not used for locals" u64 
    callproc       &pc_parse.serror 
#6139: 
    jump           #6133      
#6120: 
    setargs                   1 0
    push           19         i64 
    callproc       &pc_parse.checksymbol 
    push           pc_lex.lxsymptr u64 
    push           pc_parse.readinstr.p u64 
    push           8          
    popptroff                 u64 1 0
    push           1          i64 
    push           pc_parse.readinstr.p u64 
    push           0          
    popptroff                 u8 1 0
    setargs                   0 0
    callproc       &pc_lex.lex 
    jump           #6133      
#6121: 
#6133: 
    push           pc_lex.lxsymbol i64 
    push           21         i64 
    jumpne         #6140      i64 
    setargs                   1 0
    push           pc_parse.readinstr.p u64 
    callproc       &pc_parse.readmode 
#6140: 
    push           pc_parse.readinstr.p u64 
    push           3          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #6141      i64 
    push           pc_parse.readinstr.mode i64 
    push           0          i64 
    jumpeq         #6142      i64 
    push           pc_parse.readinstr.mode i64 
    push           pc_parse.readinstr.p u64 
    push           3          
    popptroff                 u8 1 0
    push           pc_parse.readinstr.size i64 
    push           pc_parse.readinstr.p u64 
    push           4          
    popptroff                 i32 1 0
#6142: 
#6141: 
    push           &pc_tables.pclextra 
    push           pc_parse.readinstr.opcode i64 
    pushptroff                u8 1 0
    jumpfalse      #6143      i64 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_parse.checksymbol 
    push           pc_lex.lxvalue i64 
    push           pc_parse.readinstr.p u64 
    push           16         
    popptroff                 i32 1 0
    setargs                   0 0
    callproc       &pc_lex.lex 
    push           &pc_tables.pclextra 
    push           pc_parse.readinstr.opcode i64 
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #6144      i64 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_parse.checksymbol 
    push           pc_lex.lxvalue i64 
    push           pc_parse.readinstr.p u64 
    push           20         
    popptroff                 i32 1 0
    setargs                   0 0
    callproc       &pc_lex.lex 
#6144: 
#6143: 
#6145: 
    retproc                   
End


Proc pc_parse.serror:
    param          pc_parse.serror.mess u64 
    procentry                 
    setargs                   2 0
    push           0          u64 
    push           pc_parse.serror.mess u64 
    callproc       &pc_parse.serror_s 
#6147: 
    retproc                   
End


Proc pc_parse.serror_s:
    param          pc_parse.serror_s.mess u64 
    param          pc_parse.serror_s.param u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Syntax error:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_parse.serror_s.mess u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           pc_parse.serror_s.param u64 
    jumpfalse      #6149      u64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           ":"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_parse.serror_s.param u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#6149: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           " on line:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_lex.lxlineno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#6150: 
    retproc                   
End


Proc pc_parse.pcl_readpclfile:: i64
    param          pc_parse.pcl_readpclfile.filename u64 
    param          pc_parse.pcl_readpclfile.rtsfile u64 
    local          pc_parse.pcl_readpclfile.source u64 
    procentry                 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_libpcl.pcl_start 
    setargs                   1 0
    push           pc_parse.pcl_readpclfile.filename u64 
    callfn         &pc_parse.parse_readsource i64 
    jumptrue       #6152      i64 
    push           0          i64 
    setret                    i64 
    jump           #6153      
#6152: 
    push           pc_parse.pcl_readpclfile.rtsfile u64 
    jumpfalse      #6154      u64 
    push           pc_libpcl.maxuserlabel i64 
    pop            pc_libpcl.labelnooffset i64 
    setargs                   0 0
    callfn         &pc_parse.parse_readrts i64 
    jumptrue       #6155      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "No RTS found" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           0          i64 
    setret                    i64 
    jump           #6153      
#6155: 
#6154: 
    setargs                   2 0
    push           0          u64 
    push           11         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_libpcl.pcl_end 
    push           1          i64 
    setret                    i64 
    jump           #6153      
#6153: 
    retfn                     i64 
End


Proc pc_parse.parse_readsource: i64
    param          pc_parse.parse_readsource.filename u64 
    local          pc_parse.parse_readsource.source u64 
    procentry                 
    setargs                   1 0
    push           pc_parse.parse_readsource.filename u64 
    callfn         &mlibp.readfile u64 
    pop            pc_parse.parse_readsource.source u64 
    push           pc_parse.parse_readsource.source u64 
    push           0          u64 
    jumpne         #6157      u64 
    push           "Can't load file" u64 
    pop            pc_libpcl.errormess u64 
    push           0          i64 
    setret                    i64 
    jump           #6158      
#6157: 
    setargs                   1 0
    push           pc_parse.parse_readsource.source u64 
    callfn         &pc_parse.parse i64 
    jumptrue       #6159      i64 
    push           "Couldn't parse" u64 
    pop            pc_libpcl.errormess u64 
    push           0          i64 
    setret                    i64 
    jump           #6158      
#6159: 
    push           1          i64 
    setret                    i64 
    jump           #6158      
#6158: 
    retfn                     i64 
End


Proc pc_parse.parse_readrts: i64
    procentry                 
    setargs                   1 0
    push           pc_parse.parse_readrts.source u64 
    callfn         &pc_parse.parse i64 
    jumptrue       #6161      i64 
    push           "Couldn't parse RTS" u64 
    pop            pc_libpcl.errormess u64 
    push           0          i64 
    setret                    i64 
    jump           #6162      
#6161: 
    push           1          i64 
    setret                    i64 
    jump           #6162      
#6162: 
    retfn                     i64 
End


Proc pc_win64.pcl_genmcl:: i64
    param          pc_win64.pcl_genmcl.optim i64 
    procentry                 
    setargs                   0 0
    callproc       &pc_libpcl.fixuppcl 
    setargs                   1 0
    push           pc_win64.pcl_genmcl.optim i64 
    callproc       &pc_genmcl.genmcl 
    push           1          i64 
    setret                    i64 
    jump           #6164      
#6164: 
    retfn                     i64 
End


Proc pc_win64.pcl_writeasmfile:: i64
    param          pc_win64.pcl_writeasmfile.filename u64 
    param          pc_win64.pcl_writeasmfile.optim i64 
    procentry                 
    setargs                   1 0
    push           pc_win64.pcl_writeasmfile.optim i64 
    callproc       &pc_win64.pcl_genmcl 
    setargs                   1 0
    push           pc_win64.pcl_writeasmfile.filename u64 
    callproc       &pc_win64.writeasmfile 
    push           1          i64 
    setret                    i64 
    jump           #6166      
#6166: 
    retfn                     i64 
End


Proc pc_win64.pcl_getasmstring:: u64
    param          pc_win64.pcl_getasmstring.optim i64 
    local          pc_win64.pcl_getasmstring.asmstr u64 
    procentry                 
    setargs                   1 0
    push           pc_win64.pcl_getasmstring.optim i64 
    callproc       &pc_win64.pcl_genmcl 
    setargs                   0 0
    callfn         &pc_libmcl.getmclstr u64 
    pop            pc_win64.pcl_getasmstring.asmstr u64 
    push           pc_win64.pcl_getasmstring.asmstr u64 
    pushptr                   u64 
    setret                    u64 
    jump           #6168      
#6168: 
    retfn                     u64 
End


Proc pc_win64.pcl_writeexefile:: i64
    param          pc_win64.pcl_writeexefile.filename u64 
    param          pc_win64.pcl_writeexefile.optim i64 
    procentry                 
    setargs                   1 0
    push           pc_win64.pcl_writeexefile.optim i64 
    callproc       &pc_win64.pcl_genmcl 
    setargs                   3 0
    push           0          i64 
    push           pc_win64.pcl_writeexefile.optim i64 
    push           pc_win64.pcl_writeexefile.filename u64 
    callfn         &pc_win64.writeexefile i64 
    setret                    i64 
    jump           #6170      
#6170: 
    retfn                     i64 
End


Proc pc_win64.pcl_writedllfile:: i64
    param          pc_win64.pcl_writedllfile.filename u64 
    param          pc_win64.pcl_writedllfile.optim i64 
    procentry                 
    setargs                   1 0
    push           pc_win64.pcl_writedllfile.optim i64 
    callproc       &pc_win64.pcl_genmcl 
    setargs                   3 0
    push           1          i64 
    push           pc_win64.pcl_writedllfile.optim i64 
    push           pc_win64.pcl_writedllfile.filename u64 
    callfn         &pc_win64.writeexefile i64 
    setret                    i64 
    jump           #6172      
#6172: 
    retfn                     i64 
End


Proc pc_win64.writeexefile: i64
    param          pc_win64.writeexefile.filename u64 
    param          pc_win64.writeexefile.optim i64 
    param          pc_win64.writeexefile.gendll i64 
    local          pc_win64.writeexefile.asmfilename block:300 
    local          pc_win64.writeexefile.str block:300 
    procentry                 
    setargs                   0 0
    callproc       &pc_genss.genss 
    setargs                   0 0
    callproc       &pc_writeexe.initsectiontable 
    setargs                   3 0
    push           pc_win64.writeexefile.gendll i64 
    push           pc_win64.writeexefile.filename u64 
    push           0          u64 
    callproc       &pc_writeexe.genexe 
    setargs                   2 0
    push           pc_win64.writeexefile.gendll i64 
    push           pc_win64.writeexefile.filename u64 
    callproc       &pc_writeexe.writeexe 
    push           1          i64 
    setret                    i64 
    jump           #6174      
#6174: 
    retfn                     i64 
End


Proc pc_win64.writeasmfile:
    param          pc_win64.writeasmfile.filename u64 
    local          pc_win64.writeasmfile.asmstr u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.getmclstr u64 
    pop            pc_win64.writeasmfile.asmstr u64 
    setargs                   2 0
    push           pc_win64.writeasmfile.asmstr u64 
    push           pc_win64.writeasmfile.filename u64 
    callproc       &pc_libmcl.writegsfile 
    setargs                   1 0
    push           pc_win64.writeasmfile.asmstr u64 
    callproc       &mlibp.gs_free 
#6176: 
    retproc                   
End


Proc pc_win64.pcl_readrts:: i64
    param          pc_win64.pcl_readrts.filename u64 
    procentry                 
    push           pc_libpcl.maxuserlabel i64 
    jumpfalse      #6178      i64 
    push           pc_libpcl.maxuserlabel i64 
    pop            pc_libpcl.labelnooffset i64 
    jump           #6179      
#6178: 
    push           &pc_libpcl.labelno 
    incrload                  i64 1
    pop            pc_libpcl.labelnooffset i64 
#6179: 
    setargs                   0 0
    callfn         &pc_parse.parse_readrts i64 
    jumptrue       #6180      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "No RTS file found" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           0          i64 
    setret                    i64 
    jump           #6181      
#6180: 
    push           1          i64 
    setret                    i64 
    jump           #6181      
#6181: 
    retfn                     i64 
End


Proc pc_win64.pcl_endprog::
    param          pc_win64.pcl_endprog.fixup i64 
    param          pc_win64.pcl_endprog.dorts i64 
    procentry                 
    push           pc_win64.pcl_endprog.dorts i64 
    jumpfalse      #6183      i64 
    setargs                   1 0
    push           "rts.pcl"  u64 
    callproc       &pc_win64.pcl_readrts 
#6183: 
    setargs                   1 0
    push           pc_win64.pcl_endprog.fixup i64 
    callproc       &pc_libpcl.pcl_end 
#6184: 
    retproc                   
End


Proc pc_win64.pcl_showss::
    param          pc_win64.pcl_showss.filename u64 
    param          pc_win64.pcl_showss.fexe i64 
    local          pc_win64.pcl_showss.ssstr u64 
    procentry                 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_init 
    setargs                   1 0
    push           pc_win64.pcl_showss.fexe i64 
    callfn         &pc_writessx.writessdata u64 
    pop            pc_win64.pcl_showss.ssstr u64 
    setargs                   2 0
    push           pc_win64.pcl_showss.ssstr u64 
    push           pc_win64.pcl_showss.filename u64 
    callproc       &pc_libmcl.writegsfile 
#6186: 
    retproc                   
End


Proc pc_win64.pcl_writeclangfile::
    param          pc_win64.pcl_writeclangfile.filename u64 
    procentry                 
#6188: 
    retproc                   
End


Proc pci_mcl.axerror:
    param          pci_mcl.axerror.mess u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "MCL Error: #" u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           pci_mcl.axerror.mess u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#6190: 
    retproc                   
End


Proc pc_genmcl.genmcl:
    param          pc_genmcl.genmcl.optim i64 
    procentry                 
    push           pc_libpcl.mcldone i64 
    jumpfalse      #6192      i64 
    jump           #6193      
#6192: 
    setargs                   0 0
    callproc       &pc_genmcl.inithandlers 
    push           pc_genmcl.genmcl.optim i64 
    pop            pc_decls.optimflag i64 
    setargs                   0 0
    callproc       &pc_libmcl.mclinit 
    push           pc_libpcl.pcstart u64 
    pop            pc_genmcl.currpcl u64 
    push           pc_libpcl.labelno i64 
    pop            pci_mcl.mlabelno i64 
    push           0          i64 
    pop            pci_mcl.mseqno i64 
    push           1          i64 
    pop            pci_mcl.passno i64 
#6194: 
    setargs                   1 0
    push           pc_genmcl.currpcl u64 
    callproc       &pc_genmcl.convertpcl 
    push           &pc_genmcl.currpcl 
    incr                      u64 32
#6195: 
    push           pc_genmcl.currpcl u64 
    push           1          
    pushptroff                u8 1 0
    push           11         i64 
    jumpne         #6194      i64 
#6196: 
    setargs                   0 0
    callproc       &pc_libmcl.genabsneg 
    setargs                   0 0
    callproc       &pc_libmcl.genstringtable 
    setargs                   0 0
    callproc       &pc_libmcl.genrealtable 
    setargs                   0 0
    callproc       &pc_libmcl.genrtsproctable 
    setargs                   0 0
    callproc       &pc_libmcl.genfunctiontable 
    setargs                   3 0
    push           0          u64 
    push           0          u64 
    push           10         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           0          u64 
    push           10         i64 
    callproc       &pc_libmcl.genmc 
    push           1          i64 
    pop            pc_libpcl.mcldone i64 
#6193: 
    retproc                   
End


Proc pc_genmcl.convertpcl:
    param          pc_genmcl.convertpcl.p u64 
    local          pc_genmcl.convertpcl.str block:1256 
    local          pc_genmcl.convertpcl.ss u64 
    local          pc_genmcl.convertpcl.m i64 
    procentry                 
    push           pc_genmcl.convertpcl.p u64 
    push           24         
    pushptroff                u32 1 0
    pop            pci_mcl.mseqno i64 
    setargs                   1 0
    push           pc_genmcl.convertpcl.p u64 
    push           &pc_genmcl.px_handlertable 
    push           pc_genmcl.convertpcl.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callprocptr               
#6198: 
    retproc                   
End


Proc pc_genmcl.inithandlers:
    local          pc_genmcl.inithandlers.name u64 
    local          pc_genmcl.inithandlers.n i64 
    local          pc_genmcl.inithandlers.av_1 i64 
    local          pc_genmcl.inithandlers.av_2 i64 
    local          pc_genmcl.inithandlers.i i64 
    local          pc_genmcl.inithandlers.k i64 
    procentry                 
    push           pc_genmcl.inithandlers.initdone u8 
    jumpfalse      #6200      i64 
    jump           #6201      
#6200: 
    getnprocs                 i64 
    pop            pc_genmcl.inithandlers.n i64 
#6202: 
    push           1          i64 
    pop            pc_genmcl.inithandlers.i i64 
    push           pc_genmcl.inithandlers.n i64 
    push           1          i64 
    jumplt         #6203      i64 
#6204: 
    push           pc_genmcl.inithandlers.i i64 
    getprocname               i64 
    pop            pc_genmcl.inithandlers.name u64 
    setargs                   3 0
    push           3          i64 
    push           "px_"      u64 
    push           pc_genmcl.inithandlers.name u64 
    callfn         &mlibp.eqbytes i64 
    jumpfalse      #6205      i64 
#6206: 
    push           0          i64 
    pop            pc_genmcl.inithandlers.k i64 
    push           218        i64 
    pop            pc_genmcl.inithandlers.av_1 i64 
    push           pc_genmcl.inithandlers.av_1 i64 
    push           0          i64 
    jumplt         #6207      i64 
#6208: 
    setargs                   2 0
    push           pc_genmcl.inithandlers.name u64 
    push           3          i64 
    addrefoff                 u64 1 0
    push           &pc_tables.pclnames 
    push           pc_genmcl.inithandlers.k i64 
    pushptroff                u64 8 0
    push           1          i64 
    addrefoff                 u64 1 0
    callfn         &mlibp.eqstring i64 
    jumpfalse      #6209      i64 
    push           pc_genmcl.inithandlers.i i64 
    getprocaddr               i64 
    push           &pc_genmcl.px_handlertable 
    push           pc_genmcl.inithandlers.k i64 
    popptroff                 u64 8 0
    jump           #6210      
#6209: 
#6211: 
    forup          #6208      i64 1
    opnd           pc_genmcl.inithandlers.k 
    opnd           pc_genmcl.inithandlers.av_1 
#6207: 
    setargs                   2 0
    push           pc_genmcl.inithandlers.name u64 
    push           "Invalid handler name:" u64 
    callproc       &pc_genmcl.gerrorc 
#6210: 
#6205: 
#6212: 
    forup          #6204      i64 1
    opnd           pc_genmcl.inithandlers.i 
    opnd           pc_genmcl.inithandlers.n 
#6203: 
#6213: 
    push           0          i64 
    pop            pc_genmcl.inithandlers.i i64 
    push           218        i64 
    pop            pc_genmcl.inithandlers.av_2 i64 
    push           pc_genmcl.inithandlers.av_2 i64 
    push           0          i64 
    jumplt         #6214      i64 
#6215: 
    push           &pc_genmcl.px_handlertable 
    push           pc_genmcl.inithandlers.i i64 
    pushptroff                u64 8 0
    jumptrue       #6216      u64 
    push           &pc_genmcl.unimpl 
    push           &pc_genmcl.px_handlertable 
    push           pc_genmcl.inithandlers.i i64 
    popptroff                 u64 8 0
#6216: 
#6217: 
    forup          #6215      i64 1
    opnd           pc_genmcl.inithandlers.i 
    opnd           pc_genmcl.inithandlers.av_2 
#6214: 
    push           1          i64 
    pop            pc_genmcl.inithandlers.initdone u8 
#6201: 
    retproc                   
End


Proc pc_genmcl.unimpl:
    param          pc_genmcl.unimpl.p u64 
    local          pc_genmcl.unimpl.str block:300 
    procentry                 
    setargs                   1 0
    push           &pc_genmcl.unimpl.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "Unimplemented Opcode:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pc_tables.pclnames 
    push           pc_genmcl.unimpl.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           &pc_genmcl.unimpl.str 
    callproc       &pc_libmcl.mgencomment 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Unimplemented Opcode:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pc_tables.pclnames 
    push           pc_genmcl.unimpl.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#6219: 
    retproc                   
End


Proc pc_genmcl.gerrorc:
    param          pc_genmcl.gerrorc.mess u64 
    param          pc_genmcl.gerrorc.param u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "MCL Gen error:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_genmcl.gerrorc.mess u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           pc_genmcl.gerrorc.param u64 
    jumpfalse      #6221      u64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           ":"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_genmcl.gerrorc.param u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#6221: 
    push           1          i64 
    stop                      
#6222: 
    retproc                   
End


Proc pc_genmcl.px_zero:
    param          pc_genmcl.px_zero.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_zero.p u64 
    callproc       &pc_genmcl.unimpl 
#6224: 
    retproc                   
End


Proc pc_genmcl.px_nop:
    param          pc_genmcl.px_nop.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_nop.p u64 
    callproc       &pc_genmcl.unimpl 
#6226: 
    retproc                   
End


Proc pc_genmcl.px_stop:
    param          pc_genmcl.px_stop.p u64 
    local          pc_genmcl.px_stop.d u64 
    procentry                 
    setargs                   2 0
    push           11         i64 
    push           1          i64 
    callproc       &pc_stackmcl.loadparam 
    setargs                   1 0
    push           "exit"     u64 
    callfn         &pc_libpcl.pcl_makesymbol u64 
    pop            pc_genmcl.px_stop.d u64 
    push           1          u64 
    push           pc_genmcl.px_stop.d u64 
    push           46         
    addrefoff                 u64 1 0
    push           1          i64 
    popdotindex               u16 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_stop.d u64 
    callfn         &pc_libmcl.mgenmemaddr u64 
    push           22         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6228: 
    retproc                   
End


Proc pc_genmcl.px_comment:
    param          pc_genmcl.px_comment.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_comment.p u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &pc_libmcl.mgencomment 
#6230: 
    retproc                   
End


Proc pc_genmcl.px_importdll:
    param          pc_genmcl.px_importdll.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_importdll.p u64 
    callproc       &pc_genmcl.unimpl 
#6232: 
    retproc                   
End


Proc pc_genmcl.px_istatic:
    param          pc_genmcl.px_istatic.p u64 
    procentry                 
    setargs                   2 0
    push           pc_genmcl.px_istatic.p u64 
    push           16         
    pushptroff                i32 1 0
    push           73         i64 
    callproc       &pc_libmcl.setsegment 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_istatic.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmemaddr u64 
    push           6          i64 
    callproc       &pc_libmcl.genmc 
#6234: 
    retproc                   
End


Proc pc_genmcl.px_zstatic:
    param          pc_genmcl.px_zstatic.p u64 
    local          pc_genmcl.px_zstatic.d u64 
    procentry                 
    push           pc_genmcl.px_zstatic.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_genmcl.px_zstatic.d u64 
    setargs                   2 0
    push           pc_genmcl.px_zstatic.p u64 
    push           16         
    pushptroff                i32 1 0
    push           90         i64 
    callproc       &pc_libmcl.setsegment 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_zstatic.d u64 
    callfn         &pc_libmcl.mgenmemaddr u64 
    push           6          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_zstatic.p u64 
    push           4          
    pushptroff                i32 1 0
    callfn         &pc_libmcl.mgenint u64 
    push           124        i64 
    callproc       &pc_libmcl.genmc 
#6236: 
    retproc                   
End


Proc pc_genmcl.px_equiv:
    param          pc_genmcl.px_equiv.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_equiv.p u64 
    callproc       &pc_genmcl.unimpl 
#6238: 
    retproc                   
End


Proc pc_genmcl.px_procdef:
    param          pc_genmcl.px_procdef.p u64 
    local          pc_genmcl.px_procdef.name u64 
    procentry                 
    push           pc_genmcl.currpcl u64 
    pop            pci_mcl.procdefpcl u64 
    push           pc_genmcl.currpcl u64 
    push           8          
    pushptroff                u64 1 0
    pop            pci_mcl.procdef u64 
    push           pci_mcl.procdef u64 
    pushptr                   u64 
    pop            pc_genmcl.px_procdef.name u64 
    setargs                   2 0
    push           16         i64 
    push           67         i64 
    callproc       &pc_libmcl.setsegment 
    push           pci_mcl.passno i64 
    push           1          i64 
    jumpne         #6240      i64 
    setargs                   1 0
    push           "DUMMY"    u64 
    callproc       &pc_libmcl.mgencomment 
    push           pci_mcl.mccodex u64 
    pop            pc_genmcl.procdefmcl u64 
#6240: 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.procdef u64 
    callfn         &pc_libmcl.mgenmemaddr u64 
    push           1          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.procdef u64 
    callfn         &pc_libmcl.mgenmemaddr u64 
    push           6          i64 
    callproc       &pc_libmcl.genmc 
    push           0          i64 
    store          pci_mcl.nparams i64 
    pop            pci_mcl.nlocals i64 
#6241: 
    retproc                   
End


Proc pc_genmcl.px_threadedproc:
    param          pc_genmcl.px_threadedproc.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_threadedproc.p u64 
    callproc       &pc_genmcl.px_procdef 
#6243: 
    retproc                   
End


Proc pc_genmcl.px_procentry:
    param          pc_genmcl.px_procentry.p u64 
    local          pc_genmcl.px_procentry.np i64 
    local          pc_genmcl.px_procentry.regoffset i64 
    local          pc_genmcl.px_procentry.offset i64 
    local          pc_genmcl.px_procentry.dreg i64 
    local          pc_genmcl.px_procentry.xreg i64 
    local          pc_genmcl.px_procentry.nregparams i64 
    local          pc_genmcl.px_procentry.nspill i64 
    local          pc_genmcl.px_procentry.hasequiv i64 
    local          pc_genmcl.px_procentry.ax u64 
    local          pc_genmcl.px_procentry.d u64 
    local          pc_genmcl.px_procentry.i i64 
    procentry                 
    push           0          i64 
    pop            pci_mcl.framebytes i64 
    push           0          i64 
    pop            pci_mcl.frameoffset i64 
    push           0          i64 
    pop            pci_mcl.paramoffset i64 
    push           0          i64 
    pop            pci_mcl.needstackframe i64 
    push           0          i64 
    store          pci_mcl.nxsaveregs i64 
    pop            pci_mcl.ndsaveregs i64 
    push           0          i64 
    pop            pci_mcl.ndsavepush i64 
    push           0          i64 
    store          pc_genmcl.px_procentry.nspill i64 
    pop            pc_genmcl.px_procentry.nregparams i64 
    push           0          i64 
    pop            pci_mcl.needshadow48 i64 
    push           0          i64 
    pop            pci_mcl.needshadow32 i64 
    push           0          i64 
    pop            pc_genmcl.px_procentry.hasequiv i64 
    push           pci_mcl.inf_assem i64 
    jumpfalse      #6245      i64 
    jump           #6246      
#6245: 
    push           pci_mcl.passno i64 
    push           2          i64 
    jumpne         #6247      i64 
    push           pci_mcl.inf_leafproc i64 
    jumpfalse      #6247      i64 
    push           11         i64 
    pop            pc_genmcl.px_procentry.dreg i64 
    push           1          i64 
    pop            pc_genmcl.px_procentry.xreg i64 
#6248: 
    push           1          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.nparams i64 
    push           1          i64 
    jumplt         #6249      i64 
#6250: 
    push           pc_genmcl.px_procentry.i i64 
    push           4          i64 
    jumple         #6251      i64 
    jump           #6249      
#6251: 
    push           &pci_mcl.paramdefs 
    push           pc_genmcl.px_procentry.i i64 
    pushptroff                u64 8 -8
    pop            pc_genmcl.px_procentry.d u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_procentry.d u64 
    push           16         
    pushptroff                u64 1 0
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6252      i64 0
    push           3          i64 
    casejumpeq     #6253      i64 0
    popstack                  i64 
    jump           #6254      
#6252: 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           2          i64 
    dotindex                  i64 
    jumptrue       #6255      u64 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           5          i64 
    dotindex                  i64 
    jumptrue       #6255      u64 
    push           pc_genmcl.px_procentry.d u64 
    push           48         
    pushptroff                i16 1 0
    jumpfalse      #6255      i64 
    push           pc_genmcl.px_procentry.dreg i64 
    push           pc_genmcl.px_procentry.d u64 
    push           50         
    popptroff                 u8 1 0
    push           1          i64 
    push           &pci_mcl.isregvar 
    push           pc_genmcl.px_procentry.dreg i64 
    popptroff                 u8 1 -1
    push           pc_genmcl.px_procentry.dreg i64 
    push           11         i64 
    jumpne         #6256      i64 
    push           1          i64 
    pop            pci_mcl.inf_r10used i64 
#6256: 
    push           pc_genmcl.px_procentry.dreg i64 
    push           12         i64 
    jumpne         #6257      i64 
    push           1          i64 
    pop            pci_mcl.inf_r11used i64 
#6257: 
    push           pc_genmcl.px_procentry.dreg i64 
    push           14         i64 
    jumpne         #6258      i64 
    push           1          i64 
    pop            pci_mcl.inf_r13used i64 
#6258: 
    push           &pc_genmcl.px_procentry.nregparams 
    incr                      i64 1
#6255: 
    jump           #6259      
#6253: 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           2          i64 
    dotindex                  i64 
    jumptrue       #6260      u64 
    push           pc_genmcl.px_procentry.d u64 
    push           48         
    pushptroff                i16 1 0
    jumpfalse      #6260      i64 
    push           pc_genmcl.px_procentry.xreg i64 
    push           pc_genmcl.px_procentry.d u64 
    push           50         
    popptroff                 u8 1 0
    push           1          i64 
    push           &pci_mcl.isxregvar 
    push           pc_genmcl.px_procentry.dreg i64 
    popptroff                 u8 1 -1
    push           &pc_genmcl.px_procentry.nregparams 
    incr                      i64 1
#6260: 
    jump           #6259      
#6254: 
#6259: 
    push           &pc_genmcl.px_procentry.dreg 
    incr                      i64 1
    push           &pc_genmcl.px_procentry.xreg 
    incr                      i64 1
#6261: 
    forup          #6250      i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.nparams 
#6249: 
#6247: 
    push           pci_mcl.passno i64 
    push           2          i64 
    jumpne         #6262      i64 
    push           10         i64 
    pop            pc_genmcl.px_procentry.dreg i64 
    push           16         i64 
    pop            pc_genmcl.px_procentry.xreg i64 
#6263: 
    push           1          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.nlocals i64 
    push           1          i64 
    jumplt         #6264      i64 
#6265: 
    push           &pci_mcl.localdefs 
    push           pc_genmcl.px_procentry.i i64 
    pushptroff                u64 8 -8
    pop            pc_genmcl.px_procentry.d u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_procentry.d u64 
    push           16         
    pushptroff                u64 1 0
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6266      i64 0
    push           3          i64 
    casejumpeq     #6267      i64 0
    popstack                  i64 
    jump           #6268      
#6266: 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           2          i64 
    dotindex                  i64 
    jumptrue       #6269      u64 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           5          i64 
    dotindex                  i64 
    jumptrue       #6269      u64 
    push           pc_genmcl.px_procentry.d u64 
    push           48         
    pushptroff                i16 1 0
    jumpfalse      #6269      i64 
    push           pc_genmcl.px_procentry.dreg i64 
    push           pci_mcl.inf_highreg i64 
    jumple         #6270      i64 
    push           pc_genmcl.px_procentry.dreg i64 
    push           4          i64 
    jumpge         #6271      i64 
#6270: 
    jump           #6272      
#6271: 
    push           pc_genmcl.px_procentry.dreg i64 
    push           &pci_mcl.dsaveregs 
    push           &pci_mcl.ndsaveregs 
    incrload                  i64 1
    popptroff                 i64 8 -8
    push           pc_genmcl.px_procentry.dreg i64 
    push           pc_genmcl.px_procentry.d u64 
    push           50         
    popptroff                 u8 1 0
    push           1          i64 
    push           &pci_mcl.isregvar 
    push           pc_genmcl.px_procentry.dreg i64 
    popptroff                 u8 1 -1
    push           &pc_genmcl.px_procentry.dreg 
    decr                      i64 1
#6269: 
    jump           #6273      
#6267: 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           2          i64 
    dotindex                  i64 
    jumptrue       #6274      u64 
    push           pc_genmcl.px_procentry.d u64 
    push           48         
    pushptroff                i16 1 0
    jumpfalse      #6274      i64 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           5          i64 
    dotindex                  i64 
    jumptrue       #6274      u64 
    push           pc_genmcl.px_procentry.xreg i64 
    push           pci_mcl.inf_highxreg i64 
    jumple         #6275      i64 
    push           pc_genmcl.px_procentry.xreg i64 
    push           7          i64 
    jumpge         #6276      i64 
#6275: 
    jump           #6272      
#6276: 
    push           pc_genmcl.px_procentry.xreg i64 
    push           &pci_mcl.xsaveregs 
    push           &pci_mcl.nxsaveregs 
    incrload                  i64 1
    popptroff                 i64 8 -8
    push           pc_genmcl.px_procentry.xreg i64 
    push           pc_genmcl.px_procentry.d u64 
    push           50         
    popptroff                 u8 1 0
    push           1          i64 
    push           &pci_mcl.isxregvar 
    push           pc_genmcl.px_procentry.dreg i64 
    popptroff                 u8 1 -1
    push           &pc_genmcl.px_procentry.xreg 
    decr                      i64 1
#6274: 
    jump           #6273      
#6268: 
#6273: 
#6272: 
    forup          #6265      i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.nlocals 
#6264: 
    push           pci_mcl.inf_leafproc i64 
    jumptrue       #6277      i64 
#6278: 
    push           1          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.nparams i64 
    push           1          i64 
    jumplt         #6279      i64 
#6280: 
    push           pc_genmcl.px_procentry.i i64 
    push           4          i64 
    jumple         #6281      i64 
    jump           #6279      
#6281: 
    push           &pci_mcl.paramdefs 
    push           pc_genmcl.px_procentry.i i64 
    pushptroff                u64 8 -8
    pop            pc_genmcl.px_procentry.d u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_procentry.d u64 
    push           16         
    pushptroff                u64 1 0
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6282      i64 0
    push           3          i64 
    casejumpeq     #6283      i64 0
    popstack                  i64 
    jump           #6284      
#6282: 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           2          i64 
    dotindex                  i64 
    jumptrue       #6285      u64 
    push           pc_genmcl.px_procentry.d u64 
    push           48         
    pushptroff                i16 1 0
    jumpfalse      #6285      i64 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           5          i64 
    dotindex                  i64 
    jumptrue       #6285      u64 
    push           pc_genmcl.px_procentry.dreg i64 
    push           pci_mcl.inf_highreg i64 
    jumple         #6286      i64 
    push           pc_genmcl.px_procentry.dreg i64 
    push           4          i64 
    jumpge         #6287      i64 
#6286: 
    jump           #6288      
#6287: 
    push           pc_genmcl.px_procentry.dreg i64 
    push           &pci_mcl.dsaveregs 
    push           &pci_mcl.ndsaveregs 
    incrload                  i64 1
    popptroff                 i64 8 -8
    push           pc_genmcl.px_procentry.dreg i64 
    push           pc_genmcl.px_procentry.d u64 
    push           50         
    popptroff                 u8 1 0
    push           1          i64 
    push           &pci_mcl.isregvar 
    push           pc_genmcl.px_procentry.dreg i64 
    popptroff                 u8 1 -1
    push           &pc_genmcl.px_procentry.dreg 
    decr                      i64 1
    push           &pc_genmcl.px_procentry.nregparams 
    incr                      i64 1
#6285: 
    jump           #6289      
#6283: 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           2          i64 
    dotindex                  i64 
    jumptrue       #6290      u64 
    push           pc_genmcl.px_procentry.d u64 
    push           48         
    pushptroff                i16 1 0
    jumpfalse      #6290      i64 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           5          i64 
    dotindex                  i64 
    jumptrue       #6290      u64 
    push           pc_genmcl.px_procentry.xreg i64 
    push           pci_mcl.inf_highxreg i64 
    jumple         #6291      i64 
    push           pc_genmcl.px_procentry.xreg i64 
    push           7          i64 
    jumpge         #6292      i64 
#6291: 
    jump           #6288      
#6292: 
    push           pc_genmcl.px_procentry.xreg i64 
    push           &pci_mcl.xsaveregs 
    push           &pci_mcl.nxsaveregs 
    incrload                  i64 1
    popptroff                 i64 8 -8
    push           pc_genmcl.px_procentry.xreg i64 
    push           pc_genmcl.px_procentry.d u64 
    push           50         
    popptroff                 u8 1 0
    push           1          i64 
    push           &pci_mcl.isxregvar 
    push           pc_genmcl.px_procentry.dreg i64 
    popptroff                 u8 1 -1
    push           &pc_genmcl.px_procentry.xreg 
    decr                      i64 1
    push           &pc_genmcl.px_procentry.nregparams 
    incr                      i64 1
#6290: 
    jump           #6289      
#6284: 
#6289: 
#6288: 
    forup          #6280      i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.nparams 
#6279: 
#6277: 
#6262: 
!skip::
#6246: 
#6293: 
    push           1          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.nparams i64 
    push           1          i64 
    jumplt         #6294      i64 
#6295: 
    push           &pci_mcl.paramdefs 
    push           pc_genmcl.px_procentry.i i64 
    pushptroff                u64 8 -8
    pop            pc_genmcl.px_procentry.d u64 
    push           pc_genmcl.px_procentry.d u64 
    push           50         
    pushptroff                u8 1 0
    jumptrue       #6296      i64 
    push           pc_genmcl.px_procentry.i i64 
    push           1          i64 
    jumple         #6297      i64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_procentry.d u64 
    push           16         
    pushptroff                u64 1 0
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #6297      i64 
    push           &pci_mcl.paramdefs 
    push           pc_genmcl.px_procentry.i i64 
    pushptroff                u64 8 -16
    push           pc_genmcl.px_procentry.d u64 
    jumpne         #6297      u64 
    jump           #6298      
#6297: 
    push           pci_mcl.paramoffset i64 
    push           16         i64 
    add                       i64 
    push           pc_genmcl.px_procentry.d u64 
    push           32         
    popptroff                 i32 1 0
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_procentry.d u64 
    push           32         
    pushptroff                i32 1 0
    callfn         &pc_libmcl.mgenint u64 
    setargs                   1 0
    setargs                   1 0
    push           pc_genmcl.px_procentry.d u64 
    callfn         &pc_libmcl.getfullname u64 
    callfn         &pc_libmcl.mgenname u64 
    push           7          i64 
    callproc       &pc_libmcl.genmc 
#6298: 
    jump           #6299      
#6296: 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_procentry.d u64 
    push           16         
    pushptroff                u64 1 0
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #6300      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_procentry.d u64 
    push           50         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   1 0
    setargs                   1 0
    push           pc_genmcl.px_procentry.d u64 
    callfn         &pc_libmcl.getfullname u64 
    callfn         &pc_libmcl.mgenname u64 
    push           8          i64 
    callproc       &pc_libmcl.genmc 
    jump           #6299      
#6300: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_procentry.d u64 
    push           50         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenxreg u64 
    setargs                   1 0
    setargs                   1 0
    push           pc_genmcl.px_procentry.d u64 
    callfn         &pc_libmcl.getfullname u64 
    callfn         &pc_libmcl.mgenname u64 
    push           8          i64 
    callproc       &pc_libmcl.genmc 
#6299: 
    push           &pci_mcl.paramoffset 
    push           8          i64 
    addto                     i64 
#6301: 
    forup          #6295      i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.nparams 
#6294: 
#6302: 
    push           4          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.inf_highreg i64 
    push           4          i64 
    jumplt         #6303      i64 
#6304: 
    push           pc_genmcl.px_procentry.i i64 
    push           &pci_mcl.dsaveregs 
    push           &pci_mcl.ndsaveregs 
    incrload                  i64 1
    popptroff                 i64 8 -8
#6305: 
    forup          #6304      i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.inf_highreg 
#6303: 
#6306: 
    push           7          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.inf_highxreg i64 
    push           7          i64 
    jumplt         #6307      i64 
#6308: 
    push           pc_genmcl.px_procentry.i i64 
    push           &pci_mcl.xsaveregs 
    push           &pci_mcl.nxsaveregs 
    incrload                  i64 1
    popptroff                 i64 8 -8
#6309: 
    forup          #6308      i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.inf_highxreg 
#6307: 
    push           pci_mcl.nparams i64 
    push           4          i64 
    jumple         #6310      i64 
    push           1          i64 
    pop            pci_mcl.needstackframe i64 
    push           4          i64 
    push           pc_genmcl.px_procentry.nregparams i64 
    sub                       i64 
    pop            pc_genmcl.px_procentry.nspill i64 
    jump           #6311      
#6310: 
    push           pci_mcl.ndsaveregs i64 
    pop            pci_mcl.ndsavepush i64 
    push           0          i64 
    pop            pci_mcl.ndsaveregs i64 
    push           pci_mcl.nparams i64 
    push           pc_genmcl.px_procentry.nregparams i64 
    sub                       i64 
    pop            pc_genmcl.px_procentry.nspill i64 
    push           pc_genmcl.px_procentry.nspill i64 
    jumpfalse      #6312      i64 
    push           1          i64 
    pop            pci_mcl.needstackframe i64 
#6312: 
#6311: 
#6313: 
    push           1          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.nlocals i64 
    push           1          i64 
    jumplt         #6314      i64 
#6315: 
    push           &pci_mcl.localdefs 
    push           pc_genmcl.px_procentry.i i64 
    pushptroff                u64 8 -8
    pop            pc_genmcl.px_procentry.d u64 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           6          i64 
    dotindex                  i64 
    jumpfalse      #6316      u64 
    push           1          i64 
    pop            pc_genmcl.px_procentry.hasequiv i64 
    jump           #6317      
#6316: 
    push           pc_genmcl.px_procentry.d u64 
    push           50         
    pushptroff                u8 1 0
    jumptrue       #6318      i64 
    push           &pci_mcl.frameoffset 
    setargs                   1 0
    push           pc_genmcl.px_procentry.d u64 
    push           16         
    pushptroff                u64 1 0
    push           4          
    pushptroff                i32 1 0
    callfn         &pc_libmcl.roundsizetg i64 
    subto                     i64 
    push           pci_mcl.frameoffset i64 
    push           pc_genmcl.px_procentry.d u64 
    push           32         
    popptroff                 i32 1 0
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_procentry.d u64 
    push           32         
    pushptroff                i32 1 0
    callfn         &pc_libmcl.mgenint u64 
    setargs                   1 0
    setargs                   1 0
    push           pc_genmcl.px_procentry.d u64 
    callfn         &pc_libmcl.getfullname u64 
    callfn         &pc_libmcl.mgenname u64 
    push           7          i64 
    callproc       &pc_libmcl.genmc 
    jump           #6317      
#6318: 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_procentry.d u64 
    push           16         
    pushptroff                u64 1 0
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #6319      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_procentry.d u64 
    push           50         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   1 0
    setargs                   1 0
    push           pc_genmcl.px_procentry.d u64 
    callfn         &pc_libmcl.getfullname u64 
    callfn         &pc_libmcl.mgenname u64 
    push           8          i64 
    callproc       &pc_libmcl.genmc 
    jump           #6317      
#6319: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_procentry.d u64 
    push           50         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenxreg u64 
    setargs                   1 0
    setargs                   1 0
    push           pc_genmcl.px_procentry.d u64 
    callfn         &pc_libmcl.getfullname u64 
    callfn         &pc_libmcl.mgenname u64 
    push           8          i64 
    callproc       &pc_libmcl.genmc 
#6317: 
#6320: 
    forup          #6315      i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.nlocals 
#6314: 
    push           pc_genmcl.px_procentry.hasequiv i64 
    jumpfalse      #6321      i64 
#6322: 
    push           1          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.nlocals i64 
    push           1          i64 
    jumplt         #6323      i64 
#6324: 
    push           &pci_mcl.localdefs 
    push           pc_genmcl.px_procentry.i i64 
    pushptroff                u64 8 -8
    pop            pc_genmcl.px_procentry.d u64 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           6          i64 
    dotindex                  i64 
    jumpfalse      #6325      u64 
    setargs                   2 0
    push           ""         u64 
    push           "D.ATVAR NOT READY" u64 
    callproc       &pc_libmcl.merror 
#6325: 
#6326: 
    forup          #6324      i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.nlocals 
#6323: 
#6321: 
    push           &pci_mcl.frameoffset 
    push           pci_mcl.ndsaveregs i64 
    push           8          i64 
    mul                       i64 
    subto                     i64 
    push           pci_mcl.frameoffset i64 
    pop            pci_mcl.dsaveoffset i64 
    push           &pci_mcl.frameoffset 
    push           pci_mcl.nxsaveregs i64 
    push           8          i64 
    mul                       i64 
    subto                     i64 
    push           pci_mcl.frameoffset i64 
    pop            pci_mcl.xsaveoffset i64 
    push           pci_mcl.frameoffset i64 
    neg                       i64 
    pop            pci_mcl.framebytes i64 
    push           pci_mcl.nlocals i64 
    jumptrue       #6327      i64 
    push           pci_mcl.nparams i64 
    jumpfalse      #6328      i64 
#6327: 
    push           pci_mcl.procdef u64 
    push           46         
    pushptroff                u16 1 0
    push           7          i64 
    dotindex                  i64 
    jumpfalse      #6328      u64 
    setargs                   2 0
    push           ""         u64 
    push           "params/locals in threaded?" u64 
    callproc       &pc_libmcl.merror 
#6328: 
    push           pci_mcl.framebytes i64 
    jumpfalse      #6329      i64 
    push           1          i64 
    pop            pci_mcl.needstackframe i64 
#6329: 
    jump           #6330      
#6331: 
    push           &pci_mcl.framebytes 
    incr                      i64 1
#6330: 
    push           pci_mcl.framebytes i64 
    push           15         i64 
    iand                      i64 
    jumptrue       #6331      i64 
#6332: 
    push           pci_mcl.needstackframe i64 
    jumpfalse      #6333      i64 
    push           pci_mcl.ndsavepush i64 
    push           0          i64 
    dotindex                  i64 
    jumpfalse      #6333      u64 
    push           &pci_mcl.framebytes 
    push           8          i64 
    addto                     i64 
#6333: 
    push           pci_mcl.needstackframe i64 
    jumpfalse      #6334      i64 
    push           pci_mcl.inf_leafproc i64 
    jumptrue       #6334      i64 
    push           &pci_mcl.framebytes 
    push           32         i64 
    addto                     i64 
#6334: 
    push           pci_mcl.needstackframe i64 
    jumpfalse      #6335      i64 
    push           pci_mcl.ndsavepush i64 
    jumpfalse      #6335      i64 
    push           1          i64 
    pop            pci_mcl.needshadow48 i64 
#6335: 
    push           pci_mcl.needstackframe i64 
    jumptrue       #6336      i64 
    push           pci_mcl.inf_leafproc i64 
    jumptrue       #6336      i64 
    push           pci_mcl.procdef u64 
    push           46         
    pushptroff                u16 1 0
    push           7          i64 
    dotindex                  i64 
    jumptrue       #6336      u64 
    startmult                 
    push           pci_mcl.ndsavepush i64 
    push           0          i64 
    dotindex                  i64 
    jumpfalse      #6337      u64 
    push           32         i64 
    resetmult                 
    jump           #6338      
#6337: 
    push           40         i64 
    endmult                   
#6338: 
    pop            pci_mcl.needshadow32 i64 
#6336: 
#6339: 
    push           1          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.ndsavepush i64 
    push           1          i64 
    jumplt         #6340      i64 
#6341: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           &pci_mcl.dsaveregs 
    push           pc_genmcl.px_procentry.i i64 
    pushptroff                i64 8 -8
    callfn         &pc_libmcl.mgenreg u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
#6342: 
    forup          #6341      i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.ndsavepush 
#6340: 
    push           pci_mcl.needshadow48 i64 
    jumpfalse      #6343      i64 
    setargs                   1 0
    push           48         i64 
    callproc       &pc_stackmcl.pushstack 
#6343: 
    push           pci_mcl.needstackframe i64 
    jumpfalse      #6344      i64 
    setargs                   3 0
    push           0          u64 
    push           pci_mcl.dframeopnd u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pci_mcl.dstackopnd u64 
    push           pci_mcl.dframeopnd u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           pci_mcl.framebytes i64 
    jumpfalse      #6345      i64 
    setargs                   1 0
    push           pci_mcl.framebytes i64 
    callproc       &pc_stackmcl.pushstack 
#6345: 
    jump           #6346      
#6344: 
    push           pci_mcl.needshadow32 i64 
    jumpfalse      #6347      i64 
    setargs                   1 0
    push           pci_mcl.needshadow32 i64 
    callproc       &pc_stackmcl.pushstack 
#6347: 
#6346: 
    push           pci_mcl.dsaveoffset i64 
    pop            pc_genmcl.px_procentry.offset i64 
#6348: 
    push           1          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.ndsaveregs i64 
    push           1          i64 
    jumplt         #6349      i64 
#6350: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           &pci_mcl.dsaveregs 
    push           pc_genmcl.px_procentry.i i64 
    pushptroff                i64 8 -8
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           8          i64 
    push           pc_genmcl.px_procentry.offset i64 
    push           1          i64 
    push           0          i64 
    push           15         i64 
    callfn         &pc_libmcl.mgenindex u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_genmcl.px_procentry.offset 
    push           8          i64 
    addto                     i64 
#6351: 
    forup          #6350      i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.ndsaveregs 
#6349: 
    push           pci_mcl.xsaveoffset i64 
    pop            pc_genmcl.px_procentry.offset i64 
#6352: 
    push           1          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.nxsaveregs i64 
    push           1          i64 
    jumplt         #6353      i64 
#6354: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           &pci_mcl.xsaveregs 
    push           pc_genmcl.px_procentry.i i64 
    pushptroff                i64 8 -8
    callfn         &pc_libmcl.mgenxreg u64 
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           8          i64 
    push           pc_genmcl.px_procentry.offset i64 
    push           1          i64 
    push           0          i64 
    push           15         i64 
    callfn         &pc_libmcl.mgenindex u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_genmcl.px_procentry.offset 
    push           8          i64 
    addto                     i64 
#6355: 
    forup          #6354      i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.nxsaveregs 
#6353: 
    push           16         i64 
    pop            pc_genmcl.px_procentry.offset i64 
    push           0          i64 
    pop            pc_genmcl.px_procentry.regoffset i64 
#6356: 
    push           1          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.nparams i64 
    push           1          i64 
    jumplt         #6357      i64 
#6358: 
    push           pc_genmcl.px_procentry.regoffset i64 
    push           3          i64 
    jumple         #6359      i64 
    jump           #6357      
#6359: 
    push           &pci_mcl.paramdefs 
    push           pc_genmcl.px_procentry.i i64 
    pushptroff                u64 8 -8
    pop            pc_genmcl.px_procentry.d u64 
    push           pc_genmcl.px_procentry.d u64 
    push           50         
    pushptroff                u8 1 0
    jumptrue       #6360      i64 
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           8          i64 
    push           pc_genmcl.px_procentry.offset i64 
    push           1          i64 
    push           0          i64 
    push           15         i64 
    callfn         &pc_libmcl.mgenindex u64 
    pop            pc_genmcl.px_procentry.ax u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_procentry.d u64 
    push           16         
    pushptroff                u64 1 0
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           3          i64 
    casejumpeq     #6361      i64 0
    push           2          i64 
    casejumpeq     #6362      i64 0
    popstack                  i64 
    jump           #6363      
#6361: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    push           pc_genmcl.px_procentry.regoffset i64 
    add                       i64 
    callfn         &pc_libmcl.mgenxreg u64 
    push           pc_genmcl.px_procentry.ax u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6364      
#6362: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    push           pc_genmcl.px_procentry.regoffset i64 
    add                       i64 
    callfn         &pc_libmcl.mgenxreg u64 
    setargs                   2 0
    push           4          i64 
    push           pc_genmcl.px_procentry.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6364      
#6363: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_procentry.regoffset i64 
    push           11         i64 
    add                       i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           pc_genmcl.px_procentry.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
#6364: 
    jump           #6365      
#6360: 
    push           pc_genmcl.px_procentry.d u64 
    push           50         
    pushptroff                u8 1 0
    jumpfalse      #6366      i64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_procentry.d u64 
    push           16         
    pushptroff                u64 1 0
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           3          i64 
    casejumpeq     #6367      i64 0
    push           1          i64 
    casejumpeq     #6368      i64 0
    popstack                  i64 
    jump           #6369      
#6367: 
    push           pc_genmcl.px_procentry.d u64 
    push           50         
    pushptroff                u8 1 0
    push           1          i64 
    push           pc_genmcl.px_procentry.regoffset i64 
    add                       i64 
    jumpeq         #6370      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    push           pc_genmcl.px_procentry.regoffset i64 
    add                       i64 
    callfn         &pc_libmcl.mgenxreg u64 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_procentry.d u64 
    push           50         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenxreg u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
#6370: 
    jump           #6371      
#6368: 
    push           pc_genmcl.px_procentry.d u64 
    push           50         
    pushptroff                u8 1 0
    push           11         i64 
    push           pc_genmcl.px_procentry.regoffset i64 
    add                       i64 
    jumpeq         #6372      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_procentry.regoffset i64 
    push           11         i64 
    add                       i64 
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_procentry.d u64 
    push           50         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
#6372: 
    jump           #6371      
#6369: 
#6371: 
#6366: 
#6365: 
    push           &pc_genmcl.px_procentry.offset 
    push           8          i64 
    addto                     i64 
    push           &pc_genmcl.px_procentry.regoffset 
    incr                      i64 1
#6373: 
    forup          #6358      i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.nparams 
#6357: 
#6374: 
    retproc                   
End


Proc pc_genmcl.px_endproc:
    param          pc_genmcl.px_endproc.p u64 
    procentry                 
    setargs                   3 0
    push           0          u64 
    push           0          u64 
    push           2          i64 
    callproc       &pc_libmcl.genmc 
    push           pci_mcl.passno i64 
    push           1          i64 
    jumpne         #6376      i64 
    setargs                   0 0
    callproc       &pc_stackmcl.resetopnds1 
    push           pci_mcl.inf_assem i64 
    jumpfalse      #6377      i64 
    push           0          i64 
    pop            pci_mcl.inf_assem i64 
    setargs                   0 0
    callproc       &pc_stackmcl.resetopnds2 
    jump           #6378      
#6377: 
    push           pc_decls.optimflag i64 
    jumpfalse      #6379      i64 
    push           pci_mcl.inf_assem i64 
    jumptrue       #6379      i64 
    push           2          i64 
    pop            pci_mcl.passno i64 
    push           pci_mcl.procdefpcl u64 
    push           1          i64 
    subrefoff                 u64 32 0
    pop            pc_genmcl.currpcl u64 
    push           pc_genmcl.procdefmcl u64 
    pop            pci_mcl.mccodex u64 
    push           0          u64 
    push           pci_mcl.mccodex u64 
    push           0          
    popptroff                 u64 1 0
#6379: 
#6378: 
    jump           #6380      
#6376: 
    setargs                   1 0
    push           pc_genmcl.procdefmcl u64 
    callproc       &pc_optim.peephole 
    setargs                   0 0
    callproc       &pc_stackmcl.resetopnds2 
    push           1          i64 
    pop            pci_mcl.passno i64 
#6380: 
#6381: 
    retproc                   
End


Proc pc_genmcl.px_endprogram:
    param          pc_genmcl.px_endprogram.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_endprogram.p u64 
    callproc       &pc_genmcl.unimpl 
#6383: 
    retproc                   
End


Proc pc_genmcl.px_extproc:
    param          pc_genmcl.px_extproc.p u64 
    procentry                 
#6385: 
    retproc                   
End


Proc pc_genmcl.px_extparam:
    param          pc_genmcl.px_extparam.p u64 
    procentry                 
#6387: 
    retproc                   
End


Proc pc_genmcl.px_extvariadics:
    param          pc_genmcl.px_extvariadics.p u64 
    procentry                 
#6389: 
    retproc                   
End


Proc pc_genmcl.px_endextproc:
    param          pc_genmcl.px_endextproc.p u64 
    procentry                 
#6391: 
    retproc                   
End


Proc pc_genmcl.px_local:
    param          pc_genmcl.px_local.p u64 
    procentry                 
    push           pci_mcl.nlocals i64 
    push           256        i64 
    jumplt         #6393      i64 
    setargs                   2 0
    push           ""         u64 
    push           "Too many locals" u64 
    callproc       &pc_libmcl.merror 
#6393: 
    push           &pci_mcl.nlocals 
    incr                      i64 1
    push           &pc_tables.pcat 
    push           pc_genmcl.px_local.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6394      i64 0
    push           3          i64 
    casejumpeq     #6395      i64 0
    popstack                  i64 
    jump           #6396      
#6394: 
    push           &pci_mcl.inf_proclocals 
    incr                      i64 1
    jump           #6397      
#6395: 
    push           &pci_mcl.inf_procxlocals 
    incr                      i64 1
    jump           #6397      
#6396: 
#6397: 
    push           pc_genmcl.px_local.p u64 
    push           8          
    pushptroff                u64 1 0
    push           &pci_mcl.localdefs 
    push           pci_mcl.nlocals i64 
    popptroff                 u64 8 -8
#6398: 
    retproc                   
End


Proc pc_genmcl.px_param:
    param          pc_genmcl.px_param.p u64 
    procentry                 
    push           pci_mcl.nparams i64 
    push           32         i64 
    jumplt         #6400      i64 
    setargs                   2 0
    push           ""         u64 
    push           "Too many params" u64 
    callproc       &pc_libmcl.merror 
#6400: 
    push           &pci_mcl.nparams 
    incr                      i64 1
    push           pc_genmcl.px_param.p u64 
    push           8          
    pushptroff                u64 1 0
    push           &pci_mcl.paramdefs 
    push           pci_mcl.nparams i64 
    popptroff                 u64 8 -8
    push           &pc_tables.pcat 
    push           pc_genmcl.px_param.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #6401      i64 
    push           &pci_mcl.nparams 
    incr                      i64 1
    push           pc_genmcl.px_param.p u64 
    push           8          
    pushptroff                u64 1 0
    push           &pci_mcl.paramdefs 
    push           pci_mcl.nparams i64 
    popptroff                 u64 8 -8
#6401: 
#6402: 
    retproc                   
End


Proc pc_genmcl.px_label:
    param          pc_genmcl.px_label.p u64 
    procentry                 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_label.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
#6404: 
    retproc                   
End


Proc pc_genmcl.px_labelname:
    param          pc_genmcl.px_labelname.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_labelname.p u64 
    callproc       &pc_genmcl.unimpl 
#6406: 
    retproc                   
End


Proc pc_genmcl.px_push:
    param          pc_genmcl.px_push.p u64 
    procentry                 
    push           pc_genmcl.px_push.p u64 
    pushptr                   u8 
    push           1          i64 
    casejumpeq     #6408      i64 0
    push           2          i64 
    casejumpeq     #6409      i64 0
    push           4          i64 
    casejumpeq     #6410      i64 0
    push           5          i64 
    casejumpeq     #6411      i64 0
    push           7          i64 
    casejumpeq     #6412      i64 0
    push           8          i64 
    casejumpeq     #6413      i64 0
    push           6          i64 
    casejumpeq     #6414      i64 0
    popstack                  i64 
    jump           #6415      
#6408: 
    setargs                   1 0
    push           pc_genmcl.px_push.p u64 
    callproc       &pc_stackmcl.addmem 
    jump           #6416      
#6409: 
    setargs                   1 0
    push           pc_genmcl.px_push.p u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &pc_stackmcl.addmemaddr 
    jump           #6416      
#6410: 
    setargs                   1 0
    push           pc_genmcl.px_push.p u64 
    push           8          
    pushptroff                i64 1 0
    callproc       &pc_stackmcl.addint 
    jump           #6416      
#6411: 
    setargs                   1 0
    push           pc_genmcl.px_push.p u64 
    push           8          
    pushptroff                r64 1 0
    callproc       &pc_stackmcl.addreal 
    jump           #6416      
#6412: 
    setargs                   1 0
    push           pc_genmcl.px_push.p u64 
    push           8          
    pushptroff                r32 1 0
    fwiden                    r64 r32 
    callproc       &pc_stackmcl.addreal32 
    jump           #6416      
#6413: 
    setargs                   1 0
    push           pc_genmcl.px_push.p u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &pc_stackmcl.addstring 
    jump           #6416      
#6414: 
    setargs                   1 0
    push           pc_genmcl.px_push.p u64 
    push           8          
    addrefoff                 u64 1 0
    callproc       &pc_stackmcl.addint128 
    jump           #6416      
#6415: 
    setargs                   2 0
    push           &pc_tables.opndnames 
    push           pc_genmcl.px_push.p u64 
    pushptr                   u8 
    pushptroff                u64 8 0
    push           "push"     u64 
    callproc       &pc_libmcl.merror 
#6416: 
#6417: 
    retproc                   
End


Proc pc_genmcl.px_pop:
    param          pc_genmcl.px_pop.p u64 
    local          pc_genmcl.px_pop.ax u64 
    local          pc_genmcl.px_pop.bx u64 
    local          pc_genmcl.px_pop.i i64 
    procentry                 
    push           pc_genmcl.px_pop.p u64 
    pushptr                   u8 
    push           1          i64 
    casejumpeq     #6419      i64 0
    popstack                  i64 
    jump           #6420      
#6419: 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_pop.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6421      i64 0
    push           3          i64 
    casejumpeq     #6422      i64 0
    push           2          i64 
    casejumpeq     #6423      i64 0
    push           5          i64 
    casejumpeq     #6424      i64 0
    push           4          i64 
    casejumpeq     #6425      i64 0
    push           6          i64 
    casejumpeq     #6426      i64 0
    popstack                  i64 
    jump           #6427      
#6421: 
#6428: 
    push           1          i64 
    pop            pc_genmcl.px_pop.i i64 
    push           pci_mcl.noperands i64 
    push           1          i64 
    jumplt         #6429      i64 
#6430: 
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.px_pop.i i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           3          i64 
    casejumpeq     #6431      i64 0
    push           5          i64 
    casejumpeq     #6432      i64 0
    popstack                  i64 
    jump           #6433      
#6431: 
    jump           #6429      
    jump           #6434      
#6432: 
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.px_pop.i i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    push           pc_genmcl.px_pop.p u64 
    push           8          
    pushptroff                u64 1 0
    jumpne         #6435      u64 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_pop.i i64 
    callproc       &pc_stackmcl.genopnd_ld 
#6435: 
    jump           #6434      
#6433: 
#6434: 
#6436: 
    forup          #6430      i64 1
    opnd           pc_genmcl.px_pop.i 
    opnd           pci_mcl.noperands 
#6429: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    setargs                   1 0
    push           pc_genmcl.px_pop.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6437      
#6422: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    setargs                   1 0
    push           pc_genmcl.px_pop.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6437      
#6423: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    setargs                   1 0
    push           pc_genmcl.px_pop.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6437      
#6424: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    setargs                   1 0
    push           pc_genmcl.px_pop.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_genmcl.px_pop.p u64 
    push           1          
    pushptroff                u8 1 0
    push           24         i64 
    jumpeq         #6438      i64 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6438: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    setargs                   1 0
    push           pc_genmcl.px_pop.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmemhigh u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_genmcl.px_pop.p u64 
    push           1          
    pushptroff                u8 1 0
    push           24         i64 
    jumpeq         #6439      i64 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6439: 
    jump           #6440      
    jump           #6437      
#6425: 
    setargs                   3 0
    setargs                   2 0
    push           pc_genmcl.px_pop.p u64 
    push           4          
    pushptroff                i32 1 0
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    setargs                   1 0
    push           pc_genmcl.px_pop.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6437      
#6426: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.px_pop.bx u64 
    setargs                   1 0
    push           pc_genmcl.px_pop.p u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &pc_stackmcl.addmemaddr 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.px_pop.ax u64 
    setargs                   3 0
    push           pc_genmcl.px_pop.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_genmcl.px_pop.bx u64 
    push           pc_genmcl.px_pop.ax u64 
    callproc       &pc_libmcl.copyblock 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #6437      
#6427: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "POPMEM"   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_genmcl.px_pop.p u64 
    push           3          
    pushptroff                u8 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#6437: 
    jump           #6441      
#6420: 
    setargs                   2 0
    push           pc_genmcl.px_pop.p u64 
    pushptr                   u8 
    push           "POP"      u64 
    callproc       &pc_libmcl.merroropnd 
#6441: 
    push           pc_genmcl.px_pop.p u64 
    push           1          
    pushptroff                u8 1 0
    push           24         i64 
    jumpeq         #6442      i64 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6442: 
#6440: 
    retproc                   
End


Proc pc_genmcl.px_store:
    param          pc_genmcl.px_store.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_store.p u64 
    callproc       &pc_genmcl.px_pop 
#6444: 
    retproc                   
End


Proc pc_genmcl.px_pushnc:
    param          pc_genmcl.px_pushnc.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_pushnc.p u64 
    callproc       &pc_genmcl.unimpl 
#6446: 
    retproc                   
End


Proc pc_genmcl.px_opnd:
    param          pc_genmcl.px_opnd.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_opnd.p u64 
    callproc       &pc_genmcl.unimpl 
#6448: 
    retproc                   
End


Proc pc_genmcl.px_type:
    param          pc_genmcl.px_type.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_type.p u64 
    callproc       &pc_genmcl.unimpl 
#6450: 
    retproc                   
End


Proc pc_genmcl.px_pushptroff:
    param          pc_genmcl.px_pushptroff.p u64 
    local          pc_genmcl.px_pushptroff.ax u64 
    local          pc_genmcl.px_pushptroff.bx u64 
    local          pc_genmcl.px_pushptroff.cx u64 
    local          pc_genmcl.px_pushptroff.fx u64 
    local          pc_genmcl.px_pushptroff.m i64 
    procentry                 
    push           pc_genmcl.px_pushptroff.p u64 
    push           3          
    pushptroff                u8 1 0
    pop            pc_genmcl.px_pushptroff.m i64 
    setargs                   1 0
    push           pc_genmcl.px_pushptroff.p u64 
    callfn         &pc_genmcl.do_addrmode u64 
    pop            pc_genmcl.px_pushptroff.cx u64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #6452      i64 
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           1          
    popptroff                 u8 1 0
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
#6452: 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_pushptroff.ax u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_pushptroff.m i64 
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6453      i64 0
    push           3          i64 
    casejumpeq     #6454      i64 0
    push           2          i64 
    casejumpeq     #6455      i64 0
    push           4          i64 
    casejumpeq     #6456      i64 0
    push           5          i64 
    casejumpeq     #6457      i64 0
    push           6          i64 
    casejumpeq     #6458      i64 0
    popstack                  i64 
    jump           #6459      
#6453: 
    setargs                   3 0
    push           pc_genmcl.px_pushptroff.cx u64 
    push           pc_genmcl.px_pushptroff.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6460      
#6454: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_x64 
    setargs                   2 0
    push           3          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_pushptroff.fx u64 
    setargs                   3 0
    push           pc_genmcl.px_pushptroff.cx u64 
    push           pc_genmcl.px_pushptroff.fx u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #6460      
#6455: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_x32 
    setargs                   2 0
    push           3          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_pushptroff.fx u64 
    setargs                   3 0
    setargs                   2 0
    push           4          i64 
    push           pc_genmcl.px_pushptroff.cx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           pc_genmcl.px_pushptroff.fx u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #6460      
#6456: 
    push           pc_genmcl.px_pushptroff.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_genmcl.px_pushptroff.cx u64 
    push           8          
    popptroff                 u8 1 0
    setargs                   3 0
    push           pc_genmcl.px_pushptroff.cx u64 
    push           pc_genmcl.px_pushptroff.ax u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_genmcl.px_pushptroff.m i64 
    pushptroff                u8 1 0
    jumpfalse      #6461      i64 
    push           19         i64 
    resetmult                 
    jump           #6462      
#6461: 
    push           20         i64 
    endmult                   
#6462: 
    callproc       &pc_libmcl.genmc 
    jump           #6460      
#6457: 
    setargs                   0 0
    callfn         &pc_stackmcl.genopnd_d64 u64 
    pop            pc_genmcl.px_pushptroff.bx u64 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   2 0
    push           3          i64 
    push           2          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   3 0
    setargs                   3 0
    push           8          i64 
    push           8          i64 
    push           pc_genmcl.px_pushptroff.cx u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           pc_genmcl.px_pushptroff.bx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_pushptroff.cx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           pc_genmcl.px_pushptroff.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.setwideopnd 
    jump           #6463      
    jump           #6460      
#6458: 
    setargs                   3 0
    push           pc_genmcl.px_pushptroff.cx u64 
    push           pc_genmcl.px_pushptroff.ax u64 
    push           15         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6460      
#6459: 
    setargs                   2 0
    push           pc_genmcl.px_pushptroff.m i64 
    push           "pushptroff" u64 
    callproc       &pc_libmcl.merrort 
#6460: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6463: 
    retproc                   
End


Proc pc_genmcl.px_popptroff:
    param          pc_genmcl.px_popptroff.p u64 
    local          pc_genmcl.px_popptroff.ax u64 
    local          pc_genmcl.px_popptroff.bx u64 
    local          pc_genmcl.px_popptroff.cx u64 
    local          pc_genmcl.px_popptroff.px u64 
    local          pc_genmcl.px_popptroff.m i64 
    procentry                 
    push           pc_genmcl.px_popptroff.p u64 
    push           3          
    pushptroff                u8 1 0
    pop            pc_genmcl.px_popptroff.m i64 
    setargs                   1 0
    push           pc_genmcl.px_popptroff.p u64 
    callfn         &pc_genmcl.do_addrmode u64 
    pop            pc_genmcl.px_popptroff.px u64 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_popptroff.cx u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_popptroff.m i64 
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6465      i64 0
    push           3          i64 
    casejumpeq     #6466      i64 0
    push           2          i64 
    casejumpeq     #6467      i64 0
    push           4          i64 
    casejumpeq     #6468      i64 0
    push           5          i64 
    casejumpeq     #6469      i64 0
    push           6          i64 
    casejumpeq     #6470      i64 0
    popstack                  i64 
    jump           #6471      
#6465: 
    setargs                   3 0
    push           pc_genmcl.px_popptroff.cx u64 
    push           pc_genmcl.px_popptroff.px u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6472      
#6466: 
    setargs                   3 0
    push           pc_genmcl.px_popptroff.cx u64 
    push           pc_genmcl.px_popptroff.px u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6472      
#6467: 
    setargs                   3 0
    push           pc_genmcl.px_popptroff.cx u64 
    setargs                   2 0
    push           4          i64 
    push           pc_genmcl.px_popptroff.px u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6472      
#6468: 
    push           pc_genmcl.px_popptroff.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_genmcl.px_popptroff.px u64 
    push           8          
    popptroff                 u8 1 0
    setargs                   3 0
    setargs                   2 0
    push           pc_genmcl.px_popptroff.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_genmcl.px_popptroff.cx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           pc_genmcl.px_popptroff.px u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6472      
#6469: 
    setargs                   3 0
    push           pc_genmcl.px_popptroff.cx u64 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_popptroff.px u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           4          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    setargs                   3 0
    push           8          i64 
    push           8          i64 
    push           pc_genmcl.px_popptroff.px u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6472      
#6470: 
    setargs                   3 0
    push           pc_genmcl.px_popptroff.p u64 
    push           4          
    pushptroff                i32 1 0
    setargs                   2 0
    push           0          i64 
    push           pc_genmcl.px_popptroff.cx u64 
    callfn         &pc_libmcl.makeopndind u64 
    push           pc_genmcl.px_popptroff.px u64 
    callproc       &pc_libmcl.copyblock 
    jump           #6472      
#6471: 
    setargs                   2 0
    push           pc_genmcl.px_popptroff.m i64 
    push           "popptroff " u64 
    callproc       &pc_libmcl.merrort 
#6472: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    push           pc_genmcl.px_popptroff.p u64 
    push           1          
    pushptroff                u8 1 0
    push           32         i64 
    jumpne         #6473      i64 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_popptroff.m i64 
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #6474      i64 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6474: 
#6473: 
#6475: 
    retproc                   
End


Proc pc_genmcl.px_storeptroff:
    param          pc_genmcl.px_storeptroff.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_storeptroff.p u64 
    callproc       &pc_genmcl.px_popptroff 
#6477: 
    retproc                   
End


Proc pc_genmcl.px_pushptr:
    param          pc_genmcl.px_pushptr.p u64 
    local          pc_genmcl.px_pushptr.ax u64 
    local          pc_genmcl.px_pushptr.px u64 
    local          pc_genmcl.px_pushptr.cx u64 
    local          pc_genmcl.px_pushptr.fx u64 
    local          pc_genmcl.px_pushptr.bx u64 
    local          pc_genmcl.px_pushptr.m i64 
    procentry                 
    push           pc_genmcl.px_pushptr.p u64 
    push           3          
    pushptroff                u8 1 0
    pop            pc_genmcl.px_pushptr.m i64 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.isregvaropnd i64 
    jumpfalse      #6479      i64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_pushptr.m i64 
    pushptroff                u8 1 0
    push           6          i64 
    jumpeq         #6479      i64 
    setargs                   3 0
    push           0          i64 
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenireg u64 
    pop            pc_genmcl.px_pushptr.cx u64 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_genmcl.makeregopnd u64 
    pop            pc_genmcl.px_pushptr.ax u64 
    jump           #6480      
#6479: 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           11         i64 
    jumpne         #6481      i64 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    pop            pc_genmcl.px_pushptr.cx u64 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_genmcl.makeregopnd u64 
    pop            pc_genmcl.px_pushptr.ax u64 
    jump           #6480      
#6481: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_pushptr.ax u64 
    setargs                   2 0
    push           0          i64 
    push           pc_genmcl.px_pushptr.ax u64 
    callfn         &pc_libmcl.makeopndind u64 
    pop            pc_genmcl.px_pushptr.cx u64 
#6480: 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_pushptr.m i64 
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6482      i64 0
    push           4          i64 
    casejumpeq     #6483      i64 0
    push           3          i64 
    casejumpeq     #6484      i64 0
    push           2          i64 
    casejumpeq     #6485      i64 0
    push           5          i64 
    casejumpeq     #6486      i64 0
    push           6          i64 
    casejumpeq     #6487      i64 0
    popstack                  i64 
    jump           #6488      
#6482: 
    setargs                   3 0
    push           pc_genmcl.px_pushptr.cx u64 
    push           pc_genmcl.px_pushptr.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6489      
#6483: 
    setargs                   3 0
    setargs                   2 0
    push           pc_genmcl.px_pushptr.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_genmcl.px_pushptr.cx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           pc_genmcl.px_pushptr.ax u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_genmcl.px_pushptr.m i64 
    pushptroff                u8 1 0
    jumpfalse      #6490      i64 
    push           19         i64 
    resetmult                 
    jump           #6491      
#6490: 
    push           20         i64 
    endmult                   
#6491: 
    callproc       &pc_libmcl.genmc 
    jump           #6489      
#6484: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_x64 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_pushptr.fx u64 
    setargs                   3 0
    push           pc_genmcl.px_pushptr.cx u64 
    push           pc_genmcl.px_pushptr.fx u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #6489      
#6485: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_x32 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_pushptr.fx u64 
    setargs                   3 0
    setargs                   2 0
    push           4          i64 
    push           pc_genmcl.px_pushptr.cx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           pc_genmcl.px_pushptr.fx u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #6489      
#6486: 
    setargs                   0 0
    callfn         &pc_stackmcl.genopnd_d64 u64 
    pop            pc_genmcl.px_pushptr.bx u64 
    setargs                   3 0
    push           pc_genmcl.px_pushptr.cx u64 
    push           pc_genmcl.px_pushptr.bx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   3 0
    push           0          i64 
    push           8          i64 
    push           pc_genmcl.px_pushptr.cx u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           pc_genmcl.px_pushptr.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.setwideopnd 
    jump           #6489      
#6487: 
    jump           #6489      
#6488: 
    setargs                   1 0
    push           "****PUSHPTR" u64 
    callproc       &pc_libmcl.mgencomment 
#6489: 
#6492: 
    retproc                   
End


Proc pc_genmcl.px_popptr:
    param          pc_genmcl.px_popptr.p u64 
    local          pc_genmcl.px_popptr.ax u64 
    local          pc_genmcl.px_popptr.bx u64 
    local          pc_genmcl.px_popptr.cx u64 
    local          pc_genmcl.px_popptr.px u64 
    local          pc_genmcl.px_popptr.m i64 
    procentry                 
    push           pc_genmcl.px_popptr.p u64 
    push           3          
    pushptroff                u8 1 0
    pop            pc_genmcl.px_popptr.m i64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_popptr.bx u64 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.isregvaropnd i64 
    jumpfalse      #6494      i64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_popptr.m i64 
    pushptroff                u8 1 0
    push           6          i64 
    jumpeq         #6494      i64 
    setargs                   3 0
    push           0          i64 
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenireg u64 
    pop            pc_genmcl.px_popptr.ax u64 
    jump           #6495      
#6494: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.px_popptr.ax u64 
#6495: 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_popptr.m i64 
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6496      i64 0
    push           4          i64 
    casejumpeq     #6497      i64 0
    push           3          i64 
    casejumpeq     #6498      i64 0
    push           2          i64 
    casejumpeq     #6499      i64 0
    push           5          i64 
    casejumpeq     #6500      i64 0
    push           6          i64 
    casejumpeq     #6501      i64 0
    popstack                  i64 
    jump           #6502      
#6496: 
    setargs                   3 0
    push           pc_genmcl.px_popptr.bx u64 
    push           pc_genmcl.px_popptr.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6503      
#6497: 
    setargs                   3 0
    setargs                   2 0
    push           &pc_tables.psize 
    push           pc_genmcl.px_popptr.m i64 
    pushptroff                u8 1 0
    push           pc_genmcl.px_popptr.bx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    setargs                   2 0
    push           &pc_tables.psize 
    push           pc_genmcl.px_popptr.m i64 
    pushptroff                u8 1 0
    push           pc_genmcl.px_popptr.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6503      
#6498: 
    setargs                   3 0
    push           pc_genmcl.px_popptr.bx u64 
    push           pc_genmcl.px_popptr.ax u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6503      
#6499: 
    setargs                   3 0
    push           pc_genmcl.px_popptr.bx u64 
    setargs                   2 0
    push           4          i64 
    push           pc_genmcl.px_popptr.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6503      
#6500: 
    setargs                   3 0
    push           pc_genmcl.px_popptr.bx u64 
    push           pc_genmcl.px_popptr.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    setargs                   3 0
    push           0          i64 
    push           8          i64 
    push           pc_genmcl.px_popptr.ax u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6503      
#6501: 
    setargs                   3 0
    push           pc_genmcl.px_popptr.p u64 
    push           4          
    pushptroff                i32 1 0
    setargs                   2 0
    push           0          i64 
    push           pc_genmcl.px_popptr.bx u64 
    callfn         &pc_libmcl.makeopndind u64 
    push           pc_genmcl.px_popptr.ax u64 
    callproc       &pc_libmcl.copyblock 
    jump           #6503      
#6502: 
    setargs                   2 0
    push           pc_genmcl.px_popptr.m i64 
    push           "popptr "  u64 
    callproc       &pc_libmcl.merrort 
#6503: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    push           pc_genmcl.px_popptr.p u64 
    push           1          
    pushptroff                u8 1 0
    push           35         i64 
    jumpne         #6504      i64 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_popptr.m i64 
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #6505      i64 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6505: 
#6504: 
#6506: 
    retproc                   
End


Proc pc_genmcl.px_storeptr:
    param          pc_genmcl.px_storeptr.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_storeptr.p u64 
    callproc       &pc_genmcl.px_popptr 
#6508: 
    retproc                   
End


Proc pc_genmcl.px_dotindex:
    param          pc_genmcl.px_dotindex.p u64 
    local          pc_genmcl.px_dotindex.ax u64 
    local          pc_genmcl.px_dotindex.i i64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpeq         #6510      i64 
    setargs                   2 0
    push           ""         u64 
    push           "dotix i not imm" u64 
    callproc       &pc_libmcl.merror 
#6510: 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_dotindex.ax u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    pop            pc_genmcl.px_dotindex.i i64 
    push           pc_genmcl.px_dotindex.i i64 
    jumpfalse      #6511      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_dotindex.i i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_dotindex.ax u64 
    push           46         i64 
    callproc       &pc_libmcl.genmc 
#6511: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_libmcl.mgenint u64 
    setargs                   2 0
    push           4          i64 
    push           pc_genmcl.px_dotindex.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           39         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6512: 
    retproc                   
End


Proc pc_genmcl.px_popdotindex:
    param          pc_genmcl.px_popdotindex.p u64 
    local          pc_genmcl.px_popdotindex.ax u64 
    local          pc_genmcl.px_popdotindex.bx u64 
    local          pc_genmcl.px_popdotindex.cx u64 
    local          pc_genmcl.px_popdotindex.rx u64 
    local          pc_genmcl.px_popdotindex.mx u64 
    local          pc_genmcl.px_popdotindex.i i64 
    local          pc_genmcl.px_popdotindex.size i64 
    local          pc_genmcl.px_popdotindex.cxfmt i64 
    local          pc_genmcl.px_popdotindex.rhs i64 
    local          pc_genmcl.px_popdotindex.axoffset i64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           3          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #6514      i64 
    push           pci_mcl.pclstack u64 
    push           3          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    pop            pc_genmcl.px_popdotindex.rhs i64 
    push           0          u64 
    pop            pc_genmcl.px_popdotindex.cx u64 
    jump           #6515      
#6514: 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_popdotindex.cx u64 
#6515: 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpeq         #6516      i64 
    setargs                   2 0
    push           ""         u64 
    push           "popdotix i not imm" u64 
    callproc       &pc_libmcl.merror 
#6516: 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    pop            pc_genmcl.px_popdotindex.i i64 
    push           pc_genmcl.px_popdotindex.p u64 
    push           4          
    pushptroff                i32 1 0
    pop            pc_genmcl.px_popdotindex.size i64 
    push           2          i64 
    pop            pc_genmcl.px_popdotindex.axoffset i64 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_d64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_popdotindex.rx u64 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_d64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_popdotindex.mx u64 
    setargs                   2 0
    push           pc_genmcl.px_popdotindex.size i64 
    push           pc_genmcl.px_popdotindex.axoffset i64 
    push           2          i64 
    add                       i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.px_popdotindex.ax u64 
    setargs                   3 0
    push           pc_genmcl.px_popdotindex.ax u64 
    push           pc_genmcl.px_popdotindex.rx u64 
    startmult                 
    push           pc_genmcl.px_popdotindex.size i64 
    push           8          i64 
    jumpne         #6517      i64 
    push           12         i64 
    resetmult                 
    jump           #6518      
#6517: 
    push           20         i64 
    endmult                   
#6518: 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    push           pc_genmcl.px_popdotindex.i i64 
    shl                       i64 
    inot                      i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_popdotindex.mx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.px_popdotindex.mx u64 
    push           pc_genmcl.px_popdotindex.rx u64 
    push           39         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_genmcl.px_popdotindex.cx u64 
    jumpfalse      #6519      u64 
    push           pc_genmcl.px_popdotindex.i i64 
    jumpfalse      #6520      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_popdotindex.i i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_popdotindex.cx u64 
    push           44         i64 
    callproc       &pc_libmcl.genmc 
#6520: 
    setargs                   3 0
    push           pc_genmcl.px_popdotindex.cx u64 
    push           pc_genmcl.px_popdotindex.rx u64 
    push           40         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6521      
#6519: 
    push           pc_genmcl.px_popdotindex.rhs i64 
    push           0          i64 
    jumpeq         #6522      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    push           pc_genmcl.px_popdotindex.i i64 
    shl                       i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_popdotindex.rx u64 
    push           40         i64 
    callproc       &pc_libmcl.genmc 
#6522: 
#6521: 
    setargs                   3 0
    setargs                   2 0
    push           pc_genmcl.px_popdotindex.size i64 
    push           pc_genmcl.px_popdotindex.rx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           pc_genmcl.px_popdotindex.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    push           pc_genmcl.px_popdotindex.p u64 
    push           1          
    pushptroff                u8 1 0
    push           38         i64 
    jumpne         #6523      i64 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6523: 
#6524: 
    retproc                   
End


Proc pc_genmcl.px_storedotindex:
    param          pc_genmcl.px_storedotindex.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_storedotindex.p u64 
    callproc       &pc_genmcl.px_popdotindex 
#6526: 
    retproc                   
End


Proc pc_genmcl.px_dotslice:
    param          pc_genmcl.px_dotslice.p u64 
    local          pc_genmcl.px_dotslice.ax u64 
    local          pc_genmcl.px_dotslice.mx u64 
    local          pc_genmcl.px_dotslice.mx4 u64 
    local          pc_genmcl.px_dotslice.i i64 
    local          pc_genmcl.px_dotslice.j i64 
    local          pc_genmcl.px_dotslice.mask u64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #6528      i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpeq         #6529      i64 
#6528: 
    setargs                   2 0
    push           ""         u64 
    push           "dotslice i/j not imm" u64 
    callproc       &pc_libmcl.merror 
#6529: 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_dotslice.ax u64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    pop            pc_genmcl.px_dotslice.i i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    pop            pc_genmcl.px_dotslice.j i64 
    push           pc_genmcl.px_dotslice.i i64 
    jumpfalse      #6530      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_dotslice.i i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_dotslice.ax u64 
    push           46         i64 
    callproc       &pc_libmcl.genmc 
#6530: 
    push           -1         u64 
    push           pc_genmcl.px_dotslice.j i64 
    push           pc_genmcl.px_dotslice.i i64 
    sub                       i64 
    push           1          i64 
    add                       i64 
    shl                       u64 
    inot                      u64 
    pop            pc_genmcl.px_dotslice.mask u64 
    push           pc_genmcl.px_dotslice.mask u64 
    push           2147483647 u64 
    jumpgt         #6531      u64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_dotslice.mask i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_dotslice.ax u64 
    push           39         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6532      
#6531: 
    setargs                   1 0
    push           2          i64 
    callfn         &pc_genmcl.makeregopnd u64 
    pop            pc_genmcl.px_dotslice.mx u64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_dotslice.mask i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_dotslice.mx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.px_dotslice.mx u64 
    push           pc_genmcl.px_dotslice.ax u64 
    push           39         i64 
    callproc       &pc_libmcl.genmc 
#6532: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6533: 
    retproc                   
End


Proc pc_genmcl.px_popdotslice:
    param          pc_genmcl.px_popdotslice.p u64 
    local          pc_genmcl.px_popdotslice.ax u64 
    local          pc_genmcl.px_popdotslice.rx u64 
    local          pc_genmcl.px_popdotslice.mx u64 
    local          pc_genmcl.px_popdotslice.mx4 u64 
    local          pc_genmcl.px_popdotslice.dx u64 
    local          pc_genmcl.px_popdotslice.i i64 
    local          pc_genmcl.px_popdotslice.j i64 
    local          pc_genmcl.px_popdotslice.size i64 
    local          pc_genmcl.px_popdotslice.mask u64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #6535      i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpeq         #6536      i64 
#6535: 
    setargs                   2 0
    push           ""         u64 
    push           "popdotslice i/j not imm" u64 
    callproc       &pc_libmcl.merror 
#6536: 
    setargs                   2 0
    push           8          i64 
    push           4          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_popdotslice.dx u64 
    push           pc_genmcl.px_popdotslice.p u64 
    push           4          
    pushptroff                i32 1 0
    pop            pc_genmcl.px_popdotslice.size i64 
    setargs                   2 0
    push           pc_genmcl.px_popdotslice.size i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.px_popdotslice.ax u64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    pop            pc_genmcl.px_popdotslice.i i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    pop            pc_genmcl.px_popdotslice.j i64 
    setargs                   1 0
    push           2          i64 
    callfn         &pc_genmcl.makeregopnd u64 
    pop            pc_genmcl.px_popdotslice.mx u64 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_genmcl.makeregopnd u64 
    pop            pc_genmcl.px_popdotslice.rx u64 
    setargs                   3 0
    push           pc_genmcl.px_popdotslice.p u64 
    push           3          
    pushptroff                u8 1 0
    push           pc_genmcl.px_popdotslice.ax u64 
    push           pc_genmcl.px_popdotslice.rx u64 
    callproc       &pc_genmcl.loadtoreg 
    push           -1         u64 
    push           pc_genmcl.px_popdotslice.j i64 
    push           pc_genmcl.px_popdotslice.i i64 
    sub                       i64 
    push           1          i64 
    add                       i64 
    shl                       u64 
    inot                      u64 
    push           pc_genmcl.px_popdotslice.i i64 
    shl                       u64 
    inot                      u64 
    pop            pc_genmcl.px_popdotslice.mask u64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_popdotslice.mask i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_popdotslice.mx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_genmcl.px_popdotslice.i i64 
    jumpfalse      #6537      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_popdotslice.i i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_popdotslice.dx u64 
    push           44         i64 
    callproc       &pc_libmcl.genmc 
#6537: 
    setargs                   3 0
    push           pc_genmcl.px_popdotslice.mx u64 
    push           pc_genmcl.px_popdotslice.rx u64 
    push           39         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.px_popdotslice.dx u64 
    push           pc_genmcl.px_popdotslice.rx u64 
    push           40         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.px_popdotslice.size i64 
    push           pc_genmcl.px_popdotslice.rx u64 
    push           pc_genmcl.px_popdotslice.ax u64 
    callproc       &pc_genmcl.storefromreg 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    push           pc_genmcl.px_popdotslice.p u64 
    push           1          
    pushptroff                u8 1 0
    push           41         i64 
    jumpne         #6538      i64 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6538: 
#6539: 
    retproc                   
End


Proc pc_genmcl.px_storedotslice:
    param          pc_genmcl.px_storedotslice.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_storedotslice.p u64 
    callproc       &pc_genmcl.px_popdotslice 
#6541: 
    retproc                   
End


Proc pc_genmcl.px_popstack:
    param          pc_genmcl.px_popstack.p u64 
    procentry                 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6543: 
    retproc                   
End


Proc pc_genmcl.px_eval:
    param          pc_genmcl.px_eval.p u64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           4          
    pushptroff                u8 1 0
    push           76         i64 
    jumpne         #6545      i64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callproc       &pc_stackmcl.genopnd_ld 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callproc       &pc_stackmcl.genopnd_ld 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #6546      
#6545: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callproc       &pc_stackmcl.genopnd_ld 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6546: 
#6547: 
    retproc                   
End


Proc pc_genmcl.px_callproc:
    param          pc_genmcl.px_callproc.p u64 
    local          pc_genmcl.px_callproc.nslots i64 
    local          pc_genmcl.px_callproc.nargs i64 
    local          pc_genmcl.px_callproc.av_1 i64 
    procentry                 
    push           &pci_mcl.callargs 
    push           pci_mcl.ncalldepth i64 
    pushptroff                u8 1 -1
    pop            pc_genmcl.px_callproc.nargs i64 
    setargs                   2 0
    push           0          i64 
    push           pc_genmcl.px_callproc.p u64 
    callfn         &pc_genmcl.do_pushparams i64 
    pop            pc_genmcl.px_callproc.nslots i64 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_callproc.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmemaddr u64 
    push           22         i64 
    callproc       &pc_libmcl.genmc 
#6549: 
    push           pc_genmcl.px_callproc.nargs i64 
    pop            pc_genmcl.px_callproc.av_1 i64 
    push           pc_genmcl.px_callproc.av_1 i64 
    push           0          i64 
    jumple         #6550      i64 
#6551: 
    setargs                   0 0
    callproc       &pc_stackmcl.poparg 
#6552: 
    to             #6551      
    opnd           pc_genmcl.px_callproc.av_1 
#6550: 
    setargs                   1 0
    push           pc_genmcl.px_callproc.nslots i64 
    callproc       &pc_stackmcl.popslots 
#6553: 
    retproc                   
End


Proc pc_genmcl.px_callprocptr:
    param          pc_genmcl.px_callprocptr.p u64 
    local          pc_genmcl.px_callprocptr.nslots i64 
    local          pc_genmcl.px_callprocptr.nargs i64 
    local          pc_genmcl.px_callprocptr.av_1 i64 
    procentry                 
    push           &pci_mcl.callargs 
    push           pci_mcl.ncalldepth i64 
    pushptroff                u8 1 -1
    pop            pc_genmcl.px_callprocptr.nargs i64 
    setargs                   2 0
    push           1          i64 
    push           pc_genmcl.px_callprocptr.p u64 
    callfn         &pc_genmcl.do_pushparams i64 
    pop            pc_genmcl.px_callprocptr.nslots i64 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    push           22         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6555: 
    push           pc_genmcl.px_callprocptr.nargs i64 
    pop            pc_genmcl.px_callprocptr.av_1 i64 
    push           pc_genmcl.px_callprocptr.av_1 i64 
    push           0          i64 
    jumple         #6556      i64 
#6557: 
    setargs                   0 0
    callproc       &pc_stackmcl.poparg 
#6558: 
    to             #6557      
    opnd           pc_genmcl.px_callprocptr.av_1 
#6556: 
    setargs                   1 0
    push           pc_genmcl.px_callprocptr.nslots i64 
    callproc       &pc_stackmcl.popslots 
#6559: 
    retproc                   
End


Proc pc_genmcl.px_retproc:
    param          pc_genmcl.px_retproc.p u64 
    local          pc_genmcl.px_retproc.offset i64 
    local          pc_genmcl.px_retproc.i i64 
    procentry                 
    push           pci_mcl.dsaveoffset i64 
    pop            pc_genmcl.px_retproc.offset i64 
#6561: 
    push           1          i64 
    pop            pc_genmcl.px_retproc.i i64 
    push           pci_mcl.ndsaveregs i64 
    push           1          i64 
    jumplt         #6562      i64 
#6563: 
    setargs                   3 0
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           8          i64 
    push           pc_genmcl.px_retproc.offset i64 
    push           1          i64 
    push           0          i64 
    push           15         i64 
    callfn         &pc_libmcl.mgenindex u64 
    setargs                   2 0
    push           8          i64 
    push           &pci_mcl.dsaveregs 
    push           pc_genmcl.px_retproc.i i64 
    pushptroff                i64 8 -8
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_genmcl.px_retproc.offset 
    push           8          i64 
    addto                     i64 
#6564: 
    forup          #6563      i64 1
    opnd           pc_genmcl.px_retproc.i 
    opnd           pci_mcl.ndsaveregs 
#6562: 
    push           pci_mcl.xsaveoffset i64 
    pop            pc_genmcl.px_retproc.offset i64 
#6565: 
    push           1          i64 
    pop            pc_genmcl.px_retproc.i i64 
    push           pci_mcl.nxsaveregs i64 
    push           1          i64 
    jumplt         #6566      i64 
#6567: 
    setargs                   3 0
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           8          i64 
    push           pc_genmcl.px_retproc.offset i64 
    push           1          i64 
    push           0          i64 
    push           15         i64 
    callfn         &pc_libmcl.mgenindex u64 
    setargs                   2 0
    push           8          i64 
    push           &pci_mcl.xsaveregs 
    push           pc_genmcl.px_retproc.i i64 
    pushptroff                i64 8 -8
    callfn         &pc_libmcl.mgenxreg u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_genmcl.px_retproc.offset 
    push           8          i64 
    addto                     i64 
#6568: 
    forup          #6567      i64 1
    opnd           pc_genmcl.px_retproc.i 
    opnd           pci_mcl.nxsaveregs 
#6566: 
    push           pci_mcl.needstackframe i64 
    jumpfalse      #6569      i64 
    push           pci_mcl.framebytes i64 
    jumpfalse      #6570      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.framebytes i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pci_mcl.dstackopnd u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
#6570: 
    setargs                   3 0
    push           0          u64 
    push           pci_mcl.dframeopnd u64 
    push           14         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6571      
#6569: 
    push           pci_mcl.needshadow32 i64 
    jumpfalse      #6572      i64 
    setargs                   1 0
    push           pci_mcl.needshadow32 i64 
    callproc       &pc_stackmcl.popstack 
#6572: 
#6571: 
    push           pci_mcl.needshadow48 i64 
    jumpfalse      #6573      i64 
    setargs                   1 0
    push           48         i64 
    callproc       &pc_stackmcl.popstack 
#6573: 
#6574: 
    push           pci_mcl.ndsavepush i64 
    pop            pc_genmcl.px_retproc.i i64 
    push           pc_genmcl.px_retproc.i i64 
    push           1          i64 
    jumplt         #6575      i64 
#6576: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           &pci_mcl.dsaveregs 
    push           pc_genmcl.px_retproc.i i64 
    pushptroff                i64 8 -8
    callfn         &pc_libmcl.mgenreg u64 
    push           14         i64 
    callproc       &pc_libmcl.genmc 
#6577: 
    fordown        #6576      i64 1
    opnd           pc_genmcl.px_retproc.i 
    opnd           1          
#6575: 
    setargs                   3 0
    push           0          u64 
    push           0          u64 
    push           23         i64 
    callproc       &pc_libmcl.genmc 
#6578: 
    retproc                   
End


Proc pc_genmcl.px_callfn:
    param          pc_genmcl.px_callfn.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_callfn.p u64 
    callproc       &pc_genmcl.px_callproc 
    setargs                   1 0
    push           pc_genmcl.px_callfn.p u64 
    callproc       &pc_genmcl.dogetretvalue 
#6580: 
    retproc                   
End


Proc pc_genmcl.px_callfnptr:
    param          pc_genmcl.px_callfnptr.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_callfnptr.p u64 
    callproc       &pc_genmcl.px_callprocptr 
    setargs                   1 0
    push           pc_genmcl.px_callfnptr.p u64 
    callproc       &pc_genmcl.dogetretvalue 
#6582: 
    retproc                   
End


Proc pc_genmcl.px_retfn:
    param          pc_genmcl.px_retfn.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_retfn.p u64 
    callproc       &pc_genmcl.px_retproc 
#6584: 
    retproc                   
End


Proc pc_genmcl.px_jump:
    param          pc_genmcl.px_jump.p u64 
    procentry                 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_jump.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    push           26         i64 
    callproc       &pc_libmcl.genmc 
#6586: 
    retproc                   
End


Proc pc_genmcl.px_jumpptr:
    param          pc_genmcl.px_jumpptr.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_jumpptr.p u64 
    callproc       &pc_genmcl.unimpl 
#6588: 
    retproc                   
End


Proc pc_genmcl.px_jumpeq:
    param          pc_genmcl.px_jumpeq.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_jumpeq.p u64 
    callproc       &pc_genmcl.dojumpcc 
#6590: 
    retproc                   
End


Proc pc_genmcl.px_jumpne:
    param          pc_genmcl.px_jumpne.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_jumpne.p u64 
    callproc       &pc_genmcl.dojumpcc 
#6592: 
    retproc                   
End


Proc pc_genmcl.px_jumplt:
    param          pc_genmcl.px_jumplt.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_jumplt.p u64 
    callproc       &pc_genmcl.dojumpcc 
#6594: 
    retproc                   
End


Proc pc_genmcl.px_jumple:
    param          pc_genmcl.px_jumple.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_jumple.p u64 
    callproc       &pc_genmcl.dojumpcc 
#6596: 
    retproc                   
End


Proc pc_genmcl.px_jumpge:
    param          pc_genmcl.px_jumpge.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_jumpge.p u64 
    callproc       &pc_genmcl.dojumpcc 
#6598: 
    retproc                   
End


Proc pc_genmcl.px_jumpgt:
    param          pc_genmcl.px_jumpgt.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_jumpgt.p u64 
    callproc       &pc_genmcl.dojumpcc 
#6600: 
    retproc                   
End


Proc pc_genmcl.px_jumptrue:
    param          pc_genmcl.px_jumptrue.p u64 
    procentry                 
    setargs                   2 0
    push           5          i64 
    push           pc_genmcl.px_jumptrue.p u64 
    callproc       &pc_genmcl.dojumptruefalse 
#6602: 
    retproc                   
End


Proc pc_genmcl.px_jumpfalse:
    param          pc_genmcl.px_jumpfalse.p u64 
    procentry                 
    setargs                   2 0
    push           4          i64 
    push           pc_genmcl.px_jumpfalse.p u64 
    callproc       &pc_genmcl.dojumptruefalse 
#6604: 
    retproc                   
End


Proc pc_genmcl.px_jumpinrange:
    param          pc_genmcl.px_jumpinrange.p u64 
    local          pc_genmcl.px_jumpinrange.ax u64 
    local          pc_genmcl.px_jumpinrange.bx u64 
    local          pc_genmcl.px_jumpinrange.cx u64 
    local          pc_genmcl.px_jumpinrange.lx u64 
    local          pc_genmcl.px_jumpinrange.nolx u64 
    local          pc_genmcl.px_jumpinrange.nolab i64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_jumpinrange.ax u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_jumpinrange.bx u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_jumpinrange.cx u64 
    setargs                   1 0
    push           pc_genmcl.px_jumpinrange.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    pop            pc_genmcl.px_jumpinrange.lx u64 
    setargs                   3 0
    push           pc_genmcl.px_jumpinrange.bx u64 
    push           pc_genmcl.px_jumpinrange.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    setargs                   0 0
    callfn         &pc_libmcl.mcreatefwdlabel i64 
    store          pc_genmcl.px_jumpinrange.nolab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    pop            pc_genmcl.px_jumpinrange.nolx u64 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.px_jumpinrange.nolx u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_genmcl.px_jumpinrange.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #6606      i64 
    push           12         i64 
    resetmult                 
    jump           #6607      
#6606: 
    push           2          i64 
    endmult                   
#6607: 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.px_jumpinrange.cx u64 
    push           pc_genmcl.px_jumpinrange.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.px_jumpinrange.lx u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_genmcl.px_jumpinrange.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #6608      i64 
    push           14         i64 
    resetmult                 
    jump           #6609      
#6608: 
    push           6          i64 
    endmult                   
#6609: 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   1 0
    push           pc_genmcl.px_jumpinrange.nolab i64 
    callproc       &pc_libmcl.mdefinefwdlabel 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6610: 
    retproc                   
End


Proc pc_genmcl.px_jumpnotinrange:
    param          pc_genmcl.px_jumpnotinrange.p u64 
    local          pc_genmcl.px_jumpnotinrange.ax u64 
    local          pc_genmcl.px_jumpnotinrange.bx u64 
    local          pc_genmcl.px_jumpnotinrange.cx u64 
    local          pc_genmcl.px_jumpnotinrange.lx u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_jumpnotinrange.ax u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_jumpnotinrange.bx u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_jumpnotinrange.cx u64 
    setargs                   1 0
    push           pc_genmcl.px_jumpnotinrange.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    pop            pc_genmcl.px_jumpnotinrange.lx u64 
    setargs                   3 0
    push           pc_genmcl.px_jumpnotinrange.bx u64 
    push           pc_genmcl.px_jumpnotinrange.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.px_jumpnotinrange.lx u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_genmcl.px_jumpnotinrange.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #6612      i64 
    push           12         i64 
    resetmult                 
    jump           #6613      
#6612: 
    push           2          i64 
    endmult                   
#6613: 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.px_jumpnotinrange.cx u64 
    push           pc_genmcl.px_jumpnotinrange.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.px_jumpnotinrange.lx u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_genmcl.px_jumpnotinrange.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #6614      i64 
    push           15         i64 
    resetmult                 
    jump           #6615      
#6614: 
    push           7          i64 
    endmult                   
#6615: 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6616: 
    retproc                   
End


Proc pc_genmcl.px_setjumpeq:
    param          pc_genmcl.px_setjumpeq.p u64 
    procentry                 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_setjumpeq.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    push           4          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6618: 
    retproc                   
End


Proc pc_genmcl.px_setjumpeqx:
    param          pc_genmcl.px_setjumpeqx.p u64 
    procentry                 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_setjumpeqx.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    push           4          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6620: 
    retproc                   
End


Proc pc_genmcl.px_setjumpne:
    param          pc_genmcl.px_setjumpne.p u64 
    procentry                 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_setjumpne.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    push           5          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6622: 
    retproc                   
End


Proc pc_genmcl.px_seteq:
    param          pc_genmcl.px_seteq.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_seteq.p u64 
    callproc       &pc_genmcl.dosetcc 
#6624: 
    retproc                   
End


Proc pc_genmcl.px_setne:
    param          pc_genmcl.px_setne.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_setne.p u64 
    callproc       &pc_genmcl.dosetcc 
#6626: 
    retproc                   
End


Proc pc_genmcl.px_setlt:
    param          pc_genmcl.px_setlt.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_setlt.p u64 
    callproc       &pc_genmcl.dosetcc 
#6628: 
    retproc                   
End


Proc pc_genmcl.px_setle:
    param          pc_genmcl.px_setle.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_setle.p u64 
    callproc       &pc_genmcl.dosetcc 
#6630: 
    retproc                   
End


Proc pc_genmcl.px_setge:
    param          pc_genmcl.px_setge.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_setge.p u64 
    callproc       &pc_genmcl.dosetcc 
#6632: 
    retproc                   
End


Proc pc_genmcl.px_setgt:
    param          pc_genmcl.px_setgt.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_setgt.p u64 
    callproc       &pc_genmcl.dosetcc 
#6634: 
    retproc                   
End


Proc pc_genmcl.px_casejumpeq:
    param          pc_genmcl.px_casejumpeq.p u64 
    procentry                 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_casejumpeq.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    push           4          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6636: 
    retproc                   
End


Proc pc_genmcl.px_selecteq:
    param          pc_genmcl.px_selecteq.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_selecteq.p u64 
    callproc       &pc_genmcl.doselectcc 
#6638: 
    retproc                   
End


Proc pc_genmcl.px_selectne:
    param          pc_genmcl.px_selectne.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_selectne.p u64 
    callproc       &pc_genmcl.doselectcc 
#6640: 
    retproc                   
End


Proc pc_genmcl.px_selectlt:
    param          pc_genmcl.px_selectlt.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_selectlt.p u64 
    callproc       &pc_genmcl.doselectcc 
#6642: 
    retproc                   
End


Proc pc_genmcl.px_selectle:
    param          pc_genmcl.px_selectle.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_selectle.p u64 
    callproc       &pc_genmcl.doselectcc 
#6644: 
    retproc                   
End


Proc pc_genmcl.px_selectge:
    param          pc_genmcl.px_selectge.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_selectge.p u64 
    callproc       &pc_genmcl.doselectcc 
#6646: 
    retproc                   
End


Proc pc_genmcl.px_selectgt:
    param          pc_genmcl.px_selectgt.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_selectgt.p u64 
    callproc       &pc_genmcl.doselectcc 
#6648: 
    retproc                   
End


Proc pc_genmcl.px_selecttrue:
    param          pc_genmcl.px_selecttrue.p u64 
    local          pc_genmcl.px_selecttrue.ax u64 
    local          pc_genmcl.px_selecttrue.bx u64 
    local          pc_genmcl.px_selecttrue.cx u64 
    local          pc_genmcl.px_selecttrue.dx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_selecttrue.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #6650      i64 
    setargs                   2 0
    push           pc_genmcl.px_selecttrue.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "selecttrue" u64 
    callproc       &pc_libmcl.merrort 
#6650: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_selecttrue.ax u64 
    setargs                   3 0
    push           pc_genmcl.px_selecttrue.ax u64 
    push           pc_genmcl.px_selecttrue.ax u64 
    push           42         i64 
    callproc       &pc_libmcl.genmc 
    push           1          i64 
    pop            pci_mcl.noxorclear u8 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_selecttrue.dx u64 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_selecttrue.cx u64 
    push           0          i64 
    pop            pci_mcl.noxorclear u8 
    setargs                   4 0
    push           pc_genmcl.px_selecttrue.dx u64 
    push           pc_genmcl.px_selecttrue.cx u64 
    push           4          i64 
    push           16         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6651: 
    retproc                   
End


Proc pc_genmcl.px_to:
    param          pc_genmcl.px_to.p u64 
    local          pc_genmcl.px_to.q u64 
    local          pc_genmcl.px_to.ax u64 
    procentry                 
    push           pc_genmcl.px_to.p u64 
    push           1          i64 
    addrefoff                 u64 32 0
    store          pc_genmcl.currpcl u64 
    pop            pc_genmcl.px_to.q u64 
    setargs                   1 0
    push           pc_genmcl.px_to.q u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    pop            pc_genmcl.px_to.ax u64 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.px_to.ax u64 
    push           54         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_to.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    push           5          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
#6653: 
    retproc                   
End


Proc pc_genmcl.px_forup:
    param          pc_genmcl.px_forup.p u64 
    procentry                 
    setargs                   4 0
    push           14         i64 
    push           29         i64 
    push           53         i64 
    push           pc_genmcl.px_forup.p u64 
    callproc       &pc_genmcl.do_for 
#6655: 
    retproc                   
End


Proc pc_genmcl.px_fordown:
    param          pc_genmcl.px_fordown.p u64 
    procentry                 
    setargs                   4 0
    push           13         i64 
    push           30         i64 
    push           54         i64 
    push           pc_genmcl.px_fordown.p u64 
    callproc       &pc_genmcl.do_for 
#6657: 
    retproc                   
End


Proc pc_genmcl.px_swap:
    param          pc_genmcl.px_swap.p u64 
    local          pc_genmcl.px_swap.ax u64 
    local          pc_genmcl.px_swap.bx u64 
    local          pc_genmcl.px_swap.px u64 
    local          pc_genmcl.px_swap.qx u64 
    procentry                 
    setargs                   2 0
    push           pc_genmcl.px_swap.p u64 
    push           4          
    pushptroff                i32 1 0
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.px_swap.px u64 
    setargs                   2 0
    push           pc_genmcl.px_swap.p u64 
    push           4          
    pushptroff                i32 1 0
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.px_swap.qx u64 
    setargs                   2 0
    push           pc_genmcl.px_swap.p u64 
    push           4          
    pushptroff                i32 1 0
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_genmcl.px_swap.ax u64 
    setargs                   2 0
    push           pc_genmcl.px_swap.p u64 
    push           4          
    pushptroff                i32 1 0
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_genmcl.px_swap.bx u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_swap.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6659      i64 0
    push           4          i64 
    casejumpeq     #6659      i64 0
    popstack                  i64 
    jump           #6660      
#6659: 
    setargs                   3 0
    push           pc_genmcl.px_swap.px u64 
    push           pc_genmcl.px_swap.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.px_swap.qx u64 
    push           pc_genmcl.px_swap.bx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.px_swap.ax u64 
    push           pc_genmcl.px_swap.qx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.px_swap.bx u64 
    push           pc_genmcl.px_swap.px u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6661      
#6660: 
    setargs                   2 0
    push           pc_genmcl.px_swap.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "swap"     u64 
    callproc       &pc_libmcl.merrort 
#6661: 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_genmcl.px_swap.ax u64 
    push           10         
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_genmcl.px_swap.ax u64 
    push           10         
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_genmcl.px_swap.bx u64 
    push           10         
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_genmcl.px_swap.bx u64 
    push           10         
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6662: 
    retproc                   
End


Proc pc_genmcl.px_makeslice:
    param          pc_genmcl.px_makeslice.p u64 
    procentry                 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.setwideopnd 
#6664: 
    retproc                   
End


Proc pc_genmcl.px_switch:
    param          pc_genmcl.px_switch.p u64 
    local          pc_genmcl.px_switch.minlab i64 
    local          pc_genmcl.px_switch.maxlab i64 
    local          pc_genmcl.px_switch.jumplab i64 
    local          pc_genmcl.px_switch.elselab i64 
    local          pc_genmcl.px_switch.ax u64 
    procentry                 
    push           pc_genmcl.px_switch.p u64 
    push           16         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_switch.minlab i64 
    push           pc_genmcl.px_switch.p u64 
    push           20         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_switch.maxlab i64 
    push           pc_genmcl.px_switch.p u64 
    push           8          
    pushptroff                i64 1 0
    pop            pc_genmcl.px_switch.jumplab i64 
    push           pc_genmcl.px_switch.p u64 
    push           1          i64 
    addrefoff                 u64 32 0
    pop            pc_genmcl.currpcl u64 
    push           pc_genmcl.currpcl u64 
    push           8          
    pushptroff                i64 1 0
    pop            pc_genmcl.px_switch.elselab i64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_switch.ax u64 
    push           pc_genmcl.px_switch.minlab i64 
    push           0          i64 
    jumpeq         #6666      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_switch.minlab i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_switch.ax u64 
    push           30         i64 
    callproc       &pc_libmcl.genmc 
#6666: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_switch.maxlab i64 
    push           pc_genmcl.px_switch.minlab i64 
    sub                       i64 
    push           1          i64 
    add                       i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_switch.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_switch.elselab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           3          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           0          u64 
    setargs                   7 0
    push           0          u64 
    push           pc_genmcl.px_switch.jumplab i64 
    push           0          i64 
    push           0          i64 
    push           8          i64 
    push           pc_genmcl.px_switch.ax u64 
    push           10         
    pushptroff                u8 1 0
    push           0          i64 
    callfn         &pc_libmcl.mgenindex u64 
    push           26         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   2 0
    push           1          i64 
    push           73         i64 
    callproc       &pc_libmcl.setsegment 
#6667: 
    retproc                   
End


Proc pc_genmcl.px_switchlabel:
    param          pc_genmcl.px_switchlabel.p u64 
    procentry                 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_switchlabel.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    push           117        i64 
    callproc       &pc_libmcl.genmc 
#6669: 
    retproc                   
End


Proc pc_genmcl.px_endswitch:
    param          pc_genmcl.px_endswitch.p u64 
    procentry                 
    setargs                   2 0
    push           1          i64 
    push           67         i64 
    callproc       &pc_libmcl.setsegment 
#6671: 
    retproc                   
End


Proc pc_genmcl.px_clear:
    param          pc_genmcl.px_clear.p u64 
    local          pc_genmcl.px_clear.ax u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.px_clear.ax u64 
    setargs                   2 0
    push           pc_genmcl.px_clear.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_genmcl.px_clear.ax u64 
    callproc       &pc_libmcl.clearblock 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6673: 
    retproc                   
End


Proc pc_genmcl.px_csegment:
    param          pc_genmcl.px_csegment.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_csegment.p u64 
    callproc       &pc_genmcl.unimpl 
#6675: 
    retproc                   
End


Proc pc_genmcl.px_isegment:
    param          pc_genmcl.px_isegment.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_isegment.p u64 
    callproc       &pc_genmcl.unimpl 
#6677: 
    retproc                   
End


Proc pc_genmcl.px_zsegment:
    param          pc_genmcl.px_zsegment.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_zsegment.p u64 
    callproc       &pc_genmcl.unimpl 
#6679: 
    retproc                   
End


Proc pc_genmcl.px_rosegment:
    param          pc_genmcl.px_rosegment.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_rosegment.p u64 
    callproc       &pc_genmcl.unimpl 
#6681: 
    retproc                   
End


Proc pc_genmcl.px_data:
    param          pc_genmcl.px_data.p u64 
    local          pc_genmcl.px_data.ax u64 
    local          pc_genmcl.px_data.opc i64 
    procentry                 
    push           pc_genmcl.px_data.p u64 
    pushptr                   u8 
    push           4          i64 
    casejumpeq     #6683      i64 0
    push           5          i64 
    casejumpeq     #6684      i64 0
    push           7          i64 
    casejumpeq     #6684      i64 0
    push           8          i64 
    casejumpeq     #6685      i64 0
    push           2          i64 
    casejumpeq     #6686      i64 0
    popstack                  i64 
    jump           #6687      
#6683: 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_data.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenint u64 
    pop            pc_genmcl.px_data.ax u64 
    jump           #6688      
#6684: 
    setargs                   2 0
    push           pc_genmcl.px_data.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_genmcl.px_data.p u64 
    push           8          
    pushptroff                r64 1 0
    callfn         &pc_libmcl.mgenrealimm u64 
    pop            pc_genmcl.px_data.ax u64 
    jump           #6688      
#6685: 
    setargs                   1 0
    setargs                   1 0
    push           pc_genmcl.px_data.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.getstringindex i64 
    callfn         &pc_libmcl.mgenlabel u64 
    pop            pc_genmcl.px_data.ax u64 
    jump           #6688      
#6686: 
    setargs                   1 0
    push           pc_genmcl.px_data.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmemaddr u64 
    pop            pc_genmcl.px_data.ax u64 
    push           pc_genmcl.px_data.p u64 
    push           20         
    pushptroff                i32 1 0
    push           pc_genmcl.px_data.ax u64 
    push           14         
    popptroff                 i32 1 0
    jump           #6688      
#6687: 
    setargs                   2 0
    push           &pc_tables.opndnames 
    push           pc_genmcl.px_data.p u64 
    pushptr                   u8 
    pushptroff                u64 8 0
    push           "db/dq optype? #" u64 
    callproc       &pc_libmcl.merror 
#6688: 
    push           pc_genmcl.px_data.p u64 
    push           4          
    pushptroff                i32 1 0
    push           1          i64 
    casejumpeq     #6689      i64 0
    push           2          i64 
    casejumpeq     #6690      i64 0
    push           4          i64 
    casejumpeq     #6691      i64 0
    push           8          i64 
    casejumpeq     #6692      i64 0
    popstack                  i64 
    jump           #6693      
#6689: 
    push           114        i64 
    pop            pc_genmcl.px_data.opc i64 
    jump           #6694      
#6690: 
    push           115        i64 
    pop            pc_genmcl.px_data.opc i64 
    jump           #6694      
#6691: 
    push           116        i64 
    pop            pc_genmcl.px_data.opc i64 
    jump           #6694      
#6692: 
    push           117        i64 
    pop            pc_genmcl.px_data.opc i64 
    jump           #6694      
#6693: 
    setargs                   2 0
    push           ""         u64 
    push           "DATA/not 1248" u64 
    callproc       &pc_libmcl.merror 
#6694: 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.px_data.ax u64 
    push           pc_genmcl.px_data.opc i64 
    callproc       &pc_libmcl.genmc 
#6695: 
    retproc                   
End


Proc pc_genmcl.px_db:
    param          pc_genmcl.px_db.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_db.p u64 
    callproc       &pc_genmcl.unimpl 
#6697: 
    retproc                   
End


Proc pc_genmcl.px_dw:
    param          pc_genmcl.px_dw.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_dw.p u64 
    callproc       &pc_genmcl.unimpl 
#6699: 
    retproc                   
End


Proc pc_genmcl.px_dd:
    param          pc_genmcl.px_dd.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_dd.p u64 
    callproc       &pc_genmcl.unimpl 
#6701: 
    retproc                   
End


Proc pc_genmcl.px_dq:
    param          pc_genmcl.px_dq.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_dq.p u64 
    callproc       &pc_genmcl.unimpl 
#6703: 
    retproc                   
End


Proc pc_genmcl.px_dstring:
    param          pc_genmcl.px_dstring.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_dstring.p u64 
    callproc       &pc_genmcl.unimpl 
#6705: 
    retproc                   
End


Proc pc_genmcl.px_dstringz:
    param          pc_genmcl.px_dstringz.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_dstringz.p u64 
    callproc       &pc_genmcl.unimpl 
#6707: 
    retproc                   
End


Proc pc_genmcl.px_reserve:
    param          pc_genmcl.px_reserve.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_reserve.p u64 
    callproc       &pc_genmcl.unimpl 
#6709: 
    retproc                   
End


Proc pc_genmcl.px_assem:
    param          pc_genmcl.px_assem.p u64 
    procentry                 
    push           pci_mcl.hostasmhandler u64 
    jumpfalse      #6711      u64 
    setargs                   1 0
    push           pc_genmcl.px_assem.p u64 
    push           8          
    pushptroff                u64 1 0
    push           pci_mcl.hostasmhandler u64 
    callprocptr               
    jump           #6712      
#6711: 
    setargs                   1 0
    push           pc_genmcl.px_assem.p u64 
    callproc       &pc_genmcl.unimpl 
#6712: 
    push           pc_genmcl.px_assem.p u64 
    push           3          
    pushptroff                u8 1 0
    jumpfalse      #6713      i64 
    setargs                   1 0
    push           pc_genmcl.px_assem.p u64 
    callproc       &pc_genmcl.dogetretvalue 
#6713: 
#6714: 
    retproc                   
End


Proc pc_genmcl.px_add:
    param          pc_genmcl.px_add.p u64 
    local          pc_genmcl.px_add.ax u64 
    local          pc_genmcl.px_add.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_add.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6716      i64 0
    push           3          i64 
    casejumpeq     #6717      i64 0
    push           2          i64 
    casejumpeq     #6718      i64 0
    push           5          i64 
    casejumpeq     #6719      i64 0
    popstack                  i64 
    jump           #6720      
#6716: 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_add.ax u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #6721      i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    push           1          i64 
    jumpne         #6721      i64 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.px_add.ax u64 
    push           53         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6722      
#6721: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_add.bx u64 
    setargs                   3 0
    push           pc_genmcl.px_add.bx u64 
    push           pc_genmcl.px_add.ax u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
#6722: 
    jump           #6723      
#6717: 
    setargs                   1 0
    push           68         i64 
    callproc       &pc_genmcl.dobin_float 
    jump           #6723      
#6718: 
    setargs                   1 0
    push           64         i64 
    callproc       &pc_genmcl.dobin_float 
    jump           #6723      
#6719: 
    setargs                   3 0
    push           31         i64 
    push           29         i64 
    push           pc_genmcl.px_add.p u64 
    callproc       &pc_genmcl.dobin_i128 
    jump           #6724      
    jump           #6723      
#6720: 
    setargs                   2 0
    push           pc_genmcl.px_add.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "add:"     u64 
    callproc       &pc_libmcl.merrort 
#6723: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6724: 
    retproc                   
End


Proc pc_genmcl.px_sub:
    param          pc_genmcl.px_sub.p u64 
    local          pc_genmcl.px_sub.ax u64 
    local          pc_genmcl.px_sub.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_sub.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6726      i64 0
    push           3          i64 
    casejumpeq     #6727      i64 0
    push           2          i64 
    casejumpeq     #6728      i64 0
    push           5          i64 
    casejumpeq     #6729      i64 0
    popstack                  i64 
    jump           #6730      
#6726: 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_sub.ax u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #6731      i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    push           1          i64 
    jumpne         #6731      i64 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.px_sub.ax u64 
    push           54         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6732      
#6731: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_sub.bx u64 
    setargs                   3 0
    push           pc_genmcl.px_sub.bx u64 
    push           pc_genmcl.px_sub.ax u64 
    push           30         i64 
    callproc       &pc_libmcl.genmc 
#6732: 
    jump           #6733      
#6727: 
    setargs                   1 0
    push           69         i64 
    callproc       &pc_genmcl.dobin_float 
    jump           #6733      
#6728: 
    setargs                   1 0
    push           65         i64 
    callproc       &pc_genmcl.dobin_float 
    jump           #6733      
#6729: 
    setargs                   3 0
    push           32         i64 
    push           30         i64 
    push           pc_genmcl.px_sub.p u64 
    callproc       &pc_genmcl.dobin_i128 
    jump           #6734      
    jump           #6733      
#6730: 
    setargs                   2 0
    push           pc_genmcl.px_sub.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "sub:"     u64 
    callproc       &pc_libmcl.merrort 
#6733: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6734: 
    retproc                   
End


Proc pc_genmcl.px_mul:
    param          pc_genmcl.px_mul.p u64 
    local          pc_genmcl.px_mul.ax u64 
    local          pc_genmcl.px_mul.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_mul.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6736      i64 0
    push           3          i64 
    casejumpeq     #6737      i64 0
    push           2          i64 
    casejumpeq     #6738      i64 0
    push           5          i64 
    casejumpeq     #6739      i64 0
    popstack                  i64 
    jump           #6740      
#6736: 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_mul.ax u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #6741      i64 
    setargs                   2 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    push           pc_genmcl.px_mul.ax u64 
    callproc       &pc_genmcl.mulimm 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #6742      
#6741: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_mul.bx u64 
    setargs                   3 0
    push           pc_genmcl.px_mul.bx u64 
    push           pc_genmcl.px_mul.ax u64 
    push           35         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6743      
#6737: 
    setargs                   1 0
    push           70         i64 
    callproc       &pc_genmcl.dobin_float 
    jump           #6743      
#6738: 
    setargs                   1 0
    push           66         i64 
    callproc       &pc_genmcl.dobin_float 
    jump           #6743      
#6739: 
    setargs                   3 0
    push           5          i64 
    push           4          i64 
    push           4          i64 
    callproc       &pc_genmcl.do_syscall 
    jump           #6742      
    jump           #6743      
#6740: 
    setargs                   2 0
    push           pc_genmcl.px_mul.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "mul:"     u64 
    callproc       &pc_libmcl.merrort 
#6743: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6742: 
    retproc                   
End


Proc pc_genmcl.px_div:
    param          pc_genmcl.px_div.p u64 
    local          pc_genmcl.px_div.ax u64 
    local          pc_genmcl.px_div.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_div.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           3          i64 
    casejumpeq     #6745      i64 0
    push           2          i64 
    casejumpeq     #6746      i64 0
    popstack                  i64 
    jump           #6747      
#6745: 
    setargs                   1 0
    push           71         i64 
    callproc       &pc_genmcl.dobin_float 
    jump           #6748      
#6746: 
    setargs                   1 0
    push           67         i64 
    callproc       &pc_genmcl.dobin_float 
    jump           #6748      
#6747: 
    setargs                   2 0
    push           pc_genmcl.px_div.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "div:"     u64 
    callproc       &pc_libmcl.merrort 
#6748: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6749: 
    retproc                   
End


Proc pc_genmcl.px_idiv:
    param          pc_genmcl.px_idiv.p u64 
    procentry                 
    push           pc_genmcl.px_idiv.p u64 
    push           3          
    pushptroff                u8 1 0
    push           9          i64 
    casejumpeq     #6751      i64 0
    push           4          i64 
    casejumpeq     #6752      i64 0
    push           10         i64 
    casejumpeq     #6753      i64 0
    push           5          i64 
    casejumpeq     #6754      i64 0
    popstack                  i64 
    jump           #6755      
#6751: 
    setargs                   3 0
    push           1          i64 
    push           1          i64 
    push           pc_genmcl.px_idiv.p u64 
    callproc       &pc_genmcl.do_divrem 
    jump           #6756      
#6752: 
    setargs                   3 0
    push           1          i64 
    push           0          i64 
    push           pc_genmcl.px_idiv.p u64 
    callproc       &pc_genmcl.do_divrem 
    jump           #6756      
#6753: 
    setargs                   2 0
    push           3          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   2 0
    push           4          i64 
    push           2          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   3 0
    push           5          i64 
    push           4          i64 
    push           5          i64 
    callproc       &pc_genmcl.do_syscall 
    jump           #6756      
#6754: 
    setargs                   2 0
    push           3          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   2 0
    push           4          i64 
    push           2          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   3 0
    push           5          i64 
    push           4          i64 
    push           5          i64 
    callproc       &pc_genmcl.do_syscall 
    jump           #6756      
#6755: 
    setargs                   2 0
    push           pc_genmcl.px_idiv.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "idiv:"    u64 
    callproc       &pc_libmcl.merrort 
#6756: 
#6757: 
    retproc                   
End


Proc pc_genmcl.px_irem:
    param          pc_genmcl.px_irem.p u64 
    procentry                 
    push           pc_genmcl.px_irem.p u64 
    push           3          
    pushptroff                u8 1 0
    push           9          i64 
    casejumpeq     #6759      i64 0
    push           4          i64 
    casejumpeq     #6760      i64 0
    popstack                  i64 
    jump           #6761      
#6759: 
    setargs                   3 0
    push           0          i64 
    push           1          i64 
    push           pc_genmcl.px_irem.p u64 
    callproc       &pc_genmcl.do_divrem 
    jump           #6762      
#6760: 
    setargs                   3 0
    push           0          i64 
    push           0          i64 
    push           pc_genmcl.px_irem.p u64 
    callproc       &pc_genmcl.do_divrem 
    jump           #6762      
#6761: 
    setargs                   2 0
    push           pc_genmcl.px_irem.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "irem:"    u64 
    callproc       &pc_libmcl.merrort 
#6762: 
#6763: 
    retproc                   
End


Proc pc_genmcl.px_iand:
    param          pc_genmcl.px_iand.p u64 
    procentry                 
    setargs                   2 0
    push           39         i64 
    push           pc_genmcl.px_iand.p u64 
    callproc       &pc_genmcl.dobitwise 
#6765: 
    retproc                   
End


Proc pc_genmcl.px_ior:
    param          pc_genmcl.px_ior.p u64 
    procentry                 
    setargs                   2 0
    push           40         i64 
    push           pc_genmcl.px_ior.p u64 
    callproc       &pc_genmcl.dobitwise 
#6767: 
    retproc                   
End


Proc pc_genmcl.px_ixor:
    param          pc_genmcl.px_ixor.p u64 
    procentry                 
    setargs                   2 0
    push           41         i64 
    push           pc_genmcl.px_ixor.p u64 
    callproc       &pc_genmcl.dobitwise 
#6769: 
    retproc                   
End


Proc pc_genmcl.px_shl:
    param          pc_genmcl.px_shl.p u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_shl.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6771      i64 0
    popstack                  i64 
    jump           #6772      
#6771: 
    setargs                   2 0
    push           44         i64 
    push           pc_genmcl.px_shl.p u64 
    callproc       &pc_genmcl.do_shift 
    jump           #6773      
#6772: 
    setargs                   2 0
    push           pc_genmcl.px_shl.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "shl:"     u64 
    callproc       &pc_libmcl.merrort 
#6773: 
#6774: 
    retproc                   
End


Proc pc_genmcl.px_shr:
    param          pc_genmcl.px_shr.p u64 
    procentry                 
    push           pc_genmcl.px_shr.p u64 
    push           3          
    pushptroff                u8 1 0
    push           9          i64 
    casejumpeq     #6776      i64 0
    push           4          i64 
    casejumpeq     #6777      i64 0
    popstack                  i64 
    jump           #6778      
#6776: 
    setargs                   2 0
    push           45         i64 
    push           pc_genmcl.px_shr.p u64 
    callproc       &pc_genmcl.do_shift 
    jump           #6779      
#6777: 
    setargs                   2 0
    push           46         i64 
    push           pc_genmcl.px_shr.p u64 
    callproc       &pc_genmcl.do_shift 
    jump           #6779      
#6778: 
    setargs                   2 0
    push           pc_genmcl.px_shr.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "shr:"     u64 
    callproc       &pc_libmcl.merrort 
#6779: 
#6780: 
    retproc                   
End


Proc pc_genmcl.px_in:
    param          pc_genmcl.px_in.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_in.p u64 
    callproc       &pc_genmcl.unimpl 
#6782: 
    retproc                   
End


Proc pc_genmcl.px_notin:
    param          pc_genmcl.px_notin.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_notin.p u64 
    callproc       &pc_genmcl.unimpl 
#6784: 
    retproc                   
End


Proc pc_genmcl.px_min:
    param          pc_genmcl.px_min.p u64 
    procentry                 
    push           pc_genmcl.px_min.p u64 
    push           3          
    pushptroff                u8 1 0
    push           9          i64 
    casejumpeq     #6786      i64 0
    push           4          i64 
    casejumpeq     #6787      i64 0
    push           12         i64 
    casejumpeq     #6788      i64 0
    push           11         i64 
    casejumpeq     #6789      i64 0
    popstack                  i64 
    jump           #6790      
#6786: 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genmcl.domax_int 
    jump           #6791      
#6787: 
    setargs                   1 0
    push           7          i64 
    callproc       &pc_genmcl.domax_int 
    jump           #6791      
#6788: 
    setargs                   1 0
    push           112        i64 
    callproc       &pc_genmcl.domax_float 
    jump           #6791      
#6789: 
    setargs                   1 0
    push           110        i64 
    callproc       &pc_genmcl.domax_float 
    jump           #6791      
#6790: 
    setargs                   2 0
    push           pc_genmcl.px_min.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "min:"     u64 
    callproc       &pc_libmcl.merrort 
#6791: 
#6792: 
    retproc                   
End


Proc pc_genmcl.px_max:
    param          pc_genmcl.px_max.p u64 
    procentry                 
    push           pc_genmcl.px_max.p u64 
    push           3          
    pushptroff                u8 1 0
    push           9          i64 
    casejumpeq     #6794      i64 0
    push           4          i64 
    casejumpeq     #6795      i64 0
    push           12         i64 
    casejumpeq     #6796      i64 0
    push           11         i64 
    casejumpeq     #6797      i64 0
    popstack                  i64 
    jump           #6798      
#6794: 
    setargs                   1 0
    push           12         i64 
    callproc       &pc_genmcl.domax_int 
    jump           #6799      
#6795: 
    setargs                   1 0
    push           2          i64 
    callproc       &pc_genmcl.domax_int 
    jump           #6799      
#6796: 
    setargs                   1 0
    push           113        i64 
    callproc       &pc_genmcl.domax_float 
    jump           #6799      
#6797: 
    setargs                   1 0
    push           111        i64 
    callproc       &pc_genmcl.domax_float 
    jump           #6799      
#6798: 
    setargs                   2 0
    push           pc_genmcl.px_max.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "max:"     u64 
    callproc       &pc_libmcl.merrort 
#6799: 
#6800: 
    retproc                   
End


Proc pc_genmcl.px_eq:
    param          pc_genmcl.px_eq.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_eq.p u64 
    callproc       &pc_genmcl.unimpl 
#6802: 
    retproc                   
End


Proc pc_genmcl.px_ne:
    param          pc_genmcl.px_ne.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_ne.p u64 
    callproc       &pc_genmcl.unimpl 
#6804: 
    retproc                   
End


Proc pc_genmcl.px_lt:
    param          pc_genmcl.px_lt.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_lt.p u64 
    callproc       &pc_genmcl.unimpl 
#6806: 
    retproc                   
End


Proc pc_genmcl.px_le:
    param          pc_genmcl.px_le.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_le.p u64 
    callproc       &pc_genmcl.unimpl 
#6808: 
    retproc                   
End


Proc pc_genmcl.px_ge:
    param          pc_genmcl.px_ge.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_ge.p u64 
    callproc       &pc_genmcl.unimpl 
#6810: 
    retproc                   
End


Proc pc_genmcl.px_gt:
    param          pc_genmcl.px_gt.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_gt.p u64 
    callproc       &pc_genmcl.unimpl 
#6812: 
    retproc                   
End


Proc pc_genmcl.px_same:
    param          pc_genmcl.px_same.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_same.p u64 
    callproc       &pc_genmcl.unimpl 
#6814: 
    retproc                   
End


Proc pc_genmcl.px_andl:
    param          pc_genmcl.px_andl.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_andl.p u64 
    callproc       &pc_genmcl.unimpl 
#6816: 
    retproc                   
End


Proc pc_genmcl.px_orl:
    param          pc_genmcl.px_orl.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_orl.p u64 
    callproc       &pc_genmcl.unimpl 
#6818: 
    retproc                   
End


Proc pc_genmcl.px_addrefoff:
    param          pc_genmcl.px_addrefoff.p u64 
    local          pc_genmcl.px_addrefoff.ax u64 
    local          pc_genmcl.px_addrefoff.cx u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_addrefoff.p u64 
    callfn         &pc_genmcl.do_addrmode u64 
    pop            pc_genmcl.px_addrefoff.cx u64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #6820      i64 
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           1          
    popptroff                 u8 1 0
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
#6820: 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_addrefoff.ax u64 
    setargs                   3 0
    push           pc_genmcl.px_addrefoff.cx u64 
    push           pc_genmcl.px_addrefoff.ax u64 
    push           15         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6821: 
    retproc                   
End


Proc pc_genmcl.px_subref:
    param          pc_genmcl.px_subref.p u64 
    local          pc_genmcl.px_subref.ax u64 
    local          pc_genmcl.px_subref.bx u64 
    local          pc_genmcl.px_subref.n i64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_subref.ax u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_subref.bx u64 
    setargs                   3 0
    push           pc_genmcl.px_subref.bx u64 
    push           pc_genmcl.px_subref.ax u64 
    push           30         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_genmcl.px_subref.p u64 
    push           16         
    pushptroff                i32 1 0
    push           1          i64 
    jumple         #6823      i64 
    setargs                   1 0
    push           pc_genmcl.px_subref.p u64 
    push           16         
    pushptroff                i32 1 0
    callfn         &pc_libmcl.ispoweroftwo i64 
    pop            pc_genmcl.px_subref.n i64 
    push           pc_genmcl.px_subref.n i64 
    jumpfalse      #6824      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_subref.n i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_subref.ax u64 
    push           46         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6825      
#6824: 
    setargs                   2 0
    push           ""         u64 
    push           "SUB/REF NOT POWER OF TWO" u64 
    callproc       &pc_libmcl.merror 
#6825: 
#6823: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6826: 
    retproc                   
End


Proc pc_genmcl.px_subrefoff:
    param          pc_genmcl.px_subrefoff.p u64 
    local          pc_genmcl.px_subrefoff.scale i64 
    local          pc_genmcl.px_subrefoff.extra i64 
    local          pc_genmcl.px_subrefoff.offset i64 
    local          pc_genmcl.px_subrefoff.ax u64 
    local          pc_genmcl.px_subrefoff.bx u64 
    procentry                 
    push           pc_genmcl.px_subrefoff.p u64 
    push           16         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_subrefoff.scale i64 
    push           pc_genmcl.px_subrefoff.p u64 
    push           20         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_subrefoff.extra i64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_subrefoff.ax u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #6828      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    push           pc_genmcl.px_subrefoff.scale i64 
    mul                       i64 
    push           pc_genmcl.px_subrefoff.extra i64 
    add                       i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_subrefoff.ax u64 
    push           30         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6829      
#6828: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_subrefoff.bx u64 
    setargs                   2 0
    push           pc_genmcl.px_subrefoff.scale i64 
    push           pc_genmcl.px_subrefoff.bx u64 
    callfn         &pc_genmcl.scaleindex i64 
    pop            pc_genmcl.px_subrefoff.scale i64 
    push           pc_genmcl.px_subrefoff.scale i64 
    push           1          i64 
    jumple         #6830      i64 
    setargs                   2 0
    push           pc_genmcl.px_subrefoff.scale i64 
    push           pc_genmcl.px_subrefoff.bx u64 
    callproc       &pc_genmcl.mulimm 
#6830: 
    setargs                   3 0
    push           pc_genmcl.px_subrefoff.bx u64 
    push           pc_genmcl.px_subrefoff.ax u64 
    push           30         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_genmcl.px_subrefoff.extra i64 
    jumpfalse      #6831      i64 
    setargs                   2 0
    push           ""         u64 
    push           "SUBREF/EXTRA" u64 
    callproc       &pc_libmcl.merror 
#6831: 
#6829: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6832: 
    retproc                   
End


Proc pc_genmcl.px_neg:
    param          pc_genmcl.px_neg.p u64 
    local          pc_genmcl.px_neg.ax u64 
    local          pc_genmcl.px_neg.axlow u64 
    local          pc_genmcl.px_neg.axhigh u64 
    local          pc_genmcl.px_neg.bxlow u64 
    local          pc_genmcl.px_neg.bxhigh u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_neg.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6834      i64 0
    push           3          i64 
    casejumpeq     #6835      i64 0
    push           2          i64 
    casejumpeq     #6836      i64 0
    push           5          i64 
    casejumpeq     #6837      i64 0
    popstack                  i64 
    jump           #6838      
#6834: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_neg.ax u64 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.px_neg.ax u64 
    push           51         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6839      
#6835: 
    push           pci_mcl.labneg64 i64 
    jumptrue       #6840      i64 
    setargs                   0 0
    callfn         &pc_libmcl.mcreatefwdlabel i64 
    pop            pci_mcl.labneg64 i64 
#6840: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.labneg64 i64 
    callfn         &pc_libmcl.mgenlabelmem u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    push           74         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6839      
#6836: 
    push           pci_mcl.labneg32 i64 
    jumptrue       #6841      i64 
    setargs                   0 0
    callfn         &pc_libmcl.mcreatefwdlabel i64 
    pop            pci_mcl.labneg32 i64 
#6841: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.labneg32 i64 
    callfn         &pc_libmcl.mgenlabelmem u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    push           75         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6839      
#6837: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_neg.axlow u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_neg.axhigh u64 
    setargs                   0 0
    callfn         &pc_stackmcl.genopnd_d64 u64 
    pop            pc_genmcl.px_neg.bxhigh u64 
    setargs                   0 0
    callfn         &pc_stackmcl.genopnd_d64 u64 
    pop            pc_genmcl.px_neg.bxlow u64 
    setargs                   3 0
    push           pc_genmcl.px_neg.bxlow u64 
    push           pc_genmcl.px_neg.bxlow u64 
    push           41         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.px_neg.bxhigh u64 
    push           pc_genmcl.px_neg.bxhigh u64 
    push           41         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.px_neg.axlow u64 
    push           pc_genmcl.px_neg.bxlow u64 
    push           30         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.px_neg.axhigh u64 
    push           pc_genmcl.px_neg.bxhigh u64 
    push           32         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   2 0
    push           3          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   2 0
    push           4          i64 
    push           2          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #6839      
#6838: 
    setargs                   2 0
    push           pc_genmcl.px_neg.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "neg"      u64 
    callproc       &pc_libmcl.merrort 
#6839: 
#6842: 
    retproc                   
End


Proc pc_genmcl.px_abs:
    param          pc_genmcl.px_abs.p u64 
    local          pc_genmcl.px_abs.ax u64 
    local          pc_genmcl.px_abs.lx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_abs.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6844      i64 0
    push           3          i64 
    casejumpeq     #6845      i64 0
    push           2          i64 
    casejumpeq     #6846      i64 0
    popstack                  i64 
    jump           #6847      
#6844: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_abs.ax u64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           0          i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_abs.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    callfn         &pc_libmcl.mgenlabel u64 
    store          pc_genmcl.px_abs.lx u64 
    push           13         i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.px_abs.ax u64 
    push           51         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.px_abs.lx u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    jump           #6848      
#6845: 
    push           pci_mcl.labneg64 i64 
    jumptrue       #6849      i64 
    setargs                   0 0
    callfn         &pc_libmcl.mcreatefwdlabel i64 
    pop            pci_mcl.labneg64 i64 
#6849: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.labneg64 i64 
    callfn         &pc_libmcl.mgenlabelmem u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    push           74         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6848      
#6846: 
    push           pci_mcl.labneg32 i64 
    jumptrue       #6850      i64 
    setargs                   0 0
    callfn         &pc_libmcl.mcreatefwdlabel i64 
    pop            pci_mcl.labneg32 i64 
#6850: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.labneg32 i64 
    callfn         &pc_libmcl.mgenlabelmem u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    push           75         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6848      
#6847: 
    setargs                   2 0
    push           pc_genmcl.px_abs.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "abs"      u64 
    callproc       &pc_libmcl.merrort 
#6848: 
#6851: 
    retproc                   
End


Proc pc_genmcl.px_inot:
    param          pc_genmcl.px_inot.p u64 
    local          pc_genmcl.px_inot.ax u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_inot.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6853      i64 0
    popstack                  i64 
    jump           #6854      
#6853: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_inot.ax u64 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.px_inot.ax u64 
    push           52         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6855      
#6854: 
    setargs                   2 0
    push           pc_genmcl.px_inot.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "inot"     u64 
    callproc       &pc_libmcl.merrort 
#6855: 
#6856: 
    retproc                   
End


Proc pc_genmcl.px_notl:
    param          pc_genmcl.px_notl.p u64 
    local          pc_genmcl.px_notl.ax u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_notl.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6858      i64 0
    popstack                  i64 
    jump           #6859      
#6858: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_notl.ax u64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_notl.ax u64 
    push           41         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6860      
#6859: 
    setargs                   2 0
    push           pc_genmcl.px_notl.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "notl"     u64 
    callproc       &pc_libmcl.merrort 
#6860: 
#6861: 
    retproc                   
End


Proc pc_genmcl.px_istruel:
    param          pc_genmcl.px_istruel.p u64 
    local          pc_genmcl.px_istruel.ax u64 
    local          pc_genmcl.px_istruel.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_istruel.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6863      i64 0
    popstack                  i64 
    jump           #6864      
#6863: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_istruel.ax u64 
    setargs                   3 0
    push           pc_genmcl.px_istruel.ax u64 
    push           pc_genmcl.px_istruel.ax u64 
    push           42         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   2 0
    push           1          i64 
    push           pc_genmcl.px_istruel.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    store          pc_genmcl.px_istruel.bx u64 
    push           5          i64 
    push           59         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.px_istruel.bx u64 
    setargs                   2 0
    push           4          i64 
    push           pc_genmcl.px_istruel.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           20         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6865      
#6864: 
    setargs                   2 0
    push           pc_genmcl.px_istruel.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "istruel"  u64 
    callproc       &pc_libmcl.merrort 
#6865: 
#6866: 
    retproc                   
End


Proc pc_genmcl.px_sqr:
    param          pc_genmcl.px_sqr.p u64 
    local          pc_genmcl.px_sqr.ax u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_sqr.ax u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_sqr.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6868      i64 0
    push           3          i64 
    casejumpeq     #6869      i64 0
    push           2          i64 
    casejumpeq     #6870      i64 0
    popstack                  i64 
    jump           #6871      
#6868: 
    setargs                   3 0
    push           pc_genmcl.px_sqr.ax u64 
    push           pc_genmcl.px_sqr.ax u64 
    push           35         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6872      
#6869: 
    setargs                   3 0
    push           pc_genmcl.px_sqr.ax u64 
    push           pc_genmcl.px_sqr.ax u64 
    push           70         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6872      
#6870: 
    setargs                   3 0
    push           pc_genmcl.px_sqr.ax u64 
    push           pc_genmcl.px_sqr.ax u64 
    push           66         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6872      
#6871: 
    setargs                   2 0
    push           pc_genmcl.px_sqr.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "sqr"      u64 
    callproc       &pc_libmcl.merrort 
#6872: 
#6873: 
    retproc                   
End


Proc pc_genmcl.px_sqrt:
    param          pc_genmcl.px_sqrt.p u64 
    local          pc_genmcl.px_sqrt.ax u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_sqrt.ax u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_sqrt.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           3          i64 
    casejumpeq     #6875      i64 0
    push           2          i64 
    casejumpeq     #6876      i64 0
    popstack                  i64 
    jump           #6877      
#6875: 
    setargs                   3 0
    push           pc_genmcl.px_sqrt.ax u64 
    push           pc_genmcl.px_sqrt.ax u64 
    push           62         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6878      
#6876: 
    setargs                   3 0
    push           pc_genmcl.px_sqrt.ax u64 
    push           pc_genmcl.px_sqrt.ax u64 
    push           63         i64 
    callproc       &pc_libmcl.genmc 
    jump           #6878      
#6877: 
    setargs                   2 0
    push           pc_genmcl.px_sqrt.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "sqrt"     u64 
    callproc       &pc_libmcl.merrort 
#6878: 
#6879: 
    retproc                   
End


Proc pc_genmcl.px_sin:
    param          pc_genmcl.px_sin.p u64 
    procentry                 
    setargs                   2 0
    push           "sin*"     u64 
    push           pc_genmcl.px_sin.p u64 
    callproc       &pc_genmcl.domaths 
#6881: 
    retproc                   
End


Proc pc_genmcl.px_cos:
    param          pc_genmcl.px_cos.p u64 
    procentry                 
    setargs                   2 0
    push           "cos*"     u64 
    push           pc_genmcl.px_cos.p u64 
    callproc       &pc_genmcl.domaths 
#6883: 
    retproc                   
End


Proc pc_genmcl.px_tan:
    param          pc_genmcl.px_tan.p u64 
    procentry                 
    setargs                   2 0
    push           "tan*"     u64 
    push           pc_genmcl.px_tan.p u64 
    callproc       &pc_genmcl.domaths 
#6885: 
    retproc                   
End


Proc pc_genmcl.px_asin:
    param          pc_genmcl.px_asin.p u64 
    procentry                 
    setargs                   2 0
    push           "asin*"    u64 
    push           pc_genmcl.px_asin.p u64 
    callproc       &pc_genmcl.domaths 
#6887: 
    retproc                   
End


Proc pc_genmcl.px_acos:
    param          pc_genmcl.px_acos.p u64 
    procentry                 
    setargs                   2 0
    push           "acos*"    u64 
    push           pc_genmcl.px_acos.p u64 
    callproc       &pc_genmcl.domaths 
#6889: 
    retproc                   
End


Proc pc_genmcl.px_atan:
    param          pc_genmcl.px_atan.p u64 
    procentry                 
    setargs                   2 0
    push           "atan*"    u64 
    push           pc_genmcl.px_atan.p u64 
    callproc       &pc_genmcl.domaths 
#6891: 
    retproc                   
End


Proc pc_genmcl.px_ln:
    param          pc_genmcl.px_ln.p u64 
    procentry                 
    setargs                   2 0
    push           "log*"     u64 
    push           pc_genmcl.px_ln.p u64 
    callproc       &pc_genmcl.domaths 
#6893: 
    retproc                   
End


Proc pc_genmcl.px_log:
    param          pc_genmcl.px_log.p u64 
    procentry                 
    setargs                   2 0
    push           "log10*"   u64 
    push           pc_genmcl.px_log.p u64 
    callproc       &pc_genmcl.domaths 
#6895: 
    retproc                   
End


Proc pc_genmcl.px_exp:
    param          pc_genmcl.px_exp.p u64 
    procentry                 
    setargs                   2 0
    push           "exp*"     u64 
    push           pc_genmcl.px_exp.p u64 
    callproc       &pc_genmcl.domaths 
#6897: 
    retproc                   
End


Proc pc_genmcl.px_round:
    param          pc_genmcl.px_round.p u64 
    procentry                 
    setargs                   2 0
    push           "round*"   u64 
    push           pc_genmcl.px_round.p u64 
    callproc       &pc_genmcl.domaths 
#6899: 
    retproc                   
End


Proc pc_genmcl.px_floor:
    param          pc_genmcl.px_floor.p u64 
    procentry                 
    setargs                   2 0
    push           "floor*"   u64 
    push           pc_genmcl.px_floor.p u64 
    callproc       &pc_genmcl.domaths 
#6901: 
    retproc                   
End


Proc pc_genmcl.px_ceil:
    param          pc_genmcl.px_ceil.p u64 
    procentry                 
    setargs                   2 0
    push           "ceil*"    u64 
    push           pc_genmcl.px_ceil.p u64 
    callproc       &pc_genmcl.domaths 
#6903: 
    retproc                   
End


Proc pc_genmcl.px_fract:
    param          pc_genmcl.px_fract.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_fract.p u64 
    callproc       &pc_genmcl.unimpl 
#6905: 
    retproc                   
End


Proc pc_genmcl.px_sign:
    param          pc_genmcl.px_sign.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_sign.p u64 
    callproc       &pc_genmcl.unimpl 
#6907: 
    retproc                   
End


Proc pc_genmcl.px_atan2:
    param          pc_genmcl.px_atan2.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_atan2.p u64 
    callproc       &pc_genmcl.unimpl 
#6909: 
    retproc                   
End


Proc pc_genmcl.px_power:
    param          pc_genmcl.px_power.p u64 
    local          pc_genmcl.px_power.ax u64 
    local          pc_genmcl.px_power.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_power.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6911      i64 0
    popstack                  i64 
    jump           #6912      
#6911: 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   3 0
    push           1          i64 
    push           2          i64 
    push           2          i64 
    callproc       &pc_genmcl.do_syscall 
    jump           #6913      
    jump           #6914      
#6912: 
    setargs                   2 0
    push           pc_genmcl.px_power.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "power:"   u64 
    callproc       &pc_libmcl.merrort 
#6914: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#6913: 
    retproc                   
End


Proc pc_genmcl.px_fmod:
    param          pc_genmcl.px_fmod.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_fmod.p u64 
    callproc       &pc_genmcl.unimpl 
#6916: 
    retproc                   
End


Proc pc_genmcl.px_incr:
    param          pc_genmcl.px_incr.p u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_incr.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6918      i64 0
    push           4          i64 
    casejumpeq     #6918      i64 0
    popstack                  i64 
    jump           #6919      
#6918: 
    setargs                   3 0
    push           29         i64 
    push           53         i64 
    push           pc_genmcl.px_incr.p u64 
    callproc       &pc_genmcl.doincr 
    jump           #6920      
#6919: 
    setargs                   2 0
    push           pc_genmcl.px_incr.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "incr"     u64 
    callproc       &pc_libmcl.merrort 
#6920: 
#6921: 
    retproc                   
End


Proc pc_genmcl.px_decr:
    param          pc_genmcl.px_decr.p u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_decr.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6923      i64 0
    push           4          i64 
    casejumpeq     #6923      i64 0
    popstack                  i64 
    jump           #6924      
#6923: 
    setargs                   3 0
    push           30         i64 
    push           54         i64 
    push           pc_genmcl.px_decr.p u64 
    callproc       &pc_genmcl.doincr 
    jump           #6925      
#6924: 
    setargs                   2 0
    push           pc_genmcl.px_decr.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "decr"     u64 
    callproc       &pc_libmcl.merrort 
#6925: 
#6926: 
    retproc                   
End


Proc pc_genmcl.px_incrload:
    param          pc_genmcl.px_incrload.p u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_incrload.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6928      i64 0
    push           4          i64 
    casejumpeq     #6928      i64 0
    popstack                  i64 
    jump           #6929      
#6928: 
    setargs                   3 0
    push           29         i64 
    push           53         i64 
    push           pc_genmcl.px_incrload.p u64 
    callproc       &pc_genmcl.doincrload 
    jump           #6930      
#6929: 
    setargs                   2 0
    push           pc_genmcl.px_incrload.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "incrload" u64 
    callproc       &pc_libmcl.merrort 
#6930: 
#6931: 
    retproc                   
End


Proc pc_genmcl.px_decrload:
    param          pc_genmcl.px_decrload.p u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_decrload.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6933      i64 0
    push           4          i64 
    casejumpeq     #6933      i64 0
    popstack                  i64 
    jump           #6934      
#6933: 
    setargs                   3 0
    push           30         i64 
    push           54         i64 
    push           pc_genmcl.px_decrload.p u64 
    callproc       &pc_genmcl.doincrload 
    jump           #6935      
#6934: 
    setargs                   2 0
    push           pc_genmcl.px_decrload.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "decrload" u64 
    callproc       &pc_libmcl.merrort 
#6935: 
#6936: 
    retproc                   
End


Proc pc_genmcl.px_loadincr:
    param          pc_genmcl.px_loadincr.p u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_loadincr.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6938      i64 0
    push           4          i64 
    casejumpeq     #6938      i64 0
    popstack                  i64 
    jump           #6939      
#6938: 
    setargs                   3 0
    push           29         i64 
    push           53         i64 
    push           pc_genmcl.px_loadincr.p u64 
    callproc       &pc_genmcl.doloadincr 
    jump           #6940      
#6939: 
    setargs                   2 0
    push           pc_genmcl.px_loadincr.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "loadincr" u64 
    callproc       &pc_libmcl.merrort 
#6940: 
#6941: 
    retproc                   
End


Proc pc_genmcl.px_loaddecr:
    param          pc_genmcl.px_loaddecr.p u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_loaddecr.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6943      i64 0
    push           4          i64 
    casejumpeq     #6943      i64 0
    popstack                  i64 
    jump           #6944      
#6943: 
    setargs                   3 0
    push           30         i64 
    push           54         i64 
    push           pc_genmcl.px_loaddecr.p u64 
    callproc       &pc_genmcl.doloadincr 
    jump           #6945      
#6944: 
    setargs                   2 0
    push           pc_genmcl.px_loaddecr.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "loaddecr" u64 
    callproc       &pc_libmcl.merrort 
#6945: 
#6946: 
    retproc                   
End


Proc pc_genmcl.px_addto:
    param          pc_genmcl.px_addto.p u64 
    local          pc_genmcl.px_addto.ax u64 
    local          pc_genmcl.px_addto.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_addto.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6948      i64 0
    push           4          i64 
    casejumpeq     #6948      i64 0
    push           3          i64 
    casejumpeq     #6949      i64 0
    push           2          i64 
    casejumpeq     #6950      i64 0
    popstack                  i64 
    jump           #6951      
#6948: 
    setargs                   2 0
    push           29         i64 
    push           pc_genmcl.px_addto.p u64 
    callproc       &pc_genmcl.dobinto_int 
    jump           #6952      
#6949: 
    setargs                   2 0
    push           68         i64 
    push           pc_genmcl.px_addto.p u64 
    callproc       &pc_genmcl.dobinto_float 
    jump           #6952      
#6950: 
    setargs                   2 0
    push           64         i64 
    push           pc_genmcl.px_addto.p u64 
    callproc       &pc_genmcl.dobinto_float32 
    jump           #6952      
#6951: 
    setargs                   2 0
    push           pc_genmcl.px_addto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "addto:"   u64 
    callproc       &pc_libmcl.merrort 
#6952: 
#6953: 
    retproc                   
End


Proc pc_genmcl.px_subto:
    param          pc_genmcl.px_subto.p u64 
    local          pc_genmcl.px_subto.ax u64 
    local          pc_genmcl.px_subto.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_subto.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6955      i64 0
    push           4          i64 
    casejumpeq     #6955      i64 0
    push           3          i64 
    casejumpeq     #6956      i64 0
    push           2          i64 
    casejumpeq     #6957      i64 0
    popstack                  i64 
    jump           #6958      
#6955: 
    setargs                   2 0
    push           30         i64 
    push           pc_genmcl.px_subto.p u64 
    callproc       &pc_genmcl.dobinto_int 
    jump           #6959      
#6956: 
    setargs                   2 0
    push           69         i64 
    push           pc_genmcl.px_subto.p u64 
    callproc       &pc_genmcl.dobinto_float 
    jump           #6959      
#6957: 
    setargs                   2 0
    push           65         i64 
    push           pc_genmcl.px_subto.p u64 
    callproc       &pc_genmcl.dobinto_float32 
    jump           #6959      
#6958: 
    setargs                   2 0
    push           pc_genmcl.px_subto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "subto:"   u64 
    callproc       &pc_libmcl.merrort 
#6959: 
#6960: 
    retproc                   
End


Proc pc_genmcl.px_multo:
    param          pc_genmcl.px_multo.p u64 
    local          pc_genmcl.px_multo.ax u64 
    local          pc_genmcl.px_multo.bx u64 
    local          pc_genmcl.px_multo.cx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_multo.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6962      i64 0
    push           3          i64 
    casejumpeq     #6963      i64 0
    push           2          i64 
    casejumpeq     #6964      i64 0
    popstack                  i64 
    jump           #6965      
#6962: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_d64 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.px_multo.ax u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_multo.bx u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_multo.cx u64 
    setargs                   3 0
    push           pc_genmcl.px_multo.ax u64 
    push           pc_genmcl.px_multo.cx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #6966      i64 
    setargs                   2 0
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    push           pc_genmcl.px_multo.cx u64 
    callproc       &pc_genmcl.mulimm 
    jump           #6967      
#6966: 
    setargs                   3 0
    push           pc_genmcl.px_multo.bx u64 
    push           pc_genmcl.px_multo.cx u64 
    push           35         i64 
    callproc       &pc_libmcl.genmc 
#6967: 
    setargs                   3 0
    push           pc_genmcl.px_multo.cx u64 
    push           pc_genmcl.px_multo.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #6968      
#6963: 
    setargs                   2 0
    push           70         i64 
    push           pc_genmcl.px_multo.p u64 
    callproc       &pc_genmcl.dobinto_float 
    jump           #6968      
#6964: 
    setargs                   2 0
    push           66         i64 
    push           pc_genmcl.px_multo.p u64 
    callproc       &pc_genmcl.dobinto_float32 
    jump           #6968      
#6965: 
    setargs                   2 0
    push           pc_genmcl.px_multo.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "multo:"   u64 
    callproc       &pc_libmcl.merrort 
#6968: 
#6969: 
    retproc                   
End


Proc pc_genmcl.px_divto:
    param          pc_genmcl.px_divto.p u64 
    local          pc_genmcl.px_divto.ax u64 
    local          pc_genmcl.px_divto.bx u64 
    local          pc_genmcl.px_divto.cx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_divto.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           3          i64 
    casejumpeq     #6971      i64 0
    push           2          i64 
    casejumpeq     #6972      i64 0
    popstack                  i64 
    jump           #6973      
#6971: 
    setargs                   2 0
    push           71         i64 
    push           pc_genmcl.px_divto.p u64 
    callproc       &pc_genmcl.dobinto_float 
    jump           #6974      
#6972: 
    setargs                   2 0
    push           67         i64 
    push           pc_genmcl.px_divto.p u64 
    callproc       &pc_genmcl.dobinto_float32 
    jump           #6974      
#6973: 
    setargs                   2 0
    push           pc_genmcl.px_divto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "divto:"   u64 
    callproc       &pc_libmcl.merrort 
#6974: 
#6975: 
    retproc                   
End


Proc pc_genmcl.px_idivto:
    param          pc_genmcl.px_idivto.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_idivto.p u64 
    callproc       &pc_genmcl.unimpl 
#6977: 
    retproc                   
End


Proc pc_genmcl.px_iremto:
    param          pc_genmcl.px_iremto.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_iremto.p u64 
    callproc       &pc_genmcl.unimpl 
#6979: 
    retproc                   
End


Proc pc_genmcl.px_iandto:
    param          pc_genmcl.px_iandto.p u64 
    local          pc_genmcl.px_iandto.ax u64 
    local          pc_genmcl.px_iandto.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_iandto.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6981      i64 0
    push           4          i64 
    casejumpeq     #6981      i64 0
    popstack                  i64 
    jump           #6982      
#6981: 
    setargs                   2 0
    push           39         i64 
    push           pc_genmcl.px_iandto.p u64 
    callproc       &pc_genmcl.dobinto_int 
    jump           #6983      
#6982: 
    setargs                   2 0
    push           pc_genmcl.px_iandto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "iandto:"  u64 
    callproc       &pc_libmcl.merrort 
#6983: 
#6984: 
    retproc                   
End


Proc pc_genmcl.px_iorto:
    param          pc_genmcl.px_iorto.p u64 
    local          pc_genmcl.px_iorto.ax u64 
    local          pc_genmcl.px_iorto.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_iorto.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6986      i64 0
    push           4          i64 
    casejumpeq     #6986      i64 0
    popstack                  i64 
    jump           #6987      
#6986: 
    setargs                   2 0
    push           40         i64 
    push           pc_genmcl.px_iorto.p u64 
    callproc       &pc_genmcl.dobinto_int 
    jump           #6988      
#6987: 
    setargs                   2 0
    push           pc_genmcl.px_iorto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "iorto:"   u64 
    callproc       &pc_libmcl.merrort 
#6988: 
#6989: 
    retproc                   
End


Proc pc_genmcl.px_ixorto:
    param          pc_genmcl.px_ixorto.p u64 
    local          pc_genmcl.px_ixorto.ax u64 
    local          pc_genmcl.px_ixorto.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_ixorto.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #6991      i64 0
    push           4          i64 
    casejumpeq     #6991      i64 0
    popstack                  i64 
    jump           #6992      
#6991: 
    setargs                   2 0
    push           41         i64 
    push           pc_genmcl.px_ixorto.p u64 
    callproc       &pc_genmcl.dobinto_int 
    jump           #6993      
#6992: 
    setargs                   2 0
    push           pc_genmcl.px_ixorto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "ixorto:"  u64 
    callproc       &pc_libmcl.merrort 
#6993: 
#6994: 
    retproc                   
End


Proc pc_genmcl.px_shlto:
    param          pc_genmcl.px_shlto.p u64 
    procentry                 
    push           pc_genmcl.px_shlto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           9          i64 
    casejumpeq     #6996      i64 0
    push           4          i64 
    casejumpeq     #6996      i64 0
    popstack                  i64 
    jump           #6997      
#6996: 
    setargs                   2 0
    push           44         i64 
    push           pc_genmcl.px_shlto.p u64 
    callproc       &pc_genmcl.do_shiftnto 
    jump           #6998      
#6997: 
    setargs                   2 0
    push           pc_genmcl.px_shlto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "shlto:"   u64 
    callproc       &pc_libmcl.merrort 
#6998: 
#6999: 
    retproc                   
End


Proc pc_genmcl.px_shrto:
    param          pc_genmcl.px_shrto.p u64 
    procentry                 
    push           pc_genmcl.px_shrto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           9          i64 
    casejumpeq     #7001      i64 0
    push           4          i64 
    casejumpeq     #7002      i64 0
    popstack                  i64 
    jump           #7003      
#7001: 
    setargs                   2 0
    push           45         i64 
    push           pc_genmcl.px_shrto.p u64 
    callproc       &pc_genmcl.do_shiftnto 
    jump           #7004      
#7002: 
    setargs                   2 0
    push           46         i64 
    push           pc_genmcl.px_shrto.p u64 
    callproc       &pc_genmcl.do_shiftnto 
    jump           #7004      
#7003: 
    setargs                   2 0
    push           pc_genmcl.px_shrto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "shrto:"   u64 
    callproc       &pc_libmcl.merrort 
#7004: 
#7005: 
    retproc                   
End


Proc pc_genmcl.px_minto:
    param          pc_genmcl.px_minto.p u64 
    procentry                 
    push           pc_genmcl.px_minto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           9          i64 
    casejumpeq     #7007      i64 0
    push           4          i64 
    casejumpeq     #7008      i64 0
    push           12         i64 
    casejumpeq     #7009      i64 0
    push           11         i64 
    casejumpeq     #7010      i64 0
    popstack                  i64 
    jump           #7011      
#7007: 
    setargs                   1 0
    push           14         i64 
    callproc       &pc_genmcl.domaxto_int 
    jump           #7012      
#7008: 
    setargs                   1 0
    push           6          i64 
    callproc       &pc_genmcl.domaxto_int 
    jump           #7012      
#7009: 
    setargs                   1 0
    push           6          i64 
    callproc       &pc_genmcl.domaxto_r64 
    jump           #7012      
#7010: 
    setargs                   1 0
    push           6          i64 
    callproc       &pc_genmcl.domaxto_r32 
    jump           #7012      
#7011: 
    setargs                   2 0
    push           pc_genmcl.px_minto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "minto:"   u64 
    callproc       &pc_libmcl.merrort 
#7012: 
#7013: 
    retproc                   
End


Proc pc_genmcl.px_maxto:
    param          pc_genmcl.px_maxto.p u64 
    procentry                 
    push           pc_genmcl.px_maxto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           9          i64 
    casejumpeq     #7015      i64 0
    push           4          i64 
    casejumpeq     #7016      i64 0
    push           12         i64 
    casejumpeq     #7017      i64 0
    push           11         i64 
    casejumpeq     #7018      i64 0
    popstack                  i64 
    jump           #7019      
#7015: 
    setargs                   1 0
    push           13         i64 
    callproc       &pc_genmcl.domaxto_int 
    jump           #7020      
#7016: 
    setargs                   1 0
    push           3          i64 
    callproc       &pc_genmcl.domaxto_int 
    jump           #7020      
#7017: 
    setargs                   1 0
    push           3          i64 
    callproc       &pc_genmcl.domaxto_r64 
    jump           #7020      
#7018: 
    setargs                   1 0
    push           3          i64 
    callproc       &pc_genmcl.domaxto_r32 
    jump           #7020      
#7019: 
    setargs                   2 0
    push           pc_genmcl.px_maxto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "maxto:"   u64 
    callproc       &pc_libmcl.merrort 
#7020: 
#7021: 
    retproc                   
End


Proc pc_genmcl.px_andlto:
    param          pc_genmcl.px_andlto.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_andlto.p u64 
    callproc       &pc_genmcl.unimpl 
#7023: 
    retproc                   
End


Proc pc_genmcl.px_orlto:
    param          pc_genmcl.px_orlto.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_orlto.p u64 
    callproc       &pc_genmcl.unimpl 
#7025: 
    retproc                   
End


Proc pc_genmcl.px_addrefoffto:
    param          pc_genmcl.px_addrefoffto.p u64 
    local          pc_genmcl.px_addrefoffto.scale i64 
    local          pc_genmcl.px_addrefoffto.extra i64 
    local          pc_genmcl.px_addrefoffto.offset i64 
    local          pc_genmcl.px_addrefoffto.ax u64 
    local          pc_genmcl.px_addrefoffto.bx u64 
    local          pc_genmcl.px_addrefoffto.rx u64 
    local          pc_genmcl.px_addrefoffto.reg i64 
    local          pc_genmcl.px_addrefoffto.size i64 
    procentry                 
    push           pc_genmcl.px_addrefoffto.p u64 
    push           16         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_addrefoffto.scale i64 
    push           pc_genmcl.px_addrefoffto.p u64 
    push           20         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_addrefoffto.extra i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    push           pc_genmcl.px_addrefoffto.scale i64 
    mul                       i64 
    push           pc_genmcl.px_addrefoffto.extra i64 
    add                       i64 
    pop            pc_genmcl.px_addrefoffto.offset i64 
    setargs                   1 0
    push           2          i64 
    callfn         &pc_libmcl.ismemaddr i64 
    jumpfalse      #7027      i64 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    pop            pc_genmcl.px_addrefoffto.ax u64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    pop            pc_genmcl.px_addrefoffto.reg i64 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_addrefoffto.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_genmcl.px_addrefoffto.rx u64 
    setargs                   3 0
    push           pc_genmcl.px_addrefoffto.ax u64 
    push           pc_genmcl.px_addrefoffto.rx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #7028      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_addrefoffto.offset i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_addrefoffto.rx u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
    jump           #7029      
#7028: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_addrefoffto.bx u64 
    setargs                   2 0
    push           pc_genmcl.px_addrefoffto.scale i64 
    push           pc_genmcl.px_addrefoffto.bx u64 
    callproc       &pc_genmcl.mulimm 
    setargs                   3 0
    push           pc_genmcl.px_addrefoffto.bx u64 
    push           pc_genmcl.px_addrefoffto.rx u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
#7029: 
    setargs                   3 0
    push           pc_genmcl.px_addrefoffto.rx u64 
    push           pc_genmcl.px_addrefoffto.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_genmcl.px_addrefoffto.reg i64 
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_genmcl.px_addrefoffto.reg i64 
    popptroff                 u8 1 -1
    jump           #7030      
#7027: 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.px_addrefoffto.ax u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #7031      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_addrefoffto.offset i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_addrefoffto.ax u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
    jump           #7032      
#7031: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_addrefoffto.bx u64 
    setargs                   2 0
    push           pc_genmcl.px_addrefoffto.scale i64 
    push           pc_genmcl.px_addrefoffto.bx u64 
    callproc       &pc_genmcl.mulimm 
    setargs                   3 0
    push           pc_genmcl.px_addrefoffto.bx u64 
    push           pc_genmcl.px_addrefoffto.ax u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
#7032: 
#7030: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7033: 
    retproc                   
End


Proc pc_genmcl.px_subrefoffto:
    param          pc_genmcl.px_subrefoffto.p u64 
    local          pc_genmcl.px_subrefoffto.scale i64 
    local          pc_genmcl.px_subrefoffto.extra i64 
    local          pc_genmcl.px_subrefoffto.ax u64 
    local          pc_genmcl.px_subrefoffto.bx u64 
    procentry                 
    push           pc_genmcl.px_subrefoffto.p u64 
    push           16         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_subrefoffto.scale i64 
    push           pc_genmcl.px_subrefoffto.p u64 
    push           20         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_subrefoffto.extra i64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.px_subrefoffto.ax u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #7035      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    push           pc_genmcl.px_subrefoffto.scale i64 
    mul                       i64 
    push           pc_genmcl.px_subrefoffto.extra i64 
    add                       i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_subrefoffto.ax u64 
    push           30         i64 
    callproc       &pc_libmcl.genmc 
    jump           #7036      
#7035: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_subrefoffto.bx u64 
    setargs                   2 0
    push           pc_genmcl.px_subrefoffto.scale i64 
    push           pc_genmcl.px_subrefoffto.bx u64 
    callfn         &pc_genmcl.scaleindex i64 
    pop            pc_genmcl.px_subrefoffto.scale i64 
    push           pc_genmcl.px_subrefoffto.scale i64 
    push           1          i64 
    jumple         #7037      i64 
    setargs                   2 0
    push           pc_genmcl.px_subrefoffto.scale i64 
    push           pc_genmcl.px_subrefoffto.bx u64 
    callproc       &pc_genmcl.mulimm 
#7037: 
    setargs                   3 0
    push           pc_genmcl.px_subrefoffto.bx u64 
    push           pc_genmcl.px_subrefoffto.ax u64 
    push           30         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_genmcl.px_subrefoffto.extra i64 
    jumpfalse      #7038      i64 
    setargs                   2 0
    push           ""         u64 
    push           "SUBTOREF/EXTRA" u64 
    callproc       &pc_libmcl.merror 
#7038: 
#7036: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7039: 
    retproc                   
End


Proc pc_genmcl.px_negto:
    param          pc_genmcl.px_negto.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_negto.p u64 
    callproc       &pc_genmcl.unimpl 
#7041: 
    retproc                   
End


Proc pc_genmcl.px_absto:
    param          pc_genmcl.px_absto.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_absto.p u64 
    callproc       &pc_genmcl.unimpl 
#7043: 
    retproc                   
End


Proc pc_genmcl.px_inotto:
    param          pc_genmcl.px_inotto.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_inotto.p u64 
    callproc       &pc_genmcl.unimpl 
#7045: 
    retproc                   
End


Proc pc_genmcl.px_notlto:
    param          pc_genmcl.px_notlto.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_notlto.p u64 
    callproc       &pc_genmcl.unimpl 
#7047: 
    retproc                   
End


Proc pc_genmcl.px_istruelto:
    param          pc_genmcl.px_istruelto.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_istruelto.p u64 
    callproc       &pc_genmcl.unimpl 
#7049: 
    retproc                   
End


Proc pc_genmcl.px_typepun:
    param          pc_genmcl.px_typepun.p u64 
    local          pc_genmcl.px_typepun.ax u64 
    local          pc_genmcl.px_typepun.bx u64 
    local          pc_genmcl.px_typepun.cx u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_typepun.bx u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_typepun.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #7051      i64 0
    push           3          i64 
    casejumpeq     #7052      i64 0
    push           4          i64 
    casejumpeq     #7053      i64 0
    popstack                  i64 
    jump           #7054      
#7051: 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           2          i64 
    casejumpeq     #7055      i64 0
    push           1          i64 
    casejumpeq     #7056      i64 0
    popstack                  i64 
    jump           #7057      
#7055: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_d64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_typepun.ax u64 
    setargs                   3 0
    push           pc_genmcl.px_typepun.bx u64 
    push           pc_genmcl.px_typepun.ax u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #7058      
#7056: 
    jump           #7058      
#7057: 
    jump           #7059      
#7058: 
    jump           #7060      
#7052: 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           1          i64 
    casejumpeq     #7061      i64 0
    popstack                  i64 
    jump           #7062      
#7061: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_x64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_typepun.ax u64 
    setargs                   3 0
    push           pc_genmcl.px_typepun.bx u64 
    push           pc_genmcl.px_typepun.ax u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #7063      
#7062: 
    jump           #7059      
#7063: 
    jump           #7060      
#7053: 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           3          i64 
    casejumpeq     #7064      i64 0
    push           1          i64 
    casejumpeq     #7065      i64 0
    popstack                  i64 
    jump           #7066      
#7064: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_d64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_typepun.ax u64 
    setargs                   2 0
    push           4          i64 
    push           pc_genmcl.px_typepun.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    pop            pc_genmcl.px_typepun.cx u64 
    setargs                   3 0
    push           pc_genmcl.px_typepun.bx u64 
    push           pc_genmcl.px_typepun.cx u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   3 0
    push           pc_genmcl.px_typepun.cx u64 
    push           pc_genmcl.px_typepun.ax u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_genmcl.px_typepun.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #7067      i64 
    push           19         i64 
    resetmult                 
    jump           #7068      
#7067: 
    push           20         i64 
    endmult                   
#7068: 
    callproc       &pc_libmcl.genmc 
    jump           #7069      
#7065: 
    jump           #7069      
#7066: 
    jump           #7059      
#7069: 
    jump           #7060      
#7054: 
!error::
#7059: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "PSTDNAMES[P.MODE]=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pc_tables.pstdnames 
    push           pc_genmcl.px_typepun.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "FMTNAMES[PCLSTACK[1].FMT]=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pci_mcl.fmtnames 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "TYPEPUN"  u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           ""         u64 
    push           "TYPEPUN"  u64 
    callproc       &pc_libmcl.merror 
#7060: 
#7070: 
    retproc                   
End


Proc pc_genmcl.px_softconv:
    param          pc_genmcl.px_softconv.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_softconv.p u64 
    callproc       &pc_genmcl.unimpl 
#7072: 
    retproc                   
End


Proc pc_genmcl.px_widen:
    param          pc_genmcl.px_widen.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_widen.p u64 
    callproc       &pc_genmcl.unimpl 
#7074: 
    retproc                   
End


Proc pc_genmcl.px_narrow:
    param          pc_genmcl.px_narrow.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_narrow.p u64 
    callproc       &pc_genmcl.unimpl 
#7076: 
    retproc                   
End


Proc pc_genmcl.px_float:
    param          pc_genmcl.px_float.p u64 
    local          pc_genmcl.px_float.ax u64 
    local          pc_genmcl.px_float.fx u64 
    local          pc_genmcl.px_float.lab i64 
    local          pc_genmcl.px_float.lab2 i64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_float.ax u64 
    push           pc_genmcl.px_float.p u64 
    push           16         
    pushptroff                i32 1 0
    push           9          i64 
    casejumpeq     #7078      i64 0
    push           4          i64 
    casejumpeq     #7079      i64 0
    popstack                  i64 
    jump           #7080      
#7078: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_x64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_float.fx u64 
    setargs                   3 0
    push           pc_genmcl.px_float.ax u64 
    push           pc_genmcl.px_float.fx u64 
    push           85         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    jump           #7081      
#7079: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_x64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_float.fx u64 
    setargs                   0 0
    callfn         &pc_libmcl.mcreatefwdlabel i64 
    pop            pc_genmcl.px_float.lab i64 
    setargs                   0 0
    callfn         &pc_libmcl.mcreatefwdlabel i64 
    pop            pc_genmcl.px_float.lab2 i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           0          i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_float.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_float.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           12         i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.px_float.ax u64 
    push           pc_genmcl.px_float.fx u64 
    push           85         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_float.lab2 i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           26         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           pc_genmcl.px_float.lab i64 
    callproc       &pc_libmcl.mdefinefwdlabel 
    push           pci_mcl.labmask63 i64 
    jumptrue       #7082      i64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pci_mcl.labmask63 i64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pci_mcl.laboffset64 i64 
#7082: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.labmask63 i64 
    callfn         &pc_libmcl.mgenlabelmem u64 
    push           pc_genmcl.px_float.ax u64 
    push           39         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.px_float.ax u64 
    push           pc_genmcl.px_float.fx u64 
    push           85         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.laboffset64 i64 
    callfn         &pc_libmcl.mgenlabelmem u64 
    push           pc_genmcl.px_float.fx u64 
    push           68         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           pc_genmcl.px_float.lab2 i64 
    callproc       &pc_libmcl.mdefinefwdlabel 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    jump           #7081      
#7080: 
    setargs                   2 0
    push           pc_genmcl.px_float.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "float"    u64 
    callproc       &pc_libmcl.merrort 
#7081: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7083: 
    retproc                   
End


Proc pc_genmcl.px_fix:
    param          pc_genmcl.px_fix.p u64 
    local          pc_genmcl.px_fix.fx u64 
    local          pc_genmcl.px_fix.ax u64 
    local          pc_genmcl.px_fix.newmode i64 
    local          pc_genmcl.px_fix.oldmode i64 
    procentry                 
    push           pc_genmcl.px_fix.p u64 
    push           3          
    pushptroff                u8 1 0
    pop            pc_genmcl.px_fix.newmode i64 
    push           pc_genmcl.px_fix.p u64 
    push           16         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_fix.oldmode i64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_fix.newmode i64 
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #7085      i64 0
    popstack                  i64 
    jump           #7086      
#7085: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_fix.fx u64 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_d64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_fix.ax u64 
    setargs                   3 0
    push           pc_genmcl.px_fix.fx u64 
    push           pc_genmcl.px_fix.ax u64 
    startmult                 
    push           pc_genmcl.px_fix.oldmode i64 
    push           12         i64 
    jumpne         #7087      i64 
    push           83         i64 
    resetmult                 
    jump           #7088      
#7087: 
    push           82         i64 
    endmult                   
#7088: 
    callproc       &pc_libmcl.genmc 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #7089      
#7086: 
    setargs                   2 0
    push           pc_genmcl.px_fix.newmode i64 
    push           "fix->"    u64 
    callproc       &pc_libmcl.merrort 
#7089: 
#7090: 
    retproc                   
End


Proc pc_genmcl.px_truncate:
    param          pc_genmcl.px_truncate.p u64 
    local          pc_genmcl.px_truncate.ax u64 
    local          pc_genmcl.px_truncate.mask i64 
    procentry                 
    push           &pc_tables.psize 
    push           pc_genmcl.px_truncate.p u64 
    push           16         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #7092      i64 0
    push           2          i64 
    casejumpeq     #7093      i64 0
    push           4          i64 
    casejumpeq     #7094      i64 0
    popstack                  i64 
    jump           #7095      
#7092: 
    push           255        i64 
    pop            pc_genmcl.px_truncate.mask i64 
    jump           #7096      
#7093: 
    push           65535      i64 
    pop            pc_genmcl.px_truncate.mask i64 
    jump           #7096      
#7094: 
    push           4294967295 i64 
    pop            pc_genmcl.px_truncate.mask i64 
    jump           #7096      
#7095: 
#7096: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_truncate.ax u64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_truncate.mask i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_truncate.ax u64 
    push           39         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           &pc_tables.psize 
    push           pc_genmcl.px_truncate.p u64 
    push           16         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    push           pc_genmcl.px_truncate.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           pc_genmcl.px_truncate.ax u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_genmcl.px_truncate.p u64 
    push           16         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    jumpfalse      #7097      i64 
    push           19         i64 
    resetmult                 
    jump           #7098      
#7097: 
    push           20         i64 
    endmult                   
#7098: 
    callproc       &pc_libmcl.genmc 
#7099: 
    retproc                   
End


Proc pc_genmcl.px_fwiden:
    param          pc_genmcl.px_fwiden.p u64 
    local          pc_genmcl.px_fwiden.fx u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_fwiden.fx u64 
    setargs                   3 0
    push           pc_genmcl.px_fwiden.fx u64 
    push           pc_genmcl.px_fwiden.fx u64 
    push           87         i64 
    callproc       &pc_libmcl.genmc 
    push           2          i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
#7101: 
    retproc                   
End


Proc pc_genmcl.px_fnarrow:
    param          pc_genmcl.px_fnarrow.p u64 
    local          pc_genmcl.px_fnarrow.ax u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_fnarrow.ax u64 
    setargs                   3 0
    push           pc_genmcl.px_fnarrow.ax u64 
    push           pc_genmcl.px_fnarrow.ax u64 
    push           86         i64 
    callproc       &pc_libmcl.genmc 
    push           3          i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
#7103: 
    retproc                   
End


Proc pc_genmcl.px_softtruncw:
    param          pc_genmcl.px_softtruncw.p u64 
    local          pc_genmcl.px_softtruncw.ax u64 
    local          pc_genmcl.px_softtruncw.bx u64 
    local          pc_genmcl.px_softtruncw.bx2 u64 
    local          pc_genmcl.px_softtruncw.lx u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_softtruncw.ax u64 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.unsetwideopnd 
#7105: 
    retproc                   
End


Proc pc_genmcl.px_widenw:
    param          pc_genmcl.px_widenw.p u64 
    local          pc_genmcl.px_widenw.ax u64 
    local          pc_genmcl.px_widenw.bx u64 
    local          pc_genmcl.px_widenw.bx2 u64 
    local          pc_genmcl.px_widenw.lx u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_widenw.ax u64 
    setargs                   0 0
    callfn         &pc_stackmcl.genopnd_d64 u64 
    pop            pc_genmcl.px_widenw.bx u64 
    setargs                   2 0
    push           4          i64 
    push           pc_genmcl.px_widenw.bx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    pop            pc_genmcl.px_widenw.bx2 u64 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    push           &pc_tables.psigned 
    push           pc_genmcl.px_widenw.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #7107      i64 
    setargs                   3 0
    push           pc_genmcl.px_widenw.bx2 u64 
    push           pc_genmcl.px_widenw.bx2 u64 
    push           41         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           0          i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_widenw.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    callfn         &pc_libmcl.mgenlabel u64 
    store          pc_genmcl.px_widenw.lx u64 
    push           13         i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.px_widenw.bx u64 
    push           52         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.px_widenw.lx u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    jump           #7108      
#7107: 
    setargs                   3 0
    push           pc_genmcl.px_widenw.bx2 u64 
    push           pc_genmcl.px_widenw.bx2 u64 
    push           41         i64 
    callproc       &pc_libmcl.genmc 
#7108: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.setwideopnd 
#7109: 
    retproc                   
End


Proc pc_genmcl.px_len:
    param          pc_genmcl.px_len.p u64 
    procentry                 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.unsetwideopnd 
#7111: 
    retproc                   
End


Proc pc_genmcl.px_lwb:
    param          pc_genmcl.px_lwb.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_lwb.p u64 
    callproc       &pc_genmcl.unimpl 
#7113: 
    retproc                   
End


Proc pc_genmcl.px_upb:
    param          pc_genmcl.px_upb.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_upb.p u64 
    callproc       &pc_genmcl.unimpl 
#7115: 
    retproc                   
End


Proc pc_genmcl.px_bounds:
    param          pc_genmcl.px_bounds.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_bounds.p u64 
    callproc       &pc_genmcl.unimpl 
#7117: 
    retproc                   
End


Proc pc_genmcl.px_lenstr:
    param          pc_genmcl.px_lenstr.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_lenstr.p u64 
    callproc       &pc_genmcl.unimpl 
#7119: 
    retproc                   
End


Proc pc_genmcl.px_bitwidth:
    param          pc_genmcl.px_bitwidth.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_bitwidth.p u64 
    callproc       &pc_genmcl.unimpl 
#7121: 
    retproc                   
End


Proc pc_genmcl.px_bytesize:
    param          pc_genmcl.px_bytesize.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_bytesize.p u64 
    callproc       &pc_genmcl.unimpl 
#7123: 
    retproc                   
End


Proc pc_genmcl.px_bytes:
    param          pc_genmcl.px_bytes.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_bytes.p u64 
    callproc       &pc_genmcl.unimpl 
#7125: 
    retproc                   
End


Proc pc_genmcl.px_minvalue:
    param          pc_genmcl.px_minvalue.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_minvalue.p u64 
    callproc       &pc_genmcl.unimpl 
#7127: 
    retproc                   
End


Proc pc_genmcl.px_maxvalue:
    param          pc_genmcl.px_maxvalue.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_maxvalue.p u64 
    callproc       &pc_genmcl.unimpl 
#7129: 
    retproc                   
End


Proc pc_genmcl.px_typestr:
    param          pc_genmcl.px_typestr.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_typestr.p u64 
    callproc       &pc_genmcl.unimpl 
#7131: 
    retproc                   
End


Proc pc_genmcl.px_error:
    param          pc_genmcl.px_error.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_error.p u64 
    callproc       &pc_genmcl.unimpl 
#7133: 
    retproc                   
End


Proc pc_genmcl.px_arraytoslice:
    param          pc_genmcl.px_arraytoslice.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_arraytoslice.p u64 
    callproc       &pc_genmcl.unimpl 
#7135: 
    retproc                   
End


Proc pc_genmcl.px_ichartoslice:
    param          pc_genmcl.px_ichartoslice.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_ichartoslice.p u64 
    callproc       &pc_genmcl.unimpl 
#7137: 
    retproc                   
End


Proc pc_genmcl.px_softtruncshort:
    param          pc_genmcl.px_softtruncshort.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_softtruncshort.p u64 
    callproc       &pc_genmcl.unimpl 
#7139: 
    retproc                   
End


Proc pc_genmcl.px_charaxtoichar:
    param          pc_genmcl.px_charaxtoichar.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_charaxtoichar.p u64 
    callproc       &pc_genmcl.unimpl 
#7141: 
    retproc                   
End


Proc pc_genmcl.px_sliceptr:
    param          pc_genmcl.px_sliceptr.p u64 
    procentry                 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.unsetwideopnd 
#7143: 
    retproc                   
End


Proc pc_genmcl.px_startmult:
    param          pc_genmcl.px_startmult.p u64 
    procentry                 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.pushallopnds 
#7145: 
    retproc                   
End


Proc pc_genmcl.px_resetmult:
    param          pc_genmcl.px_resetmult.p u64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           3          
    pushptroff                u8 1 0
    jumpfalse      #7147      i64 
    setargs                   2 0
    push           ""         u64 
    push           "RESETMULT/XREG" u64 
    callproc       &pc_libmcl.merror 
    jump           #7148      
#7147: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.movetoreg 
#7148: 
    push           pc_genmcl.px_resetmult.p u64 
    push           1          
    pushptroff                u8 1 0
    push           193        i64 
    jumpne         #7149      i64 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7149: 
#7150: 
    retproc                   
End


Proc pc_genmcl.px_endmult:
    param          pc_genmcl.px_endmult.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_endmult.p u64 
    callproc       &pc_genmcl.px_resetmult 
#7152: 
    retproc                   
End


Proc pc_genmcl.px_setret:
    param          pc_genmcl.px_setret.p u64 
    procentry                 
    setargs                   2 0
    push           1          i64 
    push           1          i64 
    callproc       &pc_genmcl.do_setret 
    push           0          i64 
    push           &pci_mcl.regset 
    push           1          i64 
    popptroff                 u8 1 -1
    push           0          i64 
    push           &pci_mcl.xregset 
    push           1          i64 
    popptroff                 u8 1 -1
#7154: 
    retproc                   
End


Proc pc_genmcl.px_setretmult:
    param          pc_genmcl.px_setretmult.p u64 
    local          pc_genmcl.px_setretmult.k i64 
    local          pc_genmcl.px_setretmult.wide i64 
    local          pc_genmcl.px_setretmult.av_1 i64 
    local          pc_genmcl.px_setretmult.i i64 
    procentry                 
    push           0          i64 
    pop            pc_genmcl.px_setretmult.k i64 
#7156: 
    push           1          i64 
    pop            pc_genmcl.px_setretmult.i i64 
    push           pc_genmcl.px_setretmult.p u64 
    push           16         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_setretmult.av_1 i64 
    push           pc_genmcl.px_setretmult.av_1 i64 
    push           1          i64 
    jumplt         #7157      i64 
#7158: 
    push           &pc_genmcl.px_setretmult.k 
    incr                      i64 1
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           4          
    pushptroff                u8 1 0
    pop            pc_genmcl.px_setretmult.wide i64 
    setargs                   2 0
    push           &pc_genmcl.multxregs 
    push           pc_genmcl.px_setretmult.k i64 
    pushptroff                i64 8 -8
    push           &pc_genmcl.multregs 
    push           pc_genmcl.px_setretmult.k i64 
    pushptroff                i64 8 -8
    callproc       &pc_genmcl.do_setret 
#7159: 
    forup          #7158      i64 1
    opnd           pc_genmcl.px_setretmult.i 
    opnd           pc_genmcl.px_setretmult.av_1 
#7157: 
#7160: 
    push           1          i64 
    pop            pc_genmcl.px_setretmult.i i64 
    push           pc_genmcl.px_setretmult.k i64 
    push           1          i64 
    jumplt         #7161      i64 
#7162: 
    push           0          i64 
    push           &pci_mcl.xregset 
    push           &pc_genmcl.multxregs 
    push           pc_genmcl.px_setretmult.i i64 
    pushptroff                i64 8 -8
    storeptroff               u8 1 -1
    push           &pci_mcl.regset 
    push           &pc_genmcl.multregs 
    push           pc_genmcl.px_setretmult.i i64 
    pushptroff                i64 8 -8
    popptroff                 u8 1 -1
#7163: 
    forup          #7162      i64 1
    opnd           pc_genmcl.px_setretmult.i 
    opnd           pc_genmcl.px_setretmult.k 
#7161: 
#7164: 
    retproc                   
End


Proc pc_genmcl.px_setargs:
    param          pc_genmcl.px_setargs.p u64 
    local          pc_genmcl.px_setargs.nslots i64 
    local          pc_genmcl.px_setargs.shadow i64 
    local          pc_genmcl.px_setargs.align i64 
    local          pc_genmcl.px_setargs.nargs i64 
    local          pc_genmcl.px_setargs.opcode i64 
    local          pc_genmcl.px_setargs.nvars i64 
    procentry                 
    push           pc_genmcl.px_setargs.p u64 
    jumpfalse      #7166      u64 
    push           pc_genmcl.px_setargs.p u64 
    push           16         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_setargs.nargs i64 
    push           pc_genmcl.px_setargs.p u64 
    push           20         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_setargs.nvars i64 
    push           pc_genmcl.px_setargs.p u64 
    push           1          
    pushptroff                u8 1 0
    pop            pc_genmcl.px_setargs.opcode i64 
    jump           #7167      
#7166: 
    push           pci_mcl.sa_nargs i64 
    pop            pc_genmcl.px_setargs.nargs i64 
    push           0          i64 
    pop            pc_genmcl.px_setargs.nvars i64 
    push           0          i64 
    pop            pc_genmcl.px_setargs.opcode i64 
#7167: 
    push           0          i64 
    pop            pc_genmcl.px_setargs.nslots i64 
    push           0          i64 
    pop            pc_genmcl.px_setargs.shadow i64 
    push           0          i64 
    pop            pc_genmcl.px_setargs.align i64 
    push           pc_genmcl.px_setargs.opcode i64 
    push           197        i64 
    casejumpeq     #7168      i64 0
    popstack                  i64 
    jump           #7169      
#7168: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.saveallopnds 
    jump           #7170      
#7169: 
    setargs                   1 0
    push           pc_genmcl.px_setargs.nargs i64 
    push           1          i64 
    add                       i64 
    callproc       &pc_stackmcl.saveallopnds 
#7170: 
    push           pc_genmcl.px_setargs.nargs i64 
    push           4          i64 
    jumpgt         #7171      i64 
    push           pci_mcl.mstackdepth i64 
    push           0          i64 
    jumpne         #7172      i64 
    jump           #7173      
#7172: 
    push           1          i64 
    pop            pc_genmcl.px_setargs.shadow i64 
    push           pci_mcl.mstackdepth i64 
    push           0          i64 
    dotindex                  i64 
    pop            pc_genmcl.px_setargs.align i64 
    push           4          i64 
    pop            pc_genmcl.px_setargs.nslots i64 
#7173: 
    jump           #7174      
#7171: 
    push           1          i64 
    pop            pc_genmcl.px_setargs.shadow i64 
    push           pc_genmcl.px_setargs.nargs i64 
    pop            pc_genmcl.px_setargs.nslots i64 
    push           pci_mcl.mstackdepth i64 
    push           pc_genmcl.px_setargs.nslots i64 
    add                       i64 
    push           0          i64 
    dotindex                  i64 
    pop            pc_genmcl.px_setargs.align i64 
#7174: 
    push           &pc_genmcl.px_setargs.nslots 
    push           pc_genmcl.px_setargs.align i64 
    addto                     i64 
    push           pc_genmcl.px_setargs.align i64 
    jumpfalse      #7175      i64 
    push           pc_genmcl.px_setargs.opcode i64 
    push           197        i64 
    jumpne         #7176      i64 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.pushslots 
    push           0          i64 
    pop            pc_genmcl.px_setargs.align i64 
#7176: 
#7175: 
    push           pci_mcl.ncalldepth i64 
    push           16         i64 
    jumplt         #7177      i64 
    setargs                   2 0
    push           ""         u64 
    push           "Too many nested calls" u64 
    callproc       &pc_libmcl.merror 
#7177: 
    push           &pci_mcl.ncalldepth 
    incr                      i64 1
    push           pci_mcl.ncalldepth i64 
    push           1          i64 
    jumpge         #7178      i64 
    setargs                   1 0
    push           "CALLDEPTH?" u64 
    callproc       &mlibp.abortprogram 
#7178: 
    push           pc_genmcl.px_setargs.nargs i64 
    push           &pci_mcl.callargs 
    push           pci_mcl.ncalldepth i64 
    popptroff                 u8 1 -1
    push           pc_genmcl.px_setargs.nvars i64 
    push           &pci_mcl.callnvars 
    push           pci_mcl.ncalldepth i64 
    popptroff                 u8 1 -1
    push           pc_genmcl.px_setargs.nslots i64 
    push           &pci_mcl.callslots 
    push           pci_mcl.ncalldepth i64 
    popptroff                 i64 8 -8
    push           pc_genmcl.px_setargs.shadow i64 
    push           &pci_mcl.callshadow 
    push           pci_mcl.ncalldepth i64 
    popptroff                 i64 8 -8
    push           pc_genmcl.px_setargs.align i64 
    push           &pci_mcl.callalign 
    push           pci_mcl.ncalldepth i64 
    popptroff                 u8 1 -1
#7179: 
    retproc                   
End


Proc pc_genmcl.px_duplstack:
    param          pc_genmcl.px_duplstack.p u64 
    local          pc_genmcl.px_duplstack.ax u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_duplstack.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           5          i64 
    jumplt         #7181      i64 
    setargs                   2 0
    push           pc_genmcl.px_duplstack.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "duplstack" u64 
    callproc       &pc_libmcl.merrort 
#7181: 
    setargs                   0 0
    callproc       &pc_stackmcl.duploperand 
#7182: 
    retproc                   
End


Proc pc_genmcl.px_swapstack:
    param          pc_genmcl.px_swapstack.p u64 
    procentry                 
    setargs                   2 0
    push           pc_genmcl.px_swapstack.p u64 
    push           16         
    pushptroff                i32 1 0
    push           1          i64 
    add                       i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
#7184: 
    retproc                   
End


Proc pc_genmcl.px_getnprocs:
    param          pc_genmcl.px_getnprocs.p u64 
    procentry                 
    setargs                   0 0
    callproc       &pc_genmcl.dosetfntable 
    setargs                   2 0
    push           0          i64 
    push           pci_mcl.lab_funcnprocs i64 
    callproc       &pc_stackmcl.addlabel 
#7186: 
    retproc                   
End


Proc pc_genmcl.px_getprocname:
    param          pc_genmcl.px_getprocname.p u64 
    local          pc_genmcl.px_getprocname.ax u64 
    procentry                 
    setargs                   0 0
    callproc       &pc_genmcl.dosetfntable 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_getprocname.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #7188      i64 0
    popstack                  i64 
    jump           #7189      
#7188: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_getprocname.ax u64 
    setargs                   3 0
    setargs                   7 0
    push           0          u64 
    push           pci_mcl.lab_funcnametable i64 
    push           0          i64 
    push           -8         i64 
    push           8          i64 
    push           pc_genmcl.px_getprocname.ax u64 
    push           10         
    pushptroff                u8 1 0
    push           0          i64 
    callfn         &pc_libmcl.mgenindex u64 
    push           pc_genmcl.px_getprocname.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #7190      
#7189: 
    setargs                   2 0
    push           pc_genmcl.px_getprocname.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "gpn"      u64 
    callproc       &pc_libmcl.merrort 
#7190: 
#7191: 
    retproc                   
End


Proc pc_genmcl.px_getprocaddr:
    param          pc_genmcl.px_getprocaddr.p u64 
    local          pc_genmcl.px_getprocaddr.ax u64 
    procentry                 
    setargs                   0 0
    callproc       &pc_genmcl.dosetfntable 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_getprocaddr.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #7193      i64 0
    popstack                  i64 
    jump           #7194      
#7193: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_getprocaddr.ax u64 
    setargs                   3 0
    setargs                   7 0
    push           0          u64 
    push           pci_mcl.lab_funcaddrtable i64 
    push           0          i64 
    push           -8         i64 
    push           8          i64 
    push           pc_genmcl.px_getprocaddr.ax u64 
    push           10         
    pushptroff                u8 1 0
    push           0          i64 
    callfn         &pc_libmcl.mgenindex u64 
    push           pc_genmcl.px_getprocaddr.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #7195      
#7194: 
    setargs                   2 0
    push           pc_genmcl.px_getprocaddr.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "gpa"      u64 
    callproc       &pc_libmcl.merrort 
#7195: 
#7196: 
    retproc                   
End


Proc pc_genmcl.px_last:
    param          pc_genmcl.px_last.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_last.p u64 
    callproc       &pc_genmcl.unimpl 
#7198: 
    retproc                   
End


Proc pc_genmcl.dobin_float:
    param          pc_genmcl.dobin_float.opc i64 
    local          pc_genmcl.dobin_float.ax u64 
    local          pc_genmcl.dobin_float.bx u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dobin_float.ax u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dobin_float.bx u64 
    setargs                   3 0
    push           pc_genmcl.dobin_float.bx u64 
    push           pc_genmcl.dobin_float.ax u64 
    push           pc_genmcl.dobin_float.opc i64 
    callproc       &pc_libmcl.genmc 
#7200: 
    retproc                   
End


Proc pc_genmcl.do_pushparams: i64
    param          pc_genmcl.do_pushparams.p u64 
    param          pc_genmcl.do_pushparams.isptr i64 
    local          pc_genmcl.do_pushparams.pushedslots i64 
    local          pc_genmcl.do_pushparams.nparams i64 
    local          pc_genmcl.do_pushparams.nvars i64 
    local          pc_genmcl.do_pushparams.nargs i64 
    procentry                 
    push           pc_genmcl.do_pushparams.p u64 
    jumpfalse      #7202      u64 
    push           &pci_mcl.callargs 
    push           pci_mcl.ncalldepth i64 
    pushptroff                u8 1 -1
    pop            pc_genmcl.do_pushparams.nargs i64 
    push           &pci_mcl.callnvars 
    push           pci_mcl.ncalldepth i64 
    pushptroff                u8 1 -1
    pop            pc_genmcl.do_pushparams.nvars i64 
    jump           #7203      
#7202: 
    push           pci_mcl.sa_nargs i64 
    pop            pc_genmcl.do_pushparams.nargs i64 
    push           0          i64 
    pop            pc_genmcl.do_pushparams.isptr i64 
    push           0          i64 
    pop            pc_genmcl.do_pushparams.nvars i64 
#7203: 
    push           pc_genmcl.do_pushparams.nargs i64 
    push           pci_mcl.inf_maxargs i64 
    jumple         #7204      i64 
    push           pc_genmcl.do_pushparams.nargs i64 
    push           4          i64 
    jumpgt         #7204      i64 
    push           pc_genmcl.do_pushparams.nargs i64 
    pop            pci_mcl.inf_maxargs i64 
#7204: 
    push           pc_genmcl.do_pushparams.nargs i64 
    pop            pc_genmcl.do_pushparams.nparams i64 
    push           pc_genmcl.do_pushparams.nparams i64 
    push           4          i64 
    jumple         #7205      i64 
    setargs                   1 0
    push           pc_genmcl.do_pushparams.isptr i64 
    push           4          i64 
    add                       i64 
    push           1          i64 
    add                       i64 
    callproc       &pc_stackmcl.pushallopnds 
#7205: 
    setargs                   3 0
    push           pc_genmcl.do_pushparams.isptr i64 
    push           pc_genmcl.do_pushparams.nvars i64 
    push           pc_genmcl.do_pushparams.nparams i64 
    callproc       &pc_genmcl.do_pushlowparams 
    push           &pci_mcl.callshadow 
    push           pci_mcl.ncalldepth i64 
    pushptroff                i64 8 -8
    jumpfalse      #7206      i64 
    setargs                   1 0
    push           &pci_mcl.callalign 
    push           pci_mcl.ncalldepth i64 
    pushptroff                u8 1 -1
    push           4          i64 
    add                       i64 
    callproc       &pc_stackmcl.pushslots 
#7206: 
    push           &pci_mcl.callslots 
    push           pci_mcl.ncalldepth i64 
    pushptroff                i64 8 -8
    pop            pc_genmcl.do_pushparams.pushedslots i64 
    push           &pci_mcl.ncalldepth 
    decr                      i64 1
    push           pc_genmcl.do_pushparams.pushedslots i64 
    setret                    i64 
    jump           #7207      
#7207: 
    retfn                     i64 
End


Proc pc_genmcl.do_pushlowparams:
    param          pc_genmcl.do_pushlowparams.nparams i64 
    param          pc_genmcl.do_pushlowparams.nvariadics i64 
    param          pc_genmcl.do_pushlowparams.isptr i64 
    local          pc_genmcl.do_pushlowparams.ireg i64 
    local          pc_genmcl.do_pushlowparams.xreg i64 
    local          pc_genmcl.do_pushlowparams.j i64 
    local          pc_genmcl.do_pushlowparams.i i64 
    procentry                 
    push           pc_genmcl.do_pushlowparams.nparams i64 
    push           0          i64 
    jumpne         #7209      i64 
    jump           #7210      
#7209: 
    push           &pc_genmcl.do_pushlowparams.nparams 
    push           4          i64 
    minto                     i64 
#7211: 
    push           1          i64 
    pop            pc_genmcl.do_pushlowparams.i i64 
    push           pc_genmcl.do_pushlowparams.nparams i64 
    push           1          i64 
    jumplt         #7212      i64 
#7213: 
    push           pc_genmcl.do_pushlowparams.i i64 
    push           pc_genmcl.do_pushlowparams.isptr i64 
    add                       i64 
    pop            pc_genmcl.do_pushlowparams.j i64 
    push           11         i64 
    push           pc_genmcl.do_pushlowparams.i i64 
    add                       i64 
    push           1          i64 
    sub                       i64 
    pop            pc_genmcl.do_pushlowparams.ireg i64 
    push           1          i64 
    push           pc_genmcl.do_pushlowparams.i i64 
    add                       i64 
    push           1          i64 
    sub                       i64 
    pop            pc_genmcl.do_pushlowparams.xreg i64 
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.do_pushlowparams.j i64 
    addrefoff                 block:15 15 -15
    push           3          
    pushptroff                u8 1 0
    jumpfalse      #7214      i64 
    push           pc_genmcl.do_pushlowparams.nvariadics i64 
    jumpfalse      #7215      i64 
    push           pc_genmcl.do_pushlowparams.i i64 
    push           pc_genmcl.do_pushlowparams.nvariadics i64 
    jumpge         #7216      i64 
#7215: 
    push           0          i64 
    pop            pc_genmcl.do_pushlowparams.ireg i64 
#7216: 
    jump           #7217      
#7214: 
    push           0          i64 
    pop            pc_genmcl.do_pushlowparams.xreg i64 
#7217: 
    push           pc_genmcl.do_pushlowparams.ireg i64 
    jumpfalse      #7218      i64 
    setargs                   2 0
    push           pc_genmcl.do_pushlowparams.ireg i64 
    push           pc_genmcl.do_pushlowparams.j i64 
    callproc       &pc_stackmcl.loadparam 
#7218: 
    push           pc_genmcl.do_pushlowparams.xreg i64 
    jumpfalse      #7219      i64 
    setargs                   2 0
    push           pc_genmcl.do_pushlowparams.xreg i64 
    push           pc_genmcl.do_pushlowparams.j i64 
    callproc       &pc_stackmcl.loadxparam 
#7219: 
#7220: 
    forup          #7213      i64 1
    opnd           pc_genmcl.do_pushlowparams.i 
    opnd           pc_genmcl.do_pushlowparams.nparams 
#7212: 
#7210: 
    retproc                   
End


Proc pc_genmcl.do_for:
    param          pc_genmcl.do_for.p u64 
    param          pc_genmcl.do_for.incop i64 
    param          pc_genmcl.do_for.addop i64 
    param          pc_genmcl.do_for.cond i64 
    local          pc_genmcl.do_for.q u64 
    local          pc_genmcl.do_for.r u64 
    local          pc_genmcl.do_for.ax u64 
    local          pc_genmcl.do_for.bx u64 
    local          pc_genmcl.do_for.cx u64 
    local          pc_genmcl.do_for.dx u64 
    local          pc_genmcl.do_for.mx u64 
    local          pc_genmcl.do_for.reg i64 
    procentry                 
    push           pc_genmcl.do_for.p u64 
    push           1          i64 
    addrefoff                 u64 32 0
    pop            pc_genmcl.do_for.q u64 
    push           pc_genmcl.do_for.q u64 
    push           1          i64 
    addrefoff                 u64 32 0
    store          pc_genmcl.currpcl u64 
    pop            pc_genmcl.do_for.r u64 
    setargs                   1 0
    push           pc_genmcl.do_for.q u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    pop            pc_genmcl.do_for.mx u64 
    push           pc_genmcl.do_for.q u64 
    push           8          
    pushptroff                u64 1 0
    push           50         
    pushptroff                u8 1 0
    jumpfalse      #7222      i64 
    push           pc_genmcl.do_for.p u64 
    push           16         
    pushptroff                i32 1 0
    push           1          i64 
    jumpne         #7223      i64 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.do_for.mx u64 
    push           pc_genmcl.do_for.incop i64 
    callproc       &pc_libmcl.genmc 
    jump           #7224      
#7223: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.do_for.p u64 
    push           16         
    pushptroff                i32 1 0
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.do_for.mx u64 
    push           pc_genmcl.do_for.addop i64 
    callproc       &pc_libmcl.genmc 
#7224: 
    push           pc_genmcl.do_for.mx u64 
    pop            pc_genmcl.do_for.ax u64 
    jump           #7225      
#7222: 
    setargs                   2 0
    push           8          i64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_genmcl.do_for.ax u64 
    setargs                   3 0
    push           pc_genmcl.do_for.mx u64 
    push           pc_genmcl.do_for.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_genmcl.do_for.p u64 
    push           16         
    pushptroff                i32 1 0
    push           1          i64 
    jumpne         #7226      i64 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.do_for.ax u64 
    push           pc_genmcl.do_for.incop i64 
    callproc       &pc_libmcl.genmc 
    jump           #7227      
#7226: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.do_for.p u64 
    push           16         
    pushptroff                i32 1 0
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.do_for.ax u64 
    push           pc_genmcl.do_for.addop i64 
    callproc       &pc_libmcl.genmc 
#7227: 
    setargs                   3 0
    push           pc_genmcl.do_for.ax u64 
    push           pc_genmcl.do_for.mx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
#7225: 
    push           pc_genmcl.do_for.r u64 
    pushptr                   u8 
    push           4          i64 
    jumpne         #7228      i64 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.do_for.r u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenint u64 
    pop            pc_genmcl.do_for.bx u64 
    jump           #7229      
#7228: 
    setargs                   1 0
    push           pc_genmcl.do_for.r u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    pop            pc_genmcl.do_for.bx u64 
#7229: 
    setargs                   3 0
    push           pc_genmcl.do_for.bx u64 
    push           pc_genmcl.do_for.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_genmcl.do_for.ax u64 
    push           10         
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_genmcl.do_for.ax u64 
    push           10         
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.do_for.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    push           pc_genmcl.do_for.cond i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
#7230: 
    retproc                   
End


Proc pc_genmcl.dojumpcc:
    param          pc_genmcl.dojumpcc.p u64 
    local          pc_genmcl.dojumpcc.m i64 
    local          pc_genmcl.dojumpcc.cond i64 
    local          pc_genmcl.dojumpcc.ax u64 
    local          pc_genmcl.dojumpcc.bx u64 
    procentry                 
    push           pc_genmcl.dojumpcc.p u64 
    push           3          
    pushptroff                u8 1 0
    pop            pc_genmcl.dojumpcc.m i64 
    push           pc_genmcl.dojumpcc.p u64 
    push           3          
    pushptroff                u8 1 0
    push           10         i64 
    setjumpeq      #7232      i64 
    push           5          i64 
    setjumpne      #7233      i64 
#7232: 
    setargs                   1 0
    push           pc_genmcl.dojumpcc.p u64 
    callproc       &pc_genmcl.dojumpcc_i128 
    jump           #7234      
#7233: 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dojumpcc.ax u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dojumpcc.bx u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.dojumpcc.m i64 
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #7235      i64 0
    push           2          i64 
    casejumpeq     #7236      i64 0
    push           3          i64 
    casejumpeq     #7237      i64 0
    popstack                  i64 
    jump           #7238      
#7235: 
    push           &pc_tables.psigned 
    push           pc_genmcl.dojumpcc.m i64 
    pushptroff                u8 1 0
    jumpfalse      #7239      i64 
    push           &pc_genmcl.scondcodes 
    push           pc_genmcl.dojumpcc.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u8 1 -53
    pop            pc_genmcl.dojumpcc.cond i64 
    jump           #7240      
#7239: 
    push           &pc_genmcl.ucondcodes 
    push           pc_genmcl.dojumpcc.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u8 1 -53
    pop            pc_genmcl.dojumpcc.cond i64 
#7240: 
    setargs                   3 0
    push           pc_genmcl.dojumpcc.bx u64 
    push           pc_genmcl.dojumpcc.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    jump           #7241      
#7236: 
    push           &pc_genmcl.ucondcodes 
    push           pc_genmcl.dojumpcc.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u8 1 -53
    pop            pc_genmcl.dojumpcc.cond i64 
    setargs                   3 0
    push           pc_genmcl.dojumpcc.bx u64 
    push           pc_genmcl.dojumpcc.ax u64 
    push           72         i64 
    callproc       &pc_libmcl.genmc 
    jump           #7241      
#7237: 
    push           &pc_genmcl.ucondcodes 
    push           pc_genmcl.dojumpcc.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u8 1 -53
    pop            pc_genmcl.dojumpcc.cond i64 
    setargs                   3 0
    push           pc_genmcl.dojumpcc.bx u64 
    push           pc_genmcl.dojumpcc.ax u64 
    push           73         i64 
    callproc       &pc_libmcl.genmc 
    jump           #7241      
#7238: 
    setargs                   2 0
    push           pc_genmcl.dojumpcc.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "jumpcc:"  u64 
    callproc       &pc_libmcl.merrort 
#7241: 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.dojumpcc.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    push           pc_genmcl.dojumpcc.cond i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7234: 
    retproc                   
End


Proc pc_genmcl.dosetcc:
    param          pc_genmcl.dosetcc.p u64 
    local          pc_genmcl.dosetcc.m i64 
    local          pc_genmcl.dosetcc.cond i64 
    local          pc_genmcl.dosetcc.ax u64 
    local          pc_genmcl.dosetcc.bx u64 
    procentry                 
    push           pc_genmcl.dosetcc.p u64 
    push           3          
    pushptroff                u8 1 0
    pop            pc_genmcl.dosetcc.m i64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dosetcc.ax u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dosetcc.bx u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.dosetcc.m i64 
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #7243      i64 0
    push           2          i64 
    casejumpeq     #7244      i64 0
    push           3          i64 
    casejumpeq     #7245      i64 0
    popstack                  i64 
    jump           #7246      
#7243: 
    push           &pc_tables.psigned 
    push           pc_genmcl.dosetcc.m i64 
    pushptroff                u8 1 0
    jumpfalse      #7247      i64 
    push           &pc_genmcl.scondcodes 
    push           pc_genmcl.dosetcc.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u8 1 -66
    pop            pc_genmcl.dosetcc.cond i64 
    jump           #7248      
#7247: 
    push           &pc_genmcl.ucondcodes 
    push           pc_genmcl.dosetcc.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u8 1 -66
    pop            pc_genmcl.dosetcc.cond i64 
#7248: 
    setargs                   3 0
    push           pc_genmcl.dosetcc.bx u64 
    push           pc_genmcl.dosetcc.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    jump           #7249      
#7244: 
    push           &pc_genmcl.ucondcodes 
    push           pc_genmcl.dosetcc.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u8 1 -66
    pop            pc_genmcl.dosetcc.cond i64 
    setargs                   3 0
    push           pc_genmcl.dosetcc.bx u64 
    push           pc_genmcl.dosetcc.ax u64 
    push           72         i64 
    callproc       &pc_libmcl.genmc 
    jump           #7249      
#7245: 
    push           &pc_genmcl.ucondcodes 
    push           pc_genmcl.dosetcc.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u8 1 -66
    pop            pc_genmcl.dosetcc.cond i64 
    setargs                   3 0
    push           pc_genmcl.dosetcc.bx u64 
    push           pc_genmcl.dosetcc.ax u64 
    push           73         i64 
    callproc       &pc_libmcl.genmc 
    jump           #7249      
#7246: 
    setargs                   2 0
    push           pc_genmcl.dosetcc.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "setcc:"   u64 
    callproc       &pc_libmcl.merrort 
#7249: 
    setargs                   4 0
    push           0          u64 
    setargs                   2 0
    push           1          i64 
    push           pc_genmcl.dosetcc.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    store          pc_genmcl.dosetcc.bx u64 
    push           pc_genmcl.dosetcc.cond i64 
    push           59         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.dosetcc.bx u64 
    setargs                   2 0
    push           4          i64 
    push           pc_genmcl.dosetcc.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           20         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7250: 
    retproc                   
End


Proc pc_genmcl.do_setretfloat:
    param          pc_genmcl.do_setretfloat.destreg i64 
    local          pc_genmcl.do_setretfloat.currreg i64 
    local          pc_genmcl.do_setretfloat.ax u64 
    local          pc_genmcl.do_setretfloat.rx u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.do_setretfloat.destreg i64 
    callfn         &pc_libmcl.mgenxreg u64 
    pop            pc_genmcl.do_setretfloat.rx u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.do_setretfloat.ax u64 
    push           pc_genmcl.do_setretfloat.ax u64 
    push           10         
    pushptroff                u8 1 0
    pop            pc_genmcl.do_setretfloat.currreg i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           2          i64 
    casejumpeq     #7252      i64 0
    popstack                  i64 
    jump           #7253      
#7252: 
    push           pc_genmcl.do_setretfloat.currreg i64 
    push           pc_genmcl.do_setretfloat.destreg i64 
    jumpeq         #7254      i64 
    push           &pci_mcl.regset 
    push           pc_genmcl.do_setretfloat.destreg i64 
    pushptroff                u8 1 -1
    jumpfalse      #7255      i64 
    setargs                   2 0
    push           ""         u64 
    push           "setretfloat/dest in use" u64 
    callproc       &pc_libmcl.merror 
    jump           #7256      
#7255: 
    setargs                   3 0
    push           pc_genmcl.do_setretfloat.ax u64 
    push           pc_genmcl.do_setretfloat.rx u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    push           1          i64 
    push           &pci_mcl.xregset 
    push           pc_genmcl.do_setretfloat.destreg i64 
    popptroff                 u8 1 -1
#7256: 
#7254: 
    jump           #7257      
#7253: 
    setargs                   2 0
    push           ""         u64 
    push           "setretf?" u64 
    callproc       &pc_libmcl.merror 
#7257: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7258: 
    retproc                   
End


Proc pc_genmcl.do_setret:
    param          pc_genmcl.do_setret.destreg i64 
    param          pc_genmcl.do_setret.destxreg i64 
    local          pc_genmcl.do_setret.currreg i64 
    local          pc_genmcl.do_setret.ax u64 
    local          pc_genmcl.do_setret.rx u64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           3          
    pushptroff                u8 1 0
    jumpfalse      #7260      i64 
    setargs                   1 0
    push           pc_genmcl.do_setret.destxreg i64 
    callproc       &pc_genmcl.do_setretfloat 
    jump           #7261      
#7260: 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.do_setret.destreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_genmcl.do_setret.rx u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.do_setret.ax u64 
    push           pc_genmcl.do_setret.ax u64 
    push           10         
    pushptroff                u8 1 0
    pop            pc_genmcl.do_setret.currreg i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #7262      i64 0
    popstack                  i64 
    jump           #7263      
#7262: 
    push           pc_genmcl.do_setret.currreg i64 
    push           pc_genmcl.do_setret.destreg i64 
    jumpeq         #7264      i64 
    push           &pci_mcl.regset 
    push           pc_genmcl.do_setret.destreg i64 
    pushptroff                u8 1 -1
    jumpfalse      #7265      i64 
    setargs                   1 0
    push           pc_genmcl.do_setret.destreg i64 
    callproc       &pc_stackmcl.swapopndregs 
    setargs                   3 0
    push           pc_genmcl.do_setret.ax u64 
    push           pc_genmcl.do_setret.rx u64 
    push           28         i64 
    callproc       &pc_libmcl.genmc 
    jump           #7266      
#7265: 
    setargs                   3 0
    push           pc_genmcl.do_setret.ax u64 
    push           pc_genmcl.do_setret.rx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
#7266: 
#7264: 
    jump           #7267      
#7263: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "LOCNAMES[PCLSTACK[1].LOC]=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pci_mcl.locnames 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           ""         u64 
    push           "setret?"  u64 
    callproc       &pc_libmcl.merror 
#7267: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    push           1          i64 
    push           &pci_mcl.regset 
    push           pc_genmcl.do_setret.destreg i64 
    popptroff                 u8 1 -1
    push           0          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_genmcl.do_setret.destreg i64 
    popptroff                 u8 1 -1
#7261: 
    retproc                   
End


Proc pc_genmcl.dogetretvalue:
    param          pc_genmcl.dogetretvalue.p u64 
    local          pc_genmcl.dogetretvalue.reg i64 
    local          pc_genmcl.dogetretvalue.xreg i64 
    local          pc_genmcl.dogetretvalue.i i64 
    local          pc_genmcl.dogetretvalue.n i64 
    local          pc_genmcl.dogetretvalue.cats block:80 
    procentry                 
    push           pc_genmcl.dogetretvalue.p u64 
    push           1          i64 
    addrefoff                 u64 32 0
    push           1          
    pushptroff                u8 1 0
    push           28         i64 
    jumpne         #7269      i64 
    push           0          i64 
    pop            pc_genmcl.dogetretvalue.n i64 
    jump           #7270      
#7271: 
    push           &pc_tables.pcat 
    push           pc_genmcl.dogetretvalue.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           &pc_genmcl.dogetretvalue.cats 
    push           &pc_genmcl.dogetretvalue.n 
    incrload                  i64 1
    popptroff                 i64 8 -8
#7270: 
    push           &pc_genmcl.dogetretvalue.p 
    incrload                  u64 32
    push           1          
    pushptroff                u8 1 0
    push           28         i64 
    jumpeq         #7271      i64 
#7272: 
    push           pc_genmcl.dogetretvalue.p u64 
    push           1          i64 
    subrefoff                 u64 32 0
    pop            pc_genmcl.currpcl u64 
#7273: 
    push           pc_genmcl.dogetretvalue.n i64 
    pop            pc_genmcl.dogetretvalue.i i64 
    push           pc_genmcl.dogetretvalue.i i64 
    push           1          i64 
    jumplt         #7274      i64 
#7275: 
    push           &pc_genmcl.dogetretvalue.cats 
    push           pc_genmcl.dogetretvalue.i i64 
    pushptroff                i64 8 -8
    push           4          i64 
    casejumpeq     #7276      i64 0
    push           5          i64 
    casejumpeq     #7276      i64 0
    popstack                  i64 
    jump           #7277      
#7276: 
    setargs                   2 0
    push           ""         u64 
    push           "Short/wide mulret type" u64 
    callproc       &pc_libmcl.merror 
    jump           #7278      
#7277: 
#7278: 
    setargs                   3 0
    push           &pc_genmcl.dogetretvalue.cats 
    push           pc_genmcl.dogetretvalue.i i64 
    pushptroff                i64 8 -8
    push           &pc_genmcl.multxregs 
    push           pc_genmcl.dogetretvalue.i i64 
    pushptroff                i64 8 -8
    push           &pc_genmcl.multregs 
    push           pc_genmcl.dogetretvalue.i i64 
    pushptroff                i64 8 -8
    callproc       &pc_genmcl.dogetretvalue_n 
#7279: 
    fordown        #7275      i64 1
    opnd           pc_genmcl.dogetretvalue.i 
    opnd           1          
#7274: 
    jump           #7280      
#7269: 
    setargs                   3 0
    push           &pc_tables.pcat 
    push           pc_genmcl.dogetretvalue.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    push           1          i64 
    callproc       &pc_genmcl.dogetretvalue_n 
    push           &pc_tables.pcat 
    push           pc_genmcl.dogetretvalue.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           4          i64 
    jumpne         #7281      i64 
    setargs                   3 0
    setargs                   2 0
    push           pc_genmcl.dogetretvalue.p u64 
    push           4          
    pushptroff                i32 1 0
    push           1          i64 
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_libmcl.mgenreg u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_genmcl.dogetretvalue.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #7282      i64 
    push           19         i64 
    resetmult                 
    jump           #7283      
#7282: 
    push           20         i64 
    endmult                   
#7283: 
    callproc       &pc_libmcl.genmc 
#7281: 
#7280: 
#7284: 
    retproc                   
End


Proc pc_genmcl.dogetretvalue_n:
    param          pc_genmcl.dogetretvalue_n.reg i64 
    param          pc_genmcl.dogetretvalue_n.xreg i64 
    param          pc_genmcl.dogetretvalue_n.cat i64 
    procentry                 
    push           pc_genmcl.dogetretvalue_n.cat i64 
    push           1          i64 
    casejumpeq     #7286      i64 0
    push           4          i64 
    casejumpeq     #7286      i64 0
    push           3          i64 
    casejumpeq     #7287      i64 0
    push           2          i64 
    casejumpeq     #7288      i64 0
    push           5          i64 
    casejumpeq     #7289      i64 0
    popstack                  i64 
    jump           #7290      
#7286: 
    setargs                   1 0
    push           pc_genmcl.dogetretvalue_n.reg i64 
    callproc       &pc_stackmcl.addreg0 
    jump           #7291      
#7287: 
    setargs                   2 0
    push           2          i64 
    push           pc_genmcl.dogetretvalue_n.xreg i64 
    callproc       &pc_stackmcl.addxreg0 
    jump           #7291      
#7288: 
    setargs                   2 0
    push           3          i64 
    push           pc_genmcl.dogetretvalue_n.xreg i64 
    callproc       &pc_stackmcl.addxreg0 
    jump           #7291      
#7289: 
    setargs                   1 0
    push           pc_genmcl.dogetretvalue_n.reg i64 
    callproc       &pc_stackmcl.addwidereg0 
    jump           #7291      
#7290: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pc_tables.pstdnames 
    push           pc_genmcl.dogetretvalue_n.cat i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           ""         u64 
    push           "getretval/n?" u64 
    callproc       &pc_libmcl.merror 
#7291: 
#7292: 
    retproc                   
End


Proc pc_genmcl.do_shift:
    param          pc_genmcl.do_shift.p u64 
    param          pc_genmcl.do_shift.opc i64 
    local          pc_genmcl.do_shift.ax u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.do_shift.ax u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #7294      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.do_shift.ax u64 
    push           pc_genmcl.do_shift.opc i64 
    callproc       &pc_libmcl.genmc 
    jump           #7295      
#7294: 
    push           pci_mcl.inf_r10used i64 
    jumpfalse      #7296      i64 
    setargs                   2 0
    push           ""         u64 
    push           "shift:cl in use" u64 
    callproc       &pc_libmcl.merror 
#7296: 
    setargs                   2 0
    push           11         i64 
    push           1          i64 
    callproc       &pc_stackmcl.loadparam 
    setargs                   3 0
    setargs                   2 0
    push           1          i64 
    push           11         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           pc_genmcl.do_shift.ax u64 
    push           pc_genmcl.do_shift.opc i64 
    callproc       &pc_libmcl.genmc 
#7295: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7297: 
    retproc                   
End


Proc pc_genmcl.mulimm:
    param          pc_genmcl.mulimm.ax u64 
    param          pc_genmcl.mulimm.n i64 
    local          pc_genmcl.mulimm.shifts i64 
    local          pc_genmcl.mulimm.m i64 
    procentry                 
    push           pc_genmcl.mulimm.n i64 
    push           0          i64 
    casejumpeq     #7299      i64 0
    push           1          i64 
    casejumpeq     #7300      i64 0
    push           -1         i64 
    casejumpeq     #7301      i64 0
    popstack                  i64 
    jump           #7302      
#7299: 
    setargs                   3 0
    push           pc_genmcl.mulimm.ax u64 
    push           pc_genmcl.mulimm.ax u64 
    push           41         i64 
    callproc       &pc_libmcl.genmc 
    jump           #7303      
    jump           #7304      
#7300: 
    jump           #7303      
    jump           #7304      
#7301: 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.mulimm.ax u64 
    push           51         i64 
    callproc       &pc_libmcl.genmc 
    jump           #7303      
    jump           #7304      
#7302: 
#7304: 
    push           0          i64 
    pop            pc_genmcl.mulimm.shifts i64 
    push           pc_genmcl.mulimm.n i64 
    pop            pc_genmcl.mulimm.m i64 
    jump           #7305      
#7306: 
    push           &pc_genmcl.mulimm.m 
    push           1          i64 
    shrto                     i64 
    push           &pc_genmcl.mulimm.shifts 
    incr                      i64 1
#7305: 
    push           pc_genmcl.mulimm.m i64 
    push           0          i64 
    dotindex                  i64 
    jumpfalse      #7306      i64 
#7307: 
    push           pc_genmcl.mulimm.shifts i64 
    jumpfalse      #7308      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.mulimm.shifts i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.mulimm.ax u64 
    push           44         i64 
    callproc       &pc_libmcl.genmc 
#7308: 
    push           pc_genmcl.mulimm.m i64 
    push           1          i64 
    casejumpeq     #7309      i64 0
    push           3          i64 
    casejumpeq     #7310      i64 0
    push           5          i64 
    casejumpeq     #7310      i64 0
    push           9          i64 
    casejumpeq     #7310      i64 0
    popstack                  i64 
    jump           #7311      
#7309: 
    jump           #7303      
    jump           #7312      
#7310: 
    setargs                   3 0
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           0          i64 
    push           0          i64 
    push           pc_genmcl.mulimm.m i64 
    push           1          i64 
    sub                       i64 
    push           pc_genmcl.mulimm.ax u64 
    push           10         
    pushptroff                u8 1 0
    push           pc_genmcl.mulimm.ax u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenindex u64 
    push           pc_genmcl.mulimm.ax u64 
    push           15         i64 
    callproc       &pc_libmcl.genmc 
    jump           #7312      
#7311: 
    push           pc_genmcl.mulimm.shifts i64 
    jumpfalse      #7313      i64 
    push           35         i64 
    push           pci_mcl.mccodex u64 
    push           24         
    popptroff                 u8 1 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.mulimm.n i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pci_mcl.mccodex u64 
    push           16         
    popptroff                 u64 1 0
    jump           #7314      
#7313: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.mulimm.n i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.mulimm.ax u64 
    push           35         i64 
    callproc       &pc_libmcl.genmc 
#7314: 
#7312: 
#7303: 
    retproc                   
End


Proc pc_genmcl.dojumptruefalse:
    param          pc_genmcl.dojumptruefalse.p u64 
    param          pc_genmcl.dojumptruefalse.cond i64 
    local          pc_genmcl.dojumptruefalse.ax u64 
    local          pc_genmcl.dojumptruefalse.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.dojumptruefalse.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #7316      i64 0
    popstack                  i64 
    jump           #7317      
#7316: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dojumptruefalse.ax u64 
    setargs                   3 0
    push           pc_genmcl.dojumptruefalse.ax u64 
    push           pc_genmcl.dojumptruefalse.ax u64 
    push           42         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.dojumptruefalse.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    push           pc_genmcl.dojumptruefalse.cond i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    jump           #7318      
#7317: 
    setargs                   2 0
    push           pc_genmcl.dojumptruefalse.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "jumptrue/false" u64 
    callproc       &pc_libmcl.merrort 
#7318: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7319: 
    retproc                   
End


Proc pc_genmcl.dobitwise:
    param          pc_genmcl.dobitwise.p u64 
    param          pc_genmcl.dobitwise.opc i64 
    local          pc_genmcl.dobitwise.ax u64 
    local          pc_genmcl.dobitwise.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.dobitwise.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #7321      i64 0
    push           5          i64 
    casejumpeq     #7322      i64 0
    popstack                  i64 
    jump           #7323      
#7321: 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dobitwise.ax u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dobitwise.bx u64 
    setargs                   3 0
    push           pc_genmcl.dobitwise.bx u64 
    push           pc_genmcl.dobitwise.ax u64 
    push           pc_genmcl.dobitwise.opc i64 
    callproc       &pc_libmcl.genmc 
    jump           #7324      
#7322: 
    setargs                   3 0
    push           pc_genmcl.dobitwise.opc i64 
    push           pc_genmcl.dobitwise.opc i64 
    push           pc_genmcl.dobitwise.p u64 
    callproc       &pc_genmcl.dobin_i128 
    jump           #7325      
    jump           #7324      
#7323: 
    setargs                   2 0
    push           pc_genmcl.dobitwise.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "bitwise:" u64 
    callproc       &pc_libmcl.merrort 
#7324: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7325: 
    retproc                   
End


Proc pc_genmcl.do_addrmode: u64
    param          pc_genmcl.do_addrmode.p u64 
    local          pc_genmcl.do_addrmode.px u64 
    local          pc_genmcl.do_addrmode.ax u64 
    local          pc_genmcl.do_addrmode.bx u64 
    local          pc_genmcl.do_addrmode.m i64 
    local          pc_genmcl.do_addrmode.scale i64 
    local          pc_genmcl.do_addrmode.extra i64 
    local          pc_genmcl.do_addrmode.offset i64 
    local          pc_genmcl.do_addrmode.reg i64 
    local          pc_genmcl.do_addrmode.regix i64 
    local          pc_genmcl.do_addrmode.d u64 
    procentry                 
    push           pc_genmcl.do_addrmode.p u64 
    push           16         
    pushptroff                i32 1 0
    pop            pc_genmcl.do_addrmode.scale i64 
    push           pc_genmcl.do_addrmode.p u64 
    push           20         
    pushptroff                i32 1 0
    pop            pc_genmcl.do_addrmode.extra i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    push           pc_genmcl.do_addrmode.scale i64 
    mul                       i64 
    push           pc_genmcl.do_addrmode.extra i64 
    add                       i64 
    pop            pc_genmcl.do_addrmode.offset i64 
    push           pc_genmcl.do_addrmode.p u64 
    push           3          
    pushptroff                u8 1 0
    pop            pc_genmcl.do_addrmode.m i64 
    push           0          u64 
    pop            pc_genmcl.do_addrmode.px u64 
    setargs                   1 0
    push           2          i64 
    callfn         &pc_libmcl.isregvaropnd i64 
    jumpfalse      #7327      i64 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.isregvaropnd i64 
    jumpfalse      #7328      i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_genmcl.do_addrmode.reg i64 
    setargs                   3 0
    push           1          i64 
    push           &pc_genmcl.do_addrmode.scale 
    push           pc_genmcl.do_addrmode.reg i64 
    callfn         &pc_genmcl.scaleregvar i64 
    pop            pc_genmcl.do_addrmode.regix i64 
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           0          i64 
    push           pc_genmcl.do_addrmode.extra i64 
    push           pc_genmcl.do_addrmode.scale i64 
    push           pc_genmcl.do_addrmode.regix i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenindex u64 
    pop            pc_genmcl.do_addrmode.px u64 
    jump           #7329      
#7328: 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.isimm64 i64 
    jumpfalse      #7330      i64 
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           0          i64 
    push           pc_genmcl.do_addrmode.offset i64 
    push           1          i64 
    push           0          i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenindex u64 
    pop            pc_genmcl.do_addrmode.px u64 
    jump           #7329      
#7330: 
    setargs                   2 0
    push           pc_genmcl.do_addrmode.scale i64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    store          pc_genmcl.do_addrmode.bx u64 
    callfn         &pc_genmcl.scaleindex i64 
    pop            pc_genmcl.do_addrmode.scale i64 
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           0          i64 
    push           pc_genmcl.do_addrmode.extra i64 
    push           pc_genmcl.do_addrmode.scale i64 
    push           pc_genmcl.do_addrmode.bx u64 
    push           10         
    pushptroff                u8 1 0
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenindex u64 
    pop            pc_genmcl.do_addrmode.px u64 
#7329: 
    jump           #7331      
#7327: 
    setargs                   1 0
    push           2          i64 
    callfn         &pc_libmcl.ismemaddr i64 
    jumpfalse      #7332      i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    pop            pc_genmcl.do_addrmode.d u64 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.isregvaropnd i64 
    jumpfalse      #7333      i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_genmcl.do_addrmode.reg i64 
    setargs                   3 0
    push           1          i64 
    push           &pc_genmcl.do_addrmode.scale 
    push           pc_genmcl.do_addrmode.reg i64 
    callfn         &pc_genmcl.scaleregvar i64 
    pop            pc_genmcl.do_addrmode.regix i64 
    setargs                   7 0
    push           pc_genmcl.do_addrmode.d u64 
    push           0          i64 
    push           0          i64 
    push           pc_genmcl.do_addrmode.extra i64 
    push           pc_genmcl.do_addrmode.scale i64 
    push           pc_genmcl.do_addrmode.regix i64 
    push           0          i64 
    callfn         &pc_libmcl.mgenindex u64 
    pop            pc_genmcl.do_addrmode.px u64 
    jump           #7334      
#7333: 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.isimm64 i64 
    jumpfalse      #7335      i64 
    setargs                   7 0
    push           pc_genmcl.do_addrmode.d u64 
    push           0          i64 
    push           0          i64 
    push           pc_genmcl.do_addrmode.offset i64 
    push           1          i64 
    push           0          i64 
    push           0          i64 
    callfn         &pc_libmcl.mgenindex u64 
    pop            pc_genmcl.do_addrmode.px u64 
    jump           #7334      
#7335: 
    setargs                   2 0
    push           pc_genmcl.do_addrmode.scale i64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    store          pc_genmcl.do_addrmode.bx u64 
    callfn         &pc_genmcl.scaleindex i64 
    pop            pc_genmcl.do_addrmode.scale i64 
    setargs                   7 0
    push           pc_genmcl.do_addrmode.d u64 
    push           0          i64 
    push           0          i64 
    push           pc_genmcl.do_addrmode.extra i64 
    push           pc_genmcl.do_addrmode.scale i64 
    push           pc_genmcl.do_addrmode.bx u64 
    push           10         
    pushptroff                u8 1 0
    push           0          i64 
    callfn         &pc_libmcl.mgenindex u64 
    pop            pc_genmcl.do_addrmode.px u64 
#7334: 
    jump           #7331      
#7332: 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.do_addrmode.ax u64 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.isregvaropnd i64 
    jumpfalse      #7336      i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_genmcl.do_addrmode.reg i64 
    setargs                   3 0
    push           1          i64 
    push           &pc_genmcl.do_addrmode.scale 
    push           pc_genmcl.do_addrmode.reg i64 
    callfn         &pc_genmcl.scaleregvar i64 
    pop            pc_genmcl.do_addrmode.regix i64 
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           0          i64 
    push           pc_genmcl.do_addrmode.extra i64 
    push           pc_genmcl.do_addrmode.scale i64 
    push           pc_genmcl.do_addrmode.regix i64 
    push           pc_genmcl.do_addrmode.ax u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenindex u64 
    pop            pc_genmcl.do_addrmode.px u64 
    jump           #7337      
#7336: 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.isimm64 i64 
    jumpfalse      #7338      i64 
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           0          i64 
    push           pc_genmcl.do_addrmode.offset i64 
    push           1          i64 
    push           0          i64 
    push           pc_genmcl.do_addrmode.ax u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenindex u64 
    pop            pc_genmcl.do_addrmode.px u64 
    jump           #7337      
#7338: 
    setargs                   2 0
    push           pc_genmcl.do_addrmode.scale i64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    store          pc_genmcl.do_addrmode.bx u64 
    callfn         &pc_genmcl.scaleindex i64 
    pop            pc_genmcl.do_addrmode.scale i64 
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           0          i64 
    push           pc_genmcl.do_addrmode.extra i64 
    push           pc_genmcl.do_addrmode.scale i64 
    push           pc_genmcl.do_addrmode.bx u64 
    push           10         
    pushptroff                u8 1 0
    push           pc_genmcl.do_addrmode.ax u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenindex u64 
    pop            pc_genmcl.do_addrmode.px u64 
#7337: 
#7331: 
    push           pc_genmcl.do_addrmode.px u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #7339      i64 
    push           pc_genmcl.do_addrmode.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_genmcl.do_addrmode.px u64 
    push           8          
    popptroff                 u8 1 0
#7339: 
    push           pc_genmcl.do_addrmode.px u64 
    setret                    u64 
    jump           #7340      
#7340: 
    retfn                     u64 
End


Proc pc_genmcl.scaleregvar: i64
    param          pc_genmcl.scaleregvar.reg i64 
    param          pc_genmcl.scaleregvar.scale u64 
    param          pc_genmcl.scaleregvar.n i64 
    local          pc_genmcl.scaleregvar.regix i64 
    local          pc_genmcl.scaleregvar.ax u64 
    procentry                 
    push           pc_genmcl.scaleregvar.scale u64 
    pushptr                   i64 
    push           1          i64 
    setjumpeq      #7342      i64 
    push           2          i64 
    setjumpeq      #7342      i64 
    push           4          i64 
    setjumpeq      #7342      i64 
    push           8          i64 
    setjumpne      #7343      i64 
#7342: 
    push           pc_genmcl.scaleregvar.reg i64 
    setret                    i64 
    jump           #7344      
#7343: 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    pop            pc_genmcl.scaleregvar.regix i64 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.scaleregvar.regix i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_genmcl.scaleregvar.ax u64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.scaleregvar.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           pc_genmcl.scaleregvar.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.scaleregvar.n i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.scaleregvar.n i64 
    addrefoff                 block:15 15 -15
    push           1          
    popptroff                 u8 1 0
    push           pc_genmcl.scaleregvar.regix i64 
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.scaleregvar.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    setargs                   2 0
    push           pc_genmcl.scaleregvar.scale u64 
    pushptr                   i64 
    push           pc_genmcl.scaleregvar.ax u64 
    callproc       &pc_genmcl.mulimm 
    push           1          i64 
    push           pc_genmcl.scaleregvar.scale u64 
    popptr                    i64 
    push           pc_genmcl.scaleregvar.regix i64 
    setret                    i64 
    jump           #7344      
#7344: 
    retfn                     i64 
End


Proc pc_genmcl.scaleindex: i64
    param          pc_genmcl.scaleindex.ax u64 
    param          pc_genmcl.scaleindex.scale i64 
    local          pc_genmcl.scaleindex.n i64 
    procentry                 
    push           pc_genmcl.scaleindex.scale i64 
    push           1          i64 
    setjumpeq      #7346      i64 
    push           2          i64 
    setjumpeq      #7346      i64 
    push           4          i64 
    setjumpeq      #7346      i64 
    push           8          i64 
    setjumpne      #7347      i64 
#7346: 
    push           pc_genmcl.scaleindex.scale i64 
    setret                    i64 
    jump           #7348      
#7347: 
    setargs                   2 0
    push           pc_genmcl.scaleindex.scale i64 
    push           pc_genmcl.scaleindex.ax u64 
    callproc       &pc_genmcl.mulimm 
    push           1          i64 
    setret                    i64 
    jump           #7348      
#7348: 
    retfn                     i64 
End


Proc pc_genmcl.makeregopnd: u64
    param          pc_genmcl.makeregopnd.n i64 
    local          pc_genmcl.makeregopnd.ax u64 
    procentry                 
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.makeregopnd.n i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.makeregopnd.n i64 
    addrefoff                 block:15 15 -15
    push           1          
    popptroff                 u8 1 0
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.makeregopnd.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.makeregopnd.n i64 
    callfn         &pc_stackmcl.genopnd u64 
    setret                    u64 
    jump           #7350      
#7350: 
    retfn                     u64 
End


Proc pc_genmcl.dobinto_int:
    param          pc_genmcl.dobinto_int.p u64 
    param          pc_genmcl.dobinto_int.opc i64 
    local          pc_genmcl.dobinto_int.ax u64 
    local          pc_genmcl.dobinto_int.bx u64 
    local          pc_genmcl.dobinto_int.rx u64 
    local          pc_genmcl.dobinto_int.reg i64 
    local          pc_genmcl.dobinto_int.size i64 
    procentry                 
    push           pc_genmcl.dobinto_int.p u64 
    push           4          
    pushptroff                i32 1 0
    pop            pc_genmcl.dobinto_int.size i64 
    push           pc_genmcl.dobinto_int.size i64 
    push           8          i64 
    jumpne         #7352      i64 
    setargs                   1 0
    push           2          i64 
    callfn         &pc_libmcl.ismemaddr i64 
    jumpfalse      #7352      i64 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    pop            pc_genmcl.dobinto_int.ax u64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    pop            pc_genmcl.dobinto_int.reg i64 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.dobinto_int.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_genmcl.dobinto_int.rx u64 
    setargs                   3 0
    push           pc_genmcl.dobinto_int.ax u64 
    push           pc_genmcl.dobinto_int.rx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dobinto_int.bx u64 
    setargs                   3 0
    push           pc_genmcl.dobinto_int.bx u64 
    push           pc_genmcl.dobinto_int.rx u64 
    push           pc_genmcl.dobinto_int.opc i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.dobinto_int.rx u64 
    push           pc_genmcl.dobinto_int.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_genmcl.dobinto_int.reg i64 
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_genmcl.dobinto_int.reg i64 
    popptroff                 u8 1 -1
    jump           #7353      
#7352: 
    setargs                   2 0
    push           pc_genmcl.dobinto_int.size i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.dobinto_int.ax u64 
    setargs                   2 0
    push           pc_genmcl.dobinto_int.size i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dobinto_int.bx u64 
    setargs                   3 0
    push           pc_genmcl.dobinto_int.bx u64 
    push           pc_genmcl.dobinto_int.ax u64 
    push           pc_genmcl.dobinto_int.opc i64 
    callproc       &pc_libmcl.genmc 
#7353: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7354: 
    retproc                   
End


Proc pc_genmcl.dobinto_float:
    param          pc_genmcl.dobinto_float.p u64 
    param          pc_genmcl.dobinto_float.opc i64 
    local          pc_genmcl.dobinto_float.ax u64 
    local          pc_genmcl.dobinto_float.bx u64 
    local          pc_genmcl.dobinto_float.cx u64 
    procentry                 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_x64 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.dobinto_float.ax u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dobinto_float.bx u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dobinto_float.cx u64 
    setargs                   3 0
    push           pc_genmcl.dobinto_float.ax u64 
    push           pc_genmcl.dobinto_float.cx u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.dobinto_float.bx u64 
    push           pc_genmcl.dobinto_float.cx u64 
    push           pc_genmcl.dobinto_float.opc i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.dobinto_float.cx u64 
    push           pc_genmcl.dobinto_float.ax u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7356: 
    retproc                   
End


Proc pc_genmcl.dobinto_float32:
    param          pc_genmcl.dobinto_float32.p u64 
    param          pc_genmcl.dobinto_float32.opc i64 
    local          pc_genmcl.dobinto_float32.ax u64 
    local          pc_genmcl.dobinto_float32.bx u64 
    local          pc_genmcl.dobinto_float32.cx u64 
    procentry                 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_x32 
    setargs                   2 0
    push           4          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.dobinto_float32.ax u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dobinto_float32.bx u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dobinto_float32.cx u64 
    setargs                   3 0
    push           pc_genmcl.dobinto_float32.ax u64 
    push           pc_genmcl.dobinto_float32.cx u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.dobinto_float32.bx u64 
    push           pc_genmcl.dobinto_float32.cx u64 
    push           pc_genmcl.dobinto_float32.opc i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.dobinto_float32.cx u64 
    push           pc_genmcl.dobinto_float32.ax u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7358: 
    retproc                   
End


Proc pc_genmcl.doselectcc:
    param          pc_genmcl.doselectcc.p u64 
    local          pc_genmcl.doselectcc.ax u64 
    local          pc_genmcl.doselectcc.bx u64 
    local          pc_genmcl.doselectcc.cx u64 
    local          pc_genmcl.doselectcc.dx u64 
    local          pc_genmcl.doselectcc.cond i64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.doselectcc.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #7360      i64 
    setargs                   2 0
    push           pc_genmcl.doselectcc.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "selectcc" u64 
    callproc       &pc_libmcl.merrort 
#7360: 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.doselectcc.ax u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.doselectcc.bx u64 
    setargs                   3 0
    push           pc_genmcl.doselectcc.bx u64 
    push           pc_genmcl.doselectcc.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    push           1          i64 
    pop            pci_mcl.noxorclear u8 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.doselectcc.dx u64 
    setargs                   2 0
    push           8          i64 
    push           4          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.doselectcc.cx u64 
    push           0          i64 
    pop            pci_mcl.noxorclear u8 
    push           &pc_tables.psigned 
    push           pc_genmcl.doselectcc.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #7361      i64 
    push           &pc_genmcl.scondcodes 
    push           pc_genmcl.doselectcc.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u8 1 -73
    pop            pc_genmcl.doselectcc.cond i64 
    jump           #7362      
#7361: 
    push           &pc_genmcl.ucondcodes 
    push           pc_genmcl.doselectcc.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u8 1 -73
    pop            pc_genmcl.doselectcc.cond i64 
#7362: 
    setargs                   4 0
    push           pc_genmcl.doselectcc.dx u64 
    push           pc_genmcl.doselectcc.cx u64 
    setargs                   1 0
    push           pc_genmcl.doselectcc.cond i64 
    callfn         &pc_genmcl.reversemcond i64 
    push           16         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7363: 
    retproc                   
End


Proc pc_genmcl.reversemcond: i64
    param          pc_genmcl.reversemcond.cond i64 
    procentry                 
    push           pc_genmcl.reversemcond.cond i64 
    push           4          i64 
    casejumpeq     #7365      i64 0
    push           5          i64 
    casejumpeq     #7366      i64 0
    push           12         i64 
    casejumpeq     #7367      i64 0
    push           14         i64 
    casejumpeq     #7368      i64 0
    push           13         i64 
    casejumpeq     #7369      i64 0
    push           15         i64 
    casejumpeq     #7370      i64 0
    push           2          i64 
    casejumpeq     #7371      i64 0
    push           6          i64 
    casejumpeq     #7372      i64 0
    push           3          i64 
    casejumpeq     #7373      i64 0
    push           7          i64 
    casejumpeq     #7374      i64 0
    popstack                  i64 
    jump           #7375      
#7365: 
    push           5          i64 
    setret                    i64 
    jump           #7376      
    jump           #7377      
#7366: 
    push           5          i64 
    setret                    i64 
    jump           #7376      
    jump           #7377      
#7367: 
    push           13         i64 
    setret                    i64 
    jump           #7376      
    jump           #7377      
#7368: 
    push           15         i64 
    setret                    i64 
    jump           #7376      
    jump           #7377      
#7369: 
    push           12         i64 
    setret                    i64 
    jump           #7376      
    jump           #7377      
#7370: 
    push           14         i64 
    setret                    i64 
    jump           #7376      
    jump           #7377      
#7371: 
    push           3          i64 
    setret                    i64 
    jump           #7376      
    jump           #7377      
#7372: 
    push           7          i64 
    setret                    i64 
    jump           #7376      
    jump           #7377      
#7373: 
    push           2          i64 
    setret                    i64 
    jump           #7376      
    jump           #7377      
#7374: 
    push           3          i64 
    setret                    i64 
    jump           #7376      
    jump           #7377      
#7375: 
#7377: 
    push           0          i64 
    setret                    i64 
    jump           #7376      
#7376: 
    retfn                     i64 
End


Proc pc_genmcl.do_divrem:
    param          pc_genmcl.do_divrem.p u64 
    param          pc_genmcl.do_divrem.issigned i64 
    param          pc_genmcl.do_divrem.isdiv i64 
    local          pc_genmcl.do_divrem.opc i64 
    local          pc_genmcl.do_divrem.n i64 
    local          pc_genmcl.do_divrem.shifts i64 
    procentry                 
    setargs                   2 0
    push           0          i64 
    push           2          i64 
    callproc       &pc_stackmcl.loadopnd 
    push           pc_genmcl.do_divrem.isdiv i64 
    jumpfalse      #7379      i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #7379      i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    pop            pc_genmcl.do_divrem.n i64 
    push           pc_genmcl.do_divrem.n i64 
    push           0          i64 
    casejumpeq     #7380      i64 0
    push           1          i64 
    casejumpeq     #7381      i64 0
    popstack                  i64 
    jump           #7382      
#7380: 
    setargs                   2 0
    push           ""         u64 
    push           "Divide by zero" u64 
    callproc       &pc_libmcl.merror 
    jump           #7383      
#7381: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #7384      
    jump           #7383      
#7382: 
    setargs                   1 0
    push           pc_genmcl.do_divrem.n i64 
    callfn         &pc_libmcl.ispoweroftwo i64 
    pop            pc_genmcl.do_divrem.shifts i64 
    push           pc_genmcl.do_divrem.shifts i64 
    jumpfalse      #7385      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.do_divrem.shifts i64 
    callfn         &pc_libmcl.mgenint u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    startmult                 
    push           pc_genmcl.do_divrem.issigned i64 
    jumpfalse      #7386      i64 
    push           45         i64 
    resetmult                 
    jump           #7387      
#7386: 
    push           46         i64 
    endmult                   
#7387: 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #7384      
#7385: 
#7383: 
#7379: 
    setargs                   2 0
    push           0          i64 
    push           1          i64 
    callproc       &pc_stackmcl.loadopnd 
    setargs                   0 0
    callproc       &pc_genmcl.saverdx 
    setargs                   0 0
    callproc       &pc_genmcl.fixdivopnds 
    push           pc_genmcl.do_divrem.issigned i64 
    jumpfalse      #7388      i64 
    setargs                   3 0
    push           0          u64 
    push           0          u64 
    push           58         i64 
    callproc       &pc_libmcl.genmc 
    push           37         i64 
    pop            pc_genmcl.do_divrem.opc i64 
    jump           #7389      
#7388: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           12         i64 
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   2 0
    push           8          i64 
    push           12         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           41         i64 
    callproc       &pc_libmcl.genmc 
    push           38         i64 
    pop            pc_genmcl.do_divrem.opc i64 
#7389: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           pc_genmcl.do_divrem.p u64 
    push           4          
    pushptroff                i32 1 0
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    push           pc_genmcl.do_divrem.opc i64 
    callproc       &pc_libmcl.genmc 
    push           pc_genmcl.do_divrem.isdiv i64 
    jumptrue       #7390      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           12         i64 
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           28         i64 
    callproc       &pc_libmcl.genmc 
#7390: 
    setargs                   0 0
    callproc       &pc_genmcl.restorerdx 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7384: 
    retproc                   
End


Proc pc_genmcl.fixdivopnds:
    local          pc_genmcl.fixdivopnds.regx i64 
    local          pc_genmcl.fixdivopnds.regy i64 
    local          pc_genmcl.fixdivopnds.zop i64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_genmcl.fixdivopnds.regx i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_genmcl.fixdivopnds.regy i64 
    push           pc_genmcl.fixdivopnds.regx i64 
    push           1          i64 
    jumpne         #7392      i64 
    jump           #7393      
#7392: 
    push           pc_genmcl.fixdivopnds.regy i64 
    push           1          i64 
    jumpne         #7394      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    push           28         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    jump           #7393      
#7394: 
    push           &pci_mcl.regset 
    push           1          i64 
    pushptroff                u8 1 -1
    push           0          i64 
    jumpne         #7395      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           28         i64 
    callproc       &pc_libmcl.genmc 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_genmcl.fixdivopnds.regx i64 
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    push           1          i64 
    push           &pci_mcl.regset 
    push           1          i64 
    popptroff                 u8 1 -1
    jump           #7393      
#7395: 
#7396: 
    push           pci_mcl.noperands i64 
    pop            pc_genmcl.fixdivopnds.zop i64 
    push           pc_genmcl.fixdivopnds.zop i64 
    push           1          i64 
    jumplt         #7397      i64 
#7398: 
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.fixdivopnds.zop i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #7399      i64 
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.fixdivopnds.zop i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #7399      i64 
    jump           #7397      
#7399: 
#7400: 
    fordown        #7398      i64 1
    opnd           pc_genmcl.fixdivopnds.zop 
    opnd           1          
#7397: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           28         i64 
    callproc       &pc_libmcl.genmc 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    addrefoff                 u64 1 0
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.fixdivopnds.zop i64 
    addrefoff                 block:15 15 -15
    push           2          
    addrefoff                 u64 1 0
    swap                      u8 
#7393: 
    retproc                   
End


Proc pc_genmcl.saverdx:
    procentry                 
    push           pci_mcl.inf_r11used i64 
    jumpfalse      #7402      i64 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           12         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
#7402: 
#7403: 
    retproc                   
End


Proc pc_genmcl.restorerdx:
    procentry                 
    push           pci_mcl.inf_r11used i64 
    jumpfalse      #7405      i64 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           12         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           14         i64 
    callproc       &pc_libmcl.genmc 
#7405: 
#7406: 
    retproc                   
End


Proc pc_genmcl.doincr:
    param          pc_genmcl.doincr.p u64 
    param          pc_genmcl.doincr.incrop i64 
    param          pc_genmcl.doincr.addop i64 
    procentry                 
    push           pc_genmcl.doincr.p u64 
    push           16         
    pushptroff                i32 1 0
    push           1          i64 
    jumpne         #7408      i64 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.ismemaddr i64 
    jumpfalse      #7409      i64 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           pc_genmcl.doincr.incrop i64 
    callproc       &pc_libmcl.genmc 
    jump           #7410      
#7409: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    push           pc_genmcl.doincr.incrop i64 
    callproc       &pc_libmcl.genmc 
#7410: 
    jump           #7411      
#7408: 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.ismemaddr i64 
    jumpfalse      #7412      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.doincr.p u64 
    push           16         
    pushptroff                i32 1 0
    callfn         &pc_libmcl.mgenint u64 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           pc_genmcl.doincr.addop i64 
    callproc       &pc_libmcl.genmc 
    jump           #7413      
#7412: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.doincr.p u64 
    push           16         
    pushptroff                i32 1 0
    callfn         &pc_libmcl.mgenint u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    push           pc_genmcl.doincr.addop i64 
    callproc       &pc_libmcl.genmc 
#7413: 
#7411: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7414: 
    retproc                   
End


Proc pc_genmcl.doincrload:
    param          pc_genmcl.doincrload.p u64 
    param          pc_genmcl.doincrload.incrop i64 
    param          pc_genmcl.doincrload.addop i64 
    local          pc_genmcl.doincrload.ax u64 
    local          pc_genmcl.doincrload.mx u64 
    procentry                 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.ismemaddr i64 
    jumpfalse      #7416      i64 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    pop            pc_genmcl.doincrload.mx u64 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_genmcl.makeregopnd u64 
    pop            pc_genmcl.doincrload.ax u64 
    jump           #7417      
#7416: 
    setargs                   2 0
    push           pc_genmcl.doincrload.p u64 
    push           4          
    pushptroff                i32 1 0
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.doincrload.mx u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.doincrload.ax u64 
#7417: 
    push           pc_genmcl.doincrload.p u64 
    push           16         
    pushptroff                i32 1 0
    push           1          i64 
    jumpne         #7418      i64 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.doincrload.mx u64 
    push           pc_genmcl.doincrload.incrop i64 
    callproc       &pc_libmcl.genmc 
    jump           #7419      
#7418: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.doincrload.p u64 
    push           16         
    pushptroff                i32 1 0
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.doincrload.mx u64 
    push           pc_genmcl.doincrload.addop i64 
    callproc       &pc_libmcl.genmc 
#7419: 
    push           &pc_tables.pcat 
    push           pc_genmcl.doincrload.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           4          i64 
    jumpne         #7420      i64 
    setargs                   3 0
    push           pc_genmcl.doincrload.mx u64 
    push           pc_genmcl.doincrload.ax u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_genmcl.doincrload.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #7421      i64 
    push           19         i64 
    resetmult                 
    jump           #7422      
#7421: 
    push           20         i64 
    endmult                   
#7422: 
    callproc       &pc_libmcl.genmc 
    jump           #7423      
#7420: 
    setargs                   3 0
    push           pc_genmcl.doincrload.mx u64 
    push           pc_genmcl.doincrload.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
#7423: 
#7424: 
    retproc                   
End


Proc pc_genmcl.doloadincr:
    param          pc_genmcl.doloadincr.p u64 
    param          pc_genmcl.doloadincr.incrop i64 
    param          pc_genmcl.doloadincr.addop i64 
    local          pc_genmcl.doloadincr.ax u64 
    local          pc_genmcl.doloadincr.mx u64 
    procentry                 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.ismemaddr i64 
    jumpfalse      #7426      i64 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    pop            pc_genmcl.doloadincr.mx u64 
    jump           #7427      
#7426: 
    setargs                   2 0
    push           pc_genmcl.doloadincr.p u64 
    push           4          
    pushptroff                i32 1 0
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.doloadincr.mx u64 
#7427: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_d64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.doloadincr.ax u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.doloadincr.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           4          i64 
    jumpne         #7428      i64 
    setargs                   3 0
    push           pc_genmcl.doloadincr.mx u64 
    push           pc_genmcl.doloadincr.ax u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_genmcl.doloadincr.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #7429      i64 
    push           19         i64 
    resetmult                 
    jump           #7430      
#7429: 
    push           20         i64 
    endmult                   
#7430: 
    callproc       &pc_libmcl.genmc 
    jump           #7431      
#7428: 
    setargs                   3 0
    push           pc_genmcl.doloadincr.mx u64 
    push           pc_genmcl.doloadincr.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
#7431: 
    push           pc_genmcl.doloadincr.p u64 
    push           16         
    pushptroff                i32 1 0
    push           1          i64 
    jumpne         #7432      i64 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.doloadincr.mx u64 
    push           pc_genmcl.doloadincr.incrop i64 
    callproc       &pc_libmcl.genmc 
    jump           #7433      
#7432: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.doloadincr.p u64 
    push           16         
    pushptroff                i32 1 0
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.doloadincr.mx u64 
    push           pc_genmcl.doloadincr.addop i64 
    callproc       &pc_libmcl.genmc 
#7433: 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7434: 
    retproc                   
End


Proc pc_genmcl.dobin_i128:
    param          pc_genmcl.dobin_i128.p u64 
    param          pc_genmcl.dobin_i128.opc1 i64 
    param          pc_genmcl.dobin_i128.opc2 i64 
    local          pc_genmcl.dobin_i128.axl u64 
    local          pc_genmcl.dobin_i128.axh u64 
    local          pc_genmcl.dobin_i128.bxl u64 
    local          pc_genmcl.dobin_i128.bxh u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dobin_i128.axl u64 
    setargs                   2 0
    push           8          i64 
    push           4          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dobin_i128.axh u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dobin_i128.bxl u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dobin_i128.bxh u64 
    setargs                   3 0
    push           pc_genmcl.dobin_i128.bxl u64 
    push           pc_genmcl.dobin_i128.axl u64 
    push           pc_genmcl.dobin_i128.opc1 i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.dobin_i128.bxh u64 
    push           pc_genmcl.dobin_i128.axh u64 
    push           pc_genmcl.dobin_i128.opc2 i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7436: 
    retproc                   
End


Proc pc_genmcl.dojumpcc_i128:
    param          pc_genmcl.dojumpcc_i128.p u64 
    local          pc_genmcl.dojumpcc_i128.axlow u64 
    local          pc_genmcl.dojumpcc_i128.axhigh u64 
    local          pc_genmcl.dojumpcc_i128.bxlow u64 
    local          pc_genmcl.dojumpcc_i128.bxhigh u64 
    local          pc_genmcl.dojumpcc_i128.cx u64 
    local          pc_genmcl.dojumpcc_i128.dx u64 
    local          pc_genmcl.dojumpcc_i128.lxtrue u64 
    local          pc_genmcl.dojumpcc_i128.lxfalse u64 
    procentry                 
    push           pc_genmcl.dojumpcc_i128.p u64 
    push           3          
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #7438      i64 
    push           pc_genmcl.dojumpcc_i128.p u64 
    push           1          
    pushptroff                u8 1 0
    push           53         i64 
    setjumpeq      #7438      i64 
    push           54         i64 
    setjumpeqx     #7438      i64 
    setargs                   1 0
    push           pc_genmcl.dojumpcc_i128.p u64 
    callproc       &pc_genmcl.dojumpcc_u128 
    jump           #7439      
#7438: 
    setargs                   1 0
    push           pc_genmcl.dojumpcc_i128.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    pop            pc_genmcl.dojumpcc_i128.lxtrue u64 
    setargs                   2 0
    push           8          i64 
    push           4          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dojumpcc_i128.axhigh u64 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dojumpcc_i128.axlow u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dojumpcc_i128.bxhigh u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dojumpcc_i128.bxlow u64 
    push           pc_genmcl.dojumpcc_i128.p u64 
    push           1          
    pushptroff                u8 1 0
    push           53         i64 
    casejumpeq     #7440      i64 0
    push           54         i64 
    casejumpeq     #7441      i64 0
    popstack                  i64 
    jump           #7442      
#7440: 
    setargs                   3 0
    push           pc_genmcl.dojumpcc_i128.bxlow u64 
    push           pc_genmcl.dojumpcc_i128.axlow u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_libmcl.mgenlabel u64 
    store          pc_genmcl.dojumpcc_i128.lxfalse u64 
    push           5          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.dojumpcc_i128.bxhigh u64 
    push           pc_genmcl.dojumpcc_i128.axhigh u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_i128.lxtrue u64 
    push           4          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_i128.lxfalse u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    jump           #7443      
#7441: 
    setargs                   3 0
    push           pc_genmcl.dojumpcc_i128.bxlow u64 
    push           pc_genmcl.dojumpcc_i128.axlow u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_i128.lxtrue u64 
    push           5          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.dojumpcc_i128.bxhigh u64 
    push           pc_genmcl.dojumpcc_i128.axhigh u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_i128.lxtrue u64 
    push           5          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    jump           #7443      
#7442: 
    setargs                   3 0
    push           pc_genmcl.dojumpcc_i128.bxlow u64 
    push           pc_genmcl.dojumpcc_i128.axlow u64 
    push           30         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.dojumpcc_i128.bxhigh u64 
    push           pc_genmcl.dojumpcc_i128.axhigh u64 
    push           32         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pci_mcl.zero_opnd u64 
    push           pc_genmcl.dojumpcc_i128.axhigh u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_tables.psigned 
    push           pc_genmcl.dojumpcc_i128.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #7444      i64 
    push           pc_genmcl.dojumpcc_i128.p u64 
    push           1          
    pushptroff                u8 1 0
    push           55         i64 
    casejumpeq     #7445      i64 0
    push           56         i64 
    casejumpeq     #7446      i64 0
    push           58         i64 
    casejumpeq     #7447      i64 0
    push           57         i64 
    casejumpeq     #7448      i64 0
    popstack                  i64 
    jump           #7449      
#7445: 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_i128.lxtrue u64 
    push           12         i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    jump           #7450      
#7446: 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_i128.lxtrue u64 
    push           12         i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.dojumpcc_i128.axhigh u64 
    push           pc_genmcl.dojumpcc_i128.axlow u64 
    push           40         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_i128.lxtrue u64 
    push           4          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    jump           #7450      
#7447: 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_libmcl.mgenlabel u64 
    store          pc_genmcl.dojumpcc_i128.lxfalse u64 
    push           12         i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.dojumpcc_i128.axhigh u64 
    push           pc_genmcl.dojumpcc_i128.axlow u64 
    push           40         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_i128.lxtrue u64 
    push           5          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_i128.lxfalse u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    jump           #7450      
#7448: 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_i128.lxtrue u64 
    push           13         i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    jump           #7450      
#7449: 
#7450: 
    jump           #7451      
#7444: 
    setargs                   2 0
    push           pc_genmcl.dojumpcc_i128.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "jumpcc/rel" u64 
    callproc       &pc_libmcl.merrort 
#7451: 
#7443: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7439: 
    retproc                   
End


Proc pc_genmcl.dojumpcc_u128:
    param          pc_genmcl.dojumpcc_u128.p u64 
    local          pc_genmcl.dojumpcc_u128.lxtrue u64 
    local          pc_genmcl.dojumpcc_u128.lxfalse u64 
    local          pc_genmcl.dojumpcc_u128.ax1 u64 
    local          pc_genmcl.dojumpcc_u128.bx1 u64 
    local          pc_genmcl.dojumpcc_u128.ax2 u64 
    local          pc_genmcl.dojumpcc_u128.bx2 u64 
    local          pc_genmcl.dojumpcc_u128.cond1 i64 
    local          pc_genmcl.dojumpcc_u128.cond2 i64 
    local          pc_genmcl.dojumpcc_u128.cond3 i64 
    procentry                 
    push           pc_genmcl.dojumpcc_u128.p u64 
    push           1          
    pushptroff                u8 1 0
    push           58         i64 
    casejumpeq     #7453      i64 0
    push           57         i64 
    casejumpeq     #7454      i64 0
    push           55         i64 
    casejumpeq     #7455      i64 0
    push           56         i64 
    casejumpeq     #7456      i64 0
    popstack                  i64 
    jump           #7457      
#7453: 
    push           7          i64 
    pop            pc_genmcl.dojumpcc_u128.cond1 i64 
    push           2          i64 
    pop            pc_genmcl.dojumpcc_u128.cond2 i64 
    push           7          i64 
    pop            pc_genmcl.dojumpcc_u128.cond3 i64 
    jump           #7458      
#7454: 
    push           7          i64 
    pop            pc_genmcl.dojumpcc_u128.cond1 i64 
    push           2          i64 
    pop            pc_genmcl.dojumpcc_u128.cond2 i64 
    push           3          i64 
    pop            pc_genmcl.dojumpcc_u128.cond3 i64 
    jump           #7458      
#7455: 
    push           2          i64 
    pop            pc_genmcl.dojumpcc_u128.cond1 i64 
    push           7          i64 
    pop            pc_genmcl.dojumpcc_u128.cond2 i64 
    push           2          i64 
    pop            pc_genmcl.dojumpcc_u128.cond3 i64 
    jump           #7458      
#7456: 
    push           2          i64 
    pop            pc_genmcl.dojumpcc_u128.cond1 i64 
    push           7          i64 
    pop            pc_genmcl.dojumpcc_u128.cond2 i64 
    push           6          i64 
    pop            pc_genmcl.dojumpcc_u128.cond3 i64 
    jump           #7458      
#7457: 
    setargs                   2 0
    push           ""         u64 
    push           "JCC/U128" u64 
    callproc       &pc_libmcl.merror 
#7458: 
    setargs                   1 0
    push           pc_genmcl.dojumpcc_u128.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    pop            pc_genmcl.dojumpcc_u128.lxtrue u64 
    setargs                   1 0
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    callfn         &pc_libmcl.mgenlabel u64 
    pop            pc_genmcl.dojumpcc_u128.lxfalse u64 
    setargs                   2 0
    push           8          i64 
    push           4          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dojumpcc_u128.ax2 u64 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dojumpcc_u128.ax1 u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dojumpcc_u128.bx2 u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dojumpcc_u128.bx1 u64 
    setargs                   3 0
    push           pc_genmcl.dojumpcc_u128.bx2 u64 
    push           pc_genmcl.dojumpcc_u128.ax2 u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_u128.lxtrue u64 
    push           pc_genmcl.dojumpcc_u128.cond1 i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_u128.lxfalse u64 
    push           pc_genmcl.dojumpcc_u128.cond2 i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.dojumpcc_u128.bx1 u64 
    push           pc_genmcl.dojumpcc_u128.ax1 u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_u128.lxtrue u64 
    push           pc_genmcl.dojumpcc_u128.cond3 i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_u128.lxfalse u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7459: 
    retproc                   
End


Proc pc_genmcl.do_syscall:
    param          pc_genmcl.do_syscall.fnindex i64 
    param          pc_genmcl.do_syscall.nargs i64 
    param          pc_genmcl.do_syscall.retcat i64 
    local          pc_genmcl.do_syscall.nslots i64 
    local          pc_genmcl.do_syscall.av_1 i64 
    procentry                 
    push           pc_genmcl.do_syscall.nargs i64 
    pop            pci_mcl.sa_nargs i64 
    setargs                   1 0
    push           0          u64 
    callproc       &pc_genmcl.px_setargs 
    setargs                   2 0
    push           0          i64 
    push           0          u64 
    callfn         &pc_genmcl.do_pushparams i64 
    pop            pc_genmcl.do_syscall.nslots i64 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    setargs                   1 0
    push           pc_genmcl.do_syscall.fnindex i64 
    callfn         &pc_libmcl.getrtsproclabel i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           22         i64 
    callproc       &pc_libmcl.genmc 
    push           8          i64 
    push           pci_mcl.mccodex u64 
    push           8          
    pushptroff                u64 1 0
    push           8          
    popptroff                 u8 1 0
#7461: 
    push           pci_mcl.sa_nargs i64 
    pop            pc_genmcl.do_syscall.av_1 i64 
    push           pc_genmcl.do_syscall.av_1 i64 
    push           0          i64 
    jumple         #7462      i64 
#7463: 
    setargs                   0 0
    callproc       &pc_stackmcl.poparg 
#7464: 
    to             #7463      
    opnd           pc_genmcl.do_syscall.av_1 
#7462: 
    setargs                   1 0
    push           pc_genmcl.do_syscall.nslots i64 
    callproc       &pc_stackmcl.popslots 
    setargs                   1 0
    push           pc_genmcl.do_syscall.retcat i64 
    callproc       &pc_genmcl.getretvalue_bycat 
#7465: 
    retproc                   
End


Proc pc_genmcl.getretvalue_bycat:
    param          pc_genmcl.getretvalue_bycat.cat i64 
    procentry                 
    push           pc_genmcl.getretvalue_bycat.cat i64 
    push           0          i64 
    casejumpeq     #7467      i64 0
    push           1          i64 
    casejumpeq     #7468      i64 0
    push           3          i64 
    casejumpeq     #7469      i64 0
    push           2          i64 
    casejumpeq     #7470      i64 0
    push           5          i64 
    casejumpeq     #7471      i64 0
    popstack                  i64 
    jump           #7472      
#7467: 
    jump           #7473      
    jump           #7474      
#7468: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.addreg0 
    jump           #7474      
#7469: 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.addxreg0 
    jump           #7474      
#7470: 
    setargs                   2 0
    push           3          i64 
    push           1          i64 
    callproc       &pc_stackmcl.addxreg0 
    jump           #7474      
#7471: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.addwidereg0 
    jump           #7474      
#7472: 
    setargs                   2 0
    push           ""         u64 
    push           "getval bycat" u64 
    callproc       &pc_libmcl.merror 
#7474: 
#7473: 
    retproc                   
End


Proc pc_genmcl.px_pushlabel:
    param          pc_genmcl.px_pushlabel.p u64 
    procentry                 
    push           pc_genmcl.px_pushlabel.p u64 
    pushptr                   u8 
    push           3          i64 
    jumpeq         #7476      i64 
    setargs                   2 0
    push           ""         u64 
    push           "pushlabel" u64 
    callproc       &pc_libmcl.merror 
#7476: 
    setargs                   1 0
    push           pc_genmcl.px_pushlabel.p u64 
    push           8          
    pushptroff                i64 1 0
    callproc       &pc_stackmcl.addlabeladdr 
#7477: 
    retproc                   
End


Proc pc_genmcl.do_shiftnto:
    param          pc_genmcl.do_shiftnto.p u64 
    param          pc_genmcl.do_shiftnto.opc i64 
    local          pc_genmcl.do_shiftnto.px u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.do_shiftnto.px u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #7479      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.do_shiftnto.px u64 
    push           pc_genmcl.do_shiftnto.opc i64 
    callproc       &pc_libmcl.genmc 
    jump           #7480      
#7479: 
    push           pci_mcl.inf_r10used i64 
    jumpfalse      #7481      i64 
    setargs                   2 0
    push           ""         u64 
    push           "shiftto:cl in use" u64 
    callproc       &pc_libmcl.merror 
#7481: 
    setargs                   2 0
    push           11         i64 
    push           1          i64 
    callproc       &pc_stackmcl.loadparam 
    setargs                   3 0
    setargs                   2 0
    push           1          i64 
    push           11         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           pc_genmcl.do_shiftnto.px u64 
    push           pc_genmcl.do_shiftnto.opc i64 
    callproc       &pc_libmcl.genmc 
#7480: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7482: 
    retproc                   
End


Proc pc_genmcl.domax_float:
    param          pc_genmcl.domax_float.opc i64 
    local          pc_genmcl.domax_float.ax u64 
    local          pc_genmcl.domax_float.bx u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.domax_float.ax u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.domax_float.bx u64 
    setargs                   3 0
    push           pc_genmcl.domax_float.bx u64 
    push           pc_genmcl.domax_float.ax u64 
    push           pc_genmcl.domax_float.opc i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7484: 
    retproc                   
End


Proc pc_genmcl.domax_int:
    param          pc_genmcl.domax_int.cond i64 
    local          pc_genmcl.domax_int.ax u64 
    local          pc_genmcl.domax_int.bx u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.domax_int.ax u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.domax_int.bx u64 
    setargs                   3 0
    push           pc_genmcl.domax_int.bx u64 
    push           pc_genmcl.domax_int.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           pc_genmcl.domax_int.bx u64 
    push           pc_genmcl.domax_int.ax u64 
    push           pc_genmcl.domax_int.cond i64 
    push           16         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7486: 
    retproc                   
End


Proc pc_genmcl.domaxto_r64:
    param          pc_genmcl.domaxto_r64.cond i64 
    local          pc_genmcl.domaxto_r64.px u64 
    local          pc_genmcl.domaxto_r64.ax u64 
    local          pc_genmcl.domaxto_r64.bx u64 
    local          pc_genmcl.domaxto_r64.lx u64 
    local          pc_genmcl.domaxto_r64.lab i64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.domaxto_r64.px u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.domaxto_r64.bx u64 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_x64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.domaxto_r64.ax u64 
    setargs                   3 0
    push           pc_genmcl.domaxto_r64.px u64 
    push           pc_genmcl.domaxto_r64.ax u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.domaxto_r64.bx u64 
    push           pc_genmcl.domaxto_r64.ax u64 
    push           73         i64 
    callproc       &pc_libmcl.genmc 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pc_genmcl.domaxto_r64.lab i64 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.domaxto_r64.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    store          pc_genmcl.domaxto_r64.lx u64 
    push           pc_genmcl.domaxto_r64.cond i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.domaxto_r64.bx u64 
    push           pc_genmcl.domaxto_r64.px u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.domaxto_r64.lx u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7488: 
    retproc                   
End


Proc pc_genmcl.domaxto_r32:
    param          pc_genmcl.domaxto_r32.cond i64 
    local          pc_genmcl.domaxto_r32.px u64 
    local          pc_genmcl.domaxto_r32.ax u64 
    local          pc_genmcl.domaxto_r32.bx u64 
    local          pc_genmcl.domaxto_r32.lx u64 
    local          pc_genmcl.domaxto_r32.lab i64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.domaxto_r32.px u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.domaxto_r32.bx u64 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_x32 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.domaxto_r32.ax u64 
    setargs                   3 0
    push           pc_genmcl.domaxto_r32.px u64 
    push           pc_genmcl.domaxto_r32.ax u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.domaxto_r32.bx u64 
    push           pc_genmcl.domaxto_r32.ax u64 
    push           72         i64 
    callproc       &pc_libmcl.genmc 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pc_genmcl.domaxto_r32.lab i64 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.domaxto_r32.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    store          pc_genmcl.domaxto_r32.lx u64 
    push           pc_genmcl.domaxto_r32.cond i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.domaxto_r32.bx u64 
    push           pc_genmcl.domaxto_r32.px u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.domaxto_r32.lx u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7490: 
    retproc                   
End


Proc pc_genmcl.domaxto_int:
    param          pc_genmcl.domaxto_int.cond i64 
    local          pc_genmcl.domaxto_int.ax u64 
    local          pc_genmcl.domaxto_int.bx u64 
    local          pc_genmcl.domaxto_int.lx u64 
    local          pc_genmcl.domaxto_int.lab i64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.domaxto_int.ax u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.domaxto_int.bx u64 
    setargs                   3 0
    push           pc_genmcl.domaxto_int.bx u64 
    push           pc_genmcl.domaxto_int.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pc_genmcl.domaxto_int.lab i64 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.domaxto_int.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    store          pc_genmcl.domaxto_int.lx u64 
    push           pc_genmcl.domaxto_int.cond i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.domaxto_int.bx u64 
    push           pc_genmcl.domaxto_int.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.domaxto_int.lx u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#7492: 
    retproc                   
End


Proc pc_genmcl.dosetfntable:
    procentry                 
    push           pci_mcl.lab_funcnametable i64 
    push           0          i64 
    jumpne         #7494      i64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pci_mcl.lab_funcnametable i64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pci_mcl.lab_funcaddrtable i64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pci_mcl.lab_funcnprocs i64 
#7494: 
#7495: 
    retproc                   
End


Proc pc_genmcl.loadtoreg:
    param          pc_genmcl.loadtoreg.rx u64 
    param          pc_genmcl.loadtoreg.ax u64 
    param          pc_genmcl.loadtoreg.m i64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.loadtoreg.m i64 
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #7497      i64 
    setargs                   3 0
    push           pc_genmcl.loadtoreg.ax u64 
    push           pc_genmcl.loadtoreg.rx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #7498      
#7497: 
    push           &pc_tables.psigned 
    push           pc_genmcl.loadtoreg.m i64 
    pushptroff                u8 1 0
    jumpfalse      #7499      i64 
    setargs                   3 0
    push           pc_genmcl.loadtoreg.ax u64 
    push           pc_genmcl.loadtoreg.rx u64 
    push           19         i64 
    callproc       &pc_libmcl.genmc 
    jump           #7498      
#7499: 
    setargs                   3 0
    push           pc_genmcl.loadtoreg.ax u64 
    push           pc_genmcl.loadtoreg.rx u64 
    push           20         i64 
    callproc       &pc_libmcl.genmc 
#7498: 
#7500: 
    retproc                   
End


Proc pc_genmcl.storefromreg:
    param          pc_genmcl.storefromreg.ax u64 
    param          pc_genmcl.storefromreg.rx u64 
    param          pc_genmcl.storefromreg.size i64 
    procentry                 
    setargs                   3 0
    setargs                   2 0
    push           pc_genmcl.storefromreg.size i64 
    push           pc_genmcl.storefromreg.rx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           pc_genmcl.storefromreg.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
#7502: 
    retproc                   
End


Proc pc_genmcl.domaths:
    param          pc_genmcl.domaths.p u64 
    param          pc_genmcl.domaths.opname u64 
    local          pc_genmcl.domaths.nslots i64 
    procentry                 
    push           1          i64 
    push           pc_genmcl.domaths.p u64 
    push           16         
    popptroff                 i32 1 0
    setargs                   1 0
    push           pc_genmcl.domaths.p u64 
    callproc       &pc_genmcl.px_setargs 
    setargs                   2 0
    push           0          i64 
    push           pc_genmcl.domaths.p u64 
    callfn         &pc_genmcl.do_pushparams i64 
    pop            pc_genmcl.domaths.nslots i64 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.domaths.opname u64 
    callfn         &pc_libmcl.mgenextname u64 
    push           22         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.poparg 
    setargs                   1 0
    push           pc_genmcl.domaths.nslots i64 
    callproc       &pc_stackmcl.popslots 
    setargs                   1 0
    push           pc_genmcl.domaths.p u64 
    callproc       &pc_genmcl.dogetretvalue 
#7504: 
    retproc                   
End


Proc pc_libmcl.mclinit:
    local          pc_libmcl.mclinit.a u64 
    local          pc_libmcl.mclinit.r i64 
    local          pc_libmcl.mclinit.s i64 
    local          pc_libmcl.mclinit.av_1 i64 
    local          pc_libmcl.mclinit.i i64 
    procentry                 
#7506: 
    push           1          i64 
    pop            pc_libmcl.mclinit.r i64 
#7507: 
    setargs                   2 0
    push           1          i64 
    push           pc_libmcl.mclinit.r i64 
    callfn         &pc_libmcl.mgenreg0 u64 
    push           &pci_mcl.regtable 
    push           pc_libmcl.mclinit.r i64 
    addrefoff                 block:128 128 -128
    push           1          i64 
    popptroff                 u64 8 -8
    setargs                   2 0
    push           2          i64 
    push           pc_libmcl.mclinit.r i64 
    callfn         &pc_libmcl.mgenreg0 u64 
    push           &pci_mcl.regtable 
    push           pc_libmcl.mclinit.r i64 
    addrefoff                 block:128 128 -128
    push           2          i64 
    popptroff                 u64 8 -8
    setargs                   2 0
    push           4          i64 
    push           pc_libmcl.mclinit.r i64 
    callfn         &pc_libmcl.mgenreg0 u64 
    push           &pci_mcl.regtable 
    push           pc_libmcl.mclinit.r i64 
    addrefoff                 block:128 128 -128
    push           4          i64 
    popptroff                 u64 8 -8
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.mclinit.r i64 
    callfn         &pc_libmcl.mgenreg0 u64 
    push           &pci_mcl.regtable 
    push           pc_libmcl.mclinit.r i64 
    addrefoff                 block:128 128 -128
    push           8          i64 
    popptroff                 u64 8 -8
    setargs                   2 0
    push           16         i64 
    push           pc_libmcl.mclinit.r i64 
    callfn         &pc_libmcl.mgenreg0 u64 
    push           &pci_mcl.regtable 
    push           pc_libmcl.mclinit.r i64 
    addrefoff                 block:128 128 -128
    push           16         i64 
    popptroff                 u64 8 -8
    push           &pci_mcl.regtable 
    push           pc_libmcl.mclinit.r i64 
    addrefoff                 block:128 128 -128
    push           8          i64 
    pushptroff                u64 8 -8
    push           &pc_libmcl.rd 
    push           pc_libmcl.mclinit.r i64 
    popptroff                 u64 8 -16
#7508: 
    forup          #7507      i64 1
    opnd           pc_libmcl.mclinit.r 
    opnd           16         
#7509: 
    setargs                   2 0
    push           8          i64 
    push           0          i64 
    callfn         &pc_libmcl.mgenint0 u64 
    pop            pci_mcl.zero_opnd u64 
#7510: 
    push           0          i64 
    pop            pc_libmcl.mclinit.i i64 
#7511: 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.mclinit.i i64 
    callfn         &pc_libmcl.mgenint0 u64 
    push           &pci_mcl.smallinttable 
    push           pc_libmcl.mclinit.i i64 
    popptroff                 u64 8 0
#7512: 
    forup          #7511      i64 1
    opnd           pc_libmcl.mclinit.i 
    opnd           32         
#7513: 
#7514: 
    push           -128       i64 
    pop            pc_libmcl.mclinit.i i64 
    push           64         i64 
    pop            pc_libmcl.mclinit.av_1 i64 
    push           pc_libmcl.mclinit.av_1 i64 
    push           -128       i64 
    jumplt         #7515      i64 
#7516: 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mclinit.a u64 
    push           3          i64 
    push           pc_libmcl.mclinit.a u64 
    push           9          
    popptroff                 u8 1 0
    push           15         i64 
    push           pc_libmcl.mclinit.a u64 
    push           10         
    popptroff                 u8 1 0
    push           8          i64 
    push           pc_libmcl.mclinit.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mclinit.i i64 
    push           pc_libmcl.mclinit.a u64 
    push           14         
    popptroff                 i32 1 0
    push           pc_libmcl.mclinit.a u64 
    push           &pci_mcl.frameregtable 
    push           pc_libmcl.mclinit.i i64 
    popptroff                 u64 8 1024
#7517: 
    forup          #7516      i64 1
    opnd           pc_libmcl.mclinit.i 
    opnd           pc_libmcl.mclinit.av_1 
#7515: 
    setargs                   2 0
    push           8          i64 
    push           15         i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pci_mcl.dframeopnd u64 
    setargs                   2 0
    push           8          i64 
    push           16         i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pci_mcl.dstackopnd u64 
    setargs                   0 0
    callproc       &pc_libmcl.initmcdest 
    setargs                   2 0
    push           1          i64 
    push           67         i64 
    callproc       &pc_libmcl.setsegment 
    setargs                   1 0
    push           8192       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pci_mcl.stringtable u64 
    setargs                   1 0
    push           4096       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pci_mcl.stringlabtable u64 
    setargs                   1 0
    push           128        i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pci_mcl.realtable u64 
    setargs                   1 0
    push           64         i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pci_mcl.reallabtable u64 
    push           0          i64 
    pop            pci_mcl.nstrings i64 
    push           0          i64 
    pop            pci_mcl.nreals i64 
    push           1024       i64 
    pop            pci_mcl.stringtablesize i64 
    push           16         i64 
    pop            pci_mcl.realtablesize i64 
    push           &pci_mcl.pclopndstack 
    push           2985       
    addrefoff                 u8 1 0
    pop            pci_mcl.pclstack u64 
    push           0          i64 
    pop            pci_mcl.lab_funcnametable i64 
    push           0          i64 
    pop            pci_mcl.lab_funcaddrtable i64 
#7518: 
    retproc                   
End


Proc pc_libmcl.initmcdest:
    procentry                 
    push           0          u64 
    store          pci_mcl.mccodex u64 
    pop            pci_mcl.mccode u64 
    push           &pci_mcl.rtsproclabels 
    clear                     block:48 
#7520: 
    retproc                   
End


Proc pc_libmcl.genmc:
    param          pc_libmcl.genmc.opcode i64 
    param          pc_libmcl.genmc.a u64 
    param          pc_libmcl.genmc.b u64 
    local          pc_libmcl.genmc.m u64 
    local          pc_libmcl.genmc.oldm u64 
    local          pc_libmcl.genmc.labno i64 
    procentry                 
    setargs                   1 0
    push           59         i64 
    callfn         &mlibp.pcm_allocz u64 
    pop            pc_libmcl.genmc.m u64 
    push           pc_libmcl.genmc.opcode i64 
    push           pc_libmcl.genmc.m u64 
    push           24         
    popptroff                 u8 1 0
    push           pc_libmcl.genmc.a u64 
    push           pc_libmcl.genmc.m u64 
    push           8          
    popptroff                 u64 1 0
    push           pc_libmcl.genmc.b u64 
    push           pc_libmcl.genmc.m u64 
    push           16         
    popptroff                 u64 1 0
    push           pc_libmcl.genmc.opcode i64 
    push           22         i64 
    casejumpeq     #7522      i64 0
    push           15         i64 
    casejumpeq     #7523      i64 0
    push           9          i64 
    casejumpeq     #7524      i64 0
    popstack                  i64 
    jump           #7525      
#7522: 
    push           &pci_mcl.inf_proccalls 
    incr                      i64 1
    jump           #7526      
#7523: 
    push           pc_libmcl.genmc.b u64 
    jumpfalse      #7527      u64 
    push           pc_libmcl.genmc.b u64 
    push           12         
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #7527      i64 
    push           1          u64 
    push           pc_libmcl.genmc.b u64 
    pushptr                   u64 
    push           46         
    addrefoff                 u64 1 0
    push           2          i64 
    popdotindex               u16 
#7527: 
    jump           #7526      
#7524: 
    push           pc_libmcl.genmc.a u64 
    pushptr                   i64 
    pop            pc_libmcl.genmc.labno i64 
    push           pc_libmcl.genmc.labno i64 
    push           800000     i64 
    jumple         #7528      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "LABNO="   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libmcl.genmc.labno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           800000     i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           ""         u64 
    push           "Too many labels" u64 
    callproc       &pc_libmcl.merror 
#7528: 
    push           pc_libmcl.genmc.m u64 
    push           &pci_mcl.labeltable 
    push           pc_libmcl.genmc.labno i64 
    popptroff                 u64 8 -8
    jump           #7526      
#7525: 
#7526: 
    push           pci_mcl.mccode u64 
    jumpfalse      #7529      u64 
    push           pc_libmcl.genmc.m u64 
    push           pci_mcl.mccodex u64 
    push           0          
    popptroff                 u64 1 0
    push           pc_libmcl.genmc.m u64 
    pop            pci_mcl.mccodex u64 
    jump           #7530      
#7529: 
    push           pc_libmcl.genmc.m u64 
    store          pci_mcl.mccodex u64 
    pop            pci_mcl.mccode u64 
#7530: 
#7531: 
    retproc                   
End


Proc pc_libmcl.genmc_cond:
    param          pc_libmcl.genmc_cond.opcode i64 
    param          pc_libmcl.genmc_cond.cond i64 
    param          pc_libmcl.genmc_cond.a u64 
    param          pc_libmcl.genmc_cond.b u64 
    procentry                 
    setargs                   3 0
    push           pc_libmcl.genmc_cond.b u64 
    push           pc_libmcl.genmc_cond.a u64 
    push           pc_libmcl.genmc_cond.opcode i64 
    callproc       &pc_libmcl.genmc 
    push           pc_libmcl.genmc_cond.cond i64 
    push           pci_mcl.mccodex u64 
    push           25         
    popptroff                 u8 1 0
#7533: 
    retproc                   
End


Proc pc_libmcl.genmc_str:
    param          pc_libmcl.genmc_str.opcode i64 
    param          pc_libmcl.genmc_str.s u64 
    procentry                 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           -1         i64 
    push           pc_libmcl.genmc_str.s u64 
    callfn         &pc_libmcl.mgenstring u64 
    push           pc_libmcl.genmc_str.opcode i64 
    callproc       &pc_libmcl.genmc 
#7535: 
    retproc                   
End


Proc pc_libmcl.newmclopnd: u64
    local          pc_libmcl.newmclopnd.a u64 
    procentry                 
    setargs                   1 0
    push           19         i64 
    callfn         &mlibp.pcm_allocz u64 
    pop            pc_libmcl.newmclopnd.a u64 
    push           pc_libmcl.newmclopnd.a u64 
    setret                    u64 
    jump           #7537      
#7537: 
    retfn                     u64 
End


Proc pc_libmcl.duplopnd: u64
    param          pc_libmcl.duplopnd.a u64 
    local          pc_libmcl.duplopnd.b u64 
    procentry                 
    setargs                   1 0
    push           19         i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pc_libmcl.duplopnd.b u64 
    push           pc_libmcl.duplopnd.a u64 
    pushptr                   block:19 
    push           pc_libmcl.duplopnd.b u64 
    popptr                    block:19 
    push           pc_libmcl.duplopnd.b u64 
    setret                    u64 
    jump           #7539      
#7539: 
    retfn                     u64 
End


Proc pc_libmcl.mgenxreg: u64
    param          pc_libmcl.mgenxreg.xreg i64 
    param          pc_libmcl.mgenxreg.size i64 
    local          pc_libmcl.mgenxreg.a u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenxreg.a u64 
    push           5          i64 
    push           pc_libmcl.mgenxreg.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenxreg.xreg i64 
    push           pc_libmcl.mgenxreg.a u64 
    push           10         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenxreg.size i64 
    push           pc_libmcl.mgenxreg.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenxreg.a u64 
    setret                    u64 
    jump           #7541      
#7541: 
    retfn                     u64 
End


Proc pc_libmcl.mgenindex: u64
    param          pc_libmcl.mgenindex.areg i64 
    param          pc_libmcl.mgenindex.ireg i64 
    param          pc_libmcl.mgenindex.scale i64 
    param          pc_libmcl.mgenindex.offset i64 
    param          pc_libmcl.mgenindex.size i64 
    param          pc_libmcl.mgenindex.labno i64 
    param          pc_libmcl.mgenindex.def u64 
    local          pc_libmcl.mgenindex.a u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenindex.a u64 
    push           3          i64 
    push           pc_libmcl.mgenindex.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenindex.areg i64 
    push           pc_libmcl.mgenindex.a u64 
    push           10         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenindex.ireg i64 
    push           pc_libmcl.mgenindex.a u64 
    push           11         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenindex.scale i64 
    push           pc_libmcl.mgenindex.a u64 
    push           13         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenindex.size i64 
    push           pc_libmcl.mgenindex.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenindex.offset i64 
    push           pc_libmcl.mgenindex.a u64 
    push           14         
    popptroff                 i32 1 0
    push           pc_libmcl.mgenindex.labno i64 
    jumpfalse      #7543      i64 
    push           pc_libmcl.mgenindex.labno i64 
    push           pc_libmcl.mgenindex.a u64 
    push           0          
    popptroff                 i64 1 0
    push           7          i64 
    push           pc_libmcl.mgenindex.a u64 
    push           12         
    popptroff                 u8 1 0
    jump           #7544      
#7543: 
    push           pc_libmcl.mgenindex.def u64 
    jumpfalse      #7545      u64 
    push           pc_libmcl.mgenindex.def u64 
    push           pc_libmcl.mgenindex.a u64 
    push           0          
    popptroff                 u64 1 0
    push           pc_libmcl.mgenindex.def u64 
    push           48         
    addrefoff                 u64 1 0
    incr                      i16 1
    push           5          i64 
    push           pc_libmcl.mgenindex.a u64 
    push           12         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenindex.def u64 
    push           27         
    pushptroff                u8 1 0
    push           18         i64 
    setjumpeq      #7546      i64 
    push           19         i64 
    setjumpne      #7547      i64 
#7546: 
    push           15         i64 
    push           pc_libmcl.mgenindex.a u64 
    push           10         
    popptroff                 u8 1 0
#7547: 
#7545: 
#7544: 
    push           pc_libmcl.mgenindex.a u64 
    setret                    u64 
    jump           #7548      
#7548: 
    retfn                     u64 
End


Proc pc_libmcl.getmclstr: u64
    local          pc_libmcl.getmclstr.d u64 
    local          pc_libmcl.getmclstr.e u64 
    local          pc_libmcl.getmclstr.m u64 
    local          pc_libmcl.getmclstr.str2 block:32 
    local          pc_libmcl.getmclstr.str3 block:32 
    local          pc_libmcl.getmclstr.i i64 
    procentry                 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_init 
    push           pci_mcl.mccode u64 
    pop            pc_libmcl.getmclstr.m u64 
    push           1          i64 
    pop            pc_libmcl.getmclstr.i i64 
    jump           #7550      
#7551: 
    setargs                   2 0
    push           pc_libmcl.getmclstr.m u64 
    push           pc_libmcl.getmclstr.i i64 
    callproc       &pc_libmcl.writemcl 
    push           &pc_libmcl.getmclstr.i 
    incr                      i64 1
    push           pc_libmcl.getmclstr.m u64 
    pushptr                   u64 
    pop            pc_libmcl.getmclstr.m u64 
#7550: 
    push           pc_libmcl.getmclstr.m u64 
    jumptrue       #7551      u64 
#7552: 
    push           pci_mcl.dest u64 
    setret                    u64 
    jump           #7553      
#7553: 
    retfn                     u64 
End


Proc pc_libmcl.mgencomment:
    param          pc_libmcl.mgencomment.s u64 
    procentry                 
    push           pc_libmcl.mgencomment.s u64 
    push           0          u64 
    jumpeq         #7555      u64 
    push           pc_libmcl.mgencomment.s u64 
    pushptr                   u8 
    push           0          i64 
    jumpne         #7556      i64 
#7555: 
    setargs                   3 0
    push           0          u64 
    push           0          u64 
    push           4          i64 
    callproc       &pc_libmcl.genmc 
    jump           #7557      
#7556: 
    setargs                   2 0
    push           pc_libmcl.mgencomment.s u64 
    push           3          i64 
    callproc       &pc_libmcl.genmc_str 
#7557: 
#7558: 
    retproc                   
End


Proc pc_libmcl.mgenstring: u64
    param          pc_libmcl.mgenstring.s u64 
    param          pc_libmcl.mgenstring.length i64 
    local          pc_libmcl.mgenstring.a u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenstring.a u64 
    push           2          i64 
    push           pc_libmcl.mgenstring.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenstring.length i64 
    push           0          i64 
    jumpge         #7560      i64 
    setargs                   1 0
    push           pc_libmcl.mgenstring.s u64 
    callfn         &strlen    i64 
    pop            pc_libmcl.mgenstring.length i64 
#7560: 
    setargs                   1 0
    push           pc_libmcl.mgenstring.length i64 
    push           1          i64 
    add                       i64 
    callfn         &mlibp.pcm_alloc u64 
    push           pc_libmcl.mgenstring.a u64 
    push           0          
    popptroff                 u64 1 0
    setargs                   3 0
    push           pc_libmcl.mgenstring.length u64 
    push           pc_libmcl.mgenstring.s u64 
    push           pc_libmcl.mgenstring.a u64 
    pushptr                   u64 
    callproc       &memcpy    
    push           0          u64 
    push           pc_libmcl.mgenstring.a u64 
    pushptr                   u64 
    push           pc_libmcl.mgenstring.length i64 
    popptroff                 u8 1 0
    push           4          i64 
    push           pc_libmcl.mgenstring.a u64 
    push           12         
    popptroff                 u8 1 0
    push           8          i64 
    push           pc_libmcl.mgenstring.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenstring.a u64 
    setret                    u64 
    jump           #7561      
#7561: 
    retfn                     u64 
End


Proc pc_libmcl.mgenname: u64
    param          pc_libmcl.mgenname.s u64 
    local          pc_libmcl.mgenname.str block:64 
    local          pc_libmcl.mgenname.a u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenname.a u64 
    push           2          i64 
    push           pc_libmcl.mgenname.a u64 
    push           9          
    popptroff                 u8 1 0
    setargs                   1 0
    push           pc_libmcl.mgenname.s u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           pc_libmcl.mgenname.a u64 
    push           0          
    popptroff                 u64 1 0
    push           8          i64 
    push           pc_libmcl.mgenname.a u64 
    push           12         
    popptroff                 u8 1 0
    push           8          i64 
    push           pc_libmcl.mgenname.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenname.a u64 
    setret                    u64 
    jump           #7563      
#7563: 
    retfn                     u64 
End


Proc pc_libmcl.writemcl:
    param          pc_libmcl.writemcl.index i64 
    param          pc_libmcl.writemcl.mcl u64 
    procentry                 
    push           pc_libmcl.writemcl.mcl u64 
    push           24         
    pushptroff                u8 1 0
    push           5          i64 
    casejumpeq     #7565      i64 0
    popstack                  i64 
    jump           #7566      
#7565: 
    jump           #7567      
#7566: 
    setargs                   1 0
    push           pc_libmcl.writemcl.mcl u64 
    callproc       &pc_libmcl.strmcl 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_line 
#7567: 
#7568: 
    retproc                   
End


Proc pc_libmcl.strmcl:
    param          pc_libmcl.strmcl.mcl u64 
    local          pc_libmcl.strmcl.opcname block:128 
    local          pc_libmcl.strmcl.a u64 
    local          pc_libmcl.strmcl.b u64 
    local          pc_libmcl.strmcl.opcode i64 
    local          pc_libmcl.strmcl.cond i64 
    local          pc_libmcl.strmcl.sizepref i64 
    local          pc_libmcl.strmcl.s u64 
    local          pc_libmcl.strmcl.comment u64 
    local          pc_libmcl.strmcl.d u64 
    procentry                 
    push           pc_libmcl.strmcl.mcl u64 
    push           24         
    pushptroff                u8 1 0
    pop            pc_libmcl.strmcl.opcode i64 
    push           pc_libmcl.strmcl.mcl u64 
    push           25         
    pushptroff                u8 1 0
    pop            pc_libmcl.strmcl.cond i64 
    push           pc_libmcl.strmcl.mcl u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_libmcl.strmcl.a u64 
    push           pc_libmcl.strmcl.mcl u64 
    push           16         
    pushptroff                u64 1 0
    pop            pc_libmcl.strmcl.b u64 
    push           0          u64 
    pop            pc_libmcl.strmcl.comment u64 
    push           pc_libmcl.strmcl.opcode i64 
    push           1          i64 
    casejumpeq     #7570      i64 0
    push           2          i64 
    casejumpeq     #7571      i64 0
    push           4          i64 
    casejumpeq     #7572      i64 0
    push           3          i64 
    casejumpeq     #7573      i64 0
    push           5          i64 
    casejumpeq     #7574      i64 0
    push           6          i64 
    casejumpeq     #7575      i64 0
    push           9          i64 
    casejumpeq     #7576      i64 0
    push           7          i64 
    casejumpeq     #7577      i64 0
    push           8          i64 
    casejumpeq     #7578      i64 0
    popstack                  i64 
    jump           #7579      
#7570: 
    setargs                   1 0
    push           ";Proc "   u64 
    callproc       &pc_libmcl.asmstr 
    setargs                   1 0
    push           pc_libmcl.strmcl.a u64 
    pushptr                   u64 
    pushptr                   u64 
    callproc       &pc_libmcl.asmstr 
    push           pc_libmcl.strmcl.a u64 
    pushptr                   u64 
    pop            pci_mcl.currasmproc u64 
    jump           #7580      
    jump           #7581      
#7571: 
    setargs                   1 0
    push           ";End "    u64 
    callproc       &pc_libmcl.asmstr 
    push           0          u64 
    pop            pci_mcl.currasmproc u64 
    jump           #7580      
    jump           #7581      
#7572: 
    jump           #7580      
    jump           #7581      
#7573: 
    setargs                   1 0
    push           59         i64 
    callproc       &pc_libmcl.asmchar 
    setargs                   1 0
    push           pc_libmcl.strmcl.a u64 
    pushptr                   u64 
    callproc       &pc_libmcl.asmstr 
    jump           #7582      
    jump           #7580      
    jump           #7581      
#7574: 
    setargs                   1 0
    push           "; <deleted>" u64 
    callproc       &pc_libmcl.asmstr 
    jump           #7582      
    jump           #7580      
    jump           #7581      
#7575: 
    push           pc_libmcl.strmcl.a u64 
    pushptr                   u64 
    pop            pc_libmcl.strmcl.d u64 
    push           pc_libmcl.strmcl.a u64 
    push           12         
    pushptroff                u8 1 0
    push           5          i64 
    casejumpeq     #7583      i64 0
    push           4          i64 
    casejumpeq     #7584      i64 0
    popstack                  i64 
    jump           #7585      
#7583: 
    setargs                   1 0
    setargs                   1 0
    push           pc_libmcl.strmcl.d u64 
    callfn         &pc_libmcl.getfullname u64 
    callproc       &pc_libmcl.asmstr 
    jump           #7586      
#7584: 
    setargs                   1 0
    push           pc_libmcl.strmcl.a u64 
    pushptr                   u64 
    callproc       &pc_libmcl.asmstr 
    jump           #7580      
    jump           #7586      
#7585: 
    setargs                   2 0
    push           ""         u64 
    push           "strmcl/lab" u64 
    callproc       &pc_libmcl.merror 
#7586: 
    setargs                   1 0
    push           ":"        u64 
    callproc       &pc_libmcl.asmstr 
    push           pc_libmcl.strmcl.d u64 
    push           46         
    pushptroff                u16 1 0
    push           3          i64 
    dotindex                  i64 
    jumpfalse      #7587      u64 
    setargs                   1 0
    push           "\n"       u64 
    callproc       &pc_libmcl.asmstr 
    setargs                   1 0
    setargs                   1 0
    push           pc_libmcl.strmcl.d u64 
    pushptr                   u64 
    callfn         &pc_libpcl.getbasename u64 
    callproc       &pc_libmcl.asmstr 
    setargs                   1 0
    push           "::"       u64 
    callproc       &pc_libmcl.asmstr 
#7587: 
    jump           #7580      
    jump           #7581      
#7576: 
    setargs                   1 0
    push           &pc_libmcl.strmcl.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "L#:"      u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           pc_libmcl.strmcl.a u64 
    pushptr                   i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           &pc_libmcl.strmcl.str 
    callproc       &pc_libmcl.asmstr 
    jump           #7580      
    jump           #7581      
#7577: 
    setargs                   1 0
    push           "          " u64 
    callproc       &pc_libmcl.asmstr 
    setargs                   1 0
    push           pc_libmcl.strmcl.a u64 
    pushptr                   u64 
    callproc       &pc_libmcl.asmstr 
    setargs                   1 0
    push           " = "      u64 
    callproc       &pc_libmcl.asmstr 
    setargs                   3 0
    push           0          i64 
    push           0          i64 
    push           pc_libmcl.strmcl.b u64 
    callproc       &pc_libmcl.asmopnd 
    jump           #7580      
    jump           #7581      
#7578: 
    setargs                   1 0
    push           "          " u64 
    callproc       &pc_libmcl.asmstr 
    setargs                   1 0
    push           pc_libmcl.strmcl.a u64 
    pushptr                   u64 
    callproc       &pc_libmcl.asmstr 
    setargs                   1 0
    push           " = "      u64 
    callproc       &pc_libmcl.asmstr 
    push           pc_libmcl.strmcl.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #7588      i64 0
    popstack                  i64 
    jump           #7589      
#7588: 
    setargs                   1 0
    setargs                   2 0
    push           pc_libmcl.strmcl.b u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_libmcl.strmcl.b u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.getregname u64 
    callproc       &pc_libmcl.asmstr 
    jump           #7590      
#7589: 
    setargs                   1 0
    setargs                   2 0
    push           pc_libmcl.strmcl.b u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_libmcl.strmcl.b u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.fgetregname u64 
    callproc       &pc_libmcl.asmstr 
#7590: 
    jump           #7580      
    jump           #7581      
#7579: 
#7581: 
    push           pc_libmcl.strmcl.opcode i64 
    push           27         i64 
    casejumpeq     #7591      i64 0
    push           59         i64 
    casejumpeq     #7592      i64 0
    push           16         i64 
    casejumpeq     #7593      i64 0
    push           22         i64 
    casejumpeq     #7594      i64 0
    push           39         i64 
    casejumpeq     #7595      i64 0
    push           40         i64 
    casejumpeq     #7596      i64 0
    push           41         i64 
    casejumpeq     #7597      i64 0
    push           52         i64 
    casejumpeq     #7598      i64 0
    popstack                  i64 
    jump           #7599      
#7591: 
    setargs                   1 0
    push           &pc_libmcl.strmcl.opcname 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "j"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           &pci_mcl.asmcondnames 
    push           pc_libmcl.strmcl.cond i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #7600      
#7592: 
    setargs                   1 0
    push           &pc_libmcl.strmcl.opcname 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "set"      u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           &pci_mcl.asmcondnames 
    push           pc_libmcl.strmcl.cond i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #7600      
#7593: 
    setargs                   1 0
    push           &pc_libmcl.strmcl.opcname 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "cmov"     u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           &pci_mcl.asmcondnames 
    push           pc_libmcl.strmcl.cond i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #7600      
#7594: 
    setargs                   2 0
    push           "call"     u64 
    push           &pc_libmcl.strmcl.opcname 
    callproc       &strcpy    
    jump           #7600      
#7595: 
    setargs                   2 0
    push           "and"      u64 
    push           &pc_libmcl.strmcl.opcname 
    callproc       &strcpy    
    jump           #7600      
#7596: 
    setargs                   2 0
    push           "or"       u64 
    push           &pc_libmcl.strmcl.opcname 
    callproc       &strcpy    
    jump           #7600      
#7597: 
    setargs                   2 0
    push           "xor"      u64 
    push           &pc_libmcl.strmcl.opcname 
    callproc       &strcpy    
    jump           #7600      
#7598: 
    setargs                   2 0
    push           "not"      u64 
    push           &pc_libmcl.strmcl.opcname 
    callproc       &strcpy    
    jump           #7600      
#7599: 
    push           pc_libmcl.strmcl.opcode i64 
    push           148        i64 
    jumple         #7601      i64 
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_libmcl.strmcl.opcode i64 
    callfn         &msysp.strint u64 
    push           &pc_libmcl.strmcl.opcname 
    callproc       &strcpy    
    jump           #7602      
#7601: 
    setargs                   2 0
    push           &pci_mcl.mclnames 
    push           pc_libmcl.strmcl.opcode i64 
    pushptroff                u64 8 -8
    push           2          i64 
    addrefoff                 u64 1 0
    push           &pc_libmcl.strmcl.opcname 
    callproc       &strcpy    
#7602: 
#7600: 
    setargs                   3 0
    push           " "        u64 
    push           10         i64 
    push           &pc_libmcl.strmcl.opcname 
    callproc       &mlibp.ipadstr 
    setargs                   2 0
    push           "  "       u64 
    push           &pc_libmcl.strmcl.str 
    callproc       &strcpy    
    setargs                   3 0
    push           " "        u64 
    push           10         i64 
    push           &pc_libmcl.strmcl.str 
    callproc       &mlibp.ipadstr 
    setargs                   2 0
    push           &pc_libmcl.strmcl.opcname 
    push           &pc_libmcl.strmcl.str 
    callproc       &strcat    
    setargs                   1 0
    push           &pc_libmcl.strmcl.str 
    callproc       &pc_libmcl.asmstr 
    push           pc_libmcl.strmcl.a u64 
    jumpfalse      #7603      u64 
    push           pc_libmcl.strmcl.b u64 
    jumpfalse      #7603      u64 
    setargs                   3 0
    push           pc_libmcl.strmcl.b u64 
    push           pc_libmcl.strmcl.a u64 
    push           pc_libmcl.strmcl.opcode i64 
    callfn         &pc_libmcl.needsizeprefix i64 
    pop            pc_libmcl.strmcl.sizepref i64 
    setargs                   3 0
    push           0          i64 
    push           pc_libmcl.strmcl.sizepref i64 
    push           pc_libmcl.strmcl.a u64 
    callproc       &pc_libmcl.asmopnd 
    setargs                   1 0
    push           ",\t"      u64 
    callproc       &pc_libmcl.asmstr 
    setargs                   3 0
    push           0          i64 
    push           pc_libmcl.strmcl.sizepref i64 
    push           pc_libmcl.strmcl.b u64 
    callproc       &pc_libmcl.asmopnd 
    jump           #7604      
#7603: 
    push           pc_libmcl.strmcl.a u64 
    jumpfalse      #7605      u64 
    push           pc_libmcl.strmcl.a u64 
    push           9          
    pushptroff                u8 1 0
    jumpfalse      #7605      i64 
    push           pc_libmcl.strmcl.opcode i64 
    push           22         i64 
    jumpne         #7606      i64 
    setargs                   3 0
    push           0          i64 
    push           0          i64 
    push           pc_libmcl.strmcl.a u64 
    callproc       &pc_libmcl.asmopnd 
    jump           #7607      
#7606: 
    setargs                   3 0
    push           0          i64 
    push           1          i64 
    push           pc_libmcl.strmcl.a u64 
    callproc       &pc_libmcl.asmopnd 
#7607: 
#7605: 
#7604: 
!docomments::
#7582: 
#7580: 
    retproc                   
End


Proc pc_libmcl.asmopnd:
    param          pc_libmcl.asmopnd.a u64 
    param          pc_libmcl.asmopnd.sizeprefix i64 
    param          pc_libmcl.asmopnd.debug i64 
    procentry                 
    setargs                   1 0
    setargs                   3 0
    push           pc_libmcl.asmopnd.debug i64 
    push           pc_libmcl.asmopnd.sizeprefix i64 
    push           pc_libmcl.asmopnd.a u64 
    callfn         &pc_libmcl.stropnd u64 
    callproc       &pc_libmcl.asmstr 
#7609: 
    retproc                   
End


Proc pc_libmcl.setsegment:
    param          pc_libmcl.setsegment.seg i64 
    param          pc_libmcl.setsegment.align i64 
    local          pc_libmcl.setsegment.opc i64 
    local          pc_libmcl.setsegment.oldalign i64 
    procentry                 
    push           pc_libmcl.setsegment.seg i64 
    push           pci_mcl.currsegment i64 
    jumpeq         #7611      i64 
    push           pc_libmcl.setsegment.seg i64 
    push           73         i64 
    casejumpeq     #7612      i64 0
    push           90         i64 
    casejumpeq     #7613      i64 0
    push           67         i64 
    casejumpeq     #7614      i64 0
    push           82         i64 
    casejumpeq     #7615      i64 0
    popstack                  i64 
    jump           #7616      
#7612: 
    push           120        i64 
    pop            pc_libmcl.setsegment.opc i64 
    jump           #7617      
#7613: 
    push           121        i64 
    pop            pc_libmcl.setsegment.opc i64 
    jump           #7617      
#7614: 
    push           122        i64 
    pop            pc_libmcl.setsegment.opc i64 
    jump           #7617      
#7615: 
    setargs                   2 0
    push           ""         u64 
    push           "CAN'T DO RODATA SEG" u64 
    callproc       &pc_libmcl.merror 
    jump           #7617      
#7616: 
    setargs                   2 0
    push           ""         u64 
    push           "BAD SEG CODE" u64 
    callproc       &pc_libmcl.merror 
#7617: 
    push           pci_mcl.mccodex u64 
    jumpfalse      #7618      u64 
    push           pci_mcl.mccodex u64 
    push           24         
    pushptroff                u8 1 0
    push           120        i64 
    setjumpeq      #7619      i64 
    push           121        i64 
    setjumpeq      #7619      i64 
    push           122        i64 
    setjumpne      #7618      i64 
#7619: 
    push           pc_libmcl.setsegment.opc i64 
    push           pci_mcl.mccodex u64 
    push           24         
    popptroff                 u8 1 0
    jump           #7620      
#7618: 
    setargs                   3 0
    push           0          u64 
    push           0          u64 
    push           pc_libmcl.setsegment.opc i64 
    callproc       &pc_libmcl.genmc 
#7620: 
    push           pc_libmcl.setsegment.seg i64 
    pop            pci_mcl.currsegment i64 
#7611: 
    push           pc_libmcl.setsegment.align i64 
    push           1          i64 
    jumple         #7621      i64 
    push           pci_mcl.mccodex u64 
    push           24         
    pushptroff                u8 1 0
    push           123        i64 
    jumpne         #7622      i64 
    push           pci_mcl.mccodex u64 
    push           8          
    pushptroff                u64 1 0
    pushptr                   i64 
    pop            pc_libmcl.setsegment.oldalign i64 
    push           pc_libmcl.setsegment.oldalign i64 
    push           pc_libmcl.setsegment.align i64 
    jumplt         #7623      i64 
    jump           #7624      
#7623: 
#7622: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.setsegment.align i64 
    callfn         &pc_libmcl.mgenint u64 
    push           123        i64 
    callproc       &pc_libmcl.genmc 
#7621: 
#7624: 
    retproc                   
End


Proc pc_libmcl.getsizeprefix: u64
    param          pc_libmcl.getsizeprefix.size i64 
    param          pc_libmcl.getsizeprefix.enable i64 
    procentry                 
    push           pc_libmcl.getsizeprefix.enable i64 
    jumptrue       #7626      i64 
    push           ""         u64 
    setret                    u64 
    jump           #7627      
#7626: 
    push           pc_libmcl.getsizeprefix.size i64 
    push           1          i64 
    casejumpeq     #7628      i64 0
    push           2          i64 
    casejumpeq     #7629      i64 0
    push           4          i64 
    casejumpeq     #7630      i64 0
    push           8          i64 
    casejumpeq     #7631      i64 0
    push           16         i64 
    casejumpeq     #7632      i64 0
    popstack                  i64 
    jump           #7633      
#7628: 
    push           "byte "    u64 
    setret                    u64 
    jump           #7627      
    jump           #7634      
#7629: 
    push           "word16 "  u64 
    setret                    u64 
    jump           #7627      
    jump           #7634      
#7630: 
    push           "word32 "  u64 
    setret                    u64 
    jump           #7627      
    jump           #7634      
#7631: 
    push           "word64 "  u64 
    setret                    u64 
    jump           #7627      
    jump           #7634      
#7632: 
    push           "word128 " u64 
    setret                    u64 
    jump           #7627      
    jump           #7634      
#7633: 
#7634: 
    push           ""         u64 
    setret                    u64 
    jump           #7627      
#7627: 
    retfn                     u64 
End


Proc pc_libmcl.needsizeprefix: i64
    param          pc_libmcl.needsizeprefix.opcode i64 
    param          pc_libmcl.needsizeprefix.a u64 
    param          pc_libmcl.needsizeprefix.b u64 
    procentry                 
    push           pc_libmcl.needsizeprefix.opcode i64 
    push           19         i64 
    casejumpeq     #7636      i64 0
    push           20         i64 
    casejumpeq     #7636      i64 0
    push           84         i64 
    casejumpeq     #7636      i64 0
    push           85         i64 
    casejumpeq     #7636      i64 0
    push           80         i64 
    casejumpeq     #7637      i64 0
    push           81         i64 
    casejumpeq     #7637      i64 0
    push           82         i64 
    casejumpeq     #7637      i64 0
    push           83         i64 
    casejumpeq     #7637      i64 0
    push           44         i64 
    casejumpeq     #7638      i64 0
    push           46         i64 
    casejumpeq     #7638      i64 0
    push           45         i64 
    casejumpeq     #7638      i64 0
    popstack                  i64 
    jump           #7639      
#7636: 
    push           1          i64 
    setret                    i64 
    jump           #7640      
    jump           #7641      
#7637: 
    push           1          i64 
    setret                    i64 
    jump           #7640      
    jump           #7641      
#7638: 
    push           pc_libmcl.needsizeprefix.a u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #7642      i64 
    push           1          i64 
    setret                    i64 
    jump           #7640      
#7642: 
    push           0          i64 
    setret                    i64 
    jump           #7640      
    jump           #7641      
#7639: 
#7641: 
    push           pc_libmcl.needsizeprefix.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #7643      i64 
    push           pc_libmcl.needsizeprefix.a u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpeq         #7643      i64 
    push           pc_libmcl.needsizeprefix.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #7643      i64 
    push           pc_libmcl.needsizeprefix.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #7644      i64 
#7643: 
    push           0          i64 
    setret                    i64 
    jump           #7640      
#7644: 
    push           1          i64 
    setret                    i64 
    jump           #7640      
#7640: 
    retfn                     i64 
End


Proc pc_libmcl.changeopndsize: u64
    param          pc_libmcl.changeopndsize.a u64 
    param          pc_libmcl.changeopndsize.size i64 
    local          pc_libmcl.changeopndsize.b u64 
    procentry                 
    push           pc_libmcl.changeopndsize.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_libmcl.changeopndsize.size i64 
    jumpeq         #7646      i64 
    push           pc_libmcl.changeopndsize.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #7647      i64 
    push           &pci_mcl.regtable 
    push           pc_libmcl.changeopndsize.a u64 
    push           10         
    pushptroff                u8 1 0
    addrefoff                 block:128 128 -128
    push           pc_libmcl.changeopndsize.size i64 
    pushptroff                u64 8 -8
    pop            pc_libmcl.changeopndsize.b u64 
    jump           #7648      
#7647: 
    setargs                   1 0
    push           pc_libmcl.changeopndsize.a u64 
    callfn         &pc_libmcl.duplopnd u64 
    pop            pc_libmcl.changeopndsize.b u64 
    push           pc_libmcl.changeopndsize.size i64 
    push           pc_libmcl.changeopndsize.b u64 
    push           8          
    popptroff                 u8 1 0
#7648: 
    push           pc_libmcl.changeopndsize.b u64 
    setret                    u64 
    jump           #7649      
#7646: 
    push           pc_libmcl.changeopndsize.a u64 
    setret                    u64 
    jump           #7649      
#7649: 
    retfn                     u64 
End


Proc pc_libmcl.makeopndind: u64
    param          pc_libmcl.makeopndind.a u64 
    param          pc_libmcl.makeopndind.size i64 
    local          pc_libmcl.makeopndind.b u64 
    procentry                 
    push           pc_libmcl.makeopndind.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #7651      i64 
    setargs                   2 0
    push           ""         u64 
    push           "makeopndind" u64 
    callproc       &pc_libmcl.merror 
#7651: 
    setargs                   3 0
    push           0          i64 
    push           pc_libmcl.makeopndind.size i64 
    push           pc_libmcl.makeopndind.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenireg u64 
    setret                    u64 
    jump           #7652      
#7652: 
    retfn                     u64 
End


Proc pc_libmcl.applyoffset: u64
    param          pc_libmcl.applyoffset.a u64 
    param          pc_libmcl.applyoffset.offset i64 
    param          pc_libmcl.applyoffset.size i64 
    local          pc_libmcl.applyoffset.b u64 
    procentry                 
    push           pc_libmcl.applyoffset.offset i64 
    push           0          i64 
    jumpne         #7654      i64 
    push           pc_libmcl.applyoffset.size i64 
    push           0          i64 
    jumpne         #7654      i64 
    push           pc_libmcl.applyoffset.a u64 
    setret                    u64 
    jump           #7655      
#7654: 
    setargs                   1 0
    push           pc_libmcl.applyoffset.a u64 
    callfn         &pc_libmcl.duplopnd u64 
    pop            pc_libmcl.applyoffset.b u64 
    push           pc_libmcl.applyoffset.b u64 
    push           14         
    addrefoff                 u64 1 0
    push           pc_libmcl.applyoffset.offset i64 
    addto                     i32 
    push           pc_libmcl.applyoffset.size i64 
    jumpfalse      #7656      i64 
    push           pc_libmcl.applyoffset.size i64 
    push           pc_libmcl.applyoffset.b u64 
    push           8          
    popptroff                 u8 1 0
#7656: 
    push           pc_libmcl.applyoffset.b u64 
    setret                    u64 
    jump           #7655      
#7655: 
    retfn                     u64 
End


Proc pc_libmcl.mgenint: u64
    param          pc_libmcl.mgenint.x i64 
    param          pc_libmcl.mgenint.size i64 
    procentry                 
    push           pc_libmcl.mgenint.x i64 
    push           0          i64 
    push           32         i64 
    jumpnotinrange #7658      i64 
    push           pc_libmcl.mgenint.size i64 
    push           8          i64 
    jumpne         #7658      i64 
    push           &pci_mcl.smallinttable 
    push           pc_libmcl.mgenint.x i64 
    pushptroff                u64 8 0
    setret                    u64 
    jump           #7659      
#7658: 
    setargs                   2 0
    push           pc_libmcl.mgenint.size i64 
    push           pc_libmcl.mgenint.x i64 
    callfn         &pc_libmcl.mgenint0 u64 
    setret                    u64 
    jump           #7659      
#7659: 
    retfn                     u64 
End


Proc pc_libmcl.mgenint0: u64
    param          pc_libmcl.mgenint0.x i64 
    param          pc_libmcl.mgenint0.size i64 
    local          pc_libmcl.mgenint0.a u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenint0.a u64 
    push           2          i64 
    push           pc_libmcl.mgenint0.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenint0.x i64 
    push           pc_libmcl.mgenint0.a u64 
    push           0          
    popptroff                 i64 1 0
    push           1          i64 
    push           pc_libmcl.mgenint0.a u64 
    push           12         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenint0.size i64 
    push           pc_libmcl.mgenint0.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenint0.a u64 
    setret                    u64 
    jump           #7661      
#7661: 
    retfn                     u64 
End


Proc pc_libmcl.mgenrealmem: u64
    param          pc_libmcl.mgenrealmem.x r64 
    param          pc_libmcl.mgenrealmem.size i64 
    local          pc_libmcl.mgenrealmem.a u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenrealmem.a u64 
    push           3          i64 
    push           pc_libmcl.mgenrealmem.a u64 
    push           9          
    popptroff                 u8 1 0
    setargs                   2 0
    push           pc_libmcl.mgenrealmem.size i64 
    push           pc_libmcl.mgenrealmem.x r64 
    callfn         &pc_libmcl.getrealindex i64 
    push           pc_libmcl.mgenrealmem.a u64 
    push           0          
    popptroff                 i64 1 0
    push           7          i64 
    push           pc_libmcl.mgenrealmem.a u64 
    push           12         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenrealmem.size i64 
    push           pc_libmcl.mgenrealmem.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenrealmem.a u64 
    setret                    u64 
    jump           #7663      
#7663: 
    retfn                     u64 
End


Proc pc_libmcl.mgenrealimm: u64
    param          pc_libmcl.mgenrealimm.x r64 
    param          pc_libmcl.mgenrealimm.size i64 
    local          pc_libmcl.mgenrealimm.a u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenrealimm.a u64 
    push           2          i64 
    push           pc_libmcl.mgenrealimm.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenrealimm.x r64 
    push           pc_libmcl.mgenrealimm.a u64 
    push           0          
    popptroff                 r64 1 0
    push           2          i64 
    push           pc_libmcl.mgenrealimm.a u64 
    push           12         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenrealimm.size i64 
    push           pc_libmcl.mgenrealimm.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenrealimm.a u64 
    setret                    u64 
    jump           #7665      
#7665: 
    retfn                     u64 
End


Proc pc_libmcl.mgenlabel: u64
    param          pc_libmcl.mgenlabel.x i64 
    local          pc_libmcl.mgenlabel.a u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenlabel.a u64 
    push           2          i64 
    push           pc_libmcl.mgenlabel.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenlabel.x i64 
    push           0          i64 
    jumpne         #7667      i64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pc_libmcl.mgenlabel.x i64 
#7667: 
    push           pc_libmcl.mgenlabel.x i64 
    push           pc_libmcl.mgenlabel.a u64 
    push           0          
    popptroff                 i64 1 0
    push           7          i64 
    push           pc_libmcl.mgenlabel.a u64 
    push           12         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenlabel.a u64 
    setret                    u64 
    jump           #7668      
#7668: 
    retfn                     u64 
End


Proc pc_libmcl.mgenlabelmem: u64
    param          pc_libmcl.mgenlabelmem.x i64 
    local          pc_libmcl.mgenlabelmem.a u64 
    procentry                 
    setargs                   1 0
    push           pc_libmcl.mgenlabelmem.x i64 
    callfn         &pc_libmcl.mgenlabel u64 
    pop            pc_libmcl.mgenlabelmem.a u64 
    push           3          i64 
    push           pc_libmcl.mgenlabelmem.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenlabelmem.a u64 
    setret                    u64 
    jump           #7670      
#7670: 
    retfn                     u64 
End


Proc pc_libmcl.mgenregvar: u64
    param          pc_libmcl.mgenregvar.d u64 
    local          pc_libmcl.mgenregvar.a u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.mgenregvar.d u64 
    push           50         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_libmcl.mgenregvar.a u64 
    push           1          i64 
    push           &pci_mcl.isregvar 
    push           pc_libmcl.mgenregvar.d u64 
    push           50         
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    push           pc_libmcl.mgenregvar.a u64 
    setret                    u64 
    jump           #7672      
#7672: 
    retfn                     u64 
End


Proc pc_libmcl.mgenxregvar: u64
    param          pc_libmcl.mgenxregvar.d u64 
    local          pc_libmcl.mgenxregvar.a u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.mgenxregvar.d u64 
    push           50         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenxreg u64 
    pop            pc_libmcl.mgenxregvar.a u64 
    push           1          i64 
    push           &pci_mcl.isxregvar 
    push           pc_libmcl.mgenxregvar.d u64 
    push           50         
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    push           pc_libmcl.mgenxregvar.a u64 
    setret                    u64 
    jump           #7674      
#7674: 
    retfn                     u64 
End


Proc pc_libmcl.mgenmem: u64
    param          pc_libmcl.mgenmem.d u64 
    local          pc_libmcl.mgenmem.a u64 
    local          pc_libmcl.mgenmem.p u64 
    local          pc_libmcl.mgenmem.reg i64 
    procentry                 
    push           pc_libmcl.mgenmem.d u64 
    push           16         
    pushptroff                u64 1 0
    pop            pc_libmcl.mgenmem.p u64 
    push           pc_libmcl.mgenmem.d u64 
    push           50         
    pushptroff                u8 1 0
    jumpfalse      #7676      i64 
    push           &pc_tables.pfloat 
    push           pc_libmcl.mgenmem.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #7677      i64 
    setargs                   1 0
    push           pc_libmcl.mgenmem.d u64 
    callfn         &pc_libmcl.mgenxregvar u64 
    setret                    u64 
    jump           #7678      
    jump           #7679      
#7677: 
    setargs                   1 0
    push           pc_libmcl.mgenmem.d u64 
    callfn         &pc_libmcl.mgenregvar u64 
    setret                    u64 
    jump           #7678      
#7679: 
#7676: 
    push           0          i64 
    pop            pc_libmcl.mgenmem.reg i64 
    push           pc_libmcl.mgenmem.d u64 
    push           27         
    pushptroff                u8 1 0
    push           18         i64 
    setjumpeq      #7680      i64 
    push           19         i64 
    setjumpne      #7681      i64 
#7680: 
    push           pc_decls.optimflag i64 
    jumptrue       #7682      i64 
    push           pc_libmcl.mgenmem.d u64 
    push           32         
    pushptroff                i32 1 0
    push           -128       i64 
    push           64         i64 
    jumpnotinrange #7682      i64 
    push           pc_libmcl.mgenmem.p u64 
    push           4          
    pushptroff                i32 1 0
    push           8          i64 
    jumpne         #7682      i64 
    push           &pci_mcl.frameregtable 
    push           pc_libmcl.mgenmem.d u64 
    push           32         
    pushptroff                i32 1 0
    pushptroff                u64 8 1024
    setret                    u64 
    jump           #7678      
#7682: 
    push           15         i64 
    pop            pc_libmcl.mgenmem.reg i64 
#7681: 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenmem.a u64 
    push           3          i64 
    push           pc_libmcl.mgenmem.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenmem.reg i64 
    push           pc_libmcl.mgenmem.a u64 
    push           10         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenmem.d u64 
    push           pc_libmcl.mgenmem.a u64 
    push           0          
    popptroff                 u64 1 0
    push           pc_libmcl.mgenmem.d u64 
    push           48         
    addrefoff                 u64 1 0
    incr                      i16 1
    push           5          i64 
    push           pc_libmcl.mgenmem.a u64 
    push           12         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenmem.p u64 
    push           4          
    pushptroff                i32 1 0
    push           8          i64 
    min                       i64 
    push           pc_libmcl.mgenmem.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenmem.a u64 
    setret                    u64 
    jump           #7678      
#7678: 
    retfn                     u64 
End


Proc pc_libmcl.mgenmemhigh: u64
    param          pc_libmcl.mgenmemhigh.d u64 
    local          pc_libmcl.mgenmemhigh.a u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenmemhigh.a u64 
    push           3          i64 
    push           pc_libmcl.mgenmemhigh.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenmemhigh.d u64 
    push           27         
    pushptroff                u8 1 0
    push           18         i64 
    setjumpeq      #7684      i64 
    push           19         i64 
    setjumpne      #7685      i64 
#7684: 
    push           15         i64 
    push           pc_libmcl.mgenmemhigh.a u64 
    push           10         
    popptroff                 u8 1 0
#7685: 
    push           pc_libmcl.mgenmemhigh.d u64 
    push           48         
    addrefoff                 u64 1 0
    incr                      i16 1
    push           pc_libmcl.mgenmemhigh.d u64 
    push           pc_libmcl.mgenmemhigh.a u64 
    push           0          
    popptroff                 u64 1 0
    push           5          i64 
    push           pc_libmcl.mgenmemhigh.a u64 
    push           12         
    popptroff                 u8 1 0
    push           8          i64 
    push           pc_libmcl.mgenmemhigh.a u64 
    push           14         
    popptroff                 i32 1 0
    push           8          i64 
    push           pc_libmcl.mgenmemhigh.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenmemhigh.a u64 
    setret                    u64 
    jump           #7686      
#7686: 
    retfn                     u64 
End


Proc pc_libmcl.mgenmemaddr: u64
    param          pc_libmcl.mgenmemaddr.d u64 
    local          pc_libmcl.mgenmemaddr.a u64 
    procentry                 
    push           1          u64 
    push           pc_libmcl.mgenmemaddr.d u64 
    push           46         
    addrefoff                 u64 1 0
    push           2          i64 
    popdotindex               u16 
    push           pc_libmcl.mgenmemaddr.d u64 
    push           48         
    addrefoff                 u64 1 0
    incr                      i16 1
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenmemaddr.a u64 
    push           2          i64 
    push           pc_libmcl.mgenmemaddr.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenmemaddr.d u64 
    push           pc_libmcl.mgenmemaddr.a u64 
    push           0          
    popptroff                 u64 1 0
    push           pc_libmcl.mgenmemaddr.d u64 
    push           48         
    addrefoff                 u64 1 0
    incr                      i16 1
    push           5          i64 
    push           pc_libmcl.mgenmemaddr.a u64 
    push           12         
    popptroff                 u8 1 0
    push           8          i64 
    push           pc_libmcl.mgenmemaddr.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenmemaddr.a u64 
    setret                    u64 
    jump           #7688      
#7688: 
    retfn                     u64 
End


Proc pc_libmcl.mgenreg: u64
    param          pc_libmcl.mgenreg.reg i64 
    param          pc_libmcl.mgenreg.size i64 
    procentry                 
    push           &pci_mcl.regtable 
    push           pc_libmcl.mgenreg.reg i64 
    addrefoff                 block:128 128 -128
    push           pc_libmcl.mgenreg.size i64 
    pushptroff                u64 8 -8
    setret                    u64 
    jump           #7690      
    setargs                   2 0
    push           pc_libmcl.mgenreg.size i64 
    push           pc_libmcl.mgenreg.reg i64 
    callfn         &pc_libmcl.mgenreg0 u64 
    setret                    u64 
    jump           #7690      
#7690: 
    retfn                     u64 
End


Proc pc_libmcl.mgenreg0: u64
    param          pc_libmcl.mgenreg0.reg i64 
    param          pc_libmcl.mgenreg0.size i64 
    local          pc_libmcl.mgenreg0.a u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenreg0.a u64 
    push           1          i64 
    push           pc_libmcl.mgenreg0.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenreg0.reg i64 
    push           pc_libmcl.mgenreg0.a u64 
    push           10         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenreg0.size i64 
    push           pc_libmcl.mgenreg0.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenreg0.a u64 
    setret                    u64 
    jump           #7692      
#7692: 
    retfn                     u64 
End


Proc pc_libmcl.mgenireg: u64
    param          pc_libmcl.mgenireg.reg i64 
    param          pc_libmcl.mgenireg.size i64 
    param          pc_libmcl.mgenireg.offset i64 
    local          pc_libmcl.mgenireg.a u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenireg.a u64 
    push           3          i64 
    push           pc_libmcl.mgenireg.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenireg.reg i64 
    push           pc_libmcl.mgenireg.a u64 
    push           10         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenireg.size i64 
    push           pc_libmcl.mgenireg.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenireg.offset i64 
    push           pc_libmcl.mgenireg.a u64 
    push           14         
    popptroff                 i32 1 0
    push           pc_libmcl.mgenireg.a u64 
    setret                    u64 
    jump           #7694      
#7694: 
    retfn                     u64 
End


Proc pc_libmcl.roundsizetg: i64
    param          pc_libmcl.roundsizetg.size i64 
    procentry                 
    jump           #7696      
#7697: 
    push           &pc_libmcl.roundsizetg.size 
    incr                      i64 1
#7696: 
    push           pc_libmcl.roundsizetg.size i64 
    push           7          i64 
    iand                      i64 
    jumptrue       #7697      i64 
#7698: 
    push           pc_libmcl.roundsizetg.size i64 
    setret                    i64 
    jump           #7699      
#7699: 
    retfn                     i64 
End


Proc pc_libmcl.getregname: u64
    param          pc_libmcl.getregname.reg i64 
    param          pc_libmcl.getregname.size i64 
    local          pc_libmcl.getregname.str2 block:16 
    local          pc_libmcl.getregname.rs u64 
    local          pc_libmcl.getregname.size2 i64 
    procentry                 
    push           pc_libmcl.getregname.size i64 
    pop            pc_libmcl.getregname.size2 i64 
    push           pc_libmcl.getregname.size2 i64 
    push           16         i64 
    jumple         #7701      i64 
    push           17         i64 
    pop            pc_libmcl.getregname.size2 i64 
#7701: 
    push           pc_libmcl.getregname.reg i64 
    push           0          i64 
    casejumpeq     #7702      i64 0
    push           15         i64 
    casejumpeq     #7703      i64 0
    push           16         i64 
    casejumpeq     #7704      i64 0
    popstack                  i64 
    jump           #7705      
#7702: 
    push           "-"        u64 
    setret                    u64 
    jump           #7706      
    jump           #7707      
#7703: 
    push           "frame"    u64 
    pop            pc_libmcl.getregname.rs u64 
    jump           #7707      
#7704: 
    push           "stack"    u64 
    pop            pc_libmcl.getregname.rs u64 
    jump           #7707      
#7705: 
    setargs                   2 0
    push           &pc_libmcl.getregname.str2 
    push           pc_libmcl.getregname.reg i64 
    push           1          i64 
    sub                       i64 
    callproc       &msysp.getstrint 
    push           &pc_libmcl.getregname.str2 
    pop            pc_libmcl.getregname.rs u64 
#7707: 
    setargs                   1 0
    push           &pc_libmcl.getregname.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           &pc_libmcl.getregname.prefix 
    push           pc_libmcl.getregname.size2 i64 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           pc_libmcl.getregname.rs u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           &pc_libmcl.getregname.str 
    setret                    u64 
    jump           #7706      
#7706: 
    retfn                     u64 
End


Proc pc_libmcl.fgetregname: u64
    param          pc_libmcl.fgetregname.reg i64 
    param          pc_libmcl.fgetregname.size i64 
    procentry                 
    push           pc_libmcl.fgetregname.reg i64 
    push           0          i64 
    jumpne         #7709      i64 
    push           "-"        u64 
    setret                    u64 
    jump           #7710      
#7709: 
    setargs                   1 0
    push           &pc_libmcl.fgetregname.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "XMM"      u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           pc_libmcl.fgetregname.reg i64 
    push           1          i64 
    sub                       i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           &pc_libmcl.fgetregname.str 
    setret                    u64 
    jump           #7710      
#7710: 
    retfn                     u64 
End


Proc pc_libmcl.sameoperand: i64
    param          pc_libmcl.sameoperand.a u64 
    param          pc_libmcl.sameoperand.b u64 
    procentry                 
    setargs                   3 0
    push           19         u64 
    push           pc_libmcl.sameoperand.b u64 
    push           pc_libmcl.sameoperand.a u64 
    callfn         &memcmp    i32 
    push           0          i64 
    seteq                     i64 
    setret                    i64 
    jump           #7712      
#7712: 
    retfn                     i64 
End


Proc pc_libmcl.sameregopnd: i64
    param          pc_libmcl.sameregopnd.a u64 
    param          pc_libmcl.sameregopnd.b u64 
    procentry                 
    push           pc_libmcl.sameregopnd.a u64 
    push           9          
    pushptroff                u8 1 0
    push           pc_libmcl.sameregopnd.b u64 
    push           9          
    pushptroff                u8 1 0
    jumpne         #7714      i64 
    push           pc_libmcl.sameregopnd.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #7715      i64 
#7714: 
    push           0          i64 
    setret                    i64 
    jump           #7716      
#7715: 
    push           pc_libmcl.sameregopnd.a u64 
    push           10         
    pushptroff                u8 1 0
    push           pc_libmcl.sameregopnd.b u64 
    push           10         
    pushptroff                u8 1 0
    seteq                     i64 
    setret                    i64 
    jump           #7716      
#7716: 
    retfn                     i64 
End


Proc pc_libmcl.getstringindex: i64
    param          pc_libmcl.getstringindex.s u64 
    procentry                 
    push           pc_libmcl.getstringindex.s u64 
    push           0          u64 
    jumpne         #7718      u64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pci_mcl.kk0used i64 
    push           pci_mcl.kk0used i64 
    setret                    i64 
    jump           #7719      
#7718: 
    push           pci_mcl.nstrings i64 
    push           pci_mcl.stringtablesize i64 
    jumplt         #7720      i64 
    setargs                   0 0
    callproc       &pc_libmcl.extendstringtable 
#7720: 
    push           pci_mcl.nstrings i64 
    jumpfalse      #7721      i64 
    setargs                   2 0
    push           pc_libmcl.getstringindex.s u64 
    push           pci_mcl.stringtable u64 
    push           pci_mcl.nstrings i64 
    pushptroff                u64 8 -8
    callfn         &mlibp.eqstring i64 
    jumpfalse      #7721      i64 
    push           pci_mcl.stringlabtable u64 
    push           pci_mcl.nstrings i64 
    pushptroff                i32 4 -4
    setret                    i64 
    jump           #7719      
#7721: 
    push           pc_libmcl.getstringindex.s u64 
    push           pci_mcl.stringtable u64 
    push           &pci_mcl.nstrings 
    incrload                  i64 1
    popptroff                 u64 8 -8
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    push           pci_mcl.stringlabtable u64 
    push           pci_mcl.nstrings i64 
    popptroff                 i32 4 -4
    push           pci_mcl.mlabelno i64 
    setret                    i64 
    jump           #7719      
#7719: 
    retfn                     i64 
End


Proc pc_libmcl.getrealindex: i64
    param          pc_libmcl.getrealindex.x r64 
    param          pc_libmcl.getrealindex.size i64 
    procentry                 
    push           pci_mcl.nreals i64 
    push           pci_mcl.realtablesize i64 
    jumplt         #7723      i64 
    setargs                   0 0
    callproc       &pc_libmcl.extendrealtable 
#7723: 
    push           pc_libmcl.getrealindex.x r64 
    push           pci_mcl.realtable u64 
    push           &pci_mcl.nreals 
    incrload                  i64 1
    popptroff                 r64 8 -8
    push           &pci_mcl.mlabelno 
    incr                      i64 1
    startmult                 
    push           pc_libmcl.getrealindex.size i64 
    push           8          i64 
    jumpne         #7724      i64 
    push           pci_mcl.mlabelno i64 
    resetmult                 
    jump           #7725      
#7724: 
    push           pci_mcl.mlabelno i64 
    neg                       i64 
    endmult                   
#7725: 
    push           pci_mcl.reallabtable u64 
    push           pci_mcl.nreals i64 
    popptroff                 i32 4 -4
    push           pci_mcl.mlabelno i64 
    setret                    i64 
    jump           #7726      
#7726: 
    retfn                     i64 
End


Proc pc_libmcl.extendstringtable:
    local          pc_libmcl.extendstringtable.oldstringtable u64 
    local          pc_libmcl.extendstringtable.oldstringlabtable u64 
    local          pc_libmcl.extendstringtable.oldstringtablesize i64 
    local          pc_libmcl.extendstringtable.i i64 
    procentry                 
    push           pci_mcl.stringtablesize i64 
    pop            pc_libmcl.extendstringtable.oldstringtablesize i64 
    push           pci_mcl.stringtable u64 
    pop            pc_libmcl.extendstringtable.oldstringtable u64 
    push           pci_mcl.stringlabtable u64 
    pop            pc_libmcl.extendstringtable.oldstringlabtable u64 
    push           &pci_mcl.stringtablesize 
    push           2          i64 
    multo                     i64 
    setargs                   1 0
    push           8          i64 
    push           pci_mcl.stringtablesize i64 
    mul                       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pci_mcl.stringtable u64 
    setargs                   1 0
    push           4          i64 
    push           pci_mcl.stringtablesize i64 
    mul                       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pci_mcl.stringlabtable u64 
#7728: 
    push           1          i64 
    pop            pc_libmcl.extendstringtable.i i64 
    push           pci_mcl.nstrings i64 
    push           1          i64 
    jumplt         #7729      i64 
#7730: 
    push           pc_libmcl.extendstringtable.oldstringtable u64 
    push           pc_libmcl.extendstringtable.i i64 
    pushptroff                u64 8 -8
    push           pci_mcl.stringtable u64 
    push           pc_libmcl.extendstringtable.i i64 
    popptroff                 u64 8 -8
    push           pc_libmcl.extendstringtable.oldstringlabtable u64 
    push           pc_libmcl.extendstringtable.i i64 
    pushptroff                i32 4 -4
    push           pci_mcl.stringlabtable u64 
    push           pc_libmcl.extendstringtable.i i64 
    popptroff                 i32 4 -4
#7731: 
    forup          #7730      i64 1
    opnd           pc_libmcl.extendstringtable.i 
    opnd           pci_mcl.nstrings 
#7729: 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.extendstringtable.oldstringtablesize i64 
    mul                       i64 
    push           pc_libmcl.extendstringtable.oldstringtable u64 
    callproc       &mlibp.pcm_free 
    setargs                   2 0
    push           4          i64 
    push           pc_libmcl.extendstringtable.oldstringtablesize i64 
    mul                       i64 
    push           pc_libmcl.extendstringtable.oldstringlabtable u64 
    callproc       &mlibp.pcm_free 
#7732: 
    retproc                   
End


Proc pc_libmcl.extendrealtable:
    local          pc_libmcl.extendrealtable.oldrealtable u64 
    local          pc_libmcl.extendrealtable.oldreallabtable u64 
    local          pc_libmcl.extendrealtable.oldrealtablesize i64 
    local          pc_libmcl.extendrealtable.i i64 
    procentry                 
    push           pci_mcl.realtablesize i64 
    pop            pc_libmcl.extendrealtable.oldrealtablesize i64 
    push           pci_mcl.realtable u64 
    pop            pc_libmcl.extendrealtable.oldrealtable u64 
    push           pci_mcl.reallabtable u64 
    pop            pc_libmcl.extendrealtable.oldreallabtable u64 
    push           &pci_mcl.realtablesize 
    push           2          i64 
    multo                     i64 
    setargs                   1 0
    push           8          i64 
    push           pci_mcl.realtablesize i64 
    mul                       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pci_mcl.realtable u64 
    setargs                   1 0
    push           4          i64 
    push           pci_mcl.realtablesize i64 
    mul                       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pci_mcl.reallabtable u64 
#7734: 
    push           1          i64 
    pop            pc_libmcl.extendrealtable.i i64 
    push           pci_mcl.nreals i64 
    push           1          i64 
    jumplt         #7735      i64 
#7736: 
    push           pc_libmcl.extendrealtable.oldrealtable u64 
    push           pc_libmcl.extendrealtable.i i64 
    pushptroff                r64 8 -8
    push           pci_mcl.realtable u64 
    push           pc_libmcl.extendrealtable.i i64 
    popptroff                 r64 8 -8
    push           pc_libmcl.extendrealtable.oldreallabtable u64 
    push           pc_libmcl.extendrealtable.i i64 
    pushptroff                i32 4 -4
    push           pci_mcl.reallabtable u64 
    push           pc_libmcl.extendrealtable.i i64 
    popptroff                 i32 4 -4
#7737: 
    forup          #7736      i64 1
    opnd           pc_libmcl.extendrealtable.i 
    opnd           pci_mcl.nreals 
#7735: 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.extendrealtable.oldrealtablesize i64 
    mul                       i64 
    push           pc_libmcl.extendrealtable.oldrealtable u64 
    callproc       &mlibp.pcm_free 
    setargs                   2 0
    push           4          i64 
    push           pc_libmcl.extendrealtable.oldrealtablesize i64 
    mul                       i64 
    push           pc_libmcl.extendrealtable.oldreallabtable u64 
    callproc       &mlibp.pcm_free 
#7738: 
    retproc                   
End


Proc pc_libmcl.asmstr:
    param          pc_libmcl.asmstr.s u64 
    procentry                 
    setargs                   2 0
    push           pc_libmcl.asmstr.s u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
#7740: 
    retproc                   
End


Proc pc_libmcl.asmchar:
    param          pc_libmcl.asmchar.c i64 
    procentry                 
    setargs                   2 0
    push           pc_libmcl.asmchar.c i64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_char 
#7742: 
    retproc                   
End


Proc pc_libmcl.getfullname: u64
    param          pc_libmcl.getfullname.d u64 
    local          pc_libmcl.getfullname.name u64 
    procentry                 
    push           pc_libmcl.getfullname.d u64 
    pushptr                   u64 
    pop            pc_libmcl.getfullname.name u64 
    push           pc_libmcl.getfullname.d u64 
    push           50         
    pushptroff                u8 1 0
    jumpfalse      #7744      i64 
    setargs                   1 0
    push           &pc_libmcl.getfullname.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "#.#"      u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    startmult                 
    push           pc_libmcl.getfullname.d u64 
    push           46         
    pushptroff                u16 1 0
    push           4          i64 
    dotindex                  i64 
    jumpfalse      #7745      u64 
    push           "X"        u64 
    resetmult                 
    jump           #7746      
#7745: 
    push           "R"        u64 
    endmult                   
#7746: 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libmcl.getfullname.name u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           &pc_libmcl.getfullname.str 
    setret                    u64 
    jump           #7747      
#7744: 
    startmult                 
    push           pc_libmcl.getfullname.d u64 
    push           46         
    pushptroff                u16 1 0
    push           8          i64 
    dotindex                  i64 
    jumpfalse      #7748      u64 
    push           pc_libmcl.getfullname.d u64 
    push           46         
    pushptroff                u16 1 0
    push           1          i64 
    dotindex                  i64 
    jumpfalse      #7748      u64 
    setargs                   2 0
    push           "`"        u64 
    push           &pc_libmcl.getfullname.str 
    callproc       &strcpy    
    setargs                   2 0
    push           pc_libmcl.getfullname.name u64 
    push           &pc_libmcl.getfullname.str 
    callproc       &strcat    
    setargs                   2 0
    push           "*"        u64 
    push           &pc_libmcl.getfullname.str 
    callfn         &strcat    u64 
    resetmult                 
    jump           #7749      
#7748: 
    push           pc_libmcl.getfullname.d u64 
    push           46         
    pushptroff                u16 1 0
    push           1          i64 
    dotindex                  i64 
    jumpfalse      #7750      u64 
    setargs                   2 0
    push           pc_libmcl.getfullname.name u64 
    push           &pc_libmcl.getfullname.str 
    callproc       &strcpy    
    setargs                   2 0
    push           "*"        u64 
    push           &pc_libmcl.getfullname.str 
    callfn         &strcat    u64 
    resetmult                 
    jump           #7749      
#7750: 
    push           pc_libmcl.getfullname.name u64 
    endmult                   
#7749: 
    setret                    u64 
    jump           #7747      
#7747: 
    retfn                     u64 
End


Proc pc_libmcl.getfulltempname: u64
    param          pc_libmcl.getfulltempname.tempno i64 
    procentry                 
    push           "TEMP"     u64 
    setret                    u64 
    jump           #7752      
#7752: 
    retfn                     u64 
End


Proc pc_libmcl.merror:
    param          pc_libmcl.merror.mess u64 
    param          pc_libmcl.merror.param u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "MCL Error: # (#) [#]" u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           pc_libmcl.merror.mess u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libmcl.merror.param u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.mseqno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#7754: 
    retproc                   
End


Proc pc_libmcl.merrort:
    param          pc_libmcl.merrort.mess u64 
    param          pc_libmcl.merrort.t i64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "MCL Type not supported: # (#) [#]" u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           pc_libmcl.merrort.mess u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pc_tables.pstdnames 
    push           pc_libmcl.merrort.t i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.mseqno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#7756: 
    retproc                   
End


Proc pc_libmcl.merroropnd:
    param          pc_libmcl.merroropnd.mess u64 
    param          pc_libmcl.merroropnd.opndtype i64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "MCL Opnd not supported: # (#) [#]" u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           pc_libmcl.merroropnd.mess u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pc_tables.opndnames 
    push           pc_libmcl.merroropnd.opndtype i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.mseqno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#7758: 
    retproc                   
End


Proc pc_libmcl.genstringtable:
    local          pc_libmcl.genstringtable.col i64 
    local          pc_libmcl.genstringtable.i i64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           73         i64 
    callproc       &pc_libmcl.setsegment 
    push           pci_mcl.kk0used i64 
    jumpfalse      #7760      i64 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.kk0used i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_libmcl.gendb 
#7760: 
    push           pci_mcl.nstrings i64 
    jumptrue       #7761      i64 
    jump           #7762      
#7761: 
#7763: 
    push           1          i64 
    pop            pc_libmcl.genstringtable.i i64 
    push           pci_mcl.nstrings i64 
    push           1          i64 
    jumplt         #7764      i64 
#7765: 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.stringlabtable u64 
    push           pc_libmcl.genstringtable.i i64 
    pushptroff                i32 4 -4
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   2 0
    push           1          i64 
    push           pci_mcl.stringtable u64 
    push           pc_libmcl.genstringtable.i i64 
    pushptroff                u64 8 -8
    callproc       &pc_libmcl.genstring 
#7766: 
    forup          #7765      i64 1
    opnd           pc_libmcl.genstringtable.i 
    opnd           pci_mcl.nstrings 
#7764: 
#7762: 
    retproc                   
End


Proc pc_libmcl.genstring:
    param          pc_libmcl.genstring.s u64 
    param          pc_libmcl.genstring.doterm i64 
    local          pc_libmcl.genstring.i i64 
    local          pc_libmcl.genstring.c i64 
    local          pc_libmcl.genstring.seqlen i64 
    local          pc_libmcl.genstring.length i64 
    local          pc_libmcl.genstring.seq u64 
    local          pc_libmcl.genstring.av_1 i64 
    procentry                 
    setargs                   1 0
    push           pc_libmcl.genstring.s u64 
    callfn         &strlen    i64 
    pop            pc_libmcl.genstring.length i64 
    push           pc_libmcl.genstring.length i64 
    push           0          i64 
    jumpne         #7768      i64 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_libmcl.gendb 
    jump           #7769      
#7768: 
    push           0          i64 
    pop            pc_libmcl.genstring.seqlen i64 
#7770: 
    push           pc_libmcl.genstring.length i64 
    pop            pc_libmcl.genstring.av_1 i64 
    push           pc_libmcl.genstring.av_1 i64 
    push           0          i64 
    jumple         #7771      i64 
#7772: 
    push           &pc_libmcl.genstring.s 
    loadincr                  u64 1
    pushptr                   u8 
    pop            pc_libmcl.genstring.c i64 
    push           pc_libmcl.genstring.c i64 
    push           32         i64 
    jumplt         #7773      i64 
    push           pc_libmcl.genstring.c i64 
    push           127        i64 
    jumpge         #7773      i64 
    push           pc_libmcl.genstring.c i64 
    push           34         i64 
    jumpne         #7774      i64 
#7773: 
    push           pc_libmcl.genstring.seqlen i64 
    jumpfalse      #7775      i64 
    setargs                   2 0
    push           pc_libmcl.genstring.seqlen i64 
    push           pc_libmcl.genstring.seq u64 
    callproc       &pc_libmcl.gendbstring 
    push           0          i64 
    pop            pc_libmcl.genstring.seqlen i64 
#7775: 
    setargs                   1 0
    push           pc_libmcl.genstring.c i64 
    callproc       &pc_libmcl.gendb 
    jump           #7776      
#7774: 
    push           pc_libmcl.genstring.seqlen i64 
    push           0          i64 
    jumpne         #7777      i64 
    push           1          i64 
    pop            pc_libmcl.genstring.seqlen i64 
    push           pc_libmcl.genstring.s u64 
    push           1          i64 
    subrefoff                 u64 1 0
    pop            pc_libmcl.genstring.seq u64 
    jump           #7778      
#7777: 
    push           &pc_libmcl.genstring.seqlen 
    incr                      i64 1
#7778: 
#7776: 
#7779: 
    to             #7772      
    opnd           pc_libmcl.genstring.av_1 
#7771: 
    push           pc_libmcl.genstring.seqlen i64 
    jumpfalse      #7780      i64 
    setargs                   2 0
    push           pc_libmcl.genstring.seqlen i64 
    push           pc_libmcl.genstring.seq u64 
    callproc       &pc_libmcl.gendbstring 
#7780: 
    push           pc_libmcl.genstring.doterm i64 
    jumpfalse      #7781      i64 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_libmcl.gendb 
#7781: 
#7769: 
    retproc                   
End


Proc pc_libmcl.gendb:
    param          pc_libmcl.gendb.a i64 
    procentry                 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.gendb.a i64 
    callfn         &pc_libmcl.mgenint u64 
    push           114        i64 
    callproc       &pc_libmcl.genmc 
#7783: 
    retproc                   
End


Proc pc_libmcl.gendbstring:
    param          pc_libmcl.gendbstring.s u64 
    param          pc_libmcl.gendbstring.length i64 
    procentry                 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           pc_libmcl.gendbstring.length i64 
    push           pc_libmcl.gendbstring.s u64 
    callfn         &pc_libmcl.mgenstring u64 
    push           114        i64 
    callproc       &pc_libmcl.genmc 
#7785: 
    retproc                   
End


Proc pc_libmcl.gendq:
    param          pc_libmcl.gendq.a i64 
    procentry                 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.gendq.a i64 
    callfn         &pc_libmcl.mgenint u64 
    push           117        i64 
    callproc       &pc_libmcl.genmc 
#7787: 
    retproc                   
End


Proc pc_libmcl.gendqname:
    param          pc_libmcl.gendqname.d u64 
    procentry                 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.gendqname.d u64 
    callfn         &pc_libmcl.mgenmemaddr u64 
    push           117        i64 
    callproc       &pc_libmcl.genmc 
#7789: 
    retproc                   
End


Proc pc_libmcl.gendqlabel:
    param          pc_libmcl.gendqlabel.lab i64 
    procentry                 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.gendqlabel.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           117        i64 
    callproc       &pc_libmcl.genmc 
#7791: 
    retproc                   
End


Proc pc_libmcl.genrealtable:
    local          pc_libmcl.genrealtable.x r64 
    local          pc_libmcl.genrealtable.i i64 
    procentry                 
    push           pci_mcl.nreals i64 
    jumptrue       #7793      i64 
    jump           #7794      
#7793: 
    setargs                   1 0
    push           "Real Table" u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   2 0
    push           8          i64 
    push           73         i64 
    callproc       &pc_libmcl.setsegment 
#7795: 
    push           1          i64 
    pop            pc_libmcl.genrealtable.i i64 
    push           pci_mcl.nreals i64 
    push           1          i64 
    jumplt         #7796      i64 
#7797: 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.reallabtable u64 
    push           pc_libmcl.genrealtable.i i64 
    pushptroff                i32 4 -4
    abs                       i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    push           pci_mcl.realtable u64 
    push           pc_libmcl.genrealtable.i i64 
    pushptroff                r64 8 -8
    pop            pc_libmcl.genrealtable.x r64 
    push           pci_mcl.reallabtable u64 
    push           pc_libmcl.genrealtable.i i64 
    pushptroff                i32 4 -4
    push           0          i64 
    jumple         #7798      i64 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.genrealtable.x r64 
    callfn         &pc_libmcl.mgenrealimm u64 
    push           117        i64 
    callproc       &pc_libmcl.genmc 
    jump           #7799      
#7798: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           4          i64 
    push           pc_libmcl.genrealtable.x r64 
    callfn         &pc_libmcl.mgenrealimm u64 
    push           116        i64 
    callproc       &pc_libmcl.genmc 
#7799: 
#7800: 
    forup          #7797      i64 1
    opnd           pc_libmcl.genrealtable.i 
    opnd           pci_mcl.nreals 
#7796: 
#7794: 
    retproc                   
End


Proc pc_libmcl.genabsneg:
    procentry                 
    setargs                   2 0
    push           16         i64 
    push           73         i64 
    callproc       &pc_libmcl.setsegment 
    push           pci_mcl.lababs32 i64 
    jumpfalse      #7802      i64 
    setargs                   1 0
    push           "lababs32" u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.lababs32 i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           9223372034707292159 i64 
    callproc       &pc_libmcl.gendq 
    setargs                   1 0
    push           9223372034707292159 i64 
    callproc       &pc_libmcl.gendq 
#7802: 
    push           pci_mcl.lababs64 i64 
    jumpfalse      #7803      i64 
    setargs                   1 0
    push           "lababs64" u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.lababs64 i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           9223372036854775807 i64 
    callproc       &pc_libmcl.gendq 
    setargs                   1 0
    push           9223372036854775807 i64 
    callproc       &pc_libmcl.gendq 
#7803: 
    push           pci_mcl.labneg32 i64 
    jumpfalse      #7804      i64 
    setargs                   1 0
    push           "labneg32" u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.labneg32 i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           -9223372034707292160 i64 
    callproc       &pc_libmcl.gendq 
    setargs                   1 0
    push           -9223372034707292160 i64 
    callproc       &pc_libmcl.gendq 
#7804: 
    push           pci_mcl.labneg64 i64 
    jumpfalse      #7805      i64 
    setargs                   1 0
    push           "labneg64" u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.labneg64 i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           -9223372036854775808 i64 
    callproc       &pc_libmcl.gendq 
    setargs                   1 0
    push           -9223372036854775808 i64 
    callproc       &pc_libmcl.gendq 
#7805: 
    push           pci_mcl.labzero i64 
    jumpfalse      #7806      i64 
    setargs                   1 0
    push           "labzero"  u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.labzero i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_libmcl.gendq 
#7806: 
    push           pci_mcl.labmask63 i64 
    jumpfalse      #7807      i64 
    setargs                   1 0
    push           "mask63/offset64" u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.labmask63 i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           9223372036854775807 i64 
    callproc       &pc_libmcl.gendq 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.laboffset64 i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           4890909195324358656 i64 
    callproc       &pc_libmcl.gendq 
#7807: 
#7808: 
    retproc                   
End


Proc pc_libmcl.mdefinelabel: i64
    procentry                 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    push           pci_mcl.mlabelno i64 
    setret                    i64 
    jump           #7810      
#7810: 
    retfn                     i64 
End


Proc pc_libmcl.mcreatefwdlabel: i64
    procentry                 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    setret                    i64 
    jump           #7812      
#7812: 
    retfn                     i64 
End


Proc pc_libmcl.mdefinefwdlabel:
    param          pc_libmcl.mdefinefwdlabel.lab i64 
    procentry                 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.mdefinefwdlabel.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
#7814: 
    retproc                   
End


Proc pc_libmcl.stropnd: u64
    param          pc_libmcl.stropnd.a u64 
    param          pc_libmcl.stropnd.sizeprefix i64 
    param          pc_libmcl.stropnd.debug i64 
    local          pc_libmcl.stropnd.str2 block:128 
    local          pc_libmcl.stropnd.plus u64 
    local          pc_libmcl.stropnd.t u64 
    local          pc_libmcl.stropnd.offset i64 
    local          pc_libmcl.stropnd.tc i64 
    procentry                 
    push           0          u64 
    push           &pc_libmcl.stropnd.str 
    push           1          i64 
    popptroff                 u8 1 -1
    push           pc_libmcl.stropnd.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #7816      i64 0
    push           2          i64 
    casejumpeq     #7817      i64 0
    push           3          i64 
    casejumpeq     #7818      i64 0
    push           5          i64 
    casejumpeq     #7819      i64 0
    popstack                  i64 
    jump           #7820      
#7816: 
    setargs                   2 0
    push           pc_libmcl.stropnd.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_libmcl.stropnd.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.strreg u64 
    setret                    u64 
    jump           #7821      
    jump           #7822      
#7817: 
    setargs                   2 0
    setargs                   1 0
    push           pc_libmcl.stropnd.a u64 
    callfn         &pc_libmcl.strvalue u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcpy    
    jump           #7822      
#7818: 
    push           pc_libmcl.stropnd.a u64 
    push           12         
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #7823      i64 0
    push           2          i64 
    casejumpeq     #7824      i64 0
    push           3          i64 
    casejumpeq     #7825      i64 0
    popstack                  i64 
    jump           #7826      
#7823: 
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_libmcl.stropnd.a u64 
    pushptr                   i64 
    callfn         &msysp.strint u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcpy    
    jump           #7827      
#7824: 
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_libmcl.stropnd.a u64 
    pushptr                   r64 
    callfn         &msysp.strreal u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcpy    
    jump           #7827      
#7825: 
    setargs                   1 0
    push           &pc_libmcl.stropnd.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "M#"       u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   2 0
    push           0          i64 
    push           pc_libmcl.stropnd.a u64 
    pushptr                   r64 
    callproc       &msysp.m$print_r64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #7827      
#7826: 
#7827: 
    setargs                   2 0
    setargs                   2 0
    push           pc_libmcl.stropnd.sizeprefix i64 
    push           pc_libmcl.stropnd.a u64 
    push           8          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.getsizeprefix u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcat    
    setargs                   2 0
    push           "["        u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcat    
    push           ""         u64 
    pop            pc_libmcl.stropnd.plus u64 
    push           pc_libmcl.stropnd.a u64 
    push           10         
    pushptroff                u8 1 0
    jumpfalse      #7828      i64 
    setargs                   2 0
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.stropnd.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.strreg u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcat    
    push           "+"        u64 
    pop            pc_libmcl.stropnd.plus u64 
#7828: 
    push           pc_libmcl.stropnd.a u64 
    push           11         
    pushptroff                u8 1 0
    jumpfalse      #7829      i64 
    setargs                   2 0
    push           pc_libmcl.stropnd.plus u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcat    
    setargs                   2 0
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.stropnd.a u64 
    push           11         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.strreg u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcat    
    push           "+"        u64 
    pop            pc_libmcl.stropnd.plus u64 
    push           pc_libmcl.stropnd.a u64 
    push           13         
    pushptroff                u8 1 0
    push           1          i64 
    jumple         #7830      i64 
    setargs                   2 0
    push           "*"        u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcat    
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_libmcl.stropnd.a u64 
    push           13         
    pushptroff                u8 1 0
    callfn         &msysp.strint u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcat    
#7830: 
#7829: 
    push           pc_libmcl.stropnd.a u64 
    push           12         
    pushptroff                u8 1 0
    push           5          i64 
    setjumpeq      #7831      i64 
    push           7          i64 
    setjumpeq      #7831      i64 
    push           6          i64 
    setjumpne      #7832      i64 
#7831: 
    push           pc_libmcl.stropnd.plus u64 
    pushptr                   u8 
    push           43         u64 
    jumpne         #7833      u64 
    setargs                   2 0
    push           pc_libmcl.stropnd.plus u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcat    
#7833: 
    setargs                   2 0
    setargs                   1 0
    push           pc_libmcl.stropnd.a u64 
    callfn         &pc_libmcl.strvalue u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcat    
    jump           #7834      
#7832: 
    push           pc_libmcl.stropnd.a u64 
    push           14         
    pushptroff                i32 1 0
    store          pc_libmcl.stropnd.offset i64 
    jumpfalse      #7835      i64 
    setargs                   1 0
    push           &pc_libmcl.stropnd.str2 
    callproc       &msysp.m$print_startstr 
    setargs                   2 0
    push           "+"        u64 
    push           pc_libmcl.stropnd.offset i64 
    callproc       &msysp.m$print_i64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           &pc_libmcl.stropnd.str2 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcat    
#7835: 
#7834: 
    setargs                   2 0
    push           "]"        u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcat    
    jump           #7822      
#7819: 
    setargs                   2 0
    push           pc_libmcl.stropnd.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_libmcl.stropnd.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.strxreg u64 
    setret                    u64 
    jump           #7821      
    jump           #7822      
#7820: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "BAD OPND" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libmcl.stropnd.a u64 
    push           9          
    pushptroff                u8 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           "<BAD OPND>" u64 
    setret                    u64 
    jump           #7821      
#7822: 
    push           &pc_libmcl.stropnd.str 
    setret                    u64 
    jump           #7821      
#7821: 
    retfn                     u64 
End


Proc pc_libmcl.strreg: u64
    param          pc_libmcl.strreg.reg i64 
    param          pc_libmcl.strreg.size i64 
    local          pc_libmcl.strreg.d u64 
    procentry                 
    setargs                   2 0
    push           0          i64 
    push           pc_libmcl.strreg.reg i64 
    callfn         &pc_libmcl.checkregvar u64 
    pop            pc_libmcl.strreg.d u64 
    startmult                 
    push           pc_libmcl.strreg.size i64 
    push           8          i64 
    jumpne         #7837      i64 
    push           pc_libmcl.strreg.d u64 
    jumpfalse      #7837      u64 
    setargs                   1 0
    push           pc_libmcl.strreg.d u64 
    callfn         &pc_libmcl.getfullname u64 
    resetmult                 
    jump           #7838      
#7837: 
    setargs                   2 0
    push           pc_libmcl.strreg.size i64 
    push           pc_libmcl.strreg.reg i64 
    callfn         &pc_libmcl.getregname u64 
    endmult                   
#7838: 
    setret                    u64 
    jump           #7839      
#7839: 
    retfn                     u64 
End


Proc pc_libmcl.checkregvar: u64
    param          pc_libmcl.checkregvar.reg i64 
    param          pc_libmcl.checkregvar.isfloat i64 
    local          pc_libmcl.checkregvar.d u64 
    local          pc_libmcl.checkregvar.p u64 
    procentry                 
    push           pci_mcl.currasmproc u64 
    push           0          u64 
    jumpne         #7841      u64 
    push           0          u64 
    setret                    u64 
    jump           #7842      
#7841: 
    push           pci_mcl.currasmproc u64 
    push           16         
    pushptroff                u64 1 0
    push           1          i64 
    addrefoff                 u64 32 0
    pop            pc_libmcl.checkregvar.p u64 
    jump           #7843      
#7844: 
    push           pc_libmcl.checkregvar.p u64 
    push           1          
    pushptroff                u8 1 0
    push           18         i64 
    setjumpeq      #7845      i64 
    push           19         i64 
    setjumpne      #7846      i64 
#7845: 
    push           pc_libmcl.checkregvar.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_libmcl.checkregvar.d u64 
    push           pc_libmcl.checkregvar.d u64 
    push           50         
    pushptroff                u8 1 0
    push           pc_libmcl.checkregvar.reg i64 
    jumpne         #7847      i64 
    push           pc_libmcl.checkregvar.isfloat i64 
    jumpfalse      #7848      i64 
    push           &pc_tables.pfloat 
    push           pc_libmcl.checkregvar.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #7848      i64 
    push           pc_libmcl.checkregvar.d u64 
    setret                    u64 
    jump           #7842      
#7848: 
    push           pc_libmcl.checkregvar.isfloat i64 
    jumptrue       #7849      i64 
    push           &pc_tables.pfloat 
    push           pc_libmcl.checkregvar.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumptrue       #7849      i64 
    push           pc_libmcl.checkregvar.d u64 
    setret                    u64 
    jump           #7842      
#7849: 
#7847: 
#7846: 
#7850: 
    push           &pc_libmcl.checkregvar.p 
    incr                      u64 32
#7843: 
    push           pc_libmcl.checkregvar.p u64 
    push           1          
    pushptroff                u8 1 0
    push           10         i64 
    jumpne         #7844      i64 
#7851: 
    push           0          u64 
    setret                    u64 
    jump           #7842      
#7842: 
    retfn                     u64 
End


Proc pc_libmcl.strxreg: u64
    param          pc_libmcl.strxreg.reg i64 
    param          pc_libmcl.strxreg.size i64 
    local          pc_libmcl.strxreg.d u64 
    procentry                 
    setargs                   2 0
    push           1          i64 
    push           pc_libmcl.strxreg.reg i64 
    callfn         &pc_libmcl.checkregvar u64 
    pop            pc_libmcl.strxreg.d u64 
    startmult                 
    push           pc_libmcl.strxreg.size i64 
    push           8          i64 
    jumpne         #7853      i64 
    push           pc_libmcl.strxreg.d u64 
    jumpfalse      #7853      u64 
    setargs                   1 0
    push           pc_libmcl.strxreg.d u64 
    callfn         &pc_libmcl.getfullname u64 
    resetmult                 
    jump           #7854      
#7853: 
    setargs                   2 0
    push           pc_libmcl.strxreg.size i64 
    push           pc_libmcl.strxreg.reg i64 
    callfn         &pc_libmcl.fgetregname u64 
    endmult                   
#7854: 
    setret                    u64 
    jump           #7855      
#7855: 
    retfn                     u64 
End


Proc pc_libmcl.strvalue: u64
    param          pc_libmcl.strvalue.a u64 
    local          pc_libmcl.strvalue.str2 block:128 
    local          pc_libmcl.strvalue.def u64 
    local          pc_libmcl.strvalue.value i64 
    local          pc_libmcl.strvalue.offset i64 
    local          pc_libmcl.strvalue.length i64 
    local          pc_libmcl.strvalue.ss u64 
    procentry                 
    push           pc_libmcl.strvalue.a u64 
    pushptr                   u64 
    pop            pc_libmcl.strvalue.def u64 
    push           pc_libmcl.strvalue.a u64 
    pushptr                   i64 
    pop            pc_libmcl.strvalue.value i64 
    setargs                   2 0
    push           ""         u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcpy    
    push           pc_libmcl.strvalue.a u64 
    push           12         
    pushptroff                u8 1 0
    push           5          i64 
    casejumpeq     #7857      i64 0
    push           6          i64 
    casejumpeq     #7858      i64 0
    push           1          i64 
    casejumpeq     #7859      i64 0
    push           2          i64 
    casejumpeq     #7860      i64 0
    push           3          i64 
    casejumpeq     #7861      i64 0
    push           4          i64 
    casejumpeq     #7862      i64 0
    push           8          i64 
    casejumpeq     #7863      i64 0
    push           9          i64 
    casejumpeq     #7864      i64 0
    push           7          i64 
    casejumpeq     #7865      i64 0
    popstack                  i64 
    jump           #7866      
#7857: 
    setargs                   2 0
    setargs                   1 0
    push           pc_libmcl.strvalue.def u64 
    callfn         &pc_libmcl.getfullname u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
!addoffset::
#7867: 
    push           pc_libmcl.strvalue.a u64 
    push           14         
    pushptroff                i32 1 0
    store          pc_libmcl.strvalue.offset i64 
    jumpfalse      #7868      i64 
    setargs                   1 0
    push           &pc_libmcl.strvalue.str2 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    startmult                 
    push           pc_libmcl.strvalue.offset i64 
    push           0          i64 
    jumple         #7869      i64 
    push           "+"        u64 
    resetmult                 
    jump           #7870      
#7869: 
    push           ""         u64 
    endmult                   
#7870: 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           pc_libmcl.strvalue.offset i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           &pc_libmcl.strvalue.str2 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
#7868: 
    jump           #7871      
#7858: 
    setargs                   2 0
    setargs                   1 0
    push           pc_libmcl.strvalue.a u64 
    pushptr                   i64 
    callfn         &pc_libmcl.getfulltempname u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
    jump           #7871      
#7859: 
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_libmcl.strvalue.value i64 
    callfn         &msysp.strint u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
    jump           #7871      
#7860: 
    setargs                   1 0
    push           &pc_libmcl.strvalue.str 
    callproc       &msysp.m$print_startstr 
    setargs                   2 0
    push           "20.20"    u64 
    push           pc_libmcl.strvalue.a u64 
    pushptr                   r64 
    callproc       &msysp.m$print_r64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #7871      
#7861: 
    setargs                   2 0
    push           "M"        u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_libmcl.strvalue.a u64 
    pushptr                   r64 
    callfn         &msysp.strreal u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
    jump           #7871      
#7862: 
    setargs                   2 0
    push           "\""       u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
    setargs                   2 0
    push           pc_libmcl.strvalue.a u64 
    pushptr                   u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
    setargs                   2 0
    push           "\""       u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
    jump           #7871      
#7863: 
    setargs                   2 0
    push           pc_libmcl.strvalue.a u64 
    pushptr                   u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
    jump           #7871      
#7864: 
    setargs                   2 0
    push           "XXX"      u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
    jump           #7871      
#7865: 
    setargs                   2 0
    push           "L"        u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_libmcl.strvalue.a u64 
    pushptr                   i64 
    callfn         &msysp.strint u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
    jump           #7867      
    jump           #7871      
#7866: 
#7871: 
    push           &pc_libmcl.strvalue.str 
    setret                    u64 
    jump           #7872      
#7872: 
    retfn                     u64 
End


Proc pc_libmcl.writegsfile:
    param          pc_libmcl.writegsfile.filename u64 
    param          pc_libmcl.writegsfile.d u64 
    local          pc_libmcl.writegsfile.f u64 
    procentry                 
    setargs                   2 0
    push           "w"        u64 
    push           pc_libmcl.writegsfile.filename u64 
    callfn         &fopen     u64 
    pop            pc_libmcl.writegsfile.f u64 
    setargs                   2 0
    push           pc_libmcl.writegsfile.f u64 
    push           pc_libmcl.writegsfile.d u64 
    callproc       &mlibp.gs_println 
    setargs                   1 0
    push           pc_libmcl.writegsfile.f u64 
    callproc       &fclose    
#7874: 
    retproc                   
End


Proc pc_libmcl.ismemaddr: i64
    param          pc_libmcl.ismemaddr.n i64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           pc_libmcl.ismemaddr.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           11         i64 
    jumpne         #7876      i64 
    push           1          i64 
    setret                    i64 
    jump           #7877      
#7876: 
    push           0          i64 
    setret                    i64 
    jump           #7877      
#7877: 
    retfn                     i64 
End


Proc pc_libmcl.isimm64: i64
    param          pc_libmcl.isimm64.n i64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           pc_libmcl.isimm64.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #7879      i64 
    push           1          i64 
    setret                    i64 
    jump           #7880      
#7879: 
    push           0          i64 
    setret                    i64 
    jump           #7880      
#7880: 
    retfn                     i64 
End


Proc pc_libmcl.isregvaropnd: i64
    param          pc_libmcl.isregvaropnd.n i64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           pc_libmcl.isregvaropnd.n i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           7          i64 
    jumpne         #7882      i64 
    push           1          i64 
    setret                    i64 
    jump           #7883      
#7882: 
    push           0          i64 
    setret                    i64 
    jump           #7883      
#7883: 
    retfn                     i64 
End


Proc pc_libmcl.copyblock:
    param          pc_libmcl.copyblock.ax u64 
    param          pc_libmcl.copyblock.bx u64 
    param          pc_libmcl.copyblock.n i64 
    local          pc_libmcl.copyblock.rx u64 
    local          pc_libmcl.copyblock.rcount u64 
    local          pc_libmcl.copyblock.nwords i64 
    local          pc_libmcl.copyblock.lab i64 
    local          pc_libmcl.copyblock.oddbytes i64 
    local          pc_libmcl.copyblock.offset i64 
    local          pc_libmcl.copyblock.workreg i64 
    local          pc_libmcl.copyblock.countreg i64 
    local          pc_libmcl.copyblock.av_1 i64 
    procentry                 
    push           pc_libmcl.copyblock.n i64 
    push           8          i64 
    irem                      i64 
    pop            pc_libmcl.copyblock.oddbytes i64 
    push           &pc_libmcl.copyblock.n 
    push           pc_libmcl.copyblock.oddbytes i64 
    subto                     i64 
    push           pc_libmcl.copyblock.n i64 
    push           8          i64 
    idiv                      i64 
    pop            pc_libmcl.copyblock.nwords i64 
    setargs                   2 0
    push           8          i64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    store          pc_libmcl.copyblock.workreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_libmcl.copyblock.rx u64 
    push           0          i64 
    pop            pc_libmcl.copyblock.offset i64 
    push           1          i64 
    push           pc_libmcl.copyblock.nwords i64 
    jumpgt         #7885      i64 
    push           pc_libmcl.copyblock.nwords i64 
    push           4          i64 
    jumpgt         #7885      i64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.copyblock.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    pop            pc_libmcl.copyblock.ax u64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.copyblock.bx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    pop            pc_libmcl.copyblock.bx u64 
#7886: 
    push           pc_libmcl.copyblock.nwords i64 
    pop            pc_libmcl.copyblock.av_1 i64 
    push           pc_libmcl.copyblock.av_1 i64 
    push           0          i64 
    jumple         #7887      i64 
#7888: 
    setargs                   3 0
    setargs                   3 0
    push           0          i64 
    push           pc_libmcl.copyblock.offset i64 
    push           pc_libmcl.copyblock.bx u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           pc_libmcl.copyblock.rx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_libmcl.copyblock.rx u64 
    setargs                   3 0
    push           0          i64 
    push           pc_libmcl.copyblock.offset i64 
    push           pc_libmcl.copyblock.ax u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_libmcl.copyblock.offset 
    push           8          i64 
    addto                     i64 
#7889: 
    to             #7888      
    opnd           pc_libmcl.copyblock.av_1 
#7887: 
    jump           #7890      
#7885: 
    push           pc_libmcl.copyblock.nwords i64 
    push           0          i64 
    jumpeq         #7891      i64 
    setargs                   2 0
    push           8          i64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    store          pc_libmcl.copyblock.countreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_libmcl.copyblock.rcount u64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pc_libmcl.copyblock.lab i64 
    setargs                   1 0
    push           pc_libmcl.copyblock.ax u64 
    callfn         &pc_libmcl.makesimpleaddr u64 
    pop            pc_libmcl.copyblock.ax u64 
    setargs                   1 0
    push           pc_libmcl.copyblock.bx u64 
    callfn         &pc_libmcl.makesimpleaddr u64 
    pop            pc_libmcl.copyblock.bx u64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.copyblock.nwords i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_libmcl.copyblock.rcount u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.copyblock.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_libmcl.copyblock.bx u64 
    push           pc_libmcl.copyblock.rx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_libmcl.copyblock.rx u64 
    push           pc_libmcl.copyblock.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           8          i64 
    callfn         &pc_libmcl.mgenint u64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.copyblock.ax u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           8          i64 
    callfn         &pc_libmcl.mgenint u64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.copyblock.bx u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           pc_libmcl.copyblock.rcount u64 
    push           54         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.copyblock.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           5          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    push           0          i64 
    pop            pc_libmcl.copyblock.offset i64 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_libmcl.copyblock.countreg i64 
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_libmcl.copyblock.countreg i64 
    popptroff                 u8 1 -1
#7891: 
#7890: 
    push           pc_libmcl.copyblock.oddbytes i64 
    jumpfalse      #7892      i64 
    push           pc_libmcl.copyblock.oddbytes i64 
    pop            pc_libmcl.copyblock.n i64 
    push           pc_libmcl.copyblock.n i64 
    push           4          i64 
    jumplt         #7893      i64 
    setargs                   2 0
    push           4          i64 
    push           pc_libmcl.copyblock.rx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    pop            pc_libmcl.copyblock.rx u64 
    setargs                   3 0
    setargs                   3 0
    push           4          i64 
    push           pc_libmcl.copyblock.offset i64 
    push           pc_libmcl.copyblock.bx u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           pc_libmcl.copyblock.rx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_libmcl.copyblock.rx u64 
    setargs                   3 0
    push           4          i64 
    push           pc_libmcl.copyblock.offset i64 
    push           pc_libmcl.copyblock.ax u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_libmcl.copyblock.n 
    push           4          i64 
    subto                     i64 
    push           &pc_libmcl.copyblock.offset 
    push           4          i64 
    addto                     i64 
#7893: 
    push           pc_libmcl.copyblock.n i64 
    push           2          i64 
    jumplt         #7894      i64 
    setargs                   2 0
    push           2          i64 
    push           pc_libmcl.copyblock.rx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    pop            pc_libmcl.copyblock.rx u64 
    setargs                   3 0
    setargs                   3 0
    push           2          i64 
    push           pc_libmcl.copyblock.offset i64 
    push           pc_libmcl.copyblock.bx u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           pc_libmcl.copyblock.rx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_libmcl.copyblock.rx u64 
    setargs                   3 0
    push           2          i64 
    push           pc_libmcl.copyblock.offset i64 
    push           pc_libmcl.copyblock.ax u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_libmcl.copyblock.n 
    push           2          i64 
    subto                     i64 
    push           &pc_libmcl.copyblock.offset 
    push           2          i64 
    addto                     i64 
#7894: 
    push           pc_libmcl.copyblock.n i64 
    push           1          i64 
    jumpne         #7895      i64 
    setargs                   2 0
    push           1          i64 
    push           pc_libmcl.copyblock.rx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    pop            pc_libmcl.copyblock.rx u64 
    setargs                   3 0
    setargs                   3 0
    push           1          i64 
    push           pc_libmcl.copyblock.offset i64 
    push           pc_libmcl.copyblock.bx u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           pc_libmcl.copyblock.rx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_libmcl.copyblock.rx u64 
    setargs                   3 0
    push           1          i64 
    push           pc_libmcl.copyblock.offset i64 
    push           pc_libmcl.copyblock.ax u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
#7895: 
#7892: 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_libmcl.copyblock.workreg i64 
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_libmcl.copyblock.workreg i64 
    popptroff                 u8 1 -1
#7896: 
    retproc                   
End


Proc pc_libmcl.makesimpleaddr: u64
    param          pc_libmcl.makesimpleaddr.ax u64 
    local          pc_libmcl.makesimpleaddr.bx u64 
    local          pc_libmcl.makesimpleaddr.newreg i64 
    procentry                 
    push           pc_libmcl.makesimpleaddr.ax u64 
    push           10         
    pushptroff                u8 1 0
    jumpfalse      #7898      i64 
    push           pc_libmcl.makesimpleaddr.ax u64 
    push           11         
    pushptroff                u8 1 0
    jumptrue       #7898      i64 
    push           pc_libmcl.makesimpleaddr.ax u64 
    setret                    u64 
    jump           #7899      
#7898: 
    startmult                 
    push           pc_libmcl.makesimpleaddr.ax u64 
    push           10         
    pushptroff                u8 1 0
    jumpfalse      #7900      i64 
    push           pc_libmcl.makesimpleaddr.ax u64 
    push           10         
    pushptroff                u8 1 0
    resetmult                 
    jump           #7901      
#7900: 
    startmult                 
    push           pc_libmcl.makesimpleaddr.ax u64 
    push           11         
    pushptroff                u8 1 0
    jumpfalse      #7902      i64 
    push           pc_libmcl.makesimpleaddr.ax u64 
    push           11         
    pushptroff                u8 1 0
    resetmult                 
    jump           #7903      
#7902: 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    endmult                   
#7903: 
    endmult                   
#7901: 
    pop            pc_libmcl.makesimpleaddr.newreg i64 
    setargs                   3 0
    push           0          i64 
    push           8          i64 
    push           pc_libmcl.makesimpleaddr.newreg i64 
    callfn         &pc_libmcl.mgenireg u64 
    pop            pc_libmcl.makesimpleaddr.bx u64 
    setargs                   3 0
    push           pc_libmcl.makesimpleaddr.ax u64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.makesimpleaddr.newreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           15         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_libmcl.makesimpleaddr.bx u64 
    setret                    u64 
    jump           #7899      
#7899: 
    retfn                     u64 
End


Proc pc_libmcl.ispoweroftwo: i64
    param          pc_libmcl.ispoweroftwo.x i64 
    local          pc_libmcl.ispoweroftwo.a i64 
    local          pc_libmcl.ispoweroftwo.n i64 
    local          pc_libmcl.ispoweroftwo.av_1 i64 
    procentry                 
    push           1          i64 
    pop            pc_libmcl.ispoweroftwo.a i64 
    push           0          i64 
    pop            pc_libmcl.ispoweroftwo.n i64 
#7905: 
    push           60         i64 
    pop            pc_libmcl.ispoweroftwo.av_1 i64 
#7906: 
    push           &pc_libmcl.ispoweroftwo.n 
    incr                      i64 1
    push           pc_libmcl.ispoweroftwo.a i64 
    push           1          i64 
    shl                       i64 
    pop            pc_libmcl.ispoweroftwo.a i64 
    push           pc_libmcl.ispoweroftwo.a i64 
    push           pc_libmcl.ispoweroftwo.x i64 
    jumpne         #7907      i64 
    push           pc_libmcl.ispoweroftwo.n i64 
    setret                    i64 
    jump           #7908      
#7907: 
#7909: 
    to             #7906      
    opnd           pc_libmcl.ispoweroftwo.av_1 
#7910: 
    push           0          i64 
    setret                    i64 
    jump           #7908      
#7908: 
    retfn                     i64 
End


Proc pc_libmcl.getrtsproclabel: i64
    param          pc_libmcl.getrtsproclabel.fnindex i64 
    procentry                 
    push           &pci_mcl.rtsproclabels 
    push           pc_libmcl.getrtsproclabel.fnindex i64 
    pushptroff                i64 8 -8
    push           0          i64 
    jumpne         #7912      i64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    push           &pci_mcl.rtsproclabels 
    push           pc_libmcl.getrtsproclabel.fnindex i64 
    popptroff                 i64 8 -8
    push           pci_mcl.mlabelno i64 
    setret                    i64 
    jump           #7913      
#7912: 
    push           &pci_mcl.rtsproclabels 
    push           pc_libmcl.getrtsproclabel.fnindex i64 
    pushptroff                i64 8 -8
    setret                    i64 
    jump           #7913      
#7913: 
    retfn                     i64 
End


Proc pc_libmcl.genrtsproctable:
    local          pc_libmcl.genrtsproctable.str block:256 
    local          pc_libmcl.genrtsproctable.proclab i64 
    local          pc_libmcl.genrtsproctable.d u64 
    local          pc_libmcl.genrtsproctable.av_1 i64 
    local          pc_libmcl.genrtsproctable.i i64 
    procentry                 
    setargs                   2 0
    push           16         i64 
    push           67         i64 
    callproc       &pc_libmcl.setsegment 
#7915: 
    push           1          i64 
    pop            pc_libmcl.genrtsproctable.i i64 
    push           6          i64 
    pop            pc_libmcl.genrtsproctable.av_1 i64 
    push           pc_libmcl.genrtsproctable.av_1 i64 
    push           1          i64 
    jumplt         #7916      i64 
#7917: 
    push           &pci_mcl.rtsproclabels 
    push           pc_libmcl.genrtsproctable.i i64 
    pushptroff                i64 8 -8
    jumpfalse      #7918      i64 
    setargs                   1 0
    push           &pc_libmcl.genrtsproctable.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "Generating code for" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pc_tables.rtsnames 
    push           pc_libmcl.genrtsproctable.i i64 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           &pc_libmcl.genrtsproctable.str 
    callproc       &pc_libmcl.mgencomment 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           &pci_mcl.rtsproclabels 
    push           pc_libmcl.genrtsproctable.i i64 
    pushptroff                i64 8 -8
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_decls.rtsproctable 
    push           pc_libmcl.genrtsproctable.i i64 
    pushptroff                u64 8 -8
    jumptrue       #7919      u64 
    push           pc_libmcl.genrtsproctable.i i64 
    push           4          i64 
    casejumpeq     #7920      i64 0
    push           5          i64 
    casejumpeq     #7921      i64 0
    popstack                  i64 
    jump           #7922      
#7920: 
    setargs                   0 0
    callproc       &pc_libmcl.genrts_mul_i128 
    jump           #7923      
#7921: 
    setargs                   0 0
    callproc       &pc_libmcl.genrts_div_i128 
    jump           #7923      
#7922: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pc_tables.rtsnames 
    push           pc_libmcl.genrtsproctable.i i64 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           ""         u64 
    push           "RTS fn not defined" u64 
    callproc       &pc_libmcl.merror 
#7923: 
    setargs                   1 0
    push           ""         u64 
    callproc       &pc_libmcl.mgencomment 
    jump           #7924      
#7919: 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           &pc_decls.rtsproctable 
    push           pc_libmcl.genrtsproctable.i i64 
    pushptroff                u64 8 -8
    callfn         &pc_libmcl.mgenmemaddr u64 
    push           26         i64 
    callproc       &pc_libmcl.genmc 
#7924: 
#7918: 
#7925: 
    forup          #7917      i64 1
    opnd           pc_libmcl.genrtsproctable.i 
    opnd           pc_libmcl.genrtsproctable.av_1 
#7916: 
#7926: 
    retproc                   
End


Proc pc_libmcl.genrts_mul_i128:
    procentry                 
    setargs                   1 0
    push           "<code for mul-i128>" u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   0 0
    callproc       &pc_libmcl.genrtsentry 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           7          i64 
    pushptroff                u64 8 -16
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           8          i64 
    pushptroff                u64 8 -16
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           10         i64 
    pushptroff                u64 8 -16
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           12         i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           10         i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           11         i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           1          i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           14         i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           1          i64 
    pushptroff                u64 8 -16
    push           35         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           1          i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           7          i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           10         i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           1          i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           13         i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           1          i64 
    pushptroff                u64 8 -16
    push           35         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           1          i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           8          i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           11         i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           1          i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           13         i64 
    pushptroff                u64 8 -16
    push           33         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           7          i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           12         i64 
    pushptroff                u64 8 -16
    push           29         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           8          i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           12         i64 
    pushptroff                u64 8 -16
    push           29         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           12         i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           2          i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           10         i64 
    pushptroff                u64 8 -16
    push           14         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           8          i64 
    pushptroff                u64 8 -16
    push           14         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           7          i64 
    pushptroff                u64 8 -16
    push           14         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_libmcl.genrtsexit 
#7928: 
    retproc                   
End


Proc pc_libmcl.genrts_div_i128:
    procentry                 
    setargs                   1 0
    push           "<code for div-i128>" u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   0 0
    callproc       &pc_libmcl.genrtsentry 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           4          i64 
    pushptroff                u64 8 -16
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           12         i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           4          i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           4          i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           1          i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           12         i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           12         i64 
    pushptroff                u64 8 -16
    push           41         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           13         i64 
    pushptroff                u64 8 -16
    push           38         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           1          i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           2          i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           13         i64 
    pushptroff                u64 8 -16
    push           34         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           1          i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           4          i64 
    pushptroff                u64 8 -16
    push           30         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           11         i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           1          i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           4          i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           12         i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           13         i64 
    pushptroff                u64 8 -16
    push           38         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           4          i64 
    pushptroff                u64 8 -16
    push           14         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_libmcl.genrtsexit 
#7930: 
    retproc                   
End


Proc pc_libmcl.genrtsentry:
    procentry                 
    setargs                   3 0
    push           0          u64 
    push           pci_mcl.dframeopnd u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pci_mcl.dstackopnd u64 
    push           pci_mcl.dframeopnd u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           32         i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pci_mcl.dstackopnd u64 
    push           30         i64 
    callproc       &pc_libmcl.genmc 
#7932: 
    retproc                   
End


Proc pc_libmcl.genrtsexit:
    procentry                 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           32         i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pci_mcl.dstackopnd u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           pci_mcl.dframeopnd u64 
    push           14         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           0          u64 
    push           23         i64 
    callproc       &pc_libmcl.genmc 
#7934: 
    retproc                   
End


Proc pc_libmcl.clearblock:
    param          pc_libmcl.clearblock.ax u64 
    param          pc_libmcl.clearblock.n i64 
    local          pc_libmcl.clearblock.rx u64 
    local          pc_libmcl.clearblock.rcount u64 
    local          pc_libmcl.clearblock.nwords i64 
    local          pc_libmcl.clearblock.lab i64 
    local          pc_libmcl.clearblock.oddbytes i64 
    local          pc_libmcl.clearblock.offset i64 
    local          pc_libmcl.clearblock.workreg i64 
    local          pc_libmcl.clearblock.countreg i64 
    local          pc_libmcl.clearblock.av_1 i64 
    local          pc_libmcl.clearblock.i i64 
    procentry                 
    push           pc_libmcl.clearblock.n i64 
    push           8          i64 
    irem                      i64 
    pop            pc_libmcl.clearblock.oddbytes i64 
    push           &pc_libmcl.clearblock.n 
    push           pc_libmcl.clearblock.oddbytes i64 
    subto                     i64 
    push           pc_libmcl.clearblock.n i64 
    push           8          i64 
    idiv                      i64 
    pop            pc_libmcl.clearblock.nwords i64 
    setargs                   2 0
    push           8          i64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    store          pc_libmcl.clearblock.workreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_libmcl.clearblock.rx u64 
    setargs                   3 0
    push           pc_libmcl.clearblock.rx u64 
    push           pc_libmcl.clearblock.rx u64 
    push           41         i64 
    callproc       &pc_libmcl.genmc 
    push           0          i64 
    pop            pc_libmcl.clearblock.offset i64 
    push           1          i64 
    push           pc_libmcl.clearblock.nwords i64 
    jumpgt         #7936      i64 
    push           pc_libmcl.clearblock.nwords i64 
    push           8          i64 
    jumpgt         #7936      i64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.clearblock.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    pop            pc_libmcl.clearblock.ax u64 
#7937: 
    push           pc_libmcl.clearblock.nwords i64 
    pop            pc_libmcl.clearblock.av_1 i64 
    push           pc_libmcl.clearblock.av_1 i64 
    push           0          i64 
    jumple         #7938      i64 
#7939: 
    setargs                   3 0
    push           pc_libmcl.clearblock.rx u64 
    setargs                   3 0
    push           0          i64 
    push           pc_libmcl.clearblock.offset i64 
    push           pc_libmcl.clearblock.ax u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_libmcl.clearblock.offset 
    push           8          i64 
    addto                     i64 
#7940: 
    to             #7939      
    opnd           pc_libmcl.clearblock.av_1 
#7938: 
    jump           #7941      
#7936: 
    push           pc_libmcl.clearblock.nwords i64 
    push           0          i64 
    jumpeq         #7942      i64 
    push           pc_libmcl.clearblock.nwords i64 
    push           3          i64 
    iand                      i64 
    jumpfalse      #7943      i64 
    setargs                   2 0
    push           8          i64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    store          pc_libmcl.clearblock.countreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_libmcl.clearblock.rcount u64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pc_libmcl.clearblock.lab i64 
    setargs                   1 0
    push           pc_libmcl.clearblock.ax u64 
    callfn         &pc_libmcl.makesimpleaddr u64 
    pop            pc_libmcl.clearblock.ax u64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.clearblock.nwords i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_libmcl.clearblock.rcount u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.clearblock.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_libmcl.clearblock.rx u64 
    push           pc_libmcl.clearblock.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           8          i64 
    callfn         &pc_libmcl.mgenint u64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.clearblock.ax u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           pc_libmcl.clearblock.rcount u64 
    push           54         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.clearblock.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           5          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    push           0          i64 
    pop            pc_libmcl.clearblock.offset i64 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_libmcl.clearblock.countreg i64 
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_libmcl.clearblock.countreg i64 
    popptroff                 u8 1 -1
    jump           #7944      
#7943: 
    setargs                   2 0
    push           8          i64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    store          pc_libmcl.clearblock.countreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_libmcl.clearblock.rcount u64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pc_libmcl.clearblock.lab i64 
    setargs                   1 0
    push           pc_libmcl.clearblock.ax u64 
    callfn         &pc_libmcl.makesimpleaddr u64 
    pop            pc_libmcl.clearblock.ax u64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.clearblock.nwords i64 
    push           4          i64 
    idiv                      i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_libmcl.clearblock.rcount u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.clearblock.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
#7945: 
    push           1          i64 
    pop            pc_libmcl.clearblock.i i64 
#7946: 
    setargs                   3 0
    push           pc_libmcl.clearblock.rx u64 
    setargs                   3 0
    push           0          i64 
    push           pc_libmcl.clearblock.offset i64 
    push           pc_libmcl.clearblock.ax u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_libmcl.clearblock.offset 
    push           8          i64 
    addto                     i64 
#7947: 
    forup          #7946      i64 1
    opnd           pc_libmcl.clearblock.i 
    opnd           4          
#7948: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           32         i64 
    callfn         &pc_libmcl.mgenint u64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.clearblock.ax u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           pc_libmcl.clearblock.rcount u64 
    push           54         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.clearblock.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           5          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    push           0          i64 
    pop            pc_libmcl.clearblock.offset i64 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_libmcl.clearblock.countreg i64 
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_libmcl.clearblock.countreg i64 
    popptroff                 u8 1 -1
#7944: 
#7942: 
#7941: 
    push           pc_libmcl.clearblock.oddbytes i64 
    jumpfalse      #7949      i64 
    push           pc_libmcl.clearblock.oddbytes i64 
    pop            pc_libmcl.clearblock.n i64 
    push           pc_libmcl.clearblock.n i64 
    push           4          i64 
    jumplt         #7950      i64 
    setargs                   2 0
    push           4          i64 
    push           pc_libmcl.clearblock.rx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    pop            pc_libmcl.clearblock.rx u64 
    setargs                   3 0
    push           pc_libmcl.clearblock.rx u64 
    setargs                   3 0
    push           4          i64 
    push           pc_libmcl.clearblock.offset i64 
    push           pc_libmcl.clearblock.ax u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_libmcl.clearblock.n 
    push           4          i64 
    subto                     i64 
    push           &pc_libmcl.clearblock.offset 
    push           4          i64 
    addto                     i64 
#7950: 
    push           pc_libmcl.clearblock.n i64 
    push           2          i64 
    jumplt         #7951      i64 
    setargs                   2 0
    push           2          i64 
    push           pc_libmcl.clearblock.rx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    pop            pc_libmcl.clearblock.rx u64 
    setargs                   3 0
    push           pc_libmcl.clearblock.rx u64 
    setargs                   3 0
    push           2          i64 
    push           pc_libmcl.clearblock.offset i64 
    push           pc_libmcl.clearblock.ax u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_libmcl.clearblock.n 
    push           2          i64 
    subto                     i64 
    push           &pc_libmcl.clearblock.offset 
    push           2          i64 
    addto                     i64 
#7951: 
    push           pc_libmcl.clearblock.n i64 
    push           1          i64 
    jumpne         #7952      i64 
    setargs                   2 0
    push           1          i64 
    push           pc_libmcl.clearblock.rx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    pop            pc_libmcl.clearblock.rx u64 
    setargs                   3 0
    push           pc_libmcl.clearblock.rx u64 
    setargs                   3 0
    push           1          i64 
    push           pc_libmcl.clearblock.offset i64 
    push           pc_libmcl.clearblock.ax u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
#7952: 
#7949: 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_libmcl.clearblock.workreg i64 
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_libmcl.clearblock.workreg i64 
    popptroff                 u8 1 -1
#7953: 
    retproc                   
End


Proc pc_libmcl.genfunctiontable:
    local          pc_libmcl.genfunctiontable.str block:256 
    local          pc_libmcl.genfunctiontable.s u64 
    local          pc_libmcl.genfunctiontable.t u64 
    local          pc_libmcl.genfunctiontable.currpcl u64 
    local          pc_libmcl.genfunctiontable.firststringlab i64 
    local          pc_libmcl.genfunctiontable.nextlab i64 
    local          pc_libmcl.genfunctiontable.nprocs i64 
    procentry                 
    push           pci_mcl.lab_funcaddrtable i64 
    push           0          i64 
    jumpne         #7955      i64 
    jump           #7956      
#7955: 
    setargs                   1 0
    push           "Function Table" u64 
    callproc       &pc_libmcl.mgencomment 
    push           0          i64 
    pop            pc_libmcl.genfunctiontable.nprocs i64 
    setargs                   2 0
    push           16         i64 
    push           67         i64 
    callproc       &pc_libmcl.setsegment 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.lab_funcaddrtable i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    push           pc_libpcl.pcstart u64 
    pop            pc_libmcl.genfunctiontable.currpcl u64 
#7957: 
    push           pc_libmcl.genfunctiontable.currpcl u64 
    push           1          
    pushptroff                u8 1 0
    push           8          i64 
    setjumpeq      #7958      i64 
    push           16         i64 
    setjumpne      #7959      i64 
#7958: 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.genfunctiontable.currpcl u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmemaddr u64 
    push           117        i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_libmcl.genfunctiontable.nprocs 
    incr                      i64 1
#7959: 
    push           &pc_libmcl.genfunctiontable.currpcl 
    incr                      u64 32
#7960: 
    push           pc_libmcl.genfunctiontable.currpcl u64 
    push           1          
    pushptroff                u8 1 0
    push           11         i64 
    jumpne         #7957      i64 
#7961: 
    push           0          i64 
    pop            pc_libmcl.genfunctiontable.firststringlab i64 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.lab_funcnametable i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    push           pc_libpcl.pcstart u64 
    pop            pc_libmcl.genfunctiontable.currpcl u64 
#7962: 
    push           pc_libmcl.genfunctiontable.currpcl u64 
    push           1          
    pushptroff                u8 1 0
    push           8          i64 
    setjumpeq      #7963      i64 
    push           16         i64 
    setjumpne      #7964      i64 
#7963: 
    push           pc_libmcl.genfunctiontable.firststringlab i64 
    push           0          i64 
    jumpne         #7965      i64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    store          pc_libmcl.genfunctiontable.nextlab i64 
    pop            pc_libmcl.genfunctiontable.firststringlab i64 
    jump           #7966      
#7965: 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pc_libmcl.genfunctiontable.nextlab i64 
#7966: 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.genfunctiontable.nextlab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           117        i64 
    callproc       &pc_libmcl.genmc 
#7964: 
    push           &pc_libmcl.genfunctiontable.currpcl 
    incr                      u64 32
#7967: 
    push           pc_libmcl.genfunctiontable.currpcl u64 
    push           1          
    pushptroff                u8 1 0
    push           11         i64 
    jumpne         #7962      i64 
#7968: 
    push           pc_libmcl.genfunctiontable.firststringlab i64 
    pop            pc_libmcl.genfunctiontable.nextlab i64 
    push           pc_libpcl.pcstart u64 
    pop            pc_libmcl.genfunctiontable.currpcl u64 
#7969: 
    push           pc_libmcl.genfunctiontable.currpcl u64 
    push           1          
    pushptroff                u8 1 0
    push           8          i64 
    setjumpeq      #7970      i64 
    push           16         i64 
    setjumpne      #7971      i64 
#7970: 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.genfunctiontable.nextlab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    push           pc_libmcl.genfunctiontable.currpcl u64 
    push           8          
    pushptroff                u64 1 0
    pushptr                   u64 
    pop            pc_libmcl.genfunctiontable.s u64 
    push           pc_libmcl.genfunctiontable.s u64 
    pop            pc_libmcl.genfunctiontable.t u64 
    jump           #7972      
#7973: 
    push           pc_libmcl.genfunctiontable.s u64 
    pushptr                   u8 
    push           46         u64 
    jumpne         #7974      u64 
    push           pc_libmcl.genfunctiontable.s u64 
    push           1          i64 
    addrefoff                 u64 1 0
    pop            pc_libmcl.genfunctiontable.t u64 
#7974: 
    push           &pc_libmcl.genfunctiontable.s 
    incr                      u64 1
#7972: 
    push           pc_libmcl.genfunctiontable.s u64 
    pushptr                   u8 
    jumptrue       #7973      u64 
#7975: 
    setargs                   2 0
    push           1          i64 
    push           pc_libmcl.genfunctiontable.t u64 
    callproc       &pc_libmcl.genstring 
    push           &pc_libmcl.genfunctiontable.nextlab 
    incr                      i64 1
#7971: 
    push           &pc_libmcl.genfunctiontable.currpcl 
    incr                      u64 32
#7976: 
    push           pc_libmcl.genfunctiontable.currpcl u64 
    push           1          
    pushptroff                u8 1 0
    push           11         i64 
    jumpne         #7969      i64 
#7977: 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.lab_funcnprocs i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.genfunctiontable.nprocs i64 
    callfn         &pc_libmcl.mgenint u64 
    push           117        i64 
    callproc       &pc_libmcl.genmc 
#7956: 
    retproc                   
End


Proc pc_libmcl.mgenextname: u64
    param          pc_libmcl.mgenextname.s u64 
    local          pc_libmcl.mgenextname.str block:64 
    local          pc_libmcl.mgenextname.d u64 
    procentry                 
    setargs                   2 0
    push           pc_libmcl.mgenextname.s u64 
    push           &pc_libmcl.mgenextname.str 
    callproc       &strcpy    
    push           0          u64 
    push           &pc_libmcl.mgenextname.str 
    setargs                   1 0
    push           pc_libmcl.mgenextname.s u64 
    callfn         &strlen    i64 
    popptroff                 u8 1 -1
    setargs                   1 0
    push           64         i64 
    callfn         &mlibp.pcm_allocz u64 
    pop            pc_libmcl.mgenextname.d u64 
    setargs                   1 0
    push           &pc_libmcl.mgenextname.str 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           pc_libmcl.mgenextname.d u64 
    push           0          
    popptroff                 u64 1 0
    push           1          u64 
    push           pc_libmcl.mgenextname.d u64 
    push           46         
    addrefoff                 u64 1 0
    push           1          i64 
    popdotindex               u16 
    setargs                   1 0
    push           pc_libmcl.mgenextname.d u64 
    callfn         &pc_libmcl.mgenmemaddr u64 
    setret                    u64 
    jump           #7979      
#7979: 
    retfn                     u64 
End


Proc pc_libmcl.pcl_setasmhandler::
    param          pc_libmcl.pcl_setasmhandler.fnaddr u64 
    procentry                 
    push           pc_libmcl.pcl_setasmhandler.fnaddr u64 
    pop            pci_mcl.hostasmhandler u64 
#7981: 
    retproc                   
End


Proc pc_libmcl.mgeninfo:
    param          pc_libmcl.mgeninfo.s u64 
    param          pc_libmcl.mgeninfo.value i64 
    local          pc_libmcl.mgeninfo.str block:256 
    procentry                 
    setargs                   1 0
    push           &pc_libmcl.mgeninfo.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "# #"      u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           pc_libmcl.mgeninfo.s u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libmcl.mgeninfo.value i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           &pc_libmcl.mgeninfo.str 
    push           3          i64 
    callproc       &pc_libmcl.genmc_str 
#7983: 
    retproc                   
End


Proc pc_libmcl.mgeninfos:
    param          pc_libmcl.mgeninfos.s u64 
    param          pc_libmcl.mgeninfos.svalue u64 
    local          pc_libmcl.mgeninfos.str block:256 
    procentry                 
    setargs                   1 0
    push           &pc_libmcl.mgeninfos.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "# #"      u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           pc_libmcl.mgeninfos.s u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libmcl.mgeninfos.svalue u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           &pc_libmcl.mgeninfos.str 
    push           3          i64 
    callproc       &pc_libmcl.genmc_str 
#7985: 
    retproc                   
End


Proc pc_stackmcl.resetopnds1:
    local          pc_stackmcl.resetopnds1.av_1 i64 
    local          pc_stackmcl.resetopnds1.i i64 
    procentry                 
    push           pci_mcl.mstackdepth i64 
    jumpfalse      #7987      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "1:HW stack not empty" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.procdef u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "MSTACKDEPTH=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.mstackdepth i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           0          i64 
    pop            pci_mcl.mstackdepth i64 
#7987: 
    push           pci_mcl.noperands i64 
    jumpfalse      #7988      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "1:Reset:pcl stack not empty:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.procdef u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "NOPERANDS=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.noperands i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           0          i64 
    pop            pci_mcl.noperands i64 
#7988: 
#7989: 
    push           1          i64 
    pop            pc_stackmcl.resetopnds1.i i64 
    push           16         i64 
    pop            pc_stackmcl.resetopnds1.av_1 i64 
    push           pc_stackmcl.resetopnds1.av_1 i64 
    push           1          i64 
    jumplt         #7990      i64 
#7991: 
    push           &pci_mcl.regset 
    push           pc_stackmcl.resetopnds1.i i64 
    pushptroff                u8 1 -1
    jumptrue       #7992      i64 
    push           &pci_mcl.xregset 
    push           pc_stackmcl.resetopnds1.i i64 
    pushptroff                u8 1 -1
    jumpfalse      #7993      i64 
#7992: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Reset: reg flag set" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.procdef u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #7990      
#7993: 
#7994: 
    forup          #7991      i64 1
    opnd           pc_stackmcl.resetopnds1.i 
    opnd           pc_stackmcl.resetopnds1.av_1 
#7990: 
    push           pci_mcl.inf_proccalls i64 
    push           0          i64 
    jumpne         #7995      i64 
    push           1          i64 
    pop            pci_mcl.inf_leafproc i64 
#7995: 
    push           &pci_mcl.regset 
    clear                     block:16 
    push           &pci_mcl.xregset 
    clear                     block:16 
    push           &pci_mcl.isregvar 
    clear                     block:16 
    push           &pci_mcl.isxregvar 
    clear                     block:16 
    push           pc_decls.optimflag i64 
    jumptrue       #7996      i64 
    push           0          i64 
    pop            pci_mcl.inf_proccalls i64 
    push           0          i64 
    pop            pci_mcl.inf_maxargs i64 
    push           0          i64 
    pop            pci_mcl.inf_proclocals i64 
    push           0          i64 
    pop            pci_mcl.inf_procxlocals i64 
    push           0          i64 
    pop            pci_mcl.inf_leafproc i64 
    push           0          i64 
    store          pci_mcl.inf_highxreg i64 
    pop            pci_mcl.inf_highreg i64 
    push           0          i64 
    pop            pci_mcl.inf_assem i64 
    jump           #7997      
#7996: 
    push           0          i64 
    pop            pci_mcl.inf_proccalls i64 
    push           0          i64 
    pop            pci_mcl.inf_maxargs i64 
    push           0          i64 
    pop            pci_mcl.inf_proclocals i64 
    push           0          i64 
    pop            pci_mcl.inf_procxlocals i64 
#7997: 
#7998: 
    retproc                   
End


Proc pc_stackmcl.resetopnds2:
    local          pc_stackmcl.resetopnds2.av_1 i64 
    local          pc_stackmcl.resetopnds2.i i64 
    procentry                 
    push           pci_mcl.mstackdepth i64 
    jumpfalse      #8000      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "2:HW stack not empty" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.procdef u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "MSTACKDEPTH=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.mstackdepth i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#8000: 
    push           pci_mcl.noperands i64 
    jumpfalse      #8001      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "2:Reset:pcl stack not empty:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.procdef u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "NOPERANDS=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.noperands i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           0          i64 
    pop            pci_mcl.noperands i64 
#8001: 
#8002: 
    push           1          i64 
    pop            pc_stackmcl.resetopnds2.i i64 
    push           16         i64 
    pop            pc_stackmcl.resetopnds2.av_1 i64 
    push           pc_stackmcl.resetopnds2.av_1 i64 
    push           1          i64 
    jumplt         #8003      i64 
#8004: 
    push           &pci_mcl.regset 
    push           pc_stackmcl.resetopnds2.i i64 
    pushptroff                u8 1 -1
    jumptrue       #8005      i64 
    push           &pci_mcl.xregset 
    push           pc_stackmcl.resetopnds2.i i64 
    pushptroff                u8 1 -1
    jumpfalse      #8006      i64 
#8005: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "2:Reset: reg flag set" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pci_mcl.regnames 
    push           pc_stackmcl.resetopnds2.i i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.procdef u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #8003      
#8006: 
#8007: 
    forup          #8004      i64 1
    opnd           pc_stackmcl.resetopnds2.i 
    opnd           pc_stackmcl.resetopnds2.av_1 
#8003: 
    push           0          i64 
    pop            pci_mcl.inf_proccalls i64 
    push           0          i64 
    pop            pci_mcl.inf_maxargs i64 
    push           0          i64 
    pop            pci_mcl.inf_proclocals i64 
    push           0          i64 
    pop            pci_mcl.inf_procxlocals i64 
    push           0          i64 
    pop            pci_mcl.inf_leafproc i64 
    push           0          i64 
    store          pci_mcl.inf_highxreg i64 
    pop            pci_mcl.inf_highreg i64 
    push           0          i64 
    pop            pci_mcl.inf_assem i64 
    push           0          i64 
    store          pci_mcl.inf_r13used i64 
    store          pci_mcl.inf_r11used i64 
    pop            pci_mcl.inf_r10used i64 
    push           &pci_mcl.regset 
    clear                     block:16 
    push           &pci_mcl.xregset 
    clear                     block:16 
    push           &pci_mcl.isregvar 
    clear                     block:16 
    push           &pci_mcl.isxregvar 
    clear                     block:16 
#8008: 
    retproc                   
End


Proc pc_stackmcl.newopnd:
    param          pc_stackmcl.newopnd.fmt i64 
    procentry                 
    push           pci_mcl.noperands i64 
    push           200        i64 
    jumplt         #8010      i64 
    setargs                   2 0
    push           ""         u64 
    push           "PCL stack overflow" u64 
    callproc       &pc_libmcl.merror 
#8010: 
    push           &pci_mcl.noperands 
    incr                      i64 1
    push           pci_mcl.pclstack u64 
    push           0          i64 
    addrefoff                 block:15 15 -15
    pop            pci_mcl.pclstack u64 
    push           pci_mcl.pclstackzero block:15 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    popptroff                 block:15 15 -15
    push           pc_stackmcl.newopnd.fmt i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
    push           &pci_mcl.loccodes 
    push           pc_stackmcl.newopnd.fmt i64 
    pushptroff                u8 1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           1          
    popptroff                 u8 1 0
    push           0          i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    push           &pci_mcl.floatloc 
    push           pc_stackmcl.newopnd.fmt i64 
    pushptroff                u8 1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           3          
    popptroff                 u8 1 0
#8011: 
    retproc                   
End


Proc pc_stackmcl.duploperand:
    local          pc_stackmcl.duploperand.reg i64 
    procentry                 
    push           &pci_mcl.noperands 
    incr                      i64 1
    push           pci_mcl.pclstack u64 
    push           0          i64 
    addrefoff                 block:15 15 -15
    pop            pci_mcl.pclstack u64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    pushptroff                block:15 15 -15
    push           pci_mcl.pclstack u64 
    push           1          i64 
    popptroff                 block:15 15 -15
    push           &pci_mcl.loccodes 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u8 1 0
    push           4          i64 
    casejumpeq     #8013      i64 0
    push           5          i64 
    casejumpeq     #8014      i64 0
    push           7          i64 
    casejumpeq     #8015      i64 0
    push           1          i64 
    casejumpeq     #8016      i64 0
    push           2          i64 
    casejumpeq     #8017      i64 0
    push           3          i64 
    casejumpeq     #8018      i64 0
    popstack                  i64 
    jump           #8019      
#8013: 
    jump           #8020      
#8014: 
    jump           #8020      
#8015: 
    jump           #8020      
#8016: 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    pop            pc_stackmcl.duploperand.reg i64 
    push           pc_stackmcl.duploperand.reg i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.duploperand.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8020      
#8017: 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextxreg i64 
    pop            pc_stackmcl.duploperand.reg i64 
    push           pc_stackmcl.duploperand.reg i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.duploperand.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenxreg u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8020      
#8018: 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    pop            pc_stackmcl.duploperand.reg i64 
    setargs                   3 0
    push           pci_mcl.dstackopnd u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.duploperand.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.duploperand.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8020      
#8019: 
#8020: 
#8021: 
    retproc                   
End


Proc pc_stackmcl.addint:
    param          pc_stackmcl.addint.a i64 
    procentry                 
    setargs                   1 0
    push           7          i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addint.a i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    popptroff                 i64 1 0
#8023: 
    retproc                   
End


Proc pc_stackmcl.addint128:
    param          pc_stackmcl.addint128.p u64 
    procentry                 
    setargs                   1 0
    push           7          i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addint128.p u64 
    push           1          i64 
    pushptroff                i64 8 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    popptroff                 i64 1 0
    setargs                   1 0
    push           7          i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addint128.p u64 
    pushptr                   i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    popptroff                 i64 1 0
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.setwideopnd 
#8025: 
    retproc                   
End


Proc pc_stackmcl.addreal:
    param          pc_stackmcl.addreal.x r64 
    procentry                 
    setargs                   1 0
    push           8          i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addreal.x r64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    popptroff                 r64 1 0
#8027: 
    retproc                   
End


Proc pc_stackmcl.addreal32:
    param          pc_stackmcl.addreal32.x r64 
    procentry                 
    setargs                   1 0
    push           9          i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addreal32.x r64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    popptroff                 r64 1 0
#8029: 
    retproc                   
End


Proc pc_stackmcl.addstring:
    param          pc_stackmcl.addstring.s u64 
    procentry                 
    setargs                   1 0
    push           10         i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addstring.s u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    popptroff                 u64 1 0
#8031: 
    retproc                   
End


Proc pc_stackmcl.addmem:
    param          pc_stackmcl.addmem.p u64 
    local          pc_stackmcl.addmem.ax u64 
    local          pc_stackmcl.addmem.d u64 
    procentry                 
    push           pc_stackmcl.addmem.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_stackmcl.addmem.d u64 
    push           &pc_tables.pcat 
    push           pc_stackmcl.addmem.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8033      i64 0
    push           3          i64 
    casejumpeq     #8034      i64 0
    push           2          i64 
    casejumpeq     #8035      i64 0
    push           5          i64 
    casejumpeq     #8036      i64 0
    push           6          i64 
    casejumpeq     #8037      i64 0
    push           4          i64 
    casejumpeq     #8038      i64 0
    popstack                  i64 
    jump           #8039      
#8033: 
    push           pc_stackmcl.addmem.d u64 
    push           50         
    pushptroff                u8 1 0
    jumpfalse      #8040      i64 
    setargs                   1 0
    push           18         i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addmem.d u64 
    push           50         
    pushptroff                u8 1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    jump           #8041      
#8040: 
    setargs                   1 0
    push           14         i64 
    callproc       &pc_stackmcl.newopnd 
#8041: 
    jump           #8042      
#8034: 
    push           pc_stackmcl.addmem.d u64 
    push           50         
    pushptroff                u8 1 0
    jumpfalse      #8043      i64 
    setargs                   1 0
    push           19         i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addmem.d u64 
    push           50         
    pushptroff                u8 1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    jump           #8044      
#8043: 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_stackmcl.newopnd 
#8044: 
    jump           #8042      
#8035: 
    setargs                   1 0
    push           16         i64 
    callproc       &pc_stackmcl.newopnd 
    jump           #8042      
#8036: 
    setargs                   1 0
    push           17         i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addmem.d u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    popptroff                 u64 1 0
    push           72         i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           4          
    popptroff                 u8 1 0
    setargs                   1 0
    push           14         i64 
    callproc       &pc_stackmcl.newopnd 
    push           76         i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           4          
    popptroff                 u8 1 0
    jump           #8042      
#8037: 
    setargs                   1 0
    push           11         i64 
    callproc       &pc_stackmcl.newopnd 
    jump           #8042      
#8038: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_d64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_stackmcl.addmem.ax u64 
    setargs                   3 0
    setargs                   1 0
    push           pc_stackmcl.addmem.d u64 
    callfn         &pc_libmcl.mgenmem u64 
    push           pc_stackmcl.addmem.ax u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_stackmcl.addmem.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #8045      i64 
    push           19         i64 
    resetmult                 
    jump           #8046      
#8045: 
    push           20         i64 
    endmult                   
#8046: 
    callproc       &pc_libmcl.genmc 
    jump           #8047      
    jump           #8042      
#8039: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_d64 
    setargs                   2 0
    push           ""         u64 
    push           "ADDMEM?"  u64 
    callproc       &pc_libmcl.merror 
#8042: 
    push           pc_stackmcl.addmem.d u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    popptroff                 u64 1 0
#8047: 
    retproc                   
End


Proc pc_stackmcl.addmemaddr:
    param          pc_stackmcl.addmemaddr.d u64 
    procentry                 
    setargs                   1 0
    push           11         i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addmemaddr.d u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    popptroff                 u64 1 0
#8049: 
    retproc                   
End


Proc pc_stackmcl.addlabeladdr:
    param          pc_stackmcl.addlabeladdr.lab i64 
    procentry                 
    setargs                   1 0
    push           13         i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addlabeladdr.lab i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    popptroff                 i64 1 0
#8051: 
    retproc                   
End


Proc pc_stackmcl.addlabel:
    param          pc_stackmcl.addlabel.lab i64 
    param          pc_stackmcl.addlabel.offset i64 
    procentry                 
    setargs                   1 0
    push           12         i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addlabel.lab i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    popptroff                 i64 1 0
    push           pc_stackmcl.addlabel.offset i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           5          
    popptroff                 i16 1 0
#8053: 
    retproc                   
End


Proc pc_stackmcl.addreg0:
    param          pc_stackmcl.addreg0.reg i64 
    procentry                 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addreg0.reg i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    push           &pci_mcl.regset 
    push           pc_stackmcl.addreg0.reg i64 
    pushptroff                u8 1 -1
    jumpfalse      #8055      i64 
    setargs                   2 0
    push           ""         u64 
    push           "addreg0/reg in use" u64 
    callproc       &pc_libmcl.merror 
#8055: 
    push           1          i64 
    push           &pci_mcl.regset 
    push           pc_stackmcl.addreg0.reg i64 
    popptroff                 u8 1 -1
#8056: 
    retproc                   
End


Proc pc_stackmcl.addwidereg0:
    param          pc_stackmcl.addwidereg0.reg i64 
    local          pc_stackmcl.addwidereg0.reg2 i64 
    procentry                 
    push           pc_stackmcl.addwidereg0.reg i64 
    push           1          i64 
    add                       i64 
    pop            pc_stackmcl.addwidereg0.reg2 i64 
    push           pc_stackmcl.addwidereg0.reg2 i64 
    push           4          i64 
    jumpne         #8058      i64 
    push           11         i64 
    pop            pc_stackmcl.addwidereg0.reg2 i64 
#8058: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.newopnd 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addwidereg0.reg2 i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    push           pc_stackmcl.addwidereg0.reg i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    push           &pci_mcl.regset 
    push           pc_stackmcl.addwidereg0.reg i64 
    pushptroff                u8 1 -1
    jumpfalse      #8059      i64 
    setargs                   2 0
    push           ""         u64 
    push           "addwidereg/reg(s) in use" u64 
    callproc       &pc_libmcl.merror 
#8059: 
    push           1          i64 
    push           &pci_mcl.regset 
    push           pc_stackmcl.addwidereg0.reg i64 
    popptroff                 u8 1 -1
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.setwideopnd 
#8060: 
    retproc                   
End


Proc pc_stackmcl.addxreg0:
    param          pc_stackmcl.addxreg0.reg i64 
    param          pc_stackmcl.addxreg0.fmt i64 
    procentry                 
    setargs                   1 0
    push           pc_stackmcl.addxreg0.fmt i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addxreg0.reg i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    push           &pci_mcl.xregset 
    push           pc_stackmcl.addxreg0.reg i64 
    pushptroff                u8 1 -1
    jumpfalse      #8062      i64 
    setargs                   2 0
    push           ""         u64 
    push           "addxreg0/reg in use" u64 
    callproc       &pc_libmcl.merror 
#8062: 
    push           1          i64 
    push           &pci_mcl.xregset 
    push           pc_stackmcl.addxreg0.reg i64 
    popptroff                 u8 1 -1
#8063: 
    retproc                   
End


Proc pc_stackmcl.addreg_d64:
    procentry                 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.newopnd 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
#8065: 
    retproc                   
End


Proc pc_stackmcl.addreg_x64:
    procentry                 
    setargs                   1 0
    push           2          i64 
    callproc       &pc_stackmcl.newopnd 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextxreg i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
#8067: 
    retproc                   
End


Proc pc_stackmcl.addreg_x32:
    procentry                 
    setargs                   1 0
    push           3          i64 
    callproc       &pc_stackmcl.newopnd 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextxreg i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
#8069: 
    retproc                   
End


Proc pc_stackmcl.stropndstack: u64
    param          pc_stackmcl.stropndstack.indent i64 
    local          pc_stackmcl.stropndstack.str2 block:512 
    local          pc_stackmcl.stropndstack.s u64 
    local          pc_stackmcl.stropndstack.t u64 
    local          pc_stackmcl.stropndstack.pc block:15 
    local          pc_stackmcl.stropndstack.i i64 
    local          pc_stackmcl.stropndstack.r i64 
    procentry                 
    push           &pc_stackmcl.stropndstack.str 
    pop            pc_stackmcl.stropndstack.s u64 
    push           pc_stackmcl.stropndstack.indent i64 
    jumpfalse      #8071      i64 
    setargs                   1 0
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "                                     (" u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #8072      
#8071: 
    setargs                   1 0
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "("        u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#8072: 
#8073: 
    push           pci_mcl.noperands i64 
    pop            pc_stackmcl.stropndstack.i i64 
    push           pc_stackmcl.stropndstack.i i64 
    push           1          i64 
    jumplt         #8074      i64 
#8075: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.stropndstack.i i64 
    pushptroff                block:15 15 -15
    pop            pc_stackmcl.stropndstack.pc block:15 
    push           &pc_stackmcl.stropndstack.pc 
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8076      i64 0
    push           7          i64 
    casejumpeq     #8077      i64 0
    push           2          i64 
    casejumpeq     #8078      i64 0
    push           8          i64 
    casejumpeq     #8079      i64 0
    push           3          i64 
    casejumpeq     #8080      i64 0
    push           5          i64 
    casejumpeq     #8081      i64 0
    popstack                  i64 
    jump           #8082      
#8076: 
    setargs                   2 0
    push           &pci_mcl.regnames 
    push           &pc_stackmcl.stropndstack.pc 
    push           2          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #8083      
#8077: 
    setargs                   2 0
    push           &pci_mcl.regnames 
    push           &pc_stackmcl.stropndstack.pc 
    push           2          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           "="        u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           &pc_stackmcl.stropndstack.pc 
    push           7          
    pushptroff                u64 1 0
    pushptr                   u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #8083      
#8078: 
    setargs                   2 0
    push           &pci_mcl.xregnames 
    push           &pc_stackmcl.stropndstack.pc 
    push           2          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           ":"        u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           &pci_mcl.fmtnames 
    push           &pc_stackmcl.stropndstack.pc 
    pushptr                   u8 
    pushptroff                u64 8 0
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #8083      
#8079: 
    setargs                   2 0
    push           &pci_mcl.xregnames 
    push           &pc_stackmcl.stropndstack.pc 
    push           2          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           "="        u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           &pc_stackmcl.stropndstack.pc 
    push           7          
    pushptroff                u64 1 0
    pushptr                   u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #8083      
#8080: 
    setargs                   2 0
    push           "T"        u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #8083      
#8081: 
    setargs                   2 0
    push           "M:"       u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           &pc_stackmcl.stropndstack.pc 
    push           7          
    pushptroff                u64 1 0
    pushptr                   u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #8083      
#8082: 
    push           &pc_stackmcl.stropndstack.pc 
    pushptr                   u8 
    push           7          i64 
    casejumpeq     #8084      i64 0
    push           8          i64 
    casejumpeq     #8085      i64 0
    push           10         i64 
    casejumpeq     #8086      i64 0
    push           11         i64 
    casejumpeq     #8087      i64 0
    push           13         i64 
    casejumpeq     #8088      i64 0
    push           12         i64 
    casejumpeq     #8089      i64 0
    popstack                  i64 
    jump           #8090      
#8084: 
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           &pc_stackmcl.stropndstack.pc 
    push           7          
    pushptroff                i64 1 0
    callfn         &msysp.strint u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #8091      
#8085: 
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           &pc_stackmcl.stropndstack.pc 
    push           7          
    pushptroff                r64 1 0
    callfn         &msysp.strreal u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #8091      
#8086: 
    push           &pc_stackmcl.stropndstack.pc 
    push           7          
    pushptroff                u64 1 0
    pop            pc_stackmcl.stropndstack.t u64 
    setargs                   1 0
    push           pc_stackmcl.stropndstack.t u64 
    callfn         &strlen    i64 
    push           20         i64 
    jumple         #8092      i64 
    setargs                   2 0
    push           "LONG STR" u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #8093      
#8092: 
    setargs                   2 0
    push           "\""       u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           pc_stackmcl.stropndstack.s u64 
    setargs                   1 0
    push           pc_stackmcl.stropndstack.s u64 
    callfn         &strlen    i64 
    addrefoff                 u64 1 0
    push           pc_stackmcl.stropndstack.t u64 
    callproc       &pc_libpcl.convertstring 
    setargs                   2 0
    push           "\""       u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
#8093: 
    jump           #8091      
#8087: 
    setargs                   2 0
    push           "&"        u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           &pc_stackmcl.stropndstack.pc 
    push           7          
    pushptroff                u64 1 0
    pushptr                   u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #8091      
#8088: 
    setargs                   2 0
    push           "&#"       u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           &pc_stackmcl.stropndstack.pc 
    push           7          
    pushptroff                i64 1 0
    callfn         &msysp.strint u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #8091      
#8089: 
    setargs                   2 0
    push           "#"        u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           &pc_stackmcl.stropndstack.pc 
    push           7          
    pushptroff                i64 1 0
    callfn         &msysp.strint u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #8091      
#8090: 
    setargs                   2 0
    push           &pci_mcl.fmtnames 
    push           &pc_stackmcl.stropndstack.pc 
    pushptr                   u8 
    pushptroff                u64 8 0
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
#8091: 
#8083: 
    push           &pc_stackmcl.stropndstack.pc 
    push           4          
    pushptroff                u8 1 0
    jumpfalse      #8094      i64 
    setargs                   2 0
    startmult                 
    push           &pc_stackmcl.stropndstack.pc 
    push           4          
    pushptroff                u8 1 0
    push           72         i64 
    jumpne         #8095      i64 
    push           "(H)"      u64 
    resetmult                 
    jump           #8096      
#8095: 
    push           "(L)"      u64 
    endmult                   
#8096: 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
#8094: 
    push           pc_stackmcl.stropndstack.i i64 
    push           1          i64 
    jumple         #8097      i64 
    setargs                   2 0
    push           ","        u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
#8097: 
#8098: 
    fordown        #8075      i64 1
    opnd           pc_stackmcl.stropndstack.i 
    opnd           1          
#8074: 
    setargs                   2 0
    push           ") ("      u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
#8099: 
    push           1          i64 
    pop            pc_stackmcl.stropndstack.r i64 
#8100: 
    setargs                   2 0
    startmult                 
    push           &pci_mcl.regset 
    push           pc_stackmcl.stropndstack.r i64 
    pushptroff                u8 1 -1
    jumpfalse      #8101      i64 
    push           "1 "       u64 
    resetmult                 
    jump           #8102      
#8101: 
    push           "0 "       u64 
    endmult                   
#8102: 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
#8103: 
    forup          #8100      i64 1
    opnd           pc_stackmcl.stropndstack.r 
    opnd           10         
#8104: 
    setargs                   2 0
    push           ") ("      u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
#8105: 
    push           1          i64 
    pop            pc_stackmcl.stropndstack.r i64 
#8106: 
    setargs                   2 0
    startmult                 
    push           &pci_mcl.xregset 
    push           pc_stackmcl.stropndstack.r i64 
    pushptroff                u8 1 -1
    jumpfalse      #8107      i64 
    push           "1 "       u64 
    resetmult                 
    jump           #8108      
#8107: 
    push           "0 "       u64 
    endmult                   
#8108: 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
#8109: 
    forup          #8106      i64 1
    opnd           pc_stackmcl.stropndstack.r 
    opnd           7          
#8110: 
    setargs                   2 0
    push           ") hwstack:" u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pci_mcl.mstackdepth i64 
    callfn         &msysp.strint u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           " noperands:" u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pci_mcl.noperands i64 
    callfn         &msysp.strint u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           " ncalldepth:" u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pci_mcl.ncalldepth i64 
    callfn         &msysp.strint u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           " callslots[]:" u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           &pci_mcl.callslots 
    push           pci_mcl.ncalldepth i64 
    pushptroff                i64 8 -8
    callfn         &msysp.strint u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    push           pc_stackmcl.stropndstack.s u64 
    setret                    u64 
    jump           #8111      
#8111: 
    retfn                     u64 
End


Proc pc_stackmcl.loadopnd:
    param          pc_stackmcl.loadopnd.n i64 
    param          pc_stackmcl.loadopnd.nvreg i64 
    local          pc_stackmcl.loadopnd.reg i64 
    local          pc_stackmcl.loadopnd.value i64 
    local          pc_stackmcl.loadopnd.ax u64 
    procentry                 
    push           pc_stackmcl.loadopnd.n i64 
    push           pci_mcl.noperands i64 
    jumple         #8113      i64 
    setargs                   1 0
    push           "UNDERFLOW" u64 
    callproc       &pc_libmcl.mgencomment 
    jump           #8114      
    setargs                   2 0
    push           ""         u64 
    push           "loadopnd/underflow" u64 
    callproc       &pc_libmcl.merror 
#8113: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8115      i64 
    jump           #8114      
#8115: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #8116      i64 
    jump           #8114      
#8116: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           3          
    pushptroff                u8 1 0
    jumpfalse      #8117      i64 
    setargs                   1 0
    push           pc_stackmcl.loadopnd.nvreg i64 
    callfn         &pc_stackmcl.getnextxreg i64 
    pop            pc_stackmcl.loadopnd.reg i64 
    jump           #8118      
#8117: 
    setargs                   1 0
    push           pc_stackmcl.loadopnd.nvreg i64 
    callfn         &pc_stackmcl.getnextreg i64 
    pop            pc_stackmcl.loadopnd.reg i64 
#8118: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           2          i64 
    casejumpeq     #8119      i64 0
    popstack                  i64 
    jump           #8120      
#8119: 
    setargs                   2 0
    push           ""         u64 
    push           "LOADOPND/XREG" u64 
    callproc       &pc_libmcl.merror 
    jump           #8121      
#8120: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    casejumpeq     #8122      i64 0
    push           8          i64 
    casejumpeq     #8123      i64 0
    push           9          i64 
    casejumpeq     #8124      i64 0
    push           10         i64 
    casejumpeq     #8125      i64 0
    push           13         i64 
    casejumpeq     #8126      i64 0
    push           12         i64 
    casejumpeq     #8127      i64 0
    push           14         i64 
    casejumpeq     #8128      i64 0
    push           15         i64 
    casejumpeq     #8129      i64 0
    push           16         i64 
    casejumpeq     #8130      i64 0
    push           17         i64 
    casejumpeq     #8131      i64 0
    push           18         i64 
    casejumpeq     #8132      i64 0
    push           19         i64 
    casejumpeq     #8133      i64 0
    push           4          i64 
    casejumpeq     #8134      i64 0
    push           5          i64 
    casejumpeq     #8135      i64 0
    push           6          i64 
    casejumpeq     #8136      i64 0
    push           11         i64 
    casejumpeq     #8137      i64 0
    popstack                  i64 
    jump           #8138      
#8122: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    pop            pc_stackmcl.loadopnd.value i64 
    push           pc_stackmcl.loadopnd.value i64 
    push           0          i64 
    jumpne         #8139      i64 
    push           pci_mcl.noxorclear u8 
    jumptrue       #8139      i64 
    setargs                   2 0
    push           4          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_stackmcl.loadopnd.ax u64 
    setargs                   3 0
    push           pc_stackmcl.loadopnd.ax u64 
    push           pc_stackmcl.loadopnd.ax u64 
    push           41         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8140      
#8139: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenint u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
#8140: 
    jump           #8141      
#8123: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                r64 1 0
    callfn         &pc_libmcl.mgenrealmem u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenxreg u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8141      
#8124: 
    setargs                   3 0
    setargs                   2 0
    push           4          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                r64 1 0
    callfn         &pc_libmcl.mgenrealmem u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenxreg u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8141      
#8125: 
    setargs                   3 0
    setargs                   1 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.getstringindex i64 
    callfn         &pc_libmcl.mgenlabel u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8141      
#8126: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8141      
#8127: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabelmem u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           5          
    pushptroff                i16 1 0
    push           pci_mcl.mccodex u64 
    push           16         
    pushptroff                u64 1 0
    push           14         
    popptroff                 i32 1 0
    jump           #8141      
#8128: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8141      
#8129: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenxreg u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8141      
#8130: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenxreg u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8141      
#8131: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmemhigh u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8141      
#8132: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenregvar u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8141      
#8133: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenxregvar u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenxreg u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8141      
#8134: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           14         i64 
    callproc       &pc_libmcl.genmc 
    push           &pci_mcl.mstackdepth 
    decr                      i64 1
    jump           #8141      
#8135: 
    push           pci_mcl.inf_r13used i64 
    jumpfalse      #8142      i64 
    setargs                   2 0
    push           ""         u64 
    push           "R13 in use" u64 
    callproc       &pc_libmcl.merror 
#8142: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           14         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           14         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           14         i64 
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenxreg u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    push           &pci_mcl.mstackdepth 
    decr                      i64 1
    jump           #8141      
#8136: 
    push           pci_mcl.inf_r13used i64 
    jumpfalse      #8143      i64 
    setargs                   2 0
    push           ""         u64 
    push           "R13 in use" u64 
    callproc       &pc_libmcl.merror 
#8143: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           14         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           14         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           4          i64 
    push           14         i64 
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenxreg u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    push           &pci_mcl.mstackdepth 
    decr                      i64 1
    jump           #8141      
#8137: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           15         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8141      
#8138: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.stropndstack u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           &pci_mcl.fmtnames 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u64 8 0
    push           "LOADOPND??" u64 
    callproc       &pc_libmcl.merror 
#8141: 
#8121: 
    push           pc_stackmcl.loadopnd.reg i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    push           &pci_mcl.loadfmt 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u8 1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
    push           &pci_mcl.loccodes 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u8 1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           1          
    popptroff                 u8 1 0
#8114: 
    retproc                   
End


Proc pc_stackmcl.loadparam:
    param          pc_stackmcl.loadparam.n i64 
    param          pc_stackmcl.loadparam.reg i64 
    local          pc_stackmcl.loadparam.oldreg i64 
    local          pc_stackmcl.loadparam.value i64 
    local          pc_stackmcl.loadparam.ax u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadparam.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_stackmcl.loadparam.ax u64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_stackmcl.loadparam.oldreg i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           1          i64 
    casejumpeq     #8145      i64 0
    push           18         i64 
    casejumpeq     #8145      i64 0
    push           2          i64 
    casejumpeq     #8146      i64 0
    push           19         i64 
    casejumpeq     #8146      i64 0
    push           3          i64 
    casejumpeq     #8147      i64 0
    push           7          i64 
    casejumpeq     #8148      i64 0
    push           8          i64 
    casejumpeq     #8149      i64 0
    push           10         i64 
    casejumpeq     #8150      i64 0
    push           14         i64 
    casejumpeq     #8151      i64 0
    push           17         i64 
    casejumpeq     #8152      i64 0
    push           11         i64 
    casejumpeq     #8153      i64 0
    push           15         i64 
    casejumpeq     #8154      i64 0
    push           4          i64 
    casejumpeq     #8155      i64 0
    popstack                  i64 
    jump           #8156      
#8145: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadparam.oldreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           pc_stackmcl.loadparam.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_stackmcl.loadparam.oldreg i64 
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_stackmcl.loadparam.oldreg i64 
    popptroff                 u8 1 -1
    jump           #8157      
#8146: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadparam.oldreg i64 
    callfn         &pc_libmcl.mgenxreg u64 
    push           pc_stackmcl.loadparam.ax u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8158      
    jump           #8157      
#8147: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadparam.oldreg i64 
    callfn         &pc_libmcl.mgenxreg u64 
    setargs                   2 0
    push           4          i64 
    push           pc_stackmcl.loadparam.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8158      
    jump           #8157      
#8148: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    pop            pc_stackmcl.loadparam.value i64 
    push           pc_stackmcl.loadparam.value i64 
    push           0          i64 
    jumpne         #8159      i64 
    setargs                   2 0
    push           4          i64 
    push           pc_stackmcl.loadparam.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_stackmcl.loadparam.ax u64 
    setargs                   3 0
    push           pc_stackmcl.loadparam.ax u64 
    push           pc_stackmcl.loadparam.ax u64 
    push           41         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8160      
#8159: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenint u64 
    push           pc_stackmcl.loadparam.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
#8160: 
    jump           #8157      
#8149: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                r64 1 0
    callfn         &pc_libmcl.mgenrealmem u64 
    push           pc_stackmcl.loadparam.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8157      
#8150: 
    setargs                   3 0
    setargs                   1 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.getstringindex i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           pc_stackmcl.loadparam.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8157      
#8151: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           pc_stackmcl.loadparam.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8157      
#8152: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmemhigh u64 
    push           pc_stackmcl.loadparam.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8157      
#8153: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           pc_stackmcl.loadparam.ax u64 
    push           15         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8157      
#8154: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           pc_stackmcl.loadparam.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8157      
#8155: 
    setargs                   3 0
    push           0          u64 
    push           pc_stackmcl.loadparam.ax u64 
    push           14         i64 
    callproc       &pc_libmcl.genmc 
    push           &pci_mcl.mstackdepth 
    decr                      i64 1
    jump           #8157      
#8156: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "LOADPARAM:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pci_mcl.fmtnames 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "****LOADPARAM??" u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   2 0
    push           &pci_mcl.fmtnames 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u64 8 0
    push           "LOADPARAM??" u64 
    callproc       &pc_libmcl.merror 
#8157: 
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    push           1          
    popptroff                 u8 1 0
    push           pc_stackmcl.loadparam.reg i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
#8158: 
    retproc                   
End


Proc pc_stackmcl.loadxparam:
    param          pc_stackmcl.loadxparam.n i64 
    param          pc_stackmcl.loadxparam.reg i64 
    local          pc_stackmcl.loadxparam.ax u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadxparam.reg i64 
    callfn         &pc_libmcl.mgenxreg u64 
    pop            pc_stackmcl.loadxparam.ax u64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadxparam.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           1          i64 
    casejumpeq     #8162      i64 0
    push           18         i64 
    casejumpeq     #8162      i64 0
    push           2          i64 
    casejumpeq     #8163      i64 0
    push           19         i64 
    casejumpeq     #8163      i64 0
    push           3          i64 
    casejumpeq     #8164      i64 0
    push           8          i64 
    casejumpeq     #8165      i64 0
    push           9          i64 
    casejumpeq     #8166      i64 0
    push           14         i64 
    casejumpeq     #8167      i64 0
    push           15         i64 
    casejumpeq     #8167      i64 0
    push           16         i64 
    casejumpeq     #8168      i64 0
    popstack                  i64 
    jump           #8169      
#8162: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadxparam.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    push           pc_stackmcl.loadxparam.ax u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8170      
#8163: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadxparam.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenxreg u64 
    push           pc_stackmcl.loadxparam.ax u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8170      
#8164: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadxparam.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenxreg u64 
    push           pc_stackmcl.loadxparam.ax u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8170      
#8165: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadxparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                r64 1 0
    callfn         &pc_libmcl.mgenrealmem u64 
    push           pc_stackmcl.loadxparam.ax u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8170      
#8166: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadxparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                r64 1 0
    callfn         &pc_libmcl.mgenrealmem u64 
    push           pc_stackmcl.loadxparam.ax u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8170      
#8167: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadxparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           pc_stackmcl.loadxparam.ax u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8170      
#8168: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadxparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           pc_stackmcl.loadxparam.ax u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8170      
#8169: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "??LOADXPARAM" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_stackmcl.loadxparam.n i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           pci_mcl.noperands i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "****LOADXPARAM??" u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   2 0
    push           &pci_mcl.fmtnames 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadxparam.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u64 8 0
    push           "LOADXPARAM??" u64 
    callproc       &pc_libmcl.merror 
#8170: 
#8171: 
    retproc                   
End


Proc pc_stackmcl.genopnd: u64
    param          pc_stackmcl.genopnd.index i64 
    param          pc_stackmcl.genopnd.size i64 
    local          pc_stackmcl.genopnd.ax u64 
    local          pc_stackmcl.genopnd.reg i64 
    local          pc_stackmcl.genopnd.value i64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8173      i64 0
    push           7          i64 
    casejumpeq     #8174      i64 0
    push           2          i64 
    casejumpeq     #8175      i64 0
    push           8          i64 
    casejumpeq     #8176      i64 0
    popstack                  i64 
    jump           #8177      
#8173: 
    setargs                   2 0
    push           pc_stackmcl.genopnd.size i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    setret                    u64 
    jump           #8178      
    jump           #8179      
#8174: 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenregvar u64 
    setret                    u64 
    jump           #8178      
    jump           #8179      
#8175: 
    setargs                   2 0
    push           pc_stackmcl.genopnd.size i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenxreg u64 
    setret                    u64 
    jump           #8178      
    jump           #8179      
#8176: 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenxregvar u64 
    setret                    u64 
    jump           #8178      
    jump           #8179      
#8177: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           14         i64 
    casejumpeq     #8180      i64 0
    push           15         i64 
    casejumpeq     #8180      i64 0
    push           16         i64 
    casejumpeq     #8180      i64 0
    push           17         i64 
    casejumpeq     #8181      i64 0
    push           7          i64 
    casejumpeq     #8182      i64 0
    push           8          i64 
    casejumpeq     #8183      i64 0
    push           9          i64 
    casejumpeq     #8184      i64 0
    push           11         i64 
    casejumpeq     #8185      i64 0
    push           10         i64 
    casejumpeq     #8186      i64 0
    popstack                  i64 
    jump           #8187      
#8180: 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    setret                    u64 
    jump           #8178      
    jump           #8188      
#8181: 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmemhigh u64 
    setret                    u64 
    jump           #8178      
    jump           #8188      
#8182: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    pop            pc_stackmcl.genopnd.value i64 
    push           -2147483648 i64 
    push           pc_stackmcl.genopnd.value i64 
    jumpgt         #8189      i64 
    push           pc_stackmcl.genopnd.value i64 
    push           2147483647 i64 
    jumpgt         #8189      i64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.genopnd.value i64 
    callfn         &pc_libmcl.mgenint u64 
    setret                    u64 
    jump           #8178      
#8189: 
    setargs                   2 0
    push           8          i64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_stackmcl.genopnd.ax u64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.genopnd.value i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_stackmcl.genopnd.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_stackmcl.genopnd.ax u64 
    push           10         
    pushptroff                u8 1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           1          
    popptroff                 u8 1 0
    push           pc_stackmcl.genopnd.ax u64 
    setret                    u64 
    jump           #8178      
    jump           #8188      
#8183: 
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                r64 1 0
    callfn         &pc_libmcl.mgenrealmem u64 
    setret                    u64 
    jump           #8178      
    jump           #8188      
#8184: 
    setargs                   2 0
    push           4          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                r64 1 0
    callfn         &pc_libmcl.mgenrealmem u64 
    setret                    u64 
    jump           #8178      
    jump           #8188      
#8185: 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    pop            pc_stackmcl.genopnd.reg i64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.genopnd.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_stackmcl.genopnd.ax u64 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           pc_stackmcl.genopnd.ax u64 
    push           15         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_stackmcl.genopnd.ax u64 
    push           10         
    pushptroff                u8 1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           1          
    popptroff                 u8 1 0
    push           pc_stackmcl.genopnd.ax u64 
    setret                    u64 
    jump           #8178      
    jump           #8188      
#8186: 
    setargs                   3 0
    setargs                   1 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.getstringindex i64 
    callfn         &pc_libmcl.mgenlabel u64 
    setargs                   2 0
    push           8          i64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    store          pc_stackmcl.genopnd.ax u64 
    push           15         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_stackmcl.genopnd.ax u64 
    push           10         
    pushptroff                u8 1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           1          
    popptroff                 u8 1 0
    push           pc_stackmcl.genopnd.ax u64 
    setret                    u64 
    jump           #8178      
    jump           #8188      
#8187: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "LOCNAMES[PCLSTACK[INDEX].LOC]=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pci_mcl.locnames 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "FMTNAMES[PCLSTACK[INDEX].FMT]=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pci_mcl.fmtnames 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "GENOPND??" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "****GENOPND??" u64 
    callproc       &pc_libmcl.mgencomment 
#8188: 
#8179: 
    push           0          u64 
    setret                    u64 
    jump           #8178      
#8178: 
    retfn                     u64 
End


Proc pc_stackmcl.genopnd_ld: u64
    param          pc_stackmcl.genopnd_ld.index i64 
    param          pc_stackmcl.genopnd_ld.size i64 
    procentry                 
    setargs                   2 0
    push           0          i64 
    push           pc_stackmcl.genopnd_ld.index i64 
    callproc       &pc_stackmcl.loadopnd 
    setargs                   2 0
    push           pc_stackmcl.genopnd_ld.size i64 
    push           pc_stackmcl.genopnd_ld.index i64 
    callfn         &pc_stackmcl.genopnd u64 
    setret                    u64 
    jump           #8191      
#8191: 
    retfn                     u64 
End


Proc pc_stackmcl.genopnd_ind: u64
    param          pc_stackmcl.genopnd_ind.index i64 
    param          pc_stackmcl.genopnd_ind.size i64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd_ind.index i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8193      i64 0
    popstack                  i64 
    jump           #8194      
#8193: 
    setargs                   3 0
    push           0          i64 
    push           pc_stackmcl.genopnd_ind.size i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd_ind.index i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenireg u64 
    setret                    u64 
    jump           #8195      
    setargs                   3 0
    push           0          i64 
    push           pc_stackmcl.genopnd_ind.size i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd_ind.index i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenireg u64 
    setret                    u64 
    jump           #8195      
    setargs                   3 0
    push           0          i64 
    push           pc_stackmcl.genopnd_ind.size i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd_ind.index i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenireg u64 
    setret                    u64 
    jump           #8195      
    jump           #8196      
#8194: 
#8196: 
    setargs                   2 0
    push           0          i64 
    push           pc_stackmcl.genopnd_ind.index i64 
    callproc       &pc_stackmcl.loadopnd 
    setargs                   2 0
    push           pc_stackmcl.genopnd_ind.size i64 
    push           pc_stackmcl.genopnd_ind.index i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    setret                    u64 
    jump           #8195      
#8195: 
    retfn                     u64 
End


Proc pc_stackmcl.genopnd_d64: u64
    procentry                 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_d64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    setret                    u64 
    jump           #8198      
#8198: 
    retfn                     u64 
End


Proc pc_stackmcl.setwideopnd:
    param          pc_stackmcl.setwideopnd.n i64 
    procentry                 
    push           76         i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.setwideopnd.n i64 
    addrefoff                 block:15 15 -15
    push           4          
    popptroff                 u8 1 0
    push           72         i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.setwideopnd.n i64 
    addrefoff                 block:15 15 0
    push           4          
    popptroff                 u8 1 0
#8200: 
    retproc                   
End


Proc pc_stackmcl.unsetwideopnd:
    param          pc_stackmcl.unsetwideopnd.n i64 
    procentry                 
    push           0          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.unsetwideopnd.n i64 
    addrefoff                 block:15 15 -15
    push           4          
    popptroff                 u8 1 0
#8202: 
    retproc                   
End


Proc pc_stackmcl.getnextreg: i64
    param          pc_stackmcl.getnextreg.nvreg i64 
    local          pc_stackmcl.getnextreg.reg i64 
    local          pc_stackmcl.getnextreg.firstreg i64 
    local          pc_stackmcl.getnextreg.r i64 
    local          pc_stackmcl.getnextreg.i i64 
    procentry                 
    startmult                 
    push           pc_stackmcl.getnextreg.nvreg i64 
    jumpfalse      #8204      i64 
    push           4          i64 
    resetmult                 
    jump           #8205      
#8204: 
    push           1          i64 
    endmult                   
#8205: 
    pop            pc_stackmcl.getnextreg.firstreg i64 
#8206: 
    push           pc_stackmcl.getnextreg.firstreg i64 
    pop            pc_stackmcl.getnextreg.r i64 
    push           pc_stackmcl.getnextreg.r i64 
    push           10         i64 
    jumpgt         #8207      i64 
#8208: 
    push           &pci_mcl.regset 
    push           pc_stackmcl.getnextreg.r i64 
    pushptroff                u8 1 -1
    push           0          i64 
    jumpne         #8209      i64 
    push           1          i64 
    push           &pci_mcl.regset 
    push           pc_stackmcl.getnextreg.r i64 
    popptroff                 u8 1 -1
    push           &pci_mcl.inf_highreg 
    push           pc_stackmcl.getnextreg.r i64 
    maxto                     i64 
    push           pc_stackmcl.getnextreg.r i64 
    setret                    i64 
    jump           #8210      
#8209: 
#8211: 
    forup          #8208      i64 1
    opnd           pc_stackmcl.getnextreg.r 
    opnd           10         
#8207: 
#8212: 
    push           pci_mcl.noperands i64 
    pop            pc_stackmcl.getnextreg.i i64 
    push           pc_stackmcl.getnextreg.i i64 
    push           1          i64 
    jumplt         #8213      i64 
#8214: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.getnextreg.i i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8215      i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.getnextreg.i i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_stackmcl.getnextreg.reg i64 
    push           pc_stackmcl.getnextreg.reg i64 
    push           pc_stackmcl.getnextreg.firstreg i64 
    jumplt         #8216      i64 
    setargs                   1 0
    push           pc_stackmcl.getnextreg.i i64 
    callproc       &pc_stackmcl.pushopnd 
    setargs                   1 0
    push           pc_stackmcl.getnextreg.nvreg i64 
    callfn         &pc_stackmcl.getnextreg i64 
    setret                    i64 
    jump           #8210      
#8216: 
#8215: 
#8217: 
    fordown        #8214      i64 1
    opnd           pc_stackmcl.getnextreg.i 
    opnd           1          
#8213: 
    setargs                   2 0
    push           ""         u64 
    push           "NO FREE REGS" u64 
    callproc       &pc_libmcl.merror 
    push           0          i64 
    setret                    i64 
    jump           #8210      
#8210: 
    retfn                     i64 
End


Proc pc_stackmcl.getnextxreg: i64
    param          pc_stackmcl.getnextxreg.nvreg i64 
    local          pc_stackmcl.getnextxreg.reg i64 
    local          pc_stackmcl.getnextxreg.firstreg i64 
    local          pc_stackmcl.getnextxreg.r i64 
    local          pc_stackmcl.getnextxreg.i i64 
    procentry                 
    startmult                 
    push           pc_stackmcl.getnextxreg.nvreg i64 
    jumpfalse      #8219      i64 
    push           7          i64 
    resetmult                 
    jump           #8220      
#8219: 
    push           5          i64 
    endmult                   
#8220: 
    pop            pc_stackmcl.getnextxreg.firstreg i64 
#8221: 
    push           pc_stackmcl.getnextxreg.firstreg i64 
    pop            pc_stackmcl.getnextxreg.r i64 
    push           pc_stackmcl.getnextxreg.r i64 
    push           10         i64 
    jumpgt         #8222      i64 
#8223: 
    push           &pci_mcl.xregset 
    push           pc_stackmcl.getnextxreg.r i64 
    pushptroff                u8 1 -1
    push           0          i64 
    jumpne         #8224      i64 
    push           1          i64 
    push           &pci_mcl.xregset 
    push           pc_stackmcl.getnextxreg.r i64 
    popptroff                 u8 1 -1
    push           &pci_mcl.inf_highxreg 
    push           pc_stackmcl.getnextxreg.r i64 
    maxto                     i64 
    push           pc_stackmcl.getnextxreg.r i64 
    setret                    i64 
    jump           #8225      
#8224: 
#8226: 
    forup          #8223      i64 1
    opnd           pc_stackmcl.getnextxreg.r 
    opnd           10         
#8222: 
#8227: 
    push           pci_mcl.noperands i64 
    pop            pc_stackmcl.getnextxreg.i i64 
    push           pc_stackmcl.getnextxreg.i i64 
    push           1          i64 
    jumplt         #8228      i64 
#8229: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.getnextxreg.i i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8230      i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.getnextxreg.i i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_stackmcl.getnextxreg.reg i64 
    push           pc_stackmcl.getnextxreg.reg i64 
    push           pc_stackmcl.getnextxreg.firstreg i64 
    jumplt         #8231      i64 
    setargs                   1 0
    push           pc_stackmcl.getnextxreg.i i64 
    callproc       &pc_stackmcl.pushopnd 
    setargs                   1 0
    push           pc_stackmcl.getnextxreg.nvreg i64 
    callfn         &pc_stackmcl.getnextxreg i64 
    setret                    i64 
    jump           #8225      
#8231: 
#8230: 
#8232: 
    fordown        #8229      i64 1
    opnd           pc_stackmcl.getnextxreg.i 
    opnd           1          
#8228: 
    setargs                   2 0
    push           ""         u64 
    push           "NO FREE XREGS" u64 
    callproc       &pc_libmcl.merror 
    push           0          i64 
    setret                    i64 
    jump           #8225      
#8225: 
    retfn                     i64 
End


Proc pc_stackmcl.delopnd:
    procentry                 
    push           pci_mcl.noperands i64 
    push           0          i64 
    jumpgt         #8234      i64 
    setargs                   1 0
    push           "****DELND/UNDERFLOW" u64 
    callproc       &pc_libmcl.mgencomment 
    jump           #8235      
#8234: 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8236      i64 0
    push           7          i64 
    casejumpeq     #8236      i64 0
    push           2          i64 
    casejumpeq     #8237      i64 0
    push           8          i64 
    casejumpeq     #8237      i64 0
    push           5          i64 
    casejumpeq     #8238      i64 0
    push           4          i64 
    casejumpeq     #8239      i64 0
    popstack                  i64 
    jump           #8240      
#8236: 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    jump           #8241      
#8237: 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callproc       &pc_stackmcl.freexreg 
    jump           #8241      
#8238: 
    jump           #8241      
#8239: 
    jump           #8241      
#8240: 
    setargs                   2 0
    push           &pci_mcl.locnames 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    push           "Can't pop opnd: #" u64 
    callproc       &pc_libmcl.merror 
#8241: 
    push           &pci_mcl.noperands 
    decr                      i64 1
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    pop            pci_mcl.pclstack u64 
#8235: 
    retproc                   
End


Proc pc_stackmcl.freexreg:
    param          pc_stackmcl.freexreg.xr i64 
    procentry                 
    push           0          i64 
    push           &pci_mcl.xregset 
    push           pc_stackmcl.freexreg.xr i64 
    popptroff                 u8 1 -1
#8243: 
    retproc                   
End


Proc pc_stackmcl.pushopnd:
    param          pc_stackmcl.pushopnd.n i64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8245      i64 0
    push           7          i64 
    casejumpeq     #8246      i64 0
    push           2          i64 
    casejumpeq     #8247      i64 0
    push           3          i64 
    casejumpeq     #8248      i64 0
    popstack                  i64 
    jump           #8249      
#8245: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    jump           #8250      
#8246: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8250      
#8247: 
    push           pci_mcl.inf_r13used i64 
    jumpfalse      #8251      i64 
    setargs                   2 0
    push           ""         u64 
    push           "2:R13 in use" u64 
    callproc       &pc_libmcl.merror 
#8251: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenxreg u64 
    setargs                   2 0
    push           8          i64 
    push           14         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           14         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callproc       &pc_stackmcl.freexreg 
    jump           #8250      
#8248: 
    jump           #8252      
    jump           #8250      
#8249: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           17         i64 
    casejumpeq     #8253      i64 0
    push           14         i64 
    casejumpeq     #8254      i64 0
    push           15         i64 
    casejumpeq     #8254      i64 0
    push           16         i64 
    casejumpeq     #8255      i64 0
    push           7          i64 
    casejumpeq     #8256      i64 0
    push           8          i64 
    casejumpeq     #8257      i64 0
    push           10         i64 
    casejumpeq     #8258      i64 0
    push           11         i64 
    casejumpeq     #8259      i64 0
    popstack                  i64 
    jump           #8260      
#8253: 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmemhigh u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8261      
#8254: 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8261      
#8255: 
    push           pci_mcl.inf_r13used i64 
    jumpfalse      #8262      i64 
    setargs                   2 0
    push           ""         u64 
    push           "4:R13 in use" u64 
    callproc       &pc_libmcl.merror 
#8262: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    setargs                   2 0
    push           4          i64 
    push           14         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           14         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8261      
#8256: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenint u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8261      
#8257: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                r64 1 0
    callfn         &pc_libmcl.mgenrealmem u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8261      
#8258: 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.getstringindex i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8261      
#8259: 
    push           pci_mcl.inf_r13used i64 
    jumpfalse      #8263      i64 
    setargs                   2 0
    push           ""         u64 
    push           "3:R13 in use" u64 
    callproc       &pc_libmcl.merror 
#8263: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    setargs                   2 0
    push           8          i64 
    push           14         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           15         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           14         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    jump           #8261      
#8260: 
    setargs                   2 0
    push           &pci_mcl.fmtnames 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u64 8 0
    push           "Can't push opnd: #" u64 
    callproc       &pc_libmcl.merror 
#8261: 
#8250: 
    push           3          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           1          
    popptroff                 u8 1 0
    push           &pci_mcl.pushfmt 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u8 1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
    push           &pci_mcl.mstackdepth 
    incr                      i64 1
#8252: 
    retproc                   
End


Proc pc_stackmcl.pushallopnds:
    param          pc_stackmcl.pushallopnds.n i64 
    local          pc_stackmcl.pushallopnds.i i64 
    procentry                 
#8265: 
    push           pci_mcl.noperands i64 
    pop            pc_stackmcl.pushallopnds.i i64 
    push           pc_stackmcl.pushallopnds.i i64 
    push           pc_stackmcl.pushallopnds.n i64 
    jumplt         #8266      i64 
#8267: 
    setargs                   1 0
    push           pc_stackmcl.pushallopnds.i i64 
    callproc       &pc_stackmcl.pushopnd 
#8268: 
    fordown        #8267      i64 1
    opnd           pc_stackmcl.pushallopnds.i 
    opnd           pc_stackmcl.pushallopnds.n 
#8266: 
#8269: 
    retproc                   
End


Proc pc_stackmcl.poparg:
    procentry                 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8271      i64 0
    push           2          i64 
    casejumpeq     #8272      i64 0
    push           3          i64 
    casejumpeq     #8273      i64 0
    push           4          i64 
    casejumpeq     #8274      i64 0
    push           5          i64 
    casejumpeq     #8275      i64 0
    push           7          i64 
    casejumpeq     #8276      i64 0
    push           8          i64 
    casejumpeq     #8277      i64 0
    popstack                  i64 
    jump           #8278      
#8271: 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    jump           #8279      
#8272: 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callproc       &pc_stackmcl.freexreg 
    jump           #8279      
#8273: 
    jump           #8279      
#8274: 
    jump           #8279      
#8275: 
    jump           #8279      
#8276: 
    jump           #8279      
#8277: 
    jump           #8279      
#8278: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "POPARG:"  u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pci_mcl.locnames 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "****POPARG?" u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   2 0
    push           &pci_mcl.locnames 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    push           "poparg? #" u64 
    callproc       &pc_libmcl.merror 
#8279: 
    push           &pci_mcl.noperands 
    decr                      i64 1
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    pop            pci_mcl.pclstack u64 
#8280: 
    retproc                   
End


Proc pc_stackmcl.pushslots:
    param          pc_stackmcl.pushslots.nslots i64 
    procentry                 
    setargs                   1 0
    push           pc_stackmcl.pushslots.nslots i64 
    push           8          i64 
    mul                       i64 
    callproc       &pc_stackmcl.pushstack 
    push           &pci_mcl.mstackdepth 
    push           pc_stackmcl.pushslots.nslots i64 
    addto                     i64 
#8282: 
    retproc                   
End


Proc pc_stackmcl.popslots:
    param          pc_stackmcl.popslots.nslots i64 
    procentry                 
    setargs                   1 0
    push           pc_stackmcl.popslots.nslots i64 
    push           8          i64 
    mul                       i64 
    callproc       &pc_stackmcl.popstack 
    push           &pci_mcl.mstackdepth 
    push           pc_stackmcl.popslots.nslots i64 
    subto                     i64 
#8284: 
    retproc                   
End


Proc pc_stackmcl.pushstack:
    param          pc_stackmcl.pushstack.n i64 
    procentry                 
    push           pc_stackmcl.pushstack.n i64 
    jumpfalse      #8286      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.pushstack.n i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pci_mcl.dstackopnd u64 
    push           30         i64 
    callproc       &pc_libmcl.genmc 
#8286: 
#8287: 
    retproc                   
End


Proc pc_stackmcl.popstack:
    param          pc_stackmcl.popstack.n i64 
    procentry                 
    push           pc_stackmcl.popstack.n i64 
    jumpfalse      #8289      i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.popstack.n i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pci_mcl.dstackopnd u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
#8289: 
#8290: 
    retproc                   
End


Proc pc_stackmcl.saveopnd:
    param          pc_stackmcl.saveopnd.n i64 
    local          pc_stackmcl.saveopnd.reg i64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.saveopnd.n i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8292      i64 0
    push           2          i64 
    casejumpeq     #8293      i64 0
    push           3          i64 
    casejumpeq     #8294      i64 0
    push           7          i64 
    casejumpeq     #8295      i64 0
    push           8          i64 
    casejumpeq     #8295      i64 0
    push           4          i64 
    casejumpeq     #8296      i64 0
    popstack                  i64 
    jump           #8297      
#8292: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.saveopnd.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_stackmcl.saveopnd.reg i64 
    push           pc_stackmcl.saveopnd.reg i64 
    push           1          i64 
    push           3          i64 
    jumpnotinrange #8298      i64 
    setargs                   1 0
    push           pc_stackmcl.saveopnd.n i64 
    callproc       &pc_stackmcl.pushopnd 
#8298: 
    jump           #8299      
#8293: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.saveopnd.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_stackmcl.saveopnd.reg i64 
    push           pc_stackmcl.saveopnd.reg i64 
    push           1          i64 
    push           6          i64 
    jumpnotinrange #8300      i64 
    setargs                   1 0
    push           pc_stackmcl.saveopnd.n i64 
    callproc       &pc_stackmcl.pushopnd 
#8300: 
    jump           #8299      
#8294: 
    jump           #8299      
#8295: 
    jump           #8299      
#8296: 
    setargs                   1 0
    push           pc_stackmcl.saveopnd.n i64 
    callproc       &pc_stackmcl.pushopnd 
    jump           #8299      
#8297: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.saveopnd.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           17         i64 
    casejumpeq     #8301      i64 0
    push           14         i64 
    casejumpeq     #8302      i64 0
    push           15         i64 
    casejumpeq     #8302      i64 0
    push           16         i64 
    casejumpeq     #8302      i64 0
    popstack                  i64 
    jump           #8303      
#8301: 
    setargs                   1 0
    push           pc_stackmcl.saveopnd.n i64 
    callproc       &pc_stackmcl.pushopnd 
    jump           #8304      
#8302: 
    setargs                   1 0
    push           pc_stackmcl.saveopnd.n i64 
    callproc       &pc_stackmcl.pushopnd 
    jump           #8304      
#8303: 
    setargs                   2 0
    push           &pci_mcl.fmtnames 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.saveopnd.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u64 8 0
    push           "Can't save opnd: #" u64 
    callproc       &pc_libmcl.merror 
#8304: 
#8299: 
#8305: 
    retproc                   
End


Proc pc_stackmcl.saveallopnds:
    param          pc_stackmcl.saveallopnds.n i64 
    local          pc_stackmcl.saveallopnds.i i64 
    procentry                 
#8307: 
    push           pci_mcl.noperands i64 
    pop            pc_stackmcl.saveallopnds.i i64 
    push           pc_stackmcl.saveallopnds.i i64 
    push           pc_stackmcl.saveallopnds.n i64 
    jumplt         #8308      i64 
#8309: 
    setargs                   1 0
    push           pc_stackmcl.saveallopnds.i i64 
    callproc       &pc_stackmcl.saveopnd 
#8310: 
    fordown        #8309      i64 1
    opnd           pc_stackmcl.saveallopnds.i 
    opnd           pc_stackmcl.saveallopnds.n 
#8308: 
#8311: 
    retproc                   
End


Proc pc_stackmcl.movetoreg:
    param          pc_stackmcl.movetoreg.newreg i64 
    local          pc_stackmcl.movetoreg.oldreg i64 
    procentry                 
    setargs                   2 0
    push           0          i64 
    push           1          i64 
    callproc       &pc_stackmcl.loadopnd 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_stackmcl.movetoreg.oldreg i64 
    push           pc_stackmcl.movetoreg.oldreg i64 
    push           pc_stackmcl.movetoreg.newreg i64 
    jumpne         #8313      i64 
    jump           #8314      
#8313: 
    push           &pci_mcl.regset 
    push           pc_stackmcl.movetoreg.newreg i64 
    pushptroff                u8 1 -1
    jumpfalse      #8315      i64 
    setargs                   2 0
    push           ""         u64 
    push           "movereg/reg in use" u64 
    callproc       &pc_libmcl.merror 
#8315: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.movetoreg.oldreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.movetoreg.newreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_stackmcl.movetoreg.oldreg i64 
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_stackmcl.movetoreg.oldreg i64 
    popptroff                 u8 1 -1
    push           pc_stackmcl.movetoreg.newreg i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    push           1          i64 
    push           &pci_mcl.regset 
    push           pc_stackmcl.movetoreg.newreg i64 
    popptroff                 u8 1 -1
    push           pc_stackmcl.movetoreg.newreg i64 
    push           11         i64 
    jumplt         #8316      i64 
    push           &pci_mcl.inf_highreg 
    push           pc_stackmcl.movetoreg.newreg i64 
    maxto                     i64 
#8316: 
#8314: 
    retproc                   
End


Proc pc_stackmcl.swapopnds:
    param          pc_stackmcl.swapopnds.m i64 
    param          pc_stackmcl.swapopnds.n i64 
    local          pc_stackmcl.swapopnds.t block:15 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.swapopnds.m i64 
    pushptroff                block:15 15 -15
    pop            pc_stackmcl.swapopnds.t block:15 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.swapopnds.n i64 
    pushptroff                block:15 15 -15
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.swapopnds.m i64 
    popptroff                 block:15 15 -15
    push           pc_stackmcl.swapopnds.t block:15 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.swapopnds.n i64 
    popptroff                 block:15 15 -15
#8318: 
    retproc                   
End


Proc pc_stackmcl.swapopndregs:
    param          pc_stackmcl.swapopndregs.reg2 i64 
    local          pc_stackmcl.swapopndregs.reg1 i64 
    local          pc_stackmcl.swapopndregs.i i64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_stackmcl.swapopndregs.reg1 i64 
#8320: 
    push           2          i64 
    pop            pc_stackmcl.swapopndregs.i i64 
    push           pci_mcl.noperands i64 
    push           2          i64 
    jumplt         #8321      i64 
#8322: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.swapopndregs.i i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8323      i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.swapopndregs.i i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    push           pc_stackmcl.swapopndregs.reg2 i64 
    jumpne         #8323      i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    addrefoff                 u64 1 0
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    addrefoff                 u64 1 0
    swap                      u8 
    jump           #8324      
#8323: 
#8325: 
    forup          #8322      i64 1
    opnd           pc_stackmcl.swapopndregs.i 
    opnd           pci_mcl.noperands 
#8321: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           pci_mcl.procdef u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           ""         u64 
    push           "swapopndregs/reg not found" u64 
    callproc       &pc_libmcl.merror 
#8326: 
#8324: 
    retproc                   
End


Proc pc_stackmcl.showopndstack:
    procentry                 
    setargs                   1 0
    setargs                   1 0
    push           1          i64 
    callfn         &pc_stackmcl.stropndstack u64 
    callproc       &pc_libmcl.mgencomment 
#8328: 
    retproc                   
End


Proc pc_genss.genss:
    local          pc_genss.genss.index i64 
    local          pc_genss.genss.m u64 
    procentry                 
    setargs                   1 0
    push           pci_mcl.mlabelno i64 
    callproc       &pc_genss.initlib 
    push           0          i64 
    pop            pci_mcl.ss_zdatalen i64 
    setargs                   1 0
    push           1024       i64 
    callfn         &pc_genss.buffercreate u64 
    pop            pci_mcl.ss_zdata u64 
    setargs                   1 0
    push           1024       i64 
    callfn         &pc_genss.buffercreate u64 
    pop            pci_mcl.ss_idata u64 
    setargs                   1 0
    push           1024       i64 
    callfn         &pc_genss.buffercreate u64 
    pop            pci_mcl.ss_code u64 
    push           0          u64 
    pop            pci_mcl.ss_idatarelocs u64 
    push           0          u64 
    pop            pci_mcl.ss_coderelocs u64 
    push           0          i64 
    pop            pci_mcl.ss_nsymbols i64 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_genss.switchseg 
    push           9999       i64 
    pop            pci_mcl.alineno i64 
    push           0          u64 
    pop            pc_genss.extraparam u64 
    setargs                   0 0
    callproc       &pc_genss.fixregvar 
    push           pci_mcl.mccode u64 
    pop            pc_genss.genss.m u64 
    push           0          i64 
    pop            pc_genss.genss.index i64 
    jump           #8330      
#8331: 
    setargs                   2 0
    push           &pc_genss.genss.index 
    incrload                  i64 1
    push           pc_genss.genss.m u64 
    callproc       &pc_genss.doinstr 
    push           pc_genss.genss.m u64 
    pushptr                   u64 
    pop            pc_genss.genss.m u64 
#8330: 
    push           pc_genss.genss.m u64 
    jumptrue       #8331      u64 
#8332: 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_genss.switchseg 
    setargs                   1 0
    push           pci_mcl.ss_zdata u64 
    callfn         &pc_genss.bufferlength i64 
    jumpfalse      #8333      i64 
    setargs                   1 0
    push           "Zdata contains code or data" u64 
    callproc       &pci_mcl.axerror 
#8333: 
#8334: 
    retproc                   
End


Proc pc_genss.doinstr:
    param          pc_genss.doinstr.m u64 
    param          pc_genss.doinstr.index i64 
    local          pc_genss.doinstr.a u64 
    local          pc_genss.doinstr.b u64 
    local          pc_genss.doinstr.d u64 
    local          pc_genss.doinstr.e u64 
    local          pc_genss.doinstr.x i64 
    local          pc_genss.doinstr.offset i64 
    local          pc_genss.doinstr.shortjmp i64 
    local          pc_genss.doinstr.n i64 
    local          pc_genss.doinstr.av_1 i64 
    local          pc_genss.doinstr.av_2 i64 
    procentry                 
    setargs                   2 0
    push           1024       i64 
    push           pc_genss.currdata u64 
    callproc       &pc_genss.buffercheck 
    push           0          i64 
    store          pc_genss.f3override i64 
    store          pc_genss.f2override i64 
    store          pc_genss.addroverride i64 
    store          pc_genss.sizeoverride i64 
    pop            pc_genss.rex i64 
    push           pc_genss.doinstr.m u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_genss.doinstr.a u64 
    push           pc_genss.doinstr.m u64 
    push           16         
    pushptroff                u64 1 0
    pop            pc_genss.doinstr.b u64 
    push           &pc_genss.instrno 
    incr                      i64 1
    push           pc_genss.instrno i64 
    pop            pci_mcl.alineno i64 
    push           pc_genss.doinstr.m u64 
    pop            pc_genss.currmcl u64 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    switch         #8336      1 148
    opnd           #8337      
#8336: 
    switchlabel    #8338      
    switchlabel    #8339      
    switchlabel    #8340      
    switchlabel    #8341      
    switchlabel    #8342      
    switchlabel    #8343      
    switchlabel    #8344      
    switchlabel    #8345      
    switchlabel    #8346      
    switchlabel    #8347      
    switchlabel    #8348      
    switchlabel    #8349      
    switchlabel    #8350      
    switchlabel    #8351      
    switchlabel    #8352      
    switchlabel    #8353      
    switchlabel    #8354      
    switchlabel    #8355      
    switchlabel    #8356      
    switchlabel    #8357      
    switchlabel    #8358      
    switchlabel    #8359      
    switchlabel    #8360      
    switchlabel    #8337      
    switchlabel    #8361      
    switchlabel    #8362      
    switchlabel    #8363      
    switchlabel    #8364      
    switchlabel    #8365      
    switchlabel    #8365      
    switchlabel    #8365      
    switchlabel    #8365      
    switchlabel    #8366      
    switchlabel    #8366      
    switchlabel    #8367      
    switchlabel    #8337      
    switchlabel    #8366      
    switchlabel    #8366      
    switchlabel    #8365      
    switchlabel    #8365      
    switchlabel    #8365      
    switchlabel    #8368      
    switchlabel    #8365      
    switchlabel    #8369      
    switchlabel    #8369      
    switchlabel    #8369      
    switchlabel    #8369      
    switchlabel    #8369      
    switchlabel    #8369      
    switchlabel    #8369      
    switchlabel    #8366      
    switchlabel    #8366      
    switchlabel    #8370      
    switchlabel    #8370      
    switchlabel    #8371      
    switchlabel    #8372      
    switchlabel    #8373      
    switchlabel    #8374      
    switchlabel    #8375      
    switchlabel    #8376      
    switchlabel    #8376      
    switchlabel    #8377      
    switchlabel    #8378      
    switchlabel    #8378      
    switchlabel    #8378      
    switchlabel    #8378      
    switchlabel    #8378      
    switchlabel    #8377      
    switchlabel    #8377      
    switchlabel    #8377      
    switchlabel    #8377      
    switchlabel    #8379      
    switchlabel    #8380      
    switchlabel    #8381      
    switchlabel    #8382      
    switchlabel    #8381      
    switchlabel    #8382      
    switchlabel    #8381      
    switchlabel    #8381      
    switchlabel    #8383      
    switchlabel    #8384      
    switchlabel    #8385      
    switchlabel    #8386      
    switchlabel    #8387      
    switchlabel    #8388      
    switchlabel    #8389      
    switchlabel    #8390      
    switchlabel    #8391      
    switchlabel    #8391      
    switchlabel    #8337      
    switchlabel    #8337      
    switchlabel    #8392      
    switchlabel    #8392      
    switchlabel    #8392      
    switchlabel    #8393      
    switchlabel    #8393      
    switchlabel    #8393      
    switchlabel    #8394      
    switchlabel    #8394      
    switchlabel    #8394      
    switchlabel    #8394      
    switchlabel    #8395      
    switchlabel    #8395      
    switchlabel    #8395      
    switchlabel    #8395      
    switchlabel    #8395      
    switchlabel    #8395      
    switchlabel    #8395      
    switchlabel    #8395      
    switchlabel    #8378      
    switchlabel    #8378      
    switchlabel    #8377      
    switchlabel    #8377      
    switchlabel    #8396      
    switchlabel    #8397      
    switchlabel    #8398      
    switchlabel    #8399      
    switchlabel    #8400      
    switchlabel    #8401      
    switchlabel    #8402      
    switchlabel    #8403      
    switchlabel    #8404      
    switchlabel    #8405      
    switchlabel    #8406      
    switchlabel    #8406      
    switchlabel    #8406      
    switchlabel    #8406      
    switchlabel    #8407      
    switchlabel    #8408      
    switchlabel    #8408      
    switchlabel    #8408      
    switchlabel    #8409      
    switchlabel    #8410      
    switchlabel    #8411      
    switchlabel    #8412      
    switchlabel    #8413      
    switchlabel    #8414      
    switchlabel    #8415      
    switchlabel    #8416      
    switchlabel    #8417      
    switchlabel    #8418      
    switchlabel    #8418      
    switchlabel    #8418      
    switchlabel    #8418      
    switchlabel    #8418      
    switchlabel    #8418      
    switchlabel    #8418      
    switchlabel    #8347      
    endswitch                 
#8338: 
    push           pc_genss.doinstr.m u64 
    push           8          
    pushptroff                u64 1 0
    pushptr                   u64 
    pop            pci_mcl.currasmproc u64 
    jump           #8419      
#8339: 
    jump           #8419      
#8344: 
    jump           #8419      
#8345: 
    jump           #8419      
#8342: 
    jump           #8419      
#8343: 
    push           pc_genss.doinstr.a u64 
    push           12         
    pushptroff                u8 1 0
    push           4          i64 
    casejumpeq     #8420      i64 0
    push           5          i64 
    casejumpeq     #8421      i64 0
    popstack                  i64 
    jump           #8422      
#8420: 
    jump           #8423      
#8421: 
    push           pc_genss.doinstr.a u64 
    pushptr                   u64 
    pop            pc_genss.doinstr.d u64 
    push           2          i64 
    push           pc_genss.doinstr.d u64 
    push           29         
    popptroff                 u8 1 0
    push           pc_genss.currseg i64 
    push           pc_genss.doinstr.d u64 
    push           30         
    popptroff                 u8 1 0
    setargs                   1 0
    push           6          i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           pc_genss.doinstr.d u64 
    push           32         
    popptroff                 i32 1 0
    push           pc_genss.doinstr.d u64 
    push           46         
    pushptroff                u16 1 0
    push           3          i64 
    dotindex                  i64 
    jumpfalse      #8424      u64 
    setargs                   1 0
    push           pc_genss.doinstr.d u64 
    callproc       &pc_genss.getstindex 
#8424: 
    setargs                   1 0
    push           pc_genss.doinstr.d u64 
    callproc       &pc_genss.dofwdrefs 
    jump           #8423      
#8422: 
#8423: 
    jump           #8419      
#8346: 
    push           pci_mcl.labeldeftable u64 
    push           pc_genss.doinstr.a u64 
    pushptr                   i64 
    pushptroff                u64 8 -8
    pop            pc_genss.doinstr.d u64 
    push           2          i64 
    push           pc_genss.doinstr.d u64 
    push           29         
    popptroff                 u8 1 0
    push           pc_genss.currseg i64 
    push           pc_genss.doinstr.d u64 
    push           30         
    popptroff                 u8 1 0
    setargs                   1 0
    push           6          i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           pc_genss.doinstr.d u64 
    push           32         
    popptroff                 i32 1 0
    setargs                   1 0
    push           pc_genss.doinstr.d u64 
    callproc       &pc_genss.dofwdrefs 
    jump           #8419      
#8359: 
    setargs                   1 0
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_call 
    jump           #8419      
#8362: 
    setargs                   2 0
    push           pc_genss.doinstr.m u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_jmp 
    jump           #8419      
#8363: 
    setargs                   2 0
    push           1          i64 
    push           pc_genss.doinstr.a u64 
    callfn         &pc_genss.getdef u64 
    pop            pc_genss.doinstr.d u64 
    setargs                   2 0
    setargs                   1 0
    push           7          i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           1          i64 
    add                       i64 
    push           pc_genss.doinstr.d u64 
    callfn         &pc_genss.getrel32 i64 
    pop            pc_genss.doinstr.offset i64 
    push           pc_genss.doinstr.offset i64 
    push           0          i64 
    jumpge         #8425      i64 
    push           pc_genss.doinstr.offset i64 
    push           -126       i64 
    jumpge         #8426      i64 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           128        i64 
    push           pc_genss.doinstr.m u64 
    push           25         
    pushptroff                u8 1 0
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.doinstr.offset i64 
    push           4          i64 
    sub                       i64 
    callproc       &pc_genss.gendword 
    jump           #8427      
#8426: 
    setargs                   1 0
    push           112        i64 
    push           pc_genss.doinstr.m u64 
    push           25         
    pushptroff                u8 1 0
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.doinstr.offset i64 
    callproc       &pc_genss.genbyte 
#8427: 
    jump           #8428      
#8425: 
    setargs                   2 0
    push           pc_genss.doinstr.d u64 
    push           pc_genss.doinstr.m u64 
    callfn         &pc_genss.checkshortjump i64 
    pop            pc_genss.doinstr.shortjmp i64 
    push           pc_genss.doinstr.shortjmp i64 
    jumptrue       #8429      i64 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           128        i64 
    push           pc_genss.doinstr.m u64 
    push           25         
    pushptroff                u8 1 0
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.genrel32 
    jump           #8430      
#8429: 
    setargs                   1 0
    push           112        i64 
    push           pc_genss.doinstr.m u64 
    push           25         
    pushptroff                u8 1 0
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.genrel8 
#8430: 
#8428: 
    jump           #8419      
#8396: 
    setargs                   2 0
    push           1          i64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.genopnd 
    jump           #8419      
#8397: 
    setargs                   2 0
    push           2          i64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.genopnd 
    jump           #8419      
#8398: 
    setargs                   2 0
    push           4          i64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.genopnd 
    jump           #8419      
#8399: 
    setargs                   2 0
    push           8          i64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.genopnd 
    jump           #8419      
#8400: 
    setargs                   1 0
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.genrel32 
    jump           #8419      
#8401: 
    setargs                   1 0
    push           pc_genss.doinstr.a u64 
    pushptr                   i64 
    callproc       &pc_genss.switchseg 
    jump           #8419      
#8404: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_genss.switchseg 
    jump           #8419      
#8402: 
    setargs                   1 0
    push           2          i64 
    callproc       &pc_genss.switchseg 
    jump           #8419      
#8403: 
    setargs                   1 0
    push           3          i64 
    callproc       &pc_genss.switchseg 
    jump           #8419      
#8347: 
    setargs                   1 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    callproc       &pc_genss.genbyte 
    jump           #8419      
#8371: 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           152        i64 
    callproc       &pc_genss.genbyte 
    jump           #8419      
#8372: 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           153        i64 
    callproc       &pc_genss.genbyte 
    jump           #8419      
#8373: 
    setargs                   1 0
    push           153        i64 
    callproc       &pc_genss.genbyte 
    jump           #8419      
#8374: 
    setargs                   1 0
    push           72         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           153        i64 
    callproc       &pc_genss.genbyte 
    jump           #8419      
#8360: 
    setargs                   1 0
    push           195        i64 
    callproc       &pc_genss.genbyte 
    jump           #8419      
#8361: 
    push           pc_genss.doinstr.a u64 
    push           9          
    pushptroff                u8 1 0
    push           2          i64 
    jumpeq         #8431      i64 
    setargs                   1 0
    push           "retn?"    u64 
    callproc       &pci_mcl.axerror 
#8431: 
    setargs                   1 0
    push           194        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.doinstr.a u64 
    pushptr                   i64 
    callproc       &pc_genss.genword 
    jump           #8419      
#8350: 
    setargs                   1 0
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_push 
    jump           #8419      
#8351: 
    setargs                   1 0
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_pop 
    jump           #8419      
#8370: 
    setargs                   2 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_inc 
    jump           #8419      
#8366: 
    setargs                   2 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_neg 
    jump           #8419      
#8365: 
    setargs                   3 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_arith 
    jump           #8419      
#8349: 
    setargs                   2 0
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_mov 
    jump           #8419      
#8352: 
    setargs                   2 0
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_lea 
    jump           #8419      
#8356: 
    setargs                   3 0
    push           190        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_movsx 
    jump           #8419      
#8357: 
    setargs                   3 0
    push           182        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_movsx 
    jump           #8419      
#8358: 
    setargs                   2 0
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_movsxd 
    jump           #8419      
#8364: 
    setargs                   2 0
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_exch 
    jump           #8419      
#8367: 
    setargs                   2 0
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_imul2 
    jump           #8419      
#8406: 
    push           pc_genss.doinstr.a u64 
    push           9          
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #8432      i64 
    push           pc_genss.doinstr.a u64 
    pushptr                   i64 
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    mul                       i64 
    pop            pc_genss.doinstr.n i64 
    push           pc_genss.currseg i64 
    push           1          i64 
    casejumpeq     #8433      i64 0
    push           2          i64 
    casejumpeq     #8434      i64 0
    popstack                  i64 
    jump           #8435      
#8433: 
#8436: 
    push           pc_genss.doinstr.n i64 
    pop            pc_genss.doinstr.av_1 i64 
    push           pc_genss.doinstr.av_1 i64 
    push           0          i64 
    jumple         #8437      i64 
#8438: 
    setargs                   1 0
    push           144        i64 
    callproc       &pc_genss.genbyte 
#8439: 
    to             #8438      
    opnd           pc_genss.doinstr.av_1 
#8437: 
    jump           #8440      
#8434: 
#8441: 
    push           pc_genss.doinstr.n i64 
    pop            pc_genss.doinstr.av_2 i64 
    push           pc_genss.doinstr.av_2 i64 
    push           0          i64 
    jumple         #8442      i64 
#8443: 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_genss.genbyte 
#8444: 
    to             #8443      
    opnd           pc_genss.doinstr.av_2 
#8442: 
    jump           #8440      
#8435: 
    push           &pci_mcl.ss_zdatalen 
    push           pc_genss.doinstr.n i64 
    addto                     i64 
#8440: 
    jump           #8445      
#8432: 
    setargs                   1 0
    push           "resb?"    u64 
    callproc       &pci_mcl.axerror 
#8445: 
    jump           #8419      
#8405: 
    push           pc_genss.doinstr.a u64 
    push           9          
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #8446      i64 
    push           pc_genss.doinstr.a u64 
    pushptr                   i64 
    pop            pc_genss.doinstr.x i64 
    push           pc_genss.doinstr.x i64 
    push           1          i64 
    jumplt         #8447      i64 
    push           pc_genss.doinstr.x i64 
    push           16384      i64 
    jumple         #8448      i64 
#8447: 
    setargs                   1 0
    push           "align2"   u64 
    callproc       &pci_mcl.axerror 
#8448: 
    push           pc_genss.currseg i64 
    push           3          i64 
    jumpeq         #8449      i64 
    jump           #8450      
#8451: 
    setargs                   1 0
    startmult                 
    push           pc_genss.currseg i64 
    push           1          i64 
    jumpne         #8452      i64 
    push           144        i64 
    resetmult                 
    jump           #8453      
#8452: 
    push           0          i64 
    endmult                   
#8453: 
    callproc       &pc_genss.genbyte 
#8450: 
    setargs                   1 0
    push           pc_genss.currdata u64 
    callfn         &pc_genss.bufferlength i64 
    push           pc_genss.doinstr.x i64 
    irem                      i64 
    jumptrue       #8451      i64 
#8454: 
    jump           #8455      
#8449: 
    jump           #8456      
#8457: 
    push           &pci_mcl.ss_zdatalen 
    incr                      i64 1
#8456: 
    push           pci_mcl.ss_zdatalen i64 
    push           pc_genss.doinstr.x i64 
    irem                      i64 
    jumptrue       #8457      i64 
#8458: 
#8455: 
    jump           #8459      
#8446: 
    setargs                   1 0
    push           "align?"   u64 
    callproc       &pci_mcl.axerror 
#8459: 
    jump           #8419      
#8369: 
    setargs                   3 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_shift 
    jump           #8419      
#8368: 
    setargs                   2 0
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_test 
    jump           #8419      
#8408: 
    setargs                   2 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_loop 
    jump           #8419      
#8409: 
    setargs                   2 0
    push           4          i64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_jcxz 
    jump           #8419      
#8410: 
    setargs                   2 0
    push           8          i64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_jcxz 
    jump           #8419      
#8407: 
    setargs                   1 0
    push           215        i64 
    callproc       &pc_genss.genbyte 
    jump           #8419      
#8375: 
    setargs                   2 0
    push           pc_genss.doinstr.a u64 
    push           pc_genss.doinstr.m u64 
    push           25         
    pushptroff                u8 1 0
    callproc       &pc_genss.do_setcc 
    jump           #8419      
#8354: 
    setargs                   3 0
    push           4          i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_movxmm 
    jump           #8419      
#8355: 
    setargs                   3 0
    push           8          i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_movxmm 
    jump           #8419      
#8378: 
    setargs                   4 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           243        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_arithxmm 
    jump           #8419      
#8377: 
    setargs                   4 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           242        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_arithxmm 
    jump           #8419      
#8382: 
    setargs                   4 0
    push           4          i64 
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_logicxmm 
    jump           #8419      
#8381: 
    setargs                   4 0
    push           8          i64 
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_logicxmm 
    jump           #8419      
#8379: 
    setargs                   4 0
    push           47         i64 
    push           0          i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_arithxmm 
    jump           #8419      
#8380: 
    setargs                   4 0
    push           47         i64 
    push           102        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_arithxmm 
    jump           #8419      
#8390: 
    setargs                   3 0
    push           243        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_convertfloat 
    jump           #8419      
#8389: 
    setargs                   3 0
    push           242        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_convertfloat 
    jump           #8419      
#8383: 
    setargs                   4 0
    push           45         i64 
    push           243        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_fix 
    jump           #8419      
#8384: 
    setargs                   4 0
    push           45         i64 
    push           242        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_fix 
    jump           #8419      
#8385: 
    setargs                   4 0
    push           44         i64 
    push           243        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_fix 
    jump           #8419      
#8386: 
    setargs                   4 0
    push           44         i64 
    push           242        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_fix 
    jump           #8419      
#8387: 
    setargs                   3 0
    push           243        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_float 
    jump           #8419      
#8388: 
    setargs                   3 0
    push           242        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_float 
    jump           #8419      
#8348: 
    push           pc_genss.doinstr.a u64 
    pop            pc_genss.extraparam u64 
    jump           #8419      
#8353: 
    setargs                   3 0
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    push           pc_genss.doinstr.m u64 
    push           25         
    pushptroff                u8 1 0
    callproc       &pc_genss.do_cmovcc 
    jump           #8419      
#8395: 
    setargs                   1 0
    push           217        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    callproc       &pc_genss.genbyte 
    jump           #8419      
#8392: 
    setargs                   3 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           1          i64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_fmem 
    jump           #8419      
#8393: 
    setargs                   3 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           0          i64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_fmem 
    jump           #8419      
#8394: 
    setargs                   1 0
    push           222        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    callproc       &pc_genss.genbyte 
    jump           #8419      
#8411: 
    setargs                   1 0
    push           166        i64 
    callproc       &pc_genss.genbyte 
    jump           #8419      
#8412: 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           167        i64 
    callproc       &pc_genss.genbyte 
    jump           #8419      
#8413: 
    setargs                   1 0
    push           167        i64 
    callproc       &pc_genss.genbyte 
    jump           #8419      
#8414: 
    setargs                   1 0
    push           72         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           167        i64 
    callproc       &pc_genss.genbyte 
    jump           #8419      
#8415: 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    callproc       &pc_genss.genbyte 
    jump           #8419      
#8391: 
    setargs                   3 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_movdqx 
    jump           #8419      
#8417: 
    setargs                   1 0
    push           219        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           227        i64 
    callproc       &pc_genss.genbyte 
    jump           #8419      
#8418: 
    setargs                   1 0
    push           217        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    callproc       &pc_genss.genbyte 
    jump           #8419      
#8416: 
    setargs                   2 0
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_popcnt 
    jump           #8419      
#8376: 
    setargs                   3 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_bsf 
    jump           #8419      
#8340: 
    jump           #8419      
#8341: 
    jump           #8419      
#8337: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "*** Can't do opcode" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pci_mcl.mclnames 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "line"     u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.alineno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           "M.OPCODE=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           "M_HALT="  u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           148        i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "STOPPING" u64 
    callproc       &pci_mcl.axerror 
#8419: 
#8460: 
    retproc                   
End


Proc pc_genss.genbyte:
    param          pc_genss.genbyte.x i64 
    procentry                 
    push           pc_genss.genbyte.x i64 
    push           pc_genss.currdata u64 
    push           8          
    addrefoff                 u64 1 0
    loadincr                  u64 1
    popptr                    u8 
#8462: 
    retproc                   
End


Proc pc_genss.genword:
    param          pc_genss.genword.x i64 
    procentry                 
    setargs                   2 0
    push           pc_genss.genword.x i64 
    push           pc_genss.currdata u64 
    callproc       &pc_genss.addword 
#8464: 
    retproc                   
End


Proc pc_genss.gendword:
    param          pc_genss.gendword.x i64 
    procentry                 
    setargs                   2 0
    push           pc_genss.gendword.x i64 
    push           pc_genss.currdata u64 
    callproc       &pc_genss.adddword 
#8466: 
    retproc                   
End


Proc pc_genss.genqword:
    param          pc_genss.genqword.x i64 
    procentry                 
    setargs                   2 0
    push           pc_genss.genqword.x i64 
    push           pc_genss.currdata u64 
    callproc       &pc_genss.addqword 
#8468: 
    retproc                   
End


Proc pc_genss.genopnd:
    param          pc_genss.genopnd.a u64 
    param          pc_genss.genopnd.size i64 
    local          pc_genss.genopnd.s u64 
    local          pc_genss.genopnd.x i64 
    local          pc_genss.genopnd.length i64 
    local          pc_genss.genopnd.x32 r32 
    procentry                 
    push           pc_genss.genopnd.size i64 
    push           0          i64 
    jumpne         #8470      i64 
    push           pc_genss.genopnd.a u64 
    push           8          
    pushptroff                u8 1 0
    pop            pc_genss.genopnd.size i64 
#8470: 
    push           pc_genss.genopnd.a u64 
    push           12         
    pushptroff                u8 1 0
    push           4          i64 
    casejumpeq     #8471      i64 0
    push           8          i64 
    casejumpeq     #8472      i64 0
    popstack                  i64 
    jump           #8473      
#8471: 
    push           pc_genss.genopnd.a u64 
    pushptr                   u64 
    pop            pc_genss.genopnd.s u64 
    setargs                   1 0
    push           pc_genss.genopnd.s u64 
    callfn         &strlen    i64 
    pop            pc_genss.genopnd.length i64 
    push           pc_genss.genopnd.length i64 
    push           100        i64 
    jumple         #8474      i64 
    setargs                   2 0
    push           1024       i64 
    push           pc_genss.genopnd.length i64 
    push           1          i64 
    add                       i64 
    max                       i64 
    push           pc_genss.currdata u64 
    callproc       &pc_genss.buffercheck 
#8474: 
    jump           #8475      
#8476: 
    setargs                   1 0
    push           &pc_genss.genopnd.s 
    loadincr                  u64 1
    pushptr                   u8 
    callproc       &pc_genss.genbyte 
#8475: 
    push           pc_genss.genopnd.s u64 
    pushptr                   u8 
    jumptrue       #8476      u64 
#8477: 
    jump           #8478      
    jump           #8479      
#8472: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "GENSS/NAME OPND" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #8479      
#8473: 
#8479: 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.genopnd.a u64 
    callfn         &pc_genss.getdef u64 
    jumpfalse      #8480      u64 
    push           pc_genss.genopnd.size i64 
    push           2          i64 
    jumpgt         #8480      i64 
    setargs                   1 0
    push           "8/16-BIT RELOC" u64 
    callproc       &pci_mcl.axerror 
#8480: 
    push           pc_genss.genopnd.size i64 
    push           1          i64 
    casejumpeq     #8481      i64 0
    push           2          i64 
    casejumpeq     #8482      i64 0
    push           4          i64 
    casejumpeq     #8483      i64 0
    push           8          i64 
    casejumpeq     #8484      i64 0
    popstack                  i64 
    jump           #8485      
#8481: 
    setargs                   1 0
    push           pc_genss.genopnd.a u64 
    pushptr                   i64 
    callproc       &pc_genss.genbyte 
    jump           #8486      
#8482: 
    setargs                   1 0
    push           pc_genss.genopnd.a u64 
    pushptr                   i64 
    callproc       &pc_genss.genword 
    jump           #8486      
#8483: 
    push           pc_genss.genopnd.a u64 
    push           12         
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8487      i64 0
    push           2          i64 
    casejumpeq     #8488      i64 0
    push           3          i64 
    casejumpeq     #8489      i64 0
    push           4          i64 
    casejumpeq     #8490      i64 0
    push           5          i64 
    casejumpeq     #8491      i64 0
    push           7          i64 
    casejumpeq     #8491      i64 0
    push           8          i64 
    casejumpeq     #8492      i64 0
    popstack                  i64 
    jump           #8493      
#8487: 
    setargs                   1 0
    push           pc_genss.genopnd.a u64 
    pushptr                   i64 
    callproc       &pc_genss.gendword 
    jump           #8494      
#8488: 
    push           pc_genss.genopnd.a u64 
    pushptr                   r64 
    fnarrow                   r32 r64 
    pop            pc_genss.genopnd.x32 r32 
    setargs                   1 0
    push           pc_genss.genopnd.x32 r32 
    typepun                   i32 void 0
    callproc       &pc_genss.gendword 
    jump           #8494      
#8489: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "\t\tOPND/REALMEM4" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #8494      
#8490: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "\t\tOPND/STRINGIMM4" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #8494      
#8491: 
    setargs                   1 0
    push           pc_genss.genopnd.a u64 
    callproc       &pc_genss.genabs32 
    jump           #8494      
#8492: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "\t\tOPND/NAME4" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #8494      
#8493: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pci_mcl.valtypenames 
    push           pc_genss.genopnd.a u64 
    push           12         
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "OPND/4/VALTYPE?" u64 
    callproc       &pci_mcl.axerror 
#8494: 
    jump           #8486      
#8484: 
    push           pc_genss.genopnd.a u64 
    push           12         
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8495      i64 0
    push           2          i64 
    casejumpeq     #8496      i64 0
    push           3          i64 
    casejumpeq     #8497      i64 0
    push           4          i64 
    casejumpeq     #8498      i64 0
    push           5          i64 
    casejumpeq     #8499      i64 0
    push           7          i64 
    casejumpeq     #8499      i64 0
    push           8          i64 
    casejumpeq     #8500      i64 0
    popstack                  i64 
    jump           #8501      
#8495: 
    setargs                   1 0
    push           pc_genss.genopnd.a u64 
    pushptr                   i64 
    callproc       &pc_genss.genqword 
    jump           #8502      
#8496: 
    setargs                   1 0
    push           pc_genss.genopnd.a u64 
    pushptr                   r64 
    typepun                   i64 void 0
    callproc       &pc_genss.genqword 
    jump           #8502      
#8497: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "\t\tOPND/REALMEM8" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.alineno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #8502      
#8498: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "\t\tOPND/STRINGIMM8" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #8502      
#8499: 
    setargs                   1 0
    push           pc_genss.genopnd.a u64 
    callproc       &pc_genss.genabs64 
    jump           #8502      
#8500: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "\t\tOPND/NAME8" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #8502      
#8501: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "HERE"     u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pci_mcl.valtypenames 
    push           pc_genss.genopnd.a u64 
    push           12         
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "OPND/8/VALTYPE?" u64 
    callproc       &pci_mcl.axerror 
#8502: 
    jump           #8486      
#8485: 
#8486: 
#8478: 
    retproc                   
End


Proc pc_genss.addrelocitem:
    param          pc_genss.addrelocitem.reloctype i64 
    param          pc_genss.addrelocitem.d u64 
    local          pc_genss.addrelocitem.r u64 
    local          pc_genss.addrelocitem.stindex i64 
    local          pc_genss.addrelocitem.adjust i64 
    procentry                 
    setargs                   1 0
    push           pc_genss.addrelocitem.d u64 
    callfn         &pc_genss.getstindex i64 
    pop            pc_genss.addrelocitem.stindex i64 
    push           4          i64 
    pop            pc_genss.addrelocitem.adjust i64 
    push           pc_genss.addrelocitem.reloctype i64 
    push           1          i64 
    jumpne         #8504      i64 
    push           8          i64 
    pop            pc_genss.addrelocitem.adjust i64 
#8504: 
    setargs                   1 0
    push           32         i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pc_genss.addrelocitem.r u64 
    push           pc_genss.currrelocs u64 
    push           pc_genss.addrelocitem.r u64 
    push           0          
    popptroff                 u64 1 0
    push           pc_genss.addrelocitem.reloctype i64 
    push           pc_genss.addrelocitem.r u64 
    push           8          
    popptroff                 i64 1 0
    setargs                   1 0
    push           1          i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           pc_genss.addrelocitem.adjust i64 
    sub                       i64 
    push           pc_genss.addrelocitem.r u64 
    push           16         
    popptroff                 i64 1 0
    push           pc_genss.addrelocitem.stindex i64 
    push           pc_genss.addrelocitem.r u64 
    push           24         
    popptroff                 i64 1 0
    push           &pc_genss.nrelocs 
    incr                      i64 1
    push           pc_genss.addrelocitem.r u64 
    pop            pc_genss.currrelocs u64 
#8505: 
    retproc                   
End


Proc pc_genss.getstindex: i64
    param          pc_genss.getstindex.d u64 
    procentry                 
    push           pc_genss.getstindex.d u64 
    push           36         
    pushptroff                i32 1 0
    push           0          i64 
    jumpne         #8507      i64 
    push           pci_mcl.ss_nsymbols i64 
    push           pci_mcl.ss_symboltablesize i64 
    jumplt         #8508      i64 
    setargs                   0 0
    callproc       &pc_genss.extendsymboltable 
#8508: 
    push           &pci_mcl.ss_nsymbols 
    incrload                  i64 1
    push           pc_genss.getstindex.d u64 
    push           36         
    popptroff                 i32 1 0
    push           pc_genss.getstindex.d u64 
    push           pci_mcl.ss_symboltable u64 
    push           pc_genss.getstindex.d u64 
    push           36         
    pushptroff                i32 1 0
    popptroff                 u64 8 -8
    push           pc_genss.getstindex.d u64 
    push           30         
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #8509      i64 
    push           pc_genss.getstindex.d u64 
    push           46         
    pushptroff                u16 1 0
    push           1          i64 
    dotindex                  i64 
    jumpfalse      #8510      u64 
    push           1          i64 
    push           pc_genss.getstindex.d u64 
    push           30         
    popptroff                 u8 1 0
#8510: 
#8509: 
#8507: 
    push           pc_genss.getstindex.d u64 
    push           36         
    pushptroff                i32 1 0
    setret                    i64 
    jump           #8511      
#8511: 
    retfn                     i64 
End


Proc pc_genss.genrel32:
    param          pc_genss.genrel32.a u64 
    local          pc_genss.genrel32.d u64 
    procentry                 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.genrel32.a u64 
    callfn         &pc_genss.getdef u64 
    pop            pc_genss.genrel32.d u64 
    push           pc_genss.genrel32.d u64 
    push           0          u64 
    jumpne         #8513      u64 
    setargs                   1 0
    push           pc_genss.genrel32.a u64 
    pushptr                   i64 
    callproc       &pc_genss.gendword 
    jump           #8514      
#8513: 
    push           pc_genss.genrel32.d u64 
    push           29         
    pushptroff                u8 1 0
    push           2          i64 
    casejumpeq     #8515      i64 0
    push           1          i64 
    casejumpeq     #8516      i64 0
    popstack                  i64 
    jump           #8517      
#8515: 
    push           pc_genss.genrel32.d u64 
    push           30         
    pushptroff                u8 1 0
    push           pc_genss.currseg i64 
    jumpeq         #8518      i64 
    setargs                   1 0
    push           "Rel label across segments" u64 
    callproc       &pci_mcl.axerror 
#8518: 
    setargs                   1 0
    push           pc_genss.genrel32.d u64 
    push           32         
    pushptroff                i32 1 0
    setargs                   1 0
    push           2          i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           4          i64 
    add                       i64 
    sub                       i64 
    push           pc_genss.genrel32.a u64 
    push           14         
    pushptroff                i32 1 0
    add                       i64 
    callproc       &pc_genss.gendword 
    jump           #8519      
#8516: 
    setargs                   4 0
    push           0          i64 
    push           4          i64 
    setargs                   1 0
    push           3          i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           pc_genss.genrel32.d u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_genss.addfwdref u64 
    push           pc_genss.genrel32.d u64 
    push           8          
    popptroff                 u64 1 0
    setargs                   1 0
    push           pc_genss.genrel32.a u64 
    push           14         
    pushptroff                i32 1 0
    callproc       &pc_genss.gendword 
    jump           #8519      
#8517: 
    setargs                   1 0
    push           pc_genss.genrel32.a u64 
    push           14         
    pushptroff                i32 1 0
    callproc       &pc_genss.gendword 
    setargs                   2 0
    push           pc_genss.genrel32.d u64 
    push           4          i64 
    callproc       &pc_genss.addrelocitem 
#8519: 
#8514: 
    retproc                   
End


Proc pc_genss.getdef: u64
    param          pc_genss.getdef.a u64 
    param          pc_genss.getdef.dneeded i64 
    local          pc_genss.getdef.d u64 
    procentry                 
    push           pc_genss.getdef.a u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    setjumpeq      #8521      i64 
    push           2          i64 
    setjumpne      #8522      i64 
#8521: 
    push           pc_genss.getdef.a u64 
    push           12         
    pushptroff                u8 1 0
    push           7          i64 
    casejumpeq     #8523      i64 0
    push           5          i64 
    casejumpeq     #8524      i64 0
    popstack                  i64 
    jump           #8525      
#8523: 
    push           pci_mcl.labeldeftable u64 
    push           pc_genss.getdef.a u64 
    pushptr                   i64 
    pushptroff                u64 8 -8
    setret                    u64 
    jump           #8526      
    jump           #8527      
#8524: 
    push           pc_genss.getdef.a u64 
    pushptr                   u64 
    pop            pc_genss.getdef.d u64 
    push           pc_genss.getdef.d u64 
    push           29         
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #8528      i64 
    push           pc_genss.getdef.d u64 
    push           46         
    pushptroff                u16 1 0
    push           1          i64 
    dotindex                  i64 
    jumptrue       #8529      u64 
    push           1          i64 
    push           pc_genss.getdef.d u64 
    push           29         
    popptroff                 u8 1 0
#8529: 
#8528: 
    push           pc_genss.getdef.d u64 
    setret                    u64 
    jump           #8526      
    jump           #8527      
#8525: 
#8527: 
#8522: 
    push           pc_genss.getdef.dneeded i64 
    jumpfalse      #8530      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pci_mcl.opndnames_ma 
    push           pc_genss.getdef.a u64 
    push           9          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pci_mcl.valtypenames 
    push           pc_genss.getdef.a u64 
    push           12         
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "getdef/no def" u64 
    callproc       &pci_mcl.axerror 
#8530: 
    push           0          u64 
    setret                    u64 
    jump           #8526      
#8526: 
    retfn                     u64 
End


Proc pc_genss.genabs32:
    param          pc_genss.genabs32.a u64 
    local          pc_genss.genabs32.d u64 
    procentry                 
    setargs                   2 0
    push           1          i64 
    push           pc_genss.genabs32.a u64 
    callfn         &pc_genss.getdef u64 
    pop            pc_genss.genabs32.d u64 
    push           pc_genss.genabs32.d u64 
    push           29         
    pushptroff                u8 1 0
    push           2          i64 
    casejumpeq     #8532      i64 0
    push           1          i64 
    casejumpeq     #8533      i64 0
    popstack                  i64 
    jump           #8534      
#8532: 
    setargs                   1 0
    push           pc_genss.genabs32.d u64 
    push           32         
    pushptroff                i32 1 0
    push           pc_genss.genabs32.a u64 
    push           14         
    pushptroff                i32 1 0
    add                       i64 
    callproc       &pc_genss.gendword 
    setargs                   2 0
    push           pc_genss.genabs32.d u64 
    push           2          i64 
    callproc       &pc_genss.addrelocitem 
    jump           #8535      
#8533: 
    setargs                   4 0
    push           pc_genss.currseg i64 
    push           2          i64 
    setargs                   1 0
    push           4          i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           pc_genss.genabs32.d u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_genss.addfwdref u64 
    push           pc_genss.genabs32.d u64 
    push           8          
    popptroff                 u64 1 0
    push           pc_genss.genabs32.d u64 
    push           16         
    pushptroff                u64 1 0
    jumpfalse      #8536      u64 
    push           pc_genss.genabs32.d u64 
    push           16         
    pushptroff                u64 1 0
    push           1          
    pushptroff                u8 1 0
    push           18         i64 
    setjumpeq      #8537      i64 
    push           19         i64 
    setjumpne      #8536      i64 
#8537: 
    setargs                   1 0
    push           pc_genss.genabs32.d u64 
    push           32         
    pushptroff                i32 1 0
    push           pc_genss.genabs32.a u64 
    push           14         
    pushptroff                i32 1 0
    add                       i64 
    callproc       &pc_genss.gendword 
    jump           #8538      
#8536: 
    setargs                   1 0
    push           pc_genss.genabs32.a u64 
    push           14         
    pushptroff                i32 1 0
    callproc       &pc_genss.gendword 
    setargs                   2 0
    push           pc_genss.genabs32.d u64 
    push           2          i64 
    callproc       &pc_genss.addrelocitem 
#8538: 
    jump           #8535      
#8534: 
    setargs                   1 0
    push           pc_genss.genabs32.a u64 
    push           14         
    pushptroff                i32 1 0
    callproc       &pc_genss.gendword 
    setargs                   2 0
    push           pc_genss.genabs32.d u64 
    push           2          i64 
    callproc       &pc_genss.addrelocitem 
#8535: 
#8539: 
    retproc                   
End


Proc pc_genss.genabs64:
    param          pc_genss.genabs64.a u64 
    local          pc_genss.genabs64.d u64 
    procentry                 
    setargs                   2 0
    push           1          i64 
    push           pc_genss.genabs64.a u64 
    callfn         &pc_genss.getdef u64 
    pop            pc_genss.genabs64.d u64 
    push           pc_genss.genabs64.d u64 
    push           29         
    pushptroff                u8 1 0
    push           2          i64 
    casejumpeq     #8541      i64 0
    push           1          i64 
    casejumpeq     #8542      i64 0
    popstack                  i64 
    jump           #8543      
#8541: 
    setargs                   1 0
    push           pc_genss.genabs64.d u64 
    push           32         
    pushptroff                i32 1 0
    push           pc_genss.genabs64.a u64 
    push           14         
    pushptroff                i32 1 0
    add                       i64 
    callproc       &pc_genss.genqword 
    setargs                   2 0
    push           pc_genss.genabs64.d u64 
    push           1          i64 
    callproc       &pc_genss.addrelocitem 
    jump           #8544      
#8542: 
    setargs                   4 0
    push           pc_genss.currseg i64 
    push           1          i64 
    setargs                   1 0
    push           5          i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           pc_genss.genabs64.d u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_genss.addfwdref u64 
    push           pc_genss.genabs64.d u64 
    push           8          
    popptroff                 u64 1 0
    push           pc_genss.genabs64.d u64 
    push           16         
    pushptroff                u64 1 0
    jumpfalse      #8545      u64 
    push           pc_genss.genabs64.d u64 
    push           16         
    pushptroff                u64 1 0
    push           1          
    pushptroff                u8 1 0
    push           18         i64 
    setjumpeq      #8546      i64 
    push           19         i64 
    setjumpne      #8545      i64 
#8546: 
    setargs                   1 0
    push           pc_genss.genabs64.d u64 
    push           32         
    pushptroff                i32 1 0
    push           pc_genss.genabs64.a u64 
    push           14         
    pushptroff                i32 1 0
    add                       i64 
    callproc       &pc_genss.genqword 
    jump           #8547      
#8545: 
    setargs                   1 0
    push           pc_genss.genabs64.a u64 
    push           14         
    pushptroff                i32 1 0
    callproc       &pc_genss.genqword 
    setargs                   2 0
    push           pc_genss.genabs64.d u64 
    push           1          i64 
    callproc       &pc_genss.addrelocitem 
#8547: 
    jump           #8544      
#8543: 
    setargs                   1 0
    push           pc_genss.genabs64.a u64 
    push           14         
    pushptroff                i32 1 0
    callproc       &pc_genss.genqword 
    setargs                   2 0
    push           pc_genss.genabs64.d u64 
    push           1          i64 
    callproc       &pc_genss.addrelocitem 
#8544: 
#8548: 
    retproc                   
End


Proc pc_genss.getrel32: i64
    param          pc_genss.getrel32.d u64 
    param          pc_genss.getrel32.offset i64 
    procentry                 
    startmult                 
    push           pc_genss.getrel32.d u64 
    push           29         
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #8550      i64 
    push           pc_genss.getrel32.d u64 
    push           30         
    pushptroff                u8 1 0
    push           pc_genss.currseg i64 
    jumpeq         #8551      i64 
    setargs                   1 0
    push           "Rel label across segments2" u64 
    callproc       &pci_mcl.axerror 
#8551: 
    push           pc_genss.getrel32.d u64 
    push           32         
    pushptroff                i32 1 0
    push           pc_genss.getrel32.offset i64 
    push           1          i64 
    add                       i64 
    sub                       i64 
    resetmult                 
    jump           #8552      
#8550: 
    push           2147483647 i64 
    endmult                   
#8552: 
    setret                    i64 
    jump           #8553      
#8553: 
    retfn                     i64 
End


Proc pc_genss.dofwdrefs:
    param          pc_genss.dofwdrefs.d u64 
    local          pc_genss.dofwdrefs.f u64 
    local          pc_genss.dofwdrefs.offset i64 
    local          pc_genss.dofwdrefs.seg i64 
    local          pc_genss.dofwdrefs.p8 u64 
    local          pc_genss.dofwdrefs.p32 u64 
    local          pc_genss.dofwdrefs.p64 u64 
    local          pc_genss.dofwdrefs.data u64 
    procentry                 
    push           pc_genss.dofwdrefs.d u64 
    push           8          
    pushptroff                u64 1 0
    push           0          u64 
    jumpne         #8555      u64 
    jump           #8556      
#8555: 
    push           pc_genss.dofwdrefs.d u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_genss.dofwdrefs.f u64 
    jump           #8557      
#8558: 
    push           pc_genss.dofwdrefs.f u64 
    push           8          
    pushptroff                i32 1 0
    pop            pc_genss.dofwdrefs.offset i64 
    push           pc_genss.dofwdrefs.f u64 
    push           12         
    pushptroff                i16 1 0
    push           4          i64 
    casejumpeq     #8559      i64 0
    push           2          i64 
    casejumpeq     #8560      i64 0
    push           1          i64 
    casejumpeq     #8560      i64 0
    push           6          i64 
    casejumpeq     #8561      i64 0
    popstack                  i64 
    jump           #8562      
#8559: 
    setargs                   2 0
    push           pc_genss.dofwdrefs.offset i64 
    push           pc_genss.currdata u64 
    callfn         &pc_genss.bufferelemptr u64 
    pop            pc_genss.dofwdrefs.p32 u64 
    push           pc_genss.dofwdrefs.d u64 
    push           32         
    pushptroff                i32 1 0
    push           pc_genss.dofwdrefs.offset i64 
    sub                       i64 
    push           4          i64 
    sub                       i64 
    push           pc_genss.dofwdrefs.p32 u64 
    popptr                    i32 
    jump           #8563      
#8560: 
    push           pc_genss.dofwdrefs.f u64 
    push           14         
    pushptroff                i16 1 0
    push           1          i64 
    casejumpeq     #8564      i64 0
    push           3          i64 
    casejumpeq     #8565      i64 0
    push           2          i64 
    casejumpeq     #8566      i64 0
    popstack                  i64 
    jump           #8567      
#8564: 
    push           pci_mcl.ss_code u64 
    pop            pc_genss.dofwdrefs.data u64 
    jump           #8568      
#8565: 
    setargs                   1 0
    push           "Fwd ref in zdata" u64 
    callproc       &pci_mcl.axerror 
    jump           #8568      
#8566: 
    push           pci_mcl.ss_idata u64 
    pop            pc_genss.dofwdrefs.data u64 
    jump           #8568      
#8567: 
#8568: 
    setargs                   2 0
    push           pc_genss.dofwdrefs.offset i64 
    push           pc_genss.dofwdrefs.data u64 
    callfn         &pc_genss.bufferelemptr u64 
    pop            pc_genss.dofwdrefs.p32 u64 
    push           pc_genss.dofwdrefs.f u64 
    push           12         
    pushptroff                i16 1 0
    push           2          i64 
    jumpne         #8569      i64 
    push           pc_genss.dofwdrefs.p32 u64 
    pushptr                   i32 
    push           pc_genss.dofwdrefs.d u64 
    push           32         
    pushptroff                i32 1 0
    add                       i64 
    push           pc_genss.dofwdrefs.p32 u64 
    popptr                    i32 
    jump           #8570      
#8569: 
    push           pc_genss.dofwdrefs.p32 u64 
    pop            pc_genss.dofwdrefs.p64 u64 
    push           pc_genss.dofwdrefs.p64 u64 
    pushptr                   i64 
    push           pc_genss.dofwdrefs.d u64 
    push           32         
    pushptroff                i32 1 0
    add                       i64 
    push           pc_genss.dofwdrefs.p64 u64 
    popptr                    i64 
#8570: 
    jump           #8563      
#8561: 
    setargs                   2 0
    push           pc_genss.dofwdrefs.offset i64 
    push           pc_genss.currdata u64 
    callfn         &pc_genss.bufferelemptr u64 
    pop            pc_genss.dofwdrefs.p8 u64 
    push           pc_genss.dofwdrefs.d u64 
    push           32         
    pushptroff                i32 1 0
    push           pc_genss.dofwdrefs.offset i64 
    sub                       i64 
    push           1          i64 
    sub                       i64 
    push           pc_genss.dofwdrefs.p8 u64 
    popptr                    u8 
    jump           #8563      
#8562: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pc_objdecls.relocnames 
    push           pc_genss.dofwdrefs.f u64 
    push           12         
    pushptroff                i16 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_genss.dofwdrefs.d u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "DOFWDREFS/CAN'T DO RELTYPE" u64 
    callproc       &pci_mcl.axerror 
#8563: 
    push           pc_genss.dofwdrefs.f u64 
    pushptr                   u64 
    pop            pc_genss.dofwdrefs.f u64 
#8557: 
    push           pc_genss.dofwdrefs.f u64 
    jumptrue       #8558      u64 
#8571: 
#8556: 
    retproc                   
End


Proc pc_genss.genrex:
    procentry                 
    push           pc_genss.sizeoverride i64 
    jumpfalse      #8573      i64 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
#8573: 
    push           pc_genss.addroverride i64 
    jumpfalse      #8574      i64 
    setargs                   1 0
    push           103        i64 
    callproc       &pc_genss.genbyte 
#8574: 
    push           pc_genss.rex i64 
    jumpfalse      #8575      i64 
    push           pc_genss.rex i64 
    push           64         i64 
    jumpge         #8576      i64 
    setargs                   1 0
    push           64         i64 
    push           pc_genss.rex i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    jump           #8577      
#8576: 
    setargs                   1 0
    push           pc_genss.rex i64 
    callproc       &pc_genss.genbyte 
#8577: 
#8575: 
#8578: 
    retproc                   
End


Proc pc_genss.isbytesized: i64
    param          pc_genss.isbytesized.x i64 
    procentry                 
    startmult                 
    push           -128       i64 
    push           pc_genss.isbytesized.x i64 
    jumpgt         #8580      i64 
    push           pc_genss.isbytesized.x i64 
    push           127        i64 
    jumpgt         #8580      i64 
    push           1          
    resetmult                 
    jump           #8581      
#8580: 
    push           0          
    endmult                   
#8581: 
    setret                    i64 
    jump           #8582      
#8582: 
    retfn                     i64 
End


Proc pc_genss.isdwordsized: i64
    param          pc_genss.isdwordsized.x i64 
    procentry                 
    startmult                 
    push           -2147483648 i64 
    push           pc_genss.isdwordsized.x i64 
    jumpgt         #8584      i64 
    push           pc_genss.isdwordsized.x i64 
    push           2147483647 i64 
    jumpgt         #8584      i64 
    push           1          
    resetmult                 
    jump           #8585      
#8584: 
    push           0          
    endmult                   
#8585: 
    setret                    i64 
    jump           #8586      
#8586: 
    retfn                     i64 
End


Proc pc_genss.do_push:
    param          pc_genss.do_push.a u64 
    local          pc_genss.do_push.code i64 
    local          pc_genss.do_push.am i64 
    procentry                 
    push           pc_genss.do_push.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8588      i64 0
    push           2          i64 
    casejumpeq     #8589      i64 0
    push           3          i64 
    casejumpeq     #8590      i64 0
    popstack                  i64 
    jump           #8591      
#8588: 
    push           pc_genss.do_push.a u64 
    push           8          
    pushptroff                u8 1 0
    push           8          i64 
    jumpeq         #8592      i64 
    setargs                   1 0
    push           "pushreg not 64-bit" u64 
    callproc       &pci_mcl.axerror 
#8592: 
    push           &pci_mcl.regcodes 
    push           pc_genss.do_push.a u64 
    push           10         
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    pop            pc_genss.do_push.code i64 
    push           pc_genss.do_push.code i64 
    push           8          i64 
    jumplt         #8593      i64 
    push           1          i64 
    pop            pc_genss.rex i64 
    push           &pc_genss.do_push.code 
    push           7          i64 
    iandto                    i64 
#8593: 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           80         i64 
    push           pc_genss.do_push.code i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    jump           #8594      
#8589: 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_push.a u64 
    callfn         &pc_genss.getdef u64 
    jumpfalse      #8595      u64 
    setargs                   1 0
    push           104        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           4          i64 
    push           pc_genss.do_push.a u64 
    callproc       &pc_genss.genopnd 
    jump           #8596      
#8595: 
    setargs                   1 0
    push           pc_genss.do_push.a u64 
    pushptr                   i64 
    callfn         &pc_genss.isbytesized i64 
    jumpfalse      #8597      i64 
    setargs                   1 0
    push           106        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_push.a u64 
    pushptr                   i64 
    callproc       &pc_genss.genbyte 
    jump           #8596      
#8597: 
    setargs                   1 0
    push           pc_genss.do_push.a u64 
    pushptr                   i64 
    callfn         &pc_genss.isdwordsized i64 
    jumpfalse      #8598      i64 
    setargs                   1 0
    push           104        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_push.a u64 
    pushptr                   i64 
    callproc       &pc_genss.gendword 
    jump           #8596      
#8598: 
    setargs                   1 0
    push           "push imm value too large" u64 
    callproc       &pci_mcl.axerror 
#8596: 
    jump           #8594      
#8590: 
    push           pc_genss.do_push.a u64 
    push           8          
    pushptroff                u8 1 0
    push           8          i64 
    jumpeq         #8599      i64 
    setargs                   1 0
    push           "push not 64-bit" u64 
    callproc       &pci_mcl.axerror 
#8599: 
    setargs                   2 0
    push           6          i64 
    push           pc_genss.do_push.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_push.am i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           255        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_push.am i64 
    push           pc_genss.do_push.a u64 
    callproc       &pc_genss.genamode 
    jump           #8594      
#8591: 
    setargs                   1 0
    push           "push opnd?" u64 
    callproc       &pci_mcl.axerror 
#8594: 
#8600: 
    retproc                   
End


Proc pc_genss.do_pop:
    param          pc_genss.do_pop.a u64 
    local          pc_genss.do_pop.code i64 
    local          pc_genss.do_pop.am i64 
    procentry                 
    push           pc_genss.do_pop.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8602      i64 0
    push           3          i64 
    casejumpeq     #8603      i64 0
    popstack                  i64 
    jump           #8604      
#8602: 
    push           pc_genss.do_pop.a u64 
    push           8          
    pushptroff                u8 1 0
    push           8          i64 
    jumpeq         #8605      i64 
    setargs                   1 0
    push           "popreg not 64-bit" u64 
    callproc       &pci_mcl.axerror 
#8605: 
    push           &pci_mcl.regcodes 
    push           pc_genss.do_pop.a u64 
    push           10         
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    pop            pc_genss.do_pop.code i64 
    push           pc_genss.do_pop.code i64 
    push           8          i64 
    jumplt         #8606      i64 
    push           1          i64 
    pop            pc_genss.rex i64 
    push           &pc_genss.do_pop.code 
    push           7          i64 
    iandto                    i64 
#8606: 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           88         i64 
    push           pc_genss.do_pop.code i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    jump           #8607      
#8603: 
    push           pc_genss.do_pop.a u64 
    push           8          
    pushptroff                u8 1 0
    push           8          i64 
    jumpeq         #8608      i64 
    setargs                   1 0
    push           "pop not 64-bit" u64 
    callproc       &pci_mcl.axerror 
#8608: 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_pop.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_pop.am i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           143        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_pop.am i64 
    push           pc_genss.do_pop.a u64 
    callproc       &pc_genss.genamode 
    jump           #8607      
#8604: 
    setargs                   1 0
    push           "pop opnd?" u64 
    callproc       &pci_mcl.axerror 
#8607: 
#8609: 
    retproc                   
End


Proc pc_genss.do_inc:
    param          pc_genss.do_inc.a u64 
    param          pc_genss.do_inc.code i64 
    local          pc_genss.do_inc.opc i64 
    local          pc_genss.do_inc.am i64 
    procentry                 
    startmult                 
    push           pc_genss.do_inc.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8611      i64 
    push           254        i64 
    resetmult                 
    jump           #8612      
#8611: 
    push           255        i64 
    endmult                   
#8612: 
    pop            pc_genss.do_inc.opc i64 
    push           pc_genss.do_inc.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8613      i64 0
    push           3          i64 
    casejumpeq     #8613      i64 0
    popstack                  i64 
    jump           #8614      
#8613: 
    setargs                   2 0
    push           pc_genss.do_inc.code i64 
    push           pc_genss.do_inc.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_inc.am i64 
    setargs                   1 0
    push           pc_genss.do_inc.a u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_inc.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           pc_genss.do_inc.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_inc.am i64 
    push           pc_genss.do_inc.a u64 
    callproc       &pc_genss.genamode 
    jump           #8615      
#8614: 
    setargs                   1 0
    push           "inc/opnd?" u64 
    callproc       &pci_mcl.axerror 
#8615: 
#8616: 
    retproc                   
End


Proc pc_genss.do_neg:
    param          pc_genss.do_neg.a u64 
    param          pc_genss.do_neg.code i64 
    local          pc_genss.do_neg.opc i64 
    local          pc_genss.do_neg.am i64 
    procentry                 
    startmult                 
    push           pc_genss.do_neg.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8618      i64 
    push           246        i64 
    resetmult                 
    jump           #8619      
#8618: 
    push           247        i64 
    endmult                   
#8619: 
    pop            pc_genss.do_neg.opc i64 
    push           pc_genss.do_neg.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8620      i64 0
    push           3          i64 
    casejumpeq     #8620      i64 0
    popstack                  i64 
    jump           #8621      
#8620: 
    setargs                   2 0
    push           pc_genss.do_neg.code i64 
    push           pc_genss.do_neg.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_neg.am i64 
    setargs                   1 0
    push           pc_genss.do_neg.a u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_neg.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           pc_genss.do_neg.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_neg.am i64 
    push           pc_genss.do_neg.a u64 
    callproc       &pc_genss.genamode 
    jump           #8622      
#8621: 
    setargs                   1 0
    push           "neg/div/etc opnd?" u64 
    callproc       &pci_mcl.axerror 
#8622: 
#8623: 
    retproc                   
End


Proc pc_genss.genamode:
    param          pc_genss.genamode.a u64 
    param          pc_genss.genamode.am i64 
    local          pc_genss.genamode.sib i64 
    local          pc_genss.genamode.mode i64 
    local          pc_genss.genamode.dispsize i64 
    local          pc_genss.genamode.offset i64 
    local          pc_genss.genamode.d u64 
    procentry                 
    push           pc_genss.genamode.am i64 
    push           16         i64 
    shr                       i64 
    pop            pc_genss.genamode.sib i64 
    push           pc_genss.genamode.am i64 
    push           8          i64 
    shr                       i64 
    push           255        i64 
    iand                      i64 
    pop            pc_genss.genamode.mode i64 
    push           pc_genss.genamode.am i64 
    push           255        i64 
    iand                      i64 
    pop            pc_genss.genamode.dispsize i64 
    setargs                   1 0
    push           pc_genss.genamode.mode i64 
    callproc       &pc_genss.genbyte 
    push           pc_genss.genamode.sib i64 
    push           0          i64 
    jumplt         #8625      i64 
    setargs                   1 0
    push           pc_genss.genamode.sib i64 
    callproc       &pc_genss.genbyte 
#8625: 
    push           pc_genss.genamode.dispsize i64 
    push           0          i64 
    casejumpeq     #8626      i64 0
    push           1          i64 
    casejumpeq     #8627      i64 0
    push           4          i64 
    casejumpeq     #8628      i64 0
    popstack                  i64 
    jump           #8629      
#8626: 
    jump           #8630      
#8627: 
    setargs                   2 0
    push           &pc_genss.genamode.offset 
    push           pc_genss.genamode.a u64 
    callproc       &pc_genss.getdispsize 
    setargs                   1 0
    push           pc_genss.genamode.offset i64 
    callproc       &pc_genss.genbyte 
    jump           #8630      
#8628: 
    push           pc_genss.genamode.a u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    casejumpeq     #8631      i64 0
    popstack                  i64 
    jump           #8632      
#8631: 
    push           pc_genss.genamode.a u64 
    push           12         
    pushptroff                u8 1 0
    push           5          i64 
    casejumpeq     #8633      i64 0
    push           7          i64 
    casejumpeq     #8633      i64 0
    push           0          i64 
    casejumpeq     #8634      i64 0
    popstack                  i64 
    jump           #8635      
#8633: 
    setargs                   1 0
    push           pc_genss.genamode.a u64 
    callproc       &pc_genss.genabs32 
    jump           #8636      
#8634: 
    setargs                   2 0
    push           &pc_genss.genamode.offset 
    push           pc_genss.genamode.a u64 
    callproc       &pc_genss.getdispsize 
    setargs                   1 0
    push           pc_genss.genamode.offset i64 
    callproc       &pc_genss.gendword 
    jump           #8636      
#8635: 
    setargs                   1 0
    push           "genam/3"  u64 
    callproc       &pci_mcl.axerror 
#8636: 
    jump           #8637      
#8632: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pci_mcl.opndnames_ma 
    push           pc_genss.genamode.a u64 
    push           9          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "GENAMODE/MODE?" u64 
    callproc       &pci_mcl.axerror 
#8637: 
    jump           #8630      
#8629: 
    setargs                   1 0
    push           "genamode size 2/8" u64 
    callproc       &pci_mcl.axerror 
#8630: 
#8638: 
    retproc                   
End


Proc pc_genss.makemodrm: i64
    param          pc_genss.makemodrm.mode i64 
    param          pc_genss.makemodrm.opc i64 
    param          pc_genss.makemodrm.rm i64 
    procentry                 
    push           pc_genss.makemodrm.mode i64 
    push           6          i64 
    shl                       i64 
    push           pc_genss.makemodrm.opc i64 
    push           3          i64 
    shl                       i64 
    add                       i64 
    push           pc_genss.makemodrm.rm i64 
    add                       i64 
    setret                    i64 
    jump           #8640      
#8640: 
    retfn                     i64 
End


Proc pc_genss.setopsize:
    param          pc_genss.setopsize.a u64 
    procentry                 
    push           pc_genss.setopsize.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8642      i64 0
    push           2          i64 
    casejumpeq     #8643      i64 0
    push           8          i64 
    casejumpeq     #8644      i64 0
    push           4          i64 
    casejumpeq     #8645      i64 0
    popstack                  i64 
    jump           #8646      
#8642: 
    jump           #8647      
#8643: 
    push           1          i64 
    pop            pc_genss.sizeoverride i64 
    jump           #8647      
#8644: 
    push           &pc_genss.rex 
    push           8          i64 
    iorto                     i64 
    jump           #8647      
#8645: 
    jump           #8647      
#8646: 
    setargs                   1 0
    push           "Operand size not set" u64 
    callproc       &pci_mcl.axerror 
#8647: 
#8648: 
    retproc                   
End


Proc pc_genss.setaddrsize:
    param          pc_genss.setaddrsize.a u64 
    procentry                 
    push           pc_genss.setaddrsize.a u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #8650      i64 
    push           pc_genss.setaddrsize.a u64 
    push           18         
    pushptroff                u8 1 0
    push           4          i64 
    jumpne         #8650      i64 
    push           1          i64 
    pop            pc_genss.addroverride i64 
#8650: 
#8651: 
    retproc                   
End


Proc pc_genss.getdispsize: i64
    param          pc_genss.getdispsize.a u64 
    param          pc_genss.getdispsize.offset u64 
    local          pc_genss.getdispsize.d u64 
    procentry                 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.getdispsize.a u64 
    callfn         &pc_genss.getdef u64 
    pop            pc_genss.getdispsize.d u64 
    push           pc_genss.getdispsize.a u64 
    push           14         
    pushptroff                i32 1 0
    push           pc_genss.getdispsize.offset u64 
    popptr                    i64 
    push           pc_genss.getdispsize.d u64 
    jumpfalse      #8653      u64 
    push           pc_genss.getdispsize.d u64 
    push           16         
    pushptroff                u64 1 0
    jumpfalse      #8654      u64 
    push           pc_genss.getdispsize.d u64 
    push           16         
    pushptroff                u64 1 0
    push           1          
    pushptroff                u8 1 0
    push           18         i64 
    setjumpeq      #8655      i64 
    push           19         i64 
    setjumpne      #8654      i64 
#8655: 
    push           pc_genss.getdispsize.offset u64 
    push           pc_genss.getdispsize.d u64 
    push           32         
    pushptroff                i32 1 0
    addto                     i64 
    jump           #8656      
#8654: 
    push           4          i64 
    setret                    i64 
    jump           #8657      
#8656: 
#8653: 
    startmult                 
    push           pc_genss.getdispsize.offset u64 
    pushptr                   i64 
    jumpfalse      #8658      i64 
    startmult                 
    setargs                   1 0
    push           pc_genss.getdispsize.offset u64 
    pushptr                   i64 
    callfn         &pc_genss.isbytesized i64 
    jumpfalse      #8659      i64 
    push           1          i64 
    resetmult                 
    jump           #8660      
#8659: 
    push           4          i64 
    endmult                   
#8660: 
    resetmult                 
    jump           #8661      
#8658: 
    push           0          i64 
    endmult                   
#8661: 
    setret                    i64 
    jump           #8657      
#8657: 
    retfn                     i64 
End


Proc pc_genss.genrm: i64
    param          pc_genss.genrm.a u64 
    param          pc_genss.genrm.opc i64 
    local          pc_genss.genrm.mode i64 
    local          pc_genss.genrm.rm i64 
    local          pc_genss.genrm.scale i64 
    local          pc_genss.genrm.dispsize i64 
    local          pc_genss.genrm.sib i64 
    local          pc_genss.genrm.index i64 
    local          pc_genss.genrm.base i64 
    local          pc_genss.genrm.reg i64 
    local          pc_genss.genrm.regix i64 
    local          pc_genss.genrm.code i64 
    local          pc_genss.genrm.offset i64 
    procentry                 
    push           0          i64 
    store          pc_genss.genrm.rm i64 
    pop            pc_genss.genrm.mode i64 
    push           0          i64 
    pop            pc_genss.genrm.scale i64 
    push           0          i64 
    pop            pc_genss.genrm.dispsize i64 
    push           -1         i64 
    pop            pc_genss.genrm.sib i64 
    push           pc_genss.genrm.a u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #8663      i64 
    push           pc_genss.genrm.a u64 
    push           18         
    pushptroff                u8 1 0
    push           4          i64 
    jumpne         #8663      i64 
    push           1          i64 
    pop            pc_genss.addroverride i64 
#8663: 
    push           pc_genss.genrm.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8664      i64 0
    push           3          i64 
    casejumpeq     #8665      i64 0
    push           5          i64 
    casejumpeq     #8666      i64 0
    popstack                  i64 
    jump           #8667      
#8664: 
    setargs                   1 0
    push           pc_genss.genrm.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcodeb i64 
    pop            pc_genss.genrm.code i64 
    setargs                   3 0
    push           pc_genss.genrm.dispsize i64 
    push           pc_genss.genrm.sib i64 
    setargs                   3 0
    push           pc_genss.genrm.code i64 
    push           pc_genss.genrm.opc i64 
    push           3          i64 
    callfn         &pc_genss.makemodrm i64 
    callfn         &pc_genss.makeam i64 
    setret                    i64 
    jump           #8668      
    jump           #8669      
#8665: 
    jump           #8669      
#8666: 
    setargs                   1 0
    push           pc_genss.genrm.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcodebx i64 
    pop            pc_genss.genrm.code i64 
    setargs                   3 0
    push           pc_genss.genrm.dispsize i64 
    push           pc_genss.genrm.sib i64 
    setargs                   3 0
    push           pc_genss.genrm.code i64 
    push           pc_genss.genrm.opc i64 
    push           3          i64 
    callfn         &pc_genss.makemodrm i64 
    callfn         &pc_genss.makeam i64 
    setret                    i64 
    jump           #8668      
    jump           #8669      
#8667: 
    setargs                   1 0
    push           "genrm not mem" u64 
    callproc       &pci_mcl.axerror 
#8669: 
    push           pc_genss.genrm.a u64 
    push           10         
    pushptroff                u8 1 0
    pop            pc_genss.genrm.reg i64 
    push           pc_genss.genrm.a u64 
    push           11         
    pushptroff                u8 1 0
    pop            pc_genss.genrm.regix i64 
    push           pc_genss.genrm.reg i64 
    push           pc_genss.genrm.regix i64 
    jumpne         #8670      i64 
    push           pc_genss.genrm.regix i64 
    push           0          i64 
    jumpne         #8670      i64 
    push           0          i64 
    pop            pc_genss.genrm.mode i64 
    push           4          i64 
    pop            pc_genss.genrm.rm i64 
    push           1          i64 
    pop            pc_genss.genrm.scale i64 
    push           4          i64 
    pop            pc_genss.genrm.index i64 
    push           5          i64 
    pop            pc_genss.genrm.base i64 
    push           4          i64 
    pop            pc_genss.genrm.dispsize i64 
    jump           #8671      
#8670: 
    push           pc_genss.genrm.a u64 
    push           13         
    pushptroff                u8 1 0
    push           1          i64 
    jumpgt         #8672      i64 
    push           pc_genss.genrm.regix i64 
    push           0          i64 
    jumpne         #8672      i64 
    setargs                   2 0
    push           &pc_genss.genrm.offset 
    push           pc_genss.genrm.a u64 
    callfn         &pc_genss.getdispsize i64 
    pop            pc_genss.genrm.dispsize i64 
    push           pc_genss.genrm.dispsize i64 
    jumpfalse      #8673      i64 
    startmult                 
    push           pc_genss.genrm.dispsize i64 
    push           1          i64 
    jumpne         #8674      i64 
    push           1          i64 
    resetmult                 
    jump           #8675      
#8674: 
    push           2          i64 
    endmult                   
#8675: 
    pop            pc_genss.genrm.mode i64 
#8673: 
    push           &pci_mcl.regcodes 
    push           pc_genss.genrm.reg i64 
    pushptroff                u8 1 0
    pop            pc_genss.genrm.rm i64 
    push           pc_genss.genrm.rm i64 
    push           4          i64 
    jumpeq         #8676      i64 
    push           pc_genss.genrm.rm i64 
    push           12         i64 
    jumpeq         #8676      i64 
    push           pc_genss.genrm.rm i64 
    pop            pc_genss.genrm.base i64 
    push           pc_genss.genrm.rm i64 
    push           5          i64 
    jumpeq         #8677      i64 
    push           pc_genss.genrm.rm i64 
    push           13         i64 
    jumpne         #8678      i64 
#8677: 
    push           pc_genss.genrm.dispsize i64 
    push           0          i64 
    jumpne         #8678      i64 
    push           1          i64 
    pop            pc_genss.genrm.mode i64 
    push           1          i64 
    pop            pc_genss.genrm.dispsize i64 
#8678: 
    push           0          i64 
    pop            pc_genss.genrm.index i64 
    jump           #8679      
#8676: 
    push           4          i64 
    pop            pc_genss.genrm.index i64 
    push           pc_genss.genrm.rm i64 
    pop            pc_genss.genrm.base i64 
    push           1          i64 
    pop            pc_genss.genrm.scale i64 
#8679: 
    jump           #8671      
#8672: 
    push           pc_genss.genrm.regix i64 
    jumpfalse      #8680      i64 
    push           pc_genss.genrm.reg i64 
    push           0          i64 
    jumpne         #8680      i64 
    push           4          i64 
    pop            pc_genss.genrm.dispsize i64 
    push           0          i64 
    pop            pc_genss.genrm.mode i64 
    push           4          i64 
    pop            pc_genss.genrm.rm i64 
    startmult                 
    push           pc_genss.genrm.a u64 
    push           13         
    pushptroff                u8 1 0
    jumpfalse      #8681      i64 
    push           pc_genss.genrm.a u64 
    push           13         
    pushptroff                u8 1 0
    resetmult                 
    jump           #8682      
#8681: 
    push           1          i64 
    endmult                   
#8682: 
    pop            pc_genss.genrm.scale i64 
    push           5          i64 
    pop            pc_genss.genrm.base i64 
    push           &pci_mcl.regcodes 
    push           pc_genss.genrm.regix i64 
    pushptroff                u8 1 0
    pop            pc_genss.genrm.index i64 
    push           pc_genss.genrm.regix i64 
    push           16         i64 
    jumpne         #8683      i64 
    setargs                   1 0
    push           "Scaled rstack?" u64 
    callproc       &pci_mcl.axerror 
#8683: 
    jump           #8671      
#8680: 
    setargs                   2 0
    push           &pc_genss.genrm.offset 
    push           pc_genss.genrm.a u64 
    callfn         &pc_genss.getdispsize i64 
    pop            pc_genss.genrm.dispsize i64 
    push           pc_genss.genrm.dispsize i64 
    jumpfalse      #8684      i64 
    startmult                 
    push           pc_genss.genrm.dispsize i64 
    push           1          i64 
    jumpne         #8685      i64 
    push           1          i64 
    resetmult                 
    jump           #8686      
#8685: 
    push           2          i64 
    endmult                   
#8686: 
    pop            pc_genss.genrm.mode i64 
#8684: 
    push           4          i64 
    pop            pc_genss.genrm.rm i64 
    startmult                 
    push           pc_genss.genrm.a u64 
    push           13         
    pushptroff                u8 1 0
    jumpfalse      #8687      i64 
    push           pc_genss.genrm.a u64 
    push           13         
    pushptroff                u8 1 0
    resetmult                 
    jump           #8688      
#8687: 
    push           1          i64 
    endmult                   
#8688: 
    pop            pc_genss.genrm.scale i64 
    push           pc_genss.genrm.reg i64 
    push           0          i64 
    jumpne         #8689      i64 
    push           5          i64 
    pop            pc_genss.genrm.base i64 
    jump           #8690      
#8689: 
    push           pc_genss.genrm.reg i64 
    push           15         i64 
    setjumpeq      #8691      i64 
    push           8          i64 
    setjumpne      #8692      i64 
#8691: 
    push           pc_genss.genrm.dispsize i64 
    push           0          i64 
    jumpne         #8692      i64 
    push           1          i64 
    pop            pc_genss.genrm.mode i64 
    push           1          i64 
    pop            pc_genss.genrm.dispsize i64 
#8692: 
    push           &pci_mcl.regcodes 
    push           pc_genss.genrm.reg i64 
    pushptroff                u8 1 0
    pop            pc_genss.genrm.base i64 
#8690: 
    push           pc_genss.genrm.regix i64 
    push           0          i64 
    jumpne         #8693      i64 
    push           4          i64 
    pop            pc_genss.genrm.index i64 
    jump           #8694      
#8693: 
    push           &pci_mcl.regcodes 
    push           pc_genss.genrm.regix i64 
    pushptroff                u8 1 0
    pop            pc_genss.genrm.index i64 
#8694: 
    push           pc_genss.genrm.regix i64 
    jumpfalse      #8695      i64 
    push           pc_genss.genrm.reg i64 
    jumptrue       #8695      i64 
    push           4          i64 
    pop            pc_genss.genrm.dispsize i64 
#8695: 
    push           pc_genss.genrm.regix i64 
    push           16         i64 
    jumpne         #8696      i64 
    push           pc_genss.genrm.scale i64 
    push           1          i64 
    jumple         #8696      i64 
    setargs                   1 0
    push           "Can't scale rstack" u64 
    callproc       &pci_mcl.axerror 
#8696: 
#8671: 
    push           pc_genss.genrm.index i64 
    push           8          i64 
    jumplt         #8697      i64 
    push           &pc_genss.rex 
    push           2          i64 
    iorto                     i64 
    push           &pc_genss.genrm.index 
    push           7          i64 
    iandto                    i64 
#8697: 
    push           pc_genss.genrm.base i64 
    push           8          i64 
    jumplt         #8698      i64 
    push           &pc_genss.rex 
    push           1          i64 
    iorto                     i64 
    push           &pc_genss.genrm.base 
    push           7          i64 
    iandto                    i64 
#8698: 
    push           pc_genss.genrm.scale i64 
    jumpfalse      #8699      i64 
    push           &pc_genss.genrm.scaletable 
    push           pc_genss.genrm.scale i64 
    pushptroff                i64 8 -8
    push           6          i64 
    shl                       i64 
    push           pc_genss.genrm.index i64 
    push           3          i64 
    shl                       i64 
    add                       i64 
    push           pc_genss.genrm.base i64 
    add                       i64 
    pop            pc_genss.genrm.sib i64 
#8699: 
    push           &pc_genss.genrm.rm 
    push           7          i64 
    iandto                    i64 
    setargs                   3 0
    push           pc_genss.genrm.dispsize i64 
    push           pc_genss.genrm.sib i64 
    setargs                   3 0
    push           pc_genss.genrm.rm i64 
    push           pc_genss.genrm.opc i64 
    push           pc_genss.genrm.mode i64 
    callfn         &pc_genss.makemodrm i64 
    callfn         &pc_genss.makeam i64 
    setret                    i64 
    jump           #8668      
#8668: 
    retfn                     i64 
End


Proc pc_genss.makeam: i64
    param          pc_genss.makeam.m i64 
    param          pc_genss.makeam.s i64 
    param          pc_genss.makeam.d i64 
    procentry                 
    push           pc_genss.makeam.s i64 
    push           16         i64 
    shl                       i64 
    push           pc_genss.makeam.m i64 
    push           8          i64 
    shl                       i64 
    add                       i64 
    push           pc_genss.makeam.d i64 
    add                       i64 
    setret                    i64 
    jump           #8701      
#8701: 
    retfn                     i64 
End


Proc pc_genss.do_arith:
    param          pc_genss.do_arith.a u64 
    param          pc_genss.do_arith.b u64 
    param          pc_genss.do_arith.code i64 
    local          pc_genss.do_arith.am i64 
    local          pc_genss.do_arith.regcode i64 
    local          pc_genss.do_arith.opc i64 
    local          pc_genss.do_arith.dispsize i64 
    local          pc_genss.do_arith.x i64 
    procentry                 
    push           pc_genss.do_arith.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8703      i64 0
    push           3          i64 
    casejumpeq     #8704      i64 0
    popstack                  i64 
    jump           #8705      
#8703: 
    push           pc_genss.do_arith.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8706      i64 0
    push           3          i64 
    casejumpeq     #8706      i64 0
    push           2          i64 
    casejumpeq     #8707      i64 0
    popstack                  i64 
    jump           #8708      
#8706: 
    setargs                   1 0
    push           pc_genss.do_arith.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_arith.regcode i64 
    setargs                   2 0
    push           pc_genss.do_arith.regcode i64 
    push           pc_genss.do_arith.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_arith.am i64 
    setargs                   1 0
    push           pc_genss.do_arith.a u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_arith.b u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_arith.a u64 
    callproc       &pc_genss.setopsize 
    push           pc_genss.do_arith.code i64 
    push           3          i64 
    shl                       i64 
    startmult                 
    push           pc_genss.do_arith.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8709      i64 
    push           2          i64 
    resetmult                 
    jump           #8710      
#8709: 
    push           3          i64 
    endmult                   
#8710: 
    ior                       i64 
    pop            pc_genss.do_arith.opc i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           pc_genss.do_arith.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_arith.am i64 
    push           pc_genss.do_arith.b u64 
    callproc       &pc_genss.genamode 
    jump           #8711      
#8707: 
!doregimm::
#8712: 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_arith.b u64 
    callfn         &pc_genss.getdef u64 
    jumpfalse      #8713      u64 
    push           pc_genss.do_arith.code i64 
    push           0          i64 
    jumplt         #8714      i64 
    push           pc_genss.do_arith.code i64 
    push           7          i64 
    jumple         #8715      i64 
#8714: 
    setargs                   1 0
    push           "non-add arith/label" u64 
    callproc       &pci_mcl.axerror 
#8715: 
    push           pc_genss.do_arith.a u64 
    push           8          
    pushptroff                u8 1 0
    push           4          i64 
    jumpge         #8716      i64 
    setargs                   1 0
    push           "add imm/size" u64 
    callproc       &pci_mcl.axerror 
#8716: 
    setargs                   2 0
    push           pc_genss.do_arith.code i64 
    push           pc_genss.do_arith.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_arith.am i64 
    setargs                   1 0
    push           pc_genss.do_arith.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           129        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_arith.am i64 
    push           pc_genss.do_arith.a u64 
    callproc       &pc_genss.genamode 
    setargs                   2 0
    push           4          i64 
    push           pc_genss.do_arith.b u64 
    callproc       &pc_genss.genopnd 
    jump           #8717      
#8713: 
    push           pc_genss.do_arith.b u64 
    pushptr                   i64 
    pop            pc_genss.do_arith.x i64 
    push           1          i64 
    pop            pc_genss.do_arith.dispsize i64 
    push           pc_genss.do_arith.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8718      i64 
    push           128        i64 
    pop            pc_genss.do_arith.opc i64 
    jump           #8719      
#8718: 
    push           -128       i64 
    push           pc_genss.do_arith.x i64 
    jumpgt         #8720      i64 
    push           pc_genss.do_arith.x i64 
    push           127        i64 
    jumpgt         #8720      i64 
    push           131        i64 
    pop            pc_genss.do_arith.opc i64 
    jump           #8719      
#8720: 
    push           -2147483648 i64 
    push           pc_genss.do_arith.x i64 
    jumpgt         #8721      i64 
    push           pc_genss.do_arith.x i64 
    push           4294967295 i64 
    jumple         #8722      i64 
#8721: 
    setargs                   1 0
    push           "3:exceeding word32 value" u64 
    callproc       &pci_mcl.axerror 
#8722: 
    push           129        i64 
    pop            pc_genss.do_arith.opc i64 
    startmult                 
    push           pc_genss.do_arith.a u64 
    push           8          
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #8723      i64 
    push           2          i64 
    resetmult                 
    jump           #8724      
#8723: 
    push           4          i64 
    endmult                   
#8724: 
    pop            pc_genss.do_arith.dispsize i64 
#8719: 
    setargs                   2 0
    push           pc_genss.do_arith.code i64 
    push           pc_genss.do_arith.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_arith.am i64 
    setargs                   1 0
    push           pc_genss.do_arith.a u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_arith.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           pc_genss.do_arith.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_arith.am i64 
    push           pc_genss.do_arith.a u64 
    callproc       &pc_genss.genamode 
    push           pc_genss.do_arith.dispsize i64 
    push           1          i64 
    casejumpeq     #8725      i64 0
    push           2          i64 
    casejumpeq     #8726      i64 0
    push           4          i64 
    casejumpeq     #8727      i64 0
    popstack                  i64 
    jump           #8728      
#8725: 
    setargs                   1 0
    push           pc_genss.do_arith.x i64 
    callproc       &pc_genss.genbyte 
    jump           #8729      
#8726: 
    setargs                   1 0
    push           pc_genss.do_arith.x i64 
    callproc       &pc_genss.genword 
    jump           #8729      
#8727: 
    setargs                   1 0
    push           pc_genss.do_arith.x i64 
    callproc       &pc_genss.gendword 
    jump           #8729      
#8728: 
#8729: 
    jump           #8711      
#8708: 
    setargs                   1 0
    push           "ADD reg,???" u64 
    callproc       &pci_mcl.axerror 
#8711: 
    jump           #8730      
#8704: 
    push           pc_genss.do_arith.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8731      i64 0
    push           2          i64 
    casejumpeq     #8732      i64 0
    popstack                  i64 
    jump           #8733      
#8731: 
    setargs                   1 0
    push           pc_genss.do_arith.b u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_arith.regcode i64 
    setargs                   2 0
    push           pc_genss.do_arith.regcode i64 
    push           pc_genss.do_arith.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_arith.am i64 
    setargs                   1 0
    push           pc_genss.do_arith.b u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_arith.b u64 
    callproc       &pc_genss.setopsize 
    push           pc_genss.do_arith.code i64 
    push           3          i64 
    shl                       i64 
    startmult                 
    push           pc_genss.do_arith.b u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8734      i64 
    push           0          i64 
    resetmult                 
    jump           #8735      
#8734: 
    push           1          i64 
    endmult                   
#8735: 
    ior                       i64 
    pop            pc_genss.do_arith.opc i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           pc_genss.do_arith.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_arith.am i64 
    push           pc_genss.do_arith.a u64 
    callproc       &pc_genss.genamode 
    jump           #8736      
#8732: 
    jump           #8712      
    jump           #8736      
#8733: 
    setargs                   1 0
    push           "ADD mem,???" u64 
    callproc       &pci_mcl.axerror 
#8736: 
    jump           #8730      
#8705: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pci_mcl.opndnames_ma 
    push           pc_genss.do_arith.a u64 
    push           9          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Can't add to this opnd" u64 
    callproc       &pci_mcl.axerror 
#8730: 
#8717: 
    retproc                   
End


Proc pc_genss.do_mov:
    param          pc_genss.do_mov.a u64 
    param          pc_genss.do_mov.b u64 
    local          pc_genss.do_mov.regcode i64 
    local          pc_genss.do_mov.am i64 
    local          pc_genss.do_mov.value i64 
    procentry                 
    push           pc_genss.do_mov.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8738      i64 0
    push           3          i64 
    casejumpeq     #8739      i64 0
    popstack                  i64 
    jump           #8740      
#8738: 
    push           pc_genss.do_mov.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8741      i64 0
    push           3          i64 
    casejumpeq     #8741      i64 0
    push           2          i64 
    casejumpeq     #8742      i64 0
    popstack                  i64 
    jump           #8743      
#8741: 
    push           pc_genss.do_mov.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_mov.b u64 
    push           8          
    pushptroff                u8 1 0
    jumpeq         #8744      i64 
    push           pc_genss.do_mov.b u64 
    push           8          
    pushptroff                u8 1 0
    jumpfalse      #8744      i64 
    setargs                   1 0
    push           "1:Opnd size mismatch" u64 
    callproc       &pci_mcl.axerror 
#8744: 
    setargs                   1 0
    push           pc_genss.do_mov.a u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_mov.b u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_mov.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_mov.regcode i64 
    setargs                   2 0
    push           pc_genss.do_mov.regcode i64 
    push           pc_genss.do_mov.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_mov.am i64 
    setargs                   1 0
    push           pc_genss.do_mov.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    startmult                 
    push           pc_genss.do_mov.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8745      i64 
    push           138        i64 
    resetmult                 
    jump           #8746      
#8745: 
    push           139        i64 
    endmult                   
#8746: 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_mov.am i64 
    push           pc_genss.do_mov.b u64 
    callproc       &pc_genss.genamode 
    jump           #8747      
#8742: 
    push           pc_genss.do_mov.b u64 
    pushptr                   i64 
    pop            pc_genss.do_mov.value i64 
    setargs                   1 0
    push           pc_genss.do_mov.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcodeb i64 
    pop            pc_genss.do_mov.regcode i64 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_mov.b u64 
    callfn         &pc_genss.getdef u64 
    jumpfalse      #8748      u64 
    push           pc_genss.do_mov.a u64 
    push           8          
    pushptroff                u8 1 0
    push           2          i64 
    jumpgt         #8748      i64 
    setargs                   1 0
    push           "mov imm?" u64 
    callproc       &pci_mcl.axerror 
#8748: 
    push           pc_genss.do_mov.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8749      i64 0
    push           2          i64 
    casejumpeq     #8750      i64 0
    push           4          i64 
    casejumpeq     #8751      i64 0
    popstack                  i64 
    jump           #8752      
#8749: 
    setargs                   1 0
    push           pc_genss.do_mov.a u64 
    callproc       &pc_genss.checkhighreg 
    push           pc_genss.do_mov.a u64 
    push           10         
    pushptroff                u8 1 0
    push           6          i64 
    casejumpeq     #8753      i64 0
    push           4          i64 
    casejumpeq     #8753      i64 0
    push           15         i64 
    casejumpeq     #8753      i64 0
    push           16         i64 
    casejumpeq     #8753      i64 0
    popstack                  i64 
    jump           #8754      
#8753: 
    push           &pc_genss.rex 
    push           64         i64 
    iorto                     i64 
    jump           #8755      
#8754: 
#8755: 
    push           -128       i64 
    push           pc_genss.do_mov.value i64 
    jumpgt         #8756      i64 
    push           pc_genss.do_mov.value i64 
    push           255        i64 
    jumple         #8757      i64 
#8756: 
    setargs                   1 0
    push           "exceeding byte value" u64 
    callproc       &pci_mcl.axerror 
#8757: 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           176        i64 
    push           pc_genss.do_mov.regcode i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_mov.value i64 
    callproc       &pc_genss.genbyte 
    jump           #8758      
#8750: 
    push           -32768     i64 
    push           pc_genss.do_mov.value i64 
    jumpgt         #8759      i64 
    push           pc_genss.do_mov.value i64 
    push           65535      i64 
    jumple         #8760      i64 
#8759: 
    setargs                   1 0
    push           "exceeding word16 value" u64 
    callproc       &pci_mcl.axerror 
#8760: 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           184        i64 
    push           pc_genss.do_mov.regcode i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_mov.value i64 
    callproc       &pc_genss.genword 
    jump           #8758      
#8751: 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_mov.b u64 
    callfn         &pc_genss.getdef u64 
    jumpfalse      #8761      u64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           184        i64 
    push           pc_genss.do_mov.regcode i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           4          i64 
    push           pc_genss.do_mov.b u64 
    callproc       &pc_genss.genopnd 
    jump           #8762      
#8761: 
    push           -2147483648 i64 
    push           pc_genss.do_mov.value i64 
    jumpgt         #8763      i64 
    push           pc_genss.do_mov.value i64 
    push           4294967295 i64 
    truncate                  i64 u32 
    jumple         #8764      i64 
#8763: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           pc_genss.do_mov.value i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           pc_genss.do_mov.value u64 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "1:exceeding word32 value" u64 
    callproc       &pci_mcl.axerror 
#8764: 
!doreg32::
#8765: 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           184        i64 
    push           pc_genss.do_mov.regcode i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_mov.value i64 
    callproc       &pc_genss.gendword 
#8762: 
    jump           #8758      
#8752: 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_mov.b u64 
    callfn         &pc_genss.getdef u64 
    jumpfalse      #8766      u64 
    push           &pc_genss.rex 
    push           8          i64 
    iorto                     i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           184        i64 
    push           pc_genss.do_mov.regcode i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           8          i64 
    push           pc_genss.do_mov.b u64 
    callproc       &pc_genss.genopnd 
    jump           #8767      
#8766: 
    push           pc_genss.do_mov.value i64 
    push           0          i64 
    jumplt         #8768      i64 
    push           pc_genss.do_mov.value i64 
    push           4294967295 i64 
    jumpgt         #8768      i64 
    jump           #8765      
#8768: 
    push           &pc_genss.rex 
    push           8          i64 
    iorto                     i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           184        i64 
    push           pc_genss.do_mov.regcode i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_mov.value i64 
    callproc       &pc_genss.genqword 
#8767: 
#8758: 
    jump           #8747      
#8743: 
    setargs                   1 0
    push           "MOV REG/??" u64 
    callproc       &pci_mcl.axerror 
#8747: 
    jump           #8769      
#8739: 
    push           pc_genss.do_mov.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8770      i64 0
    push           2          i64 
    casejumpeq     #8771      i64 0
    popstack                  i64 
    jump           #8772      
#8770: 
    push           pc_genss.do_mov.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_mov.b u64 
    push           8          
    pushptroff                u8 1 0
    jumpeq         #8773      i64 
    push           pc_genss.do_mov.a u64 
    push           8          
    pushptroff                u8 1 0
    jumpfalse      #8773      i64 
    setargs                   1 0
    push           "2:Opnd size mismatch" u64 
    callproc       &pci_mcl.axerror 
#8773: 
    setargs                   1 0
    push           pc_genss.do_mov.b u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_mov.regcode i64 
    setargs                   1 0
    push           pc_genss.do_mov.b u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   2 0
    push           pc_genss.do_mov.regcode i64 
    push           pc_genss.do_mov.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_mov.am i64 
    setargs                   1 0
    push           pc_genss.do_mov.b u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    startmult                 
    push           pc_genss.do_mov.b u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8774      i64 
    push           136        i64 
    resetmult                 
    jump           #8775      
#8774: 
    push           137        i64 
    endmult                   
#8775: 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_mov.am i64 
    push           pc_genss.do_mov.a u64 
    callproc       &pc_genss.genamode 
    jump           #8776      
#8771: 
    push           pc_genss.do_mov.b u64 
    pushptr                   i64 
    pop            pc_genss.do_mov.value i64 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_mov.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_mov.am i64 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_mov.b u64 
    callfn         &pc_genss.getdef u64 
    jumpfalse      #8777      u64 
    push           pc_genss.do_mov.a u64 
    push           8          
    pushptroff                u8 1 0
    push           2          i64 
    jumpgt         #8777      i64 
    setargs                   1 0
    push           "mov imm?" u64 
    callproc       &pci_mcl.axerror 
#8777: 
    push           pc_genss.do_mov.a u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #8778      i64 
    push           1          i64 
    push           pc_genss.do_mov.a u64 
    push           8          
    popptroff                 u8 1 0
#8778: 
    push           pc_genss.do_mov.a u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    casejumpeq     #8779      i64 0
    push           1          i64 
    casejumpeq     #8779      i64 0
    push           2          i64 
    casejumpeq     #8780      i64 0
    push           4          i64 
    casejumpeq     #8781      i64 0
    push           8          i64 
    casejumpeq     #8781      i64 0
    popstack                  i64 
    jump           #8782      
#8779: 
    push           -128       i64 
    push           pc_genss.do_mov.value i64 
    jumpgt         #8783      i64 
    push           pc_genss.do_mov.value i64 
    push           255        i64 
    jumple         #8784      i64 
#8783: 
    setargs                   1 0
    push           "exceeding byte value" u64 
    callproc       &pci_mcl.axerror 
#8784: 
    setargs                   1 0
    push           pc_genss.do_mov.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           198        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_mov.am i64 
    push           pc_genss.do_mov.a u64 
    callproc       &pc_genss.genamode 
    setargs                   1 0
    push           pc_genss.do_mov.value i64 
    callproc       &pc_genss.genbyte 
    jump           #8785      
#8780: 
    push           -32768     i64 
    push           pc_genss.do_mov.value i64 
    jumpgt         #8786      i64 
    push           pc_genss.do_mov.value i64 
    push           65535      i64 
    jumple         #8787      i64 
#8786: 
    setargs                   1 0
    push           "exceeding word16 value" u64 
    callproc       &pci_mcl.axerror 
#8787: 
    setargs                   1 0
    push           pc_genss.do_mov.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           199        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_mov.am i64 
    push           pc_genss.do_mov.a u64 
    callproc       &pc_genss.genamode 
    setargs                   1 0
    push           pc_genss.do_mov.value i64 
    callproc       &pc_genss.genword 
    jump           #8785      
#8781: 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_mov.b u64 
    callfn         &pc_genss.getdef u64 
    jumptrue       #8788      u64 
    push           -2147483648 i64 
    push           pc_genss.do_mov.value i64 
    jumpgt         #8789      i64 
    push           pc_genss.do_mov.value i64 
    push           4294967295 i64 
    jumple         #8790      i64 
#8789: 
    setargs                   1 0
    push           "2:exceeding word32 value" u64 
    callproc       &pci_mcl.axerror 
#8790: 
#8788: 
    setargs                   1 0
    push           pc_genss.do_mov.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           199        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_mov.am i64 
    push           pc_genss.do_mov.a u64 
    callproc       &pc_genss.genamode 
    setargs                   2 0
    push           4          i64 
    push           pc_genss.do_mov.b u64 
    callproc       &pc_genss.genopnd 
    jump           #8785      
#8782: 
#8785: 
    jump           #8776      
#8772: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pci_mcl.opndnames_ma 
    push           pc_genss.do_mov.a u64 
    push           9          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pci_mcl.opndnames_ma 
    push           pc_genss.do_mov.b u64 
    push           9          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "MOV MEM/?" u64 
    callproc       &pci_mcl.axerror 
#8776: 
    jump           #8769      
#8740: 
    setargs                   1 0
    push           "MOV ?/.." u64 
    callproc       &pci_mcl.axerror 
#8769: 
#8791: 
    retproc                   
End


Proc pc_genss.getregcoder: i64
    param          pc_genss.getregcoder.reg i64 
    local          pc_genss.getregcoder.regcode i64 
    procentry                 
    push           &pci_mcl.regcodes 
    push           pc_genss.getregcoder.reg i64 
    pushptroff                u8 1 0
    pop            pc_genss.getregcoder.regcode i64 
    push           pc_genss.getregcoder.regcode i64 
    push           8          i64 
    jumplt         #8793      i64 
    push           &pc_genss.getregcoder.regcode 
    push           8          i64 
    subto                     i64 
    push           &pc_genss.rex 
    push           4          i64 
    iorto                     i64 
#8793: 
    push           pc_genss.getregcoder.regcode i64 
    setret                    i64 
    jump           #8794      
#8794: 
    retfn                     i64 
End


Proc pc_genss.getregcodeb: i64
    param          pc_genss.getregcodeb.reg i64 
    local          pc_genss.getregcodeb.regcode i64 
    procentry                 
    push           &pci_mcl.regcodes 
    push           pc_genss.getregcodeb.reg i64 
    pushptroff                u8 1 0
    pop            pc_genss.getregcodeb.regcode i64 
    push           pc_genss.getregcodeb.regcode i64 
    push           8          i64 
    jumplt         #8796      i64 
    push           &pc_genss.getregcodeb.regcode 
    push           8          i64 
    subto                     i64 
    push           &pc_genss.rex 
    push           1          i64 
    iorto                     i64 
#8796: 
    push           pc_genss.getregcodeb.regcode i64 
    setret                    i64 
    jump           #8797      
#8797: 
    retfn                     i64 
End


Proc pc_genss.getregcodebx: i64
    param          pc_genss.getregcodebx.reg i64 
    local          pc_genss.getregcodebx.regcode i64 
    procentry                 
    push           pc_genss.getregcodebx.reg i64 
    push           1          i64 
    sub                       i64 
    pop            pc_genss.getregcodebx.regcode i64 
    push           pc_genss.getregcodebx.regcode i64 
    push           8          i64 
    jumplt         #8799      i64 
    push           &pc_genss.getregcodebx.regcode 
    push           8          i64 
    subto                     i64 
    push           &pc_genss.rex 
    push           1          i64 
    iorto                     i64 
#8799: 
    push           pc_genss.getregcodebx.regcode i64 
    setret                    i64 
    jump           #8800      
#8800: 
    retfn                     i64 
End


Proc pc_genss.getregcoderx: i64
    param          pc_genss.getregcoderx.reg i64 
    local          pc_genss.getregcoderx.regcode i64 
    procentry                 
    push           pc_genss.getregcoderx.reg i64 
    push           1          i64 
    sub                       i64 
    pop            pc_genss.getregcoderx.regcode i64 
    push           pc_genss.getregcoderx.regcode i64 
    push           8          i64 
    jumplt         #8802      i64 
    push           &pc_genss.getregcoderx.regcode 
    push           8          i64 
    subto                     i64 
    push           &pc_genss.rex 
    push           4          i64 
    iorto                     i64 
#8802: 
    push           pc_genss.getregcoderx.regcode i64 
    setret                    i64 
    jump           #8803      
#8803: 
    retfn                     i64 
End


Proc pc_genss.do_lea:
    param          pc_genss.do_lea.a u64 
    param          pc_genss.do_lea.b u64 
    local          pc_genss.do_lea.regcode i64 
    local          pc_genss.do_lea.am i64 
    procentry                 
    push           pc_genss.do_lea.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8805      i64 
    push           pc_genss.do_lea.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpeq         #8806      i64 
#8805: 
    setargs                   1 0
    push           "LEA not reg/mem" u64 
    callproc       &pci_mcl.axerror 
#8806: 
    push           pc_genss.do_lea.a u64 
    push           8          
    pushptroff                u8 1 0
    push           4          i64 
    jumpge         #8807      i64 
    setargs                   1 0
    push           "LEA size error" u64 
    callproc       &pci_mcl.axerror 
#8807: 
    setargs                   1 0
    push           pc_genss.do_lea.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_lea.regcode i64 
    setargs                   2 0
    push           pc_genss.do_lea.regcode i64 
    push           pc_genss.do_lea.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_lea.am i64 
    setargs                   1 0
    push           pc_genss.do_lea.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           141        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_lea.am i64 
    push           pc_genss.do_lea.b u64 
    callproc       &pc_genss.genamode 
#8808: 
    retproc                   
End


Proc pc_genss.do_movsx:
    param          pc_genss.do_movsx.a u64 
    param          pc_genss.do_movsx.b u64 
    param          pc_genss.do_movsx.opc i64 
    local          pc_genss.do_movsx.am i64 
    local          pc_genss.do_movsx.regcode i64 
    procentry                 
    push           pc_genss.do_movsx.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #8810      i64 
    setargs                   1 0
    push           "movsx not reg" u64 
    callproc       &pci_mcl.axerror 
#8810: 
    push           pc_genss.do_movsx.a u64 
    push           8          
    pushptroff                u8 1 0
    push           8          i64 
    jumpne         #8811      i64 
    push           pc_genss.do_movsx.b u64 
    push           8          
    pushptroff                u8 1 0
    push           4          i64 
    jumpne         #8811      i64 
    push           pc_genss.do_movsx.opc i64 
    push           190        i64 
    jumpne         #8812      i64 
    setargs                   2 0
    push           pc_genss.do_movsx.b u64 
    push           pc_genss.do_movsx.a u64 
    callproc       &pc_genss.do_movsxd 
    jump           #8813      
#8812: 
    push           &pci_mcl.regtable 
    push           pc_genss.do_movsx.a u64 
    push           10         
    pushptroff                u8 1 0
    addrefoff                 block:128 128 -128
    push           4          i64 
    pushptroff                u64 8 -8
    pop            pc_genss.do_movsx.a u64 
    setargs                   2 0
    push           pc_genss.do_movsx.b u64 
    push           pc_genss.do_movsx.a u64 
    callproc       &pc_genss.do_mov 
#8813: 
    jump           #8814      
#8811: 
    push           pc_genss.do_movsx.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #8815      i64 
    push           pc_genss.do_movsx.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_movsx.b u64 
    push           8          
    pushptroff                u8 1 0
    jumpgt         #8816      i64 
#8815: 
    setargs                   1 0
    push           "movsx size error" u64 
    callproc       &pci_mcl.axerror 
#8816: 
    push           pc_genss.do_movsx.opc i64 
    push           182        i64 
    jumpne         #8817      i64 
    push           pc_genss.do_movsx.b u64 
    push           8          
    pushptroff                u8 1 0
    push           4          i64 
    jumpne         #8817      i64 
    setargs                   1 0
    push           "movsx 4=>8 bytes?" u64 
    callproc       &pci_mcl.axerror 
#8817: 
    push           pc_genss.do_movsx.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8818      i64 0
    push           3          i64 
    casejumpeq     #8819      i64 0
    popstack                  i64 
    jump           #8820      
#8818: 
    jump           #8821      
#8819: 
    push           pc_genss.do_movsx.b u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #8822      i64 
    setargs                   1 0
    push           "movsx need size prefix" u64 
    callproc       &pci_mcl.axerror 
#8822: 
    push           pc_genss.do_movsx.b u64 
    push           8          
    pushptroff                u8 1 0
    push           8          i64 
    jumpne         #8823      i64 
    setargs                   1 0
    push           "movsx size 8" u64 
    callproc       &pci_mcl.axerror 
#8823: 
    jump           #8821      
#8820: 
    setargs                   1 0
    push           "movsx not reg/mem" u64 
    callproc       &pci_mcl.axerror 
#8821: 
    setargs                   1 0
    push           pc_genss.do_movsx.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_movsx.regcode i64 
    setargs                   2 0
    push           pc_genss.do_movsx.regcode i64 
    push           pc_genss.do_movsx.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_movsx.am i64 
    setargs                   1 0
    push           pc_genss.do_movsx.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   1 0
    push           pc_genss.do_movsx.b u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    startmult                 
    push           pc_genss.do_movsx.b u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8824      i64 
    push           pc_genss.do_movsx.opc i64 
    resetmult                 
    jump           #8825      
#8824: 
    push           pc_genss.do_movsx.opc i64 
    push           1          i64 
    add                       i64 
    endmult                   
#8825: 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_movsx.am i64 
    push           pc_genss.do_movsx.b u64 
    callproc       &pc_genss.genamode 
#8814: 
    retproc                   
End


Proc pc_genss.checkhighreg:
    param          pc_genss.checkhighreg.a u64 
    procentry                 
    push           pc_genss.checkhighreg.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8827      i64 
    push           pc_genss.checkhighreg.a u64 
    push           10         
    pushptroff                u8 1 0
    push           6          i64 
    casejumpeq     #8828      i64 0
    push           4          i64 
    casejumpeq     #8828      i64 0
    push           15         i64 
    casejumpeq     #8828      i64 0
    push           16         i64 
    casejumpeq     #8828      i64 0
    popstack                  i64 
    jump           #8829      
#8828: 
    push           &pc_genss.rex 
    push           64         i64 
    iorto                     i64 
    jump           #8830      
#8829: 
#8830: 
#8827: 
#8831: 
    retproc                   
End


Proc pc_genss.do_exch:
    param          pc_genss.do_exch.a u64 
    param          pc_genss.do_exch.b u64 
    local          pc_genss.do_exch.regcode i64 
    local          pc_genss.do_exch.am i64 
    procentry                 
    push           pc_genss.do_exch.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8833      i64 
    push           pc_genss.do_exch.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8833      i64 
    push           pc_genss.do_exch.a u64 
    push           10         
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #8834      i64 
    push           pc_genss.do_exch.b u64 
    push           10         
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8833      i64 
#8834: 
    push           pc_genss.do_exch.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #8833      i64 
    push           pc_genss.do_exch.a u64 
    push           10         
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #8835      i64 
    push           &pc_genss.do_exch.a 
    push           &pc_genss.do_exch.b 
    swap                      u64 
#8835: 
    push           pc_genss.do_exch.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_exch.b u64 
    push           8          
    pushptroff                u8 1 0
    jumpeq         #8836      i64 
    setargs                   1 0
    push           "exch size" u64 
    callproc       &pci_mcl.axerror 
#8836: 
    setargs                   1 0
    push           pc_genss.do_exch.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   1 0
    push           pc_genss.do_exch.b u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcodeb i64 
    pop            pc_genss.do_exch.regcode i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           144        i64 
    push           pc_genss.do_exch.regcode i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    jump           #8837      
#8833: 
    push           pc_genss.do_exch.a u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #8838      i64 
    push           &pc_genss.do_exch.a 
    push           &pc_genss.do_exch.b 
    swap                      u64 
#8838: 
    push           pc_genss.do_exch.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8839      i64 
    push           pc_genss.do_exch.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #8840      i64 
    push           pc_genss.do_exch.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpeq         #8840      i64 
#8839: 
    setargs                   1 0
    push           "exch opnds" u64 
    callproc       &pci_mcl.axerror 
#8840: 
    push           pc_genss.do_exch.b u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #8841      i64 
    push           pc_genss.do_exch.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #8841      i64 
    push           pc_genss.do_exch.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_exch.b u64 
    push           8          
    popptroff                 u8 1 0
#8841: 
    push           pc_genss.do_exch.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_exch.b u64 
    push           8          
    pushptroff                u8 1 0
    jumpeq         #8842      i64 
    setargs                   1 0
    push           "exch size" u64 
    callproc       &pci_mcl.axerror 
#8842: 
    push           pc_genss.do_exch.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8843      i64 
    setargs                   1 0
    push           pc_genss.do_exch.a u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_exch.b u64 
    callproc       &pc_genss.checkhighreg 
#8843: 
    setargs                   1 0
    push           pc_genss.do_exch.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_exch.regcode i64 
    setargs                   2 0
    push           pc_genss.do_exch.regcode i64 
    push           pc_genss.do_exch.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_exch.am i64 
    setargs                   1 0
    push           pc_genss.do_exch.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    startmult                 
    push           pc_genss.do_exch.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8844      i64 
    push           134        i64 
    resetmult                 
    jump           #8845      
#8844: 
    push           135        i64 
    endmult                   
#8845: 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_exch.am i64 
    push           pc_genss.do_exch.b u64 
    callproc       &pc_genss.genamode 
#8837: 
    retproc                   
End


Proc pc_genss.do_movsxd:
    param          pc_genss.do_movsxd.a u64 
    param          pc_genss.do_movsxd.b u64 
    local          pc_genss.do_movsxd.regcode i64 
    local          pc_genss.do_movsxd.am i64 
    procentry                 
    push           pc_genss.do_movsxd.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #8847      i64 
    push           pc_genss.do_movsxd.b u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #8847      i64 
    push           4          i64 
    push           pc_genss.do_movsxd.b u64 
    push           8          
    popptroff                 u8 1 0
#8847: 
    push           pc_genss.do_movsxd.a u64 
    push           8          
    pushptroff                u8 1 0
    push           8          i64 
    jumpne         #8848      i64 
    push           pc_genss.do_movsxd.b u64 
    push           8          
    pushptroff                u8 1 0
    push           4          i64 
    jumple         #8849      i64 
#8848: 
    setargs                   1 0
    push           "movsxd size" u64 
    callproc       &pci_mcl.axerror 
#8849: 
    push           pc_genss.do_movsxd.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8850      i64 
    push           pc_genss.do_movsxd.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #8851      i64 
    push           pc_genss.do_movsxd.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpeq         #8851      i64 
#8850: 
    setargs                   1 0
    push           "movsxd opnds" u64 
    callproc       &pci_mcl.axerror 
#8851: 
    setargs                   1 0
    push           pc_genss.do_movsxd.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_movsxd.regcode i64 
    setargs                   2 0
    push           pc_genss.do_movsxd.regcode i64 
    push           pc_genss.do_movsxd.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_movsxd.am i64 
    setargs                   1 0
    push           pc_genss.do_movsxd.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           99         i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_movsxd.am i64 
    push           pc_genss.do_movsxd.b u64 
    callproc       &pc_genss.genamode 
#8852: 
    retproc                   
End


Proc pc_genss.do_imul2:
    param          pc_genss.do_imul2.a u64 
    param          pc_genss.do_imul2.b u64 
    local          pc_genss.do_imul2.regcode i64 
    local          pc_genss.do_imul2.am i64 
    local          pc_genss.do_imul2.opc i64 
    local          pc_genss.do_imul2.value i64 
    procentry                 
    push           pc_genss.do_imul2.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #8854      i64 
    setargs                   1 0
    push           "imul2 opnds" u64 
    callproc       &pci_mcl.axerror 
#8854: 
    push           pc_genss.do_imul2.b u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #8855      i64 
    push           pc_genss.do_imul2.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_imul2.b u64 
    push           8          
    popptroff                 u8 1 0
#8855: 
    push           pc_genss.do_imul2.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8856      i64 
    setargs                   1 0
    push           "imul2 byte" u64 
    callproc       &pci_mcl.axerror 
#8856: 
    push           pc_genss.do_imul2.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8857      i64 0
    push           3          i64 
    casejumpeq     #8857      i64 0
    push           2          i64 
    casejumpeq     #8858      i64 0
    popstack                  i64 
    jump           #8859      
#8857: 
    push           pc_genss.do_imul2.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_imul2.b u64 
    push           8          
    pushptroff                u8 1 0
    jumpeq         #8860      i64 
    setargs                   1 0
    push           "imul2 size" u64 
    callproc       &pci_mcl.axerror 
#8860: 
    setargs                   1 0
    push           pc_genss.do_imul2.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_imul2.regcode i64 
    setargs                   2 0
    push           pc_genss.do_imul2.regcode i64 
    push           pc_genss.do_imul2.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_imul2.am i64 
    setargs                   1 0
    push           pc_genss.do_imul2.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           175        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_imul2.am i64 
    push           pc_genss.do_imul2.b u64 
    callproc       &pc_genss.genamode 
    jump           #8861      
#8858: 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_imul2.b u64 
    callfn         &pc_genss.getdef u64 
    jumpfalse      #8862      u64 
    setargs                   1 0
    push           "mul/label" u64 
    callproc       &pci_mcl.axerror 
#8862: 
    push           pc_genss.do_imul2.b u64 
    pushptr                   i64 
    pop            pc_genss.do_imul2.value i64 
    setargs                   1 0
    push           pc_genss.do_imul2.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_imul2.regcode i64 
    setargs                   1 0
    push           pc_genss.do_imul2.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcodeb i64 
    pop            pc_genss.do_imul2.regcode i64 
    push           192        i64 
    push           pc_genss.do_imul2.regcode i64 
    push           3          i64 
    shl                       i64 
    add                       i64 
    push           pc_genss.do_imul2.regcode i64 
    add                       i64 
    pop            pc_genss.do_imul2.opc i64 
    setargs                   1 0
    push           pc_genss.do_imul2.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    push           -128       i64 
    push           pc_genss.do_imul2.value i64 
    jumpgt         #8863      i64 
    push           pc_genss.do_imul2.value i64 
    push           127        i64 
    jumpgt         #8863      i64 
    setargs                   1 0
    push           107        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_imul2.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_imul2.value i64 
    callproc       &pc_genss.genbyte 
    jump           #8864      
#8863: 
    push           pc_genss.do_imul2.a u64 
    push           8          
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #8865      i64 
    setargs                   1 0
    push           105        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_imul2.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_imul2.value i64 
    callproc       &pc_genss.genword 
    jump           #8864      
#8865: 
    setargs                   1 0
    push           105        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_imul2.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_imul2.value i64 
    callproc       &pc_genss.gendword 
#8864: 
    jump           #8861      
#8859: 
    setargs                   1 0
    push           "imul2 opnds" u64 
    callproc       &pci_mcl.axerror 
#8861: 
#8866: 
    retproc                   
End


Proc pc_genss.do_shift:
    param          pc_genss.do_shift.a u64 
    param          pc_genss.do_shift.b u64 
    param          pc_genss.do_shift.opc i64 
    local          pc_genss.do_shift.am i64 
    local          pc_genss.do_shift.w i64 
    procentry                 
    push           pc_genss.do_shift.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #8868      i64 
    push           pc_genss.do_shift.a u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpeq         #8868      i64 
    setargs                   1 0
    push           "shift opnds1?" u64 
    callproc       &pci_mcl.axerror 
#8868: 
    setargs                   2 0
    push           pc_genss.do_shift.opc i64 
    push           pc_genss.do_shift.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_shift.am i64 
    setargs                   1 0
    push           pc_genss.do_shift.a u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_shift.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    startmult                 
    push           pc_genss.do_shift.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8869      i64 
    push           0          i64 
    resetmult                 
    jump           #8870      
#8869: 
    push           1          i64 
    endmult                   
#8870: 
    pop            pc_genss.do_shift.w i64 
    push           pc_genss.do_shift.b u64 
    push           9          
    pushptroff                u8 1 0
    push           2          i64 
    casejumpeq     #8871      i64 0
    push           1          i64 
    casejumpeq     #8872      i64 0
    popstack                  i64 
    jump           #8873      
#8871: 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_shift.b u64 
    callfn         &pc_genss.getdef u64 
    jumpfalse      #8874      u64 
    setargs                   1 0
    push           "shift/label" u64 
    callproc       &pci_mcl.axerror 
#8874: 
    push           pc_genss.do_shift.b u64 
    pushptr                   i64 
    push           1          i64 
    jumpne         #8875      i64 
    setargs                   1 0
    push           208        i64 
    push           pc_genss.do_shift.w i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_shift.am i64 
    push           pc_genss.do_shift.a u64 
    callproc       &pc_genss.genamode 
    jump           #8876      
#8875: 
    setargs                   1 0
    push           192        i64 
    push           pc_genss.do_shift.w i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_shift.am i64 
    push           pc_genss.do_shift.a u64 
    callproc       &pc_genss.genamode 
    setargs                   1 0
    push           pc_genss.do_shift.b u64 
    pushptr                   i64 
    callproc       &pc_genss.genbyte 
#8876: 
    jump           #8877      
#8872: 
    push           pc_genss.do_shift.b u64 
    push           10         
    pushptroff                u8 1 0
    push           11         i64 
    jumpne         #8878      i64 
    push           pc_genss.do_shift.b u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #8879      i64 
#8878: 
    setargs                   1 0
    push           "cl or b10 needed" u64 
    callproc       &pci_mcl.axerror 
#8879: 
    setargs                   1 0
    push           210        i64 
    push           pc_genss.do_shift.w i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_shift.am i64 
    push           pc_genss.do_shift.a u64 
    callproc       &pc_genss.genamode 
    jump           #8877      
#8873: 
    setargs                   1 0
    push           "shift opnds2?" u64 
    callproc       &pci_mcl.axerror 
#8877: 
#8880: 
    retproc                   
End


Proc pc_genss.do_test:
    param          pc_genss.do_test.a u64 
    param          pc_genss.do_test.b u64 
    local          pc_genss.do_test.value i64 
    local          pc_genss.do_test.opc i64 
    local          pc_genss.do_test.am i64 
    local          pc_genss.do_test.regcode i64 
    procentry                 
    push           pc_genss.do_test.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8882      i64 
    push           pc_genss.do_test.a u64 
    push           10         
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8882      i64 
    push           pc_genss.do_test.b u64 
    push           9          
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #8882      i64 
    push           pc_genss.do_test.b u64 
    pushptr                   i64 
    pop            pc_genss.do_test.value i64 
    push           pc_genss.do_test.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8883      i64 0
    push           2          i64 
    casejumpeq     #8884      i64 0
    push           4          i64 
    casejumpeq     #8885      i64 0
    popstack                  i64 
    jump           #8886      
#8883: 
    setargs                   1 0
    push           168        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_test.value i64 
    callproc       &pc_genss.genbyte 
    jump           #8887      
#8884: 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           169        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_test.value i64 
    callproc       &pc_genss.genword 
    jump           #8887      
#8885: 
    setargs                   1 0
    push           169        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_test.value i64 
    callproc       &pc_genss.gendword 
    jump           #8887      
#8886: 
    setargs                   1 0
    push           72         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           169        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_test.value i64 
    callproc       &pc_genss.gendword 
#8887: 
    jump           #8888      
#8882: 
    push           pc_genss.do_test.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #8889      i64 
    push           pc_genss.do_test.a u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #8890      i64 
#8889: 
    push           pc_genss.do_test.b u64 
    push           9          
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #8890      i64 
    startmult                 
    push           pc_genss.do_test.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8891      i64 
    push           246        i64 
    resetmult                 
    jump           #8892      
#8891: 
    push           247        i64 
    endmult                   
#8892: 
    pop            pc_genss.do_test.opc i64 
    push           pc_genss.do_test.b u64 
    pushptr                   i64 
    pop            pc_genss.do_test.value i64 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_test.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_test.am i64 
    setargs                   1 0
    push           pc_genss.do_test.a u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_test.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           pc_genss.do_test.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_test.am i64 
    push           pc_genss.do_test.a u64 
    callproc       &pc_genss.genamode 
    push           pc_genss.do_test.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8893      i64 0
    push           2          i64 
    casejumpeq     #8894      i64 0
    popstack                  i64 
    jump           #8895      
#8893: 
    setargs                   1 0
    push           pc_genss.do_test.value i64 
    callproc       &pc_genss.genbyte 
    jump           #8896      
#8894: 
    setargs                   1 0
    push           pc_genss.do_test.value i64 
    callproc       &pc_genss.genword 
    jump           #8896      
#8895: 
    setargs                   1 0
    push           pc_genss.do_test.value i64 
    callproc       &pc_genss.gendword 
#8896: 
    jump           #8888      
#8890: 
    push           pc_genss.do_test.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8897      i64 
    push           pc_genss.do_test.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #8898      i64 
    push           pc_genss.do_test.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #8897      i64 
#8898: 
!doregmem::
#8899: 
    setargs                   1 0
    push           pc_genss.do_test.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_test.regcode i64 
    setargs                   2 0
    push           pc_genss.do_test.regcode i64 
    push           pc_genss.do_test.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_test.am i64 
    setargs                   1 0
    push           pc_genss.do_test.a u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_test.b u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_test.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    startmult                 
    push           pc_genss.do_test.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8900      i64 
    push           132        i64 
    resetmult                 
    jump           #8901      
#8900: 
    push           133        i64 
    endmult                   
#8901: 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_test.am i64 
    push           pc_genss.do_test.b u64 
    callproc       &pc_genss.genamode 
    jump           #8888      
#8897: 
    push           pc_genss.do_test.a u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #8902      i64 
    push           pc_genss.do_test.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8902      i64 
    push           &pc_genss.do_test.a 
    push           &pc_genss.do_test.b 
    swap                      u64 
    jump           #8899      
    jump           #8888      
#8902: 
    setargs                   1 0
    push           "test opnds" u64 
    callproc       &pci_mcl.axerror 
#8888: 
#8903: 
    retproc                   
End


Proc pc_genss.do_loop:
    param          pc_genss.do_loop.a u64 
    param          pc_genss.do_loop.opc i64 
    local          pc_genss.do_loop.offset i64 
    procentry                 
    setargs                   2 0
    setargs                   1 0
    push           9          i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           1          i64 
    add                       i64 
    setargs                   2 0
    push           1          i64 
    push           pc_genss.do_loop.a u64 
    callfn         &pc_genss.getdef u64 
    callfn         &pc_genss.getrel32 i64 
    pop            pc_genss.do_loop.offset i64 
    push           pc_genss.do_loop.offset i64 
    push           0          i64 
    jumpge         #8905      i64 
    push           pc_genss.do_loop.offset i64 
    push           -126       i64 
    jumpge         #8906      i64 
    setargs                   1 0
    push           "loop jmp out of range" u64 
    callproc       &pci_mcl.axerror 
#8906: 
    setargs                   1 0
    push           pc_genss.do_loop.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_loop.offset i64 
    callproc       &pc_genss.genbyte 
    jump           #8907      
#8905: 
    setargs                   1 0
    push           "Can't do loopxx fwd jump" u64 
    callproc       &pci_mcl.axerror 
#8907: 
#8908: 
    retproc                   
End


Proc pc_genss.do_jcxz:
    param          pc_genss.do_jcxz.a u64 
    param          pc_genss.do_jcxz.opsize i64 
    local          pc_genss.do_jcxz.offset i64 
    procentry                 
    setargs                   2 0
    setargs                   1 0
    push           10         i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           1          i64 
    add                       i64 
    setargs                   2 0
    push           1          i64 
    push           pc_genss.do_jcxz.a u64 
    callfn         &pc_genss.getdef u64 
    callfn         &pc_genss.getrel32 i64 
    pop            pc_genss.do_jcxz.offset i64 
    push           pc_genss.do_jcxz.offset i64 
    push           0          i64 
    jumpge         #8910      i64 
    push           pc_genss.do_jcxz.offset i64 
    push           -126       i64 
    jumpge         #8911      i64 
    setargs                   1 0
    push           "jcxz jmp out of range" u64 
    callproc       &pci_mcl.axerror 
#8911: 
    push           pc_genss.do_jcxz.opsize i64 
    push           4          i64 
    jumpne         #8912      i64 
    setargs                   1 0
    push           103        i64 
    callproc       &pc_genss.genbyte 
#8912: 
    setargs                   1 0
    push           227        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_jcxz.offset i64 
    callproc       &pc_genss.genbyte 
    jump           #8913      
#8910: 
    setargs                   1 0
    push           "Can't do jcxz fwd jump" u64 
    callproc       &pci_mcl.axerror 
#8913: 
#8914: 
    retproc                   
End


Proc pc_genss.do_setcc:
    param          pc_genss.do_setcc.cond i64 
    param          pc_genss.do_setcc.a u64 
    local          pc_genss.do_setcc.am i64 
    procentry                 
    push           pc_genss.do_setcc.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #8916      i64 
    push           pc_genss.do_setcc.a u64 
    push           10         
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #8917      i64 
#8916: 
    push           pc_genss.do_setcc.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumple         #8918      i64 
#8917: 
    setargs                   1 0
    push           "setcc opnd/size" u64 
    callproc       &pci_mcl.axerror 
#8918: 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_setcc.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_setcc.am i64 
    setargs                   1 0
    push           pc_genss.do_setcc.a u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           144        i64 
    push           pc_genss.do_setcc.cond i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_setcc.am i64 
    push           pc_genss.do_setcc.a u64 
    callproc       &pc_genss.genamode 
#8919: 
    retproc                   
End


Proc pc_genss.do_movxmm:
    param          pc_genss.do_movxmm.a u64 
    param          pc_genss.do_movxmm.b u64 
    param          pc_genss.do_movxmm.size i64 
    local          pc_genss.do_movxmm.am i64 
    local          pc_genss.do_movxmm.regcode i64 
    local          pc_genss.do_movxmm.regcode1 i64 
    local          pc_genss.do_movxmm.regcode2 i64 
    procentry                 
    push           pc_genss.do_movxmm.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8921      i64 0
    push           5          i64 
    casejumpeq     #8922      i64 0
    push           3          i64 
    casejumpeq     #8923      i64 0
    popstack                  i64 
    jump           #8924      
#8921: 
    push           pc_genss.do_movxmm.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    casejumpeq     #8925      i64 0
    popstack                  i64 
    jump           #8926      
#8925: 
    push           pc_genss.do_movxmm.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_movxmm.size i64 
    jumpeq         #8927      i64 
    setargs                   1 0
    push           "1:movdq size" u64 
    callproc       &pci_mcl.axerror 
#8927: 
    setargs                   1 0
    push           pc_genss.do_movxmm.b u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_movxmm.regcode i64 
    setargs                   2 0
    push           pc_genss.do_movxmm.regcode i64 
    push           pc_genss.do_movxmm.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_movxmm.am i64 
    setargs                   1 0
    push           pc_genss.do_movxmm.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           126        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_movxmm.am i64 
    push           pc_genss.do_movxmm.b u64 
    callproc       &pc_genss.genamode 
    jump           #8928      
#8926: 
    setargs                   1 0
    push           "movdq reg,?" u64 
    callproc       &pci_mcl.axerror 
#8928: 
    jump           #8929      
#8922: 
    push           pc_genss.do_movxmm.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #8930      i64 0
    push           5          i64 
    casejumpeq     #8931      i64 0
    push           3          i64 
    casejumpeq     #8932      i64 0
    popstack                  i64 
    jump           #8933      
#8930: 
    push           pc_genss.do_movxmm.b u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_movxmm.size i64 
    jumpeq         #8934      i64 
    setargs                   1 0
    push           "3:movdq size" u64 
    callproc       &pci_mcl.axerror 
#8934: 
    setargs                   1 0
    push           pc_genss.do_movxmm.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_movxmm.regcode i64 
    setargs                   2 0
    push           pc_genss.do_movxmm.regcode i64 
    push           pc_genss.do_movxmm.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_movxmm.am i64 
    setargs                   1 0
    push           pc_genss.do_movxmm.b u64 
    callproc       &pc_genss.setopsize 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           110        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_movxmm.am i64 
    push           pc_genss.do_movxmm.a u64 
    callproc       &pc_genss.genamode 
    jump           #8935      
#8931: 
    setargs                   1 0
    push           pc_genss.do_movxmm.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_movxmm.regcode1 i64 
    setargs                   1 0
    push           pc_genss.do_movxmm.b u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcodebx i64 
    pop            pc_genss.do_movxmm.regcode2 i64 
    setargs                   1 0
    push           243        i64 
    callproc       &pc_genss.genbyte 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           126        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           192        i64 
    push           pc_genss.do_movxmm.regcode1 i64 
    push           3          i64 
    shl                       i64 
    add                       i64 
    push           pc_genss.do_movxmm.regcode2 i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    jump           #8935      
#8932: 
    push           pc_genss.do_movxmm.b u64 
    push           8          
    pushptroff                u8 1 0
    jumpfalse      #8936      i64 
    push           pc_genss.do_movxmm.b u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_movxmm.size i64 
    jumpeq         #8936      i64 
    setargs                   1 0
    push           "4:movdq size" u64 
    callproc       &pci_mcl.axerror 
#8936: 
    setargs                   1 0
    push           pc_genss.do_movxmm.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_movxmm.regcode i64 
    setargs                   2 0
    push           pc_genss.do_movxmm.regcode i64 
    push           pc_genss.do_movxmm.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_movxmm.am i64 
    push           pc_genss.do_movxmm.size i64 
    push           4          i64 
    jumpne         #8937      i64 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           110        i64 
    callproc       &pc_genss.genbyte 
    jump           #8938      
#8937: 
    setargs                   1 0
    push           243        i64 
    callproc       &pc_genss.genbyte 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           126        i64 
    callproc       &pc_genss.genbyte 
#8938: 
    setargs                   2 0
    push           pc_genss.do_movxmm.am i64 
    push           pc_genss.do_movxmm.b u64 
    callproc       &pc_genss.genamode 
    jump           #8935      
#8933: 
    setargs                   1 0
    push           "movdq xreg,?" u64 
    callproc       &pci_mcl.axerror 
#8935: 
    jump           #8929      
#8923: 
    push           pc_genss.do_movxmm.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    casejumpeq     #8939      i64 0
    popstack                  i64 
    jump           #8940      
#8939: 
    push           pc_genss.do_movxmm.a u64 
    push           8          
    pushptroff                u8 1 0
    jumpfalse      #8941      i64 
    push           pc_genss.do_movxmm.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_movxmm.size i64 
    jumpeq         #8941      i64 
    setargs                   1 0
    push           "5:movdq size" u64 
    callproc       &pci_mcl.axerror 
#8941: 
    setargs                   1 0
    push           pc_genss.do_movxmm.b u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_movxmm.regcode i64 
    setargs                   2 0
    push           pc_genss.do_movxmm.regcode i64 
    push           pc_genss.do_movxmm.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_movxmm.am i64 
    push           pc_genss.do_movxmm.size i64 
    push           4          i64 
    jumpne         #8942      i64 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           126        i64 
    callproc       &pc_genss.genbyte 
    jump           #8943      
#8942: 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           214        i64 
    callproc       &pc_genss.genbyte 
#8943: 
    setargs                   2 0
    push           pc_genss.do_movxmm.am i64 
    push           pc_genss.do_movxmm.a u64 
    callproc       &pc_genss.genamode 
    jump           #8944      
#8940: 
    setargs                   1 0
    push           "movdq mem,?" u64 
    callproc       &pci_mcl.axerror 
#8944: 
    jump           #8929      
#8924: 
    setargs                   1 0
    push           "movdq opnds" u64 
    callproc       &pci_mcl.axerror 
#8929: 
#8945: 
    retproc                   
End


Proc pc_genss.do_arithxmm:
    param          pc_genss.do_arithxmm.a u64 
    param          pc_genss.do_arithxmm.b u64 
    param          pc_genss.do_arithxmm.prefix i64 
    param          pc_genss.do_arithxmm.opc i64 
    local          pc_genss.do_arithxmm.am i64 
    local          pc_genss.do_arithxmm.regcode i64 
    procentry                 
    push           pc_genss.do_arithxmm.a u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #8947      i64 
    push           pc_genss.do_arithxmm.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpeq         #8948      i64 
    push           pc_genss.do_arithxmm.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpeq         #8948      i64 
#8947: 
    setargs                   1 0
    push           "arithxmm opnds" u64 
    callproc       &pci_mcl.axerror 
#8948: 
    push           pc_genss.do_arithxmm.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #8949      i64 
    setargs                   1 0
    push           pc_genss.do_arithxmm.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_arithxmm.regcode i64 
    setargs                   2 0
    push           pc_genss.do_arithxmm.regcode i64 
    push           pc_genss.do_arithxmm.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_arithxmm.am i64 
    push           pc_genss.do_arithxmm.prefix i64 
    jumpfalse      #8950      i64 
    setargs                   1 0
    push           pc_genss.do_arithxmm.prefix i64 
    callproc       &pc_genss.genbyte 
#8950: 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_arithxmm.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_arithxmm.am i64 
    push           pc_genss.do_arithxmm.a u64 
    callproc       &pc_genss.genamode 
    jump           #8951      
#8949: 
    setargs                   1 0
    push           pc_genss.do_arithxmm.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_arithxmm.regcode i64 
    setargs                   2 0
    push           pc_genss.do_arithxmm.regcode i64 
    push           pc_genss.do_arithxmm.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_arithxmm.am i64 
    push           pc_genss.do_arithxmm.prefix i64 
    jumpfalse      #8952      i64 
    setargs                   1 0
    push           pc_genss.do_arithxmm.prefix i64 
    callproc       &pc_genss.genbyte 
#8952: 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_arithxmm.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_arithxmm.am i64 
    push           pc_genss.do_arithxmm.b u64 
    callproc       &pc_genss.genamode 
#8951: 
#8953: 
    retproc                   
End


Proc pc_genss.do_logicxmm:
    param          pc_genss.do_logicxmm.a u64 
    param          pc_genss.do_logicxmm.b u64 
    param          pc_genss.do_logicxmm.opc i64 
    param          pc_genss.do_logicxmm.size i64 
    local          pc_genss.do_logicxmm.am i64 
    local          pc_genss.do_logicxmm.regcode i64 
    procentry                 
    push           pc_genss.do_logicxmm.a u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #8955      i64 
    push           pc_genss.do_logicxmm.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpeq         #8956      i64 
    push           pc_genss.do_logicxmm.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpeq         #8956      i64 
#8955: 
    setargs                   1 0
    push           "logicxmm opnds" u64 
    callproc       &pci_mcl.axerror 
#8956: 
    push           pc_genss.do_logicxmm.size i64 
    push           8          i64 
    jumpne         #8957      i64 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
#8957: 
    push           pc_genss.do_logicxmm.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #8958      i64 
    setargs                   1 0
    push           pc_genss.do_logicxmm.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_logicxmm.regcode i64 
    setargs                   2 0
    push           pc_genss.do_logicxmm.regcode i64 
    push           pc_genss.do_logicxmm.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_logicxmm.am i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_logicxmm.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_logicxmm.am i64 
    push           pc_genss.do_logicxmm.b u64 
    callproc       &pc_genss.genamode 
    jump           #8959      
#8958: 
    setargs                   1 0
    push           pc_genss.do_logicxmm.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_logicxmm.regcode i64 
    setargs                   2 0
    push           pc_genss.do_logicxmm.regcode i64 
    push           pc_genss.do_logicxmm.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_logicxmm.am i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_logicxmm.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_logicxmm.am i64 
    push           pc_genss.do_logicxmm.b u64 
    callproc       &pc_genss.genamode 
#8959: 
#8960: 
    retproc                   
End


Proc pc_genss.do_convertfloat:
    param          pc_genss.do_convertfloat.a u64 
    param          pc_genss.do_convertfloat.b u64 
    param          pc_genss.do_convertfloat.prefix i64 
    local          pc_genss.do_convertfloat.am i64 
    local          pc_genss.do_convertfloat.regcode i64 
    procentry                 
    push           pc_genss.do_convertfloat.a u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #8962      i64 
    push           pc_genss.do_convertfloat.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpeq         #8963      i64 
    push           pc_genss.do_convertfloat.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpeq         #8963      i64 
#8962: 
    setargs                   1 0
    push           "convertfloat opnds" u64 
    callproc       &pci_mcl.axerror 
#8963: 
    setargs                   1 0
    push           pc_genss.do_convertfloat.prefix i64 
    callproc       &pc_genss.genbyte 
    push           pc_genss.do_convertfloat.a u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #8964      i64 
    setargs                   1 0
    push           pc_genss.do_convertfloat.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_convertfloat.regcode i64 
    setargs                   2 0
    push           pc_genss.do_convertfloat.regcode i64 
    push           pc_genss.do_convertfloat.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_convertfloat.am i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           90         i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_convertfloat.am i64 
    push           pc_genss.do_convertfloat.b u64 
    callproc       &pc_genss.genamode 
    jump           #8965      
#8964: 
    setargs                   1 0
    push           pc_genss.do_convertfloat.b u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_convertfloat.regcode i64 
    setargs                   2 0
    push           pc_genss.do_convertfloat.regcode i64 
    push           pc_genss.do_convertfloat.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_convertfloat.am i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           90         i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_convertfloat.am i64 
    push           pc_genss.do_convertfloat.b u64 
    callproc       &pc_genss.genamode 
#8965: 
#8966: 
    retproc                   
End


Proc pc_genss.do_fix:
    param          pc_genss.do_fix.a u64 
    param          pc_genss.do_fix.b u64 
    param          pc_genss.do_fix.prefix i64 
    param          pc_genss.do_fix.opc i64 
    local          pc_genss.do_fix.am i64 
    local          pc_genss.do_fix.regcode i64 
    procentry                 
    push           pc_genss.do_fix.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #8968      i64 
    push           pc_genss.do_fix.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpeq         #8969      i64 
    push           pc_genss.do_fix.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpeq         #8969      i64 
#8968: 
    setargs                   1 0
    push           "fix opnds" u64 
    callproc       &pci_mcl.axerror 
#8969: 
    setargs                   1 0
    push           pc_genss.do_fix.prefix i64 
    callproc       &pc_genss.genbyte 
    push           pc_genss.do_fix.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #8970      i64 
    setargs                   1 0
    push           pc_genss.do_fix.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_fix.regcode i64 
    setargs                   2 0
    push           pc_genss.do_fix.regcode i64 
    push           pc_genss.do_fix.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_fix.am i64 
    setargs                   1 0
    push           pc_genss.do_fix.a u64 
    callproc       &pc_genss.setopsize 
    jump           #8971      
#8970: 
    setargs                   1 0
    push           pc_genss.do_fix.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_fix.regcode i64 
    setargs                   2 0
    push           pc_genss.do_fix.regcode i64 
    push           pc_genss.do_fix.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_fix.am i64 
    setargs                   1 0
    push           pc_genss.do_fix.a u64 
    callproc       &pc_genss.setopsize 
#8971: 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_fix.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_fix.am i64 
    push           pc_genss.do_fix.b u64 
    callproc       &pc_genss.genamode 
#8972: 
    retproc                   
End


Proc pc_genss.do_float:
    param          pc_genss.do_float.a u64 
    param          pc_genss.do_float.b u64 
    param          pc_genss.do_float.prefix i64 
    local          pc_genss.do_float.am i64 
    local          pc_genss.do_float.regcode i64 
    procentry                 
    push           pc_genss.do_float.a u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #8974      i64 
    push           pc_genss.do_float.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #8975      i64 
    push           pc_genss.do_float.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpeq         #8975      i64 
#8974: 
    setargs                   1 0
    push           "float opnds" u64 
    callproc       &pci_mcl.axerror 
#8975: 
    push           pc_genss.do_float.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #8976      i64 
    push           pc_genss.do_float.b u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #8977      i64 
    push           4          i64 
    push           pc_genss.do_float.b u64 
    push           8          
    popptroff                 u8 1 0
#8977: 
    push           pc_genss.do_float.b u64 
    push           8          
    pushptroff                u8 1 0
    push           4          i64 
    jumpeq         #8978      i64 
    push           pc_genss.do_float.b u64 
    push           8          
    pushptroff                u8 1 0
    push           8          i64 
    jumpeq         #8978      i64 
    setargs                   1 0
    push           "float size" u64 
    callproc       &pci_mcl.axerror 
#8978: 
#8976: 
    setargs                   1 0
    push           pc_genss.do_float.prefix i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_float.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_float.regcode i64 
    setargs                   2 0
    push           pc_genss.do_float.regcode i64 
    push           pc_genss.do_float.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_float.am i64 
    setargs                   1 0
    push           pc_genss.do_float.b u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           42         i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_float.am i64 
    push           pc_genss.do_float.b u64 
    callproc       &pc_genss.genamode 
#8979: 
    retproc                   
End


Proc pc_genss.do_call:
    param          pc_genss.do_call.a u64 
    local          pc_genss.do_call.am i64 
    local          pc_genss.do_call.regcode i64 
    procentry                 
    push           pc_genss.do_call.a u64 
    push           9          
    pushptroff                u8 1 0
    push           2          i64 
    casejumpeq     #8981      i64 0
    popstack                  i64 
    jump           #8982      
#8981: 
    setargs                   1 0
    push           232        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_call.a u64 
    callproc       &pc_genss.genrel32 
    jump           #8983      
#8982: 
    push           pc_genss.do_call.a u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    casejumpeq     #8984      i64 0
    push           1          i64 
    casejumpeq     #8985      i64 0
    push           2          i64 
    casejumpeq     #8985      i64 0
    push           4          i64 
    casejumpeq     #8985      i64 0
    popstack                  i64 
    jump           #8986      
#8984: 
    push           8          i64 
    push           pc_genss.do_call.a u64 
    push           8          
    popptroff                 u8 1 0
    jump           #8987      
#8985: 
    setargs                   1 0
    push           "call[]size" u64 
    callproc       &pci_mcl.axerror 
    jump           #8987      
#8986: 
#8987: 
    setargs                   2 0
    push           2          i64 
    push           pc_genss.do_call.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_call.am i64 
    setargs                   1 0
    push           pc_genss.do_call.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   1 0
    push           pc_genss.do_call.a u64 
    callproc       &pc_genss.setaddrsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           255        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_call.am i64 
    push           pc_genss.do_call.a u64 
    callproc       &pc_genss.genamode 
#8983: 
#8988: 
    retproc                   
End


Proc pc_genss.do_jmp:
    param          pc_genss.do_jmp.a u64 
    param          pc_genss.do_jmp.m u64 
    local          pc_genss.do_jmp.am i64 
    local          pc_genss.do_jmp.regcode i64 
    local          pc_genss.do_jmp.offset i64 
    local          pc_genss.do_jmp.shortjmp i64 
    local          pc_genss.do_jmp.d u64 
    procentry                 
    push           pc_genss.do_jmp.a u64 
    push           9          
    pushptroff                u8 1 0
    push           2          i64 
    casejumpeq     #8990      i64 0
    popstack                  i64 
    jump           #8991      
#8990: 
    push           pc_genss.do_jmp.a u64 
    push           12         
    pushptroff                u8 1 0
    push           7          i64 
    casejumpeq     #8992      i64 0
    push           5          i64 
    casejumpeq     #8992      i64 0
    popstack                  i64 
    jump           #8993      
#8992: 
    setargs                   2 0
    push           1          i64 
    push           pc_genss.do_jmp.a u64 
    callfn         &pc_genss.getdef u64 
    pop            pc_genss.do_jmp.d u64 
    setargs                   2 0
    setargs                   1 0
    push           11         i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           1          i64 
    add                       i64 
    push           pc_genss.do_jmp.d u64 
    callfn         &pc_genss.getrel32 i64 
    push           pc_genss.do_jmp.a u64 
    push           14         
    pushptroff                i32 1 0
    add                       i64 
    pop            pc_genss.do_jmp.offset i64 
    push           pc_genss.do_jmp.offset i64 
    push           0          i64 
    jumpge         #8994      i64 
    push           pc_genss.do_jmp.offset i64 
    push           -126       i64 
    jumple         #8994      i64 
    setargs                   1 0
    push           235        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_jmp.offset i64 
    callproc       &pc_genss.genbyte 
    jump           #8995      
#8994: 
    push           0          i64 
    pop            pc_genss.do_jmp.shortjmp i64 
    push           pc_genss.do_jmp.offset i64 
    push           0          i64 
    jumple         #8996      i64 
    setargs                   2 0
    push           pc_genss.do_jmp.d u64 
    push           pc_genss.do_jmp.m u64 
    callfn         &pc_genss.checkshortjump i64 
    pop            pc_genss.do_jmp.shortjmp i64 
#8996: 
    push           pc_genss.do_jmp.shortjmp i64 
    jumptrue       #8997      i64 
    setargs                   1 0
    push           233        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_jmp.a u64 
    callproc       &pc_genss.genrel32 
    jump           #8998      
#8997: 
    setargs                   1 0
    push           235        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_jmp.a u64 
    callproc       &pc_genss.genrel8 
#8998: 
#8995: 
    jump           #8999      
#8993: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pci_mcl.valtypenames 
    push           pc_genss.do_jmp.a u64 
    push           12         
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "JMP/IMM NOT LABELNO" u64 
    callproc       &pci_mcl.axerror 
#8999: 
    jump           #9000      
#8991: 
    push           pc_genss.do_jmp.a u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    casejumpeq     #9001      i64 0
    push           1          i64 
    casejumpeq     #9002      i64 0
    push           2          i64 
    casejumpeq     #9002      i64 0
    push           4          i64 
    casejumpeq     #9002      i64 0
    popstack                  i64 
    jump           #9003      
#9001: 
    push           8          i64 
    push           pc_genss.do_jmp.a u64 
    push           8          
    popptroff                 u8 1 0
    jump           #9004      
#9002: 
    setargs                   1 0
    push           "jmp[]size" u64 
    callproc       &pci_mcl.axerror 
    jump           #9004      
#9003: 
#9004: 
    setargs                   2 0
    push           4          i64 
    push           pc_genss.do_jmp.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_jmp.am i64 
    setargs                   1 0
    push           pc_genss.do_jmp.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   1 0
    push           pc_genss.do_jmp.a u64 
    callproc       &pc_genss.setaddrsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           255        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_jmp.am i64 
    push           pc_genss.do_jmp.a u64 
    callproc       &pc_genss.genamode 
#9000: 
#9005: 
    retproc                   
End


Proc pc_genss.getcurrdatalen: i64
    param          pc_genss.getcurrdatalen.id i64 
    procentry                 
    push           pc_genss.currseg i64 
    push           3          i64 
    jumpne         #9007      i64 
    push           pci_mcl.ss_zdatalen i64 
    setret                    i64 
    jump           #9008      
#9007: 
    setargs                   1 0
    push           pc_genss.currdata u64 
    callfn         &pc_genss.bufferlength i64 
    setret                    i64 
    jump           #9008      
#9008: 
    retfn                     i64 
End


Proc pc_genss.do_cmovcc:
    param          pc_genss.do_cmovcc.cond i64 
    param          pc_genss.do_cmovcc.a u64 
    param          pc_genss.do_cmovcc.b u64 
    local          pc_genss.do_cmovcc.am i64 
    local          pc_genss.do_cmovcc.regcode i64 
    procentry                 
    push           pc_genss.do_cmovcc.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_cmovcc.b u64 
    push           8          
    pushptroff                u8 1 0
    jumpeq         #9010      i64 
    push           pc_genss.do_cmovcc.b u64 
    push           8          
    pushptroff                u8 1 0
    jumpfalse      #9010      i64 
    setargs                   1 0
    push           "3:Opnd size mismatch" u64 
    callproc       &pci_mcl.axerror 
#9010: 
    push           pc_genss.do_cmovcc.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #9011      i64 
    setargs                   1 0
    push           "cmov/byte" u64 
    callproc       &pci_mcl.axerror 
#9011: 
    setargs                   1 0
    push           pc_genss.do_cmovcc.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_cmovcc.regcode i64 
    setargs                   2 0
    push           pc_genss.do_cmovcc.regcode i64 
    push           pc_genss.do_cmovcc.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_cmovcc.am i64 
    setargs                   1 0
    push           pc_genss.do_cmovcc.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           64         i64 
    push           pc_genss.do_cmovcc.cond i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_cmovcc.am i64 
    push           pc_genss.do_cmovcc.b u64 
    callproc       &pc_genss.genamode 
#9012: 
    retproc                   
End


Proc pc_genss.do_fmem:
    param          pc_genss.do_fmem.a u64 
    param          pc_genss.do_fmem.freal i64 
    param          pc_genss.do_fmem.code i64 
    local          pc_genss.do_fmem.am i64 
    local          pc_genss.do_fmem.regcode i64 
    local          pc_genss.do_fmem.mf i64 
    procentry                 
    push           pc_genss.do_fmem.a u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpeq         #9014      i64 
    setargs                   1 0
    push           "fmem/not mem" u64 
    callproc       &pci_mcl.axerror 
#9014: 
    push           pc_genss.do_fmem.freal i64 
    jumpfalse      #9015      i64 
    push           pc_genss.do_fmem.a u64 
    push           8          
    pushptroff                u8 1 0
    push           4          i64 
    casejumpeq     #9016      i64 0
    push           8          i64 
    casejumpeq     #9017      i64 0
    push           16         i64 
    casejumpeq     #9018      i64 0
    popstack                  i64 
    jump           #9019      
#9016: 
    push           0          i64 
    pop            pc_genss.do_fmem.mf i64 
    jump           #9020      
#9017: 
    push           2          i64 
    pop            pc_genss.do_fmem.mf i64 
    jump           #9020      
#9018: 
    push           1          i64 
    pop            pc_genss.do_fmem.mf i64 
    push           pc_genss.do_fmem.code i64 
    push           0          i64 
    casejumpeq     #9021      i64 0
    push           3          i64 
    casejumpeq     #9022      i64 0
    popstack                  i64 
    jump           #9023      
#9021: 
    push           5          i64 
    pop            pc_genss.do_fmem.code i64 
    jump           #9024      
#9022: 
    push           7          i64 
    pop            pc_genss.do_fmem.code i64 
    jump           #9024      
#9023: 
    setargs                   1 0
    push           "r80 not allowed" u64 
    callproc       &pci_mcl.axerror 
#9024: 
    jump           #9020      
#9019: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "SIZE="    u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_genss.do_fmem.a u64 
    push           8          
    pushptroff                u8 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "fmem size" u64 
    callproc       &pci_mcl.axerror 
#9020: 
    jump           #9025      
#9015: 
    push           pc_genss.do_fmem.a u64 
    push           8          
    pushptroff                u8 1 0
    push           2          i64 
    casejumpeq     #9026      i64 0
    push           4          i64 
    casejumpeq     #9027      i64 0
    push           8          i64 
    casejumpeq     #9028      i64 0
    popstack                  i64 
    jump           #9029      
#9026: 
    push           3          i64 
    pop            pc_genss.do_fmem.mf i64 
    jump           #9030      
#9027: 
    push           1          i64 
    pop            pc_genss.do_fmem.mf i64 
    jump           #9030      
#9028: 
    push           3          i64 
    pop            pc_genss.do_fmem.mf i64 
    push           pc_genss.do_fmem.code i64 
    push           0          i64 
    casejumpeq     #9031      i64 0
    push           3          i64 
    casejumpeq     #9032      i64 0
    popstack                  i64 
    jump           #9033      
#9031: 
    push           5          i64 
    pop            pc_genss.do_fmem.code i64 
    jump           #9034      
#9032: 
    push           7          i64 
    pop            pc_genss.do_fmem.code i64 
    jump           #9034      
#9033: 
    setargs                   1 0
    push           "fst i64?" u64 
    callproc       &pci_mcl.axerror 
#9034: 
    jump           #9030      
#9029: 
    setargs                   1 0
    push           "fmem int size" u64 
    callproc       &pci_mcl.axerror 
#9030: 
#9025: 
    setargs                   2 0
    push           pc_genss.do_fmem.code i64 
    push           pc_genss.do_fmem.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_fmem.am i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           217        i64 
    push           pc_genss.do_fmem.mf i64 
    push           1          i64 
    shl                       i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_fmem.am i64 
    push           pc_genss.do_fmem.a u64 
    callproc       &pc_genss.genamode 
#9035: 
    retproc                   
End


Proc pc_genss.genrel8:
    param          pc_genss.genrel8.a u64 
    local          pc_genss.genrel8.d u64 
    procentry                 
    setargs                   2 0
    push           1          i64 
    push           pc_genss.genrel8.a u64 
    callfn         &pc_genss.getdef u64 
    pop            pc_genss.genrel8.d u64 
    push           pc_genss.genrel8.d u64 
    push           29         
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #9037      i64 
    setargs                   4 0
    push           0          i64 
    push           6          i64 
    setargs                   1 0
    push           3          i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           pc_genss.genrel8.d u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_genss.addfwdref u64 
    push           pc_genss.genrel8.d u64 
    push           8          
    popptroff                 u64 1 0
    setargs                   1 0
    push           0          i64 
    callproc       &pc_genss.genbyte 
    jump           #9038      
#9037: 
    setargs                   1 0
    push           "genrel8"  u64 
    callproc       &pci_mcl.axerror 
#9038: 
#9039: 
    retproc                   
End


Proc pc_genss.checkshortjump: i64
    param          pc_genss.checkshortjump.m u64 
    param          pc_genss.checkshortjump.d u64 
    local          pc_genss.checkshortjump.n i64 
    procentry                 
    push           0          i64 
    pop            pc_genss.checkshortjump.n i64 
    push           pc_genss.checkshortjump.m u64 
    pushptr                   u64 
    pop            pc_genss.checkshortjump.m u64 
    jump           #9041      
#9042: 
    push           pc_genss.checkshortjump.m u64 
    push           24         
    pushptroff                u8 1 0
    push           9          i64 
    casejumpeq     #9043      i64 0
    push           3          i64 
    casejumpeq     #9044      i64 0
    push           4          i64 
    casejumpeq     #9044      i64 0
    popstack                  i64 
    jump           #9045      
#9043: 
    push           pc_genss.checkshortjump.m u64 
    push           8          
    pushptroff                u64 1 0
    pushptr                   i64 
    push           pc_genss.checkshortjump.d u64 
    push           40         
    pushptroff                i32 1 0
    jumpne         #9046      i64 
    push           1          i64 
    setret                    i64 
    jump           #9047      
#9046: 
    jump           #9048      
#9044: 
    jump           #9048      
#9045: 
    push           &pc_genss.checkshortjump.n 
    incr                      i64 1
#9048: 
    push           pc_genss.checkshortjump.m u64 
    pushptr                   u64 
    pop            pc_genss.checkshortjump.m u64 
#9041: 
    push           pc_genss.checkshortjump.m u64 
    jumpfalse      #9049      u64 
    push           pc_genss.checkshortjump.n i64 
    push           8          i64 
    jumple         #9042      i64 
#9049: 
#9050: 
    push           0          i64 
    setret                    i64 
    jump           #9047      
#9047: 
    retfn                     i64 
End


Proc pc_genss.addfwdref: u64
    param          pc_genss.addfwdref.p u64 
    param          pc_genss.addfwdref.offset i64 
    param          pc_genss.addfwdref.reltype i64 
    param          pc_genss.addfwdref.seg i64 
    local          pc_genss.addfwdref.q u64 
    procentry                 
    setargs                   1 0
    push           16         i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pc_genss.addfwdref.q u64 
    push           pc_genss.addfwdref.p u64 
    push           pc_genss.addfwdref.q u64 
    push           0          
    popptroff                 u64 1 0
    push           pc_genss.addfwdref.offset i64 
    push           pc_genss.addfwdref.q u64 
    push           8          
    popptroff                 i32 1 0
    push           pc_genss.addfwdref.reltype i64 
    push           pc_genss.addfwdref.q u64 
    push           12         
    popptroff                 i16 1 0
    push           pc_genss.addfwdref.seg i64 
    push           pc_genss.addfwdref.q u64 
    push           14         
    popptroff                 i16 1 0
    push           pc_genss.addfwdref.q u64 
    setret                    u64 
    jump           #9052      
#9052: 
    retfn                     u64 
End


Proc pc_genss.switchseg:
    param          pc_genss.switchseg.newseg i64 
    procentry                 
    push           pc_genss.switchseg.newseg i64 
    push           pc_genss.currseg i64 
    jumpne         #9054      i64 
    jump           #9055      
#9054: 
    push           pc_genss.currseg i64 
    push           1          i64 
    casejumpeq     #9056      i64 0
    push           2          i64 
    casejumpeq     #9057      i64 0
    popstack                  i64 
    jump           #9058      
#9056: 
    push           pc_genss.currrelocs u64 
    pop            pci_mcl.ss_coderelocs u64 
    push           pc_genss.nrelocs i64 
    pop            pci_mcl.ss_ncoderelocs i64 
    jump           #9059      
#9057: 
    push           pc_genss.currrelocs u64 
    pop            pci_mcl.ss_idatarelocs u64 
    push           pc_genss.nrelocs i64 
    pop            pci_mcl.ss_nidatarelocs i64 
    jump           #9059      
#9058: 
#9059: 
    push           pc_genss.switchseg.newseg i64 
    pop            pc_genss.currseg i64 
    push           pc_genss.currseg i64 
    push           1          i64 
    casejumpeq     #9060      i64 0
    push           2          i64 
    casejumpeq     #9061      i64 0
    push           3          i64 
    casejumpeq     #9062      i64 0
    popstack                  i64 
    jump           #9063      
#9060: 
    push           pci_mcl.ss_code u64 
    pop            pc_genss.currdata u64 
    push           pci_mcl.ss_coderelocs u64 
    pop            pc_genss.currrelocs u64 
    push           pci_mcl.ss_ncoderelocs i64 
    pop            pc_genss.nrelocs i64 
    jump           #9064      
#9061: 
    push           pci_mcl.ss_idata u64 
    pop            pc_genss.currdata u64 
    push           pci_mcl.ss_idatarelocs u64 
    pop            pc_genss.currrelocs u64 
    push           pci_mcl.ss_nidatarelocs i64 
    pop            pc_genss.nrelocs i64 
    jump           #9064      
#9062: 
    push           pci_mcl.ss_zdata u64 
    pop            pc_genss.currdata u64 
    jump           #9064      
#9063: 
#9064: 
#9055: 
    retproc                   
End


Proc pc_genss.do_movdqx:
    param          pc_genss.do_movdqx.a u64 
    param          pc_genss.do_movdqx.b u64 
    param          pc_genss.do_movdqx.opc i64 
    local          pc_genss.do_movdqx.am i64 
    local          pc_genss.do_movdqx.regcode i64 
    procentry                 
    push           pc_genss.do_movdqx.a u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    casejumpeq     #9066      i64 0
    push           3          i64 
    casejumpeq     #9067      i64 0
    popstack                  i64 
    jump           #9068      
#9066: 
    push           pc_genss.do_movdqx.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    casejumpeq     #9069      i64 0
    push           3          i64 
    casejumpeq     #9070      i64 0
    popstack                  i64 
    jump           #9071      
#9069: 
    setargs                   1 0
    push           pc_genss.do_movdqx.b u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcodebx i64 
    pop            pc_genss.do_movdqx.regcode i64 
    setargs                   2 0
    push           pc_genss.do_movdqx.regcode i64 
    push           pc_genss.do_movdqx.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_movdqx.am i64 
    setargs                   1 0
    push           pc_genss.do_movdqx.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           111        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_movdqx.am i64 
    push           pc_genss.do_movdqx.a u64 
    callproc       &pc_genss.genamode 
    jump           #9072      
#9070: 
    setargs                   1 0
    push           pc_genss.do_movdqx.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_movdqx.regcode i64 
    setargs                   2 0
    push           pc_genss.do_movdqx.regcode i64 
    push           pc_genss.do_movdqx.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_movdqx.am i64 
    setargs                   1 0
    push           pc_genss.do_movdqx.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           111        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_movdqx.am i64 
    push           pc_genss.do_movdqx.b u64 
    callproc       &pc_genss.genamode 
    jump           #9072      
#9071: 
    setargs                   1 0
    push           "movdqx?"  u64 
    callproc       &pci_mcl.axerror 
#9072: 
    jump           #9073      
#9067: 
    push           pc_genss.do_movdqx.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    casejumpeq     #9074      i64 0
    popstack                  i64 
    jump           #9075      
#9074: 
    setargs                   1 0
    push           pc_genss.do_movdqx.b u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_movdqx.regcode i64 
    setargs                   2 0
    push           pc_genss.do_movdqx.regcode i64 
    push           pc_genss.do_movdqx.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_movdqx.am i64 
    setargs                   1 0
    push           pc_genss.do_movdqx.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           127        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_movdqx.am i64 
    push           pc_genss.do_movdqx.a u64 
    callproc       &pc_genss.genamode 
    jump           #9076      
#9075: 
    setargs                   1 0
    push           "movdqx"   u64 
    callproc       &pci_mcl.axerror 
#9076: 
    jump           #9073      
#9068: 
    setargs                   1 0
    push           "movdqx"   u64 
    callproc       &pci_mcl.axerror 
#9073: 
#9077: 
    retproc                   
End


Proc pc_genss.do_popcnt:
    param          pc_genss.do_popcnt.a u64 
    param          pc_genss.do_popcnt.b u64 
    local          pc_genss.do_popcnt.am i64 
    local          pc_genss.do_popcnt.regcode i64 
    procentry                 
    push           pc_genss.do_popcnt.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #9079      i64 
    push           pc_genss.do_popcnt.b u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #9080      i64 
    push           8          i64 
    push           pc_genss.do_popcnt.b u64 
    push           8          
    popptroff                 u8 1 0
#9080: 
#9079: 
    setargs                   1 0
    push           243        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_popcnt.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcodebx i64 
    pop            pc_genss.do_popcnt.regcode i64 
    setargs                   2 0
    push           pc_genss.do_popcnt.regcode i64 
    push           pc_genss.do_popcnt.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_popcnt.am i64 
    setargs                   1 0
    push           pc_genss.do_popcnt.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           184        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_popcnt.am i64 
    push           pc_genss.do_popcnt.b u64 
    callproc       &pc_genss.genamode 
#9081: 
    retproc                   
End


Proc pc_genss.do_bsf:
    param          pc_genss.do_bsf.a u64 
    param          pc_genss.do_bsf.b u64 
    param          pc_genss.do_bsf.opc i64 
    local          pc_genss.do_bsf.am i64 
    local          pc_genss.do_bsf.regcode i64 
    procentry                 
    push           pc_genss.do_bsf.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #9083      i64 
    push           pc_genss.do_bsf.b u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #9084      i64 
    push           8          i64 
    push           pc_genss.do_bsf.b u64 
    push           8          
    popptroff                 u8 1 0
#9084: 
#9083: 
    push           pc_genss.do_bsf.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_bsf.b u64 
    push           8          
    pushptroff                u8 1 0
    jumpeq         #9085      i64 
    setargs                   1 0
    push           "bsf size" u64 
    callproc       &pci_mcl.axerror 
#9085: 
    setargs                   1 0
    push           pc_genss.do_bsf.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcodebx i64 
    pop            pc_genss.do_bsf.regcode i64 
    setargs                   2 0
    push           pc_genss.do_bsf.regcode i64 
    push           pc_genss.do_bsf.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_bsf.am i64 
    setargs                   1 0
    push           pc_genss.do_bsf.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_bsf.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_bsf.am i64 
    push           pc_genss.do_bsf.b u64 
    callproc       &pc_genss.genamode 
#9086: 
    retproc                   
End


Proc pc_genss.extendsymboltable:
    local          pc_genss.extendsymboltable.oldsymboltable u64 
    local          pc_genss.extendsymboltable.oldsymboltablesize i64 
    local          pc_genss.extendsymboltable.i i64 
    procentry                 
    push           pci_mcl.ss_symboltablesize i64 
    pop            pc_genss.extendsymboltable.oldsymboltablesize i64 
    push           pci_mcl.ss_symboltable u64 
    pop            pc_genss.extendsymboltable.oldsymboltable u64 
    push           &pci_mcl.ss_symboltablesize 
    push           2          i64 
    multo                     i64 
    setargs                   1 0
    push           8          i64 
    push           pci_mcl.ss_symboltablesize i64 
    mul                       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pci_mcl.ss_symboltable u64 
#9088: 
    push           1          i64 
    pop            pc_genss.extendsymboltable.i i64 
    push           pci_mcl.ss_nsymbols i64 
    push           1          i64 
    jumplt         #9089      i64 
#9090: 
    push           pc_genss.extendsymboltable.oldsymboltable u64 
    push           pc_genss.extendsymboltable.i i64 
    pushptroff                u64 8 -8
    push           pci_mcl.ss_symboltable u64 
    push           pc_genss.extendsymboltable.i i64 
    popptroff                 u64 8 -8
#9091: 
    forup          #9090      i64 1
    opnd           pc_genss.extendsymboltable.i 
    opnd           pci_mcl.ss_nsymbols 
#9089: 
    setargs                   2 0
    push           8          i64 
    push           pc_genss.extendsymboltable.oldsymboltablesize i64 
    mul                       i64 
    push           pc_genss.extendsymboltable.oldsymboltable u64 
    callproc       &mlibp.pcm_free 
#9092: 
    retproc                   
End


Proc pc_genss.fixregvar:
    local          pc_genss.fixregvar.m u64 
    procentry                 
    push           pci_mcl.mccode u64 
    pop            pc_genss.fixregvar.m u64 
#9094: 
    retproc                   
End


Proc pc_genss.initlib:
    param          pc_genss.initlib.nlabels i64 
    local          pc_genss.initlib.str block:256 
    local          pc_genss.initlib.i i64 
    procentry                 
    setargs                   1 0
    push           262144     i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pci_mcl.ss_symboltable u64 
    push           32768      i64 
    pop            pci_mcl.ss_symboltablesize i64 
    push           0          i64 
    pop            pci_mcl.ss_nsymbols i64 
    setargs                   1 0
    push           pc_genss.initlib.nlabels i64 
    push           8          i64 
    mul                       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pci_mcl.labeldeftable u64 
#9096: 
    push           1          i64 
    pop            pc_genss.initlib.i i64 
    push           pc_genss.initlib.nlabels i64 
    push           1          i64 
    jumplt         #9097      i64 
#9098: 
    setargs                   1 0
    push           64         i64 
    callfn         &mlibp.pcm_allocz u64 
    push           pci_mcl.labeldeftable u64 
    push           pc_genss.initlib.i i64 
    popptroff                 u64 8 -8
    push           pc_genss.initlib.i i64 
    push           pci_mcl.labeldeftable u64 
    push           pc_genss.initlib.i i64 
    pushptroff                u64 8 -8
    push           40         
    popptroff                 i32 1 0
    setargs                   1 0
    push           &pc_genss.initlib.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "(L#)"     u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           pc_genss.initlib.i i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           &pc_genss.initlib.str 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           pci_mcl.labeldeftable u64 
    push           pc_genss.initlib.i i64 
    pushptroff                u64 8 -8
    push           0          
    popptroff                 u64 1 0
    push           1          i64 
    push           pci_mcl.labeldeftable u64 
    push           pc_genss.initlib.i i64 
    pushptroff                u64 8 -8
    push           29         
    popptroff                 u8 1 0
#9099: 
    forup          #9098      i64 1
    opnd           pc_genss.initlib.i 
    opnd           pc_genss.initlib.nlabels 
#9097: 
#9100: 
    retproc                   
End


Proc pc_genss.buffercreate: u64
    param          pc_genss.buffercreate.size i64 
    local          pc_genss.buffercreate.a u64 
    procentry                 
    setargs                   1 0
    push           32         i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pc_genss.buffercreate.a u64 
    push           pc_genss.buffercreate.size i64 
    push           pc_genss.buffercreate.a u64 
    push           24         
    popptroff                 i64 1 0
    setargs                   1 0
    push           pc_genss.buffercreate.a u64 
    push           24         
    pushptroff                i64 1 0
    callfn         &mlibp.pcm_alloc u64 
    push           pc_genss.buffercreate.a u64 
    push           8          
    storeptroff               u64 1 0
    push           pc_genss.buffercreate.a u64 
    push           0          
    popptroff                 u64 1 0
    push           pc_genss.buffercreate.a u64 
    pushptr                   u64 
    push           pc_genss.buffercreate.a u64 
    push           24         
    pushptroff                i64 1 0
    addrefoff                 u64 1 0
    push           pc_genss.buffercreate.a u64 
    push           16         
    popptroff                 u64 1 0
    push           pc_genss.buffercreate.a u64 
    setret                    u64 
    jump           #9102      
#9102: 
    retfn                     u64 
End


Proc pc_genss.bufferexpand:
    param          pc_genss.bufferexpand.a u64 
    local          pc_genss.bufferexpand.newalloc i64 
    local          pc_genss.bufferexpand.usedbytes i64 
    local          pc_genss.bufferexpand.p u64 
    procentry                 
    push           pc_genss.bufferexpand.a u64 
    push           24         
    pushptroff                i64 1 0
    push           2          i64 
    mul                       i64 
    pop            pc_genss.bufferexpand.newalloc i64 
    push           pc_genss.bufferexpand.a u64 
    push           8          
    pushptroff                u64 1 0
    push           pc_genss.bufferexpand.a u64 
    pushptr                   u64 
    subref                    i64 1
    pop            pc_genss.bufferexpand.usedbytes i64 
    push           pc_genss.bufferexpand.usedbytes i64 
    push           pc_genss.bufferexpand.a u64 
    push           24         
    pushptroff                i64 1 0
    jumple         #9104      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "dbuffer error" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           0          
    stop                      
#9104: 
    setargs                   1 0
    push           pc_genss.bufferexpand.newalloc i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pc_genss.bufferexpand.p u64 
    setargs                   3 0
    push           pc_genss.bufferexpand.usedbytes u64 
    push           pc_genss.bufferexpand.a u64 
    pushptr                   u64 
    push           pc_genss.bufferexpand.p u64 
    callproc       &memcpy    
    push           pc_genss.bufferexpand.p u64 
    push           pc_genss.bufferexpand.a u64 
    push           0          
    popptroff                 u64 1 0
    push           pc_genss.bufferexpand.p u64 
    push           pc_genss.bufferexpand.usedbytes i64 
    addrefoff                 u64 1 0
    push           pc_genss.bufferexpand.a u64 
    push           8          
    popptroff                 u64 1 0
    push           pc_genss.bufferexpand.newalloc i64 
    push           pc_genss.bufferexpand.a u64 
    push           24         
    popptroff                 i64 1 0
    push           pc_genss.bufferexpand.p u64 
    push           pc_genss.bufferexpand.newalloc i64 
    addrefoff                 u64 1 0
    push           pc_genss.bufferexpand.a u64 
    push           16         
    popptroff                 u64 1 0
#9105: 
    retproc                   
End


Proc pc_genss.buffercheck:
    param          pc_genss.buffercheck.a u64 
    param          pc_genss.buffercheck.n i64 
    procentry                 
    jump           #9107      
#9108: 
    setargs                   1 0
    push           pc_genss.buffercheck.a u64 
    callproc       &pc_genss.bufferexpand 
#9107: 
    push           pc_genss.buffercheck.a u64 
    push           16         
    pushptroff                u64 1 0
    push           pc_genss.buffercheck.a u64 
    push           8          
    pushptroff                u64 1 0
    subref                    i64 1
    push           pc_genss.buffercheck.n i64 
    jumplt         #9108      i64 
#9109: 
#9110: 
    retproc                   
End


Proc pc_genss.bufferlength: i64
    param          pc_genss.bufferlength.a u64 
    procentry                 
    push           pc_genss.bufferlength.a u64 
    push           8          
    pushptroff                u64 1 0
    push           pc_genss.bufferlength.a u64 
    pushptr                   u64 
    subref                    i64 1
    setret                    i64 
    jump           #9112      
#9112: 
    retfn                     i64 
End


Proc pc_genss.bufferelemptr: u64
    param          pc_genss.bufferelemptr.a u64 
    param          pc_genss.bufferelemptr.offset i64 
    procentry                 
    push           pc_genss.bufferelemptr.a u64 
    pushptr                   u64 
    push           pc_genss.bufferelemptr.offset i64 
    addrefoff                 u64 1 0
    setret                    u64 
    jump           #9114      
#9114: 
    retfn                     u64 
End


Proc pc_genss.addword:
    param          pc_genss.addword.a u64 
    param          pc_genss.addword.x i64 
    procentry                 
    push           pc_genss.addword.x i64 
    push           pc_genss.addword.a u64 
    push           8          
    pushptroff                u64 1 0
    popptr                    u16 
    push           pc_genss.addword.a u64 
    push           8          
    addrefoff                 u64 1 0
    incr                      u64 2
#9116: 
    retproc                   
End


Proc pc_genss.adddword:
    param          pc_genss.adddword.a u64 
    param          pc_genss.adddword.x i64 
    procentry                 
    push           pc_genss.adddword.x i64 
    push           pc_genss.adddword.a u64 
    push           8          
    pushptroff                u64 1 0
    popptr                    u32 
    push           pc_genss.adddword.a u64 
    push           8          
    addrefoff                 u64 1 0
    incr                      u64 4
#9118: 
    retproc                   
End


Proc pc_genss.addqword:
    param          pc_genss.addqword.a u64 
    param          pc_genss.addqword.x i64 
    procentry                 
    push           pc_genss.addqword.x u64 
    push           pc_genss.addqword.a u64 
    push           8          
    pushptroff                u64 1 0
    popptr                    u64 
    push           pc_genss.addqword.a u64 
    push           8          
    addrefoff                 u64 1 0
    incr                      u64 8
#9120: 
    retproc                   
End


Proc pc_optim.peephole:
    param          pc_optim.peephole.m u64 
    local          pc_optim.peephole.m2 u64 
    local          pc_optim.peephole.m3 u64 
    local          pc_optim.peephole.mtarget u64 
    local          pc_optim.peephole.lastmcl u64 
    local          pc_optim.peephole.lab1 i64 
    local          pc_optim.peephole.lab2 i64 
    procentry                 
    push           0          u64 
    pop            pc_optim.peephole.lastmcl u64 
    push           pc_decls.optimflag i64 
    push           2          i64 
    jumpge         #9122      i64 
    jump           #9123      
#9122: 
#9124: 
    push           pc_optim.peephole.m u64 
    pushptr                   u64 
    pop            pc_optim.peephole.m2 u64 
    jump           #9125      
#9126: 
    push           pc_optim.peephole.m2 u64 
    pushptr                   u64 
    pop            pc_optim.peephole.m2 u64 
#9125: 
    push           pc_optim.peephole.m2 u64 
    jumpfalse      #9127      u64 
    push           pc_optim.peephole.m2 u64 
    push           24         
    pushptroff                u8 1 0
    push           3          i64 
    setjumpeq      #9126      i64 
    push           5          i64 
    setjumpeqx     #9126      i64 
#9127: 
#9128: 
    push           pc_optim.peephole.m u64 
    push           24         
    pushptroff                u8 1 0
    switch         #9129      1 42
    opnd           #9130      
#9129: 
    switchlabel    #9131      
    switchlabel    #9132      
    switchlabel    #9130      
    switchlabel    #9130      
    switchlabel    #9130      
    switchlabel    #9130      
    switchlabel    #9130      
    switchlabel    #9130      
    switchlabel    #9130      
    switchlabel    #9130      
    switchlabel    #9130      
    switchlabel    #9133      
    switchlabel    #9130      
    switchlabel    #9130      
    switchlabel    #9134      
    switchlabel    #9130      
    switchlabel    #9130      
    switchlabel    #9130      
    switchlabel    #9130      
    switchlabel    #9135      
    switchlabel    #9130      
    switchlabel    #9130      
    switchlabel    #9130      
    switchlabel    #9130      
    switchlabel    #9130      
    switchlabel    #9136      
    switchlabel    #9137      
    switchlabel    #9130      
    switchlabel    #9130      
    switchlabel    #9130      
    switchlabel    #9130      
    switchlabel    #9130      
    switchlabel    #9130      
    switchlabel    #9130      
    switchlabel    #9130      
    switchlabel    #9130      
    switchlabel    #9130      
    switchlabel    #9130      
    switchlabel    #9130      
    switchlabel    #9130      
    switchlabel    #9138      
    switchlabel    #9139      
    endswitch                 
#9131: 
    jump           #9140      
#9132: 
    jump           #9141      
    jump           #9140      
#9136: 
!dojmp::
#9142: 
    push           pc_optim.peephole.m u64 
    push           8          
    pushptroff                u64 1 0
    push           12         
    pushptroff                u8 1 0
    push           7          i64 
    jumpeq         #9143      i64 
    jump           #9144      
#9143: 
    push           &pci_mcl.labeltable 
    push           pc_optim.peephole.m u64 
    push           8          
    pushptroff                u64 1 0
    pushptr                   i64 
    pushptroff                u64 8 -8
    pushptr                   u64 
    pop            pc_optim.peephole.mtarget u64 
    jump           #9145      
#9146: 
    push           pc_optim.peephole.mtarget u64 
    pushptr                   u64 
    pop            pc_optim.peephole.mtarget u64 
#9145: 
    push           pc_optim.peephole.mtarget u64 
    push           24         
    pushptroff                u8 1 0
    push           9          i64 
    jumpeq         #9146      i64 
#9147: 
    push           pc_optim.peephole.mtarget u64 
    push           24         
    pushptroff                u8 1 0
    push           26         i64 
    jumpne         #9148      i64 
    setargs                   1 0
    push           pc_optim.peephole.mtarget u64 
    push           8          
    pushptroff                u64 1 0
    pushptr                   i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           pc_optim.peephole.m u64 
    push           8          
    popptroff                 u64 1 0
#9148: 
    push           pc_optim.peephole.m u64 
    push           24         
    pushptroff                u8 1 0
    push           26         i64 
    jumpne         #9149      i64 
    push           pc_optim.peephole.m2 u64 
    push           24         
    pushptroff                u8 1 0
    push           26         i64 
    jumpne         #9149      i64 
    setargs                   2 0
    push           101        i64 
    push           pc_optim.peephole.m2 u64 
    callproc       &pc_optim.deletemcl 
#9149: 
    jump           #9140      
#9137: 
    push           pc_optim.peephole.m2 u64 
    push           24         
    pushptroff                u8 1 0
    push           26         i64 
    jumpeq         #9150      i64 
    jump           #9142      
#9150: 
    push           pc_optim.peephole.m u64 
    push           8          
    pushptroff                u64 1 0
    pushptr                   i64 
    pop            pc_optim.peephole.lab1 i64 
    push           pc_optim.peephole.m2 u64 
    pushptr                   u64 
    pop            pc_optim.peephole.m3 u64 
    push           pc_optim.peephole.m3 u64 
    push           24         
    pushptroff                u8 1 0
    push           9          i64 
    jumpne         #9151      i64 
    push           pc_optim.peephole.m3 u64 
    push           8          
    pushptroff                u64 1 0
    pushptr                   i64 
    push           pc_optim.peephole.lab1 i64 
    jumpne         #9151      i64 
    setargs                   1 0
    push           pc_optim.peephole.m2 u64 
    push           8          
    pushptroff                u64 1 0
    pushptr                   i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           pc_optim.peephole.m u64 
    push           8          
    popptroff                 u64 1 0
    push           &pci_mcl.asmrevcond 
    push           pc_optim.peephole.m u64 
    push           25         
    pushptroff                u8 1 0
    pushptroff                i64 8 0
    push           pc_optim.peephole.m u64 
    push           25         
    popptroff                 u8 1 0
    setargs                   2 0
    push           102        i64 
    push           pc_optim.peephole.m2 u64 
    callproc       &pc_optim.deletemcl 
#9151: 
    jump           #9140      
#9139: 
    push           pc_optim.peephole.lastmcl u64 
    push           24         
    pushptroff                u8 1 0
    push           39         i64 
    casejumpeq     #9152      i64 0
    push           40         i64 
    casejumpeq     #9152      i64 0
    push           41         i64 
    casejumpeq     #9152      i64 0
    popstack                  i64 
    jump           #9153      
#9152: 
    setargs                   2 0
    push           pc_optim.peephole.m u64 
    push           16         
    pushptroff                u64 1 0
    push           pc_optim.peephole.m u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.sameregopnd i64 
    jumpfalse      #9154      i64 
    setargs                   2 0
    push           pc_optim.peephole.lastmcl u64 
    push           8          
    pushptroff                u64 1 0
    push           pc_optim.peephole.m u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.sameregopnd i64 
    jumpfalse      #9154      i64 
    setargs                   2 0
    push           103        i64 
    push           pc_optim.peephole.m u64 
    callproc       &pc_optim.deletemcl 
#9154: 
    jump           #9155      
#9153: 
#9155: 
    jump           #9140      
#9135: 
    push           pc_optim.peephole.m u64 
    push           8          
    pushptroff                u64 1 0
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #9156      i64 
    push           pc_optim.peephole.m u64 
    push           8          
    pushptroff                u64 1 0
    push           8          
    pushptroff                u8 1 0
    push           8          i64 
    jumpne         #9156      i64 
    push           pc_optim.peephole.m u64 
    push           16         
    pushptroff                u64 1 0
    push           8          
    pushptroff                u8 1 0
    push           4          i64 
    jumpge         #9156      i64 
    setargs                   2 0
    push           4          i64 
    push           pc_optim.peephole.m u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.changeopndsize u64 
    push           pc_optim.peephole.m u64 
    push           8          
    popptroff                 u64 1 0
#9156: 
    jump           #9140      
#9133: 
    push           pc_optim.peephole.m u64 
    push           8          
    pushptroff                u64 1 0
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #9157      i64 
    push           pc_optim.peephole.m u64 
    push           8          
    pushptroff                u64 1 0
    push           10         
    pushptroff                u8 1 0
    push           11         i64 
    jumpne         #9157      i64 
    push           pc_optim.peephole.m u64 
    push           16         
    pushptroff                u64 1 0
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #9157      i64 
    push           pc_optim.peephole.m u64 
    push           16         
    pushptroff                u64 1 0
    push           10         
    pushptroff                u8 1 0
    push           2          i64 
    jumpgt         #9157      i64 
    push           pc_optim.peephole.lastmcl u64 
    push           8          
    pushptroff                u64 1 0
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #9158      i64 
    push           pc_optim.peephole.lastmcl u64 
    push           8          
    pushptroff                u64 1 0
    push           10         
    pushptroff                u8 1 0
    push           pc_optim.peephole.m u64 
    push           16         
    pushptroff                u64 1 0
    push           10         
    pushptroff                u8 1 0
    jumpne         #9158      i64 
    push           pc_optim.peephole.lastmcl u64 
    push           24         
    pushptroff                u8 1 0
    push           12         i64 
    setjumpeq      #9159      i64 
    push           19         i64 
    setjumpeq      #9159      i64 
    push           20         i64 
    setjumpeq      #9159      i64 
    push           15         i64 
    setjumpne      #9158      i64 
#9159: 
    setargs                   2 0
    push           8          i64 
    push           11         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           pc_optim.peephole.lastmcl u64 
    push           8          
    popptroff                 u64 1 0
    setargs                   2 0
    push           105        i64 
    push           pc_optim.peephole.m u64 
    callproc       &pc_optim.deletemcl 
#9158: 
#9157: 
    setargs                   1 0
    push           pc_optim.peephole.m u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_optim.isreg0 i64 
    jumpfalse      #9160      i64 
    setargs                   1 0
    push           pc_optim.peephole.m u64 
    push           16         
    pushptroff                u64 1 0
    callfn         &pc_optim.isregopnd i64 
    jumpfalse      #9160      i64 
    setargs                   1 0
    push           pc_optim.peephole.m2 u64 
    push           16         
    pushptroff                u64 1 0
    callfn         &pc_optim.isreg0 i64 
    jumpfalse      #9161      i64 
    push           pc_optim.peephole.m2 u64 
    push           43         
    addrefoff                 u64 1 0
    push           1          i64 
    pushptroff                u8 1 -1
    jumpfalse      #9161      i64 
    push           pc_optim.peephole.m2 u64 
    push           8          
    pushptroff                u64 1 0
    push           8          
    pushptroff                u8 1 0
    push           8          i64 
    jumpne         #9161      i64 
    push           pc_optim.peephole.m u64 
    push           16         
    pushptroff                u64 1 0
    push           pc_optim.peephole.m2 u64 
    push           16         
    popptroff                 u64 1 0
    setargs                   2 0
    push           106        i64 
    push           pc_optim.peephole.m u64 
    callproc       &pc_optim.deletemcl 
    jump           #9144      
#9161: 
    setargs                   1 0
    push           pc_optim.peephole.m2 u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_optim.isreg0 i64 
    jumptrue       #9162      i64 
    jump           #9144      
#9162: 
    push           pc_optim.peephole.m2 u64 
    pushptr                   u64 
    pop            pc_optim.peephole.m3 u64 
    push           pc_optim.peephole.m2 u64 
    push           24         
    pushptroff                u8 1 0
    push           43         i64 
    jumpne         #9163      i64 
    push           pc_optim.peephole.m3 u64 
    push           24         
    pushptroff                u8 1 0
    push           27         i64 
    jumpne         #9163      i64 
    push           pc_optim.peephole.m3 u64 
    push           43         
    addrefoff                 u64 1 0
    push           1          i64 
    pushptroff                u8 1 -1
    jumpfalse      #9163      i64 
    push           pc_optim.peephole.m u64 
    push           16         
    pushptroff                u64 1 0
    push           pc_optim.peephole.m2 u64 
    push           8          
    popptroff                 u64 1 0
    setargs                   2 0
    push           107        i64 
    push           pc_optim.peephole.m u64 
    callproc       &pc_optim.deletemcl 
    jump           #9164      
#9163: 
    push           pc_optim.peephole.m2 u64 
    push           24         
    pushptroff                u8 1 0
    push           42         i64 
    jumpne         #9165      i64 
    setargs                   1 0
    push           pc_optim.peephole.m2 u64 
    push           16         
    pushptroff                u64 1 0
    callfn         &pc_optim.isreg0 i64 
    jumpfalse      #9165      i64 
    push           pc_optim.peephole.m3 u64 
    push           24         
    pushptroff                u8 1 0
    push           27         i64 
    jumpne         #9165      i64 
    push           pc_optim.peephole.m3 u64 
    push           43         
    addrefoff                 u64 1 0
    push           1          i64 
    pushptroff                u8 1 -1
    jumpfalse      #9165      i64 
    push           pc_optim.peephole.m u64 
    push           16         
    pushptroff                u64 1 0
    push           pc_optim.peephole.m2 u64 
    push           8          
    popptroff                 u64 1 0
    push           pc_optim.peephole.m u64 
    push           16         
    pushptroff                u64 1 0
    push           pc_optim.peephole.m2 u64 
    push           16         
    popptroff                 u64 1 0
    setargs                   2 0
    push           108        i64 
    push           pc_optim.peephole.m u64 
    callproc       &pc_optim.deletemcl 
    jump           #9164      
#9165: 
    push           pc_optim.peephole.m2 u64 
    push           24         
    pushptroff                u8 1 0
    push           53         i64 
    setjumpeq      #9166      i64 
    push           54         i64 
    setjumpne      #9167      i64 
#9166: 
    setargs                   1 0
    push           pc_optim.peephole.m2 u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_optim.isreg0 i64 
    jumpfalse      #9167      i64 
    push           15         i64 
    push           pc_optim.peephole.m u64 
    push           24         
    popptroff                 u8 1 0
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           0          i64 
    startmult                 
    push           pc_optim.peephole.m2 u64 
    push           24         
    pushptroff                u8 1 0
    push           53         i64 
    jumpne         #9168      i64 
    push           1          i64 
    resetmult                 
    jump           #9169      
#9168: 
    push           -1         i64 
    endmult                   
#9169: 
    push           1          i64 
    push           0          i64 
    push           pc_optim.peephole.m u64 
    push           16         
    pushptroff                u64 1 0
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenindex u64 
    push           pc_optim.peephole.m u64 
    push           16         
    popptroff                 u64 1 0
    setargs                   2 0
    push           120        i64 
    push           pc_optim.peephole.m2 u64 
    callproc       &pc_optim.deletemcl 
    jump           #9124      
    jump           #9164      
#9167: 
    push           pc_optim.peephole.m2 u64 
    push           24         
    pushptroff                u8 1 0
    push           29         i64 
    setjumpeq      #9170      i64 
    push           30         i64 
    setjumpne      #9171      i64 
#9170: 
    setargs                   1 0
    push           pc_optim.peephole.m2 u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_optim.isreg0 i64 
    jumpfalse      #9171      i64 
    setargs                   1 0
    push           pc_optim.peephole.m2 u64 
    push           16         
    pushptroff                u64 1 0
    callfn         &pc_optim.isconst i64 
    jumpfalse      #9172      i64 
    push           pc_optim.peephole.m2 u64 
    push           16         
    pushptroff                u64 1 0
    pushptr                   i64 
    push           -2147483648 i64 
    push           2147483647 i64 
    jumpnotinrange #9172      i64 
    push           15         i64 
    push           pc_optim.peephole.m u64 
    push           24         
    popptroff                 u8 1 0
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           0          i64 
    startmult                 
    push           pc_optim.peephole.m2 u64 
    push           24         
    pushptroff                u8 1 0
    push           29         i64 
    jumpne         #9173      i64 
    push           pc_optim.peephole.m2 u64 
    push           16         
    pushptroff                u64 1 0
    pushptr                   i64 
    resetmult                 
    jump           #9174      
#9173: 
    push           pc_optim.peephole.m2 u64 
    push           16         
    pushptroff                u64 1 0
    pushptr                   i64 
    neg                       i64 
    endmult                   
#9174: 
    push           1          i64 
    push           0          i64 
    push           pc_optim.peephole.m u64 
    push           16         
    pushptroff                u64 1 0
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenindex u64 
    push           pc_optim.peephole.m u64 
    push           16         
    popptroff                 u64 1 0
    setargs                   2 0
    push           121        i64 
    push           pc_optim.peephole.m2 u64 
    callproc       &pc_optim.deletemcl 
    jump           #9124      
    jump           #9175      
#9172: 
    setargs                   1 0
    push           pc_optim.peephole.m2 u64 
    push           16         
    pushptroff                u64 1 0
    callfn         &pc_optim.isregopnd i64 
    jumpfalse      #9176      i64 
    push           pc_optim.peephole.m2 u64 
    push           24         
    pushptroff                u8 1 0
    push           29         i64 
    jumpne         #9176      i64 
    push           15         i64 
    push           pc_optim.peephole.m u64 
    push           24         
    popptroff                 u8 1 0
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           0          i64 
    push           0          i64 
    push           1          i64 
    push           pc_optim.peephole.m2 u64 
    push           16         
    pushptroff                u64 1 0
    push           10         
    pushptroff                u8 1 0
    push           pc_optim.peephole.m u64 
    push           16         
    pushptroff                u64 1 0
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenindex u64 
    push           pc_optim.peephole.m u64 
    push           16         
    popptroff                 u64 1 0
    setargs                   2 0
    push           122        i64 
    push           pc_optim.peephole.m2 u64 
    callproc       &pc_optim.deletemcl 
    jump           #9124      
#9176: 
#9175: 
#9171: 
#9164: 
#9160: 
    setargs                   1 0
    push           pc_optim.peephole.m u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_optim.isreg0 i64 
    jumpfalse      #9177      i64 
    setargs                   1 0
    push           pc_optim.peephole.m u64 
    push           16         
    pushptroff                u64 1 0
    callfn         &pc_optim.isconst i64 
    jumpfalse      #9177      i64 
    push           pc_optim.peephole.m u64 
    push           16         
    pushptroff                u64 1 0
    pushptr                   i64 
    push           -2147483648 i64 
    push           2147483647 i64 
    jumpnotinrange #9177      i64 
    setargs                   1 0
    push           pc_optim.peephole.m2 u64 
    push           16         
    pushptroff                u64 1 0
    callfn         &pc_optim.isreg0 i64 
    jumpfalse      #9178      i64 
    push           pc_optim.peephole.m2 u64 
    push           43         
    addrefoff                 u64 1 0
    push           1          i64 
    pushptroff                u8 1 -1
    jumpfalse      #9178      i64 
    push           pc_optim.peephole.m u64 
    push           16         
    pushptroff                u64 1 0
    push           pc_optim.peephole.m2 u64 
    push           16         
    popptroff                 u64 1 0
    setargs                   2 0
    push           109        i64 
    push           pc_optim.peephole.m u64 
    callproc       &pc_optim.deletemcl 
#9178: 
#9177: 
    push           pc_optim.peephole.m u64 
    push           16         
    pushptroff                u64 1 0
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #9179      i64 
    push           pc_optim.peephole.m2 u64 
    push           24         
    pushptroff                u8 1 0
    push           12         i64 
    jumpne         #9179      i64 
    push           pc_optim.peephole.m2 u64 
    push           8          
    pushptroff                u64 1 0
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #9179      i64 
    push           pc_optim.peephole.m u64 
    push           16         
    pushptroff                u64 1 0
    push           10         
    pushptroff                u8 1 0
    push           pc_optim.peephole.m2 u64 
    push           8          
    pushptroff                u64 1 0
    push           10         
    pushptroff                u8 1 0
    jumpne         #9179      i64 
    setargs                   2 0
    push           pc_optim.peephole.m2 u64 
    push           16         
    pushptroff                u64 1 0
    push           pc_optim.peephole.m u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.sameoperand i64 
    jumpfalse      #9179      i64 
    setargs                   2 0
    push           141        i64 
    push           pc_optim.peephole.m2 u64 
    callproc       &pc_optim.deletemcl 
#9179: 
    push           pc_optim.peephole.m u64 
    push           16         
    pushptroff                u64 1 0
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #9180      i64 
    push           pc_optim.peephole.m2 u64 
    push           24         
    pushptroff                u8 1 0
    push           12         i64 
    jumpne         #9180      i64 
    push           pc_optim.peephole.m2 u64 
    push           8          
    pushptroff                u64 1 0
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #9180      i64 
    push           pc_optim.peephole.m u64 
    push           8          
    pushptroff                u64 1 0
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #9181      i64 
    setargs                   2 0
    push           pc_optim.peephole.m2 u64 
    push           16         
    pushptroff                u64 1 0
    push           pc_optim.peephole.m u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.sameoperand i64 
    jumpfalse      #9181      i64 
    setargs                   2 0
    push           8          i64 
    push           pc_optim.peephole.m u64 
    push           16         
    pushptroff                u64 1 0
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    push           pc_optim.peephole.m2 u64 
    push           16         
    popptroff                 u64 1 0
#9181: 
#9180: 
    jump           #9140      
#9138: 
    setargs                   1 0
    push           pc_optim.peephole.m u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_optim.isreg0 i64 
    jumpfalse      #9182      i64 
    setargs                   1 0
    push           pc_optim.peephole.m u64 
    push           16         
    pushptroff                u64 1 0
    callfn         &pc_optim.isreg0 i64 
    jumpfalse      #9182      i64 
    setargs                   1 0
    push           pc_optim.peephole.m2 u64 
    push           16         
    pushptroff                u64 1 0
    callfn         &pc_optim.isreg0 i64 
    jumpfalse      #9183      i64 
    push           pc_optim.peephole.m2 u64 
    push           43         
    addrefoff                 u64 1 0
    push           1          i64 
    pushptroff                u8 1 -1
    jumpfalse      #9183      i64 
    setargs                   2 0
    push           8          i64 
    push           0          i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_optim.peephole.m2 u64 
    push           16         
    popptroff                 u64 1 0
    setargs                   2 0
    push           110        i64 
    push           pc_optim.peephole.m u64 
    callproc       &pc_optim.deletemcl 
#9183: 
#9182: 
    jump           #9140      
#9134: 
    setargs                   1 0
    push           pc_optim.peephole.m u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_optim.isreg0 i64 
    jumpfalse      #9184      i64 
    push           pc_optim.peephole.m2 u64 
    push           24         
    pushptroff                u8 1 0
    push           12         i64 
    jumpne         #9184      i64 
    setargs                   1 0
    push           pc_optim.peephole.m2 u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_optim.isregopnd i64 
    jumpfalse      #9185      i64 
    setargs                   1 0
    push           pc_optim.peephole.m2 u64 
    push           16         
    pushptroff                u64 1 0
    callfn         &pc_optim.isreg0 i64 
    jumpfalse      #9185      i64 
    push           pc_optim.peephole.m2 u64 
    push           43         
    addrefoff                 u64 1 0
    push           1          i64 
    pushptroff                u8 1 -1
    jumpfalse      #9185      i64 
    push           pc_optim.peephole.m2 u64 
    push           8          
    pushptroff                u64 1 0
    push           pc_optim.peephole.m u64 
    push           8          
    popptroff                 u64 1 0
    setargs                   2 0
    push           131        i64 
    push           pc_optim.peephole.m2 u64 
    callproc       &pc_optim.deletemcl 
#9185: 
#9184: 
    jump           #9140      
#9130: 
#9140: 
!skip::
#9144: 
    push           pc_optim.peephole.m u64 
    pop            pc_optim.peephole.lastmcl u64 
    push           pc_optim.peephole.m2 u64 
    pop            pc_optim.peephole.m u64 
    jump           #9124      
#9141: 
#9123: 
    retproc                   
End


Proc pc_optim.isreg: i64
    param          pc_optim.isreg.a u64 
    param          pc_optim.isreg.reg i64 
    procentry                 
    push           pc_optim.isreg.a u64 
    jumptrue       #9187      u64 
    push           0          i64 
    setret                    i64 
    jump           #9188      
#9187: 
    push           pc_optim.isreg.a u64 
    push           9          
    pushptroff                u8 1 0
    istruel                   i64 
    notl                      i64 
    push           1          i64 
    jumpne         #9189      i64 
    push           0          i64 
    setret                    i64 
    jump           #9188      
#9189: 
    push           pc_optim.isreg.reg i64 
    push           0          i64 
    jumpne         #9190      i64 
    push           0          i64 
    setret                    i64 
    jump           #9188      
#9190: 
    push           pc_optim.isreg.reg i64 
    push           pc_optim.isreg.a u64 
    push           10         
    pushptroff                u8 1 0
    seteq                     i64 
    setret                    i64 
    jump           #9188      
#9188: 
    retfn                     i64 
End


Proc pc_optim.isreg0: i64
    param          pc_optim.isreg0.a u64 
    procentry                 
    push           pc_optim.isreg0.a u64 
    jumptrue       #9192      u64 
    push           0          i64 
    setret                    i64 
    jump           #9193      
#9192: 
    push           pc_optim.isreg0.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #9194      i64 
    push           pc_optim.isreg0.a u64 
    push           10         
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #9194      i64 
    push           1          i64 
    setret                    i64 
    jump           #9193      
#9194: 
    push           0          i64 
    setret                    i64 
    jump           #9193      
#9193: 
    retfn                     i64 
End


Proc pc_optim.isregopnd: i64
    param          pc_optim.isregopnd.a u64 
    procentry                 
    push           pc_optim.isregopnd.a u64 
    jumptrue       #9196      u64 
    push           0          i64 
    setret                    i64 
    jump           #9197      
#9196: 
    push           pc_optim.isregopnd.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #9198      i64 
    push           &pci_mcl.isregvar 
    push           pc_optim.isregopnd.a u64 
    push           10         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    jumpfalse      #9198      i64 
    push           1          i64 
    setret                    i64 
    jump           #9197      
#9198: 
    push           0          i64 
    setret                    i64 
    jump           #9197      
#9197: 
    retfn                     i64 
End


Proc pc_optim.isconst: i64
    param          pc_optim.isconst.a u64 
    procentry                 
    push           pc_optim.isconst.a u64 
    jumptrue       #9200      u64 
    push           0          i64 
    setret                    i64 
    jump           #9201      
#9200: 
    push           pc_optim.isconst.a u64 
    push           9          
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #9202      i64 
    push           pc_optim.isconst.a u64 
    push           12         
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #9202      i64 
    push           1          i64 
    setret                    i64 
    jump           #9201      
#9202: 
    push           0          i64 
    setret                    i64 
    jump           #9201      
#9201: 
    retfn                     i64 
End


Proc pc_optim.deletemcl:
    param          pc_optim.deletemcl.m u64 
    param          pc_optim.deletemcl.id i64 
    local          pc_optim.deletemcl.str block:128 
    procentry                 
    push           5          i64 
    push           pc_optim.deletemcl.m u64 
    push           24         
    popptroff                 u8 1 0
#9204: 
    retproc                   
End


Proc pc_writeexe.writeexe:
    param          pc_writeexe.writeexe.outfile u64 
    param          pc_writeexe.writeexe.dodll i64 
    local          pc_writeexe.writeexe.header block:20 
    local          pc_writeexe.writeexe.optheader block:240 
    local          pc_writeexe.writeexe.offset i64 
    local          pc_writeexe.writeexe.i i64 
    local          pc_writeexe.writeexe.aa i64 
    procentry                 
    push           pc_writeexe.writeexe.outfile u64 
    pop            pc_writeexe.dllfilename u64 
    push           pc_writeexe.writeexe.dodll i64 
    pop            pc_writeexe.isdll i64 
    setargs                   1 0
    push           pc_writeexe.filesize i64 
    callfn         &mlibp.pcm_allocz u64 
    store          pc_writeexe.dataptr u64 
    pop            pc_writeexe.datastart u64 
    setargs                   0 0
    callproc       &pc_writeexe.writedosstub 
    setargs                   0 0
    callproc       &pc_writeexe.writepesig 
    setargs                   0 0
    callproc       &pc_writeexe.writefileheader 
    setargs                   0 0
    callproc       &pc_writeexe.writeoptheader 
#9206: 
    push           1          i64 
    pop            pc_writeexe.writeexe.i i64 
    push           pc_writeexe.nsections i64 
    push           1          i64 
    jumplt         #9207      i64 
#9208: 
    setargs                   1 0
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.writeexe.i i64 
    addrefoff                 block:72 72 -72
    callproc       &pc_writeexe.writesectionheader 
#9209: 
    forup          #9208      i64 1
    opnd           pc_writeexe.writeexe.i 
    opnd           pc_writeexe.nsections 
#9207: 
    setargs                   1 0
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           32         
    pushptroff                i64 1 0
    callproc       &pc_writeexe.writepadding 
#9210: 
    push           1          i64 
    pop            pc_writeexe.writeexe.i i64 
    push           pc_writeexe.nsections i64 
    push           1          i64 
    jumplt         #9211      i64 
#9212: 
    setargs                   1 0
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.writeexe.i i64 
    addrefoff                 block:72 72 -72
    callproc       &pc_writeexe.writesectiondata 
#9213: 
    forup          #9212      i64 1
    opnd           pc_writeexe.writeexe.i 
    opnd           pc_writeexe.nsections 
#9211: 
    setargs                   3 0
    push           pc_writeexe.dataptr u64 
    push           pc_writeexe.datastart u64 
    subref                    i64 1
    push           pc_writeexe.datastart u64 
    push           pc_writeexe.writeexe.outfile u64 
    callfn         &mlibp.writefile i64 
    push           0          i64 
    jumpne         #9214      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Error writing exe file (possibly still running)" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#9214: 
#9215: 
    retproc                   
End


Proc pc_writeexe.genexe:
    param          pc_writeexe.genexe.entrypoint u64 
    param          pc_writeexe.genexe.outfile u64 
    param          pc_writeexe.genexe.dodll i64 
    procentry                 
    push           pc_writeexe.genexe.outfile u64 
    pop            pc_writeexe.dllfilename u64 
    push           pc_writeexe.genexe.dodll i64 
    pop            pc_writeexe.isdll i64 
    setargs                   0 0
    callproc       &pc_writeexe.setuplibfiles 
    startmult                 
    push           pc_writeexe.isdll i64 
    jumpfalse      #9217      i64 
    push           1713635328 i64 
    resetmult                 
    jump           #9218      
#9217: 
    push           4194304    i64 
    endmult                   
#9218: 
    pop            pc_writeexe.imagebase i64 
    push           pc_writeexe.genexe.entrypoint u64 
    pop            pc_writeexe.userentrypoint u64 
    setargs                   0 0
    callproc       &pc_writeexe.loadlibs 
    setargs                   0 0
    callproc       &pc_writeexe.scanst 
    setargs                   0 0
    callproc       &pc_writeexe.getoffsets 
    setargs                   1 0
    push           &pc_writeexe.sectiontable 
    push           0          
    addrefoff                 u8 1 0
    callproc       &pc_writeexe.relocdata 
    setargs                   1 0
    push           &pc_writeexe.sectiontable 
    push           72         
    addrefoff                 u8 1 0
    callproc       &pc_writeexe.relocdata 
#9219: 
    retproc                   
End


Proc pc_writeexe.loadlibs:
    local          pc_writeexe.loadlibs.i i64 
    local          pc_writeexe.loadlibs.hinst i64 
    local          pc_writeexe.loadlibs.file u64 
    local          pc_writeexe.loadlibs.filename block:300 
    procentry                 
#9221: 
    push           1          i64 
    pop            pc_writeexe.loadlibs.i i64 
    push           pci_mcl.npsearchlibs i64 
    push           1          i64 
    jumplt         #9222      i64 
#9223: 
    setargs                   2 0
    push           &pci_mcl.psearchlibs 
    push           pc_writeexe.loadlibs.i i64 
    pushptroff                u64 8 -8
    push           &pc_writeexe.loadlibs.filename 
    callproc       &strcpy    
    setargs                   1 0
    push           &pc_writeexe.loadlibs.filename 
    callfn         &mwindowsp.os_getdllinst i64 
    pop            pc_writeexe.loadlibs.hinst i64 
    push           pc_writeexe.loadlibs.hinst i64 
    push           0          i64 
    jumpne         #9224      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "File:"    u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pc_writeexe.loadlibs.filename 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Can't load search lib" u64 
    callproc       &pci_mcl.axerror 
#9224: 
    push           pc_writeexe.loadlibs.hinst i64 
    push           &pc_writeexe.libinsttable 
    push           pc_writeexe.loadlibs.i i64 
    popptroff                 i64 8 -8
    setargs                   1 0
    push           &pc_writeexe.loadlibs.filename 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &pc_writeexe.libinstnames 
    push           pc_writeexe.loadlibs.i i64 
    popptroff                 u64 8 -8
#9225: 
    forup          #9223      i64 1
    opnd           pc_writeexe.loadlibs.i 
    opnd           pci_mcl.npsearchlibs 
#9222: 
#9226: 
    retproc                   
End


Proc pc_writeexe.initsectiontable:
    procentry                 
    push           ".text"    u64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           8          
    popptroff                 u64 1 0
    push           1          i64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           16         
    popptroff                 i64 1 0
    push           pci_mcl.ss_code u64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           0          
    popptroff                 u64 1 0
    setargs                   1 0
    push           pci_mcl.ss_code u64 
    callfn         &pc_genss.bufferlength i64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           40         
    popptroff                 i64 1 0
    setargs                   1 0
    push           pci_mcl.ss_idata u64 
    callfn         &pc_genss.bufferlength i64 
    push           0          i64 
    jumpne         #9228      i64 
    setargs                   2 0
    push           0          i64 
    push           pci_mcl.ss_idata u64 
    callproc       &pc_genss.addqword 
#9228: 
    push           ".data"    u64 
    push           &pc_writeexe.sectiontable 
    push           2          i64 
    addrefoff                 block:72 72 -72
    push           8          
    popptroff                 u64 1 0
    push           2          i64 
    push           &pc_writeexe.sectiontable 
    push           2          i64 
    addrefoff                 block:72 72 -72
    push           16         
    popptroff                 i64 1 0
    push           pci_mcl.ss_idata u64 
    push           &pc_writeexe.sectiontable 
    push           2          i64 
    addrefoff                 block:72 72 -72
    push           0          
    popptroff                 u64 1 0
    setargs                   1 0
    push           pci_mcl.ss_idata u64 
    callfn         &pc_genss.bufferlength i64 
    push           &pc_writeexe.sectiontable 
    push           2          i64 
    addrefoff                 block:72 72 -72
    push           40         
    popptroff                 i64 1 0
    setargs                   2 0
    push           512        i64 
    push           &pc_writeexe.sectiontable 
    push           2          i64 
    addrefoff                 block:72 72 -72
    push           40         
    pushptroff                i64 1 0
    callfn         &pc_writeexe.roundtoblock i64 
    push           &pc_writeexe.sectiontable 
    push           2          i64 
    addrefoff                 block:72 72 -72
    push           24         
    popptroff                 i64 1 0
    push           pci_mcl.ss_nidatarelocs i64 
    push           &pc_writeexe.sectiontable 
    push           2          i64 
    addrefoff                 block:72 72 -72
    push           64         
    popptroff                 i64 1 0
    push           pci_mcl.ss_idatarelocs u64 
    push           &pc_writeexe.sectiontable 
    push           2          i64 
    addrefoff                 block:72 72 -72
    push           56         
    popptroff                 u64 1 0
    push           pci_mcl.ss_zdatalen i64 
    push           0          i64 
    jumpne         #9229      i64 
    push           16         i64 
    pop            pci_mcl.ss_zdatalen i64 
#9229: 
    push           ".bss"     u64 
    push           &pc_writeexe.sectiontable 
    push           3          i64 
    addrefoff                 block:72 72 -72
    push           8          
    popptroff                 u64 1 0
    push           3          i64 
    push           &pc_writeexe.sectiontable 
    push           3          i64 
    addrefoff                 block:72 72 -72
    push           16         
    popptroff                 i64 1 0
    push           pci_mcl.ss_zdatalen i64 
    push           &pc_writeexe.sectiontable 
    push           3          i64 
    addrefoff                 block:72 72 -72
    push           40         
    popptroff                 i64 1 0
    setargs                   2 0
    push           512        i64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           40         
    pushptroff                i64 1 0
    callfn         &pc_writeexe.roundtoblock i64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           24         
    popptroff                 i64 1 0
    push           pci_mcl.ss_ncoderelocs i64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           64         
    popptroff                 i64 1 0
    push           pci_mcl.ss_coderelocs u64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           56         
    popptroff                 u64 1 0
    push           ".idata"   u64 
    push           &pc_writeexe.sectiontable 
    push           4          i64 
    addrefoff                 block:72 72 -72
    push           8          
    popptroff                 u64 1 0
    push           5          i64 
    push           &pc_writeexe.sectiontable 
    push           4          i64 
    addrefoff                 block:72 72 -72
    push           16         
    popptroff                 i64 1 0
    push           0          i64 
    push           &pc_writeexe.sectiontable 
    push           4          i64 
    addrefoff                 block:72 72 -72
    push           40         
    popptroff                 i64 1 0
    push           0          i64 
    push           &pc_writeexe.sectiontable 
    push           4          i64 
    addrefoff                 block:72 72 -72
    push           24         
    popptroff                 i64 1 0
    push           4          i64 
    pop            pc_writeexe.nsections i64 
#9230: 
    retproc                   
End


Proc pc_writeexe.roundtoblock: i64
    param          pc_writeexe.roundtoblock.n i64 
    param          pc_writeexe.roundtoblock.align i64 
    procentry                 
    push           pc_writeexe.roundtoblock.n i64 
    push           pc_writeexe.roundtoblock.align i64 
    push           1          i64 
    sub                       i64 
    iand                      i64 
    push           0          i64 
    jumpne         #9232      i64 
    push           pc_writeexe.roundtoblock.n i64 
    setret                    i64 
    jump           #9233      
#9232: 
    push           pc_writeexe.roundtoblock.n i64 
    push           pc_writeexe.roundtoblock.align i64 
    push           pc_writeexe.roundtoblock.n i64 
    push           pc_writeexe.roundtoblock.align i64 
    push           1          i64 
    sub                       i64 
    iand                      i64 
    sub                       i64 
    add                       i64 
    setret                    i64 
    jump           #9233      
#9233: 
    retfn                     i64 
End


Proc pc_writeexe.extractlibname: u64
    param          pc_writeexe.extractlibname.name u64 
    param          pc_writeexe.extractlibname.libno u64 
    param          pc_writeexe.extractlibname.moduleno i64 
    local          pc_writeexe.extractlibname.s u64 
    local          pc_writeexe.extractlibname.name2 u64 
    local          pc_writeexe.extractlibname.str block:256 
    local          pc_writeexe.extractlibname.str2 block:256 
    local          pc_writeexe.extractlibname.i i64 
    local          pc_writeexe.extractlibname.n i64 
    procentry                 
    push           0          u64 
    pop            pc_writeexe.extractlibname.name2 u64 
!reenter::
#9235: 
    push           pc_writeexe.extractlibname.name u64 
    pop            pc_writeexe.extractlibname.s u64 
    push           0          i64 
    push           pc_writeexe.extractlibname.libno u64 
    popptr                    i64 
    jump           #9236      
#9237: 
    push           pc_writeexe.extractlibname.s u64 
    pushptr                   u8 
    push           46         u64 
    jumpne         #9238      u64 
    setargs                   3 0
    push           pc_writeexe.extractlibname.s u64 
    push           pc_writeexe.extractlibname.name u64 
    subref                    u64 1
    push           pc_writeexe.extractlibname.name u64 
    push           &pc_writeexe.extractlibname.str 
    callproc       &memcpy    
    push           0          u64 
    push           &pc_writeexe.extractlibname.str 
    push           pc_writeexe.extractlibname.s u64 
    push           pc_writeexe.extractlibname.name u64 
    subref                    i64 1
    popptroff                 u8 1 0
    setargs                   2 0
    push           ".dll"     u64 
    push           &pc_writeexe.extractlibname.str 
    callproc       &strcat    
#9239: 
    push           1          i64 
    pop            pc_writeexe.extractlibname.i i64 
    push           pc_writeexe.ndlls i64 
    push           1          i64 
    jumplt         #9240      i64 
#9241: 
    setargs                   2 0
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.extractlibname.i i64 
    addrefoff                 block:48 48 -48
    pushptr                   u64 
    push           &pc_writeexe.extractlibname.str 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #9242      i64 
    push           pc_writeexe.extractlibname.i i64 
    push           pc_writeexe.extractlibname.libno u64 
    popptr                    i64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.extractlibname.libno u64 
    pushptr                   i64 
    addrefoff                 block:48 48 -48
    push           8          
    addrefoff                 u64 1 0
    incr                      i64 1
    startmult                 
    push           pc_writeexe.extractlibname.name2 u64 
    jumpfalse      #9243      u64 
    push           pc_writeexe.extractlibname.name2 u64 
    resetmult                 
    jump           #9244      
#9243: 
    push           pc_writeexe.extractlibname.s u64 
    push           1          i64 
    addrefoff                 u64 1 0
    endmult                   
#9244: 
    setret                    u64 
    jump           #9245      
#9242: 
#9246: 
    forup          #9241      i64 1
    opnd           pc_writeexe.extractlibname.i 
    opnd           pc_writeexe.ndlls 
#9240: 
    push           pc_writeexe.ndlls i64 
    push           50         i64 
    jumplt         #9247      i64 
    setargs                   1 0
    push           "Too many libs" u64 
    callproc       &pci_mcl.axerror 
#9247: 
    push           &pc_writeexe.ndlls 
    incrload                  i64 1
    push           pc_writeexe.extractlibname.libno u64 
    popptr                    i64 
    setargs                   1 0
    push           &pc_writeexe.extractlibname.str 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.extractlibname.libno u64 
    pushptr                   i64 
    addrefoff                 block:48 48 -48
    push           0          
    popptroff                 u64 1 0
    push           1          i64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.extractlibname.libno u64 
    pushptr                   i64 
    addrefoff                 block:48 48 -48
    push           8          
    popptroff                 i64 1 0
    startmult                 
    push           pc_writeexe.extractlibname.name2 u64 
    jumpfalse      #9248      u64 
    push           pc_writeexe.extractlibname.name2 u64 
    resetmult                 
    jump           #9249      
#9248: 
    push           pc_writeexe.extractlibname.s u64 
    push           1          i64 
    addrefoff                 u64 1 0
    endmult                   
#9249: 
    setret                    u64 
    jump           #9245      
#9238: 
    push           &pc_writeexe.extractlibname.s 
    incr                      u64 1
#9236: 
    push           pc_writeexe.extractlibname.s u64 
    pushptr                   u8 
    jumptrue       #9237      u64 
#9250: 
#9251: 
    push           1          i64 
    pop            pc_writeexe.extractlibname.i i64 
    push           pci_mcl.npsearchlibs i64 
    push           1          i64 
    jumplt         #9252      i64 
#9253: 
    setargs                   2 0
    push           pc_writeexe.extractlibname.name u64 
    push           &pc_writeexe.libinsttable 
    push           pc_writeexe.extractlibname.i i64 
    pushptroff                i64 8 -8
    callfn         &mwindowsp.os_getdllprocaddr u64 
    jumpfalse      #9254      u64 
    push           pc_writeexe.extractlibname.i i64 
    pop            pc_writeexe.extractlibname.n i64 
    jump           #9255      
#9254: 
#9256: 
    forup          #9253      i64 1
    opnd           pc_writeexe.extractlibname.i 
    opnd           pci_mcl.npsearchlibs 
#9252: 
    setargs                   1 0
    push           "Can't find external function" u64 
    callproc       &pci_mcl.axerror 
#9255: 
    push           &pc_writeexe.libnotable 
    push           pc_writeexe.extractlibname.n i64 
    pushptroff                i64 8 -8
    push           pc_writeexe.extractlibname.libno u64 
    storeptr                  i64 
    jumpfalse      #9257      i64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.extractlibname.libno u64 
    pushptr                   i64 
    addrefoff                 block:48 48 -48
    push           8          
    addrefoff                 u64 1 0
    incr                      i64 1
    push           pc_writeexe.extractlibname.name u64 
    setret                    u64 
    jump           #9245      
#9257: 
    setargs                   2 0
    push           &pci_mcl.psearchlibs 
    push           pc_writeexe.extractlibname.n i64 
    pushptroff                u64 8 -8
    push           &pc_writeexe.extractlibname.str 
    callproc       &strcpy    
    setargs                   2 0
    push           ".dll"     u64 
    push           &pc_writeexe.extractlibname.str 
    callproc       &strcat    
    push           pc_writeexe.ndlls i64 
    push           50         i64 
    jumplt         #9258      i64 
    setargs                   1 0
    push           "2:Too many libs" u64 
    callproc       &pci_mcl.axerror 
#9258: 
    push           &pc_writeexe.ndlls 
    incrload                  i64 1
    push           pc_writeexe.extractlibname.libno u64 
    popptr                    i64 
    setargs                   1 0
    push           &pc_writeexe.extractlibname.str 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.extractlibname.libno u64 
    pushptr                   i64 
    addrefoff                 block:48 48 -48
    push           0          
    popptroff                 u64 1 0
    push           1          i64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.extractlibname.libno u64 
    pushptr                   i64 
    addrefoff                 block:48 48 -48
    push           8          
    popptroff                 i64 1 0
    push           pc_writeexe.extractlibname.libno u64 
    pushptr                   i64 
    push           &pc_writeexe.libnotable 
    push           pc_writeexe.extractlibname.n i64 
    popptroff                 i64 8 -8
    push           pc_writeexe.extractlibname.name u64 
    setret                    u64 
    jump           #9245      
#9245: 
    retfn                     u64 
End


Proc pc_writeexe.scanst:
    local          pc_writeexe.scanst.i i64 
    local          pc_writeexe.scanst.libno i64 
    local          pc_writeexe.scanst.d u64 
    local          pc_writeexe.scanst.name u64 
    local          pc_writeexe.scanst.libname u64 
    local          pc_writeexe.scanst.dname u64 
    local          pc_writeexe.scanst.basename u64 
    procentry                 
#9260: 
    push           1          i64 
    pop            pc_writeexe.scanst.i i64 
    push           pci_mcl.ss_nsymbols i64 
    push           1          i64 
    jumplt         #9261      i64 
#9262: 
    push           pci_mcl.ss_symboltable u64 
    push           pc_writeexe.scanst.i i64 
    pushptroff                u64 8 -8
    pop            pc_writeexe.scanst.d u64 
    push           pc_writeexe.scanst.d u64 
    push           46         
    pushptroff                u16 1 0
    push           1          i64 
    dotindex                  i64 
    jumpfalse      #9263      u64 
    push           pc_writeexe.nimports i64 
    push           3000       i64 
    jumplt         #9264      i64 
    setargs                   1 0
    push           "genexe: Too many imports" u64 
    callproc       &pci_mcl.axerror 
#9264: 
    push           &pc_writeexe.nimports 
    incr                      i64 1
    push           pc_writeexe.scanst.d u64 
    pushptr                   u64 
    pop            pc_writeexe.scanst.dname u64 
    setargs                   3 0
    push           1          i64 
    push           &pc_writeexe.scanst.libno 
    push           pc_writeexe.scanst.dname u64 
    callfn         &pc_writeexe.extractlibname u64 
    pop            pc_writeexe.scanst.name u64 
    push           pc_writeexe.scanst.libno i64 
    push           &pc_writeexe.importtable 
    push           pc_writeexe.nimports i64 
    addrefoff                 block:48 48 -48
    push           8          
    popptroff                 i64 1 0
    push           pc_writeexe.scanst.name u64 
    push           &pc_writeexe.importtable 
    push           pc_writeexe.nimports i64 
    addrefoff                 block:48 48 -48
    push           16         
    popptroff                 u64 1 0
    push           pc_writeexe.scanst.d u64 
    push           &pc_writeexe.importtable 
    push           pc_writeexe.nimports i64 
    addrefoff                 block:48 48 -48
    push           0          
    popptroff                 u64 1 0
    push           pc_writeexe.nimports i64 
    push           pc_writeexe.scanst.d u64 
    push           44         
    popptroff                 i16 1 0
    jump           #9265      
#9263: 
    push           pc_writeexe.scanst.d u64 
    push           46         
    pushptroff                u16 1 0
    push           3          i64 
    dotindex                  i64 
    jumpfalse      #9266      u64 
    setargs                   1 0
    push           pc_writeexe.scanst.d u64 
    pushptr                   u64 
    callfn         &pc_libpcl.getbasename u64 
    pop            pc_writeexe.scanst.basename u64 
    push           pc_writeexe.userentrypoint u64 
    jumpfalse      #9267      u64 
    setargs                   2 0
    push           pc_writeexe.userentrypoint u64 
    push           pc_writeexe.scanst.basename u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #9268      i64 
    push           pc_writeexe.scanst.d u64 
    pop            pc_writeexe.stentrypoint u64 
#9268: 
    jump           #9269      
#9267: 
    setargs                   2 0
    push           "main"     u64 
    push           pc_writeexe.scanst.basename u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #9270      i64 
    push           pc_writeexe.isdll i64 
    jumptrue       #9270      i64 
    push           pc_writeexe.scanst.d u64 
    pop            pc_writeexe.stentrypoint u64 
    jump           #9271      
#9270: 
    setargs                   2 0
    push           "start"    u64 
    push           pc_writeexe.scanst.basename u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #9272      i64 
    push           pc_writeexe.isdll i64 
    jumptrue       #9272      i64 
    push           pc_writeexe.scanst.d u64 
    pop            pc_writeexe.stentrypoint2 u64 
    jump           #9271      
#9272: 
    setargs                   2 0
    push           "dllmain"  u64 
    push           pc_writeexe.scanst.basename u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #9273      i64 
    push           pc_writeexe.isdll i64 
    jumpfalse      #9273      i64 
    push           pc_writeexe.scanst.d u64 
    pop            pc_writeexe.stentrypoint u64 
#9273: 
#9271: 
#9269: 
    push           pc_writeexe.nexports i64 
    push           1000       i64 
    jumplt         #9274      i64 
    setargs                   1 0
    push           "gendll: Too many exports" u64 
    callproc       &pci_mcl.axerror 
#9274: 
    push           &pc_writeexe.nexports 
    incr                      i64 1
    push           pc_writeexe.scanst.d u64 
    push           &pc_writeexe.exporttable 
    push           pc_writeexe.nexports i64 
    addrefoff                 block:16 16 -16
    push           0          
    popptroff                 u64 1 0
    push           pc_writeexe.scanst.dname u64 
    push           &pc_writeexe.exporttable 
    push           pc_writeexe.nexports i64 
    addrefoff                 block:16 16 -16
    push           8          
    popptroff                 u64 1 0
#9266: 
#9265: 
#9275: 
    forup          #9262      i64 1
    opnd           pc_writeexe.scanst.i 
    opnd           pci_mcl.ss_nsymbols 
#9261: 
#9276: 
    retproc                   
End


Proc pc_writeexe.relocdata:
    param          pc_writeexe.relocdata.s u64 
    local          pc_writeexe.relocdata.u u64 
    local          pc_writeexe.relocdata.r u64 
    local          pc_writeexe.relocdata.p u64 
    local          pc_writeexe.relocdata.p32 u64 
    local          pc_writeexe.relocdata.p64 u64 
    local          pc_writeexe.relocdata.d u64 
    local          pc_writeexe.relocdata.offset i64 
    local          pc_writeexe.relocdata.index i64 
    local          pc_writeexe.relocdata.thunkoffset i64 
    local          pc_writeexe.relocdata.iatoffset i64 
    procentry                 
    setargs                   2 0
    push           0          i64 
    push           pc_writeexe.relocdata.s u64 
    pushptr                   u64 
    callfn         &pc_genss.bufferelemptr u64 
    pop            pc_writeexe.relocdata.p u64 
    push           pc_writeexe.relocdata.s u64 
    push           56         
    pushptroff                u64 1 0
    pop            pc_writeexe.relocdata.r u64 
    jump           #9278      
#9279: 
    push           pci_mcl.ss_symboltable u64 
    push           pc_writeexe.relocdata.r u64 
    push           24         
    pushptroff                i64 1 0
    pushptroff                u64 8 -8
    pop            pc_writeexe.relocdata.d u64 
    push           pc_writeexe.relocdata.d u64 
    push           44         
    pushptroff                i16 1 0
    pop            pc_writeexe.relocdata.index i64 
    push           &pc_writeexe.importtable 
    push           pc_writeexe.relocdata.index i64 
    addrefoff                 block:48 48 -48
    push           40         
    pushptroff                i64 1 0
    pop            pc_writeexe.relocdata.thunkoffset i64 
    push           pc_writeexe.relocdata.r u64 
    push           8          
    pushptroff                i64 1 0
    push           4          i64 
    casejumpeq     #9280      i64 0
    push           2          i64 
    casejumpeq     #9281      i64 0
    push           1          i64 
    casejumpeq     #9281      i64 0
    popstack                  i64 
    jump           #9282      
#9280: 
    push           pc_writeexe.relocdata.d u64 
    push           46         
    pushptroff                u16 1 0
    push           1          i64 
    dotindex                  i64 
    jumptrue       #9283      u64 
    setargs                   1 0
    push           "rel32/not imported" u64 
    callproc       &pci_mcl.axerror 
#9283: 
    push           pc_writeexe.relocdata.thunkoffset i64 
    push           pc_writeexe.relocdata.r u64 
    push           16         
    pushptroff                i64 1 0
    sub                       i64 
    push           4          i64 
    sub                       i64 
    push           pc_writeexe.relocdata.p u64 
    push           pc_writeexe.relocdata.r u64 
    push           16         
    pushptroff                i64 1 0
    popptroff                 u32 1 0
    jump           #9284      
#9281: 
    push           pc_writeexe.relocdata.d u64 
    push           46         
    pushptroff                u16 1 0
    push           1          i64 
    dotindex                  i64 
    jumpfalse      #9285      u64 
    push           pc_writeexe.imagebase i64 
    push           pc_writeexe.relocdata.thunkoffset i64 
    add                       i64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           48         
    pushptroff                i64 1 0
    add                       i64 
    push           pc_writeexe.relocdata.p u64 
    push           pc_writeexe.relocdata.r u64 
    push           16         
    pushptroff                i64 1 0
    popptroff                 u32 1 0
    jump           #9286      
#9285: 
    push           0          u64 
    pop            pc_writeexe.relocdata.u u64 
    push           pc_writeexe.relocdata.d u64 
    push           30         
    pushptroff                u8 1 0
    push           3          i64 
    casejumpeq     #9287      i64 0
    push           2          i64 
    casejumpeq     #9288      i64 0
    push           1          i64 
    casejumpeq     #9289      i64 0
    popstack                  i64 
    jump           #9290      
#9287: 
    push           &pc_writeexe.sectiontable 
    push           144        
    addrefoff                 u8 1 0
    pop            pc_writeexe.relocdata.u u64 
    jump           #9291      
#9288: 
    push           &pc_writeexe.sectiontable 
    push           72         
    addrefoff                 u8 1 0
    pop            pc_writeexe.relocdata.u u64 
    jump           #9291      
#9289: 
    push           &pc_writeexe.sectiontable 
    push           0          
    addrefoff                 u8 1 0
    pop            pc_writeexe.relocdata.u u64 
    jump           #9291      
#9290: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           pc_writeexe.relocdata.d u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_writeexe.relocdata.d u64 
    push           30         
    pushptroff                u8 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "RELOCDATA/SEG?" u64 
    callproc       &pci_mcl.axerror 
#9291: 
    push           pc_writeexe.relocdata.p u64 
    push           pc_writeexe.relocdata.r u64 
    push           16         
    pushptroff                i64 1 0
    addrefoff                 u64 1 0
    pop            pc_writeexe.relocdata.p32 u64 
    push           pc_writeexe.relocdata.r u64 
    push           8          
    pushptroff                i64 1 0
    push           2          i64 
    jumpne         #9292      i64 
    push           pc_writeexe.relocdata.p32 u64 
    pushptr                   u32 
    push           pc_writeexe.relocdata.u u64 
    push           48         
    pushptroff                i64 1 0
    add                       i64 
    push           pc_writeexe.imagebase i64 
    add                       i64 
    push           pc_writeexe.relocdata.p32 u64 
    popptr                    u32 
    jump           #9293      
#9292: 
    push           pc_writeexe.relocdata.p32 u64 
    pop            pc_writeexe.relocdata.p64 u64 
    push           pc_writeexe.relocdata.p64 u64 
    pushptr                   i64 
    push           pc_writeexe.relocdata.u u64 
    push           48         
    pushptroff                i64 1 0
    add                       i64 
    push           pc_writeexe.imagebase i64 
    add                       u64 
    push           pc_writeexe.relocdata.p64 u64 
    popptr                    u64 
#9293: 
#9286: 
    jump           #9284      
#9282: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pc_objdecls.relocnames 
    push           pc_writeexe.relocdata.r u64 
    push           8          
    pushptroff                i64 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Can't do this rel type" u64 
    callproc       &pci_mcl.axerror 
#9284: 
    push           pc_writeexe.relocdata.r u64 
    pushptr                   u64 
    pop            pc_writeexe.relocdata.r u64 
#9278: 
    push           pc_writeexe.relocdata.r u64 
    jumptrue       #9279      u64 
#9294: 
#9295: 
    retproc                   
End


Proc pc_writeexe.getbaserelocs:
    param          pc_writeexe.getbaserelocs.s u64 
    local          pc_writeexe.getbaserelocs.u u64 
    local          pc_writeexe.getbaserelocs.r u64 
    local          pc_writeexe.getbaserelocs.p u64 
    local          pc_writeexe.getbaserelocs.d u64 
    local          pc_writeexe.getbaserelocs.index i64 
    procentry                 
    setargs                   2 0
    push           0          i64 
    push           pc_writeexe.getbaserelocs.s u64 
    pushptr                   u64 
    callfn         &pc_genss.bufferelemptr u64 
    pop            pc_writeexe.getbaserelocs.p u64 
    push           pc_writeexe.getbaserelocs.s u64 
    push           56         
    pushptroff                u64 1 0
    pop            pc_writeexe.getbaserelocs.r u64 
    jump           #9297      
#9298: 
    push           pci_mcl.ss_symboltable u64 
    push           pc_writeexe.getbaserelocs.r u64 
    push           24         
    pushptroff                i64 1 0
    pushptroff                u64 8 -8
    pop            pc_writeexe.getbaserelocs.d u64 
    push           pc_writeexe.getbaserelocs.r u64 
    push           8          
    pushptroff                i64 1 0
    push           2          i64 
    casejumpeq     #9299      i64 0
    push           1          i64 
    casejumpeq     #9299      i64 0
    popstack                  i64 
    jump           #9300      
#9299: 
    push           pc_writeexe.getbaserelocs.d u64 
    push           46         
    pushptroff                u16 1 0
    push           1          i64 
    dotindex                  i64 
    jumpfalse      #9301      u64 
    jump           #9302      
#9301: 
    push           pc_writeexe.getbaserelocs.d u64 
    push           30         
    pushptroff                u8 1 0
    push           3          i64 
    casejumpeq     #9303      i64 0
    push           2          i64 
    casejumpeq     #9304      i64 0
    push           1          i64 
    casejumpeq     #9305      i64 0
    popstack                  i64 
    jump           #9306      
#9303: 
    push           &pc_writeexe.sectiontable 
    push           144        
    addrefoff                 u8 1 0
    pop            pc_writeexe.getbaserelocs.u u64 
    jump           #9307      
#9304: 
    push           &pc_writeexe.sectiontable 
    push           72         
    addrefoff                 u8 1 0
    pop            pc_writeexe.getbaserelocs.u u64 
    jump           #9307      
#9305: 
    push           &pc_writeexe.sectiontable 
    push           0          
    addrefoff                 u8 1 0
    pop            pc_writeexe.getbaserelocs.u u64 
    jump           #9307      
#9306: 
#9307: 
    setargs                   2 0
    push           pc_writeexe.getbaserelocs.r u64 
    push           8          
    pushptroff                i64 1 0
    push           pc_writeexe.getbaserelocs.u u64 
    push           48         
    pushptroff                i64 1 0
    push           pc_writeexe.getbaserelocs.r u64 
    push           16         
    pushptroff                i64 1 0
    add                       i64 
    callproc       &pc_writeexe.newbasereloc 
#9302: 
    jump           #9308      
#9300: 
#9308: 
    push           pc_writeexe.getbaserelocs.r u64 
    pushptr                   u64 
    pop            pc_writeexe.getbaserelocs.r u64 
#9297: 
    push           pc_writeexe.getbaserelocs.r u64 
    jumptrue       #9298      u64 
#9309: 
#9310: 
    retproc                   
End


Proc pc_writeexe.writerecordx:
    param          pc_writeexe.writerecordx.r u64 
    param          pc_writeexe.writerecordx.length i64 
    procentry                 
    setargs                   3 0
    push           pc_writeexe.writerecordx.length u64 
    push           pc_writeexe.writerecordx.r u64 
    push           pc_writeexe.dataptr u64 
    callproc       &memcpy    
    push           &pc_writeexe.dataptr 
    push           pc_writeexe.writerecordx.length i64 
    addrefoffto               u64 1 0
#9312: 
    retproc                   
End


Proc pc_writeexe.writedosstub:
    procentry                 
    setargs                   2 0
    push           128        i64 
    push           &pc_writeexe.writedosstub.stubdata 
    callproc       &pc_writeexe.writerecordx 
#9314: 
    retproc                   
End


Proc pc_writeexe.writepesig:
    procentry                 
    push           80         i64 
    push           &pc_writeexe.dataptr 
    loadincr                  u64 1
    popptr                    u8 
    push           69         i64 
    push           &pc_writeexe.dataptr 
    loadincr                  u64 1
    popptr                    u8 
    push           0          i64 
    push           &pc_writeexe.dataptr 
    loadincr                  u64 1
    popptr                    u8 
    push           0          i64 
    push           &pc_writeexe.dataptr 
    loadincr                  u64 1
    popptr                    u8 
#9316: 
    retproc                   
End


Proc pc_writeexe.writepadding:
    param          pc_writeexe.writepadding.offset i64 
    procentry                 
    push           pc_writeexe.datastart u64 
    push           pc_writeexe.writepadding.offset i64 
    addrefoff                 u64 1 0
    pop            pc_writeexe.dataptr u64 
#9318: 
    retproc                   
End


Proc pc_writeexe.writefileheader:
    local          pc_writeexe.writefileheader.header block:20 
    procentry                 
    push           &pc_writeexe.writefileheader.header 
    clear                     block:20 
    push           34404      i64 
    push           &pc_writeexe.writefileheader.header 
    push           0          
    popptroff                 u16 1 0
    push           pc_writeexe.nsections i64 
    push           &pc_writeexe.writefileheader.header 
    push           2          
    popptroff                 u16 1 0
    push           240        i64 
    push           &pc_writeexe.writefileheader.header 
    push           16         
    popptroff                 u16 1 0
    push           559        i64 
    push           &pc_writeexe.writefileheader.header 
    push           18         
    popptroff                 u16 1 0
    setargs                   2 0
    push           20         i64 
    push           &pc_writeexe.writefileheader.header 
    callproc       &pc_writeexe.writerecordx 
#9320: 
    retproc                   
End


Proc pc_writeexe.writeoptheader:
    local          pc_writeexe.writeoptheader.header block:240 
    procentry                 
    push           &pc_writeexe.writeoptheader.header 
    clear                     block:240 
    push           523        i64 
    push           &pc_writeexe.writeoptheader.header 
    push           0          
    popptroff                 u16 1 0
    push           1          i64 
    push           &pc_writeexe.writeoptheader.header 
    push           2          
    popptroff                 u8 1 0
    push           0          i64 
    push           &pc_writeexe.writeoptheader.header 
    push           3          
    popptroff                 u8 1 0
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           24         
    pushptroff                i64 1 0
    push           &pc_writeexe.writeoptheader.header 
    push           4          
    popptroff                 u32 1 0
    push           &pc_writeexe.sectiontable 
    push           2          i64 
    addrefoff                 block:72 72 -72
    push           24         
    pushptroff                i64 1 0
    push           &pc_writeexe.sectiontable 
    push           4          i64 
    addrefoff                 block:72 72 -72
    push           24         
    pushptroff                i64 1 0
    add                       i64 
    push           &pc_writeexe.writeoptheader.header 
    push           8          
    popptroff                 u32 1 0
    setargs                   2 0
    push           512        i64 
    push           &pc_writeexe.sectiontable 
    push           3          i64 
    addrefoff                 block:72 72 -72
    push           40         
    pushptroff                i64 1 0
    callfn         &pc_writeexe.roundtoblock i64 
    push           &pc_writeexe.writeoptheader.header 
    push           12         
    popptroff                 u32 1 0
    push           pc_writeexe.stentrypoint u64 
    push           0          u64 
    jumpne         #9322      u64 
    push           pc_writeexe.stentrypoint2 u64 
    pop            pc_writeexe.stentrypoint u64 
#9322: 
    push           pc_writeexe.stentrypoint u64 
    push           0          u64 
    jumpne         #9323      u64 
    push           pc_writeexe.userentrypoint u64 
    jumpfalse      #9324      u64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           pc_writeexe.userentrypoint u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "User entry point not found" u64 
    callproc       &pci_mcl.axerror 
    jump           #9325      
#9324: 
    push           pc_writeexe.isdll i64 
    jumptrue       #9326      i64 
    setargs                   1 0
    push           "Entry point not found: main or start" u64 
    callproc       &pci_mcl.axerror 
#9326: 
#9325: 
    jump           #9327      
#9323: 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           48         
    pushptroff                i64 1 0
    push           pc_writeexe.stentrypoint u64 
    push           32         
    pushptroff                i32 1 0
    add                       i64 
    push           &pc_writeexe.writeoptheader.header 
    push           16         
    popptroff                 u32 1 0
#9327: 
    push           4096       i64 
    push           &pc_writeexe.writeoptheader.header 
    push           20         
    popptroff                 u32 1 0
    push           pc_writeexe.imagebase u64 
    push           &pc_writeexe.writeoptheader.header 
    push           24         
    popptroff                 u64 1 0
    push           4096       i64 
    push           &pc_writeexe.writeoptheader.header 
    push           32         
    popptroff                 u32 1 0
    push           512        i64 
    push           &pc_writeexe.writeoptheader.header 
    push           36         
    popptroff                 u32 1 0
    push           4          i64 
    push           &pc_writeexe.writeoptheader.header 
    push           40         
    popptroff                 u16 1 0
    push           0          i64 
    push           &pc_writeexe.writeoptheader.header 
    push           42         
    popptroff                 u16 1 0
    push           5          i64 
    push           &pc_writeexe.writeoptheader.header 
    push           48         
    popptroff                 u16 1 0
    push           2          i64 
    push           &pc_writeexe.writeoptheader.header 
    push           50         
    popptroff                 u16 1 0
    push           pc_writeexe.imagesize i64 
    push           &pc_writeexe.writeoptheader.header 
    push           56         
    popptroff                 u32 1 0
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           32         
    pushptroff                i64 1 0
    push           &pc_writeexe.writeoptheader.header 
    push           60         
    popptroff                 u32 1 0
    push           3          i64 
    push           &pc_writeexe.writeoptheader.header 
    push           68         
    popptroff                 u16 1 0
    push           4194304    u64 
    push           &pc_writeexe.writeoptheader.header 
    push           72         
    popptroff                 u64 1 0
    push           2097152    u64 
    push           &pc_writeexe.writeoptheader.header 
    push           80         
    popptroff                 u64 1 0
    push           1048576    u64 
    push           &pc_writeexe.writeoptheader.header 
    push           88         
    popptroff                 u64 1 0
    push           4096       u64 
    push           &pc_writeexe.writeoptheader.header 
    push           96         
    popptroff                 u64 1 0
    push           16         i64 
    push           &pc_writeexe.writeoptheader.header 
    push           108        
    popptroff                 u32 1 0
    push           &pc_writeexe.sectiontable 
    push           4          i64 
    addrefoff                 block:72 72 -72
    push           48         
    pushptroff                i64 1 0
    push           &pc_writeexe.writeoptheader.header 
    push           120        
    popptroff                 u32 1 0
    push           &pc_writeexe.sectiontable 
    push           4          i64 
    addrefoff                 block:72 72 -72
    push           40         
    pushptroff                i64 1 0
    push           pc_writeexe.exportdirvirtsize i64 
    sub                       i64 
    push           pc_writeexe.blockdirvirtsize i64 
    sub                       i64 
    push           &pc_writeexe.writeoptheader.header 
    push           124        
    popptroff                 u32 1 0
    push           pc_writeexe.isdll i64 
    jumpfalse      #9328      i64 
    push           64         i64 
    push           &pc_writeexe.writeoptheader.header 
    push           70         
    popptroff                 u16 1 0
    push           pc_writeexe.exportdirvirtaddr i64 
    push           &pc_writeexe.writeoptheader.header 
    push           112        
    popptroff                 u32 1 0
    push           pc_writeexe.exportdirvirtsize i64 
    push           &pc_writeexe.writeoptheader.header 
    push           116        
    popptroff                 u32 1 0
    push           pc_writeexe.blockdirvirtaddr i64 
    push           &pc_writeexe.writeoptheader.header 
    push           152        
    popptroff                 u32 1 0
    push           pc_writeexe.blockdirvirtsize i64 
    push           &pc_writeexe.writeoptheader.header 
    push           156        
    popptroff                 u32 1 0
#9328: 
    push           pc_writeexe.fileiatoffset i64 
    push           &pc_writeexe.writeoptheader.header 
    push           208        
    popptroff                 u32 1 0
    push           pc_writeexe.fileiatsize i64 
    push           &pc_writeexe.writeoptheader.header 
    push           212        
    popptroff                 u32 1 0
    setargs                   2 0
    push           240        i64 
    push           &pc_writeexe.writeoptheader.header 
    callproc       &pc_writeexe.writerecordx 
#9329: 
    retproc                   
End


Proc pc_writeexe.writesectionheader:
    param          pc_writeexe.writesectionheader.s u64 
    local          pc_writeexe.writesectionheader.sheader block:40 
    local          pc_writeexe.writesectionheader.aa i64 
    procentry                 
    push           &pc_writeexe.writesectionheader.sheader 
    clear                     block:40 
    setargs                   2 0
    push           pc_writeexe.writesectionheader.s u64 
    push           8          
    pushptroff                u64 1 0
    push           &pc_writeexe.writesectionheader.sheader 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcpy    
    push           pc_writeexe.writesectionheader.s u64 
    push           40         
    pushptroff                i64 1 0
    push           &pc_writeexe.writesectionheader.sheader 
    push           8          
    popptroff                 u32 1 0
    push           pc_writeexe.writesectionheader.s u64 
    push           48         
    pushptroff                i64 1 0
    push           &pc_writeexe.writesectionheader.sheader 
    push           12         
    popptroff                 u32 1 0
    push           pc_writeexe.writesectionheader.s u64 
    push           32         
    pushptroff                i64 1 0
    push           &pc_writeexe.writesectionheader.sheader 
    push           20         
    popptroff                 u32 1 0
    push           pc_writeexe.writesectionheader.s u64 
    push           24         
    pushptroff                i64 1 0
    push           &pc_writeexe.writesectionheader.sheader 
    push           16         
    popptroff                 u32 1 0
    push           pc_writeexe.writesectionheader.s u64 
    push           16         
    pushptroff                i64 1 0
    push           3          i64 
    casejumpeq     #9331      i64 0
    push           2          i64 
    casejumpeq     #9332      i64 0
    push           1          i64 
    casejumpeq     #9333      i64 0
    push           5          i64 
    casejumpeq     #9334      i64 0
    popstack                  i64 
    jump           #9335      
#9331: 
    push           3226468480 i64 
    pop            pc_writeexe.writesectionheader.aa i64 
    push           pc_writeexe.writesectionheader.aa i64 
    push           &pc_writeexe.writesectionheader.sheader 
    push           36         
    popptroff                 u32 1 0
    jump           #9336      
#9332: 
    push           3226468416 i64 
    pop            pc_writeexe.writesectionheader.aa i64 
    push           pc_writeexe.writesectionheader.aa i64 
    push           &pc_writeexe.writesectionheader.sheader 
    push           36         
    popptroff                 u32 1 0
    jump           #9336      
#9333: 
    push           1615855648 i64 
    pop            pc_writeexe.writesectionheader.aa i64 
    push           pc_writeexe.writesectionheader.aa i64 
    push           &pc_writeexe.writesectionheader.sheader 
    push           36         
    popptroff                 u32 1 0
    jump           #9336      
#9334: 
    push           3224371264 i64 
    pop            pc_writeexe.writesectionheader.aa i64 
    push           pc_writeexe.writesectionheader.aa i64 
    push           &pc_writeexe.writesectionheader.sheader 
    push           36         
    popptroff                 u32 1 0
    jump           #9336      
#9335: 
#9336: 
    setargs                   2 0
    push           40         i64 
    push           &pc_writeexe.writesectionheader.sheader 
    callproc       &pc_writeexe.writerecordx 
#9337: 
    retproc                   
End


Proc pc_writeexe.writesectiondata:
    param          pc_writeexe.writesectiondata.s u64 
    procentry                 
    push           pc_writeexe.writesectiondata.s u64 
    push           16         
    pushptroff                i64 1 0
    push           5          i64 
    casejumpeq     #9339      i64 0
    push           3          i64 
    casejumpeq     #9340      i64 0
    popstack                  i64 
    jump           #9341      
#9339: 
    setargs                   2 0
    push           pc_writeexe.writesectiondata.s u64 
    push           40         
    pushptroff                i64 1 0
    push           pc_writeexe.writesectiondata.s u64 
    pushptr                   u64 
    callproc       &pc_writeexe.writerecordx 
    push           pc_writeexe.writesectiondata.s u64 
    push           24         
    pushptroff                i64 1 0
    push           pc_writeexe.writesectiondata.s u64 
    push           40         
    pushptroff                i64 1 0
    jumple         #9342      i64 
    push           &pc_writeexe.dataptr 
    push           pc_writeexe.writesectiondata.s u64 
    push           24         
    pushptroff                i64 1 0
    push           pc_writeexe.writesectiondata.s u64 
    push           40         
    pushptroff                i64 1 0
    sub                       i64 
    addrefoffto               u64 1 0
#9342: 
    jump           #9343      
#9340: 
    jump           #9343      
#9341: 
    setargs                   2 0
    push           pc_writeexe.writesectiondata.s u64 
    push           24         
    pushptroff                i64 1 0
    setargs                   2 0
    push           0          i64 
    push           pc_writeexe.writesectiondata.s u64 
    pushptr                   u64 
    callfn         &pc_genss.bufferelemptr u64 
    callproc       &pc_writeexe.writerecordx 
#9343: 
#9344: 
    retproc                   
End


Proc pc_writeexe.getoffsets:
    local          pc_writeexe.getoffsets.fileoffset i64 
    local          pc_writeexe.getoffsets.imageoffset i64 
    local          pc_writeexe.getoffsets.i i64 
    local          pc_writeexe.getoffsets.diroffset i64 
    local          pc_writeexe.getoffsets.impdirno i64 
    local          pc_writeexe.getoffsets.hinttableoffset i64 
    local          pc_writeexe.getoffsets.j i64 
    local          pc_writeexe.getoffsets.n i64 
    local          pc_writeexe.getoffsets.codesize i64 
    local          pc_writeexe.getoffsets.length i64 
    local          pc_writeexe.getoffsets.thunkoffset i64 
    local          pc_writeexe.getoffsets.offset i64 
    local          pc_writeexe.getoffsets.dirstartoffset i64 
    local          pc_writeexe.getoffsets.pcode u64 
    local          pc_writeexe.getoffsets.pimpdir u64 
    local          pc_writeexe.getoffsets.pdir u64 
    local          pc_writeexe.getoffsets.paddr u64 
    local          pc_writeexe.getoffsets.pname u64 
    local          pc_writeexe.getoffsets.iatoffset i64 
    local          pc_writeexe.getoffsets.phint u64 
    local          pc_writeexe.getoffsets.pextra u64 
    local          pc_writeexe.getoffsets.xxx i64 
    local          pc_writeexe.getoffsets.av_1 i64 
    local          pc_writeexe.getoffsets.thunkptr u64 
    local          pc_writeexe.getoffsets.codebase u64 
    local          pc_writeexe.getoffsets.thunkaddr i64 
    procentry                 
    push           392        i64 
    pop            pc_writeexe.getoffsets.fileoffset i64 
    push           &pc_writeexe.getoffsets.fileoffset 
    push           40         i64 
    push           pc_writeexe.nsections i64 
    mul                       i64 
    addto                     i64 
    setargs                   2 0
    push           512        i64 
    push           pc_writeexe.getoffsets.fileoffset i64 
    callfn         &pc_writeexe.roundtoblock i64 
    pop            pc_writeexe.getoffsets.fileoffset i64 
    push           4096       i64 
    pop            pc_writeexe.getoffsets.imageoffset i64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           40         
    pushptroff                i64 1 0
    pop            pc_writeexe.getoffsets.codesize i64 
    setargs                   2 0
    push           pc_writeexe.getoffsets.codesize i64 
    push           pci_mcl.ss_code u64 
    callfn         &pc_genss.bufferelemptr u64 
    pop            pc_writeexe.getoffsets.pcode u64 
    jump           #9346      
#9347: 
    push           144        i64 
    push           &pc_writeexe.getoffsets.pcode 
    loadincr                  u64 1
    popptr                    u8 
    push           &pc_writeexe.getoffsets.codesize 
    incr                      i64 1
#9346: 
    push           pc_writeexe.getoffsets.codesize i64 
    push           7          i64 
    iand                      i64 
    jumptrue       #9347      i64 
#9348: 
    push           pc_writeexe.getoffsets.codesize i64 
    pop            pc_writeexe.getoffsets.thunkoffset i64 
    push           &pc_writeexe.getoffsets.codesize 
    push           pc_writeexe.nimports i64 
    push           8          i64 
    mul                       i64 
    addto                     i64 
    push           pc_writeexe.getoffsets.codesize i64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           40         
    popptroff                 i64 1 0
    setargs                   2 0
    push           512        i64 
    push           pc_writeexe.getoffsets.codesize i64 
    callfn         &pc_writeexe.roundtoblock i64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           24         
    popptroff                 i64 1 0
    setargs                   2 0
    push           pc_writeexe.getoffsets.codesize i64 
    push           pc_writeexe.getoffsets.thunkoffset i64 
    sub                       i64 
    push           16         i64 
    add                       i64 
    push           pci_mcl.ss_code u64 
    callproc       &pc_genss.buffercheck 
#9349: 
    push           1          i64 
    pop            pc_writeexe.getoffsets.i i64 
    push           pc_writeexe.nsections i64 
    push           1          i64 
    jumplt         #9350      i64 
#9351: 
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:72 72 -72
    push           16         
    pushptroff                i64 1 0
    push           3          i64 
    jumpeq         #9352      i64 
    push           pc_writeexe.getoffsets.fileoffset i64 
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:72 72 -72
    push           32         
    popptroff                 i64 1 0
#9352: 
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:72 72 -72
    push           16         
    pushptroff                i64 1 0
    push           3          i64 
    jumpeq         #9353      i64 
    setargs                   2 0
    push           512        i64 
    push           pc_writeexe.getoffsets.fileoffset i64 
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:72 72 -72
    push           40         
    pushptroff                i64 1 0
    add                       i64 
    callfn         &pc_writeexe.roundtoblock i64 
    pop            pc_writeexe.getoffsets.fileoffset i64 
#9353: 
    push           pc_writeexe.getoffsets.imageoffset i64 
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:72 72 -72
    push           48         
    popptroff                 i64 1 0
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:72 72 -72
    push           16         
    pushptroff                i64 1 0
    push           5          i64 
    jumpne         #9354      i64 
    push           pc_writeexe.getoffsets.imageoffset i64 
    pop            pc_writeexe.getoffsets.diroffset i64 
    push           pc_writeexe.getoffsets.i i64 
    pop            pc_writeexe.getoffsets.impdirno i64 
#9354: 
    setargs                   2 0
    push           4096       i64 
    push           pc_writeexe.getoffsets.imageoffset i64 
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:72 72 -72
    push           40         
    pushptroff                i64 1 0
    add                       i64 
    callfn         &pc_writeexe.roundtoblock i64 
    pop            pc_writeexe.getoffsets.imageoffset i64 
#9355: 
    forup          #9351      i64 1
    opnd           pc_writeexe.getoffsets.i 
    opnd           pc_writeexe.nsections 
#9350: 
    push           pc_writeexe.isdll i64 
    jumpfalse      #9356      i64 
    setargs                   1 0
    push           &pc_writeexe.sectiontable 
    push           0          
    addrefoff                 u8 1 0
    callproc       &pc_writeexe.getbaserelocs 
    setargs                   1 0
    push           &pc_writeexe.sectiontable 
    push           72         
    addrefoff                 u8 1 0
    callproc       &pc_writeexe.getbaserelocs 
#9356: 
    push           &pc_writeexe.getoffsets.diroffset 
    push           pc_writeexe.ndlls i64 
    push           1          i64 
    add                       i64 
    push           20         i64 
    mul                       i64 
    addto                     i64 
#9357: 
    push           1          i64 
    pop            pc_writeexe.getoffsets.i i64 
    push           pc_writeexe.ndlls i64 
    push           1          i64 
    jumplt         #9358      i64 
#9359: 
    push           pc_writeexe.getoffsets.diroffset i64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           16         
    popptroff                 i64 1 0
    push           &pc_writeexe.getoffsets.diroffset 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           8          
    pushptroff                i64 1 0
    push           1          i64 
    add                       i64 
    push           8          i64 
    mul                       i64 
    addto                     i64 
#9360: 
    forup          #9359      i64 1
    opnd           pc_writeexe.getoffsets.i 
    opnd           pc_writeexe.ndlls 
#9358: 
    push           pc_writeexe.getoffsets.diroffset i64 
    pop            pc_writeexe.fileiatoffset i64 
#9361: 
    push           1          i64 
    pop            pc_writeexe.getoffsets.i i64 
    push           pc_writeexe.ndlls i64 
    push           1          i64 
    jumplt         #9362      i64 
#9363: 
    push           pc_writeexe.getoffsets.diroffset i64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           24         
    popptroff                 i64 1 0
    push           &pc_writeexe.getoffsets.diroffset 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           8          
    pushptroff                i64 1 0
    push           1          i64 
    add                       i64 
    push           8          i64 
    mul                       i64 
    addto                     i64 
#9364: 
    forup          #9363      i64 1
    opnd           pc_writeexe.getoffsets.i 
    opnd           pc_writeexe.ndlls 
#9362: 
    push           pc_writeexe.getoffsets.diroffset i64 
    push           pc_writeexe.fileiatoffset i64 
    sub                       i64 
    pop            pc_writeexe.fileiatsize i64 
    push           pc_writeexe.getoffsets.diroffset i64 
    pop            pc_writeexe.getoffsets.hinttableoffset i64 
#9365: 
    push           1          i64 
    pop            pc_writeexe.getoffsets.i i64 
    push           pc_writeexe.nimports i64 
    push           1          i64 
    jumplt         #9366      i64 
#9367: 
    setargs                   1 0
    push           &pc_writeexe.importtable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           16         
    pushptroff                u64 1 0
    callfn         &strlen    i64 
    push           3          i64 
    add                       i64 
    pop            pc_writeexe.getoffsets.length i64 
    push           pc_writeexe.getoffsets.length i64 
    push           1          i64 
    iand                      i64 
    jumpfalse      #9368      i64 
    push           &pc_writeexe.getoffsets.length 
    incr                      i64 1
#9368: 
    push           pc_writeexe.getoffsets.diroffset i64 
    push           &pc_writeexe.importtable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           24         
    popptroff                 i64 1 0
    push           &pc_writeexe.getoffsets.diroffset 
    push           pc_writeexe.getoffsets.length i64 
    addto                     i64 
#9369: 
    forup          #9367      i64 1
    opnd           pc_writeexe.getoffsets.i 
    opnd           pc_writeexe.nimports 
#9366: 
    setargs                   2 0
    push           4          i64 
    push           pc_writeexe.getoffsets.diroffset i64 
    callfn         &pc_writeexe.roundtoblock i64 
    pop            pc_writeexe.getoffsets.diroffset i64 
#9370: 
    push           1          i64 
    pop            pc_writeexe.getoffsets.i i64 
    push           pc_writeexe.ndlls i64 
    push           1          i64 
    jumplt         #9371      i64 
#9372: 
    setargs                   1 0
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    pushptr                   u64 
    callfn         &strlen    i64 
    push           1          i64 
    add                       i64 
    pop            pc_writeexe.getoffsets.length i64 
    push           pc_writeexe.getoffsets.length i64 
    push           1          i64 
    iand                      i64 
    jumpfalse      #9373      i64 
    push           &pc_writeexe.getoffsets.length 
    incr                      i64 1
#9373: 
    push           pc_writeexe.getoffsets.diroffset i64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           40         
    popptroff                 i64 1 0
    push           &pc_writeexe.getoffsets.diroffset 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           8          
    pushptroff                i64 1 0
    push           4          i64 
    mul                       i64 
    addto                     i64 
    push           pc_writeexe.getoffsets.diroffset i64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           32         
    popptroff                 i64 1 0
    push           &pc_writeexe.getoffsets.diroffset 
    push           pc_writeexe.getoffsets.length i64 
    addto                     i64 
#9374: 
    forup          #9372      i64 1
    opnd           pc_writeexe.getoffsets.i 
    opnd           pc_writeexe.ndlls 
#9371: 
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.getoffsets.impdirno i64 
    addrefoff                 block:72 72 -72
    push           48         
    pushptroff                i64 1 0
    pop            pc_writeexe.getoffsets.dirstartoffset i64 
    push           pc_writeexe.isdll i64 
    jumpfalse      #9375      i64 
    push           pc_writeexe.getoffsets.diroffset i64 
    pop            pc_writeexe.exportdirvirtaddr i64 
    push           pc_writeexe.getoffsets.diroffset i64 
    push           pc_writeexe.getoffsets.dirstartoffset i64 
    sub                       i64 
    pop            pc_writeexe.exportdiroffset i64 
    setargs                   0 0
    callfn         &pc_writeexe.getexporttablesize i64 
    pop            pc_writeexe.exportdirvirtsize i64 
    push           &pc_writeexe.getoffsets.diroffset 
    push           pc_writeexe.exportdirvirtsize i64 
    addto                     i64 
    setargs                   0 0
    callproc       &pc_writeexe.scanbaserelocs 
    push           pc_writeexe.getoffsets.diroffset i64 
    pop            pc_writeexe.blockdirvirtaddr i64 
    push           pc_writeexe.getoffsets.diroffset i64 
    push           pc_writeexe.getoffsets.dirstartoffset i64 
    sub                       i64 
    pop            pc_writeexe.blockdiroffset i64 
    push           pc_writeexe.basetablesize i64 
    pop            pc_writeexe.blockdirvirtsize i64 
    push           &pc_writeexe.getoffsets.diroffset 
    push           pc_writeexe.blockdirvirtsize i64 
    addto                     i64 
#9375: 
    push           pc_writeexe.getoffsets.diroffset i64 
    push           pc_writeexe.getoffsets.dirstartoffset i64 
    sub                       i64 
    pop            pc_writeexe.getoffsets.offset i64 
    push           pc_writeexe.getoffsets.offset i64 
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.getoffsets.impdirno i64 
    addrefoff                 block:72 72 -72
    push           40         
    popptroff                 i64 1 0
    setargs                   2 0
    push           512        i64 
    push           pc_writeexe.getoffsets.offset i64 
    callfn         &pc_writeexe.roundtoblock i64 
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.getoffsets.impdirno i64 
    addrefoff                 block:72 72 -72
    push           24         
    popptroff                 i64 1 0
    setargs                   2 0
    push           512        i64 
    push           pc_writeexe.getoffsets.fileoffset i64 
    push           pc_writeexe.getoffsets.offset i64 
    add                       i64 
    callfn         &pc_writeexe.roundtoblock i64 
    pop            pc_writeexe.filesize i64 
    setargs                   2 0
    push           4096       i64 
    push           pc_writeexe.getoffsets.imageoffset i64 
    push           pc_writeexe.getoffsets.diroffset i64 
    push           pc_writeexe.getoffsets.dirstartoffset i64 
    sub                       i64 
    add                       i64 
    callfn         &pc_writeexe.roundtoblock i64 
    pop            pc_writeexe.imagesize i64 
    setargs                   1 0
    push           pc_writeexe.getoffsets.offset i64 
    callfn         &mlibp.pcm_allocz u64 
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.getoffsets.impdirno i64 
    addrefoff                 block:72 72 -72
    push           0          
    storeptroff               u64 1 0
    pop            pc_writeexe.getoffsets.pimpdir u64 
    push           pc_writeexe.getoffsets.pimpdir u64 
    pop            pc_writeexe.getoffsets.pdir u64 
#9376: 
    push           1          i64 
    pop            pc_writeexe.getoffsets.i i64 
    push           pc_writeexe.ndlls i64 
    push           1          i64 
    jumplt         #9377      i64 
#9378: 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           16         
    pushptroff                i64 1 0
    push           pc_writeexe.getoffsets.pdir u64 
    push           0          
    popptroff                 u32 1 0
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           24         
    pushptroff                i64 1 0
    push           pc_writeexe.getoffsets.pdir u64 
    push           16         
    popptroff                 u32 1 0
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           32         
    pushptroff                i64 1 0
    push           pc_writeexe.getoffsets.pdir u64 
    push           12         
    popptroff                 u32 1 0
    push           &pc_writeexe.getoffsets.pdir 
    incr                      u64 20
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           24         
    pushptroff                i64 1 0
    pop            pc_writeexe.getoffsets.iatoffset i64 
    push           pc_writeexe.getoffsets.pimpdir u64 
    push           pc_writeexe.getoffsets.iatoffset i64 
    addrefoff                 u64 1 0
    push           pc_writeexe.getoffsets.dirstartoffset i64 
    subrefoff                 u64 1 0
    pop            pc_writeexe.getoffsets.paddr u64 
    push           pc_writeexe.getoffsets.pimpdir u64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           16         
    pushptroff                i64 1 0
    addrefoff                 u64 1 0
    push           pc_writeexe.getoffsets.dirstartoffset i64 
    subrefoff                 u64 1 0
    pop            pc_writeexe.getoffsets.pname u64 
#9379: 
    push           1          i64 
    pop            pc_writeexe.getoffsets.j i64 
    push           pc_writeexe.nimports i64 
    push           1          i64 
    jumplt         #9380      i64 
#9381: 
    push           &pc_writeexe.importtable 
    push           pc_writeexe.getoffsets.j i64 
    addrefoff                 block:48 48 -48
    push           8          
    pushptroff                i64 1 0
    push           pc_writeexe.getoffsets.i i64 
    jumpne         #9382      i64 
    push           &pc_writeexe.importtable 
    push           pc_writeexe.getoffsets.j i64 
    addrefoff                 block:48 48 -48
    push           24         
    pushptroff                i64 1 0
    push           pc_writeexe.getoffsets.paddr u64 
    storeptr                  i64 
    push           pc_writeexe.getoffsets.pname u64 
    popptr                    i64 
    push           pc_writeexe.getoffsets.iatoffset i64 
    push           &pc_writeexe.importtable 
    push           pc_writeexe.getoffsets.j i64 
    addrefoff                 block:48 48 -48
    push           32         
    popptroff                 i64 1 0
    push           &pc_writeexe.getoffsets.iatoffset 
    push           8          i64 
    addto                     i64 
    push           &pc_writeexe.getoffsets.pname 
    incr                      u64 8
    push           &pc_writeexe.getoffsets.paddr 
    incr                      u64 8
#9382: 
#9383: 
    forup          #9381      i64 1
    opnd           pc_writeexe.getoffsets.j 
    opnd           pc_writeexe.nimports 
#9380: 
#9384: 
    forup          #9378      i64 1
    opnd           pc_writeexe.getoffsets.i 
    opnd           pc_writeexe.ndlls 
#9377: 
#9385: 
    push           1          i64 
    pop            pc_writeexe.getoffsets.i i64 
    push           pc_writeexe.nimports i64 
    push           1          i64 
    jumplt         #9386      i64 
#9387: 
    push           pc_writeexe.getoffsets.pimpdir u64 
    push           &pc_writeexe.importtable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           24         
    pushptroff                i64 1 0
    addrefoff                 u64 1 0
    push           pc_writeexe.getoffsets.dirstartoffset i64 
    subrefoff                 u64 1 0
    pop            pc_writeexe.getoffsets.phint u64 
    push           &pc_writeexe.getoffsets.phint 
    push           2          i64 
    addrefoffto               u64 1 0
    setargs                   2 0
    push           &pc_writeexe.importtable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           16         
    pushptroff                u64 1 0
    push           pc_writeexe.getoffsets.phint u64 
    callproc       &strcpy    
#9388: 
    forup          #9387      i64 1
    opnd           pc_writeexe.getoffsets.i 
    opnd           pc_writeexe.nimports 
#9386: 
    push           pc_writeexe.getoffsets.dirstartoffset i64 
    pop            pc_writeexe.getoffsets.xxx i64 
#9389: 
    push           1          i64 
    pop            pc_writeexe.getoffsets.i i64 
    push           pc_writeexe.ndlls i64 
    push           1          i64 
    jumplt         #9390      i64 
#9391: 
    push           pc_writeexe.getoffsets.pimpdir u64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           40         
    pushptroff                i64 1 0
    addrefoff                 u64 1 0
    push           pc_writeexe.getoffsets.dirstartoffset i64 
    subrefoff                 u64 1 0
    pop            pc_writeexe.getoffsets.pextra u64 
#9392: 
    push           1          i64 
    pop            pc_writeexe.getoffsets.j i64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           8          
    pushptroff                i64 1 0
    pop            pc_writeexe.getoffsets.av_1 i64 
    push           pc_writeexe.getoffsets.av_1 i64 
    push           1          i64 
    jumplt         #9393      i64 
#9394: 
    push           pc_writeexe.getoffsets.xxx i64 
    push           pc_writeexe.getoffsets.pextra u64 
    popptr                    u32 
    push           &pc_writeexe.getoffsets.pextra 
    incr                      u64 4
#9395: 
    forup          #9394      i64 1
    opnd           pc_writeexe.getoffsets.j 
    opnd           pc_writeexe.getoffsets.av_1 
#9393: 
    push           &pc_writeexe.getoffsets.xxx 
    push           20         i64 
    addto                     i64 
    push           pc_writeexe.getoffsets.pimpdir u64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           32         
    pushptroff                i64 1 0
    addrefoff                 u64 1 0
    push           pc_writeexe.getoffsets.dirstartoffset i64 
    subrefoff                 u64 1 0
    pop            pc_writeexe.getoffsets.phint u64 
    setargs                   2 0
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    pushptr                   u64 
    push           pc_writeexe.getoffsets.phint u64 
    callproc       &strcpy    
#9396: 
    forup          #9391      i64 1
    opnd           pc_writeexe.getoffsets.i 
    opnd           pc_writeexe.ndlls 
#9390: 
    push           pc_writeexe.isdll i64 
    jumpfalse      #9397      i64 
    setargs                   1 0
    push           pc_writeexe.getoffsets.pimpdir u64 
    push           pc_writeexe.exportdiroffset i64 
    addrefoff                 u64 1 0
    callproc       &pc_writeexe.writeexporttable 
    setargs                   1 0
    push           pc_writeexe.getoffsets.pimpdir u64 
    push           pc_writeexe.blockdiroffset i64 
    addrefoff                 u64 1 0
    callproc       &pc_writeexe.writebasereloctable 
#9397: 
    setargs                   2 0
    push           pc_writeexe.getoffsets.thunkoffset i64 
    push           pci_mcl.ss_code u64 
    callfn         &pc_genss.bufferelemptr u64 
    pop            pc_writeexe.getoffsets.thunkptr u64 
    setargs                   2 0
    push           0          i64 
    push           pci_mcl.ss_code u64 
    callfn         &pc_genss.bufferelemptr u64 
    pop            pc_writeexe.getoffsets.codebase u64 
#9398: 
    push           1          i64 
    pop            pc_writeexe.getoffsets.i i64 
    push           pc_writeexe.nimports i64 
    push           1          i64 
    jumplt         #9399      i64 
#9400: 
    push           pc_writeexe.getoffsets.thunkptr u64 
    push           pc_writeexe.getoffsets.codebase u64 
    subref                    i64 1
    push           &pc_writeexe.importtable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           40         
    popptroff                 i64 1 0
    push           72         i64 
    push           &pc_writeexe.getoffsets.thunkptr 
    loadincr                  u64 1
    popptr                    u8 
    push           255        i64 
    push           &pc_writeexe.getoffsets.thunkptr 
    loadincr                  u64 1
    popptr                    u8 
    push           36         i64 
    push           &pc_writeexe.getoffsets.thunkptr 
    loadincr                  u64 1
    popptr                    u8 
    push           37         i64 
    push           &pc_writeexe.getoffsets.thunkptr 
    loadincr                  u64 1
    popptr                    u8 
    push           pc_writeexe.imagebase i64 
    push           &pc_writeexe.importtable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           32         
    pushptroff                i64 1 0
    add                       i64 
    pop            pc_writeexe.getoffsets.thunkaddr i64 
    push           pc_writeexe.getoffsets.thunkaddr i64 
    push           pc_writeexe.getoffsets.thunkptr u64 
    popptr                    i32 
    push           &pc_writeexe.getoffsets.thunkptr 
    push           4          i64 
    addrefoffto               u64 1 0
#9401: 
    forup          #9400      i64 1
    opnd           pc_writeexe.getoffsets.i 
    opnd           pc_writeexe.nimports 
#9399: 
#9402: 
    retproc                   
End


Proc pc_writeexe.addsearchlib:
    param          pc_writeexe.addsearchlib.name u64 
    local          pc_writeexe.addsearchlib.i i64 
    procentry                 
    setargs                   2 0
    push           ""         u64 
    push           pc_writeexe.addsearchlib.name u64 
    callfn         &mlibp.changeext u64 
    pop            pc_writeexe.addsearchlib.name u64 
#9404: 
    push           1          i64 
    pop            pc_writeexe.addsearchlib.i i64 
    push           pci_mcl.npsearchlibs i64 
    push           1          i64 
    jumplt         #9405      i64 
#9406: 
    setargs                   2 0
    push           pc_writeexe.addsearchlib.name u64 
    push           &pci_mcl.psearchlibs 
    push           pc_writeexe.addsearchlib.i i64 
    pushptroff                u64 8 -8
    callfn         &mlibp.eqstring i64 
    jumpfalse      #9407      i64 
    jump           #9408      
#9407: 
#9409: 
    forup          #9406      i64 1
    opnd           pc_writeexe.addsearchlib.i 
    opnd           pci_mcl.npsearchlibs 
#9405: 
    push           pci_mcl.npsearchlibs i64 
    push           30         i64 
    jumplt         #9410      i64 
    setargs                   1 0
    push           "Too many LIB files" u64 
    callproc       &pci_mcl.axerror 
#9410: 
    setargs                   1 0
    push           pc_writeexe.addsearchlib.name u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &pci_mcl.psearchlibs 
    push           &pci_mcl.npsearchlibs 
    incrload                  i64 1
    popptroff                 u64 8 -8
#9408: 
    retproc                   
End


Proc pc_writeexe.setuplibfiles:
    local          pc_writeexe.setuplibfiles.i i64 
    procentry                 
    push           0          i64 
    pop            pci_mcl.npsearchlibs i64 
    push           "msvcrt"   u64 
    push           &pci_mcl.psearchlibs 
    push           1          i64 
    popptroff                 u64 8 -8
    push           "gdi32"    u64 
    push           &pci_mcl.psearchlibs 
    push           2          i64 
    popptroff                 u64 8 -8
    push           "user32"   u64 
    push           &pci_mcl.psearchlibs 
    push           3          i64 
    popptroff                 u64 8 -8
    push           "kernel32" u64 
    push           &pci_mcl.psearchlibs 
    push           4          i64 
    popptroff                 u64 8 -8
    push           4          i64 
    pop            pci_mcl.npsearchlibs i64 
#9412: 
    push           1          i64 
    pop            pc_writeexe.setuplibfiles.i i64 
    push           pci_mcl.nplibfiles i64 
    push           1          i64 
    jumplt         #9413      i64 
#9414: 
    setargs                   1 0
    push           &pci_mcl.plibfiles 
    push           pc_writeexe.setuplibfiles.i i64 
    pushptroff                u64 8 0
    callproc       &pc_writeexe.addsearchlib 
#9415: 
    forup          #9414      i64 1
    opnd           pc_writeexe.setuplibfiles.i 
    opnd           pci_mcl.nplibfiles 
#9413: 
#9416: 
    push           1          i64 
    pop            pc_writeexe.setuplibfiles.i i64 
    push           pc_decls.npdllnametable i64 
    push           1          i64 
    jumplt         #9417      i64 
#9418: 
    push           &pc_decls.pdllnametable 
    push           pc_writeexe.setuplibfiles.i i64 
    pushptroff                u64 8 -8
    pushptr                   u8 
    push           36         u64 
    jumpeq         #9419      u64 
    setargs                   1 0
    push           &pc_decls.pdllnametable 
    push           pc_writeexe.setuplibfiles.i i64 
    pushptroff                u64 8 -8
    callproc       &pc_writeexe.addsearchlib 
#9419: 
#9420: 
    forup          #9418      i64 1
    opnd           pc_writeexe.setuplibfiles.i 
    opnd           pc_decls.npdllnametable 
#9417: 
#9421: 
    retproc                   
End


Proc pc_writeexe.writeexporttable:
    param          pc_writeexe.writeexporttable.pstart u64 
    local          pc_writeexe.writeexporttable.sortindex block:16000 
    local          pc_writeexe.writeexporttable.phdr u64 
    local          pc_writeexe.writeexporttable.paddrtable u64 
    local          pc_writeexe.writeexporttable.pnametable u64 
    local          pc_writeexe.writeexporttable.pordtable u64 
    local          pc_writeexe.writeexporttable.pdllname u64 
    local          pc_writeexe.writeexporttable.pnames u64 
    local          pc_writeexe.writeexporttable.addrtableoffset i64 
    local          pc_writeexe.writeexporttable.nametableoffset i64 
    local          pc_writeexe.writeexporttable.ordtableoffset i64 
    local          pc_writeexe.writeexporttable.dllnameoffset i64 
    local          pc_writeexe.writeexporttable.namesoffset i64 
    local          pc_writeexe.writeexporttable.virtoffset i64 
    local          pc_writeexe.writeexporttable.sectionno i64 
    local          pc_writeexe.writeexporttable.d u64 
    local          pc_writeexe.writeexporttable.i i64 
    procentry                 
    push           pc_writeexe.writeexporttable.pstart u64 
    pop            pc_writeexe.writeexporttable.phdr u64 
    push           1602876664 i64 
    push           pc_writeexe.writeexporttable.phdr u64 
    push           4          
    popptroff                 u32 1 0
    push           1          i64 
    push           pc_writeexe.writeexporttable.phdr u64 
    push           16         
    popptroff                 u32 1 0
    push           pc_writeexe.nexports i64 
    push           pc_writeexe.writeexporttable.phdr u64 
    push           20         
    popptroff                 u32 1 0
    push           pc_writeexe.nexports i64 
    push           pc_writeexe.writeexporttable.phdr u64 
    push           24         
    popptroff                 u32 1 0
    push           40         i64 
    pop            pc_writeexe.writeexporttable.addrtableoffset i64 
    push           pc_writeexe.writeexporttable.addrtableoffset i64 
    push           pc_writeexe.nexports i64 
    push           4          i64 
    mul                       i64 
    add                       i64 
    pop            pc_writeexe.writeexporttable.nametableoffset i64 
    push           pc_writeexe.writeexporttable.nametableoffset i64 
    push           pc_writeexe.nexports i64 
    push           4          i64 
    mul                       i64 
    add                       i64 
    pop            pc_writeexe.writeexporttable.ordtableoffset i64 
    push           pc_writeexe.writeexporttable.ordtableoffset i64 
    push           pc_writeexe.nexports i64 
    push           2          i64 
    mul                       i64 
    add                       i64 
    pop            pc_writeexe.writeexporttable.dllnameoffset i64 
    push           pc_writeexe.writeexporttable.dllnameoffset i64 
    setargs                   1 0
    push           pc_writeexe.dllfilename u64 
    callfn         &strlen    i64 
    add                       i64 
    push           1          i64 
    add                       i64 
    pop            pc_writeexe.writeexporttable.namesoffset i64 
    push           &pc_writeexe.sectiontable 
    push           4          i64 
    addrefoff                 block:72 72 -72
    push           48         
    pushptroff                i64 1 0
    push           pc_writeexe.exportdiroffset i64 
    add                       i64 
    pop            pc_writeexe.writeexporttable.virtoffset i64 
    push           pc_writeexe.writeexporttable.pstart u64 
    push           pc_writeexe.writeexporttable.addrtableoffset i64 
    addrefoff                 u64 1 0
    pop            pc_writeexe.writeexporttable.paddrtable u64 
    push           pc_writeexe.writeexporttable.pstart u64 
    push           pc_writeexe.writeexporttable.nametableoffset i64 
    addrefoff                 u64 1 0
    pop            pc_writeexe.writeexporttable.pnametable u64 
    push           pc_writeexe.writeexporttable.pstart u64 
    push           pc_writeexe.writeexporttable.ordtableoffset i64 
    addrefoff                 u64 1 0
    pop            pc_writeexe.writeexporttable.pordtable u64 
    push           pc_writeexe.writeexporttable.pstart u64 
    push           pc_writeexe.writeexporttable.dllnameoffset i64 
    addrefoff                 u64 1 0
    pop            pc_writeexe.writeexporttable.pdllname u64 
    push           pc_writeexe.writeexporttable.pstart u64 
    push           pc_writeexe.writeexporttable.namesoffset i64 
    addrefoff                 u64 1 0
    pop            pc_writeexe.writeexporttable.pnames u64 
    push           pc_writeexe.writeexporttable.dllnameoffset i64 
    push           pc_writeexe.writeexporttable.virtoffset i64 
    add                       i64 
    push           pc_writeexe.writeexporttable.phdr u64 
    push           12         
    popptroff                 u32 1 0
    push           pc_writeexe.writeexporttable.addrtableoffset i64 
    push           pc_writeexe.writeexporttable.virtoffset i64 
    add                       i64 
    push           pc_writeexe.writeexporttable.phdr u64 
    push           28         
    popptroff                 u32 1 0
    push           pc_writeexe.writeexporttable.nametableoffset i64 
    push           pc_writeexe.writeexporttable.virtoffset i64 
    add                       i64 
    push           pc_writeexe.writeexporttable.phdr u64 
    push           32         
    popptroff                 u32 1 0
    push           pc_writeexe.writeexporttable.ordtableoffset i64 
    push           pc_writeexe.writeexporttable.virtoffset i64 
    add                       i64 
    push           pc_writeexe.writeexporttable.phdr u64 
    push           36         
    popptroff                 u32 1 0
    setargs                   2 0
    push           pc_writeexe.dllfilename u64 
    push           pc_writeexe.writeexporttable.pdllname u64 
    callproc       &strcpy    
    push           pc_writeexe.nexports i64 
    push           2000       i64 
    jumple         #9423      i64 
    setargs                   1 0
    push           "Too many exports - can't sort" u64 
    callproc       &pci_mcl.axerror 
#9423: 
    setargs                   1 0
    push           &pc_writeexe.writeexporttable.sortindex 
    callproc       &pc_writeexe.sortexports 
#9424: 
    push           1          i64 
    pop            pc_writeexe.writeexporttable.i i64 
    push           pc_writeexe.nexports i64 
    push           1          i64 
    jumplt         #9425      i64 
#9426: 
    push           &pc_writeexe.exporttable 
    push           &pc_writeexe.writeexporttable.sortindex 
    push           pc_writeexe.writeexporttable.i i64 
    pushptroff                i64 8 -8
    addrefoff                 block:16 16 -16
    pushptr                   u64 
    pop            pc_writeexe.writeexporttable.d u64 
    setargs                   1 0
    push           pc_writeexe.writeexporttable.d u64 
    push           30         
    pushptroff                u8 1 0
    callfn         &pc_writeexe.getsectionno i64 
    pop            pc_writeexe.writeexporttable.sectionno i64 
    setargs                   2 0
    push           pc_writeexe.writeexporttable.d u64 
    pushptr                   u64 
    push           pc_writeexe.writeexporttable.pnames u64 
    callproc       &strcpy    
    push           pc_writeexe.writeexporttable.namesoffset i64 
    push           pc_writeexe.writeexporttable.virtoffset i64 
    add                       i64 
    push           pc_writeexe.writeexporttable.pnametable u64 
    popptr                    u32 
    push           &pc_writeexe.writeexporttable.pnametable 
    incr                      u64 4
    push           &pc_writeexe.writeexporttable.namesoffset 
    setargs                   1 0
    push           pc_writeexe.writeexporttable.d u64 
    pushptr                   u64 
    callfn         &strlen    i64 
    push           1          i64 
    add                       i64 
    addto                     i64 
    push           &pc_writeexe.writeexporttable.pnames 
    setargs                   1 0
    push           pc_writeexe.writeexporttable.d u64 
    pushptr                   u64 
    callfn         &strlen    i64 
    push           1          i64 
    add                       i64 
    addrefoffto               u64 1 0
    push           pc_writeexe.writeexporttable.d u64 
    push           32         
    pushptroff                i32 1 0
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.writeexporttable.sectionno i64 
    addrefoff                 block:72 72 -72
    push           48         
    pushptroff                i64 1 0
    add                       i64 
    push           pc_writeexe.writeexporttable.paddrtable u64 
    popptr                    u32 
    push           &pc_writeexe.writeexporttable.paddrtable 
    incr                      u64 4
    push           pc_writeexe.writeexporttable.i i64 
    push           1          i64 
    sub                       i64 
    push           pc_writeexe.writeexporttable.pordtable u64 
    popptr                    u16 
    push           &pc_writeexe.writeexporttable.pordtable 
    incr                      u64 2
#9427: 
    forup          #9426      i64 1
    opnd           pc_writeexe.writeexporttable.i 
    opnd           pc_writeexe.nexports 
#9425: 
#9428: 
    retproc                   
End


Proc pc_writeexe.getexporttablesize: i64
    local          pc_writeexe.getexporttablesize.size i64 
    local          pc_writeexe.getexporttablesize.i i64 
    procentry                 
    push           40         i64 
    pop            pc_writeexe.getexporttablesize.size i64 
    push           &pc_writeexe.getexporttablesize.size 
    push           pc_writeexe.nexports i64 
    push           4          i64 
    mul                       i64 
    addto                     i64 
    push           &pc_writeexe.getexporttablesize.size 
    push           pc_writeexe.nexports i64 
    push           4          i64 
    mul                       i64 
    addto                     i64 
    push           &pc_writeexe.getexporttablesize.size 
    push           pc_writeexe.nexports i64 
    push           2          i64 
    mul                       i64 
    addto                     i64 
    push           &pc_writeexe.getexporttablesize.size 
    setargs                   1 0
    push           pc_writeexe.dllfilename u64 
    callfn         &strlen    i64 
    push           1          i64 
    add                       i64 
    addto                     i64 
#9430: 
    push           1          i64 
    pop            pc_writeexe.getexporttablesize.i i64 
    push           pc_writeexe.nexports i64 
    push           1          i64 
    jumplt         #9431      i64 
#9432: 
    push           &pc_writeexe.getexporttablesize.size 
    setargs                   1 0
    push           &pc_writeexe.exporttable 
    push           pc_writeexe.getexporttablesize.i i64 
    addrefoff                 block:16 16 -16
    pushptr                   u64 
    pushptr                   u64 
    callfn         &strlen    i64 
    push           1          i64 
    add                       i64 
    addto                     i64 
#9433: 
    forup          #9432      i64 1
    opnd           pc_writeexe.getexporttablesize.i 
    opnd           pc_writeexe.nexports 
#9431: 
    push           pc_writeexe.getexporttablesize.size i64 
    setret                    i64 
    jump           #9434      
#9434: 
    retfn                     i64 
End


Proc pc_writeexe.newbasereloc:
    param          pc_writeexe.newbasereloc.addr i64 
    param          pc_writeexe.newbasereloc.reltype i64 
    local          pc_writeexe.newbasereloc.p u64 
    procentry                 
    setargs                   1 0
    push           16         i64 
    callfn         &mlibp.pcm_allocz u64 
    pop            pc_writeexe.newbasereloc.p u64 
    push           pc_writeexe.newbasereloc.addr i64 
    push           pc_writeexe.newbasereloc.p u64 
    push           8          
    popptroff                 u32 1 0
    push           pc_writeexe.newbasereloc.reltype i64 
    push           pc_writeexe.newbasereloc.p u64 
    push           12         
    popptroff                 i32 1 0
    push           pc_writeexe.basereloclist u64 
    push           pc_writeexe.newbasereloc.p u64 
    push           0          
    popptroff                 u64 1 0
    push           pc_writeexe.newbasereloc.p u64 
    pop            pc_writeexe.basereloclist u64 
    push           &pc_writeexe.nbaserelocs 
    incr                      i64 1
    push           &pc_writeexe.maxrelocaddr 
    push           pc_writeexe.newbasereloc.addr i64 
    maxto                     i64 
#9436: 
    retproc                   
End


Proc pc_writeexe.scanbaserelocs:
    local          pc_writeexe.scanbaserelocs.baseaddr i64 
    local          pc_writeexe.scanbaserelocs.addr i64 
    local          pc_writeexe.scanbaserelocs.nextblock i64 
    local          pc_writeexe.scanbaserelocs.p u64 
    local          pc_writeexe.scanbaserelocs.i i64 
    procentry                 
    push           4096       i64 
    pop            pc_writeexe.scanbaserelocs.baseaddr i64 
    push           0          i64 
    pop            pc_writeexe.nbaseblocks i64 
#9438: 
    push           pc_writeexe.scanbaserelocs.baseaddr i64 
    push           4096       i64 
    add                       i64 
    pop            pc_writeexe.scanbaserelocs.nextblock i64 
    push           pc_writeexe.nbaseblocks i64 
    push           500        i64 
    jumplt         #9439      i64 
    setargs                   1 0
    push           "Too many blocks" u64 
    callproc       &pci_mcl.axerror 
#9439: 
    push           &pc_writeexe.nbaseblocks 
    incr                      i64 1
    push           pc_writeexe.scanbaserelocs.baseaddr i64 
    push           &pc_writeexe.blockbases 
    push           pc_writeexe.nbaseblocks i64 
    popptroff                 i64 8 -8
    push           0          i64 
    push           &pc_writeexe.blockcounts 
    push           pc_writeexe.nbaseblocks i64 
    popptroff                 i32 4 -4
    push           pc_writeexe.basereloclist u64 
    pop            pc_writeexe.scanbaserelocs.p u64 
    jump           #9440      
#9441: 
    push           pc_writeexe.scanbaserelocs.p u64 
    push           8          
    pushptroff                u32 1 0
    pop            pc_writeexe.scanbaserelocs.addr i64 
    push           pc_writeexe.scanbaserelocs.addr i64 
    push           pc_writeexe.scanbaserelocs.baseaddr i64 
    jumplt         #9442      i64 
    push           pc_writeexe.scanbaserelocs.addr i64 
    push           pc_writeexe.scanbaserelocs.nextblock i64 
    jumpge         #9442      i64 
    push           &pc_writeexe.blockcounts 
    push           pc_writeexe.nbaseblocks i64 
    addrefoff                 i32 4 -4
    incr                      i32 1
#9442: 
    push           pc_writeexe.scanbaserelocs.p u64 
    pushptr                   u64 
    pop            pc_writeexe.scanbaserelocs.p u64 
#9440: 
    push           pc_writeexe.scanbaserelocs.p u64 
    jumptrue       #9441      u64 
#9443: 
    push           pc_writeexe.scanbaserelocs.nextblock i64 
    pop            pc_writeexe.scanbaserelocs.baseaddr i64 
#9444: 
    push           pc_writeexe.scanbaserelocs.baseaddr i64 
    push           pc_writeexe.maxrelocaddr i64 
    jumple         #9438      i64 
#9445: 
#9446: 
    push           1          i64 
    pop            pc_writeexe.scanbaserelocs.i i64 
    push           pc_writeexe.nbaseblocks i64 
    push           1          i64 
    jumplt         #9447      i64 
#9448: 
    push           &pc_writeexe.blockcounts 
    push           pc_writeexe.scanbaserelocs.i i64 
    pushptroff                i32 4 -4
    jumpfalse      #9449      i64 
    push           &pc_writeexe.blockcounts 
    push           pc_writeexe.scanbaserelocs.i i64 
    pushptroff                i32 4 -4
    push           0          i64 
    dotindex                  i64 
    jumpfalse      #9450      u64 
    push           &pc_writeexe.blockcounts 
    push           pc_writeexe.scanbaserelocs.i i64 
    addrefoff                 i32 4 -4
    incr                      i32 1
    push           &pc_writeexe.blockpadding 
    push           pc_writeexe.scanbaserelocs.i i64 
    addrefoff                 u8 1 -1
    incr                      u8 1
#9450: 
    push           &pc_writeexe.blockcounts 
    push           pc_writeexe.scanbaserelocs.i i64 
    pushptroff                i32 4 -4
    push           2          i64 
    mul                       i64 
    push           8          i64 
    add                       i64 
    push           &pc_writeexe.blockbytes 
    push           pc_writeexe.scanbaserelocs.i i64 
    popptroff                 i32 4 -4
    push           &pc_writeexe.basetablesize 
    push           &pc_writeexe.blockbytes 
    push           pc_writeexe.scanbaserelocs.i i64 
    pushptroff                i32 4 -4
    addto                     i64 
#9449: 
#9451: 
    forup          #9448      i64 1
    opnd           pc_writeexe.scanbaserelocs.i 
    opnd           pc_writeexe.nbaseblocks 
#9447: 
#9452: 
    retproc                   
End


Proc pc_writeexe.writebasereloctable:
    param          pc_writeexe.writebasereloctable.pstart u64 
    local          pc_writeexe.writebasereloctable.p32 u64 
    local          pc_writeexe.writebasereloctable.p16 u64 
    local          pc_writeexe.writebasereloctable.baseaddr i64 
    local          pc_writeexe.writebasereloctable.addr i64 
    local          pc_writeexe.writebasereloctable.nextblock i64 
    local          pc_writeexe.writebasereloctable.q u64 
    local          pc_writeexe.writebasereloctable.i i64 
    procentry                 
    push           pc_writeexe.writebasereloctable.pstart u64 
    pop            pc_writeexe.writebasereloctable.p32 u64 
#9454: 
    push           1          i64 
    pop            pc_writeexe.writebasereloctable.i i64 
    push           pc_writeexe.nbaseblocks i64 
    push           1          i64 
    jumplt         #9455      i64 
#9456: 
    push           &pc_writeexe.blockcounts 
    push           pc_writeexe.writebasereloctable.i i64 
    pushptroff                i32 4 -4
    jumpfalse      #9457      i64 
    push           &pc_writeexe.blockbases 
    push           pc_writeexe.writebasereloctable.i i64 
    pushptroff                i64 8 -8
    push           pc_writeexe.writebasereloctable.p32 u64 
    popptr                    u32 
    push           &pc_writeexe.writebasereloctable.p32 
    incr                      u64 4
    push           &pc_writeexe.blockbytes 
    push           pc_writeexe.writebasereloctable.i i64 
    pushptroff                i32 4 -4
    push           pc_writeexe.writebasereloctable.p32 u64 
    popptr                    u32 
    push           &pc_writeexe.writebasereloctable.p32 
    incr                      u64 4
    push           pc_writeexe.writebasereloctable.p32 u64 
    pop            pc_writeexe.writebasereloctable.p16 u64 
    push           pc_writeexe.basereloclist u64 
    pop            pc_writeexe.writebasereloctable.q u64 
    push           &pc_writeexe.blockbases 
    push           pc_writeexe.writebasereloctable.i i64 
    pushptroff                i64 8 -8
    pop            pc_writeexe.writebasereloctable.baseaddr i64 
    push           pc_writeexe.writebasereloctable.baseaddr i64 
    push           4096       i64 
    add                       i64 
    pop            pc_writeexe.writebasereloctable.nextblock i64 
    jump           #9458      
#9459: 
    push           pc_writeexe.writebasereloctable.q u64 
    push           8          
    pushptroff                u32 1 0
    pop            pc_writeexe.writebasereloctable.addr i64 
    push           pc_writeexe.writebasereloctable.addr i64 
    push           pc_writeexe.writebasereloctable.baseaddr i64 
    jumplt         #9460      i64 
    push           pc_writeexe.writebasereloctable.addr i64 
    push           pc_writeexe.writebasereloctable.nextblock i64 
    jumpge         #9460      i64 
    push           pc_writeexe.writebasereloctable.addr i64 
    push           pc_writeexe.writebasereloctable.baseaddr i64 
    sub                       i64 
    startmult                 
    push           pc_writeexe.writebasereloctable.q u64 
    push           12         
    pushptroff                i32 1 0
    push           2          i64 
    jumpne         #9461      i64 
    push           3          i64 
    resetmult                 
    jump           #9462      
#9461: 
    push           10         i64 
    endmult                   
#9462: 
    push           12         i64 
    shl                       i64 
    add                       i64 
    push           pc_writeexe.writebasereloctable.p16 u64 
    popptr                    u16 
    push           &pc_writeexe.writebasereloctable.p16 
    incr                      u64 2
#9460: 
    push           pc_writeexe.writebasereloctable.q u64 
    pushptr                   u64 
    pop            pc_writeexe.writebasereloctable.q u64 
#9458: 
    push           pc_writeexe.writebasereloctable.q u64 
    jumptrue       #9459      u64 
#9463: 
    push           &pc_writeexe.blockpadding 
    push           pc_writeexe.writebasereloctable.i i64 
    pushptroff                u8 1 -1
    jumpfalse      #9464      i64 
    push           0          i64 
    push           &pc_writeexe.writebasereloctable.p16 
    loadincr                  u64 2
    popptr                    u16 
#9464: 
    push           pc_writeexe.writebasereloctable.p16 u64 
    pop            pc_writeexe.writebasereloctable.p32 u64 
#9457: 
#9465: 
    forup          #9456      i64 1
    opnd           pc_writeexe.writebasereloctable.i 
    opnd           pc_writeexe.nbaseblocks 
#9455: 
#9466: 
    retproc                   
End


Proc pc_writeexe.sortexports:
    param          pc_writeexe.sortexports.sortindex u64 
    local          pc_writeexe.sortexports.d u64 
    local          pc_writeexe.sortexports.e u64 
    local          pc_writeexe.sortexports.swapped i64 
    local          pc_writeexe.sortexports.av_1 i64 
    local          pc_writeexe.sortexports.i i64 
    procentry                 
#9468: 
    push           1          i64 
    pop            pc_writeexe.sortexports.i i64 
    push           pc_writeexe.nexports i64 
    push           1          i64 
    jumplt         #9469      i64 
#9470: 
    push           pc_writeexe.sortexports.i i64 
    push           pc_writeexe.sortexports.sortindex u64 
    push           pc_writeexe.sortexports.i i64 
    popptroff                 i64 8 -8
#9471: 
    forup          #9470      i64 1
    opnd           pc_writeexe.sortexports.i 
    opnd           pc_writeexe.nexports 
#9469: 
#9472: 
    push           0          i64 
    pop            pc_writeexe.sortexports.swapped i64 
#9473: 
    push           1          i64 
    pop            pc_writeexe.sortexports.i i64 
    push           pc_writeexe.nexports i64 
    push           1          i64 
    sub                       i64 
    pop            pc_writeexe.sortexports.av_1 i64 
    push           pc_writeexe.sortexports.av_1 i64 
    push           1          i64 
    jumplt         #9474      i64 
#9475: 
    push           &pc_writeexe.exporttable 
    push           pc_writeexe.sortexports.sortindex u64 
    push           pc_writeexe.sortexports.i i64 
    pushptroff                i64 8 -8
    addrefoff                 block:16 16 -16
    pushptr                   u64 
    pop            pc_writeexe.sortexports.d u64 
    push           &pc_writeexe.exporttable 
    push           pc_writeexe.sortexports.sortindex u64 
    push           pc_writeexe.sortexports.i i64 
    pushptroff                i64 8 0
    addrefoff                 block:16 16 -16
    pushptr                   u64 
    pop            pc_writeexe.sortexports.e u64 
    setargs                   2 0
    push           pc_writeexe.sortexports.e u64 
    pushptr                   u64 
    push           pc_writeexe.sortexports.d u64 
    pushptr                   u64 
    callfn         &strcmp    i32 
    push           0          i64 
    jumple         #9476      i64 
    push           1          i64 
    pop            pc_writeexe.sortexports.swapped i64 
    push           pc_writeexe.sortexports.sortindex u64 
    push           pc_writeexe.sortexports.i i64 
    addrefoff                 i64 8 -8
    push           pc_writeexe.sortexports.sortindex u64 
    push           pc_writeexe.sortexports.i i64 
    addrefoff                 i64 8 0
    swap                      i64 
#9476: 
#9477: 
    forup          #9475      i64 1
    opnd           pc_writeexe.sortexports.i 
    opnd           pc_writeexe.sortexports.av_1 
#9474: 
#9478: 
    push           pc_writeexe.sortexports.swapped i64 
    jumptrue       #9472      i64 
#9479: 
#9480: 
    retproc                   
End


Proc pc_writeexe.getsectionno: i64
    param          pc_writeexe.getsectionno.segment i64 
    procentry                 
    startmult                 
    push           pc_writeexe.getsectionno.segment i64 
    push           3          i64 
    casejumpeq     #9482      i64 0
    push           2          i64 
    casejumpeq     #9483      i64 0
    push           1          i64 
    casejumpeq     #9484      i64 0
    popstack                  i64 
    jump           #9485      
#9482: 
    push           3          i64 
    resetmult                 
    jump           #9486      
#9483: 
    push           2          i64 
    resetmult                 
    jump           #9486      
#9484: 
    push           1          i64 
    resetmult                 
    jump           #9486      
#9485: 
    setargs                   1 0
    push           "GSN"      u64 
    callproc       &pci_mcl.axerror 
    push           0          i64 
    endmult                   
#9486: 
    setret                    i64 
    jump           #9487      
#9487: 
    retfn                     i64 
End


Proc pc_writessx.writessdata: u64
    param          pc_writessx.writessdata.fexe i64 
    procentry                 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_init 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_line 
    push           pci_mcl.dest u64 
    setret                    u64 
    jump           #9489      
#9489: 
    retfn                     u64 
End


Proc pci_clangx.genclang:
    param          pci_clangx.genclang.filename u64 
    procentry                 
    setargs                   1 0
    push           "-CLANG Target Not Included" u64 
    callproc       &mlibp.abortprogram 
#9491: 
    retproc                   
End


Proc pc.start::
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$init 
    setargs                   0 0
    callproc       &pc.getinputoptions 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Processing" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc.infile  u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "to"       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc.destfile u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           pc.freadpcl u8 
    jumpfalse      #9493      i64 
    setargs                   2 0
    startmult                 
    push           pc.freadrts u8 
    jumpfalse      #9494      i64 
    push           "rts.pcl"  u64 
    resetmult                 
    jump           #9495      
#9494: 
    push           0          u64 
    endmult                   
#9495: 
    push           pc.infile  u64 
    callfn         &pc_parse.pcl_readpclfile i64 
    jumptrue       #9496      i64 
    setargs                   2 0
    push           pc.infile  u64 
    setargs                   0 0
    callfn         &pc_libpcl.pcl_lasterror u64 
    callproc       &pc.loaderror 
#9496: 
    jump           #9497      
#9493: 
    setargs                   2 0
    push           ""         u64 
    push           "Can't load .pcl files yet" u64 
    callproc       &pc.loaderror 
#9497: 
    push           pc.target  i64 
    push           1          i64 
    casejumpeq     #9498      i64 0
    push           2          i64 
    casejumpeq     #9499      i64 0
    push           3          i64 
    casejumpeq     #9500      i64 0
    push           4          i64 
    casejumpeq     #9501      i64 0
    push           9          i64 
    casejumpeq     #9502      i64 0
    push           7          i64 
    casejumpeq     #9503      i64 0
    push           5          i64 
    casejumpeq     #9504      i64 0
    push           6          i64 
    casejumpeq     #9505      i64 0
    popstack                  i64 
    jump           #9506      
#9498: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Done"     u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #9507      
#9499: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Writing to:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc.destfile u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           pc.destfile u64 
    callproc       &pc_libpcl.pcl_writepclfile 
    setargs                   1 0
    push           pc.fshowpcl u8 
    callproc       &pc.showoutputfile 
    jump           #9507      
#9500: 
    setargs                   2 0
    push           ""         u64 
    push           "PCB writing not ready" u64 
    callproc       &pc.loaderror 
    jump           #9507      
#9501: 
    setargs                   1 0
    push           pc.destfile u64 
    callproc       &pc_win64.pcl_writeclangfile 
    setargs                   1 0
    push           pc.fshowc  u8 
    callproc       &pc.showoutputfile 
    jump           #9507      
#9502: 
    setargs                   2 0
    push           ""         u64 
    push           "RunVM target not ready" u64 
    callproc       &pc.loaderror 
    jump           #9507      
#9503: 
    setargs                   2 0
    push           pc.foptim  u8 
    push           pc.destfile u64 
    callproc       &pc_win64.pcl_writeasmfile 
    setargs                   1 0
    push           pc.fshowmcl u8 
    callproc       &pc.showoutputfile 
    jump           #9507      
#9504: 
    setargs                   2 0
    push           pc.foptim  u8 
    push           pc.destfile u64 
    callproc       &pc_win64.pcl_writeexefile 
    push           pc.fshowss u8 
    jumpfalse      #9508      i64 
    setargs                   2 0
    push           1          i64 
    push           "SS"       u64 
    callproc       &pc_win64.pcl_showss 
    push           "SS"       u64 
    pop            pc.destfile u64 
    setargs                   1 0
    push           1          i64 
    callproc       &pc.showoutputfile 
#9508: 
    jump           #9507      
#9505: 
    setargs                   2 0
    push           pc.foptim  u8 
    push           pc.destfile u64 
    callproc       &pc_win64.pcl_writedllfile 
    jump           #9507      
#9506: 
#9507: 
#9509: 
    push           0          
    stop                      
    retproc                   
End


Proc pc.showoutputfile:
    param          pc.showoutputfile.flag i64 
    local          pc.showoutputfile.str block:300 
    procentry                 
    push           pc.showoutputfile.flag i64 
    jumpfalse      #9511      i64 
    setargs                   1 0
    push           &pc.showoutputfile.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "\\m\\olded.bat -w " u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc.destfile u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   3 0
    push           0          u64 
    push           1          i64 
    push           &pc.showoutputfile.str 
    callproc       &mwindowsp.os_execwait 
#9511: 
#9512: 
    retproc                   
End


Proc pc.getinputoptions:
    local          pc.getinputoptions.paramno i64 
    local          pc.getinputoptions.pmtype i64 
    local          pc.getinputoptions.name u64 
    local          pc.getinputoptions.value u64 
    local          pc.getinputoptions.ext u64 
    local          pc.getinputoptions.filespec block:300 
    local          pc.getinputoptions.av_1 i64 
    local          pc.getinputoptions.sw i64 
    procentry                 
    push           2          i64 
    pop            pc.getinputoptions.paramno i64 
    jump           #9514      
#9515: 
    push           pc.getinputoptions.pmtype i64 
    push           1          i64 
    casejumpeq     #9516      i64 0
    push           2          i64 
    casejumpeq     #9517      i64 0
    push           3          i64 
    casejumpeq     #9518      i64 0
    popstack                  i64 
    jump           #9519      
#9516: 
    setargs                   1 0
    push           pc.getinputoptions.name u64 
    callproc       &mlibp.convlcstring 
#9520: 
    push           1          i64 
    pop            pc.getinputoptions.sw i64 
    push           28         i64 
    pop            pc.getinputoptions.av_1 i64 
    push           pc.getinputoptions.av_1 i64 
    push           1          i64 
    jumplt         #9521      i64 
#9522: 
    setargs                   2 0
    push           &pc.optionnames 
    push           pc.getinputoptions.sw i64 
    pushptroff                u64 8 -8
    push           pc.getinputoptions.name u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #9523      i64 
    setargs                   2 0
    push           pc.getinputoptions.value u64 
    push           pc.getinputoptions.sw i64 
    callproc       &pc.do_option 
    jump           #9524      
#9523: 
#9525: 
    forup          #9522      i64 1
    opnd           pc.getinputoptions.sw 
    opnd           pc.getinputoptions.av_1 
#9521: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Unknown option:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc.getinputoptions.name u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           99         i64 
    stop                      
#9524: 
    jump           #9526      
#9517: 
    push           pc.ninputfiles i64 
    push           20         i64 
    jumplt         #9527      i64 
    setargs                   2 0
    push           ""         u64 
    push           "Too many input files" u64 
    callproc       &pc.loaderror 
#9527: 
    setargs                   1 0
    push           pc.getinputoptions.name u64 
    callproc       &mlibp.convlcstring 
    setargs                   1 0
    push           pc.getinputoptions.name u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &pc.inputfiles 
    push           &pc.ninputfiles 
    incrload                  i64 1
    popptroff                 u64 8 0
    jump           #9526      
#9518: 
    push           pc.nlibfiles i64 
    push           20         i64 
    jumplt         #9528      i64 
    setargs                   2 0
    push           ""         u64 
    push           "Too many lib files" u64 
    callproc       &pc.loaderror 
#9528: 
    setargs                   1 0
    push           pc.getinputoptions.name u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &pc.libfiles 
    push           &pc.nlibfiles 
    incrload                  i64 1
    popptroff                 u64 8 0
    jump           #9526      
#9519: 
#9526: 
#9514: 
    setargs                   4 0
    push           "pcl"      u64 
    push           &pc.getinputoptions.value 
    push           &pc.getinputoptions.name 
    push           &pc.getinputoptions.paramno 
    callfn         &mlibp.nextcmdparam i64 
    store          pc.getinputoptions.pmtype i64 
    jumptrue       #9515      i64 
#9529: 
    push           pc.target  i64 
    push           0          i64 
    jumpne         #9530      i64 
    push           5          i64 
    pop            pc.target  i64 
    push           "exe"      u64 
    pop            pc.destext u64 
#9530: 
    push           pc.ninputfiles i64 
    push           0          i64 
    jumpne         #9531      i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Usage:"   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "\t"       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           &msysp.sysparams 
    push           1          i64 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "filename[.pcl]      # Compile to executable" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "\t"       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           &msysp.sysparams 
    push           1          i64 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "-help               # Show other options" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           0          
    stop                      
    jump           #9532      
#9531: 
    push           pc.ninputfiles i64 
    push           1          i64 
    jumpne         #9533      i64 
    push           &pc.inputfiles 
    push           1          i64 
    pushptroff                u64 8 0
    pop            pc.infile  u64 
    setargs                   2 0
    push           0          i64 
    push           pc.infile  u64 
    callfn         &mlibp.extractext u64 
    pop            pc.getinputoptions.ext u64 
    setargs                   1 0
    setargs                   2 0
    push           pc.destext u64 
    push           pc.infile  u64 
    callfn         &mlibp.changeext u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    pop            pc.destfile u64 
    push           pc.destfilename u64 
    jumpfalse      #9534      u64 
    setargs                   1 0
    setargs                   2 0
    push           pc.destext u64 
    push           pc.destfilename u64 
    callfn         &mlibp.addext u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    pop            pc.destfile u64 
    jump           #9535      
#9534: 
    push           pc.destfilepath u64 
    jumpfalse      #9536      u64 
    setargs                   2 0
    push           pc.destfilepath u64 
    push           &pc.getinputoptions.filespec 
    callproc       &strcpy    
    setargs                   2 0
    push           pc.destfile u64 
    setargs                   1 0
    push           &pc.getinputoptions.filespec 
    callfn         &mlibp.extractfile u64 
    callproc       &strcat    
    setargs                   1 0
    push           &pc.getinputoptions.filespec 
    callfn         &mlibp.pcm_copyheapstring u64 
    pop            pc.destfile u64 
#9536: 
#9535: 
    setargs                   2 0
    push           &pc.inputfiles 
    push           1          i64 
    pushptroff                u64 8 0
    push           pc.destfile u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #9537      i64 
    setargs                   2 0
    push           pc.destfile u64 
    push           "Overwriting input file:" u64 
    callproc       &pc.loaderror 
#9537: 
    setargs                   2 0
    push           "pcl"      u64 
    setargs                   1 0
    setargs                   2 0
    push           0          i64 
    push           &pc.inputfiles 
    push           1          i64 
    pushptroff                u64 8 0
    callfn         &mlibp.extractext u64 
    callfn         &mlibp.convlcstring u64 
    callfn         &mlibp.eqstring i64 
    pop            pc.freadpcl u8 
    jump           #9532      
#9533: 
    setargs                   2 0
    push           ""         u64 
    push           "Can't do multiple pcl/pcb modules yet" u64 
    callproc       &pc.loaderror 
#9532: 
    push           pc.target  i64 
    push           5          i64 
    setjumpeq      #9538      i64 
    push           6          i64 
    setjumpeq      #9538      i64 
    push           7          i64 
    setjumpeq      #9538      i64 
    push           10         i64 
    setjumpne      #9539      i64 
#9538: 
    push           1          i64 
    pop            pc.mcltarget u8 
#9539: 
#9540: 
    retproc                   
End


Proc pc.do_option:
    param          pc.do_option.sw i64 
    param          pc.do_option.value u64 
    procentry                 
    push           pc.do_option.sw i64 
    switch         #9542      1 28
    opnd           #9543      
#9542: 
    switchlabel    #9544      
    switchlabel    #9545      
    switchlabel    #9543      
    switchlabel    #9546      
    switchlabel    #9547      
    switchlabel    #9548      
    switchlabel    #9549      
    switchlabel    #9550      
    switchlabel    #9551      
    switchlabel    #9552      
    switchlabel    #9553      
    switchlabel    #9554      
    switchlabel    #9555      
    switchlabel    #9556      
    switchlabel    #9557      
    switchlabel    #9558      
    switchlabel    #9559      
    switchlabel    #9560      
    switchlabel    #9561      
    switchlabel    #9562      
    switchlabel    #9563      
    switchlabel    #9564      
    switchlabel    #9565      
    switchlabel    #9543      
    switchlabel    #9566      
    switchlabel    #9566      
    switchlabel    #9567      
    switchlabel    #9568      
    endswitch                 
#9544: 
    push           5          i64 
    pop            pc.target  i64 
    push           "exe"      u64 
    pop            pc.destext u64 
    jump           #9569      
#9545: 
    push           6          i64 
    pop            pc.target  i64 
    push           "dll"      u64 
    pop            pc.destext u64 
    jump           #9569      
#9546: 
    push           7          i64 
    pop            pc.target  i64 
    push           "asm"      u64 
    pop            pc.destext u64 
    jump           #9569      
#9547: 
    push           4          i64 
    pop            pc.target  i64 
    push           "c"        u64 
    pop            pc.destext u64 
    jump           #9569      
#9548: 
    push           2          i64 
    pop            pc.target  i64 
    push           "pcl"      u64 
    pop            pc.destext u64 
    jump           #9569      
#9549: 
    push           3          i64 
    pop            pc.target  i64 
    push           "pcb"      u64 
    pop            pc.destext u64 
    jump           #9569      
#9551: 
    push           9          i64 
    pop            pc.target  i64 
    push           ""         u64 
    pop            pc.destext u64 
    jump           #9569      
#9552: 
    push           10         i64 
    pop            pc.target  i64 
    push           ""         u64 
    pop            pc.destext u64 
    jump           #9569      
#9550: 
    push           1          i64 
    pop            pc.target  i64 
    push           ""         u64 
    pop            pc.destext u64 
    jump           #9569      
#9553: 
    push           2          i64 
    pop            pc.foptim  u8 
    jump           #9569      
#9554: 
    push           1          i64 
    pop            pc.foptim  u8 
    jump           #9569      
#9555: 
    push           2          i64 
    pop            pc.foptim  u8 
    jump           #9569      
#9556: 
    push           1          i64 
    pop            pc.freadrts u8 
    jump           #9569      
#9557: 
    push           0          i64 
    pop            pc.freadrts u8 
    jump           #9569      
#9564: 
    push           1          i64 
    pop            pc.fshowtiming u8 
    jump           #9569      
#9565: 
    push           1          i64 
    pop            pc.fverbose u8 
    jump           #9569      
#9566: 
    setargs                   0 0
    callproc       &pc.showhelp 
    push           0          
    stop                      
    jump           #9569      
#9567: 
    push           pc.do_option.outpathused u8 
    jumpfalse      #9570      i64 
    setargs                   2 0
    push           ""         u64 
    push           "mixed out/path" u64 
    callproc       &pc.loaderror 
#9570: 
    setargs                   1 0
    push           pc.do_option.value u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    pop            pc.destfilename u64 
    push           1          i64 
    pop            pc.do_option.outused u8 
    jump           #9569      
#9568: 
    push           pc.do_option.outused u8 
    jumpfalse      #9571      i64 
    setargs                   2 0
    push           ""         u64 
    push           "mixed out/path" u64 
    callproc       &pc.loaderror 
#9571: 
    push           pc.do_option.value u64 
    setargs                   1 0
    push           pc.do_option.value u64 
    callfn         &strlen    i64 
    pushptroff                u8 1 -1
    push           92         i64 
    setjumpeq      #9572      u64 
    push           47         i64 
    setjumpeqx     #9572      u64 
    setargs                   2 0
    push           ""         u64 
    push           "Path needs to end with \\ or /" u64 
    callproc       &pc.loaderror 
#9572: 
    setargs                   1 0
    push           pc.do_option.value u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    pop            pc.destfilepath u64 
    push           1          i64 
    pop            pc.do_option.outpathused u8 
    jump           #9569      
#9558: 
    push           1          i64 
    pop            pc.fshowpcl u8 
    jump           #9569      
#9559: 
    push           1          i64 
    pop            pc.fshowmcl u8 
    jump           #9569      
#9560: 
    push           1          i64 
    pop            pc.fshowc  u8 
    jump           #9569      
#9561: 
    push           1          i64 
    pop            pc.fshowss u8 
    jump           #9569      
#9562: 
    push           1          i64 
    pop            pc.fshowst u8 
    jump           #9569      
#9563: 
    push           1          i64 
    pop            pc.fshowstflat u8 
    jump           #9569      
#9543: 
#9569: 
#9573: 
    retproc                   
End


Proc pc.showhelp:
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "PC.EXE PCL Processor\n\nUsage:\n\n    pc prog        Compile prog.pcl to prog.exe (.pcl optional)\n\nOptions:\n\n    -exe           (Default) generate native x64 and write EXE file\n    -dll           Generate native x64 code and write DLL file\n    -asm           Generate native x64 code and write ASM source file\n    -pcl           Generate PCL source code (use -out to set dest file)\n\n    -clang         Generate linear C source code (if backend present)\n\n    -opt           Apply optimiser to x64 backend\n    -norts         Don't include runtime PCL code\n\n    -out:file      Set name of output file (default is based on input file)\n" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           0          
    stop                      
#9575: 
    retproc                   
End


Proc pc.loaderror:
    param          pc.loaderror.mess u64 
    param          pc.loaderror.param u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Load error:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc.loaderror.mess u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc.loaderror.param u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#9577: 
    retproc                   
End


Endprogram
