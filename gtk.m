importdll $gtk =
    record _GDoubleIEEE754 =
        var r64 v_double
        var $T2 mpn
    end

    record _GFloatIEEE754 =
        var r32 v_float
        var $T1 mpn
    end

    record $T1 =
        var u32 mantissa
        var u32 biased_exponent
        var u32 sign
    end

    record $T2 =
        var u32 mantissa_low
        var u32 mantissa_high
        var u32 biased_exponent
        var u32 sign
    end

    record _GTimeVal =
        var i32 tv_sec
        var i32 tv_usec
    end

    clang function "alloca"                            ()ref i8
    record _GBytes =
        var int dummy    !empty record
    end

    record _GArray =
        var ref i8 data
        var u32 len$
    end

    record _GByteArray =
        var ref byte data
        var u32 len$
    end

    record _GPtrArray =
        var ref ref void pdata
        var u32 len$
    end

    clang function "g_array_new"                       (i32,i32,u32)ref _GArray
    clang function "g_array_sized_new"                 (i32,i32,u32,u32)ref _GArray
    clang function "g_array_free"                      (ref _GArray,i32)ref i8
    clang function "g_array_ref"                       (ref _GArray)ref _GArray
    clang proc     "g_array_unref"                     (ref _GArray)
    clang function "g_array_get_element_size"          (ref _GArray)u32
    clang function "g_array_append_vals"               (ref _GArray,ref void,u32)ref _GArray
    clang function "g_array_prepend_vals"              (ref _GArray,ref void,u32)ref _GArray
    clang function "g_array_insert_vals"               (ref _GArray,u32,ref void,u32)ref _GArray
    clang function "g_array_set_size"                  (ref _GArray,u32)ref _GArray
    clang function "g_array_remove_index"              (ref _GArray,u32)ref _GArray
    clang function "g_array_remove_index_fast"         (ref _GArray,u32)ref _GArray
    clang function "g_array_remove_range"              (ref _GArray,u32,u32)ref _GArray
    clang proc     "g_array_sort"                      (ref _GArray,ref clang function(ref void,ref void)i32)
    clang proc     "g_array_sort_with_data"            (ref _GArray,ref clang function(ref void,ref void,ref void)i32,ref void)
    clang proc     "g_array_set_clear_func"            (ref _GArray,ref clang proc(ref void))
    clang function "g_ptr_array_new"                   ()ref _GPtrArray
    clang function "g_ptr_array_new_with_free_func"    (ref clang proc(ref void))ref _GPtrArray
    clang function "g_ptr_array_sized_new"             (u32)ref _GPtrArray
    clang function "g_ptr_array_new_full"              (u32,ref clang proc(ref void))ref _GPtrArray
    clang function "g_ptr_array_free"                  (ref _GPtrArray,i32)ref ref void
    clang function "g_ptr_array_ref"                   (ref _GPtrArray)ref _GPtrArray
    clang proc     "g_ptr_array_unref"                 (ref _GPtrArray)
    clang proc     "g_ptr_array_set_free_func"         (ref _GPtrArray,ref clang proc(ref void))
    clang proc     "g_ptr_array_set_size"              (ref _GPtrArray,i32)
    clang function "g_ptr_array_remove_index"          (ref _GPtrArray,u32)ref void
    clang function "g_ptr_array_remove_index_fast"     (ref _GPtrArray,u32)ref void
    clang function "g_ptr_array_remove"                (ref _GPtrArray,ref void)i32
    clang function "g_ptr_array_remove_fast"           (ref _GPtrArray,ref void)i32
    clang proc     "g_ptr_array_remove_range"          (ref _GPtrArray,u32,u32)
    clang proc     "g_ptr_array_add"                   (ref _GPtrArray,ref void)
    clang proc     "g_ptr_array_sort"                  (ref _GPtrArray,ref clang function(ref void,ref void)i32)
    clang proc     "g_ptr_array_sort_with_data"        (ref _GPtrArray,ref clang function(ref void,ref void,ref void)i32,ref void)
    clang proc     "g_ptr_array_foreach"               (ref _GPtrArray,ref clang proc(ref void,ref void),ref void)
    clang function "g_byte_array_new"                  ()ref _GByteArray
    clang function "g_byte_array_new_take"             (ref byte,u64)ref _GByteArray
    clang function "g_byte_array_sized_new"            (u32)ref _GByteArray
    clang function "g_byte_array_free"                 (ref _GByteArray,i32)ref byte
    clang function "g_byte_array_free_to_bytes"        (ref _GByteArray)ref _GBytes
    clang function "g_byte_array_ref"                  (ref _GByteArray)ref _GByteArray
    clang proc     "g_byte_array_unref"                (ref _GByteArray)
    clang function "g_byte_array_append"               (ref _GByteArray,ref byte,u32)ref _GByteArray
    clang function "g_byte_array_prepend"              (ref _GByteArray,ref byte,u32)ref _GByteArray
    clang function "g_byte_array_set_size"             (ref _GByteArray,u32)ref _GByteArray
    clang function "g_byte_array_remove_index"         (ref _GByteArray,u32)ref _GByteArray
    clang function "g_byte_array_remove_index_fast"    (ref _GByteArray,u32)ref _GByteArray
    clang function "g_byte_array_remove_range"         (ref _GByteArray,u32,u32)ref _GByteArray
    clang proc     "g_byte_array_sort"                 (ref _GByteArray,ref clang function(ref void,ref void)i32)
    clang proc     "g_byte_array_sort_with_data"       (ref _GByteArray,ref clang function(ref void,ref void,ref void)i32,ref void)
    clang function "g_atomic_int_get"                  (ref i32)i32
    clang proc     "g_atomic_int_set"                  (ref i32,i32)
    clang proc     "g_atomic_int_inc"                  (ref i32)
    clang function "g_atomic_int_dec_and_test"         (ref i32)i32
    clang function "g_atomic_int_compare_and_exchange" (ref i32,i32,i32)i32
    clang function "g_atomic_int_add"                  (ref i32,i32)i32
    clang function "g_atomic_int_and"                  (ref u32,u32)u32
    clang function "g_atomic_int_or"                   (ref u32,u32)u32
    clang function "g_atomic_int_xor"                  (ref u32,u32)u32
    clang function "g_atomic_pointer_get"              (ref void)ref void
    clang proc     "g_atomic_pointer_set"              (ref void,ref void)
    clang function "g_atomic_pointer_compare_and_exchange" (ref void,ref void,ref void)i32
    clang function "g_atomic_pointer_add"              (ref void,i64)i64
    clang function "g_atomic_pointer_and"              (ref void,u64)u64
    clang function "g_atomic_pointer_or"               (ref void,u64)u64
    clang function "g_atomic_pointer_xor"              (ref void,u64)u64
    clang function "g_atomic_int_exchange_and_add"     (ref i32,i32)i32
    clang function "g_quark_try_string"                (ref i8)u32
    clang function "g_quark_from_static_string"        (ref i8)u32
    clang function "g_quark_from_string"               (ref i8)u32
    clang function "g_quark_to_string"                 (u32)ref i8
    clang function "g_intern_string"                   (ref i8)ref i8
    clang function "g_intern_static_string"            (ref i8)ref i8
    record _GError =
        var u32 domain
        var i32 code
        var ref i8 message
    end

    clang function "g_error_new"                       (u32,i32,ref i8,...)ref _GError
    clang function "g_error_new_literal"               (u32,i32,ref i8)ref _GError
    clang function "g_error_new_valist"                (u32,i32,ref i8,ref i8)ref _GError
    clang proc     "g_error_free"                      (ref _GError)
    clang function "g_error_copy"                      (ref _GError)ref _GError
    clang function "g_error_matches"                   (ref _GError,u32,i32)i32
    clang proc     "g_set_error"                       (ref ref _GError,u32,i32,ref i8,...)
    clang proc     "g_set_error_literal"               (ref ref _GError,u32,i32,ref i8)
    clang proc     "g_propagate_error"                 (ref ref _GError,ref _GError)
    clang proc     "g_clear_error"                     (ref ref _GError)
    clang proc     "g_prefix_error"                    (ref ref _GError,ref i8,...)
    clang proc     "g_propagate_prefixed_error"        (ref ref _GError,ref _GError,ref i8,...)
    clang function "g_thread_error_quark"              ()u32
    const G_THREAD_ERROR_AGAIN               = 0
    record _GThread =
        var ref clang function(ref void)ref void func
        var ref void data
        var i32 joinable
        var i32 priority
    end

    record _GMutex =
        var ref void p
        var [2]u32 i
    end

    record _GRecMutex =
        var ref void p
        var [2]u32 i
    end

    record _GRWLock =
        var ref void p
        var [2]u32 i
    end

    record _GCond =
        var ref void p
        var [2]u32 i
    end

    record _GPrivate =
        var ref void p
        var ref clang proc(ref void) notify
        var [2]ref void future
    end

    record _GOnce =
        var i32 status
        var ref void retval
    end

    const G_ONCE_STATUS_NOTCALLED            = 0
    const G_ONCE_STATUS_PROGRESS             = 1
    const G_ONCE_STATUS_READY                = 2
    clang function "g_thread_ref"                      (ref _GThread)ref _GThread
    clang proc     "g_thread_unref"                    (ref _GThread)
    clang function "g_thread_new"                      (ref i8,ref clang function(ref void)ref void,ref void)ref _GThread
    clang function "g_thread_try_new"                  (ref i8,ref clang function(ref void)ref void,ref void,ref ref _GError)ref _GThread
    clang function "g_thread_self"                     ()ref _GThread
    clang proc     "g_thread_exit"                     (ref void)
    clang function "g_thread_join"                     (ref _GThread)ref void
    clang proc     "g_thread_yield"                    ()
    clang proc     "g_mutex_init"                      (ref _GMutex)
    clang proc     "g_mutex_clear"                     (ref _GMutex)
    clang proc     "g_mutex_lock"                      (ref _GMutex)
    clang function "g_mutex_trylock"                   (ref _GMutex)i32
    clang proc     "g_mutex_unlock"                    (ref _GMutex)
    clang proc     "g_rw_lock_init"                    (ref _GRWLock)
    clang proc     "g_rw_lock_clear"                   (ref _GRWLock)
    clang proc     "g_rw_lock_writer_lock"             (ref _GRWLock)
    clang function "g_rw_lock_writer_trylock"          (ref _GRWLock)i32
    clang proc     "g_rw_lock_writer_unlock"           (ref _GRWLock)
    clang proc     "g_rw_lock_reader_lock"             (ref _GRWLock)
    clang function "g_rw_lock_reader_trylock"          (ref _GRWLock)i32
    clang proc     "g_rw_lock_reader_unlock"           (ref _GRWLock)
    clang proc     "g_rec_mutex_init"                  (ref _GRecMutex)
    clang proc     "g_rec_mutex_clear"                 (ref _GRecMutex)
    clang proc     "g_rec_mutex_lock"                  (ref _GRecMutex)
    clang function "g_rec_mutex_trylock"               (ref _GRecMutex)i32
    clang proc     "g_rec_mutex_unlock"                (ref _GRecMutex)
    clang proc     "g_cond_init"                       (ref _GCond)
    clang proc     "g_cond_clear"                      (ref _GCond)
    clang proc     "g_cond_wait"                       (ref _GCond,ref _GMutex)
    clang proc     "g_cond_signal"                     (ref _GCond)
    clang proc     "g_cond_broadcast"                  (ref _GCond)
    clang function "g_cond_wait_until"                 (ref _GCond,ref _GMutex,i64)i32
    clang function "g_private_get"                     (ref _GPrivate)ref void
    clang proc     "g_private_set"                     (ref _GPrivate,ref void)
    clang proc     "g_private_replace"                 (ref _GPrivate,ref void)
    clang function "g_once_impl"                       (ref _GOnce,ref clang function(ref void)ref void,ref void)ref void
    clang function "g_once_init_enter"                 (ref void)i32
    clang proc     "g_once_init_leave"                 (ref void,u64)
    record _GAsyncQueue =
        var int dummy    !empty record
    end

    clang function "g_async_queue_new"                 ()ref _GAsyncQueue
    clang function "g_async_queue_new_full"            (ref clang proc(ref void))ref _GAsyncQueue
    clang proc     "g_async_queue_lock"                (ref _GAsyncQueue)
    clang proc     "g_async_queue_unlock"              (ref _GAsyncQueue)
    clang function "g_async_queue_ref"                 (ref _GAsyncQueue)ref _GAsyncQueue
    clang proc     "g_async_queue_unref"               (ref _GAsyncQueue)
    clang proc     "g_async_queue_ref_unlocked"        (ref _GAsyncQueue)
    clang proc     "g_async_queue_unref_and_unlock"    (ref _GAsyncQueue)
    clang proc     "g_async_queue_push"                (ref _GAsyncQueue,ref void)
    clang proc     "g_async_queue_push_unlocked"       (ref _GAsyncQueue,ref void)
    clang proc     "g_async_queue_push_sorted"         (ref _GAsyncQueue,ref void,ref clang function(ref void,ref void,ref void)i32,ref void)
    clang proc     "g_async_queue_push_sorted_unlocked" (ref _GAsyncQueue,ref void,ref clang function(ref void,ref void,ref void)i32,ref void)
    clang function "g_async_queue_pop"                 (ref _GAsyncQueue)ref void
    clang function "g_async_queue_pop_unlocked"        (ref _GAsyncQueue)ref void
    clang function "g_async_queue_try_pop"             (ref _GAsyncQueue)ref void
    clang function "g_async_queue_try_pop_unlocked"    (ref _GAsyncQueue)ref void
    clang function "g_async_queue_timeout_pop"         (ref _GAsyncQueue,u64)ref void
    clang function "g_async_queue_timeout_pop_unlocked" (ref _GAsyncQueue,u64)ref void
    clang function "g_async_queue_length"              (ref _GAsyncQueue)i32
    clang function "g_async_queue_length_unlocked"     (ref _GAsyncQueue)i32
    clang proc     "g_async_queue_sort"                (ref _GAsyncQueue,ref clang function(ref void,ref void,ref void)i32,ref void)
    clang proc     "g_async_queue_sort_unlocked"       (ref _GAsyncQueue,ref clang function(ref void,ref void,ref void)i32,ref void)
    clang function "g_async_queue_timed_pop"           (ref _GAsyncQueue,ref _GTimeVal)ref void
    clang function "g_async_queue_timed_pop_unlocked"  (ref _GAsyncQueue,ref _GTimeVal)ref void
    clang proc     "g_on_error_query"                  (ref i8)
    clang proc     "g_on_error_stack_trace"            (ref i8)
    clang function "g_base64_encode_step"              (ref byte,u64,i32,ref i8,ref i32,ref i32)u64
    clang function "g_base64_encode_close"             (i32,ref i8,ref i32,ref i32)u64
    clang function "g_base64_encode"                   (ref byte,u64)ref i8
    clang function "g_base64_decode_step"              (ref i8,u64,ref byte,ref i32,ref u32)u64
    clang function "g_base64_decode"                   (ref i8,ref u64)ref byte
    clang function "g_base64_decode_inplace"           (ref i8,ref u64)ref byte
    clang proc     "g_bit_lock"                        (ref i32,i32)
    clang function "g_bit_trylock"                     (ref i32,i32)i32
    clang proc     "g_bit_unlock"                      (ref i32,i32)
    clang proc     "g_pointer_bit_lock"                (ref void,i32)
    clang function "g_pointer_bit_trylock"             (ref void,i32)i32
    clang proc     "g_pointer_bit_unlock"              (ref void,i32)
    const G_BOOKMARK_FILE_ERROR_INVALID_URI  = 0
    const G_BOOKMARK_FILE_ERROR_INVALID_VALUE = 1
    const G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED = 2
    const G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND = 3
    const G_BOOKMARK_FILE_ERROR_READ         = 4
    const G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING = 5
    const G_BOOKMARK_FILE_ERROR_WRITE        = 6
    const G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND = 7
    clang function "g_bookmark_file_error_quark"       ()u32
    record _GBookmarkFile =
        var int dummy    !empty record
    end

    clang function "g_bookmark_file_new"               ()ref _GBookmarkFile
    clang proc     "g_bookmark_file_free"              (ref _GBookmarkFile)
    clang function "g_bookmark_file_load_from_file"    (ref _GBookmarkFile,ref i8,ref ref _GError)i32
    clang function "g_bookmark_file_load_from_data"    (ref _GBookmarkFile,ref i8,u64,ref ref _GError)i32
    clang function "g_bookmark_file_load_from_data_dirs" (ref _GBookmarkFile,ref i8,ref ref i8,ref ref _GError)i32
    clang function "g_bookmark_file_to_data"           (ref _GBookmarkFile,ref u64,ref ref _GError)ref i8
    clang function "g_bookmark_file_to_file"           (ref _GBookmarkFile,ref i8,ref ref _GError)i32
    clang proc     "g_bookmark_file_set_title"         (ref _GBookmarkFile,ref i8,ref i8)
    clang function "g_bookmark_file_get_title"         (ref _GBookmarkFile,ref i8,ref ref _GError)ref i8
    clang proc     "g_bookmark_file_set_description"   (ref _GBookmarkFile,ref i8,ref i8)
    clang function "g_bookmark_file_get_description"   (ref _GBookmarkFile,ref i8,ref ref _GError)ref i8
    clang proc     "g_bookmark_file_set_mime_type"     (ref _GBookmarkFile,ref i8,ref i8)
    clang function "g_bookmark_file_get_mime_type"     (ref _GBookmarkFile,ref i8,ref ref _GError)ref i8
    clang proc     "g_bookmark_file_set_groups"        (ref _GBookmarkFile,ref i8,ref ref i8,u64)
    clang proc     "g_bookmark_file_add_group"         (ref _GBookmarkFile,ref i8,ref i8)
    clang function "g_bookmark_file_has_group"         (ref _GBookmarkFile,ref i8,ref i8,ref ref _GError)i32
    clang function "g_bookmark_file_get_groups"        (ref _GBookmarkFile,ref i8,ref u64,ref ref _GError)ref ref i8
    clang proc     "g_bookmark_file_add_application"   (ref _GBookmarkFile,ref i8,ref i8,ref i8)
    clang function "g_bookmark_file_has_application"   (ref _GBookmarkFile,ref i8,ref i8,ref ref _GError)i32
    clang function "g_bookmark_file_get_applications"  (ref _GBookmarkFile,ref i8,ref u64,ref ref _GError)ref ref i8
    clang function "g_bookmark_file_set_app_info"      (ref _GBookmarkFile,ref i8,ref i8,ref i8,i32,i64,ref ref _GError)i32
    clang function "g_bookmark_file_get_app_info"      (ref _GBookmarkFile,ref i8,ref i8,ref ref i8,ref u32,ref i64,ref ref _GError)i32
    clang proc     "g_bookmark_file_set_is_private"    (ref _GBookmarkFile,ref i8,i32)
    clang function "g_bookmark_file_get_is_private"    (ref _GBookmarkFile,ref i8,ref ref _GError)i32
    clang proc     "g_bookmark_file_set_icon"          (ref _GBookmarkFile,ref i8,ref i8,ref i8)
    clang function "g_bookmark_file_get_icon"          (ref _GBookmarkFile,ref i8,ref ref i8,ref ref i8,ref ref _GError)i32
    clang proc     "g_bookmark_file_set_added"         (ref _GBookmarkFile,ref i8,i64)
    clang function "g_bookmark_file_get_added"         (ref _GBookmarkFile,ref i8,ref ref _GError)i64
    clang proc     "g_bookmark_file_set_modified"      (ref _GBookmarkFile,ref i8,i64)
    clang function "g_bookmark_file_get_modified"      (ref _GBookmarkFile,ref i8,ref ref _GError)i64
    clang proc     "g_bookmark_file_set_visited"       (ref _GBookmarkFile,ref i8,i64)
    clang function "g_bookmark_file_get_visited"       (ref _GBookmarkFile,ref i8,ref ref _GError)i64
    clang function "g_bookmark_file_has_item"          (ref _GBookmarkFile,ref i8)i32
    clang function "g_bookmark_file_get_size"          (ref _GBookmarkFile)i32
    clang function "g_bookmark_file_get_uris"          (ref _GBookmarkFile,ref u64)ref ref i8
    clang function "g_bookmark_file_remove_group"      (ref _GBookmarkFile,ref i8,ref i8,ref ref _GError)i32
    clang function "g_bookmark_file_remove_application" (ref _GBookmarkFile,ref i8,ref i8,ref ref _GError)i32
    clang function "g_bookmark_file_remove_item"       (ref _GBookmarkFile,ref i8,ref ref _GError)i32
    clang function "g_bookmark_file_move_item"         (ref _GBookmarkFile,ref i8,ref i8,ref ref _GError)i32
    clang function "g_bytes_new"                       (ref void,u64)ref _GBytes
    clang function "g_bytes_new_take"                  (ref void,u64)ref _GBytes
    clang function "g_bytes_new_static"                (ref void,u64)ref _GBytes
    clang function "g_bytes_new_with_free_func"        (ref void,u64,ref clang proc(ref void),ref void)ref _GBytes
    clang function "g_bytes_new_from_bytes"            (ref _GBytes,u64,u64)ref _GBytes
    clang function "g_bytes_get_data"                  (ref _GBytes,ref u64)ref void
    clang function "g_bytes_get_size"                  (ref _GBytes)u64
    clang function "g_bytes_ref"                       (ref _GBytes)ref _GBytes
    clang proc     "g_bytes_unref"                     (ref _GBytes)
    clang function "g_bytes_unref_to_data"             (ref _GBytes,ref u64)ref void
    clang function "g_bytes_unref_to_array"            (ref _GBytes)ref _GByteArray
    clang function "g_bytes_hash"                      (ref void)u32
    clang function "g_bytes_equal"                     (ref void,ref void)i32
    clang function "g_bytes_compare"                   (ref void,ref void)i32
    clang function "g_get_charset"                     (ref ref i8)i32
    clang function "g_get_codeset"                     ()ref i8
    clang function "g_get_language_names"              ()ref ref i8
    clang function "g_get_locale_variants"             (ref i8)ref ref i8
    const G_CHECKSUM_MD5                     = 0
    const G_CHECKSUM_SHA1                    = 1
    const G_CHECKSUM_SHA256                  = 2
    record _GChecksum =
        var int dummy    !empty record
    end

    clang function "g_checksum_type_get_length"        (i32)i64
    clang function "g_checksum_new"                    (i32)ref _GChecksum
    clang proc     "g_checksum_reset"                  (ref _GChecksum)
    clang function "g_checksum_copy"                   (ref _GChecksum)ref _GChecksum
    clang proc     "g_checksum_free"                   (ref _GChecksum)
    clang proc     "g_checksum_update"                 (ref _GChecksum,ref byte,i64)
    clang function "g_checksum_get_string"             (ref _GChecksum)ref i8
    clang proc     "g_checksum_get_digest"             (ref _GChecksum,ref byte,ref u64)
    clang function "g_compute_checksum_for_data"       (i32,ref byte,u64)ref i8
    clang function "g_compute_checksum_for_string"     (i32,ref i8,i64)ref i8
    clang function "g_compute_checksum_for_bytes"      (i32,ref _GBytes)ref i8
    const G_CONVERT_ERROR_NO_CONVERSION      = 0
    const G_CONVERT_ERROR_ILLEGAL_SEQUENCE   = 1
    const G_CONVERT_ERROR_FAILED             = 2
    const G_CONVERT_ERROR_PARTIAL_INPUT      = 3
    const G_CONVERT_ERROR_BAD_URI            = 4
    const G_CONVERT_ERROR_NOT_ABSOLUTE_PATH  = 5
    clang function "g_convert_error_quark"             ()u32
    record _GIConv =
        var int dummy    !empty record
    end

    clang function "g_iconv_open"                      (ref i8,ref i8)ref _GIConv
    clang function "g_iconv"                           (ref _GIConv,ref ref i8,ref u64,ref ref i8,ref u64)u64
    clang function "g_iconv_close"                     (ref _GIConv)i32
    clang function "g_convert"                         (ref i8,i64,ref i8,ref i8,ref u64,ref u64,ref ref _GError)ref i8
    clang function "g_convert_with_iconv"              (ref i8,i64,ref _GIConv,ref u64,ref u64,ref ref _GError)ref i8
    clang function "g_convert_with_fallback"           (ref i8,i64,ref i8,ref i8,ref i8,ref u64,ref u64,ref ref _GError)ref i8
    clang function "g_locale_to_utf8"                  (ref i8,i64,ref u64,ref u64,ref ref _GError)ref i8
    clang function "g_locale_from_utf8"                (ref i8,i64,ref u64,ref u64,ref ref _GError)ref i8
    clang function "g_filename_to_utf8_utf8"           (ref i8,i64,ref u64,ref u64,ref ref _GError)ref i8
    clang function "g_filename_from_utf8_utf8"         (ref i8,i64,ref u64,ref u64,ref ref _GError)ref i8
    clang function "g_filename_from_uri_utf8"          (ref i8,ref ref i8,ref ref _GError)ref i8
    clang function "g_filename_to_uri_utf8"            (ref i8,ref i8,ref ref _GError)ref i8
    clang function "g_filename_display_name"           (ref i8)ref i8
    clang function "g_get_filename_charsets"           (ref ref ref i8)i32
    clang function "g_filename_display_basename"       (ref i8)ref i8
    clang function "g_uri_list_extract_uris"           (ref i8)ref ref i8
    record _GData =
        var int dummy    !empty record
    end

    clang proc     "g_datalist_init"                   (ref ref _GData)
    clang proc     "g_datalist_clear"                  (ref ref _GData)
    clang function "g_datalist_id_get_data"            (ref ref _GData,u32)ref void
    clang proc     "g_datalist_id_set_data_full"       (ref ref _GData,u32,ref void,ref clang proc(ref void))
    clang function "g_datalist_id_dup_data"            (ref ref _GData,u32,ref clang function(ref void,ref void)ref void,ref void)ref void
    clang function "g_datalist_id_replace_data"        (ref ref _GData,u32,ref void,ref void,ref clang proc(ref void),ref ref clang proc(ref void))i32
    clang function "g_datalist_id_remove_no_notify"    (ref ref _GData,u32)ref void
    clang proc     "g_datalist_foreach"                (ref ref _GData,ref clang proc(u32,ref void,ref void),ref void)
    clang proc     "g_datalist_set_flags"              (ref ref _GData,u32)
    clang proc     "g_datalist_unset_flags"            (ref ref _GData,u32)
    clang function "g_datalist_get_flags"              (ref ref _GData)u32
    clang proc     "g_dataset_destroy"                 (ref void)
    clang function "g_dataset_id_get_data"             (ref void,u32)ref void
    clang function "g_datalist_get_data"               (ref ref _GData,ref i8)ref void
    clang proc     "g_dataset_id_set_data_full"        (ref void,u32,ref void,ref clang proc(ref void))
    clang function "g_dataset_id_remove_no_notify"     (ref void,u32)ref void
    clang proc     "g_dataset_foreach"                 (ref void,ref clang proc(u32,ref void,ref void),ref void)
    record _GDate =
        var u32 julian_days
        var u32 julian
        var u32 dmy
        var u32 day
        var u32 month
        var u32 year
    end

    const G_DATE_DAY                         = 0
    const G_DATE_MONTH                       = 1
    const G_DATE_YEAR                        = 2
    const G_DATE_BAD_WEEKDAY                 = 0
    const G_DATE_MONDAY                      = 1
    const G_DATE_TUESDAY                     = 2
    const G_DATE_WEDNESDAY                   = 3
    const G_DATE_THURSDAY                    = 4
    const G_DATE_FRIDAY                      = 5
    const G_DATE_SATURDAY                    = 6
    const G_DATE_SUNDAY                      = 7
    const G_DATE_BAD_MONTH                   = 0
    const G_DATE_JANUARY                     = 1
    const G_DATE_FEBRUARY                    = 2
    const G_DATE_MARCH                       = 3
    const G_DATE_APRIL                       = 4
    const G_DATE_MAY                         = 5
    const G_DATE_JUNE                        = 6
    const G_DATE_JULY                        = 7
    const G_DATE_AUGUST                      = 8
    const G_DATE_SEPTEMBER                   = 9
    const G_DATE_OCTOBER                     = 10
    const G_DATE_NOVEMBER                    = 11
    const G_DATE_DECEMBER                    = 12
    clang function "g_date_new"                        ()ref _GDate
    clang function "g_date_new_dmy"                    (byte,i32,u16)ref _GDate
    clang function "g_date_new_julian"                 (u32)ref _GDate
    clang proc     "g_date_free"                       (ref _GDate)
    clang function "g_date_valid"                      (ref _GDate)i32
    clang function "g_date_valid_day"                  (byte)i32
    clang function "g_date_valid_month"                (i32)i32
    clang function "g_date_valid_year"                 (u16)i32
    clang function "g_date_valid_weekday"              (i32)i32
    clang function "g_date_valid_julian"               (u32)i32
    clang function "g_date_valid_dmy"                  (byte,i32,u16)i32
    clang function "g_date_get_weekday"                (ref _GDate)i32
    clang function "g_date_get_month"                  (ref _GDate)i32
    clang function "g_date_get_year"                   (ref _GDate)u16
    clang function "g_date_get_day"                    (ref _GDate)byte
    clang function "g_date_get_julian"                 (ref _GDate)u32
    clang function "g_date_get_day_of_year"            (ref _GDate)u32
    clang function "g_date_get_monday_week_of_year"    (ref _GDate)u32
    clang function "g_date_get_sunday_week_of_year"    (ref _GDate)u32
    clang function "g_date_get_iso8601_week_of_year"   (ref _GDate)u32
    clang proc     "g_date_clear"                      (ref _GDate,u32)
    clang proc     "g_date_set_parse"                  (ref _GDate,ref i8)
    clang proc     "g_date_set_time_t"                 (ref _GDate,i64)
    clang proc     "g_date_set_time_val"               (ref _GDate,ref _GTimeVal)
    clang proc     "g_date_set_time"                   (ref _GDate,i32)
    clang proc     "g_date_set_month"                  (ref _GDate,i32)
    clang proc     "g_date_set_day"                    (ref _GDate,byte)
    clang proc     "g_date_set_year"                   (ref _GDate,u16)
    clang proc     "g_date_set_dmy"                    (ref _GDate,byte,i32,u16)
    clang proc     "g_date_set_julian"                 (ref _GDate,u32)
    clang function "g_date_is_first_of_month"          (ref _GDate)i32
    clang function "g_date_is_last_of_month"           (ref _GDate)i32
    clang proc     "g_date_add_days"                   (ref _GDate,u32)
    clang proc     "g_date_subtract_days"              (ref _GDate,u32)
    clang proc     "g_date_add_months"                 (ref _GDate,u32)
    clang proc     "g_date_subtract_months"            (ref _GDate,u32)
    clang proc     "g_date_add_years"                  (ref _GDate,u32)
    clang proc     "g_date_subtract_years"             (ref _GDate,u32)
    clang function "g_date_is_leap_year"               (u16)i32
    clang function "g_date_get_days_in_month"          (i32,u16)byte
    clang function "g_date_get_monday_weeks_in_year"   (u16)byte
    clang function "g_date_get_sunday_weeks_in_year"   (u16)byte
    clang function "g_date_days_between"               (ref _GDate,ref _GDate)i32
    clang function "g_date_compare"                    (ref _GDate,ref _GDate)i32
    clang proc     "g_date_to_struct_tm"               (ref _GDate,ref tm)
    clang proc     "g_date_clamp"                      (ref _GDate,ref _GDate,ref _GDate)
    clang proc     "g_date_order"                      (ref _GDate,ref _GDate)
    clang function "g_date_strftime"                   (ref i8,u64,ref i8,ref _GDate)u64
    record _GTimeZone =
        var int dummy    !empty record
    end

    const G_TIME_TYPE_STANDARD               = 0
    const G_TIME_TYPE_DAYLIGHT               = 1
    const G_TIME_TYPE_UNIVERSAL              = 2
    clang function "g_time_zone_new"                   (ref i8)ref _GTimeZone
    clang function "g_time_zone_new_utc"               ()ref _GTimeZone
    clang function "g_time_zone_new_local"             ()ref _GTimeZone
    clang function "g_time_zone_ref"                   (ref _GTimeZone)ref _GTimeZone
    clang proc     "g_time_zone_unref"                 (ref _GTimeZone)
    clang function "g_time_zone_find_interval"         (ref _GTimeZone,i32,i64)i32
    clang function "g_time_zone_adjust_time"           (ref _GTimeZone,i32,ref i64)i32
    clang function "g_time_zone_get_abbreviation"      (ref _GTimeZone,i32)ref i8
    clang function "g_time_zone_get_offset"            (ref _GTimeZone,i32)i32
    clang function "g_time_zone_is_dst"                (ref _GTimeZone,i32)i32
    record _GDateTime =
        var int dummy    !empty record
    end

    clang proc     "g_date_time_unref"                 (ref _GDateTime)
    clang function "g_date_time_ref"                   (ref _GDateTime)ref _GDateTime
    clang function "g_date_time_new_now"               (ref _GTimeZone)ref _GDateTime
    clang function "g_date_time_new_now_local"         ()ref _GDateTime
    clang function "g_date_time_new_now_utc"           ()ref _GDateTime
    clang function "g_date_time_new_from_unix_local"   (i64)ref _GDateTime
    clang function "g_date_time_new_from_unix_utc"     (i64)ref _GDateTime
    clang function "g_date_time_new_from_timeval_local" (ref _GTimeVal)ref _GDateTime
    clang function "g_date_time_new_from_timeval_utc"  (ref _GTimeVal)ref _GDateTime
    clang function "g_date_time_new"                   (ref _GTimeZone,i32,i32,i32,i32,i32,r64)ref _GDateTime
    clang function "g_date_time_new_local"             (i32,i32,i32,i32,i32,r64)ref _GDateTime
    clang function "g_date_time_new_utc"               (i32,i32,i32,i32,i32,r64)ref _GDateTime
    clang function "g_date_time_add"                   (ref _GDateTime,i64)ref _GDateTime
    clang function "g_date_time_add_years"             (ref _GDateTime,i32)ref _GDateTime
    clang function "g_date_time_add_months"            (ref _GDateTime,i32)ref _GDateTime
    clang function "g_date_time_add_weeks"             (ref _GDateTime,i32)ref _GDateTime
    clang function "g_date_time_add_days"              (ref _GDateTime,i32)ref _GDateTime
    clang function "g_date_time_add_hours"             (ref _GDateTime,i32)ref _GDateTime
    clang function "g_date_time_add_minutes"           (ref _GDateTime,i32)ref _GDateTime
    clang function "g_date_time_add_seconds"           (ref _GDateTime,r64)ref _GDateTime
    clang function "g_date_time_add_full"              (ref _GDateTime,i32,i32,i32,i32,i32,r64)ref _GDateTime
    clang function "g_date_time_compare"               (ref void,ref void)i32
    clang function "g_date_time_difference"            (ref _GDateTime,ref _GDateTime)i64
    clang function "g_date_time_hash"                  (ref void)u32
    clang function "g_date_time_equal"                 (ref void,ref void)i32
    clang proc     "g_date_time_get_ymd"               (ref _GDateTime,ref i32,ref i32,ref i32)
    clang function "g_date_time_get_year"              (ref _GDateTime)i32
    clang function "g_date_time_get_month"             (ref _GDateTime)i32
    clang function "g_date_time_get_day_of_month"      (ref _GDateTime)i32
    clang function "g_date_time_get_week_numbering_year" (ref _GDateTime)i32
    clang function "g_date_time_get_week_of_year"      (ref _GDateTime)i32
    clang function "g_date_time_get_day_of_week"       (ref _GDateTime)i32
    clang function "g_date_time_get_day_of_year"       (ref _GDateTime)i32
    clang function "g_date_time_get_hour"              (ref _GDateTime)i32
    clang function "g_date_time_get_minute"            (ref _GDateTime)i32
    clang function "g_date_time_get_second"            (ref _GDateTime)i32
    clang function "g_date_time_get_microsecond"       (ref _GDateTime)i32
    clang function "g_date_time_get_seconds"           (ref _GDateTime)r64
    clang function "g_date_time_to_unix"               (ref _GDateTime)i64
    clang function "g_date_time_to_timeval"            (ref _GDateTime,ref _GTimeVal)i32
    clang function "g_date_time_get_utc_offset"        (ref _GDateTime)i64
    clang function "g_date_time_get_timezone_abbreviation" (ref _GDateTime)ref i8
    clang function "g_date_time_is_daylight_savings"   (ref _GDateTime)i32
    clang function "g_date_time_to_timezone"           (ref _GDateTime,ref _GTimeZone)ref _GDateTime
    clang function "g_date_time_to_local"              (ref _GDateTime)ref _GDateTime
    clang function "g_date_time_to_utc"                (ref _GDateTime)ref _GDateTime
    clang function "g_date_time_format"                (ref _GDateTime,ref i8)ref i8
    record _GDir =
        var int dummy    !empty record
    end

    clang function "g_dir_open_utf8"                   (ref i8,u32,ref ref _GError)ref _GDir
    clang function "g_dir_read_name_utf8"              (ref _GDir)ref i8
    clang proc     "g_dir_rewind"                      (ref _GDir)
    clang proc     "g_dir_close"                       (ref _GDir)
    clang function "g_getenv_utf8"                     (ref i8)ref i8
    clang function "g_setenv_utf8"                     (ref i8,ref i8,i32)i32
    clang proc     "g_unsetenv_utf8"                   (ref i8)
    clang function "g_listenv"                         ()ref ref i8
    clang function "g_get_environ"                     ()ref ref i8
    clang function "g_environ_getenv"                  (ref ref i8,ref i8)ref i8
    clang function "g_environ_setenv"                  (ref ref i8,ref i8,ref i8,i32)ref ref i8
    clang function "g_environ_unsetenv"                (ref ref i8,ref i8)ref ref i8
    const G_FILE_ERROR_EXIST                 = 0
    const G_FILE_ERROR_ISDIR                 = 1
    const G_FILE_ERROR_ACCES                 = 2
    const G_FILE_ERROR_NAMETOOLONG           = 3
    const G_FILE_ERROR_NOENT                 = 4
    const G_FILE_ERROR_NOTDIR                = 5
    const G_FILE_ERROR_NXIO                  = 6
    const G_FILE_ERROR_NODEV                 = 7
    const G_FILE_ERROR_ROFS                  = 8
    const G_FILE_ERROR_TXTBSY                = 9
    const G_FILE_ERROR_FAULT                 = 10
    const G_FILE_ERROR_LOOP                  = 11
    const G_FILE_ERROR_NOSPC                 = 12
    const G_FILE_ERROR_NOMEM                 = 13
    const G_FILE_ERROR_MFILE                 = 14
    const G_FILE_ERROR_NFILE                 = 15
    const G_FILE_ERROR_BADF                  = 16
    const G_FILE_ERROR_INVAL                 = 17
    const G_FILE_ERROR_PIPE                  = 18
    const G_FILE_ERROR_AGAIN                 = 19
    const G_FILE_ERROR_INTR                  = 20
    const G_FILE_ERROR_IO                    = 21
    const G_FILE_ERROR_PERM                  = 22
    const G_FILE_ERROR_NOSYS                 = 23
    const G_FILE_ERROR_FAILED                = 24
    const G_FILE_TEST_IS_REGULAR             = 1
    const G_FILE_TEST_IS_SYMLINK             = 2
    const G_FILE_TEST_IS_DIR                 = 4
    const G_FILE_TEST_IS_EXECUTABLE          = 8
    const G_FILE_TEST_EXISTS                 = 16
    clang function "g_file_error_quark"                ()u32
    clang function "g_file_error_from_errno"           (i32)i32
    clang function "g_file_test_utf8"                  (ref i8,i32)i32
    clang function "g_file_get_contents_utf8"          (ref i8,ref ref i8,ref u64,ref ref _GError)i32
    clang function "g_file_set_contents"               (ref i8,ref i8,i64,ref ref _GError)i32
    clang function "g_file_read_link"                  (ref i8,ref ref _GError)ref i8
    clang function "g_mkdtemp"                         (ref i8)ref i8
    clang function "g_mkdtemp_full"                    (ref i8,i32)ref i8
    clang function "g_mkstemp_utf8"                    (ref i8)i32
    clang function "g_mkstemp_full"                    (ref i8,i32,i32)i32
    clang function "g_file_open_tmp_utf8"              (ref i8,ref ref i8,ref ref _GError)i32
    clang function "g_dir_make_tmp"                    (ref i8,ref ref _GError)ref i8
    clang function "g_build_path"                      (ref i8,ref i8,...)ref i8
    clang function "g_build_pathv"                     (ref i8,ref ref i8)ref i8
    clang function "g_build_filename"                  (ref i8,...)ref i8
    clang function "g_build_filenamev"                 (ref ref i8)ref i8
    clang function "g_mkdir_with_parents"              (ref i8,i32)i32
    clang function "g_path_is_absolute"                (ref i8)i32
    clang function "g_path_skip_root"                  (ref i8)ref i8
    clang function "g_basename"                        (ref i8)ref i8
    clang function "g_get_current_dir_utf8"            ()ref i8
    clang function "g_path_get_basename"               (ref i8)ref i8
    clang function "g_path_get_dirname"                (ref i8)ref i8
    clang function "g_strip_context"                   (ref i8,ref i8)ref i8
    clang function "g_dgettext"                        (ref i8,ref i8)ref i8
    clang function "g_dcgettext"                       (ref i8,ref i8,i32)ref i8
    clang function "g_dngettext"                       (ref i8,ref i8,ref i8,u32)ref i8
    clang function "g_dpgettext"                       (ref i8,ref i8,u64)ref i8
    clang function "g_dpgettext2"                      (ref i8,ref i8,ref i8)ref i8
    record _GMemVTable =
        var ref clang function(u64)ref void malloc
        var ref clang function(ref void,u64)ref void realloc
        var ref clang proc(ref void) free
        var ref clang function(u64,u64)ref void calloc
        var ref clang function(u64)ref void try_malloc
        var ref clang function(ref void,u64)ref void try_realloc
    end

    clang proc     "g_free"                            (ref void)
    clang proc     "g_clear_pointer"                   (ref ref void,ref clang proc(ref void))
    clang function "g_malloc"                          (u64)ref void
    clang function "g_malloc0"                         (u64)ref void
    clang function "g_realloc"                         (ref void,u64)ref void
    clang function "g_try_malloc"                      (u64)ref void
    clang function "g_try_malloc0"                     (u64)ref void
    clang function "g_try_realloc"                     (ref void,u64)ref void
    clang function "g_malloc_n"                        (u64,u64)ref void
    clang function "g_malloc0_n"                       (u64,u64)ref void
    clang function "g_realloc_n"                       (ref void,u64,u64)ref void
    clang function "g_try_malloc_n"                    (u64,u64)ref void
    clang function "g_try_malloc0_n"                   (u64,u64)ref void
    clang function "g_try_realloc_n"                   (ref void,u64,u64)ref void
    clang proc     "g_mem_set_vtable"                  (ref _GMemVTable)
    clang function "g_mem_is_system_malloc"            ()i32
    i32 g_mem_gc_friendly
    ref _GMemVTable glib_mem_profiler_table
    clang proc     "g_mem_profile"                     ()
    record _GNode =
        var ref void data
        var ref _GNode next$
        var ref _GNode prev
        var ref _GNode parent
        var ref _GNode children
    end

    const G_TRAVERSE_LEAVES                  = 1
    const G_TRAVERSE_NON_LEAVES              = 2
    const G_TRAVERSE_ALL                     = 3
    const G_TRAVERSE_MASK                    = 3
    const G_TRAVERSE_LEAFS                   = 1
    const G_TRAVERSE_NON_LEAFS               = 2
    const G_IN_ORDER                         = 0
    const G_PRE_ORDER                        = 1
    const G_POST_ORDER                       = 2
    const G_LEVEL_ORDER                      = 3
    clang function "g_node_new"                        (ref void)ref _GNode
    clang proc     "g_node_destroy"                    (ref _GNode)
    clang proc     "g_node_unlink"                     (ref _GNode)
    clang function "g_node_copy_deep"                  (ref _GNode,ref clang function(ref void,ref void)ref void,ref void)ref _GNode
    clang function "g_node_copy"                       (ref _GNode)ref _GNode
    clang function "g_node_insert"                     (ref _GNode,i32,ref _GNode)ref _GNode
    clang function "g_node_insert_before"              (ref _GNode,ref _GNode,ref _GNode)ref _GNode
    clang function "g_node_insert_after"               (ref _GNode,ref _GNode,ref _GNode)ref _GNode
    clang function "g_node_prepend"                    (ref _GNode,ref _GNode)ref _GNode
    clang function "g_node_n_nodes"                    (ref _GNode,i32)u32
    clang function "g_node_get_root"                   (ref _GNode)ref _GNode
    clang function "g_node_is_ancestor"                (ref _GNode,ref _GNode)i32
    clang function "g_node_depth"                      (ref _GNode)u32
    clang function "g_node_find"                       (ref _GNode,i32,i32,ref void)ref _GNode
    clang proc     "g_node_traverse"                   (ref _GNode,i32,i32,i32,ref clang function(ref _GNode,ref void)i32,ref void)
    clang function "g_node_max_height"                 (ref _GNode)u32
    clang proc     "g_node_children_foreach"           (ref _GNode,i32,ref clang proc(ref _GNode,ref void),ref void)
    clang proc     "g_node_reverse_children"           (ref _GNode)
    clang function "g_node_n_children"                 (ref _GNode)u32
    clang function "g_node_nth_child"                  (ref _GNode,u32)ref _GNode
    clang function "g_node_last_child"                 (ref _GNode)ref _GNode
    clang function "g_node_find_child"                 (ref _GNode,i32,ref void)ref _GNode
    clang function "g_node_child_position"             (ref _GNode,ref _GNode)i32
    clang function "g_node_child_index"                (ref _GNode,ref void)i32
    clang function "g_node_first_sibling"              (ref _GNode)ref _GNode
    clang function "g_node_last_sibling"               (ref _GNode)ref _GNode
    record _GList =
        var ref void data
        var ref _GList next$
        var ref _GList prev
    end

    clang function "g_list_alloc"                      ()ref _GList
    clang proc     "g_list_free"                       (ref _GList)
    clang proc     "g_list_free_1"                     (ref _GList)
    clang proc     "g_list_free_full"                  (ref _GList,ref clang proc(ref void))
    clang function "g_list_append"                     (ref _GList,ref void)ref _GList
    clang function "g_list_prepend"                    (ref _GList,ref void)ref _GList
    clang function "g_list_insert"                     (ref _GList,ref void,i32)ref _GList
    clang function "g_list_insert_sorted"              (ref _GList,ref void,ref clang function(ref void,ref void)i32)ref _GList
    clang function "g_list_insert_sorted_with_data"    (ref _GList,ref void,ref clang function(ref void,ref void,ref void)i32,ref void)ref _GList
    clang function "g_list_insert_before"              (ref _GList,ref _GList,ref void)ref _GList
    clang function "g_list_concat"                     (ref _GList,ref _GList)ref _GList
    clang function "g_list_remove"                     (ref _GList,ref void)ref _GList
    clang function "g_list_remove_all"                 (ref _GList,ref void)ref _GList
    clang function "g_list_remove_link"                (ref _GList,ref _GList)ref _GList
    clang function "g_list_delete_link"                (ref _GList,ref _GList)ref _GList
    clang function "g_list_reverse"                    (ref _GList)ref _GList
    clang function "g_list_copy"                       (ref _GList)ref _GList
    clang function "g_list_copy_deep"                  (ref _GList,ref clang function(ref void,ref void)ref void,ref void)ref _GList
    clang function "g_list_nth"                        (ref _GList,u32)ref _GList
    clang function "g_list_nth_prev"                   (ref _GList,u32)ref _GList
    clang function "g_list_find"                       (ref _GList,ref void)ref _GList
    clang function "g_list_find_custom"                (ref _GList,ref void,ref clang function(ref void,ref void)i32)ref _GList
    clang function "g_list_position"                   (ref _GList,ref _GList)i32
    clang function "g_list_index"                      (ref _GList,ref void)i32
    clang function "g_list_last"                       (ref _GList)ref _GList
    clang function "g_list_first"                      (ref _GList)ref _GList
    clang function "g_list_length"                     (ref _GList)u32
    clang proc     "g_list_foreach"                    (ref _GList,ref clang proc(ref void,ref void),ref void)
    clang function "g_list_sort"                       (ref _GList,ref clang function(ref void,ref void)i32)ref _GList
    clang function "g_list_sort_with_data"             (ref _GList,ref clang function(ref void,ref void,ref void)i32,ref void)ref _GList
    clang function "g_list_nth_data"                   (ref _GList,u32)ref void
    record _GHashTable =
        var int dummy    !empty record
    end

    record _GHashTableIter =
        var ref void dummy1
        var ref void dummy2
        var ref void dummy3
        var i32 dummy4
        var i32 dummy5
        var ref void dummy6
    end

    clang function "g_hash_table_new"                  (ref clang function(ref void)u32,ref clang function(ref void,ref void)i32)ref _GHashTable
    clang function "g_hash_table_new_full"             (ref clang function(ref void)u32,ref clang function(ref void,ref void)i32,ref clang proc(ref void),ref clang proc(ref void))ref _GHashTable
    clang proc     "g_hash_table_destroy"              (ref _GHashTable)
    clang proc     "g_hash_table_insert"               (ref _GHashTable,ref void,ref void)
    clang proc     "g_hash_table_replace"              (ref _GHashTable,ref void,ref void)
    clang proc     "g_hash_table_add"                  (ref _GHashTable,ref void)
    clang function "g_hash_table_remove"               (ref _GHashTable,ref void)i32
    clang proc     "g_hash_table_remove_all"           (ref _GHashTable)
    clang function "g_hash_table_steal"                (ref _GHashTable,ref void)i32
    clang proc     "g_hash_table_steal_all"            (ref _GHashTable)
    clang function "g_hash_table_lookup"               (ref _GHashTable,ref void)ref void
    clang function "g_hash_table_contains"             (ref _GHashTable,ref void)i32
    clang function "g_hash_table_lookup_extended"      (ref _GHashTable,ref void,ref ref void,ref ref void)i32
    clang proc     "g_hash_table_foreach"              (ref _GHashTable,ref clang proc(ref void,ref void,ref void),ref void)
    clang function "g_hash_table_find"                 (ref _GHashTable,ref clang function(ref void,ref void,ref void)i32,ref void)ref void
    clang function "g_hash_table_foreach_remove"       (ref _GHashTable,ref clang function(ref void,ref void,ref void)i32,ref void)u32
    clang function "g_hash_table_foreach_steal"        (ref _GHashTable,ref clang function(ref void,ref void,ref void)i32,ref void)u32
    clang function "g_hash_table_size"                 (ref _GHashTable)u32
    clang function "g_hash_table_get_keys"             (ref _GHashTable)ref _GList
    clang function "g_hash_table_get_values"           (ref _GHashTable)ref _GList
    clang proc     "g_hash_table_iter_init"            (ref _GHashTableIter,ref _GHashTable)
    clang function "g_hash_table_iter_next"            (ref _GHashTableIter,ref ref void,ref ref void)i32
    clang function "g_hash_table_iter_get_hash_table"  (ref _GHashTableIter)ref _GHashTable
    clang proc     "g_hash_table_iter_remove"          (ref _GHashTableIter)
    clang proc     "g_hash_table_iter_replace"         (ref _GHashTableIter,ref void)
    clang proc     "g_hash_table_iter_steal"           (ref _GHashTableIter)
    clang function "g_hash_table_ref"                  (ref _GHashTable)ref _GHashTable
    clang proc     "g_hash_table_unref"                (ref _GHashTable)
    clang function "g_str_equal"                       (ref void,ref void)i32
    clang function "g_str_hash"                        (ref void)u32
    clang function "g_int_equal"                       (ref void,ref void)i32
    clang function "g_int_hash"                        (ref void)u32
    clang function "g_int64_equal"                     (ref void,ref void)i32
    clang function "g_int64_hash"                      (ref void)u32
    clang function "g_double_equal"                    (ref void,ref void)i32
    clang function "g_double_hash"                     (ref void)u32
    clang function "g_direct_hash"                     (ref void)u32
    clang function "g_direct_equal"                    (ref void,ref void)i32
    record _GHmac =
        var int dummy    !empty record
    end

    clang function "g_hmac_new"                        (i32,ref byte,u64)ref _GHmac
    clang function "g_hmac_copy"                       (ref _GHmac)ref _GHmac
    clang function "g_hmac_ref"                        (ref _GHmac)ref _GHmac
    clang proc     "g_hmac_unref"                      (ref _GHmac)
    clang proc     "g_hmac_update"                     (ref _GHmac,ref byte,i64)
    clang function "g_hmac_get_string"                 (ref _GHmac)ref i8
    clang proc     "g_hmac_get_digest"                 (ref _GHmac,ref byte,ref u64)
    clang function "g_compute_hmac_for_data"           (i32,ref byte,u64,ref byte,u64)ref i8
    clang function "g_compute_hmac_for_string"         (i32,ref byte,u64,ref i8,i64)ref i8
    record _GHook =
        var ref void data
        var ref _GHook next$
        var ref _GHook prev
        var u32 ref_count
        var u32 hook_id
        var u32 flags
        var ref void func
        var ref clang proc(ref void) destroy
    end

    record _GHookList =
        var u32 seq_id
        var u32 hook_size
        var u32 is_setup
        var ref _GHook hooks
        var ref void dummy3
        var ref clang proc(ref _GHookList,ref _GHook) finalize_hook
        var [2]ref void dummy
    end

    const G_HOOK_FLAG_ACTIVE                 = 1
    const G_HOOK_FLAG_IN_CALL                = 2
    const G_HOOK_FLAG_MASK                   = 15
    clang proc     "g_hook_list_init"                  (ref _GHookList,u32)
    clang proc     "g_hook_list_clear"                 (ref _GHookList)
    clang function "g_hook_alloc"                      (ref _GHookList)ref _GHook
    clang proc     "g_hook_free"                       (ref _GHookList,ref _GHook)
    clang function "g_hook_ref"                        (ref _GHookList,ref _GHook)ref _GHook
    clang proc     "g_hook_unref"                      (ref _GHookList,ref _GHook)
    clang function "g_hook_destroy"                    (ref _GHookList,u32)i32
    clang proc     "g_hook_destroy_link"               (ref _GHookList,ref _GHook)
    clang proc     "g_hook_prepend"                    (ref _GHookList,ref _GHook)
    clang proc     "g_hook_insert_before"              (ref _GHookList,ref _GHook,ref _GHook)
    clang proc     "g_hook_insert_sorted"              (ref _GHookList,ref _GHook,ref clang function(ref _GHook,ref _GHook)i32)
    clang function "g_hook_get"                        (ref _GHookList,u32)ref _GHook
    clang function "g_hook_find"                       (ref _GHookList,i32,ref clang function(ref _GHook,ref void)i32,ref void)ref _GHook
    clang function "g_hook_find_data"                  (ref _GHookList,i32,ref void)ref _GHook
    clang function "g_hook_find_func"                  (ref _GHookList,i32,ref void)ref _GHook
    clang function "g_hook_find_func_data"             (ref _GHookList,i32,ref void,ref void)ref _GHook
    clang function "g_hook_first_valid"                (ref _GHookList,i32)ref _GHook
    clang function "g_hook_next_valid"                 (ref _GHookList,ref _GHook,i32)ref _GHook
    clang function "g_hook_compare_ids"                (ref _GHook,ref _GHook)i32
    clang proc     "g_hook_list_invoke"                (ref _GHookList,i32)
    clang proc     "g_hook_list_invoke_check"          (ref _GHookList,i32)
    clang proc     "g_hook_list_marshal"               (ref _GHookList,i32,ref clang proc(ref _GHook,ref void),ref void)
    clang proc     "g_hook_list_marshal_check"         (ref _GHookList,i32,ref clang function(ref _GHook,ref void)i32,ref void)
    clang function "g_hostname_is_non_ascii"           (ref i8)i32
    clang function "g_hostname_is_ascii_encoded"       (ref i8)i32
    clang function "g_hostname_is_ip_address"          (ref i8)i32
    clang function "g_hostname_to_ascii"               (ref i8)ref i8
    clang function "g_hostname_to_unicode"             (ref i8)ref i8
    record _GPollFD =
        var i64 fd
        var u16 events
        var u16 revents
    end

    clang function "g_poll"                            (ref _GPollFD,u32,i32)i32
    record _GSList =
        var ref void data
        var ref _GSList next$
    end

    clang function "g_slist_alloc"                     ()ref _GSList
    clang proc     "g_slist_free"                      (ref _GSList)
    clang proc     "g_slist_free_1"                    (ref _GSList)
    clang proc     "g_slist_free_full"                 (ref _GSList,ref clang proc(ref void))
    clang function "g_slist_append"                    (ref _GSList,ref void)ref _GSList
    clang function "g_slist_prepend"                   (ref _GSList,ref void)ref _GSList
    clang function "g_slist_insert"                    (ref _GSList,ref void,i32)ref _GSList
    clang function "g_slist_insert_sorted"             (ref _GSList,ref void,ref clang function(ref void,ref void)i32)ref _GSList
    clang function "g_slist_insert_sorted_with_data"   (ref _GSList,ref void,ref clang function(ref void,ref void,ref void)i32,ref void)ref _GSList
    clang function "g_slist_insert_before"             (ref _GSList,ref _GSList,ref void)ref _GSList
    clang function "g_slist_concat"                    (ref _GSList,ref _GSList)ref _GSList
    clang function "g_slist_remove"                    (ref _GSList,ref void)ref _GSList
    clang function "g_slist_remove_all"                (ref _GSList,ref void)ref _GSList
    clang function "g_slist_remove_link"               (ref _GSList,ref _GSList)ref _GSList
    clang function "g_slist_delete_link"               (ref _GSList,ref _GSList)ref _GSList
    clang function "g_slist_reverse"                   (ref _GSList)ref _GSList
    clang function "g_slist_copy"                      (ref _GSList)ref _GSList
    clang function "g_slist_copy_deep"                 (ref _GSList,ref clang function(ref void,ref void)ref void,ref void)ref _GSList
    clang function "g_slist_nth"                       (ref _GSList,u32)ref _GSList
    clang function "g_slist_find"                      (ref _GSList,ref void)ref _GSList
    clang function "g_slist_find_custom"               (ref _GSList,ref void,ref clang function(ref void,ref void)i32)ref _GSList
    clang function "g_slist_position"                  (ref _GSList,ref _GSList)i32
    clang function "g_slist_index"                     (ref _GSList,ref void)i32
    clang function "g_slist_last"                      (ref _GSList)ref _GSList
    clang function "g_slist_length"                    (ref _GSList)u32
    clang proc     "g_slist_foreach"                   (ref _GSList,ref clang proc(ref void,ref void),ref void)
    clang function "g_slist_sort"                      (ref _GSList,ref clang function(ref void,ref void)i32)ref _GSList
    clang function "g_slist_sort_with_data"            (ref _GSList,ref clang function(ref void,ref void,ref void)i32,ref void)ref _GSList
    clang function "g_slist_nth_data"                  (ref _GSList,u32)ref void
    record _GMainContext =
        var int dummy    !empty record
    end

    record _GMainLoop =
        var int dummy    !empty record
    end

    record _GSource =
        var ref void callback_data
        var ref _GSourceCallbackFuncs callback_funcs
        var ref _GSourceFuncs source_funcs
        var u32 ref_count
        var ref _GMainContext context
        var i32 priority
        var u32 flags
        var u32 source_id
        var ref _GSList poll_fds
        var ref _GSource prev
        var ref _GSource next$
        var ref i8 name
        var ref _GSourcePrivate priv
    end

    record _GSourcePrivate =
        var int dummy    !empty record
    end

    record _GSourceCallbackFuncs =
        var ref clang proc(ref void) ref
        var ref clang proc(ref void) unref
        var ref clang proc(ref void,ref _GSource,ref ref clang function(ref void)i32,ref ref void) get
    end

    record _GSourceFuncs =
        var ref clang function(ref _GSource,ref i32)i32 prepare
        var ref clang function(ref _GSource)i32 check
        var ref clang function(ref _GSource,ref clang function(ref void)i32,ref void)i32 dispatch
        var ref clang proc(ref _GSource) finalize
        var ref clang function(ref void)i32 closure_callback
        var ref clang proc() closure_marshal
    end

    clang function "g_main_context_new"                ()ref _GMainContext
    clang function "g_main_context_ref"                (ref _GMainContext)ref _GMainContext
    clang proc     "g_main_context_unref"              (ref _GMainContext)
    clang function "g_main_context_default"            ()ref _GMainContext
    clang function "g_main_context_iteration"          (ref _GMainContext,i32)i32
    clang function "g_main_context_pending"            (ref _GMainContext)i32
    clang function "g_main_context_find_source_by_id"  (ref _GMainContext,u32)ref _GSource
    clang function "g_main_context_find_source_by_user_data" (ref _GMainContext,ref void)ref _GSource
    clang function "g_main_context_find_source_by_funcs_user_data" (ref _GMainContext,ref _GSourceFuncs,ref void)ref _GSource
    clang proc     "g_main_context_wakeup"             (ref _GMainContext)
    clang function "g_main_context_acquire"            (ref _GMainContext)i32
    clang proc     "g_main_context_release"            (ref _GMainContext)
    clang function "g_main_context_is_owner"           (ref _GMainContext)i32
    clang function "g_main_context_wait"               (ref _GMainContext,ref _GCond,ref _GMutex)i32
    clang function "g_main_context_prepare"            (ref _GMainContext,ref i32)i32
    clang function "g_main_context_query"              (ref _GMainContext,i32,ref i32,ref _GPollFD,i32)i32
    clang function "g_main_context_check"              (ref _GMainContext,i32,ref _GPollFD,i32)i32
    clang proc     "g_main_context_dispatch"           (ref _GMainContext)
    clang proc     "g_main_context_set_poll_func"      (ref _GMainContext,ref clang function(ref _GPollFD,u32,i32)i32)
    clang function "g_main_context_get_poll_func"      (ref _GMainContext)ref clang function(ref _GPollFD,u32,i32)i32
    clang proc     "g_main_context_add_poll"           (ref _GMainContext,ref _GPollFD,i32)
    clang proc     "g_main_context_remove_poll"        (ref _GMainContext,ref _GPollFD)
    clang function "g_main_depth"                      ()i32
    clang function "g_main_current_source"             ()ref _GSource
    clang proc     "g_main_context_push_thread_default" (ref _GMainContext)
    clang proc     "g_main_context_pop_thread_default" (ref _GMainContext)
    clang function "g_main_context_get_thread_default" ()ref _GMainContext
    clang function "g_main_context_ref_thread_default" ()ref _GMainContext
    clang function "g_main_loop_new"                   (ref _GMainContext,i32)ref _GMainLoop
    clang proc     "g_main_loop_run"                   (ref _GMainLoop)
    clang proc     "g_main_loop_quit"                  (ref _GMainLoop)
    clang function "g_main_loop_ref"                   (ref _GMainLoop)ref _GMainLoop
    clang proc     "g_main_loop_unref"                 (ref _GMainLoop)
    clang function "g_main_loop_is_running"            (ref _GMainLoop)i32
    clang function "g_main_loop_get_context"           (ref _GMainLoop)ref _GMainContext
    clang function "g_source_new"                      (ref _GSourceFuncs,u32)ref _GSource
    clang function "g_source_ref"                      (ref _GSource)ref _GSource
    clang proc     "g_source_unref"                    (ref _GSource)
    clang function "g_source_attach"                   (ref _GSource,ref _GMainContext)u32
    clang proc     "g_source_destroy"                  (ref _GSource)
    clang proc     "g_source_set_priority"             (ref _GSource,i32)
    clang function "g_source_get_priority"             (ref _GSource)i32
    clang proc     "g_source_set_can_recurse"          (ref _GSource,i32)
    clang function "g_source_get_can_recurse"          (ref _GSource)i32
    clang function "g_source_get_id"                   (ref _GSource)u32
    clang function "g_source_get_context"              (ref _GSource)ref _GMainContext
    clang proc     "g_source_set_callback"             (ref _GSource,ref clang function(ref void)i32,ref void,ref clang proc(ref void))
    clang proc     "g_source_set_funcs"                (ref _GSource,ref _GSourceFuncs)
    clang function "g_source_is_destroyed"             (ref _GSource)i32
    clang proc     "g_source_set_name"                 (ref _GSource,ref i8)
    clang function "g_source_get_name"                 (ref _GSource)ref i8
    clang proc     "g_source_set_name_by_id"           (u32,ref i8)
    clang proc     "g_source_set_callback_indirect"    (ref _GSource,ref void,ref _GSourceCallbackFuncs)
    clang proc     "g_source_add_poll"                 (ref _GSource,ref _GPollFD)
    clang proc     "g_source_remove_poll"              (ref _GSource,ref _GPollFD)
    clang proc     "g_source_add_child_source"         (ref _GSource,ref _GSource)
    clang proc     "g_source_remove_child_source"      (ref _GSource,ref _GSource)
    clang proc     "g_source_get_current_time"         (ref _GSource,ref _GTimeVal)
    clang function "g_source_get_time"                 (ref _GSource)i64
    clang function "g_idle_source_new"                 ()ref _GSource
    clang function "g_child_watch_source_new"          (ref void)ref _GSource
    clang function "g_timeout_source_new"              (u32)ref _GSource
    clang function "g_timeout_source_new_seconds"      (u32)ref _GSource
    clang proc     "g_get_current_time"                (ref _GTimeVal)
    clang function "g_get_monotonic_time"              ()i64
    clang function "g_get_real_time"                   ()i64
    clang function "g_source_remove"                   (u32)i32
    clang function "g_source_remove_by_user_data"      (ref void)i32
    clang function "g_source_remove_by_funcs_user_data" (ref _GSourceFuncs,ref void)i32
    clang function "g_timeout_add_full"                (i32,u32,ref clang function(ref void)i32,ref void,ref clang proc(ref void))u32
    clang function "g_timeout_add"                     (u32,ref clang function(ref void)i32,ref void)u32
    clang function "g_timeout_add_seconds_full"        (i32,u32,ref clang function(ref void)i32,ref void,ref clang proc(ref void))u32
    clang function "g_timeout_add_seconds"             (u32,ref clang function(ref void)i32,ref void)u32
    clang function "g_child_watch_add_full"            (i32,ref void,ref clang proc(ref void,i32,ref void),ref void,ref clang proc(ref void))u32
    clang function "g_child_watch_add"                 (ref void,ref clang proc(ref void,i32,ref void),ref void)u32
    clang function "g_idle_add"                        (ref clang function(ref void)i32,ref void)u32
    clang function "g_idle_add_full"                   (i32,ref clang function(ref void)i32,ref void,ref clang proc(ref void))u32
    clang function "g_idle_remove_by_data"             (ref void)i32
    clang proc     "g_main_context_invoke_full"        (ref _GMainContext,i32,ref clang function(ref void)i32,ref void,ref clang proc(ref void))
    clang proc     "g_main_context_invoke"             (ref _GMainContext,ref clang function(ref void)i32,ref void)
    _GSourceFuncs g_timeout_funcs
    _GSourceFuncs g_child_watch_funcs
    _GSourceFuncs g_idle_funcs
    const G_UNICODE_CONTROL                  = 0
    const G_UNICODE_FORMAT                   = 1
    const G_UNICODE_UNASSIGNED               = 2
    const G_UNICODE_PRIVATE_USE              = 3
    const G_UNICODE_SURROGATE                = 4
    const G_UNICODE_LOWERCASE_LETTER         = 5
    const G_UNICODE_MODIFIER_LETTER          = 6
    const G_UNICODE_OTHER_LETTER             = 7
    const G_UNICODE_TITLECASE_LETTER         = 8
    const G_UNICODE_UPPERCASE_LETTER         = 9
    const G_UNICODE_SPACING_MARK             = 10
    const G_UNICODE_ENCLOSING_MARK           = 11
    const G_UNICODE_NON_SPACING_MARK         = 12
    const G_UNICODE_DECIMAL_NUMBER           = 13
    const G_UNICODE_LETTER_NUMBER            = 14
    const G_UNICODE_OTHER_NUMBER             = 15
    const G_UNICODE_CONNECT_PUNCTUATION      = 16
    const G_UNICODE_DASH_PUNCTUATION         = 17
    const G_UNICODE_CLOSE_PUNCTUATION        = 18
    const G_UNICODE_FINAL_PUNCTUATION        = 19
    const G_UNICODE_INITIAL_PUNCTUATION      = 20
    const G_UNICODE_OTHER_PUNCTUATION        = 21
    const G_UNICODE_OPEN_PUNCTUATION         = 22
    const G_UNICODE_CURRENCY_SYMBOL          = 23
    const G_UNICODE_MODIFIER_SYMBOL          = 24
    const G_UNICODE_MATH_SYMBOL              = 25
    const G_UNICODE_OTHER_SYMBOL             = 26
    const G_UNICODE_LINE_SEPARATOR           = 27
    const G_UNICODE_PARAGRAPH_SEPARATOR      = 28
    const G_UNICODE_SPACE_SEPARATOR          = 29
    const G_UNICODE_BREAK_MANDATORY          = 0
    const G_UNICODE_BREAK_CARRIAGE_RETURN    = 1
    const G_UNICODE_BREAK_LINE_FEED          = 2
    const G_UNICODE_BREAK_COMBINING_MARK     = 3
    const G_UNICODE_BREAK_SURROGATE          = 4
    const G_UNICODE_BREAK_ZERO_WIDTH_SPACE   = 5
    const G_UNICODE_BREAK_INSEPARABLE        = 6
    const G_UNICODE_BREAK_NON_BREAKING_GLUE  = 7
    const G_UNICODE_BREAK_CONTINGENT         = 8
    const G_UNICODE_BREAK_SPACE              = 9
    const G_UNICODE_BREAK_AFTER              = 10
    const G_UNICODE_BREAK_BEFORE             = 11
    const G_UNICODE_BREAK_BEFORE_AND_AFTER   = 12
    const G_UNICODE_BREAK_HYPHEN             = 13
    const G_UNICODE_BREAK_NON_STARTER        = 14
    const G_UNICODE_BREAK_OPEN_PUNCTUATION   = 15
    const G_UNICODE_BREAK_CLOSE_PUNCTUATION  = 16
    const G_UNICODE_BREAK_QUOTATION          = 17
    const G_UNICODE_BREAK_EXCLAMATION        = 18
    const G_UNICODE_BREAK_IDEOGRAPHIC        = 19
    const G_UNICODE_BREAK_NUMERIC            = 20
    const G_UNICODE_BREAK_INFIX_SEPARATOR    = 21
    const G_UNICODE_BREAK_SYMBOL             = 22
    const G_UNICODE_BREAK_ALPHABETIC         = 23
    const G_UNICODE_BREAK_PREFIX             = 24
    const G_UNICODE_BREAK_POSTFIX            = 25
    const G_UNICODE_BREAK_COMPLEX_CONTEXT    = 26
    const G_UNICODE_BREAK_AMBIGUOUS          = 27
    const G_UNICODE_BREAK_UNKNOWN            = 28
    const G_UNICODE_BREAK_NEXT_LINE          = 29
    const G_UNICODE_BREAK_WORD_JOINER        = 30
    const G_UNICODE_BREAK_HANGUL_L_JAMO      = 31
    const G_UNICODE_BREAK_HANGUL_V_JAMO      = 32
    const G_UNICODE_BREAK_HANGUL_T_JAMO      = 33
    const G_UNICODE_BREAK_HANGUL_LV_SYLLABLE = 34
    const G_UNICODE_BREAK_HANGUL_LVT_SYLLABLE = 35
    const G_UNICODE_BREAK_CLOSE_PARANTHESIS  = 36
    const G_UNICODE_BREAK_CONDITIONAL_JAPANESE_STARTER = 37
    const G_UNICODE_BREAK_HEBREW_LETTER      = 38
    const G_UNICODE_SCRIPT_INVALID_CODE      = -1
    const G_UNICODE_SCRIPT_COMMON            = 0
    const G_UNICODE_SCRIPT_INHERITED         = 1
    const G_UNICODE_SCRIPT_ARABIC            = 2
    const G_UNICODE_SCRIPT_ARMENIAN          = 3
    const G_UNICODE_SCRIPT_BENGALI           = 4
    const G_UNICODE_SCRIPT_BOPOMOFO          = 5
    const G_UNICODE_SCRIPT_CHEROKEE          = 6
    const G_UNICODE_SCRIPT_COPTIC            = 7
    const G_UNICODE_SCRIPT_CYRILLIC          = 8
    const G_UNICODE_SCRIPT_DESERET           = 9
    const G_UNICODE_SCRIPT_DEVANAGARI        = 10
    const G_UNICODE_SCRIPT_ETHIOPIC          = 11
    const G_UNICODE_SCRIPT_GEORGIAN          = 12
    const G_UNICODE_SCRIPT_GOTHIC            = 13
    const G_UNICODE_SCRIPT_GREEK             = 14
    const G_UNICODE_SCRIPT_GUJARATI          = 15
    const G_UNICODE_SCRIPT_GURMUKHI          = 16
    const G_UNICODE_SCRIPT_HAN               = 17
    const G_UNICODE_SCRIPT_HANGUL            = 18
    const G_UNICODE_SCRIPT_HEBREW            = 19
    const G_UNICODE_SCRIPT_HIRAGANA          = 20
    const G_UNICODE_SCRIPT_KANNADA           = 21
    const G_UNICODE_SCRIPT_KATAKANA          = 22
    const G_UNICODE_SCRIPT_KHMER             = 23
    const G_UNICODE_SCRIPT_LAO               = 24
    const G_UNICODE_SCRIPT_LATIN             = 25
    const G_UNICODE_SCRIPT_MALAYALAM         = 26
    const G_UNICODE_SCRIPT_MONGOLIAN         = 27
    const G_UNICODE_SCRIPT_MYANMAR           = 28
    const G_UNICODE_SCRIPT_OGHAM             = 29
    const G_UNICODE_SCRIPT_OLD_ITALIC        = 30
    const G_UNICODE_SCRIPT_ORIYA             = 31
    const G_UNICODE_SCRIPT_RUNIC             = 32
    const G_UNICODE_SCRIPT_SINHALA           = 33
    const G_UNICODE_SCRIPT_SYRIAC            = 34
    const G_UNICODE_SCRIPT_TAMIL             = 35
    const G_UNICODE_SCRIPT_TELUGU            = 36
    const G_UNICODE_SCRIPT_THAANA            = 37
    const G_UNICODE_SCRIPT_THAI              = 38
    const G_UNICODE_SCRIPT_TIBETAN           = 39
    const G_UNICODE_SCRIPT_CANADIAN_ABORIGINAL = 40
    const G_UNICODE_SCRIPT_YI                = 41
    const G_UNICODE_SCRIPT_TAGALOG           = 42
    const G_UNICODE_SCRIPT_HANUNOO           = 43
    const G_UNICODE_SCRIPT_BUHID             = 44
    const G_UNICODE_SCRIPT_TAGBANWA          = 45
    const G_UNICODE_SCRIPT_BRAILLE           = 46
    const G_UNICODE_SCRIPT_CYPRIOT           = 47
    const G_UNICODE_SCRIPT_LIMBU             = 48
    const G_UNICODE_SCRIPT_OSMANYA           = 49
    const G_UNICODE_SCRIPT_SHAVIAN           = 50
    const G_UNICODE_SCRIPT_LINEAR_B          = 51
    const G_UNICODE_SCRIPT_TAI_LE            = 52
    const G_UNICODE_SCRIPT_UGARITIC          = 53
    const G_UNICODE_SCRIPT_NEW_TAI_LUE       = 54
    const G_UNICODE_SCRIPT_BUGINESE          = 55
    const G_UNICODE_SCRIPT_GLAGOLITIC        = 56
    const G_UNICODE_SCRIPT_TIFINAGH          = 57
    const G_UNICODE_SCRIPT_SYLOTI_NAGRI      = 58
    const G_UNICODE_SCRIPT_OLD_PERSIAN       = 59
    const G_UNICODE_SCRIPT_KHAROSHTHI        = 60
    const G_UNICODE_SCRIPT_UNKNOWN           = 61
    const G_UNICODE_SCRIPT_BALINESE          = 62
    const G_UNICODE_SCRIPT_CUNEIFORM         = 63
    const G_UNICODE_SCRIPT_PHOENICIAN        = 64
    const G_UNICODE_SCRIPT_PHAGS_PA          = 65
    const G_UNICODE_SCRIPT_NKO               = 66
    const G_UNICODE_SCRIPT_KAYAH_LI          = 67
    const G_UNICODE_SCRIPT_LEPCHA            = 68
    const G_UNICODE_SCRIPT_REJANG            = 69
    const G_UNICODE_SCRIPT_SUNDANESE         = 70
    const G_UNICODE_SCRIPT_SAURASHTRA        = 71
    const G_UNICODE_SCRIPT_CHAM              = 72
    const G_UNICODE_SCRIPT_OL_CHIKI          = 73
    const G_UNICODE_SCRIPT_VAI               = 74
    const G_UNICODE_SCRIPT_CARIAN            = 75
    const G_UNICODE_SCRIPT_LYCIAN            = 76
    const G_UNICODE_SCRIPT_LYDIAN            = 77
    const G_UNICODE_SCRIPT_AVESTAN           = 78
    const G_UNICODE_SCRIPT_BAMUM             = 79
    const G_UNICODE_SCRIPT_EGYPTIAN_HIEROGLYPHS = 80
    const G_UNICODE_SCRIPT_IMPERIAL_ARAMAIC  = 81
    const G_UNICODE_SCRIPT_INSCRIPTIONAL_PAHLAVI = 82
    const G_UNICODE_SCRIPT_INSCRIPTIONAL_PARTHIAN = 83
    const G_UNICODE_SCRIPT_JAVANESE          = 84
    const G_UNICODE_SCRIPT_KAITHI            = 85
    const G_UNICODE_SCRIPT_LISU              = 86
    const G_UNICODE_SCRIPT_MEETEI_MAYEK      = 87
    const G_UNICODE_SCRIPT_OLD_SOUTH_ARABIAN = 88
    const G_UNICODE_SCRIPT_OLD_TURKIC        = 89
    const G_UNICODE_SCRIPT_SAMARITAN         = 90
    const G_UNICODE_SCRIPT_TAI_THAM          = 91
    const G_UNICODE_SCRIPT_TAI_VIET          = 92
    const G_UNICODE_SCRIPT_BATAK             = 93
    const G_UNICODE_SCRIPT_BRAHMI            = 94
    const G_UNICODE_SCRIPT_MANDAIC           = 95
    const G_UNICODE_SCRIPT_CHAKMA            = 96
    const G_UNICODE_SCRIPT_MEROITIC_CURSIVE  = 97
    const G_UNICODE_SCRIPT_MEROITIC_HIEROGLYPHS = 98
    const G_UNICODE_SCRIPT_MIAO              = 99
    const G_UNICODE_SCRIPT_SHARADA           = 100
    const G_UNICODE_SCRIPT_SORA_SOMPENG      = 101
    const G_UNICODE_SCRIPT_TAKRI             = 102
    clang function "g_unicode_script_to_iso15924"      (i32)u32
    clang function "g_unicode_script_from_iso15924"    (u32)i32
    clang function "g_unichar_isalnum"                 (u32)i32
    clang function "g_unichar_isalpha"                 (u32)i32
    clang function "g_unichar_iscntrl"                 (u32)i32
    clang function "g_unichar_isdigit"                 (u32)i32
    clang function "g_unichar_isgraph"                 (u32)i32
    clang function "g_unichar_islower"                 (u32)i32
    clang function "g_unichar_isprint"                 (u32)i32
    clang function "g_unichar_ispunct"                 (u32)i32
    clang function "g_unichar_isspace"                 (u32)i32
    clang function "g_unichar_isupper"                 (u32)i32
    clang function "g_unichar_isxdigit"                (u32)i32
    clang function "g_unichar_istitle"                 (u32)i32
    clang function "g_unichar_isdefined"               (u32)i32
    clang function "g_unichar_iswide"                  (u32)i32
    clang function "g_unichar_iswide_cjk"              (u32)i32
    clang function "g_unichar_iszerowidth"             (u32)i32
    clang function "g_unichar_ismark"                  (u32)i32
    clang function "g_unichar_toupper"                 (u32)u32
    clang function "g_unichar_tolower"                 (u32)u32
    clang function "g_unichar_totitle"                 (u32)u32
    clang function "g_unichar_digit_value"             (u32)i32
    clang function "g_unichar_xdigit_value"            (u32)i32
    clang function "g_unichar_type"                    (u32)i32
    clang function "g_unichar_break_type"              (u32)i32
    clang function "g_unichar_combining_class"         (u32)i32
    clang function "g_unichar_get_mirror_char"         (u32,ref u32)i32
    clang function "g_unichar_get_script"              (u32)i32
    clang function "g_unichar_validate"                (u32)i32
    clang function "g_unichar_compose"                 (u32,u32,ref u32)i32
    clang function "g_unichar_decompose"               (u32,ref u32,ref u32)i32
    clang function "g_unichar_fully_decompose"         (u32,i32,ref u32,u64)u64
    clang proc     "g_unicode_canonical_ordering"      (ref u32,u64)
    clang function "g_unicode_canonical_decomposition" (u32,ref u64)ref u32
    ref i8 g_utf8_skip
    clang function "g_utf8_get_char"                   (ref i8)u32
    clang function "g_utf8_get_char_validated"         (ref i8,i64)u32
    clang function "g_utf8_offset_to_pointer"          (ref i8,i32)ref i8
    clang function "g_utf8_pointer_to_offset"          (ref i8,ref i8)i32
    clang function "g_utf8_prev_char"                  (ref i8)ref i8
    clang function "g_utf8_find_next_char"             (ref i8,ref i8)ref i8
    clang function "g_utf8_find_prev_char"             (ref i8,ref i8)ref i8
    clang function "g_utf8_strlen"                     (ref i8,i64)i32
    clang function "g_utf8_substring"                  (ref i8,i32,i32)ref i8
    clang function "g_utf8_strncpy"                    (ref i8,ref i8,u64)ref i8
    clang function "g_utf8_strchr"                     (ref i8,i64,u32)ref i8
    clang function "g_utf8_strrchr"                    (ref i8,i64,u32)ref i8
    clang function "g_utf8_strreverse"                 (ref i8,i64)ref i8
    clang function "g_utf8_to_utf16"                   (ref i8,i32,ref i32,ref i32,ref ref _GError)ref u16
    clang function "g_utf8_to_ucs4"                    (ref i8,i32,ref i32,ref i32,ref ref _GError)ref u32
    clang function "g_utf8_to_ucs4_fast"               (ref i8,i32,ref i32)ref u32
    clang function "g_utf16_to_ucs4"                   (ref u16,i32,ref i32,ref i32,ref ref _GError)ref u32
    clang function "g_utf16_to_utf8"                   (ref u16,i32,ref i32,ref i32,ref ref _GError)ref i8
    clang function "g_ucs4_to_utf16"                   (ref u32,i32,ref i32,ref i32,ref ref _GError)ref u16
    clang function "g_ucs4_to_utf8"                    (ref u32,i32,ref i32,ref i32,ref ref _GError)ref i8
    clang function "g_unichar_to_utf8"                 (u32,ref i8)i32
    clang function "g_utf8_validate"                   (ref i8,i64,ref ref i8)i32
    clang function "g_utf8_strup"                      (ref i8,i64)ref i8
    clang function "g_utf8_strdown"                    (ref i8,i64)ref i8
    clang function "g_utf8_casefold"                   (ref i8,i64)ref i8
    const G_NORMALIZE_DEFAULT                = 0
    const G_NORMALIZE_NFD                    = 0
    const G_NORMALIZE_DEFAULT_COMPOSE        = 1
    const G_NORMALIZE_NFC                    = 1
    const G_NORMALIZE_ALL                    = 2
    const G_NORMALIZE_NFKD                   = 2
    const G_NORMALIZE_ALL_COMPOSE            = 3
    const G_NORMALIZE_NFKC                   = 3
    clang function "g_utf8_normalize"                  (ref i8,i64,i32)ref i8
    clang function "g_utf8_collate"                    (ref i8,ref i8)i32
    clang function "g_utf8_collate_key"                (ref i8,i64)ref i8
    clang function "g_utf8_collate_key_for_filename"   (ref i8,i64)ref i8
    clang function "_g_utf8_make_valid"                (ref i8)ref i8
    clang function "g_get_user_name_utf8"              ()ref i8
    clang function "g_get_real_name_utf8"              ()ref i8
    clang function "g_get_home_dir_utf8"               ()ref i8
    clang function "g_get_tmp_dir_utf8"                ()ref i8
    clang function "g_get_host_name"                   ()ref i8
    clang function "g_get_prgname"                     ()ref i8
    clang proc     "g_set_prgname"                     (ref i8)
    clang function "g_get_application_name"            ()ref i8
    clang proc     "g_set_application_name"            (ref i8)
    clang proc     "g_reload_user_special_dirs_cache"  ()
    clang function "g_get_user_data_dir"               ()ref i8
    clang function "g_get_user_config_dir"             ()ref i8
    clang function "g_get_user_cache_dir"              ()ref i8
    clang function "g_get_system_data_dirs"            ()ref ref i8
    clang function "g_win32_get_system_data_dirs_for_module" (ref clang proc())ref ref i8
    clang function "_g_win32_get_system_data_dirs"     ()ref ref i8
    clang function "g_get_system_config_dirs"          ()ref ref i8
    clang function "g_get_user_runtime_dir"            ()ref i8
    const G_USER_DIRECTORY_DESKTOP           = 0
    const G_USER_DIRECTORY_DOCUMENTS         = 1
    const G_USER_DIRECTORY_DOWNLOAD          = 2
    const G_USER_DIRECTORY_MUSIC             = 3
    const G_USER_DIRECTORY_PICTURES          = 4
    const G_USER_DIRECTORY_PUBLIC_SHARE      = 5
    const G_USER_DIRECTORY_TEMPLATES         = 6
    const G_USER_DIRECTORY_VIDEOS            = 7
    const G_USER_N_DIRECTORIES               = 8
    clang function "g_get_user_special_dir"            (i32)ref i8
    record _GDebugKey =
        var ref i8 key
        var u32 value
    end

    clang function "g_parse_debug_string"              (ref i8,ref _GDebugKey,u32)u32
    clang function "g_snprintf"                        (ref i8,u32,ref i8,...)i32
    clang function "g_vsnprintf"                       (ref i8,u32,ref i8,ref i8)i32
    clang proc     "g_nullify_pointer"                 (ref ref void)
    const G_FORMAT_SIZE_DEFAULT              = 0
    const G_FORMAT_SIZE_LONG_FORMAT          = 1
    const G_FORMAT_SIZE_IEC_UNITS            = 2
    clang function "g_format_size_full"                (u64,i32)ref i8
    clang function "g_format_size"                     (u64)ref i8
    clang function "g_format_size_for_display"         (i64)ref i8
    clang proc     "g_atexit"                          (ref clang proc())
    clang function "g_find_program_in_path_utf8"       (ref i8)ref i8
    clang function "g_bit_nth_lsf"                     (u32,i32)i32
    clang function "g_bit_nth_msf"                     (u32,i32)i32
    clang function "g_bit_storage"                     (u32)u32
    record _GString =
        var ref i8 str
        var u64 len$
        var u64 allocated_len
    end

    clang function "g_string_new"                      (ref i8)ref _GString
    clang function "g_string_new_len"                  (ref i8,i64)ref _GString
    clang function "g_string_sized_new"                (u64)ref _GString
    clang function "g_string_free"                     (ref _GString,i32)ref i8
    clang function "g_string_free_to_bytes"            (ref _GString)ref _GBytes
    clang function "g_string_equal"                    (ref _GString,ref _GString)i32
    clang function "g_string_hash"                     (ref _GString)u32
    clang function "g_string_assign"                   (ref _GString,ref i8)ref _GString
    clang function "g_string_truncate"                 (ref _GString,u64)ref _GString
    clang function "g_string_set_size"                 (ref _GString,u64)ref _GString
    clang function "g_string_insert_len"               (ref _GString,i64,ref i8,i64)ref _GString
    clang function "g_string_append"                   (ref _GString,ref i8)ref _GString
    clang function "g_string_append_len"               (ref _GString,ref i8,i64)ref _GString
    clang function "g_string_append_c"                 (ref _GString,i8)ref _GString
    clang function "g_string_append_unichar"           (ref _GString,u32)ref _GString
    clang function "g_string_prepend"                  (ref _GString,ref i8)ref _GString
    clang function "g_string_prepend_c"                (ref _GString,i8)ref _GString
    clang function "g_string_prepend_unichar"          (ref _GString,u32)ref _GString
    clang function "g_string_prepend_len"              (ref _GString,ref i8,i64)ref _GString
    clang function "g_string_insert"                   (ref _GString,i64,ref i8)ref _GString
    clang function "g_string_insert_c"                 (ref _GString,i64,i8)ref _GString
    clang function "g_string_insert_unichar"           (ref _GString,i64,u32)ref _GString
    clang function "g_string_overwrite"                (ref _GString,u64,ref i8)ref _GString
    clang function "g_string_overwrite_len"            (ref _GString,u64,ref i8,i64)ref _GString
    clang function "g_string_erase"                    (ref _GString,i64,i64)ref _GString
    clang function "g_string_ascii_down"               (ref _GString)ref _GString
    clang function "g_string_ascii_up"                 (ref _GString)ref _GString
    clang proc     "g_string_vprintf"                  (ref _GString,ref i8,ref i8)
    clang proc     "g_string_printf"                   (ref _GString,ref i8,...)
    clang proc     "g_string_append_vprintf"           (ref _GString,ref i8,ref i8)
    clang proc     "g_string_append_printf"            (ref _GString,ref i8,...)
    clang function "g_string_append_uri_escaped"       (ref _GString,ref i8,ref i8,i32)ref _GString
    clang function "g_string_append_c_inline"          (ref _GString,i8)ref _GString
    clang function "g_string_down"                     (ref _GString)ref _GString
    clang function "g_string_up"                       (ref _GString)ref _GString
    record _GIOChannel =
        var i32 ref_count
        var ref _GIOFuncs funcs
        var ref i8 encoding
        var ref _GIConv read_cd
        var ref _GIConv write_cd
        var ref i8 line_term
        var u32 line_term_len
        var u64 buf_size
        var ref _GString read_buf
        var ref _GString encoded_read_buf
        var ref _GString write_buf
        var [6]i8 partial_write_buf
        var u32 use_buffer
        var u32 do_encode
        var u32 close_on_unref
        var u32 is_readable
        var u32 is_writeable
        var u32 is_seekable
        var ref void reserved1
        var ref void reserved2
    end

    record _GIOFuncs =
        var ref clang function(ref _GIOChannel,ref i8,u64,ref u64,ref ref _GError)i32 io_read
        var ref clang function(ref _GIOChannel,ref i8,u64,ref u64,ref ref _GError)i32 io_write
        var ref clang function(ref _GIOChannel,i64,i32,ref ref _GError)i32 io_seek
        var ref clang function(ref _GIOChannel,ref ref _GError)i32 io_close
        var ref clang function(ref _GIOChannel,i32)ref _GSource io_create_watch
        var ref clang proc(ref _GIOChannel) io_free
        var ref clang function(ref _GIOChannel,i32,ref ref _GError)i32 io_set_flags
        var ref clang function(ref _GIOChannel)i32 io_get_flags
    end

    const G_IO_ERROR_NONE                    = 0
    const G_IO_ERROR_AGAIN                   = 1
    const G_IO_ERROR_INVAL                   = 2
    const G_IO_ERROR_UNKNOWN                 = 3
    const G_IO_CHANNEL_ERROR_FBIG            = 0
    const G_IO_CHANNEL_ERROR_INVAL           = 1
    const G_IO_CHANNEL_ERROR_IO              = 2
    const G_IO_CHANNEL_ERROR_ISDIR           = 3
    const G_IO_CHANNEL_ERROR_NOSPC           = 4
    const G_IO_CHANNEL_ERROR_NXIO            = 5
    const G_IO_CHANNEL_ERROR_OVERFLOW        = 6
    const G_IO_CHANNEL_ERROR_PIPE            = 7
    const G_IO_CHANNEL_ERROR_FAILED          = 8
    const G_IO_STATUS_ERROR                  = 0
    const G_IO_STATUS_NORMAL                 = 1
    const G_IO_STATUS_EOF                    = 2
    const G_IO_STATUS_AGAIN                  = 3
    const G_SEEK_CUR                         = 0
    const G_SEEK_SET                         = 1
    const G_SEEK_END                         = 2
    const G_IO_IN                            = 1
    const G_IO_OUT                           = 4
    const G_IO_PRI                           = 2
    const G_IO_ERR                           = 8
    const G_IO_HUP                           = 16
    const G_IO_NVAL                          = 32
    const G_IO_FLAG_APPEND                   = 1
    const G_IO_FLAG_NONBLOCK                 = 2
    const G_IO_FLAG_IS_READABLE              = 4
    const G_IO_FLAG_IS_WRITABLE              = 8
    const G_IO_FLAG_IS_SEEKABLE              = 16
    const G_IO_FLAG_MASK                     = 31
    const G_IO_FLAG_GET_MASK                 = 31
    const G_IO_FLAG_SET_MASK                 = 3
    clang proc     "g_io_channel_init"                 (ref _GIOChannel)
    clang function "g_io_channel_ref"                  (ref _GIOChannel)ref _GIOChannel
    clang proc     "g_io_channel_unref"                (ref _GIOChannel)
    clang function "g_io_channel_read"                 (ref _GIOChannel,ref i8,u64,ref u64)i32
    clang function "g_io_channel_write"                (ref _GIOChannel,ref i8,u64,ref u64)i32
    clang function "g_io_channel_seek"                 (ref _GIOChannel,i64,i32)i32
    clang proc     "g_io_channel_close"                (ref _GIOChannel)
    clang function "g_io_channel_shutdown"             (ref _GIOChannel,i32,ref ref _GError)i32
    clang function "g_io_add_watch_full"               (ref _GIOChannel,i32,i32,ref clang function(ref _GIOChannel,i32,ref void)i32,ref void,ref clang proc(ref void))u32
    clang function "g_io_create_watch"                 (ref _GIOChannel,i32)ref _GSource
    clang function "g_io_add_watch"                    (ref _GIOChannel,i32,ref clang function(ref _GIOChannel,i32,ref void)i32,ref void)u32
    clang proc     "g_io_channel_set_buffer_size"      (ref _GIOChannel,u64)
    clang function "g_io_channel_get_buffer_size"      (ref _GIOChannel)u64
    clang function "g_io_channel_get_buffer_condition" (ref _GIOChannel)i32
    clang function "g_io_channel_set_flags"            (ref _GIOChannel,i32,ref ref _GError)i32
    clang function "g_io_channel_get_flags"            (ref _GIOChannel)i32
    clang proc     "g_io_channel_set_line_term"        (ref _GIOChannel,ref i8,i32)
    clang function "g_io_channel_get_line_term"        (ref _GIOChannel,ref i32)ref i8
    clang proc     "g_io_channel_set_buffered"         (ref _GIOChannel,i32)
    clang function "g_io_channel_get_buffered"         (ref _GIOChannel)i32
    clang function "g_io_channel_set_encoding"         (ref _GIOChannel,ref i8,ref ref _GError)i32
    clang function "g_io_channel_get_encoding"         (ref _GIOChannel)ref i8
    clang proc     "g_io_channel_set_close_on_unref"   (ref _GIOChannel,i32)
    clang function "g_io_channel_get_close_on_unref"   (ref _GIOChannel)i32
    clang function "g_io_channel_flush"                (ref _GIOChannel,ref ref _GError)i32
    clang function "g_io_channel_read_line"            (ref _GIOChannel,ref ref i8,ref u64,ref u64,ref ref _GError)i32
    clang function "g_io_channel_read_line_string"     (ref _GIOChannel,ref _GString,ref u64,ref ref _GError)i32
    clang function "g_io_channel_read_to_end"          (ref _GIOChannel,ref ref i8,ref u64,ref ref _GError)i32
    clang function "g_io_channel_read_chars"           (ref _GIOChannel,ref i8,u64,ref u64,ref ref _GError)i32
    clang function "g_io_channel_read_unichar"         (ref _GIOChannel,ref u32,ref ref _GError)i32
    clang function "g_io_channel_write_chars"          (ref _GIOChannel,ref i8,i64,ref u64,ref ref _GError)i32
    clang function "g_io_channel_write_unichar"        (ref _GIOChannel,u32,ref ref _GError)i32
    clang function "g_io_channel_seek_position"        (ref _GIOChannel,i64,i32,ref ref _GError)i32
    clang function "g_io_channel_new_file_utf8"        (ref i8,ref i8,ref ref _GError)ref _GIOChannel
    clang function "g_io_channel_error_quark"          ()u32
    clang function "g_io_channel_error_from_errno"     (i32)i32
    clang function "g_io_channel_unix_new"             (i32)ref _GIOChannel
    clang function "g_io_channel_unix_get_fd"          (ref _GIOChannel)i32
    _GSourceFuncs g_io_watch_funcs
    clang proc     "g_io_channel_win32_make_pollfd"    (ref _GIOChannel,i32,ref _GPollFD)
    clang function "g_io_channel_win32_poll"           (ref _GPollFD,i32,i32)i32
    clang function "g_io_channel_win32_new_messages"   (u64)ref _GIOChannel
    clang function "g_io_channel_win32_new_fd"         (i32)ref _GIOChannel
    clang function "g_io_channel_win32_get_fd"         (ref _GIOChannel)i32
    clang function "g_io_channel_win32_new_socket"     (i32)ref _GIOChannel
    const G_KEY_FILE_ERROR_UNKNOWN_ENCODING  = 0
    const G_KEY_FILE_ERROR_PARSE             = 1
    const G_KEY_FILE_ERROR_NOT_FOUND         = 2
    const G_KEY_FILE_ERROR_KEY_NOT_FOUND     = 3
    const G_KEY_FILE_ERROR_GROUP_NOT_FOUND   = 4
    const G_KEY_FILE_ERROR_INVALID_VALUE     = 5
    clang function "g_key_file_error_quark"            ()u32
    record _GKeyFile =
        var int dummy    !empty record
    end

    const G_KEY_FILE_NONE                    = 0
    const G_KEY_FILE_KEEP_COMMENTS           = 1
    const G_KEY_FILE_KEEP_TRANSLATIONS       = 2
    clang function "g_key_file_new"                    ()ref _GKeyFile
    clang function "g_key_file_ref"                    (ref _GKeyFile)ref _GKeyFile
    clang proc     "g_key_file_unref"                  (ref _GKeyFile)
    clang proc     "g_key_file_free"                   (ref _GKeyFile)
    clang proc     "g_key_file_set_list_separator"     (ref _GKeyFile,i8)
    clang function "g_key_file_load_from_file"         (ref _GKeyFile,ref i8,i32,ref ref _GError)i32
    clang function "g_key_file_load_from_data"         (ref _GKeyFile,ref i8,u64,i32,ref ref _GError)i32
    clang function "g_key_file_load_from_dirs"         (ref _GKeyFile,ref i8,ref ref i8,ref ref i8,i32,ref ref _GError)i32
    clang function "g_key_file_load_from_data_dirs"    (ref _GKeyFile,ref i8,ref ref i8,i32,ref ref _GError)i32
    clang function "g_key_file_to_data"                (ref _GKeyFile,ref u64,ref ref _GError)ref i8
    clang function "g_key_file_get_start_group"        (ref _GKeyFile)ref i8
    clang function "g_key_file_get_groups"             (ref _GKeyFile,ref u64)ref ref i8
    clang function "g_key_file_get_keys"               (ref _GKeyFile,ref i8,ref u64,ref ref _GError)ref ref i8
    clang function "g_key_file_has_group"              (ref _GKeyFile,ref i8)i32
    clang function "g_key_file_has_key"                (ref _GKeyFile,ref i8,ref i8,ref ref _GError)i32
    clang function "g_key_file_get_value"              (ref _GKeyFile,ref i8,ref i8,ref ref _GError)ref i8
    clang proc     "g_key_file_set_value"              (ref _GKeyFile,ref i8,ref i8,ref i8)
    clang function "g_key_file_get_string"             (ref _GKeyFile,ref i8,ref i8,ref ref _GError)ref i8
    clang proc     "g_key_file_set_string"             (ref _GKeyFile,ref i8,ref i8,ref i8)
    clang function "g_key_file_get_locale_string"      (ref _GKeyFile,ref i8,ref i8,ref i8,ref ref _GError)ref i8
    clang proc     "g_key_file_set_locale_string"      (ref _GKeyFile,ref i8,ref i8,ref i8,ref i8)
    clang function "g_key_file_get_boolean"            (ref _GKeyFile,ref i8,ref i8,ref ref _GError)i32
    clang proc     "g_key_file_set_boolean"            (ref _GKeyFile,ref i8,ref i8,i32)
    clang function "g_key_file_get_integer"            (ref _GKeyFile,ref i8,ref i8,ref ref _GError)i32
    clang proc     "g_key_file_set_integer"            (ref _GKeyFile,ref i8,ref i8,i32)
    clang function "g_key_file_get_int64"              (ref _GKeyFile,ref i8,ref i8,ref ref _GError)i64
    clang proc     "g_key_file_set_int64"              (ref _GKeyFile,ref i8,ref i8,i64)
    clang function "g_key_file_get_uint64"             (ref _GKeyFile,ref i8,ref i8,ref ref _GError)u64
    clang proc     "g_key_file_set_uint64"             (ref _GKeyFile,ref i8,ref i8,u64)
    clang function "g_key_file_get_double"             (ref _GKeyFile,ref i8,ref i8,ref ref _GError)r64
    clang proc     "g_key_file_set_double"             (ref _GKeyFile,ref i8,ref i8,r64)
    clang function "g_key_file_get_string_list"        (ref _GKeyFile,ref i8,ref i8,ref u64,ref ref _GError)ref ref i8
    clang proc     "g_key_file_set_string_list"        (ref _GKeyFile,ref i8,ref i8,ref ref i8,u64)
    clang function "g_key_file_get_locale_string_list" (ref _GKeyFile,ref i8,ref i8,ref i8,ref u64,ref ref _GError)ref ref i8
    clang proc     "g_key_file_set_locale_string_list" (ref _GKeyFile,ref i8,ref i8,ref i8,ref ref i8,u64)
    clang function "g_key_file_get_boolean_list"       (ref _GKeyFile,ref i8,ref i8,ref u64,ref ref _GError)ref i32
    clang proc     "g_key_file_set_boolean_list"       (ref _GKeyFile,ref i8,ref i8,ref i32,u64)
    clang function "g_key_file_get_integer_list"       (ref _GKeyFile,ref i8,ref i8,ref u64,ref ref _GError)ref i32
    clang proc     "g_key_file_set_double_list"        (ref _GKeyFile,ref i8,ref i8,ref r64,u64)
    clang function "g_key_file_get_double_list"        (ref _GKeyFile,ref i8,ref i8,ref u64,ref ref _GError)ref r64
    clang proc     "g_key_file_set_integer_list"       (ref _GKeyFile,ref i8,ref i8,ref i32,u64)
    clang function "g_key_file_set_comment"            (ref _GKeyFile,ref i8,ref i8,ref i8,ref ref _GError)i32
    clang function "g_key_file_get_comment"            (ref _GKeyFile,ref i8,ref i8,ref ref _GError)ref i8
    clang function "g_key_file_remove_comment"         (ref _GKeyFile,ref i8,ref i8,ref ref _GError)i32
    clang function "g_key_file_remove_key"             (ref _GKeyFile,ref i8,ref i8,ref ref _GError)i32
    clang function "g_key_file_remove_group"           (ref _GKeyFile,ref i8,ref ref _GError)i32
    record _GMappedFile =
        var int dummy    !empty record
    end

    clang function "g_mapped_file_new"                 (ref i8,i32,ref ref _GError)ref _GMappedFile
    clang function "g_mapped_file_new_from_fd"         (i32,i32,ref ref _GError)ref _GMappedFile
    clang function "g_mapped_file_get_length"          (ref _GMappedFile)u64
    clang function "g_mapped_file_get_contents"        (ref _GMappedFile)ref i8
    clang function "g_mapped_file_get_bytes"           (ref _GMappedFile)ref _GBytes
    clang function "g_mapped_file_ref"                 (ref _GMappedFile)ref _GMappedFile
    clang proc     "g_mapped_file_unref"               (ref _GMappedFile)
    clang proc     "g_mapped_file_free"                (ref _GMappedFile)
    const G_MARKUP_ERROR_BAD_UTF8            = 0
    const G_MARKUP_ERROR_EMPTY               = 1
    const G_MARKUP_ERROR_PARSE               = 2
    const G_MARKUP_ERROR_UNKNOWN_ELEMENT     = 3
    const G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE   = 4
    const G_MARKUP_ERROR_INVALID_CONTENT     = 5
    const G_MARKUP_ERROR_MISSING_ATTRIBUTE   = 6
    clang function "g_markup_error_quark"              ()u32
    const G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG = 1
    const G_MARKUP_TREAT_CDATA_AS_TEXT       = 2
    const G_MARKUP_PREFIX_ERROR_POSITION     = 4
    record _GMarkupParseContext =
        var int dummy    !empty record
    end

    record _GMarkupParser =
        var ref clang proc(ref _GMarkupParseContext,ref i8,ref ref i8,ref ref i8,ref void,ref ref _GError) start_element
        var ref clang proc(ref _GMarkupParseContext,ref i8,ref void,ref ref _GError) end_element
        var ref clang proc(ref _GMarkupParseContext,ref i8,u64,ref void,ref ref _GError) text
        var ref clang proc(ref _GMarkupParseContext,ref i8,u64,ref void,ref ref _GError) passthrough
        var ref clang proc(ref _GMarkupParseContext,ref _GError,ref void) error
    end

    clang function "g_markup_parse_context_new"        (ref _GMarkupParser,i32,ref void,ref clang proc(ref void))ref _GMarkupParseContext
    clang proc     "g_markup_parse_context_free"       (ref _GMarkupParseContext)
    clang function "g_markup_parse_context_parse"      (ref _GMarkupParseContext,ref i8,i64,ref ref _GError)i32
    clang proc     "g_markup_parse_context_push"       (ref _GMarkupParseContext,ref _GMarkupParser,ref void)
    clang function "g_markup_parse_context_pop"        (ref _GMarkupParseContext)ref void
    clang function "g_markup_parse_context_end_parse"  (ref _GMarkupParseContext,ref ref _GError)i32
    clang function "g_markup_parse_context_get_element" (ref _GMarkupParseContext)ref i8
    clang function "g_markup_parse_context_get_element_stack" (ref _GMarkupParseContext)ref _GSList
    clang proc     "g_markup_parse_context_get_position" (ref _GMarkupParseContext,ref i32,ref i32)
    clang function "g_markup_parse_context_get_user_data" (ref _GMarkupParseContext)ref void
    clang function "g_markup_escape_text"              (ref i8,i64)ref i8
    clang function "g_markup_printf_escaped"           (ref i8,...)ref i8
    clang function "g_markup_vprintf_escaped"          (ref i8,ref i8)ref i8
    const G_MARKUP_COLLECT_INVALID           = 0
    const G_MARKUP_COLLECT_STRING            = 1
    const G_MARKUP_COLLECT_STRDUP            = 2
    const G_MARKUP_COLLECT_BOOLEAN           = 3
    const G_MARKUP_COLLECT_TRISTATE          = 4
    const G_MARKUP_COLLECT_OPTIONAL          = 65536
    clang function "g_markup_collect_attributes"       (ref i8,ref ref i8,ref ref i8,ref ref _GError,i32,ref i8,...)i32
    clang function "g_printf_string_upper_bound"       (ref i8,ref i8)u64
    const G_LOG_FLAG_RECURSION               = 1
    const G_LOG_FLAG_FATAL                   = 2
    const G_LOG_LEVEL_ERROR                  = 4
    const G_LOG_LEVEL_CRITICAL               = 8
    const G_LOG_LEVEL_WARNING                = 16
    const G_LOG_LEVEL_MESSAGE                = 32
    const G_LOG_LEVEL_INFO                   = 64
    const G_LOG_LEVEL_DEBUG                  = 128
    const G_LOG_LEVEL_MASK                   = -4
    clang function "g_log_set_handler"                 (ref i8,i32,ref clang proc(ref i8,i32,ref i8,ref void),ref void)u32
    clang proc     "g_log_remove_handler"              (ref i8,u32)
    clang proc     "g_log_default_handler"             (ref i8,i32,ref i8,ref void)
    clang function "g_log_set_default_handler"         (ref clang proc(ref i8,i32,ref i8,ref void),ref void)ref clang proc(ref i8,i32,ref i8,ref void)
    clang proc     "g_log"                             (ref i8,i32,ref i8,...)
    clang proc     "g_logv"                            (ref i8,i32,ref i8,ref i8)
    clang function "g_log_set_fatal_mask"              (ref i8,i32)i32
    clang function "g_log_set_always_fatal"            (i32)i32
    clang proc     "_g_log_fallback_handler"           (ref i8,i32,ref i8,ref void)
    clang proc     "g_return_if_fail_warning"          (ref i8,ref i8,ref i8)
    clang proc     "g_warn_message"                    (ref i8,ref i8,i32,ref i8,ref i8)
    clang proc     "g_assert_warning"                  (ref i8,ref i8,i32,ref i8,ref i8)
    clang proc     "g_print"                           (ref i8,...)
    clang function "g_set_print_handler"               (ref clang proc(ref i8))ref clang proc(ref i8)
    clang proc     "g_printerr"                        (ref i8,...)
    clang function "g_set_printerr_handler"            (ref clang proc(ref i8))ref clang proc(ref i8)
    record _GOptionContext =
        var int dummy    !empty record
    end

    record _GOptionGroup =
        var int dummy    !empty record
    end

    record _GOptionEntry =
        var ref i8 long_name
        var i8 short_name
        var i32 flags
        var i32 arg
        var ref void arg_data
        var ref i8 description
        var ref i8 arg_description
    end

    const G_OPTION_FLAG_HIDDEN               = 1
    const G_OPTION_FLAG_IN_MAIN              = 2
    const G_OPTION_FLAG_REVERSE              = 4
    const G_OPTION_FLAG_NO_ARG               = 8
    const G_OPTION_FLAG_FILENAME             = 16
    const G_OPTION_FLAG_OPTIONAL_ARG         = 32
    const G_OPTION_FLAG_NOALIAS              = 64
    const G_OPTION_ARG_NONE                  = 0
    const G_OPTION_ARG_STRING                = 1
    const G_OPTION_ARG_INT                   = 2
    const G_OPTION_ARG_CALLBACK              = 3
    const G_OPTION_ARG_FILENAME              = 4
    const G_OPTION_ARG_STRING_ARRAY          = 5
    const G_OPTION_ARG_FILENAME_ARRAY        = 6
    const G_OPTION_ARG_DOUBLE                = 7
    const G_OPTION_ARG_INT64                 = 8
    const G_OPTION_ERROR_UNKNOWN_OPTION      = 0
    const G_OPTION_ERROR_BAD_VALUE           = 1
    const G_OPTION_ERROR_FAILED              = 2
    clang function "g_option_error_quark"              ()u32
    clang function "g_option_context_new"              (ref i8)ref _GOptionContext
    clang proc     "g_option_context_set_summary"      (ref _GOptionContext,ref i8)
    clang function "g_option_context_get_summary"      (ref _GOptionContext)ref i8
    clang proc     "g_option_context_set_description"  (ref _GOptionContext,ref i8)
    clang function "g_option_context_get_description"  (ref _GOptionContext)ref i8
    clang proc     "g_option_context_free"             (ref _GOptionContext)
    clang proc     "g_option_context_set_help_enabled" (ref _GOptionContext,i32)
    clang function "g_option_context_get_help_enabled" (ref _GOptionContext)i32
    clang proc     "g_option_context_set_ignore_unknown_options" (ref _GOptionContext,i32)
    clang function "g_option_context_get_ignore_unknown_options" (ref _GOptionContext)i32
    clang proc     "g_option_context_add_main_entries" (ref _GOptionContext,ref _GOptionEntry,ref i8)
    clang function "g_option_context_parse"            (ref _GOptionContext,ref i32,ref ref ref i8,ref ref _GError)i32
    clang proc     "g_option_context_set_translate_func" (ref _GOptionContext,ref clang function(ref i8,ref void)ref i8,ref void,ref clang proc(ref void))
    clang proc     "g_option_context_set_translation_domain" (ref _GOptionContext,ref i8)
    clang proc     "g_option_context_add_group"        (ref _GOptionContext,ref _GOptionGroup)
    clang proc     "g_option_context_set_main_group"   (ref _GOptionContext,ref _GOptionGroup)
    clang function "g_option_context_get_main_group"   (ref _GOptionContext)ref _GOptionGroup
    clang function "g_option_context_get_help"         (ref _GOptionContext,i32,ref _GOptionGroup)ref i8
    clang function "g_option_group_new"                (ref i8,ref i8,ref i8,ref void,ref clang proc(ref void))ref _GOptionGroup
    clang proc     "g_option_group_set_parse_hooks"    (ref _GOptionGroup,ref clang function(ref _GOptionContext,ref _GOptionGroup,ref void,ref ref _GError)i32,ref clang function(ref _GOptionContext,ref _GOptionGroup,ref void,ref ref _GError)i32)
    clang proc     "g_option_group_set_error_hook"     (ref _GOptionGroup,ref clang proc(ref _GOptionContext,ref _GOptionGroup,ref void,ref ref _GError))
    clang proc     "g_option_group_free"               (ref _GOptionGroup)
    clang proc     "g_option_group_add_entries"        (ref _GOptionGroup,ref _GOptionEntry)
    clang proc     "g_option_group_set_translate_func" (ref _GOptionGroup,ref clang function(ref i8,ref void)ref i8,ref void,ref clang proc(ref void))
    clang proc     "g_option_group_set_translation_domain" (ref _GOptionGroup,ref i8)
    record _GPatternSpec =
        var int dummy    !empty record
    end

    clang function "g_pattern_spec_new"                (ref i8)ref _GPatternSpec
    clang proc     "g_pattern_spec_free"               (ref _GPatternSpec)
    clang function "g_pattern_spec_equal"              (ref _GPatternSpec,ref _GPatternSpec)i32
    clang function "g_pattern_match"                   (ref _GPatternSpec,u32,ref i8,ref i8)i32
    clang function "g_pattern_match_string"            (ref _GPatternSpec,ref i8)i32
    clang function "g_pattern_match_simple"            (ref i8,ref i8)i32
    clang function "g_spaced_primes_closest"           (u32)u32
    clang proc     "g_qsort_with_data"                 (ref void,i32,u64,ref clang function(ref void,ref void,ref void)i32,ref void)
    record _GQueue =
        var ref _GList head
        var ref _GList tail
        var u32 length
    end

    clang function "g_queue_new"                       ()ref _GQueue
    clang proc     "g_queue_free"                      (ref _GQueue)
    clang proc     "g_queue_free_full"                 (ref _GQueue,ref clang proc(ref void))
    clang proc     "g_queue_init"                      (ref _GQueue)
    clang proc     "g_queue_clear"                     (ref _GQueue)
    clang function "g_queue_is_empty"                  (ref _GQueue)i32
    clang function "g_queue_get_length"                (ref _GQueue)u32
    clang proc     "g_queue_reverse"                   (ref _GQueue)
    clang function "g_queue_copy"                      (ref _GQueue)ref _GQueue
    clang proc     "g_queue_foreach"                   (ref _GQueue,ref clang proc(ref void,ref void),ref void)
    clang function "g_queue_find"                      (ref _GQueue,ref void)ref _GList
    clang function "g_queue_find_custom"               (ref _GQueue,ref void,ref clang function(ref void,ref void)i32)ref _GList
    clang proc     "g_queue_sort"                      (ref _GQueue,ref clang function(ref void,ref void,ref void)i32,ref void)
    clang proc     "g_queue_push_head"                 (ref _GQueue,ref void)
    clang proc     "g_queue_push_tail"                 (ref _GQueue,ref void)
    clang proc     "g_queue_push_nth"                  (ref _GQueue,ref void,i32)
    clang function "g_queue_pop_head"                  (ref _GQueue)ref void
    clang function "g_queue_pop_tail"                  (ref _GQueue)ref void
    clang function "g_queue_pop_nth"                   (ref _GQueue,u32)ref void
    clang function "g_queue_peek_head"                 (ref _GQueue)ref void
    clang function "g_queue_peek_tail"                 (ref _GQueue)ref void
    clang function "g_queue_peek_nth"                  (ref _GQueue,u32)ref void
    clang function "g_queue_index"                     (ref _GQueue,ref void)i32
    clang function "g_queue_remove"                    (ref _GQueue,ref void)i32
    clang function "g_queue_remove_all"                (ref _GQueue,ref void)u32
    clang proc     "g_queue_insert_before"             (ref _GQueue,ref _GList,ref void)
    clang proc     "g_queue_insert_after"              (ref _GQueue,ref _GList,ref void)
    clang proc     "g_queue_insert_sorted"             (ref _GQueue,ref void,ref clang function(ref void,ref void,ref void)i32,ref void)
    clang proc     "g_queue_push_head_link"            (ref _GQueue,ref _GList)
    clang proc     "g_queue_push_tail_link"            (ref _GQueue,ref _GList)
    clang proc     "g_queue_push_nth_link"             (ref _GQueue,i32,ref _GList)
    clang function "g_queue_pop_head_link"             (ref _GQueue)ref _GList
    clang function "g_queue_pop_tail_link"             (ref _GQueue)ref _GList
    clang function "g_queue_pop_nth_link"              (ref _GQueue,u32)ref _GList
    clang function "g_queue_peek_head_link"            (ref _GQueue)ref _GList
    clang function "g_queue_peek_tail_link"            (ref _GQueue)ref _GList
    clang function "g_queue_peek_nth_link"             (ref _GQueue,u32)ref _GList
    clang function "g_queue_link_index"                (ref _GQueue,ref _GList)i32
    clang proc     "g_queue_unlink"                    (ref _GQueue,ref _GList)
    clang proc     "g_queue_delete_link"               (ref _GQueue,ref _GList)
    record _GRand =
        var int dummy    !empty record
    end

    clang function "g_rand_new_with_seed"              (u32)ref _GRand
    clang function "g_rand_new_with_seed_array"        (ref u32,u32)ref _GRand
    clang function "g_rand_new"                        ()ref _GRand
    clang proc     "g_rand_free"                       (ref _GRand)
    clang function "g_rand_copy"                       (ref _GRand)ref _GRand
    clang proc     "g_rand_set_seed"                   (ref _GRand,u32)
    clang proc     "g_rand_set_seed_array"             (ref _GRand,ref u32,u32)
    clang function "g_rand_int"                        (ref _GRand)u32
    clang function "g_rand_int_range"                  (ref _GRand,i32,i32)i32
    clang function "g_rand_double"                     (ref _GRand)r64
    clang function "g_rand_double_range"               (ref _GRand,r64,r64)r64
    clang proc     "g_random_set_seed"                 (u32)
    clang function "g_random_int"                      ()u32
    clang function "g_random_int_range"                (i32,i32)i32
    clang function "g_random_double"                   ()r64
    clang function "g_random_double_range"             (r64,r64)r64
    const G_REGEX_ERROR_COMPILE              = 0
    const G_REGEX_ERROR_OPTIMIZE             = 1
    const G_REGEX_ERROR_REPLACE              = 2
    const G_REGEX_ERROR_MATCH                = 3
    const G_REGEX_ERROR_INTERNAL             = 4
    const G_REGEX_ERROR_STRAY_BACKSLASH      = 101
    const G_REGEX_ERROR_MISSING_CONTROL_CHAR = 102
    const G_REGEX_ERROR_UNRECOGNIZED_ESCAPE  = 103
    const G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER = 104
    const G_REGEX_ERROR_QUANTIFIER_TOO_BIG   = 105
    const G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS = 106
    const G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS = 107
    const G_REGEX_ERROR_RANGE_OUT_OF_ORDER   = 108
    const G_REGEX_ERROR_NOTHING_TO_REPEAT    = 109
    const G_REGEX_ERROR_UNRECOGNIZED_CHARACTER = 112
    const G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS = 113
    const G_REGEX_ERROR_UNMATCHED_PARENTHESIS = 114
    const G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE = 115
    const G_REGEX_ERROR_UNTERMINATED_COMMENT = 118
    const G_REGEX_ERROR_EXPRESSION_TOO_LARGE = 120
    const G_REGEX_ERROR_MEMORY_ERROR         = 121
    const G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND = 125
    const G_REGEX_ERROR_MALFORMED_CONDITION  = 126
    const G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES = 127
    const G_REGEX_ERROR_ASSERTION_EXPECTED   = 128
    const G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME = 130
    const G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED = 131
    const G_REGEX_ERROR_HEX_CODE_TOO_LARGE   = 134
    const G_REGEX_ERROR_INVALID_CONDITION    = 135
    const G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND = 136
    const G_REGEX_ERROR_INFINITE_LOOP        = 140
    const G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR = 142
    const G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME = 143
    const G_REGEX_ERROR_MALFORMED_PROPERTY   = 146
    const G_REGEX_ERROR_UNKNOWN_PROPERTY     = 147
    const G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG = 148
    const G_REGEX_ERROR_TOO_MANY_SUBPATTERNS = 149
    const G_REGEX_ERROR_INVALID_OCTAL_VALUE  = 151
    const G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE = 154
    const G_REGEX_ERROR_DEFINE_REPETION      = 155
    const G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS = 156
    const G_REGEX_ERROR_MISSING_BACK_REFERENCE = 157
    const G_REGEX_ERROR_INVALID_RELATIVE_REFERENCE = 158
    const G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN = 159
    const G_REGEX_ERROR_UNKNOWN_BACKTRACKING_CONTROL_VERB = 160
    const G_REGEX_ERROR_NUMBER_TOO_BIG       = 161
    const G_REGEX_ERROR_MISSING_SUBPATTERN_NAME = 162
    const G_REGEX_ERROR_MISSING_DIGIT        = 163
    const G_REGEX_ERROR_INVALID_DATA_CHARACTER = 164
    const G_REGEX_ERROR_EXTRA_SUBPATTERN_NAME = 165
    const G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED = 166
    const G_REGEX_ERROR_INVALID_CONTROL_CHAR = 168
    const G_REGEX_ERROR_MISSING_NAME         = 169
    const G_REGEX_ERROR_NOT_SUPPORTED_IN_CLASS = 171
    const G_REGEX_ERROR_TOO_MANY_FORWARD_REFERENCES = 172
    const G_REGEX_ERROR_NAME_TOO_LONG        = 175
    const G_REGEX_ERROR_CHARACTER_VALUE_TOO_LARGE = 176
    clang function "g_regex_error_quark"               ()u32
    const G_REGEX_CASELESS                   = 1
    const G_REGEX_MULTILINE                  = 2
    const G_REGEX_DOTALL                     = 4
    const G_REGEX_EXTENDED                   = 8
    const G_REGEX_ANCHORED                   = 16
    const G_REGEX_DOLLAR_ENDONLY             = 32
    const G_REGEX_UNGREEDY                   = 512
    const G_REGEX_RAW                        = 2048
    const G_REGEX_NO_AUTO_CAPTURE            = 4096
    const G_REGEX_OPTIMIZE                   = 8192
    const G_REGEX_FIRSTLINE                  = 262144
    const G_REGEX_DUPNAMES                   = 524288
    const G_REGEX_NEWLINE_CR                 = 1048576
    const G_REGEX_NEWLINE_LF                 = 2097152
    const G_REGEX_NEWLINE_CRLF               = 3145728
    const G_REGEX_NEWLINE_ANYCRLF            = 5242880
    const G_REGEX_BSR_ANYCRLF                = 8388608
    const G_REGEX_JAVASCRIPT_COMPAT          = 33554432
    const G_REGEX_MATCH_ANCHORED             = 16
    const G_REGEX_MATCH_NOTBOL               = 128
    const G_REGEX_MATCH_NOTEOL               = 256
    const G_REGEX_MATCH_NOTEMPTY             = 1024
    const G_REGEX_MATCH_PARTIAL              = 32768
    const G_REGEX_MATCH_NEWLINE_CR           = 1048576
    const G_REGEX_MATCH_NEWLINE_LF           = 2097152
    const G_REGEX_MATCH_NEWLINE_CRLF         = 3145728
    const G_REGEX_MATCH_NEWLINE_ANY          = 4194304
    const G_REGEX_MATCH_NEWLINE_ANYCRLF      = 5242880
    const G_REGEX_MATCH_BSR_ANYCRLF          = 8388608
    const G_REGEX_MATCH_BSR_ANY              = 16777216
    const G_REGEX_MATCH_PARTIAL_SOFT         = 32768
    const G_REGEX_MATCH_PARTIAL_HARD         = 134217728
    const G_REGEX_MATCH_NOTEMPTY_ATSTART     = 268435456
    record _GRegex =
        var int dummy    !empty record
    end

    record _GMatchInfo =
        var int dummy    !empty record
    end

    clang function "g_regex_new"                       (ref i8,i32,i32,ref ref _GError)ref _GRegex
    clang function "g_regex_ref"                       (ref _GRegex)ref _GRegex
    clang proc     "g_regex_unref"                     (ref _GRegex)
    clang function "g_regex_get_pattern"               (ref _GRegex)ref i8
    clang function "g_regex_get_max_backref"           (ref _GRegex)i32
    clang function "g_regex_get_capture_count"         (ref _GRegex)i32
    clang function "g_regex_get_has_cr_or_lf"          (ref _GRegex)i32
    clang function "g_regex_get_string_number"         (ref _GRegex,ref i8)i32
    clang function "g_regex_escape_string"             (ref i8,i32)ref i8
    clang function "g_regex_escape_nul"                (ref i8,i32)ref i8
    clang function "g_regex_get_compile_flags"         (ref _GRegex)i32
    clang function "g_regex_get_match_flags"           (ref _GRegex)i32
    clang function "g_regex_match_simple"              (ref i8,ref i8,i32,i32)i32
    clang function "g_regex_match"                     (ref _GRegex,ref i8,i32,ref ref _GMatchInfo)i32
    clang function "g_regex_match_full"                (ref _GRegex,ref i8,i64,i32,i32,ref ref _GMatchInfo,ref ref _GError)i32
    clang function "g_regex_match_all"                 (ref _GRegex,ref i8,i32,ref ref _GMatchInfo)i32
    clang function "g_regex_match_all_full"            (ref _GRegex,ref i8,i64,i32,i32,ref ref _GMatchInfo,ref ref _GError)i32
    clang function "g_regex_split_simple"              (ref i8,ref i8,i32,i32)ref ref i8
    clang function "g_regex_split"                     (ref _GRegex,ref i8,i32)ref ref i8
    clang function "g_regex_split_full"                (ref _GRegex,ref i8,i64,i32,i32,i32,ref ref _GError)ref ref i8
    clang function "g_regex_replace"                   (ref _GRegex,ref i8,i64,i32,ref i8,i32,ref ref _GError)ref i8
    clang function "g_regex_replace_literal"           (ref _GRegex,ref i8,i64,i32,ref i8,i32,ref ref _GError)ref i8
    clang function "g_regex_replace_eval"              (ref _GRegex,ref i8,i64,i32,i32,ref clang function(ref _GMatchInfo,ref _GString,ref void)i32,ref void,ref ref _GError)ref i8
    clang function "g_regex_check_replacement"         (ref i8,ref i32,ref ref _GError)i32
    clang function "g_match_info_get_regex"            (ref _GMatchInfo)ref _GRegex
    clang function "g_match_info_get_string"           (ref _GMatchInfo)ref i8
    clang function "g_match_info_ref"                  (ref _GMatchInfo)ref _GMatchInfo
    clang proc     "g_match_info_unref"                (ref _GMatchInfo)
    clang proc     "g_match_info_free"                 (ref _GMatchInfo)
    clang function "g_match_info_next"                 (ref _GMatchInfo,ref ref _GError)i32
    clang function "g_match_info_matches"              (ref _GMatchInfo)i32
    clang function "g_match_info_get_match_count"      (ref _GMatchInfo)i32
    clang function "g_match_info_is_partial_match"     (ref _GMatchInfo)i32
    clang function "g_match_info_expand_references"    (ref _GMatchInfo,ref i8,ref ref _GError)ref i8
    clang function "g_match_info_fetch"                (ref _GMatchInfo,i32)ref i8
    clang function "g_match_info_fetch_pos"            (ref _GMatchInfo,i32,ref i32,ref i32)i32
    clang function "g_match_info_fetch_named"          (ref _GMatchInfo,ref i8)ref i8
    clang function "g_match_info_fetch_named_pos"      (ref _GMatchInfo,ref i8,ref i32,ref i32)i32
    clang function "g_match_info_fetch_all"            (ref _GMatchInfo)ref ref i8
    record _GScanner =
        var ref void user_data
        var u32 max_parse_errors
        var u32 parse_errors
        var ref i8 input_name
        var ref _GData qdata
        var ref _GScannerConfig config
        var i32 token
        var _GTokenValue value
        var u32 line
        var u32 position
        var i32 next_token
        var _GTokenValue next_value
        var u32 next_line
        var u32 next_position
        var ref _GHashTable symbol_table
        var i32 input_fd
        var ref i8 text
        var ref i8 text_end
        var ref i8 buffer
        var u32 scope_id
        var ref clang proc(ref _GScanner,ref i8,i32) msg_handler
    end

    record _GScannerConfig =
        var ref i8 cset_skip_characters
        var ref i8 cset_identifier_first
        var ref i8 cset_identifier_nth
        var ref i8 cpair_comment_single
        var u32 case_sensitive
        var u32 skip_comment_multi
        var u32 skip_comment_single
        var u32 scan_comment_multi
        var u32 scan_identifier
        var u32 scan_identifier_1char
        var u32 scan_identifier_NULL
        var u32 scan_symbols
        var u32 scan_binary
        var u32 scan_octal
        var u32 scan_float
        var u32 scan_hex
        var u32 scan_hex_dollar
        var u32 scan_string_sq
        var u32 scan_string_dq
        var u32 numbers_2_int
        var u32 int_2_float
        var u32 identifier_2_string
        var u32 char_2_token
        var u32 symbol_2_token
        var u32 scope_0_fallback
        var u32 store_int64
        var u32 padding_dummy
    end

    record _GTokenValue =
        var ref void v_symbol
        var ref i8 v_identifier
        var u32 v_binary
        var u32 v_octal
        var u32 v_int
        var u64 v_int64
        var r64 v_float
        var u32 v_hex
        var ref i8 v_string
        var ref i8 v_comment
        var byte v_char
        var u32 v_error
    end

    const G_ERR_UNKNOWN                      = 0
    const G_ERR_UNEXP_EOF                    = 1
    const G_ERR_UNEXP_EOF_IN_STRING          = 2
    const G_ERR_UNEXP_EOF_IN_COMMENT         = 3
    const G_ERR_NON_DIGIT_IN_CONST           = 4
    const G_ERR_DIGIT_RADIX                  = 5
    const G_ERR_FLOAT_RADIX                  = 6
    const G_ERR_FLOAT_MALFORMED              = 7
    const G_TOKEN_EOF                        = 0
    const G_TOKEN_LEFT_PAREN                 = 40
    const G_TOKEN_RIGHT_PAREN                = 41
    const G_TOKEN_LEFT_CURLY                 = 123
    const G_TOKEN_RIGHT_CURLY                = 125
    const G_TOKEN_LEFT_BRACE                 = 91
    const G_TOKEN_RIGHT_BRACE                = 93
    const G_TOKEN_EQUAL_SIGN                 = 61
    const G_TOKEN_COMMA                      = 44
    const G_TOKEN_NONE                       = 256
    const G_TOKEN_ERROR                      = 257
    const G_TOKEN_CHAR                       = 258
    const G_TOKEN_BINARY                     = 259
    const G_TOKEN_OCTAL                      = 260
    const G_TOKEN_INT                        = 261
    const G_TOKEN_HEX                        = 262
    const G_TOKEN_FLOAT                      = 263
    const G_TOKEN_STRING                     = 264
    const G_TOKEN_SYMBOL                     = 265
    const G_TOKEN_IDENTIFIER                 = 266
    const G_TOKEN_IDENTIFIER_NULL            = 267
    const G_TOKEN_COMMENT_SINGLE             = 268
    const G_TOKEN_COMMENT_MULTI              = 269
    const G_TOKEN_LAST                       = 270
    clang function "g_scanner_new"                     (ref _GScannerConfig)ref _GScanner
    clang proc     "g_scanner_destroy"                 (ref _GScanner)
    clang proc     "g_scanner_input_file"              (ref _GScanner,i32)
    clang proc     "g_scanner_sync_file_offset"        (ref _GScanner)
    clang proc     "g_scanner_input_text"              (ref _GScanner,ref i8,u32)
    clang function "g_scanner_get_next_token"          (ref _GScanner)i32
    clang function "g_scanner_peek_next_token"         (ref _GScanner)i32
    clang function "g_scanner_cur_token"               (ref _GScanner)i32
    clang function "g_scanner_cur_value"               (ref _GScanner)_GTokenValue
    clang function "g_scanner_cur_line"                (ref _GScanner)u32
    clang function "g_scanner_cur_position"            (ref _GScanner)u32
    clang function "g_scanner_eof"                     (ref _GScanner)i32
    clang function "g_scanner_set_scope"               (ref _GScanner,u32)u32
    clang proc     "g_scanner_scope_add_symbol"        (ref _GScanner,u32,ref i8,ref void)
    clang proc     "g_scanner_scope_remove_symbol"     (ref _GScanner,u32,ref i8)
    clang function "g_scanner_scope_lookup_symbol"     (ref _GScanner,u32,ref i8)ref void
    clang proc     "g_scanner_scope_foreach_symbol"    (ref _GScanner,u32,ref clang proc(ref void,ref void,ref void),ref void)
    clang function "g_scanner_lookup_symbol"           (ref _GScanner,ref i8)ref void
    clang proc     "g_scanner_unexp_token"             (ref _GScanner,i32,ref i8,ref i8,ref i8,ref i8,i32)
    clang proc     "g_scanner_error"                   (ref _GScanner,ref i8,...)
    clang proc     "g_scanner_warn"                    (ref _GScanner,ref i8,...)
    record _GSequence =
        var int dummy    !empty record
    end

    record _GSequenceNode =
        var int dummy    !empty record
    end

    clang function "g_sequence_new"                    (ref clang proc(ref void))ref _GSequence
    clang proc     "g_sequence_free"                   (ref _GSequence)
    clang function "g_sequence_get_length"             (ref _GSequence)i32
    clang proc     "g_sequence_foreach"                (ref _GSequence,ref clang proc(ref void,ref void),ref void)
    clang proc     "g_sequence_foreach_range"          (ref _GSequenceNode,ref _GSequenceNode,ref clang proc(ref void,ref void),ref void)
    clang proc     "g_sequence_sort"                   (ref _GSequence,ref clang function(ref void,ref void,ref void)i32,ref void)
    clang proc     "g_sequence_sort_iter"              (ref _GSequence,ref clang function(ref _GSequenceNode,ref _GSequenceNode,ref void)i32,ref void)
    clang function "g_sequence_get_begin_iter"         (ref _GSequence)ref _GSequenceNode
    clang function "g_sequence_get_end_iter"           (ref _GSequence)ref _GSequenceNode
    clang function "g_sequence_get_iter_at_pos"        (ref _GSequence,i32)ref _GSequenceNode
    clang function "g_sequence_append"                 (ref _GSequence,ref void)ref _GSequenceNode
    clang function "g_sequence_prepend"                (ref _GSequence,ref void)ref _GSequenceNode
    clang function "g_sequence_insert_before"          (ref _GSequenceNode,ref void)ref _GSequenceNode
    clang proc     "g_sequence_move"                   (ref _GSequenceNode,ref _GSequenceNode)
    clang proc     "g_sequence_swap"                   (ref _GSequenceNode,ref _GSequenceNode)
    clang function "g_sequence_insert_sorted"          (ref _GSequence,ref void,ref clang function(ref void,ref void,ref void)i32,ref void)ref _GSequenceNode
    clang function "g_sequence_insert_sorted_iter"     (ref _GSequence,ref void,ref clang function(ref _GSequenceNode,ref _GSequenceNode,ref void)i32,ref void)ref _GSequenceNode
    clang proc     "g_sequence_sort_changed"           (ref _GSequenceNode,ref clang function(ref void,ref void,ref void)i32,ref void)
    clang proc     "g_sequence_sort_changed_iter"      (ref _GSequenceNode,ref clang function(ref _GSequenceNode,ref _GSequenceNode,ref void)i32,ref void)
    clang proc     "g_sequence_remove"                 (ref _GSequenceNode)
    clang proc     "g_sequence_remove_range"           (ref _GSequenceNode,ref _GSequenceNode)
    clang proc     "g_sequence_move_range"             (ref _GSequenceNode,ref _GSequenceNode,ref _GSequenceNode)
    clang function "g_sequence_search"                 (ref _GSequence,ref void,ref clang function(ref void,ref void,ref void)i32,ref void)ref _GSequenceNode
    clang function "g_sequence_search_iter"            (ref _GSequence,ref void,ref clang function(ref _GSequenceNode,ref _GSequenceNode,ref void)i32,ref void)ref _GSequenceNode
    clang function "g_sequence_lookup"                 (ref _GSequence,ref void,ref clang function(ref void,ref void,ref void)i32,ref void)ref _GSequenceNode
    clang function "g_sequence_lookup_iter"            (ref _GSequence,ref void,ref clang function(ref _GSequenceNode,ref _GSequenceNode,ref void)i32,ref void)ref _GSequenceNode
    clang function "g_sequence_get"                    (ref _GSequenceNode)ref void
    clang proc     "g_sequence_set"                    (ref _GSequenceNode,ref void)
    clang function "g_sequence_iter_is_begin"          (ref _GSequenceNode)i32
    clang function "g_sequence_iter_is_end"            (ref _GSequenceNode)i32
    clang function "g_sequence_iter_next"              (ref _GSequenceNode)ref _GSequenceNode
    clang function "g_sequence_iter_prev"              (ref _GSequenceNode)ref _GSequenceNode
    clang function "g_sequence_iter_get_position"      (ref _GSequenceNode)i32
    clang function "g_sequence_iter_move"              (ref _GSequenceNode,i32)ref _GSequenceNode
    clang function "g_sequence_iter_get_sequence"      (ref _GSequenceNode)ref _GSequence
    clang function "g_sequence_iter_compare"           (ref _GSequenceNode,ref _GSequenceNode)i32
    clang function "g_sequence_range_get_midpoint"     (ref _GSequenceNode,ref _GSequenceNode)ref _GSequenceNode
    const G_SHELL_ERROR_BAD_QUOTING          = 0
    const G_SHELL_ERROR_EMPTY_STRING         = 1
    const G_SHELL_ERROR_FAILED               = 2
    clang function "g_shell_error_quark"               ()u32
    clang function "g_shell_quote"                     (ref i8)ref i8
    clang function "g_shell_unquote"                   (ref i8,ref ref _GError)ref i8
    clang function "g_shell_parse_argv"                (ref i8,ref i32,ref ref ref i8,ref ref _GError)i32
    clang function "g_slice_alloc"                     (u64)ref void
    clang function "g_slice_alloc0"                    (u64)ref void
    clang function "g_slice_copy"                      (u64,ref void)ref void
    clang proc     "g_slice_free1"                     (u64,ref void)
    clang proc     "g_slice_free_chain_with_offset"    (u64,ref void,u64)
    const G_SLICE_CONFIG_ALWAYS_MALLOC       = 1
    const G_SLICE_CONFIG_BYPASS_MAGAZINES    = 2
    const G_SLICE_CONFIG_WORKING_SET_MSECS   = 3
    const G_SLICE_CONFIG_COLOR_INCREMENT     = 4
    const G_SLICE_CONFIG_CHUNK_SIZES         = 5
    const G_SLICE_CONFIG_CONTENTION_COUNTER  = 6
    clang proc     "g_slice_set_config"                (i32,i64)
    clang function "g_slice_get_config"                (i32)i64
    clang function "g_slice_get_config_state"          (i32,i64,ref u32)ref i64
    const G_SPAWN_ERROR_FORK                 = 0
    const G_SPAWN_ERROR_READ                 = 1
    const G_SPAWN_ERROR_CHDIR                = 2
    const G_SPAWN_ERROR_ACCES                = 3
    const G_SPAWN_ERROR_PERM                 = 4
    const G_SPAWN_ERROR_TOO_BIG              = 5
    const G_SPAWN_ERROR_2BIG                 = 5
    const G_SPAWN_ERROR_NOEXEC               = 6
    const G_SPAWN_ERROR_NAMETOOLONG          = 7
    const G_SPAWN_ERROR_NOENT                = 8
    const G_SPAWN_ERROR_NOMEM                = 9
    const G_SPAWN_ERROR_NOTDIR               = 10
    const G_SPAWN_ERROR_LOOP                 = 11
    const G_SPAWN_ERROR_TXTBUSY              = 12
    const G_SPAWN_ERROR_IO                   = 13
    const G_SPAWN_ERROR_NFILE                = 14
    const G_SPAWN_ERROR_MFILE                = 15
    const G_SPAWN_ERROR_INVAL                = 16
    const G_SPAWN_ERROR_ISDIR                = 17
    const G_SPAWN_ERROR_LIBBAD               = 18
    const G_SPAWN_ERROR_FAILED               = 19
    const G_SPAWN_LEAVE_DESCRIPTORS_OPEN     = 1
    const G_SPAWN_DO_NOT_REAP_CHILD          = 2
    const G_SPAWN_SEARCH_PATH                = 4
    const G_SPAWN_STDOUT_TO_DEV_NULL         = 8
    const G_SPAWN_STDERR_TO_DEV_NULL         = 16
    const G_SPAWN_CHILD_INHERITS_STDIN       = 32
    const G_SPAWN_FILE_AND_ARGV_ZERO         = 64
    const G_SPAWN_SEARCH_PATH_FROM_ENVP      = 128
    clang function "g_spawn_error_quark"               ()u32
    clang function "g_spawn_exit_error_quark"          ()u32
    clang function "g_spawn_async_utf8"                (ref i8,ref ref i8,ref ref i8,i32,ref clang proc(ref void),ref void,ref ref void,ref ref _GError)i32
    clang function "g_spawn_async_with_pipes_utf8"     (ref i8,ref ref i8,ref ref i8,i32,ref clang proc(ref void),ref void,ref ref void,ref i32,ref i32,ref i32,ref ref _GError)i32
    clang function "g_spawn_sync_utf8"                 (ref i8,ref ref i8,ref ref i8,i32,ref clang proc(ref void),ref void,ref ref i8,ref ref i8,ref i32,ref ref _GError)i32
    clang function "g_spawn_command_line_sync_utf8"    (ref i8,ref ref i8,ref ref i8,ref i32,ref ref _GError)i32
    clang function "g_spawn_command_line_async_utf8"   (ref i8,ref ref _GError)i32
    clang function "g_spawn_check_exit_status"         (i32,ref ref _GError)i32
    clang proc     "g_spawn_close_pid"                 (ref void)
    const G_ASCII_ALNUM                      = 1
    const G_ASCII_ALPHA                      = 2
    const G_ASCII_CNTRL                      = 4
    const G_ASCII_DIGIT                      = 8
    const G_ASCII_GRAPH                      = 16
    const G_ASCII_LOWER                      = 32
    const G_ASCII_PRINT                      = 64
    const G_ASCII_PUNCT                      = 128
    const G_ASCII_SPACE                      = 256
    const G_ASCII_UPPER                      = 512
    const G_ASCII_XDIGIT                     = 1024
    ref u16 g_ascii_table
    clang function "g_ascii_tolower"                   (i8)i8
    clang function "g_ascii_toupper"                   (i8)i8
    clang function "g_ascii_digit_value"               (i8)i32
    clang function "g_ascii_xdigit_value"              (i8)i32
    clang function "g_strdelimit"                      (ref i8,ref i8,i8)ref i8
    clang function "g_strcanon"                        (ref i8,ref i8,i8)ref i8
    clang function "g_strerror"                        (i32)ref i8
    clang function "g_strsignal"                       (i32)ref i8
    clang function "g_strreverse"                      (ref i8)ref i8
    clang function "g_strlcpy"                         (ref i8,ref i8,u64)u64
    clang function "g_strlcat"                         (ref i8,ref i8,u64)u64
    clang function "g_strstr_len"                      (ref i8,i64,ref i8)ref i8
    clang function "g_strrstr"                         (ref i8,ref i8)ref i8
    clang function "g_strrstr_len"                     (ref i8,i64,ref i8)ref i8
    clang function "g_str_has_suffix"                  (ref i8,ref i8)i32
    clang function "g_str_has_prefix"                  (ref i8,ref i8)i32
    clang function "g_strtod"                          (ref i8,ref ref i8)r64
    clang function "g_ascii_strtod"                    (ref i8,ref ref i8)r64
    clang function "g_ascii_strtoull"                  (ref i8,ref ref i8,u32)u64
    clang function "g_ascii_strtoll"                   (ref i8,ref ref i8,u32)i64
    clang function "g_ascii_dtostr"                    (ref i8,i32,r64)ref i8
    clang function "g_ascii_formatd"                   (ref i8,i32,ref i8,r64)ref i8
    clang function "g_strchug"                         (ref i8)ref i8
    clang function "g_strchomp"                        (ref i8)ref i8
    clang function "g_ascii_strcasecmp"                (ref i8,ref i8)i32
    clang function "g_ascii_strncasecmp"               (ref i8,ref i8,u64)i32
    clang function "g_ascii_strdown"                   (ref i8,i64)ref i8
    clang function "g_ascii_strup"                     (ref i8,i64)ref i8
    clang function "g_strcasecmp"                      (ref i8,ref i8)i32
    clang function "g_strncasecmp"                     (ref i8,ref i8,u32)i32
    clang function "g_strdown"                         (ref i8)ref i8
    clang function "g_strup"                           (ref i8)ref i8
    clang function "g_strdup"                          (ref i8)ref i8
    clang function "g_strdup_printf"                   (ref i8,...)ref i8
    clang function "g_strdup_vprintf"                  (ref i8,ref i8)ref i8
    clang function "g_strndup"                         (ref i8,u64)ref i8
    clang function "g_strnfill"                        (u64,i8)ref i8
    clang function "g_strconcat"                       (ref i8,...)ref i8
    clang function "g_strjoin"                         (ref i8,...)ref i8
    clang function "g_strcompress"                     (ref i8)ref i8
    clang function "g_strescape"                       (ref i8,ref i8)ref i8
    clang function "g_memdup"                          (ref void,u32)ref void
    clang function "g_strsplit"                        (ref i8,ref i8,i32)ref ref i8
    clang function "g_strsplit_set"                    (ref i8,ref i8,i32)ref ref i8
    clang function "g_strjoinv"                        (ref i8,ref ref i8)ref i8
    clang proc     "g_strfreev"                        (ref ref i8)
    clang function "g_strdupv"                         (ref ref i8)ref ref i8
    clang function "g_strv_length"                     (ref ref i8)u32
    clang function "g_stpcpy"                          (ref i8,ref i8)ref i8
    record _GStringChunk =
        var int dummy    !empty record
    end

    clang function "g_string_chunk_new"                (u64)ref _GStringChunk
    clang proc     "g_string_chunk_free"               (ref _GStringChunk)
    clang proc     "g_string_chunk_clear"              (ref _GStringChunk)
    clang function "g_string_chunk_insert"             (ref _GStringChunk,ref i8)ref i8
    clang function "g_string_chunk_insert_len"         (ref _GStringChunk,ref i8,i64)ref i8
    clang function "g_string_chunk_insert_const"       (ref _GStringChunk,ref i8)ref i8
    record GTestCase =
        var int dummy    !empty record
    end

    record GTestSuite =
        var int dummy    !empty record
    end

    clang function "g_strcmp0"                         (ref i8,ref i8)i32
    clang proc     "g_test_minimized_result"           (r64,ref i8,...)
    clang proc     "g_test_maximized_result"           (r64,ref i8,...)
    clang proc     "g_test_init"                       (ref i32,ref ref ref i8,...)
    clang function "g_test_run"                        ()i32
    clang proc     "g_test_add_func"                   (ref i8,ref clang proc())
    clang proc     "g_test_add_data_func"              (ref i8,ref void,ref clang proc(ref void))
    clang proc     "g_test_add_data_func_full"         (ref i8,ref void,ref clang proc(ref void),ref clang proc(ref void))
    clang proc     "g_test_fail"                       ()
    clang proc     "g_test_message"                    (ref i8,...)
    clang proc     "g_test_bug_base"                   (ref i8)
    clang proc     "g_test_bug"                        (ref i8)
    clang proc     "g_test_timer_start"                ()
    clang function "g_test_timer_elapsed"              ()r64
    clang function "g_test_timer_last"                 ()r64
    clang proc     "g_test_queue_free"                 (ref void)
    clang proc     "g_test_queue_destroy"              (ref clang proc(ref void),ref void)
    const G_TEST_TRAP_SILENCE_STDOUT         = 128
    const G_TEST_TRAP_SILENCE_STDERR         = 256
    const G_TEST_TRAP_INHERIT_STDIN          = 512
    clang function "g_test_trap_fork"                  (u64,i32)i32
    clang function "g_test_trap_has_passed"            ()i32
    clang function "g_test_trap_reached_timeout"       ()i32
    clang function "g_test_rand_int"                   ()i32
    clang function "g_test_rand_int_range"             (i32,i32)i32
    clang function "g_test_rand_double"                ()r64
    clang function "g_test_rand_double_range"          (r64,r64)r64
    clang function "g_test_create_case"                (ref i8,u64,ref void,ref clang proc(ref void,ref void),ref clang proc(ref void,ref void),ref clang proc(ref void,ref void))ref GTestCase
    clang function "g_test_create_suite"               (ref i8)ref GTestSuite
    clang function "g_test_get_root"                   ()ref GTestSuite
    clang proc     "g_test_suite_add"                  (ref GTestSuite,ref GTestCase)
    clang proc     "g_test_suite_add_suite"            (ref GTestSuite,ref GTestSuite)
    clang function "g_test_run_suite"                  (ref GTestSuite)i32
    clang proc     "g_test_trap_assertions"            (ref i8,ref i8,i32,ref i8,u64,ref i8)
    clang proc     "g_assertion_message"               (ref i8,ref i8,i32,ref i8,ref i8)
    clang proc     "g_assertion_message_expr"          (ref i8,ref i8,i32,ref i8,ref i8)
    clang proc     "g_assertion_message_cmpstr"        (ref i8,ref i8,i32,ref i8,ref i8,ref i8,ref i8,ref i8)
    clang proc     "g_assertion_message_cmpnum"        (ref i8,ref i8,i32,ref i8,ref i8,r64,ref i8,r64,i8)
    clang proc     "g_assertion_message_error"         (ref i8,ref i8,i32,ref i8,ref i8,ref _GError,u32,i32)
    clang proc     "g_test_add_vtable"                 (ref i8,u64,ref void,ref clang proc(ref void,ref void),ref clang proc(ref void,ref void),ref clang proc(ref void,ref void))
    record $T3 =
        var i32 test_initialized
        var i32 test_quick
        var i32 test_perf
        var i32 test_verbose
        var i32 test_quiet
        var i32 test_undefined
    end

    ref $T3 g_test_config_vars
    const G_TEST_LOG_NONE                    = 0
    const G_TEST_LOG_ERROR                   = 1
    const G_TEST_LOG_START_BINARY            = 2
    const G_TEST_LOG_LIST_CASE               = 3
    const G_TEST_LOG_SKIP_CASE               = 4
    const G_TEST_LOG_START_CASE              = 5
    const G_TEST_LOG_STOP_CASE               = 6
    const G_TEST_LOG_MIN_RESULT              = 7
    const G_TEST_LOG_MAX_RESULT              = 8
    const G_TEST_LOG_MESSAGE                 = 9
    record $T4 =
        var i32 log_type
        var u32 n_strings
        var ref ref i8 strings
        var u32 n_nums
        var ref r64 nums
    end

    record $T5 =
        var ref _GString data
        var ref _GSList msgs
    end

    clang function "g_test_log_type_name"              (i32)ref i8
    clang function "g_test_log_buffer_new"             ()ref $T5
    clang proc     "g_test_log_buffer_free"            (ref $T5)
    clang proc     "g_test_log_buffer_push"            (ref $T5,u32,ref byte)
    clang function "g_test_log_buffer_pop"             (ref $T5)ref $T4
    clang proc     "g_test_log_msg_free"               (ref $T4)
    clang proc     "g_test_log_set_fatal_handler"      (ref clang function(ref i8,i32,ref i8,ref void)i32,ref void)
    clang proc     "g_test_expect_message"             (ref i8,i32,ref i8)
    clang proc     "g_test_assert_expected_messages_internal" (ref i8,ref i8,i32,ref i8)
    record _GThreadPool =
        var ref clang proc(ref void,ref void) func
        var ref void user_data
        var i32 exclusive
    end

    clang function "g_thread_pool_new"                 (ref clang proc(ref void,ref void),ref void,i32,i32,ref ref _GError)ref _GThreadPool
    clang proc     "g_thread_pool_free"                (ref _GThreadPool,i32,i32)
    clang function "g_thread_pool_push"                (ref _GThreadPool,ref void,ref ref _GError)i32
    clang function "g_thread_pool_unprocessed"         (ref _GThreadPool)u32
    clang proc     "g_thread_pool_set_sort_function"   (ref _GThreadPool,ref clang function(ref void,ref void,ref void)i32,ref void)
    clang function "g_thread_pool_set_max_threads"     (ref _GThreadPool,i32,ref ref _GError)i32
    clang function "g_thread_pool_get_max_threads"     (ref _GThreadPool)i32
    clang function "g_thread_pool_get_num_threads"     (ref _GThreadPool)u32
    clang proc     "g_thread_pool_set_max_unused_threads" (i32)
    clang function "g_thread_pool_get_max_unused_threads" ()i32
    clang function "g_thread_pool_get_num_unused_threads" ()u32
    clang proc     "g_thread_pool_stop_unused_threads" ()
    clang proc     "g_thread_pool_set_max_idle_time"   (u32)
    clang function "g_thread_pool_get_max_idle_time"   ()u32
    record _GTimer =
        var int dummy    !empty record
    end

    clang function "g_timer_new"                       ()ref _GTimer
    clang proc     "g_timer_destroy"                   (ref _GTimer)
    clang proc     "g_timer_start"                     (ref _GTimer)
    clang proc     "g_timer_stop"                      (ref _GTimer)
    clang proc     "g_timer_reset"                     (ref _GTimer)
    clang proc     "g_timer_continue"                  (ref _GTimer)
    clang function "g_timer_elapsed"                   (ref _GTimer,ref u32)r64
    clang proc     "g_usleep"                          (u32)
    clang proc     "g_time_val_add"                    (ref _GTimeVal,i32)
    clang function "g_time_val_from_iso8601"           (ref i8,ref _GTimeVal)i32
    clang function "g_time_val_to_iso8601"             (ref _GTimeVal)ref i8
    record _GTrashStack =
        var ref _GTrashStack next$
    end

    clang proc     "g_trash_stack_push"                (ref ref _GTrashStack,ref void)
    clang function "g_trash_stack_pop"                 (ref ref _GTrashStack)ref void
    clang function "g_trash_stack_peek"                (ref ref _GTrashStack)ref void
    clang function "g_trash_stack_height"              (ref ref _GTrashStack)u32
    record _GTree =
        var int dummy    !empty record
    end

    clang function "g_tree_new"                        (ref clang function(ref void,ref void)i32)ref _GTree
    clang function "g_tree_new_with_data"              (ref clang function(ref void,ref void,ref void)i32,ref void)ref _GTree
    clang function "g_tree_new_full"                   (ref clang function(ref void,ref void,ref void)i32,ref void,ref clang proc(ref void),ref clang proc(ref void))ref _GTree
    clang function "g_tree_ref"                        (ref _GTree)ref _GTree
    clang proc     "g_tree_unref"                      (ref _GTree)
    clang proc     "g_tree_destroy"                    (ref _GTree)
    clang proc     "g_tree_insert"                     (ref _GTree,ref void,ref void)
    clang proc     "g_tree_replace"                    (ref _GTree,ref void,ref void)
    clang function "g_tree_remove"                     (ref _GTree,ref void)i32
    clang function "g_tree_steal"                      (ref _GTree,ref void)i32
    clang function "g_tree_lookup"                     (ref _GTree,ref void)ref void
    clang function "g_tree_lookup_extended"            (ref _GTree,ref void,ref ref void,ref ref void)i32
    clang proc     "g_tree_foreach"                    (ref _GTree,ref clang function(ref void,ref void,ref void)i32,ref void)
    clang proc     "g_tree_traverse"                   (ref _GTree,ref clang function(ref void,ref void,ref void)i32,i32,ref void)
    clang function "g_tree_search"                     (ref _GTree,ref clang function(ref void,ref void)i32,ref void)ref void
    clang function "g_tree_height"                     (ref _GTree)i32
    clang function "g_tree_nnodes"                     (ref _GTree)i32
    clang function "g_uri_unescape_string"             (ref i8,ref i8)ref i8
    clang function "g_uri_unescape_segment"            (ref i8,ref i8,ref i8)ref i8
    clang function "g_uri_parse_scheme"                (ref i8)ref i8
    clang function "g_uri_escape_string"               (ref i8,ref i8,i32)ref i8
    record _GVariantType =
        var int dummy    !empty record
    end

    clang function "g_variant_type_string_is_valid"    (ref i8)i32
    clang function "g_variant_type_string_scan"        (ref i8,ref i8,ref ref i8)i32
    clang proc     "g_variant_type_free"               (ref _GVariantType)
    clang function "g_variant_type_copy"               (ref _GVariantType)ref _GVariantType
    clang function "g_variant_type_new"                (ref i8)ref _GVariantType
    clang function "g_variant_type_get_string_length"  (ref _GVariantType)u64
    clang function "g_variant_type_peek_string"        (ref _GVariantType)ref i8
    clang function "g_variant_type_dup_string"         (ref _GVariantType)ref i8
    clang function "g_variant_type_is_definite"        (ref _GVariantType)i32
    clang function "g_variant_type_is_container"       (ref _GVariantType)i32
    clang function "g_variant_type_is_basic"           (ref _GVariantType)i32
    clang function "g_variant_type_is_maybe"           (ref _GVariantType)i32
    clang function "g_variant_type_is_array"           (ref _GVariantType)i32
    clang function "g_variant_type_is_tuple"           (ref _GVariantType)i32
    clang function "g_variant_type_is_dict_entry"      (ref _GVariantType)i32
    clang function "g_variant_type_is_variant"         (ref _GVariantType)i32
    clang function "g_variant_type_hash"               (ref void)u32
    clang function "g_variant_type_equal"              (ref void,ref void)i32
    clang function "g_variant_type_is_subtype_of"      (ref _GVariantType,ref _GVariantType)i32
    clang function "g_variant_type_element"            (ref _GVariantType)ref _GVariantType
    clang function "g_variant_type_first"              (ref _GVariantType)ref _GVariantType
    clang function "g_variant_type_next"               (ref _GVariantType)ref _GVariantType
    clang function "g_variant_type_n_items"            (ref _GVariantType)u64
    clang function "g_variant_type_key"                (ref _GVariantType)ref _GVariantType
    clang function "g_variant_type_value"              (ref _GVariantType)ref _GVariantType
    clang function "g_variant_type_new_array"          (ref _GVariantType)ref _GVariantType
    clang function "g_variant_type_new_maybe"          (ref _GVariantType)ref _GVariantType
    clang function "g_variant_type_new_tuple"          (ref ref _GVariantType,i32)ref _GVariantType
    clang function "g_variant_type_new_dict_entry"     (ref _GVariantType,ref _GVariantType)ref _GVariantType
    clang function "g_variant_type_checked_"           (ref i8)ref _GVariantType
    record _GVariant =
        var int dummy    !empty record
    end

    const G_VARIANT_CLASS_BOOLEAN            = 98
    const G_VARIANT_CLASS_BYTE               = 121
    const G_VARIANT_CLASS_INT16              = 110
    const G_VARIANT_CLASS_UINT16             = 113
    const G_VARIANT_CLASS_INT32              = 105
    const G_VARIANT_CLASS_UINT32             = 117
    const G_VARIANT_CLASS_INT64              = 120
    const G_VARIANT_CLASS_UINT64             = 116
    const G_VARIANT_CLASS_HANDLE             = 104
    const G_VARIANT_CLASS_DOUBLE             = 100
    const G_VARIANT_CLASS_STRING             = 115
    const G_VARIANT_CLASS_OBJECT_PATH        = 111
    const G_VARIANT_CLASS_SIGNATURE          = 103
    const G_VARIANT_CLASS_VARIANT            = 118
    const G_VARIANT_CLASS_MAYBE              = 109
    const G_VARIANT_CLASS_ARRAY              = 97
    const G_VARIANT_CLASS_TUPLE              = 40
    const G_VARIANT_CLASS_DICT_ENTRY         = 123
    clang proc     "g_variant_unref"                   (ref _GVariant)
    clang function "g_variant_ref"                     (ref _GVariant)ref _GVariant
    clang function "g_variant_ref_sink"                (ref _GVariant)ref _GVariant
    clang function "g_variant_is_floating"             (ref _GVariant)i32
    clang function "g_variant_take_ref"                (ref _GVariant)ref _GVariant
    clang function "g_variant_get_type"                (ref _GVariant)ref _GVariantType
    clang function "g_variant_get_type_string"         (ref _GVariant)ref i8
    clang function "g_variant_is_of_type"              (ref _GVariant,ref _GVariantType)i32
    clang function "g_variant_is_container"            (ref _GVariant)i32
    clang function "g_variant_classify"                (ref _GVariant)i32
    clang function "g_variant_new_boolean"             (i32)ref _GVariant
    clang function "g_variant_new_byte"                (byte)ref _GVariant
    clang function "g_variant_new_int16"               (i16)ref _GVariant
    clang function "g_variant_new_uint16"              (u16)ref _GVariant
    clang function "g_variant_new_int32"               (i32)ref _GVariant
    clang function "g_variant_new_uint32"              (u32)ref _GVariant
    clang function "g_variant_new_int64"               (i64)ref _GVariant
    clang function "g_variant_new_uint64"              (u64)ref _GVariant
    clang function "g_variant_new_handle"              (i32)ref _GVariant
    clang function "g_variant_new_double"              (r64)ref _GVariant
    clang function "g_variant_new_string"              (ref i8)ref _GVariant
    clang function "g_variant_new_object_path"         (ref i8)ref _GVariant
    clang function "g_variant_is_object_path"          (ref i8)i32
    clang function "g_variant_new_signature"           (ref i8)ref _GVariant
    clang function "g_variant_is_signature"            (ref i8)i32
    clang function "g_variant_new_variant"             (ref _GVariant)ref _GVariant
    clang function "g_variant_new_strv"                (ref ref i8,i64)ref _GVariant
    clang function "g_variant_new_objv"                (ref ref i8,i64)ref _GVariant
    clang function "g_variant_new_bytestring"          (ref i8)ref _GVariant
    clang function "g_variant_new_bytestring_array"    (ref ref i8,i64)ref _GVariant
    clang function "g_variant_new_fixed_array"         (ref _GVariantType,ref void,u64,u64)ref _GVariant
    clang function "g_variant_get_boolean"             (ref _GVariant)i32
    clang function "g_variant_get_byte"                (ref _GVariant)byte
    clang function "g_variant_get_int16"               (ref _GVariant)i16
    clang function "g_variant_get_uint16"              (ref _GVariant)u16
    clang function "g_variant_get_int32"               (ref _GVariant)i32
    clang function "g_variant_get_uint32"              (ref _GVariant)u32
    clang function "g_variant_get_int64"               (ref _GVariant)i64
    clang function "g_variant_get_uint64"              (ref _GVariant)u64
    clang function "g_variant_get_handle"              (ref _GVariant)i32
    clang function "g_variant_get_double"              (ref _GVariant)r64
    clang function "g_variant_get_variant"             (ref _GVariant)ref _GVariant
    clang function "g_variant_get_string"              (ref _GVariant,ref u64)ref i8
    clang function "g_variant_dup_string"              (ref _GVariant,ref u64)ref i8
    clang function "g_variant_get_strv"                (ref _GVariant,ref u64)ref ref i8
    clang function "g_variant_dup_strv"                (ref _GVariant,ref u64)ref ref i8
    clang function "g_variant_get_objv"                (ref _GVariant,ref u64)ref ref i8
    clang function "g_variant_dup_objv"                (ref _GVariant,ref u64)ref ref i8
    clang function "g_variant_get_bytestring"          (ref _GVariant)ref i8
    clang function "g_variant_dup_bytestring"          (ref _GVariant,ref u64)ref i8
    clang function "g_variant_get_bytestring_array"    (ref _GVariant,ref u64)ref ref i8
    clang function "g_variant_dup_bytestring_array"    (ref _GVariant,ref u64)ref ref i8
    clang function "g_variant_new_maybe"               (ref _GVariantType,ref _GVariant)ref _GVariant
    clang function "g_variant_new_array"               (ref _GVariantType,ref ref _GVariant,u64)ref _GVariant
    clang function "g_variant_new_tuple"               (ref ref _GVariant,u64)ref _GVariant
    clang function "g_variant_new_dict_entry"          (ref _GVariant,ref _GVariant)ref _GVariant
    clang function "g_variant_get_maybe"               (ref _GVariant)ref _GVariant
    clang function "g_variant_n_children"              (ref _GVariant)u64
    clang proc     "g_variant_get_child"               (ref _GVariant,u64,ref i8,...)
    clang function "g_variant_get_child_value"         (ref _GVariant,u64)ref _GVariant
    clang function "g_variant_lookup"                  (ref _GVariant,ref i8,ref i8,...)i32
    clang function "g_variant_lookup_value"            (ref _GVariant,ref i8,ref _GVariantType)ref _GVariant
    clang function "g_variant_get_fixed_array"         (ref _GVariant,ref u64,u64)ref void
    clang function "g_variant_get_size"                (ref _GVariant)u64
    clang function "g_variant_get_data"                (ref _GVariant)ref void
    clang proc     "g_variant_store"                   (ref _GVariant,ref void)
    clang function "g_variant_print"                   (ref _GVariant,i32)ref i8
    clang function "g_variant_print_string"            (ref _GVariant,ref _GString,i32)ref _GString
    clang function "g_variant_hash"                    (ref void)u32
    clang function "g_variant_equal"                   (ref void,ref void)i32
    clang function "g_variant_get_normal_form"         (ref _GVariant)ref _GVariant
    clang function "g_variant_is_normal_form"          (ref _GVariant)i32
    clang function "g_variant_byteswap"                (ref _GVariant)ref _GVariant
    clang function "g_variant_new_from_data"           (ref _GVariantType,ref void,u64,i32,ref clang proc(ref void),ref void)ref _GVariant
    record _GVariantIter =
        var [16]u64 x
    end

    clang function "g_variant_iter_new"                (ref _GVariant)ref _GVariantIter
    clang function "g_variant_iter_init"               (ref _GVariantIter,ref _GVariant)u64
    clang function "g_variant_iter_copy"               (ref _GVariantIter)ref _GVariantIter
    clang function "g_variant_iter_n_children"         (ref _GVariantIter)u64
    clang proc     "g_variant_iter_free"               (ref _GVariantIter)
    clang function "g_variant_iter_next_value"         (ref _GVariantIter)ref _GVariant
    clang function "g_variant_iter_next"               (ref _GVariantIter,ref i8,...)i32
    clang function "g_variant_iter_loop"               (ref _GVariantIter,ref i8,...)i32
    record _GVariantBuilder =
        var [16]u64 x
    end

    const G_VARIANT_PARSE_ERROR_FAILED       = 0
    const G_VARIANT_PARSE_ERROR_BASIC_TYPE_EXPECTED = 1
    const G_VARIANT_PARSE_ERROR_CANNOT_INFER_TYPE = 2
    const G_VARIANT_PARSE_ERROR_DEFINITE_TYPE_EXPECTED = 3
    const G_VARIANT_PARSE_ERROR_INPUT_NOT_AT_END = 4
    const G_VARIANT_PARSE_ERROR_INVALID_CHARACTER = 5
    const G_VARIANT_PARSE_ERROR_INVALID_FORMAT_STRING = 6
    const G_VARIANT_PARSE_ERROR_INVALID_OBJECT_PATH = 7
    const G_VARIANT_PARSE_ERROR_INVALID_SIGNATURE = 8
    const G_VARIANT_PARSE_ERROR_INVALID_TYPE_STRING = 9
    const G_VARIANT_PARSE_ERROR_NO_COMMON_TYPE = 10
    const G_VARIANT_PARSE_ERROR_NUMBER_OUT_OF_RANGE = 11
    const G_VARIANT_PARSE_ERROR_NUMBER_TOO_BIG = 12
    const G_VARIANT_PARSE_ERROR_TYPE_ERROR   = 13
    const G_VARIANT_PARSE_ERROR_UNEXPECTED_TOKEN = 14
    const G_VARIANT_PARSE_ERROR_UNKNOWN_KEYWORD = 15
    const G_VARIANT_PARSE_ERROR_UNTERMINATED_STRING_CONSTANT = 16
    const G_VARIANT_PARSE_ERROR_VALUE_EXPECTED = 17
    clang function "g_variant_parser_get_error_quark"  ()u32
    clang function "g_variant_builder_new"             (ref _GVariantType)ref _GVariantBuilder
    clang proc     "g_variant_builder_unref"           (ref _GVariantBuilder)
    clang function "g_variant_builder_ref"             (ref _GVariantBuilder)ref _GVariantBuilder
    clang proc     "g_variant_builder_init"            (ref _GVariantBuilder,ref _GVariantType)
    clang function "g_variant_builder_end"             (ref _GVariantBuilder)ref _GVariant
    clang proc     "g_variant_builder_clear"           (ref _GVariantBuilder)
    clang proc     "g_variant_builder_open"            (ref _GVariantBuilder,ref _GVariantType)
    clang proc     "g_variant_builder_close"           (ref _GVariantBuilder)
    clang proc     "g_variant_builder_add_value"       (ref _GVariantBuilder,ref _GVariant)
    clang proc     "g_variant_builder_add"             (ref _GVariantBuilder,ref i8,...)
    clang proc     "g_variant_builder_add_parsed"      (ref _GVariantBuilder,ref i8,...)
    clang function "g_variant_new"                     (ref i8,...)ref _GVariant
    clang proc     "g_variant_get"                     (ref _GVariant,ref i8,...)
    clang function "g_variant_new_va"                  (ref i8,ref ref i8,ref ref i8)ref _GVariant
    clang proc     "g_variant_get_va"                  (ref _GVariant,ref i8,ref ref i8,ref ref i8)
    clang function "g_variant_check_format_string"     (ref _GVariant,ref i8,i32)i32
    clang function "g_variant_parse"                   (ref _GVariantType,ref i8,ref i8,ref ref i8,ref ref _GError)ref _GVariant
    clang function "g_variant_new_parsed"              (ref i8,...)ref _GVariant
    clang function "g_variant_new_parsed_va"           (ref i8,ref ref i8)ref _GVariant
    clang function "g_variant_compare"                 (ref void,ref void)i32
    u32 glib_major_version
    u32 glib_minor_version
    u32 glib_micro_version
    u32 glib_interface_age
    u32 glib_binary_age
    clang function "glib_check_version"                (u32,u32,u32)ref i8
    clang function "g_win32_ftruncate"                 (i32,u32)i32
    clang function "g_win32_getlocale"                 ()ref i8
    clang function "g_win32_error_message"             (i32)ref i8
    clang function "g_win32_get_package_installation_directory" (ref i8,ref i8)ref i8
    clang function "g_win32_get_package_installation_subdirectory" (ref i8,ref i8,ref i8)ref i8
    clang function "g_win32_get_package_installation_directory_of_module" (ref void)ref i8
    clang function "g_win32_get_windows_version"       ()u32
    clang function "g_win32_locale_filename_from_utf8" (ref i8)ref i8
    record _GAllocator =
        var int dummy    !empty record
    end

    record _GMemChunk =
        var int dummy    !empty record
    end

    clang function "g_mem_chunk_new"                   (ref i8,i32,u64,i32)ref _GMemChunk
    clang proc     "g_mem_chunk_destroy"               (ref _GMemChunk)
    clang function "g_mem_chunk_alloc"                 (ref _GMemChunk)ref void
    clang function "g_mem_chunk_alloc0"                (ref _GMemChunk)ref void
    clang proc     "g_mem_chunk_free"                  (ref _GMemChunk,ref void)
    clang proc     "g_mem_chunk_clean"                 (ref _GMemChunk)
    clang proc     "g_mem_chunk_reset"                 (ref _GMemChunk)
    clang proc     "g_mem_chunk_print"                 (ref _GMemChunk)
    clang proc     "g_mem_chunk_info"                  ()
    clang proc     "g_blow_chunks"                     ()
    clang function "g_allocator_new"                   (ref i8,u32)ref _GAllocator
    clang proc     "g_allocator_free"                  (ref _GAllocator)
    clang proc     "g_list_push_allocator"             (ref _GAllocator)
    clang proc     "g_list_pop_allocator"              ()
    clang proc     "g_slist_push_allocator"            (ref _GAllocator)
    clang proc     "g_slist_pop_allocator"             ()
    clang proc     "g_node_push_allocator"             (ref _GAllocator)
    clang proc     "g_node_pop_allocator"              ()
    record _GCache =
        var int dummy    !empty record
    end

    clang function "g_cache_new"                       (ref clang function(ref void)ref void,ref clang proc(ref void),ref clang function(ref void)ref void,ref clang proc(ref void),ref clang function(ref void)u32,ref clang function(ref void)u32,ref clang function(ref void,ref void)i32)ref _GCache
    clang proc     "g_cache_destroy"                   (ref _GCache)
    clang function "g_cache_insert"                    (ref _GCache,ref void)ref void
    clang proc     "g_cache_remove"                    (ref _GCache,ref void)
    clang proc     "g_cache_key_foreach"               (ref _GCache,ref clang proc(ref void,ref void,ref void),ref void)
    clang proc     "g_cache_value_foreach"             (ref _GCache,ref clang proc(ref void,ref void,ref void),ref void)
    record _GCompletion =
        var ref _GList items
        var ref clang function(ref void)ref i8 func
        var ref i8 prefix
        var ref _GList cache
        var ref clang function(ref i8,ref i8,u64)i32 strncmp_func
    end

    clang function "g_completion_new"                  (ref clang function(ref void)ref i8)ref _GCompletion
    clang proc     "g_completion_add_items"            (ref _GCompletion,ref _GList)
    clang proc     "g_completion_remove_items"         (ref _GCompletion,ref _GList)
    clang proc     "g_completion_clear_items"          (ref _GCompletion)
    clang function "g_completion_complete"             (ref _GCompletion,ref i8,ref ref i8)ref _GList
    clang function "g_completion_complete_utf8"        (ref _GCompletion,ref i8,ref ref i8)ref _GList
    clang proc     "g_completion_set_compare"          (ref _GCompletion,ref clang function(ref i8,ref i8,u64)i32)
    clang proc     "g_completion_free"                 (ref _GCompletion)
    record _GRelation =
        var int dummy    !empty record
    end

    record _GTuples =
        var u32 len$
    end

    clang function "g_relation_new"                    (i32)ref _GRelation
    clang proc     "g_relation_destroy"                (ref _GRelation)
    clang proc     "g_relation_index"                  (ref _GRelation,i32,ref clang function(ref void)u32,ref clang function(ref void,ref void)i32)
    clang proc     "g_relation_insert"                 (ref _GRelation,...)
    clang function "g_relation_delete"                 (ref _GRelation,ref void,i32)i32
    clang function "g_relation_select"                 (ref _GRelation,ref void,i32)ref _GTuples
    clang function "g_relation_count"                  (ref _GRelation,ref void,i32)i32
    clang function "g_relation_exists"                 (ref _GRelation,...)i32
    clang proc     "g_relation_print"                  (ref _GRelation)
    clang proc     "g_tuples_destroy"                  (ref _GTuples)
    clang function "g_tuples_index"                    (ref _GTuples,i32,i32)ref void
    const G_THREAD_PRIORITY_LOW              = 0
    const G_THREAD_PRIORITY_NORMAL           = 1
    const G_THREAD_PRIORITY_HIGH             = 2
    const G_THREAD_PRIORITY_URGENT           = 3
    record _GThreadFunctions =
        var ref clang function()ref _GMutex mutex_new
        var ref clang proc(ref _GMutex) mutex_lock
        var ref clang function(ref _GMutex)i32 mutex_trylock
        var ref clang proc(ref _GMutex) mutex_unlock
        var ref clang proc(ref _GMutex) mutex_free
        var ref clang function()ref _GCond cond_new
        var ref clang proc(ref _GCond) cond_signal
        var ref clang proc(ref _GCond) cond_broadcast
        var ref clang proc(ref _GCond,ref _GMutex) cond_wait
        var ref clang function(ref _GCond,ref _GMutex,ref _GTimeVal)i32 cond_timed_wait
        var ref clang proc(ref _GCond) cond_free
        var ref clang function(ref clang proc(ref void))ref _GPrivate private_new
        var ref clang function(ref _GPrivate)ref void private_get
        var ref clang proc(ref _GPrivate,ref void) private_set
        var ref clang proc(ref clang function(ref void)ref void,ref void,u32,i32,i32,i32,ref void,ref ref _GError) thread_create
        var ref clang proc() thread_yield
        var ref clang proc(ref void) thread_join
        var ref clang proc() thread_exit
        var ref clang proc(ref void,i32) thread_set_priority
        var ref clang proc(ref void) thread_self
        var ref clang function(ref void,ref void)i32 thread_equal
    end

    _GThreadFunctions g_thread_functions_for_glib_use
    i32 g_thread_use_default_impl
    ref clang function()u64 g_thread_gettime
    clang function "g_thread_create"                   (ref clang function(ref void)ref void,ref void,i32,ref ref _GError)ref _GThread
    clang function "g_thread_create_full"              (ref clang function(ref void)ref void,ref void,u32,i32,i32,i32,ref ref _GError)ref _GThread
    clang proc     "g_thread_set_priority"             (ref _GThread,i32)
    clang proc     "g_thread_foreach"                  (ref clang proc(ref void,ref void),ref void)
    record $T6 =
        var ref _GMutex mutex
    end

    clang proc     "g_static_mutex_init"               (ref $T6)
    clang proc     "g_static_mutex_free"               (ref $T6)
    clang function "g_static_mutex_get_mutex_impl"     (ref $T6)ref _GMutex
    record _GStaticRecMutex =
        var $T6 mutex
        var u32 depth
        var $T7 unused
    end

    record $T7 =
        var ref void owner
        var r64 dummy
    end

    clang proc     "g_static_rec_mutex_init"           (ref _GStaticRecMutex)
    clang proc     "g_static_rec_mutex_lock"           (ref _GStaticRecMutex)
    clang function "g_static_rec_mutex_trylock"        (ref _GStaticRecMutex)i32
    clang proc     "g_static_rec_mutex_unlock"         (ref _GStaticRecMutex)
    clang proc     "g_static_rec_mutex_lock_full"      (ref _GStaticRecMutex,u32)
    clang function "g_static_rec_mutex_unlock_full"    (ref _GStaticRecMutex)u32
    clang proc     "g_static_rec_mutex_free"           (ref _GStaticRecMutex)
    record _GStaticRWLock =
        var $T6 mutex
        var ref _GCond read_cond
        var ref _GCond write_cond
        var u32 read_counter
        var i32 have_writer
        var u32 want_to_read
        var u32 want_to_write
    end

    clang proc     "g_static_rw_lock_init"             (ref _GStaticRWLock)
    clang proc     "g_static_rw_lock_reader_lock"      (ref _GStaticRWLock)
    clang function "g_static_rw_lock_reader_trylock"   (ref _GStaticRWLock)i32
    clang proc     "g_static_rw_lock_reader_unlock"    (ref _GStaticRWLock)
    clang proc     "g_static_rw_lock_writer_lock"      (ref _GStaticRWLock)
    clang function "g_static_rw_lock_writer_trylock"   (ref _GStaticRWLock)i32
    clang proc     "g_static_rw_lock_writer_unlock"    (ref _GStaticRWLock)
    clang proc     "g_static_rw_lock_free"             (ref _GStaticRWLock)
    clang function "g_private_new"                     (ref clang proc(ref void))ref _GPrivate
    record _GStaticPrivate =
        var u32 index
    end

    clang proc     "g_static_private_init"             (ref _GStaticPrivate)
    clang function "g_static_private_get"              (ref _GStaticPrivate)ref void
    clang proc     "g_static_private_set"              (ref _GStaticPrivate,ref void,ref clang proc(ref void))
    clang proc     "g_static_private_free"             (ref _GStaticPrivate)
    clang function "g_once_init_enter_impl"            (ref u64)i32
    clang proc     "g_thread_init"                     (ref void)
    clang proc     "g_thread_init_with_errorcheck_mutexes" (ref void)
    clang function "g_thread_get_initialized"          ()i32
    i32 g_threads_got_initialized
    clang function "g_mutex_new"                       ()ref _GMutex
    clang proc     "g_mutex_free"                      (ref _GMutex)
    clang function "g_cond_new"                        ()ref _GCond
    clang proc     "g_cond_free"                       (ref _GCond)
    clang function "g_cond_timed_wait"                 (ref _GCond,ref _GMutex,ref _GTimeVal)i32
    record _GValue =
        var u64 g_type
        var [2]$T8 data
    end

    record _GTypeCValue =
        var int dummy    !empty record
    end

    record _GTypePlugin =
        var int dummy    !empty record
    end

    record _GTypeClass =
        var u64 g_type
    end

    record _GTypeInterface =
        var u64 g_type
        var u64 g_instance_type
    end

    record _GTypeInstance =
        var ref _GTypeClass g_class
    end

    record _GTypeInfo =
        var u16 class_size
        var ref clang proc(ref void) base_init
        var ref clang proc(ref void) base_finalize
        var ref clang proc(ref void,ref void) class_init
        var ref clang proc(ref void,ref void) class_finalize
        var ref void class_data
        var u16 instance_size
        var u16 n_preallocs
        var ref clang proc(ref _GTypeInstance,ref void) instance_init
        var ref _GTypeValueTable value_table
    end

    record _GTypeFundamentalInfo =
        var i32 type_flags
    end

    record _GInterfaceInfo =
        var ref clang proc(ref void,ref void) interface_init
        var ref clang proc(ref void,ref void) interface_finalize
        var ref void interface_data
    end

    record _GTypeValueTable =
        var ref clang proc(ref _GValue) value_init
        var ref clang proc(ref _GValue) value_free
        var ref clang proc(ref _GValue,ref _GValue) value_copy
        var ref clang function(ref _GValue)ref void value_peek_pointer
        var ref i8 collect_format
        var ref clang function(ref _GValue,u32,ref _GTypeCValue,u32)ref i8 collect_value
        var ref i8 lcopy_format
        var ref clang function(ref _GValue,u32,ref _GTypeCValue,u32)ref i8 lcopy_value
    end

    record _GTypeQuery =
        var u64 type$
        var ref i8 type_name
        var u32 class_size
        var u32 instance_size
    end

    const G_TYPE_DEBUG_NONE                  = 0
    const G_TYPE_DEBUG_OBJECTS               = 1
    const G_TYPE_DEBUG_SIGNALS               = 2
    const G_TYPE_DEBUG_MASK                  = 3
    clang proc     "g_type_init"                       ()
    clang proc     "g_type_init_with_debug_flags"      (i32)
    clang function "g_type_name"                       (u64)ref i8
    clang function "g_type_qname"                      (u64)u32
    clang function "g_type_from_name"                  (ref i8)u64
    clang function "g_type_parent"                     (u64)u64
    clang function "g_type_depth"                      (u64)u32
    clang function "g_type_next_base"                  (u64,u64)u64
    clang function "g_type_is_a"                       (u64,u64)i32
    clang function "g_type_class_ref"                  (u64)ref void
    clang function "g_type_class_peek"                 (u64)ref void
    clang function "g_type_class_peek_static"          (u64)ref void
    clang proc     "g_type_class_unref"                (ref void)
    clang function "g_type_class_peek_parent"          (ref void)ref void
    clang function "g_type_interface_peek"             (ref void,u64)ref void
    clang function "g_type_interface_peek_parent"      (ref void)ref void
    clang function "g_type_default_interface_ref"      (u64)ref void
    clang function "g_type_default_interface_peek"     (u64)ref void
    clang proc     "g_type_default_interface_unref"    (ref void)
    clang function "g_type_children"                   (u64,ref u32)ref u64
    clang function "g_type_interfaces"                 (u64,ref u32)ref u64
    clang proc     "g_type_set_qdata"                  (u64,u32,ref void)
    clang function "g_type_get_qdata"                  (u64,u32)ref void
    clang proc     "g_type_query"                      (u64,ref _GTypeQuery)
    const G_TYPE_FLAG_CLASSED                = 1
    const G_TYPE_FLAG_INSTANTIATABLE         = 2
    const G_TYPE_FLAG_DERIVABLE              = 4
    const G_TYPE_FLAG_DEEP_DERIVABLE         = 8
    const G_TYPE_FLAG_ABSTRACT               = 16
    const G_TYPE_FLAG_VALUE_ABSTRACT         = 32
    clang function "g_type_register_static"            (u64,ref i8,ref _GTypeInfo,i32)u64
    clang function "g_type_register_static_simple"     (u64,ref i8,u32,ref clang proc(ref void,ref void),u32,ref clang proc(ref _GTypeInstance,ref void),i32)u64
    clang function "g_type_register_dynamic"           (u64,ref i8,ref _GTypePlugin,i32)u64
    clang function "g_type_register_fundamental"       (u64,ref i8,ref _GTypeInfo,ref _GTypeFundamentalInfo,i32)u64
    clang proc     "g_type_add_interface_static"       (u64,u64,ref _GInterfaceInfo)
    clang proc     "g_type_add_interface_dynamic"      (u64,u64,ref _GTypePlugin)
    clang proc     "g_type_interface_add_prerequisite" (u64,u64)
    clang function "g_type_interface_prerequisites"    (u64,ref u32)ref u64
    clang proc     "g_type_class_add_private"          (ref void,u64)
    clang function "g_type_instance_get_private"       (ref _GTypeInstance,u64)ref void
    clang proc     "g_type_add_class_private"          (u64,u64)
    clang function "g_type_class_get_private"          (ref _GTypeClass,u64)ref void
    clang proc     "g_type_ensure"                     (u64)
    clang function "g_type_get_plugin"                 (u64)ref _GTypePlugin
    clang function "g_type_interface_get_plugin"       (u64,u64)ref _GTypePlugin
    clang function "g_type_fundamental_next"           ()u64
    clang function "g_type_fundamental"                (u64)u64
    clang function "g_type_create_instance"            (u64)ref _GTypeInstance
    clang proc     "g_type_free_instance"              (ref _GTypeInstance)
    clang proc     "g_type_add_class_cache_func"       (ref void,ref clang function(ref void,ref _GTypeClass)i32)
    clang proc     "g_type_remove_class_cache_func"    (ref void,ref clang function(ref void,ref _GTypeClass)i32)
    clang proc     "g_type_class_unref_uncached"       (ref void)
    clang proc     "g_type_add_interface_check"        (ref void,ref clang proc(ref void,ref void))
    clang proc     "g_type_remove_interface_check"     (ref void,ref clang proc(ref void,ref void))
    clang function "g_type_value_table_peek"           (u64)ref _GTypeValueTable
    clang function "g_type_check_instance"             (ref _GTypeInstance)i32
    clang function "g_type_check_instance_cast"        (ref _GTypeInstance,u64)ref _GTypeInstance
    clang function "g_type_check_instance_is_a"        (ref _GTypeInstance,u64)i32
    clang function "g_type_check_class_cast"           (ref _GTypeClass,u64)ref _GTypeClass
    clang function "g_type_check_class_is_a"           (ref _GTypeClass,u64)i32
    clang function "g_type_check_is_value_type"        (u64)i32
    clang function "g_type_check_value"                (ref _GValue)i32
    clang function "g_type_check_value_holds"          (ref _GValue,u64)i32
    clang function "g_type_test_flags"                 (u64,u32)i32
    clang function "g_type_name_from_instance"         (ref _GTypeInstance)ref i8
    clang function "g_type_name_from_class"            (ref _GTypeClass)ref i8
    i32 _g_type_debug_flags
    record $T8 =
        var i32 v_int
        var u32 v_uint
        var i32 v_long
        var u32 v_ulong
        var i64 v_int64
        var u64 v_uint64
        var r32 v_float
        var r64 v_double
        var ref void v_pointer
    end

    clang function "g_value_init"                      (ref _GValue,u64)ref _GValue
    clang proc     "g_value_copy"                      (ref _GValue,ref _GValue)
    clang function "g_value_reset"                     (ref _GValue)ref _GValue
    clang proc     "g_value_unset"                     (ref _GValue)
    clang proc     "g_value_set_instance"              (ref _GValue,ref void)
    clang function "g_value_fits_pointer"              (ref _GValue)i32
    clang function "g_value_peek_pointer"              (ref _GValue)ref void
    clang function "g_value_type_compatible"           (u64,u64)i32
    clang function "g_value_type_transformable"        (u64,u64)i32
    clang function "g_value_transform"                 (ref _GValue,ref _GValue)i32
    clang proc     "g_value_register_transform_func"   (u64,u64,ref clang proc(ref _GValue,ref _GValue))
    const G_PARAM_READABLE                   = 1
    const G_PARAM_WRITABLE                   = 2
    const G_PARAM_CONSTRUCT                  = 4
    const G_PARAM_CONSTRUCT_ONLY             = 8
    const G_PARAM_LAX_VALIDATION             = 16
    const G_PARAM_STATIC_NAME                = 32
    const G_PARAM_PRIVATE                    = 32
    const G_PARAM_STATIC_NICK                = 64
    const G_PARAM_STATIC_BLURB               = 128
    const G_PARAM_DEPRECATED                 = -2147483648
    record _GParamSpec =
        var _GTypeInstance g_type_instance
        var ref i8 name
        var i32 flags
        var u64 value_type
        var u64 owner_type
        var ref i8 _nick
        var ref i8 _blurb
        var ref _GData qdata
        var u32 ref_count
        var u32 param_id
    end

    record _GParamSpecClass =
        var _GTypeClass g_type_class
        var u64 value_type
        var ref clang proc(ref _GParamSpec) finalize
        var ref clang proc(ref _GParamSpec,ref _GValue) value_set_default
        var ref clang function(ref _GParamSpec,ref _GValue)i32 value_validate
        var ref clang function(ref _GParamSpec,ref _GValue,ref _GValue)i32 values_cmp
        var [4]ref void dummy
    end

    record _GParameter =
        var ref i8 name
        var _GValue value
    end

    record _GParamSpecPool =
        var int dummy    !empty record
    end

    clang function "g_param_spec_ref"                  (ref _GParamSpec)ref _GParamSpec
    clang proc     "g_param_spec_unref"                (ref _GParamSpec)
    clang proc     "g_param_spec_sink"                 (ref _GParamSpec)
    clang function "g_param_spec_ref_sink"             (ref _GParamSpec)ref _GParamSpec
    clang function "g_param_spec_get_qdata"            (ref _GParamSpec,u32)ref void
    clang proc     "g_param_spec_set_qdata"            (ref _GParamSpec,u32,ref void)
    clang proc     "g_param_spec_set_qdata_full"       (ref _GParamSpec,u32,ref void,ref clang proc(ref void))
    clang function "g_param_spec_steal_qdata"          (ref _GParamSpec,u32)ref void
    clang function "g_param_spec_get_redirect_target"  (ref _GParamSpec)ref _GParamSpec
    clang proc     "g_param_value_set_default"         (ref _GParamSpec,ref _GValue)
    clang function "g_param_value_defaults"            (ref _GParamSpec,ref _GValue)i32
    clang function "g_param_value_validate"            (ref _GParamSpec,ref _GValue)i32
    clang function "g_param_value_convert"             (ref _GParamSpec,ref _GValue,ref _GValue,i32)i32
    clang function "g_param_values_cmp"                (ref _GParamSpec,ref _GValue,ref _GValue)i32
    clang function "g_param_spec_get_name"             (ref _GParamSpec)ref i8
    clang function "g_param_spec_get_nick"             (ref _GParamSpec)ref i8
    clang function "g_param_spec_get_blurb"            (ref _GParamSpec)ref i8
    clang proc     "g_value_set_param"                 (ref _GValue,ref _GParamSpec)
    clang function "g_value_get_param"                 (ref _GValue)ref _GParamSpec
    clang function "g_value_dup_param"                 (ref _GValue)ref _GParamSpec
    clang proc     "g_value_take_param"                (ref _GValue,ref _GParamSpec)
    clang proc     "g_value_set_param_take_ownership"  (ref _GValue,ref _GParamSpec)
    record _GParamSpecTypeInfo =
        var u16 instance_size
        var u16 n_preallocs
        var ref clang proc(ref _GParamSpec) instance_init
        var u64 value_type
        var ref clang proc(ref _GParamSpec) finalize
        var ref clang proc(ref _GParamSpec,ref _GValue) value_set_default
        var ref clang function(ref _GParamSpec,ref _GValue)i32 value_validate
        var ref clang function(ref _GParamSpec,ref _GValue,ref _GValue)i32 values_cmp
    end

    clang function "g_param_type_register_static"      (ref i8,ref _GParamSpecTypeInfo)u64
    clang function "_g_param_type_register_static_constant" (ref i8,ref _GParamSpecTypeInfo,u64)u64
    clang function "g_param_spec_internal"             (u64,ref i8,ref i8,ref i8,i32)ref void
    clang function "g_param_spec_pool_new"             (i32)ref _GParamSpecPool
    clang proc     "g_param_spec_pool_insert"          (ref _GParamSpecPool,ref _GParamSpec,u64)
    clang proc     "g_param_spec_pool_remove"          (ref _GParamSpecPool,ref _GParamSpec)
    clang function "g_param_spec_pool_lookup"          (ref _GParamSpecPool,ref i8,u64,i32)ref _GParamSpec
    clang function "g_param_spec_pool_list_owned"      (ref _GParamSpecPool,u64)ref _GList
    clang function "g_param_spec_pool_list"            (ref _GParamSpecPool,u64,ref u32)ref ref _GParamSpec
    record _GClosure =
        var u32 ref_count
        var u32 meta_marshal_nouse
        var u32 n_guards
        var u32 n_fnotifiers
        var u32 n_inotifiers
        var u32 in_inotify
        var u32 floating
        var u32 derivative_flag
        var u32 in_marshal
        var u32 is_invalid
        var ref clang proc(ref _GClosure,ref _GValue,u32,ref _GValue,ref void,ref void) marshal
        var ref void data
        var ref _GClosureNotifyData notifiers
    end

    record _GClosureNotifyData =
        var ref void data
        var ref clang proc(ref void,ref _GClosure) notify
    end

    record _GCClosure =
        var _GClosure closure
        var ref void callback$
    end

    clang function "g_cclosure_new"                    (ref clang proc(),ref void,ref clang proc(ref void,ref _GClosure))ref _GClosure
    clang function "g_cclosure_new_swap"               (ref clang proc(),ref void,ref clang proc(ref void,ref _GClosure))ref _GClosure
    clang function "g_signal_type_cclosure_new"        (u64,u32)ref _GClosure
    clang function "g_closure_ref"                     (ref _GClosure)ref _GClosure
    clang proc     "g_closure_sink"                    (ref _GClosure)
    clang proc     "g_closure_unref"                   (ref _GClosure)
    clang function "g_closure_new_simple"              (u32,ref void)ref _GClosure
    clang proc     "g_closure_add_finalize_notifier"   (ref _GClosure,ref void,ref clang proc(ref void,ref _GClosure))
    clang proc     "g_closure_remove_finalize_notifier" (ref _GClosure,ref void,ref clang proc(ref void,ref _GClosure))
    clang proc     "g_closure_add_invalidate_notifier" (ref _GClosure,ref void,ref clang proc(ref void,ref _GClosure))
    clang proc     "g_closure_remove_invalidate_notifier" (ref _GClosure,ref void,ref clang proc(ref void,ref _GClosure))
    clang proc     "g_closure_add_marshal_guards"      (ref _GClosure,ref void,ref clang proc(ref void,ref _GClosure),ref void,ref clang proc(ref void,ref _GClosure))
    clang proc     "g_closure_set_marshal"             (ref _GClosure,ref clang proc(ref _GClosure,ref _GValue,u32,ref _GValue,ref void,ref void))
    clang proc     "g_closure_set_meta_marshal"        (ref _GClosure,ref void,ref clang proc(ref _GClosure,ref _GValue,u32,ref _GValue,ref void,ref void))
    clang proc     "g_closure_invalidate"              (ref _GClosure)
    clang proc     "g_closure_invoke"                  (ref _GClosure,ref _GValue,u32,ref _GValue,ref void)
    clang proc     "g_cclosure_marshal_generic"        (ref _GClosure,ref _GValue,u32,ref _GValue,ref void,ref void)
    clang proc     "g_cclosure_marshal_generic_va"     (ref _GClosure,ref _GValue,ref void,ref i8,ref void,i32,ref u64)
    clang proc     "g_cclosure_marshal_VOID__VOID"     (ref _GClosure,ref _GValue,u32,ref _GValue,ref void,ref void)
    clang proc     "g_cclosure_marshal_VOID__VOIDv"    (ref _GClosure,ref _GValue,ref void,ref i8,ref void,i32,ref u64)
    clang proc     "g_cclosure_marshal_VOID__BOOLEAN"  (ref _GClosure,ref _GValue,u32,ref _GValue,ref void,ref void)
    clang proc     "g_cclosure_marshal_VOID__BOOLEANv" (ref _GClosure,ref _GValue,ref void,ref i8,ref void,i32,ref u64)
    clang proc     "g_cclosure_marshal_VOID__CHAR"     (ref _GClosure,ref _GValue,u32,ref _GValue,ref void,ref void)
    clang proc     "g_cclosure_marshal_VOID__CHARv"    (ref _GClosure,ref _GValue,ref void,ref i8,ref void,i32,ref u64)
    clang proc     "g_cclosure_marshal_VOID__UCHAR"    (ref _GClosure,ref _GValue,u32,ref _GValue,ref void,ref void)
    clang proc     "g_cclosure_marshal_VOID__UCHARv"   (ref _GClosure,ref _GValue,ref void,ref i8,ref void,i32,ref u64)
    clang proc     "g_cclosure_marshal_VOID__INT"      (ref _GClosure,ref _GValue,u32,ref _GValue,ref void,ref void)
    clang proc     "g_cclosure_marshal_VOID__INTv"     (ref _GClosure,ref _GValue,ref void,ref i8,ref void,i32,ref u64)
    clang proc     "g_cclosure_marshal_VOID__UINT"     (ref _GClosure,ref _GValue,u32,ref _GValue,ref void,ref void)
    clang proc     "g_cclosure_marshal_VOID__UINTv"    (ref _GClosure,ref _GValue,ref void,ref i8,ref void,i32,ref u64)
    clang proc     "g_cclosure_marshal_VOID__LONG"     (ref _GClosure,ref _GValue,u32,ref _GValue,ref void,ref void)
    clang proc     "g_cclosure_marshal_VOID__LONGv"    (ref _GClosure,ref _GValue,ref void,ref i8,ref void,i32,ref u64)
    clang proc     "g_cclosure_marshal_VOID__ULONG"    (ref _GClosure,ref _GValue,u32,ref _GValue,ref void,ref void)
    clang proc     "g_cclosure_marshal_VOID__ULONGv"   (ref _GClosure,ref _GValue,ref void,ref i8,ref void,i32,ref u64)
    clang proc     "g_cclosure_marshal_VOID__ENUM"     (ref _GClosure,ref _GValue,u32,ref _GValue,ref void,ref void)
    clang proc     "g_cclosure_marshal_VOID__ENUMv"    (ref _GClosure,ref _GValue,ref void,ref i8,ref void,i32,ref u64)
    clang proc     "g_cclosure_marshal_VOID__FLAGS"    (ref _GClosure,ref _GValue,u32,ref _GValue,ref void,ref void)
    clang proc     "g_cclosure_marshal_VOID__FLAGSv"   (ref _GClosure,ref _GValue,ref void,ref i8,ref void,i32,ref u64)
    clang proc     "g_cclosure_marshal_VOID__FLOAT"    (ref _GClosure,ref _GValue,u32,ref _GValue,ref void,ref void)
    clang proc     "g_cclosure_marshal_VOID__FLOATv"   (ref _GClosure,ref _GValue,ref void,ref i8,ref void,i32,ref u64)
    clang proc     "g_cclosure_marshal_VOID__DOUBLE"   (ref _GClosure,ref _GValue,u32,ref _GValue,ref void,ref void)
    clang proc     "g_cclosure_marshal_VOID__DOUBLEv"  (ref _GClosure,ref _GValue,ref void,ref i8,ref void,i32,ref u64)
    clang proc     "g_cclosure_marshal_VOID__STRING"   (ref _GClosure,ref _GValue,u32,ref _GValue,ref void,ref void)
    clang proc     "g_cclosure_marshal_VOID__STRINGv"  (ref _GClosure,ref _GValue,ref void,ref i8,ref void,i32,ref u64)
    clang proc     "g_cclosure_marshal_VOID__PARAM"    (ref _GClosure,ref _GValue,u32,ref _GValue,ref void,ref void)
    clang proc     "g_cclosure_marshal_VOID__PARAMv"   (ref _GClosure,ref _GValue,ref void,ref i8,ref void,i32,ref u64)
    clang proc     "g_cclosure_marshal_VOID__BOXED"    (ref _GClosure,ref _GValue,u32,ref _GValue,ref void,ref void)
    clang proc     "g_cclosure_marshal_VOID__BOXEDv"   (ref _GClosure,ref _GValue,ref void,ref i8,ref void,i32,ref u64)
    clang proc     "g_cclosure_marshal_VOID__POINTER"  (ref _GClosure,ref _GValue,u32,ref _GValue,ref void,ref void)
    clang proc     "g_cclosure_marshal_VOID__POINTERv" (ref _GClosure,ref _GValue,ref void,ref i8,ref void,i32,ref u64)
    clang proc     "g_cclosure_marshal_VOID__OBJECT"   (ref _GClosure,ref _GValue,u32,ref _GValue,ref void,ref void)
    clang proc     "g_cclosure_marshal_VOID__OBJECTv"  (ref _GClosure,ref _GValue,ref void,ref i8,ref void,i32,ref u64)
    clang proc     "g_cclosure_marshal_VOID__VARIANT"  (ref _GClosure,ref _GValue,u32,ref _GValue,ref void,ref void)
    clang proc     "g_cclosure_marshal_VOID__VARIANTv" (ref _GClosure,ref _GValue,ref void,ref i8,ref void,i32,ref u64)
    clang proc     "g_cclosure_marshal_VOID__UINT_POINTER" (ref _GClosure,ref _GValue,u32,ref _GValue,ref void,ref void)
    clang proc     "g_cclosure_marshal_VOID__UINT_POINTERv" (ref _GClosure,ref _GValue,ref void,ref i8,ref void,i32,ref u64)
    clang proc     "g_cclosure_marshal_BOOLEAN__FLAGS" (ref _GClosure,ref _GValue,u32,ref _GValue,ref void,ref void)
    clang proc     "g_cclosure_marshal_BOOLEAN__FLAGSv" (ref _GClosure,ref _GValue,ref void,ref i8,ref void,i32,ref u64)
    clang proc     "g_cclosure_marshal_STRING__OBJECT_POINTER" (ref _GClosure,ref _GValue,u32,ref _GValue,ref void,ref void)
    clang proc     "g_cclosure_marshal_STRING__OBJECT_POINTERv" (ref _GClosure,ref _GValue,ref void,ref i8,ref void,i32,ref u64)
    clang proc     "g_cclosure_marshal_BOOLEAN__BOXED_BOXED" (ref _GClosure,ref _GValue,u32,ref _GValue,ref void,ref void)
    clang proc     "g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv" (ref _GClosure,ref _GValue,ref void,ref i8,ref void,i32,ref u64)
    record _GSignalQuery =
        var u32 signal_id
        var ref i8 signal_name
        var u64 itype
        var i32 signal_flags
        var u64 return_type
        var u32 n_params
        var ref u64 param_types
    end

    record _GSignalInvocationHint =
        var u32 signal_id
        var u32 detail
        var i32 run_type
    end

    const G_SIGNAL_RUN_FIRST                 = 1
    const G_SIGNAL_RUN_LAST                  = 2
    const G_SIGNAL_RUN_CLEANUP               = 4
    const G_SIGNAL_NO_RECURSE                = 8
    const G_SIGNAL_DETAILED                  = 16
    const G_SIGNAL_ACTION                    = 32
    const G_SIGNAL_NO_HOOKS                  = 64
    const G_SIGNAL_MUST_COLLECT              = 128
    const G_SIGNAL_DEPRECATED                = 256
    const G_CONNECT_AFTER                    = 1
    const G_CONNECT_SWAPPED                  = 2
    const G_SIGNAL_MATCH_ID                  = 1
    const G_SIGNAL_MATCH_DETAIL              = 2
    const G_SIGNAL_MATCH_CLOSURE             = 4
    const G_SIGNAL_MATCH_FUNC                = 8
    const G_SIGNAL_MATCH_DATA                = 16
    const G_SIGNAL_MATCH_UNBLOCKED           = 32
    clang function "g_signal_newv"                     (ref i8,u64,i32,ref _GClosure,ref clang function(ref _GSignalInvocationHint,ref _GValue,ref _GValue,ref void)i32,ref void,ref clang proc(ref _GClosure,ref _GValue,u32,ref _GValue,ref void,ref void),u64,u32,ref u64)u32
    clang function "g_signal_new_valist"               (ref i8,u64,i32,ref _GClosure,ref clang function(ref _GSignalInvocationHint,ref _GValue,ref _GValue,ref void)i32,ref void,ref clang proc(ref _GClosure,ref _GValue,u32,ref _GValue,ref void,ref void),u64,u32,ref i8)u32
    clang function "g_signal_new"                      (ref i8,u64,i32,u32,ref clang function(ref _GSignalInvocationHint,ref _GValue,ref _GValue,ref void)i32,ref void,ref clang proc(ref _GClosure,ref _GValue,u32,ref _GValue,ref void,ref void),u64,u32,...)u32
    clang function "g_signal_new_class_handler"        (ref i8,u64,i32,ref clang proc(),ref clang function(ref _GSignalInvocationHint,ref _GValue,ref _GValue,ref void)i32,ref void,ref clang proc(ref _GClosure,ref _GValue,u32,ref _GValue,ref void,ref void),u64,u32,...)u32
    clang proc     "g_signal_set_va_marshaller"        (u32,u64,ref clang proc(ref _GClosure,ref _GValue,ref void,ref i8,ref void,i32,ref u64))
    clang proc     "g_signal_emitv"                    (ref _GValue,u32,u32,ref _GValue)
    clang proc     "g_signal_emit_valist"              (ref void,u32,u32,ref i8)
    clang proc     "g_signal_emit"                     (ref void,u32,u32,...)
    clang proc     "g_signal_emit_by_name"             (ref void,ref i8,...)
    clang function "g_signal_lookup"                   (ref i8,u64)u32
    clang function "g_signal_name"                     (u32)ref i8
    clang proc     "g_signal_query"                    (u32,ref _GSignalQuery)
    clang function "g_signal_list_ids"                 (u64,ref u32)ref u32
    clang function "g_signal_parse_name"               (ref i8,u64,ref u32,ref u32,i32)i32
    clang function "g_signal_get_invocation_hint"      (ref void)ref _GSignalInvocationHint
    clang proc     "g_signal_stop_emission"            (ref void,u32,u32)
    clang proc     "g_signal_stop_emission_by_name"    (ref void,ref i8)
    clang function "g_signal_add_emission_hook"        (u32,u32,ref clang function(ref _GSignalInvocationHint,u32,ref _GValue,ref void)i32,ref void,ref clang proc(ref void))u32
    clang proc     "g_signal_remove_emission_hook"     (u32,u32)
    clang function "g_signal_has_handler_pending"      (ref void,u32,u32,i32)i32
    clang function "g_signal_connect_closure_by_id"    (ref void,u32,u32,ref _GClosure,i32)u32
    clang function "g_signal_connect_closure"          (ref void,ref i8,ref _GClosure,i32)u32
    clang function "g_signal_connect_data"             (ref void,ref i8,ref clang proc(),ref void,ref clang proc(ref void,ref _GClosure),i32)u32
    clang proc     "g_signal_handler_block"            (ref void,u32)
    clang proc     "g_signal_handler_unblock"          (ref void,u32)
    clang proc     "g_signal_handler_disconnect"       (ref void,u32)
    clang function "g_signal_handler_is_connected"     (ref void,u32)i32
    clang function "g_signal_handler_find"             (ref void,i32,u32,u32,ref _GClosure,ref void,ref void)u32
    clang function "g_signal_handlers_block_matched"   (ref void,i32,u32,u32,ref _GClosure,ref void,ref void)u32
    clang function "g_signal_handlers_unblock_matched" (ref void,i32,u32,u32,ref _GClosure,ref void,ref void)u32
    clang function "g_signal_handlers_disconnect_matched" (ref void,i32,u32,u32,ref _GClosure,ref void,ref void)u32
    clang proc     "g_signal_override_class_closure"   (u32,u64,ref _GClosure)
    clang proc     "g_signal_override_class_handler"   (ref i8,u64,ref clang proc())
    clang proc     "g_signal_chain_from_overridden"    (ref _GValue,ref _GValue)
    clang proc     "g_signal_chain_from_overridden_handler" (ref void,...)
    clang function "g_signal_accumulator_true_handled" (ref _GSignalInvocationHint,ref _GValue,ref _GValue,ref void)i32
    clang function "g_signal_accumulator_first_wins"   (ref _GSignalInvocationHint,ref _GValue,ref _GValue,ref void)i32
    clang proc     "g_signal_handlers_destroy"         (ref void)
    clang proc     "_g_signals_destroy"                (u64)
    clang function "g_date_get_type"                   ()u64
    clang function "g_strv_get_type"                   ()u64
    clang function "g_gstring_get_type"                ()u64
    clang function "g_hash_table_get_type"             ()u64
    clang function "g_array_get_type"                  ()u64
    clang function "g_byte_array_get_type"             ()u64
    clang function "g_ptr_array_get_type"              ()u64
    clang function "g_bytes_get_type"                  ()u64
    clang function "g_variant_type_get_gtype"          ()u64
    clang function "g_regex_get_type"                  ()u64
    clang function "g_match_info_get_type"             ()u64
    clang function "g_error_get_type"                  ()u64
    clang function "g_date_time_get_type"              ()u64
    clang function "g_time_zone_get_type"              ()u64
    clang function "g_io_channel_get_type"             ()u64
    clang function "g_io_condition_get_type"           ()u64
    clang function "g_variant_builder_get_type"        ()u64
    clang function "g_key_file_get_type"               ()u64
    clang function "g_main_loop_get_type"              ()u64
    clang function "g_main_context_get_type"           ()u64
    clang function "g_source_get_type"                 ()u64
    clang function "g_variant_get_gtype"               ()u64
    clang function "g_boxed_copy"                      (u64,ref void)ref void
    clang proc     "g_boxed_free"                      (u64,ref void)
    clang proc     "g_value_set_boxed"                 (ref _GValue,ref void)
    clang proc     "g_value_set_static_boxed"          (ref _GValue,ref void)
    clang proc     "g_value_take_boxed"                (ref _GValue,ref void)
    clang proc     "g_value_set_boxed_take_ownership"  (ref _GValue,ref void)
    clang function "g_value_get_boxed"                 (ref _GValue)ref void
    clang function "g_value_dup_boxed"                 (ref _GValue)ref void
    clang function "g_boxed_type_register_static"      (ref i8,ref clang function(ref void)ref void,ref clang proc(ref void))u64
    clang function "g_closure_get_type"                ()u64
    clang function "g_value_get_type"                  ()u64
    record _GObject =
        var _GTypeInstance g_type_instance
        var u32 ref_count
        var ref _GData qdata
    end

    record _GObjectClass =
        var _GTypeClass g_type_class
        var ref _GSList construct_properties
        var ref clang function(u64,u32,ref _GObjectConstructParam)ref _GObject constructor
        var ref clang proc(ref _GObject,u32,ref _GValue,ref _GParamSpec) set_property
        var ref clang proc(ref _GObject,u32,ref _GValue,ref _GParamSpec) get_property
        var ref clang proc(ref _GObject) dispose
        var ref clang proc(ref _GObject) finalize
        var ref clang proc(ref _GObject,u32,ref ref _GParamSpec) dispatch_properties_changed
        var ref clang proc(ref _GObject,ref _GParamSpec) notify
        var ref clang proc(ref _GObject) constructed
        var u64 flags
        var [6]ref void pdummy
    end

    record _GObjectConstructParam =
        var ref _GParamSpec pspec
        var ref _GValue value
    end

    clang function "g_initially_unowned_get_type"      ()u64
    clang proc     "g_object_class_install_property"   (ref _GObjectClass,u32,ref _GParamSpec)
    clang function "g_object_class_find_property"      (ref _GObjectClass,ref i8)ref _GParamSpec
    clang function "g_object_class_list_properties"    (ref _GObjectClass,ref u32)ref ref _GParamSpec
    clang proc     "g_object_class_override_property"  (ref _GObjectClass,u32,ref i8)
    clang proc     "g_object_class_install_properties" (ref _GObjectClass,u32,ref ref _GParamSpec)
    clang proc     "g_object_interface_install_property" (ref void,ref _GParamSpec)
    clang function "g_object_interface_find_property"  (ref void,ref i8)ref _GParamSpec
    clang function "g_object_interface_list_properties" (ref void,ref u32)ref ref _GParamSpec
    clang function "g_object_get_type"                 ()u64
    clang function "g_object_new"                      (u64,ref i8,...)ref void
    clang function "g_object_newv"                     (u64,u32,ref _GParameter)ref void
    clang function "g_object_new_valist"               (u64,ref i8,ref i8)ref _GObject
    clang proc     "g_object_set"                      (ref void,ref i8,...)
    clang proc     "g_object_get"                      (ref void,ref i8,...)
    clang function "g_object_connect"                  (ref void,ref i8,...)ref void
    clang proc     "g_object_disconnect"               (ref void,ref i8,...)
    clang proc     "g_object_set_valist"               (ref _GObject,ref i8,ref i8)
    clang proc     "g_object_get_valist"               (ref _GObject,ref i8,ref i8)
    clang proc     "g_object_set_property"             (ref _GObject,ref i8,ref _GValue)
    clang proc     "g_object_get_property"             (ref _GObject,ref i8,ref _GValue)
    clang proc     "g_object_freeze_notify"            (ref _GObject)
    clang proc     "g_object_notify"                   (ref _GObject,ref i8)
    clang proc     "g_object_notify_by_pspec"          (ref _GObject,ref _GParamSpec)
    clang proc     "g_object_thaw_notify"              (ref _GObject)
    clang function "g_object_is_floating"              (ref void)i32
    clang function "g_object_ref_sink"                 (ref void)ref void
    clang function "g_object_ref"                      (ref void)ref void
    clang proc     "g_object_unref"                    (ref void)
    clang proc     "g_object_weak_ref"                 (ref _GObject,ref clang proc(ref void,ref _GObject),ref void)
    clang proc     "g_object_weak_unref"               (ref _GObject,ref clang proc(ref void,ref _GObject),ref void)
    clang proc     "g_object_add_weak_pointer"         (ref _GObject,ref ref void)
    clang proc     "g_object_remove_weak_pointer"      (ref _GObject,ref ref void)
    clang proc     "g_object_add_toggle_ref"           (ref _GObject,ref clang proc(ref void,ref _GObject,i32),ref void)
    clang proc     "g_object_remove_toggle_ref"        (ref _GObject,ref clang proc(ref void,ref _GObject,i32),ref void)
    clang function "g_object_get_qdata"                (ref _GObject,u32)ref void
    clang proc     "g_object_set_qdata"                (ref _GObject,u32,ref void)
    clang proc     "g_object_set_qdata_full"           (ref _GObject,u32,ref void,ref clang proc(ref void))
    clang function "g_object_steal_qdata"              (ref _GObject,u32)ref void
    clang function "g_object_dup_qdata"                (ref _GObject,u32,ref clang function(ref void,ref void)ref void,ref void)ref void
    clang function "g_object_replace_qdata"            (ref _GObject,u32,ref void,ref void,ref clang proc(ref void),ref ref clang proc(ref void))i32
    clang function "g_object_get_data"                 (ref _GObject,ref i8)ref void
    clang proc     "g_object_set_data"                 (ref _GObject,ref i8,ref void)
    clang proc     "g_object_set_data_full"            (ref _GObject,ref i8,ref void,ref clang proc(ref void))
    clang function "g_object_steal_data"               (ref _GObject,ref i8)ref void
    clang function "g_object_dup_data"                 (ref _GObject,ref i8,ref clang function(ref void,ref void)ref void,ref void)ref void
    clang function "g_object_replace_data"             (ref _GObject,ref i8,ref void,ref void,ref clang proc(ref void),ref ref clang proc(ref void))i32
    clang proc     "g_object_watch_closure"            (ref _GObject,ref _GClosure)
    clang function "g_cclosure_new_object"             (ref clang proc(),ref _GObject)ref _GClosure
    clang function "g_cclosure_new_object_swap"        (ref clang proc(),ref _GObject)ref _GClosure
    clang function "g_closure_new_object"              (u32,ref _GObject)ref _GClosure
    clang proc     "g_value_set_object"                (ref _GValue,ref void)
    clang function "g_value_get_object"                (ref _GValue)ref void
    clang function "g_value_dup_object"                (ref _GValue)ref void
    clang function "g_signal_connect_object"           (ref void,ref i8,ref clang proc(),ref void,i32)u32
    clang proc     "g_object_force_floating"           (ref _GObject)
    clang proc     "g_object_run_dispose"              (ref _GObject)
    clang proc     "g_value_take_object"               (ref _GValue,ref void)
    clang proc     "g_value_set_object_take_ownership" (ref _GValue,ref void)
    clang function "g_object_compat_control"           (u64,ref void)u64
    clang proc     "g_clear_object"                    (ref ref _GObject)
    record $T9 =
        var $T10 priv
    end

    record $T10 =
        var ref void p
    end

    clang proc     "g_weak_ref_init"                   (ref $T9,ref void)
    clang proc     "g_weak_ref_clear"                  (ref $T9)
    clang function "g_weak_ref_get"                    (ref $T9)ref void
    clang proc     "g_weak_ref_set"                    (ref $T9,ref void)
    record _GBinding =
        var int dummy    !empty record
    end

    const G_BINDING_DEFAULT                  = 0
    const G_BINDING_BIDIRECTIONAL            = 1
    const G_BINDING_SYNC_CREATE              = 2
    const G_BINDING_INVERT_BOOLEAN           = 4
    clang function "g_binding_flags_get_type"          ()u64
    clang function "g_binding_get_type"                ()u64
    clang function "g_binding_get_flags"               (ref _GBinding)i32
    clang function "g_binding_get_source"              (ref _GBinding)ref _GObject
    clang function "g_binding_get_target"              (ref _GBinding)ref _GObject
    clang function "g_binding_get_source_property"     (ref _GBinding)ref i8
    clang function "g_binding_get_target_property"     (ref _GBinding)ref i8
    clang function "g_object_bind_property"            (ref void,ref i8,ref void,ref i8,i32)ref _GBinding
    clang function "g_object_bind_property_full"       (ref void,ref i8,ref void,ref i8,i32,ref clang function(ref _GBinding,ref _GValue,ref _GValue,ref void)i32,ref clang function(ref _GBinding,ref _GValue,ref _GValue,ref void)i32,ref void,ref clang proc(ref void))ref _GBinding
    clang function "g_object_bind_property_with_closures" (ref void,ref i8,ref void,ref i8,i32,ref _GClosure,ref _GClosure)ref _GBinding
    record _GEnumClass =
        var _GTypeClass g_type_class
        var i32 minimum
        var i32 maximum
        var u32 n_values
        var ref _GEnumValue values
    end

    record _GFlagsClass =
        var _GTypeClass g_type_class
        var u32 mask
        var u32 n_values
        var ref _GFlagsValue values
    end

    record _GEnumValue =
        var i32 value
        var ref i8 value_name
        var ref i8 value_nick
    end

    record _GFlagsValue =
        var u32 value
        var ref i8 value_name
        var ref i8 value_nick
    end

    clang function "g_enum_get_value"                  (ref _GEnumClass,i32)ref _GEnumValue
    clang function "g_enum_get_value_by_name"          (ref _GEnumClass,ref i8)ref _GEnumValue
    clang function "g_enum_get_value_by_nick"          (ref _GEnumClass,ref i8)ref _GEnumValue
    clang function "g_flags_get_first_value"           (ref _GFlagsClass,u32)ref _GFlagsValue
    clang function "g_flags_get_value_by_name"         (ref _GFlagsClass,ref i8)ref _GFlagsValue
    clang function "g_flags_get_value_by_nick"         (ref _GFlagsClass,ref i8)ref _GFlagsValue
    clang proc     "g_value_set_enum"                  (ref _GValue,i32)
    clang function "g_value_get_enum"                  (ref _GValue)i32
    clang proc     "g_value_set_flags"                 (ref _GValue,u32)
    clang function "g_value_get_flags"                 (ref _GValue)u32
    clang function "g_enum_register_static"            (ref i8,ref _GEnumValue)u64
    clang function "g_flags_register_static"           (ref i8,ref _GFlagsValue)u64
    clang proc     "g_enum_complete_type_info"         (u64,ref _GTypeInfo,ref _GEnumValue)
    clang proc     "g_flags_complete_type_info"        (u64,ref _GTypeInfo,ref _GFlagsValue)
    record _GParamSpecChar =
        var _GParamSpec parent_instance
        var i8 minimum
        var i8 maximum
        var i8 default_value
    end

    record _GParamSpecUChar =
        var _GParamSpec parent_instance
        var byte minimum
        var byte maximum
        var byte default_value
    end

    record _GParamSpecBoolean =
        var _GParamSpec parent_instance
        var i32 default_value
    end

    record _GParamSpecInt =
        var _GParamSpec parent_instance
        var i32 minimum
        var i32 maximum
        var i32 default_value
    end

    record _GParamSpecUInt =
        var _GParamSpec parent_instance
        var u32 minimum
        var u32 maximum
        var u32 default_value
    end

    record _GParamSpecLong =
        var _GParamSpec parent_instance
        var i32 minimum
        var i32 maximum
        var i32 default_value
    end

    record _GParamSpecULong =
        var _GParamSpec parent_instance
        var u32 minimum
        var u32 maximum
        var u32 default_value
    end

    record _GParamSpecInt64 =
        var _GParamSpec parent_instance
        var i64 minimum
        var i64 maximum
        var i64 default_value
    end

    record _GParamSpecUInt64 =
        var _GParamSpec parent_instance
        var u64 minimum
        var u64 maximum
        var u64 default_value
    end

    record _GParamSpecUnichar =
        var _GParamSpec parent_instance
        var u32 default_value
    end

    record _GParamSpecEnum =
        var _GParamSpec parent_instance
        var ref _GEnumClass enum_class
        var i32 default_value
    end

    record _GParamSpecFlags =
        var _GParamSpec parent_instance
        var ref _GFlagsClass flags_class
        var u32 default_value
    end

    record _GParamSpecFloat =
        var _GParamSpec parent_instance
        var r32 minimum
        var r32 maximum
        var r32 default_value
        var r32 epsilon
    end

    record _GParamSpecDouble =
        var _GParamSpec parent_instance
        var r64 minimum
        var r64 maximum
        var r64 default_value
        var r64 epsilon
    end

    record _GParamSpecString =
        var _GParamSpec parent_instance
        var ref i8 default_value
        var ref i8 cset_first
        var ref i8 cset_nth
        var i8 substitutor
        var u32 null_fold_if_empty
        var u32 ensure_non_null
    end

    record _GParamSpecParam =
        var _GParamSpec parent_instance
    end

    record _GParamSpecBoxed =
        var _GParamSpec parent_instance
    end

    record _GParamSpecPointer =
        var _GParamSpec parent_instance
    end

    record _GParamSpecValueArray =
        var _GParamSpec parent_instance
        var ref _GParamSpec element_spec
        var u32 fixed_n_elements
    end

    record _GParamSpecObject =
        var _GParamSpec parent_instance
    end

    record _GParamSpecOverride =
        var _GParamSpec parent_instance
        var ref _GParamSpec overridden
    end

    record _GParamSpecGType =
        var _GParamSpec parent_instance
        var u64 is_a_type
    end

    record _GParamSpecVariant =
        var _GParamSpec parent_instance
        var ref _GVariantType type$
        var ref _GVariant default_value
        var [4]ref void padding
    end

    clang function "g_param_spec_char"                 (ref i8,ref i8,ref i8,i8,i8,i8,i32)ref _GParamSpec
    clang function "g_param_spec_uchar"                (ref i8,ref i8,ref i8,byte,byte,byte,i32)ref _GParamSpec
    clang function "g_param_spec_boolean"              (ref i8,ref i8,ref i8,i32,i32)ref _GParamSpec
    clang function "g_param_spec_int"                  (ref i8,ref i8,ref i8,i32,i32,i32,i32)ref _GParamSpec
    clang function "g_param_spec_uint"                 (ref i8,ref i8,ref i8,u32,u32,u32,i32)ref _GParamSpec
    clang function "g_param_spec_long"                 (ref i8,ref i8,ref i8,i32,i32,i32,i32)ref _GParamSpec
    clang function "g_param_spec_ulong"                (ref i8,ref i8,ref i8,u32,u32,u32,i32)ref _GParamSpec
    clang function "g_param_spec_int64"                (ref i8,ref i8,ref i8,i64,i64,i64,i32)ref _GParamSpec
    clang function "g_param_spec_uint64"               (ref i8,ref i8,ref i8,u64,u64,u64,i32)ref _GParamSpec
    clang function "g_param_spec_unichar"              (ref i8,ref i8,ref i8,u32,i32)ref _GParamSpec
    clang function "g_param_spec_enum"                 (ref i8,ref i8,ref i8,u64,i32,i32)ref _GParamSpec
    clang function "g_param_spec_flags"                (ref i8,ref i8,ref i8,u64,u32,i32)ref _GParamSpec
    clang function "g_param_spec_float"                (ref i8,ref i8,ref i8,r32,r32,r32,i32)ref _GParamSpec
    clang function "g_param_spec_double"               (ref i8,ref i8,ref i8,r64,r64,r64,i32)ref _GParamSpec
    clang function "g_param_spec_string"               (ref i8,ref i8,ref i8,ref i8,i32)ref _GParamSpec
    clang function "g_param_spec_param"                (ref i8,ref i8,ref i8,u64,i32)ref _GParamSpec
    clang function "g_param_spec_boxed"                (ref i8,ref i8,ref i8,u64,i32)ref _GParamSpec
    clang function "g_param_spec_pointer"              (ref i8,ref i8,ref i8,i32)ref _GParamSpec
    clang function "g_param_spec_value_array"          (ref i8,ref i8,ref i8,ref _GParamSpec,i32)ref _GParamSpec
    clang function "g_param_spec_object"               (ref i8,ref i8,ref i8,u64,i32)ref _GParamSpec
    clang function "g_param_spec_override"             (ref i8,ref _GParamSpec)ref _GParamSpec
    clang function "g_param_spec_gtype"                (ref i8,ref i8,ref i8,u64,i32)ref _GParamSpec
    clang function "g_param_spec_variant"              (ref i8,ref i8,ref i8,ref _GVariantType,ref _GVariant,i32)ref _GParamSpec
    ref u64 g_param_spec_types
    clang proc     "g_source_set_closure"              (ref _GSource,ref _GClosure)
    clang proc     "g_source_set_dummy_callback"       (ref _GSource)
    record _GTypeModule =
        var _GObject parent_instance
        var u32 use_count
        var ref _GSList type_infos
        var ref _GSList interface_infos
        var ref i8 name
    end

    record _GTypeModuleClass =
        var _GObjectClass parent_class
        var ref clang function(ref _GTypeModule)i32 load
        var ref clang proc(ref _GTypeModule) unload
        var ref clang proc() reserved1
        var ref clang proc() reserved2
        var ref clang proc() reserved3
        var ref clang proc() reserved4
    end

    clang function "g_type_module_get_type"            ()u64
    clang function "g_type_module_use"                 (ref _GTypeModule)i32
    clang proc     "g_type_module_unuse"               (ref _GTypeModule)
    clang proc     "g_type_module_set_name"            (ref _GTypeModule,ref i8)
    clang function "g_type_module_register_type"       (ref _GTypeModule,u64,ref i8,ref _GTypeInfo,i32)u64
    clang proc     "g_type_module_add_interface"       (ref _GTypeModule,u64,u64,ref _GInterfaceInfo)
    clang function "g_type_module_register_enum"       (ref _GTypeModule,ref i8,ref _GEnumValue)u64
    clang function "g_type_module_register_flags"      (ref _GTypeModule,ref i8,ref _GFlagsValue)u64
    record _GTypePluginClass =
        var _GTypeInterface base_iface
        var ref clang proc(ref _GTypePlugin) use_plugin
        var ref clang proc(ref _GTypePlugin) unuse_plugin
        var ref clang proc(ref _GTypePlugin,u64,ref _GTypeInfo,ref _GTypeValueTable) complete_type_info
        var ref clang proc(ref _GTypePlugin,u64,u64,ref _GInterfaceInfo) complete_interface_info
    end

    clang function "g_type_plugin_get_type"            ()u64
    clang proc     "g_type_plugin_use"                 (ref _GTypePlugin)
    clang proc     "g_type_plugin_unuse"               (ref _GTypePlugin)
    clang proc     "g_type_plugin_complete_type_info"  (ref _GTypePlugin,u64,ref _GTypeInfo,ref _GTypeValueTable)
    clang proc     "g_type_plugin_complete_interface_info" (ref _GTypePlugin,u64,u64,ref _GInterfaceInfo)
    record _GValueArray =
        var u32 n_values
        var ref _GValue values
        var u32 n_prealloced
    end

    clang function "g_value_array_get_type"            ()u64
    clang function "g_value_array_get_nth"             (ref _GValueArray,u32)ref _GValue
    clang function "g_value_array_new"                 (u32)ref _GValueArray
    clang proc     "g_value_array_free"                (ref _GValueArray)
    clang function "g_value_array_copy"                (ref _GValueArray)ref _GValueArray
    clang function "g_value_array_prepend"             (ref _GValueArray,ref _GValue)ref _GValueArray
    clang function "g_value_array_append"              (ref _GValueArray,ref _GValue)ref _GValueArray
    clang function "g_value_array_insert"              (ref _GValueArray,u32,ref _GValue)ref _GValueArray
    clang function "g_value_array_remove"              (ref _GValueArray,u32)ref _GValueArray
    clang function "g_value_array_sort"                (ref _GValueArray,ref clang function(ref void,ref void)i32)ref _GValueArray
    clang function "g_value_array_sort_with_data"      (ref _GValueArray,ref clang function(ref void,ref void,ref void)i32,ref void)ref _GValueArray
    clang proc     "g_value_set_char"                  (ref _GValue,i8)
    clang function "g_value_get_char"                  (ref _GValue)i8
    clang proc     "g_value_set_schar"                 (ref _GValue,i8)
    clang function "g_value_get_schar"                 (ref _GValue)i8
    clang proc     "g_value_set_uchar"                 (ref _GValue,byte)
    clang function "g_value_get_uchar"                 (ref _GValue)byte
    clang proc     "g_value_set_boolean"               (ref _GValue,i32)
    clang function "g_value_get_boolean"               (ref _GValue)i32
    clang proc     "g_value_set_int"                   (ref _GValue,i32)
    clang function "g_value_get_int"                   (ref _GValue)i32
    clang proc     "g_value_set_uint"                  (ref _GValue,u32)
    clang function "g_value_get_uint"                  (ref _GValue)u32
    clang proc     "g_value_set_long"                  (ref _GValue,i32)
    clang function "g_value_get_long"                  (ref _GValue)i32
    clang proc     "g_value_set_ulong"                 (ref _GValue,u32)
    clang function "g_value_get_ulong"                 (ref _GValue)u32
    clang proc     "g_value_set_int64"                 (ref _GValue,i64)
    clang function "g_value_get_int64"                 (ref _GValue)i64
    clang proc     "g_value_set_uint64"                (ref _GValue,u64)
    clang function "g_value_get_uint64"                (ref _GValue)u64
    clang proc     "g_value_set_float"                 (ref _GValue,r32)
    clang function "g_value_get_float"                 (ref _GValue)r32
    clang proc     "g_value_set_double"                (ref _GValue,r64)
    clang function "g_value_get_double"                (ref _GValue)r64
    clang proc     "g_value_set_string"                (ref _GValue,ref i8)
    clang proc     "g_value_set_static_string"         (ref _GValue,ref i8)
    clang function "g_value_get_string"                (ref _GValue)ref i8
    clang function "g_value_dup_string"                (ref _GValue)ref i8
    clang proc     "g_value_set_pointer"               (ref _GValue,ref void)
    clang function "g_value_get_pointer"               (ref _GValue)ref void
    clang function "g_gtype_get_type"                  ()u64
    clang proc     "g_value_set_gtype"                 (ref _GValue,u64)
    clang function "g_value_get_gtype"                 (ref _GValue)u64
    clang proc     "g_value_set_variant"               (ref _GValue,ref _GVariant)
    clang proc     "g_value_take_variant"              (ref _GValue,ref _GVariant)
    clang function "g_value_get_variant"               (ref _GValue)ref _GVariant
    clang function "g_value_dup_variant"               (ref _GValue)ref _GVariant
    clang function "g_pointer_type_register_static"    (ref i8)u64
    clang function "g_strdup_value_contents"           (ref _GValue)ref i8
    clang proc     "g_value_take_string"               (ref _GValue,ref i8)
    clang proc     "g_value_set_string_take_ownership" (ref _GValue,ref i8)
    const G_APP_INFO_CREATE_NONE             = 0
    const G_APP_INFO_CREATE_NEEDS_TERMINAL   = 1
    const G_APP_INFO_CREATE_SUPPORTS_URIS    = 2
    const G_APP_INFO_CREATE_SUPPORTS_STARTUP_NOTIFICATION = 4
    const G_CONVERTER_NO_FLAGS               = 0
    const G_CONVERTER_INPUT_AT_END           = 1
    const G_CONVERTER_FLUSH                  = 2
    const G_CONVERTER_ERROR                  = 0
    const G_CONVERTER_CONVERTED              = 1
    const G_CONVERTER_FINISHED               = 2
    const G_CONVERTER_FLUSHED                = 3
    const G_DATA_STREAM_BYTE_ORDER_BIG_ENDIAN = 0
    const G_DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN = 1
    const G_DATA_STREAM_BYTE_ORDER_HOST_ENDIAN = 2
    const G_DATA_STREAM_NEWLINE_TYPE_LF      = 0
    const G_DATA_STREAM_NEWLINE_TYPE_CR      = 1
    const G_DATA_STREAM_NEWLINE_TYPE_CR_LF   = 2
    const G_DATA_STREAM_NEWLINE_TYPE_ANY     = 3
    const G_FILE_ATTRIBUTE_TYPE_INVALID      = 0
    const G_FILE_ATTRIBUTE_TYPE_STRING       = 1
    const G_FILE_ATTRIBUTE_TYPE_BYTE_STRING  = 2
    const G_FILE_ATTRIBUTE_TYPE_BOOLEAN      = 3
    const G_FILE_ATTRIBUTE_TYPE_UINT32       = 4
    const G_FILE_ATTRIBUTE_TYPE_INT32        = 5
    const G_FILE_ATTRIBUTE_TYPE_UINT64       = 6
    const G_FILE_ATTRIBUTE_TYPE_INT64        = 7
    const G_FILE_ATTRIBUTE_TYPE_OBJECT       = 8
    const G_FILE_ATTRIBUTE_TYPE_STRINGV      = 9
    const G_FILE_ATTRIBUTE_INFO_NONE         = 0
    const G_FILE_ATTRIBUTE_INFO_COPY_WITH_FILE = 1
    const G_FILE_ATTRIBUTE_INFO_COPY_WHEN_MOVED = 2
    const G_FILE_ATTRIBUTE_STATUS_UNSET      = 0
    const G_FILE_ATTRIBUTE_STATUS_SET        = 1
    const G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING = 2
    const G_FILE_QUERY_INFO_NONE             = 0
    const G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS = 1
    const G_FILE_CREATE_NONE                 = 0
    const G_FILE_CREATE_PRIVATE              = 1
    const G_FILE_CREATE_REPLACE_DESTINATION  = 2
    const G_MOUNT_MOUNT_NONE                 = 0
    const G_MOUNT_UNMOUNT_NONE               = 0
    const G_MOUNT_UNMOUNT_FORCE              = 1
    const G_DRIVE_START_NONE                 = 0
    const G_DRIVE_START_STOP_TYPE_UNKNOWN    = 0
    const G_DRIVE_START_STOP_TYPE_SHUTDOWN   = 1
    const G_DRIVE_START_STOP_TYPE_NETWORK    = 2
    const G_DRIVE_START_STOP_TYPE_MULTIDISK  = 3
    const G_DRIVE_START_STOP_TYPE_PASSWORD   = 4
    const G_FILE_COPY_NONE                   = 0
    const G_FILE_COPY_OVERWRITE              = 1
    const G_FILE_COPY_BACKUP                 = 2
    const G_FILE_COPY_NOFOLLOW_SYMLINKS      = 4
    const G_FILE_COPY_ALL_METADATA           = 8
    const G_FILE_COPY_NO_FALLBACK_FOR_MOVE   = 16
    const G_FILE_COPY_TARGET_DEFAULT_PERMS   = 32
    const G_FILE_MONITOR_NONE                = 0
    const G_FILE_MONITOR_WATCH_MOUNTS        = 1
    const G_FILE_MONITOR_SEND_MOVED          = 2
    const G_FILE_TYPE_UNKNOWN                = 0
    const G_FILE_TYPE_REGULAR                = 1
    const G_FILE_TYPE_DIRECTORY              = 2
    const G_FILE_TYPE_SYMBOLIC_LINK          = 3
    const G_FILE_TYPE_SPECIAL                = 4
    const G_FILE_TYPE_SHORTCUT               = 5
    const G_FILE_TYPE_MOUNTABLE              = 6
    const G_FILESYSTEM_PREVIEW_TYPE_IF_ALWAYS = 0
    const G_FILESYSTEM_PREVIEW_TYPE_IF_LOCAL = 1
    const G_FILESYSTEM_PREVIEW_TYPE_NEVER    = 2
    const G_FILE_MONITOR_EVENT_CHANGED       = 0
    const G_FILE_MONITOR_EVENT_CHANGES_DONE_HINT = 1
    const G_FILE_MONITOR_EVENT_DELETED       = 2
    const G_FILE_MONITOR_EVENT_CREATED       = 3
    const G_FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED = 4
    const G_FILE_MONITOR_EVENT_PRE_UNMOUNT   = 5
    const G_FILE_MONITOR_EVENT_UNMOUNTED     = 6
    const G_FILE_MONITOR_EVENT_MOVED         = 7
    const G_IO_ERROR_FAILED                  = 0
    const G_IO_ERROR_NOT_FOUND               = 1
    const G_IO_ERROR_EXISTS                  = 2
    const G_IO_ERROR_IS_DIRECTORY            = 3
    const G_IO_ERROR_NOT_DIRECTORY           = 4
    const G_IO_ERROR_NOT_EMPTY               = 5
    const G_IO_ERROR_NOT_REGULAR_FILE        = 6
    const G_IO_ERROR_NOT_SYMBOLIC_LINK       = 7
    const G_IO_ERROR_NOT_MOUNTABLE_FILE      = 8
    const G_IO_ERROR_FILENAME_TOO_LONG       = 9
    const G_IO_ERROR_INVALID_FILENAME        = 10
    const G_IO_ERROR_TOO_MANY_LINKS          = 11
    const G_IO_ERROR_NO_SPACE                = 12
    const G_IO_ERROR_INVALID_ARGUMENT        = 13
    const G_IO_ERROR_PERMISSION_DENIED       = 14
    const G_IO_ERROR_NOT_SUPPORTED           = 15
    const G_IO_ERROR_NOT_MOUNTED             = 16
    const G_IO_ERROR_ALREADY_MOUNTED         = 17
    const G_IO_ERROR_CLOSED                  = 18
    const G_IO_ERROR_CANCELLED               = 19
    const G_IO_ERROR_PENDING                 = 20
    const G_IO_ERROR_READ_ONLY               = 21
    const G_IO_ERROR_CANT_CREATE_BACKUP      = 22
    const G_IO_ERROR_WRONG_ETAG              = 23
    const G_IO_ERROR_TIMED_OUT               = 24
    const G_IO_ERROR_WOULD_RECURSE           = 25
    const G_IO_ERROR_BUSY                    = 26
    const G_IO_ERROR_WOULD_BLOCK             = 27
    const G_IO_ERROR_HOST_NOT_FOUND          = 28
    const G_IO_ERROR_WOULD_MERGE             = 29
    const G_IO_ERROR_FAILED_HANDLED          = 30
    const G_IO_ERROR_TOO_MANY_OPEN_FILES     = 31
    const G_IO_ERROR_NOT_INITIALIZED         = 32
    const G_IO_ERROR_ADDRESS_IN_USE          = 33
    const G_IO_ERROR_PARTIAL_INPUT           = 34
    const G_IO_ERROR_INVALID_DATA            = 35
    const G_IO_ERROR_DBUS_ERROR              = 36
    const G_IO_ERROR_HOST_UNREACHABLE        = 37
    const G_IO_ERROR_NETWORK_UNREACHABLE     = 38
    const G_IO_ERROR_CONNECTION_REFUSED      = 39
    const G_IO_ERROR_PROXY_FAILED            = 40
    const G_IO_ERROR_PROXY_AUTH_FAILED       = 41
    const G_IO_ERROR_PROXY_NEED_AUTH         = 42
    const G_IO_ERROR_PROXY_NOT_ALLOWED       = 43
    const G_ASK_PASSWORD_NEED_PASSWORD       = 1
    const G_ASK_PASSWORD_NEED_USERNAME       = 2
    const G_ASK_PASSWORD_NEED_DOMAIN         = 4
    const G_ASK_PASSWORD_SAVING_SUPPORTED    = 8
    const G_ASK_PASSWORD_ANONYMOUS_SUPPORTED = 16
    const G_PASSWORD_SAVE_NEVER              = 0
    const G_PASSWORD_SAVE_FOR_SESSION        = 1
    const G_PASSWORD_SAVE_PERMANENTLY        = 2
    const G_MOUNT_OPERATION_HANDLED          = 0
    const G_MOUNT_OPERATION_ABORTED          = 1
    const G_MOUNT_OPERATION_UNHANDLED        = 2
    const G_OUTPUT_STREAM_SPLICE_NONE        = 0
    const G_OUTPUT_STREAM_SPLICE_CLOSE_SOURCE = 1
    const G_OUTPUT_STREAM_SPLICE_CLOSE_TARGET = 2
    const G_IO_STREAM_SPLICE_NONE            = 0
    const G_IO_STREAM_SPLICE_CLOSE_STREAM1   = 1
    const G_IO_STREAM_SPLICE_CLOSE_STREAM2   = 2
    const G_IO_STREAM_SPLICE_WAIT_FOR_BOTH   = 4
    const G_EMBLEM_ORIGIN_UNKNOWN            = 0
    const G_EMBLEM_ORIGIN_DEVICE             = 1
    const G_EMBLEM_ORIGIN_LIVEMETADATA       = 2
    const G_EMBLEM_ORIGIN_TAG                = 3
    const G_RESOLVER_ERROR_NOT_FOUND         = 0
    const G_RESOLVER_ERROR_TEMPORARY_FAILURE = 1
    const G_RESOLVER_ERROR_INTERNAL          = 2
    const G_RESOLVER_RECORD_SRV              = 1
    const G_RESOLVER_RECORD_MX               = 2
    const G_RESOLVER_RECORD_TXT              = 3
    const G_RESOLVER_RECORD_SOA              = 4
    const G_RESOLVER_RECORD_NS               = 5
    const G_RESOURCE_ERROR_NOT_FOUND         = 0
    const G_RESOURCE_ERROR_INTERNAL          = 1
    const G_RESOURCE_FLAGS_NONE              = 0
    const G_RESOURCE_FLAGS_COMPRESSED        = 1
    const G_RESOURCE_LOOKUP_FLAGS_NONE       = 0
    const G_SOCKET_FAMILY_INVALID            = 0
    const G_SOCKET_FAMILY_UNIX               = 1
    const G_SOCKET_FAMILY_IPV4               = 2
    const G_SOCKET_FAMILY_IPV6               = 23
    const G_SOCKET_TYPE_INVALID              = 0
    const G_SOCKET_TYPE_STREAM               = 1
    const G_SOCKET_TYPE_DATAGRAM             = 2
    const G_SOCKET_TYPE_SEQPACKET            = 3
    const G_SOCKET_MSG_NONE                  = 0
    const G_SOCKET_MSG_OOB                   = 1
    const G_SOCKET_MSG_PEEK                  = 2
    const G_SOCKET_MSG_DONTROUTE             = 4
    const G_SOCKET_PROTOCOL_UNKNOWN          = -1
    const G_SOCKET_PROTOCOL_DEFAULT          = 0
    const G_SOCKET_PROTOCOL_TCP              = 6
    const G_SOCKET_PROTOCOL_UDP              = 17
    const G_SOCKET_PROTOCOL_SCTP             = 132
    const G_ZLIB_COMPRESSOR_FORMAT_ZLIB      = 0
    const G_ZLIB_COMPRESSOR_FORMAT_GZIP      = 1
    const G_ZLIB_COMPRESSOR_FORMAT_RAW       = 2
    const G_UNIX_SOCKET_ADDRESS_INVALID      = 0
    const G_UNIX_SOCKET_ADDRESS_ANONYMOUS    = 1
    const G_UNIX_SOCKET_ADDRESS_PATH         = 2
    const G_UNIX_SOCKET_ADDRESS_ABSTRACT     = 3
    const G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED = 4
    const G_BUS_TYPE_STARTER                 = -1
    const G_BUS_TYPE_NONE                    = 0
    const G_BUS_TYPE_SYSTEM                  = 1
    const G_BUS_TYPE_SESSION                 = 2
    const G_BUS_NAME_OWNER_FLAGS_NONE        = 0
    const G_BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT = 1
    const G_BUS_NAME_OWNER_FLAGS_REPLACE     = 2
    const G_BUS_NAME_WATCHER_FLAGS_NONE      = 0
    const G_BUS_NAME_WATCHER_FLAGS_AUTO_START = 1
    const G_DBUS_PROXY_FLAGS_NONE            = 0
    const G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES = 1
    const G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS = 2
    const G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START = 4
    const G_DBUS_PROXY_FLAGS_GET_INVALIDATED_PROPERTIES = 8
    const G_DBUS_ERROR_FAILED                = 0
    const G_DBUS_ERROR_NO_MEMORY             = 1
    const G_DBUS_ERROR_SERVICE_UNKNOWN       = 2
    const G_DBUS_ERROR_NAME_HAS_NO_OWNER     = 3
    const G_DBUS_ERROR_NO_REPLY              = 4
    const G_DBUS_ERROR_IO_ERROR              = 5
    const G_DBUS_ERROR_BAD_ADDRESS           = 6
    const G_DBUS_ERROR_NOT_SUPPORTED         = 7
    const G_DBUS_ERROR_LIMITS_EXCEEDED       = 8
    const G_DBUS_ERROR_ACCESS_DENIED         = 9
    const G_DBUS_ERROR_AUTH_FAILED           = 10
    const G_DBUS_ERROR_NO_SERVER             = 11
    const G_DBUS_ERROR_TIMEOUT               = 12
    const G_DBUS_ERROR_NO_NETWORK            = 13
    const G_DBUS_ERROR_ADDRESS_IN_USE        = 14
    const G_DBUS_ERROR_DISCONNECTED          = 15
    const G_DBUS_ERROR_INVALID_ARGS          = 16
    const G_DBUS_ERROR_FILE_NOT_FOUND        = 17
    const G_DBUS_ERROR_FILE_EXISTS           = 18
    const G_DBUS_ERROR_UNKNOWN_METHOD        = 19
    const G_DBUS_ERROR_TIMED_OUT             = 20
    const G_DBUS_ERROR_MATCH_RULE_NOT_FOUND  = 21
    const G_DBUS_ERROR_MATCH_RULE_INVALID    = 22
    const G_DBUS_ERROR_SPAWN_EXEC_FAILED     = 23
    const G_DBUS_ERROR_SPAWN_FORK_FAILED     = 24
    const G_DBUS_ERROR_SPAWN_CHILD_EXITED    = 25
    const G_DBUS_ERROR_SPAWN_CHILD_SIGNALED  = 26
    const G_DBUS_ERROR_SPAWN_FAILED          = 27
    const G_DBUS_ERROR_SPAWN_SETUP_FAILED    = 28
    const G_DBUS_ERROR_SPAWN_CONFIG_INVALID  = 29
    const G_DBUS_ERROR_SPAWN_SERVICE_INVALID = 30
    const G_DBUS_ERROR_SPAWN_SERVICE_NOT_FOUND = 31
    const G_DBUS_ERROR_SPAWN_PERMISSIONS_INVALID = 32
    const G_DBUS_ERROR_SPAWN_FILE_INVALID    = 33
    const G_DBUS_ERROR_SPAWN_NO_MEMORY       = 34
    const G_DBUS_ERROR_UNIX_PROCESS_ID_UNKNOWN = 35
    const G_DBUS_ERROR_INVALID_SIGNATURE     = 36
    const G_DBUS_ERROR_INVALID_FILE_CONTENT  = 37
    const G_DBUS_ERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN = 38
    const G_DBUS_ERROR_ADT_AUDIT_DATA_UNKNOWN = 39
    const G_DBUS_ERROR_OBJECT_PATH_IN_USE    = 40
    const G_DBUS_CONNECTION_FLAGS_NONE       = 0
    const G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_CLIENT = 1
    const G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER = 2
    const G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS = 4
    const G_DBUS_CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION = 8
    const G_DBUS_CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING = 16
    const G_DBUS_CAPABILITY_FLAGS_NONE       = 0
    const G_DBUS_CAPABILITY_FLAGS_UNIX_FD_PASSING = 1
    const G_DBUS_CALL_FLAGS_NONE             = 0
    const G_DBUS_CALL_FLAGS_NO_AUTO_START    = 1
    const G_DBUS_MESSAGE_TYPE_INVALID        = 0
    const G_DBUS_MESSAGE_TYPE_METHOD_CALL    = 1
    const G_DBUS_MESSAGE_TYPE_METHOD_RETURN  = 2
    const G_DBUS_MESSAGE_TYPE_ERROR          = 3
    const G_DBUS_MESSAGE_TYPE_SIGNAL         = 4
    const G_DBUS_MESSAGE_FLAGS_NONE          = 0
    const G_DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED = 1
    const G_DBUS_MESSAGE_FLAGS_NO_AUTO_START = 2
    const G_DBUS_MESSAGE_HEADER_FIELD_INVALID = 0
    const G_DBUS_MESSAGE_HEADER_FIELD_PATH   = 1
    const G_DBUS_MESSAGE_HEADER_FIELD_INTERFACE = 2
    const G_DBUS_MESSAGE_HEADER_FIELD_MEMBER = 3
    const G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME = 4
    const G_DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL = 5
    const G_DBUS_MESSAGE_HEADER_FIELD_DESTINATION = 6
    const G_DBUS_MESSAGE_HEADER_FIELD_SENDER = 7
    const G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE = 8
    const G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS = 9
    const G_DBUS_PROPERTY_INFO_FLAGS_NONE    = 0
    const G_DBUS_PROPERTY_INFO_FLAGS_READABLE = 1
    const G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE = 2
    const G_DBUS_SUBTREE_FLAGS_NONE          = 0
    const G_DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES = 1
    const G_DBUS_SERVER_FLAGS_NONE           = 0
    const G_DBUS_SERVER_FLAGS_RUN_IN_THREAD  = 1
    const G_DBUS_SERVER_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS = 2
    const G_DBUS_SIGNAL_FLAGS_NONE           = 0
    const G_DBUS_SIGNAL_FLAGS_NO_MATCH_RULE  = 1
    const G_DBUS_SEND_MESSAGE_FLAGS_NONE     = 0
    const G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL = 1
    const G_CREDENTIALS_TYPE_INVALID         = 0
    const G_CREDENTIALS_TYPE_LINUX_UCRED     = 1
    const G_CREDENTIALS_TYPE_FREEBSD_CMSGCRED = 2
    const G_CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED = 3
    const G_DBUS_MESSAGE_BYTE_ORDER_BIG_ENDIAN = 66
    const G_DBUS_MESSAGE_BYTE_ORDER_LITTLE_ENDIAN = 108
    const G_APPLICATION_FLAGS_NONE           = 0
    const G_APPLICATION_IS_SERVICE           = 1
    const G_APPLICATION_IS_LAUNCHER          = 2
    const G_APPLICATION_HANDLES_OPEN         = 4
    const G_APPLICATION_HANDLES_COMMAND_LINE = 8
    const G_APPLICATION_SEND_ENVIRONMENT     = 16
    const G_APPLICATION_NON_UNIQUE           = 32
    const G_TLS_ERROR_UNAVAILABLE            = 0
    const G_TLS_ERROR_MISC                   = 1
    const G_TLS_ERROR_BAD_CERTIFICATE        = 2
    const G_TLS_ERROR_NOT_TLS                = 3
    const G_TLS_ERROR_HANDSHAKE              = 4
    const G_TLS_ERROR_CERTIFICATE_REQUIRED   = 5
    const G_TLS_ERROR_EOF                    = 6
    const G_TLS_CERTIFICATE_UNKNOWN_CA       = 1
    const G_TLS_CERTIFICATE_BAD_IDENTITY     = 2
    const G_TLS_CERTIFICATE_NOT_ACTIVATED    = 4
    const G_TLS_CERTIFICATE_EXPIRED          = 8
    const G_TLS_CERTIFICATE_REVOKED          = 16
    const G_TLS_CERTIFICATE_INSECURE         = 32
    const G_TLS_CERTIFICATE_GENERIC_ERROR    = 64
    const G_TLS_CERTIFICATE_VALIDATE_ALL     = 127
    const G_TLS_AUTHENTICATION_NONE          = 0
    const G_TLS_AUTHENTICATION_REQUESTED     = 1
    const G_TLS_AUTHENTICATION_REQUIRED      = 2
    const G_TLS_REHANDSHAKE_NEVER            = 0
    const G_TLS_REHANDSHAKE_SAFELY           = 1
    const G_TLS_REHANDSHAKE_UNSAFELY         = 2
    const G_TLS_PASSWORD_NONE                = 0
    const G_TLS_PASSWORD_RETRY               = 2
    const G_TLS_PASSWORD_MANY_TRIES          = 4
    const G_TLS_PASSWORD_FINAL_TRY           = 8
    const G_TLS_INTERACTION_UNHANDLED        = 0
    const G_TLS_INTERACTION_HANDLED          = 1
    const G_TLS_INTERACTION_FAILED           = 2
    const G_DBUS_INTERFACE_SKELETON_FLAGS_NONE = 0
    const G_DBUS_INTERFACE_SKELETON_FLAGS_HANDLE_METHOD_INVOCATIONS_IN_THREAD = 1
    const G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_NONE = 0
    const G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_DO_NOT_AUTO_START = 1
    const G_TLS_DATABASE_VERIFY_NONE         = 0
    const G_TLS_DATABASE_LOOKUP_NONE         = 0
    const G_TLS_DATABASE_LOOKUP_KEYPAIR      = 1
    const G_IO_MODULE_SCOPE_NONE             = 0
    const G_IO_MODULE_SCOPE_BLOCK_DUPLICATES = 1
    const G_SOCKET_CLIENT_RESOLVING          = 0
    const G_SOCKET_CLIENT_RESOLVED           = 1
    const G_SOCKET_CLIENT_CONNECTING         = 2
    const G_SOCKET_CLIENT_CONNECTED          = 3
    const G_SOCKET_CLIENT_PROXY_NEGOTIATING  = 4
    const G_SOCKET_CLIENT_PROXY_NEGOTIATED   = 5
    const G_SOCKET_CLIENT_TLS_HANDSHAKING    = 6
    const G_SOCKET_CLIENT_TLS_HANDSHAKED     = 7
    const G_SOCKET_CLIENT_COMPLETE           = 8
    const G_TEST_DBUS_NONE                   = 0
    record _GAppLaunchContext =
        var _GObject parent_instance
        var ref _GAppLaunchContextPrivate priv
    end

    record _GAppInfo =
        var int dummy    !empty record
    end

    record _GAsyncResult =
        var int dummy    !empty record
    end

    record _GAsyncInitable =
        var int dummy    !empty record
    end

    record _GBufferedInputStream =
        var _GFilterInputStream parent_instance
        var ref _GBufferedInputStreamPrivate priv
    end

    record _GBufferedOutputStream =
        var _GFilterOutputStream parent_instance
        var ref _GBufferedOutputStreamPrivate priv
    end

    record _GCancellable =
        var _GObject parent_instance
        var ref _GCancellablePrivate priv
    end

    record _GCharsetConverter =
        var int dummy    !empty record
    end

    record _GConverter =
        var int dummy    !empty record
    end

    record _GConverterInputStream =
        var _GFilterInputStream parent_instance
        var ref _GConverterInputStreamPrivate priv
    end

    record _GConverterOutputStream =
        var _GFilterOutputStream parent_instance
        var ref _GConverterOutputStreamPrivate priv
    end

    record _GDataInputStream =
        var _GBufferedInputStream parent_instance
        var ref _GDataInputStreamPrivate priv
    end

    record _GSimplePermission =
        var int dummy    !empty record
    end

    record _GZlibCompressor =
        var int dummy    !empty record
    end

    record _GZlibDecompressor =
        var int dummy    !empty record
    end

    record _GSimpleActionGroup =
        var _GObject parent_instance
        var ref _GSimpleActionGroupPrivate priv
    end

    record _GRemoteActionGroup =
        var int dummy    !empty record
    end

    record _GDBusActionGroup =
        var int dummy    !empty record
    end

    record _GActionMap =
        var int dummy    !empty record
    end

    record _GActionGroup =
        var int dummy    !empty record
    end

    record _GSimpleAction =
        var int dummy    !empty record
    end

    record _GAction =
        var int dummy    !empty record
    end

    record _GApplication =
        var _GObject parent_instance
        var ref _GApplicationPrivate priv
    end

    record _GApplicationCommandLine =
        var _GObject parent_instance
        var ref _GApplicationCommandLinePrivate priv
    end

    record _GSettingsBackend =
        var int dummy    !empty record
    end

    record _GSettings =
        var _GObject parent_instance
        var ref _GSettingsPrivate priv
    end

    record _GPermission =
        var _GObject parent_instance
        var ref _GPermissionPrivate priv
    end

    record _GMenuModel =
        var _GObject parent_instance
        var ref _GMenuModelPrivate priv
    end

    record _GDrive =
        var int dummy    !empty record
    end

    record _GFileEnumerator =
        var _GObject parent_instance
        var ref _GFileEnumeratorPrivate priv
    end

    record _GFileMonitor =
        var _GObject parent_instance
        var ref _GFileMonitorPrivate priv
    end

    record _GFilterInputStream =
        var _GInputStream parent_instance
        var ref _GInputStream base_stream
    end

    record _GFilterOutputStream =
        var _GOutputStream parent_instance
        var ref _GOutputStream base_stream
    end

    record _GFile =
        var int dummy    !empty record
    end

    record _GFileInfo =
        var int dummy    !empty record
    end

    record _GFileAttributeMatcher =
        var int dummy    !empty record
    end

    record _GFileAttributeInfo =
        var ref i8 name
        var i32 type$
        var i32 flags
    end

    record _GFileAttributeInfoList =
        var ref _GFileAttributeInfo infos
        var i32 n_infos
    end

    record _GFileDescriptorBased =
        var int dummy    !empty record
    end

    record _GFileInputStream =
        var _GInputStream parent_instance
        var ref _GFileInputStreamPrivate priv
    end

    record _GFileOutputStream =
        var _GOutputStream parent_instance
        var ref _GFileOutputStreamPrivate priv
    end

    record _GFileIOStream =
        var _GIOStream parent_instance
        var ref _GFileIOStreamPrivate priv
    end

    record _GFileIcon =
        var int dummy    !empty record
    end

    record _GFilenameCompleter =
        var int dummy    !empty record
    end

    record _GIcon =
        var int dummy    !empty record
    end

    record _GInetAddress =
        var _GObject parent_instance
        var ref _GInetAddressPrivate priv
    end

    record _GInetAddressMask =
        var _GObject parent_instance
        var ref _GInetAddressMaskPrivate priv
    end

    record _GInetSocketAddress =
        var _GSocketAddress parent_instance
        var ref _GInetSocketAddressPrivate priv
    end

    record _GInputStream =
        var _GObject parent_instance
        var ref _GInputStreamPrivate priv
    end

    record _GInitable =
        var int dummy    !empty record
    end

    record _GIOModule =
        var int dummy    !empty record
    end

    record _GIOExtensionPoint =
        var int dummy    !empty record
    end

    record _GIOExtension =
        var int dummy    !empty record
    end

    record _GIOSchedulerJob =
        var int dummy    !empty record
    end

    record _GIOStreamAdapter =
        var int dummy    !empty record
    end

    record _GLoadableIcon =
        var int dummy    !empty record
    end

    record _GMemoryInputStream =
        var _GInputStream parent_instance
        var ref _GMemoryInputStreamPrivate priv
    end

    record _GMemoryOutputStream =
        var _GOutputStream parent_instance
        var ref _GMemoryOutputStreamPrivate priv
    end

    record _GMount =
        var int dummy    !empty record
    end

    record _GMountOperation =
        var _GObject parent_instance
        var ref _GMountOperationPrivate priv
    end

    record _GNetworkAddress =
        var _GObject parent_instance
        var ref _GNetworkAddressPrivate priv
    end

    record _GNetworkMonitor =
        var int dummy    !empty record
    end

    record _GNetworkService =
        var _GObject parent_instance
        var ref _GNetworkServicePrivate priv
    end

    record _GOutputStream =
        var _GObject parent_instance
        var ref _GOutputStreamPrivate priv
    end

    record _GIOStream =
        var _GObject parent_instance
        var ref _GIOStreamPrivate priv
    end

    record _GPollableInputStream =
        var int dummy    !empty record
    end

    record _GPollableOutputStream =
        var int dummy    !empty record
    end

    record _GResolver =
        var _GObject parent_instance
        var ref _GResolverPrivate priv
    end

    record _GResource =
        var int dummy    !empty record
    end

    record _GSeekable =
        var int dummy    !empty record
    end

    record _GSimpleAsyncResult =
        var int dummy    !empty record
    end

    record _GSocket =
        var _GObject parent_instance
        var ref _GSocketPrivate priv
    end

    record _GSocketControlMessage =
        var _GObject parent_instance
        var ref _GSocketControlMessagePrivate priv
    end

    record _GSocketClient =
        var _GObject parent_instance
        var ref _GSocketClientPrivate priv
    end

    record _GSocketConnection =
        var _GIOStream parent_instance
        var ref _GSocketConnectionPrivate priv
    end

    record _GSocketListener =
        var _GObject parent_instance
        var ref _GSocketListenerPrivate priv
    end

    record _GSocketService =
        var _GSocketListener parent_instance
        var ref _GSocketServicePrivate priv
    end

    record _GSocketAddress =
        var _GObject parent_instance
    end

    record _GSocketAddressEnumerator =
        var _GObject parent_instance
    end

    record _GSocketConnectable =
        var int dummy    !empty record
    end

    record _GSrvTarget =
        var int dummy    !empty record
    end

    record _GTcpConnection =
        var _GSocketConnection parent_instance
        var ref _GTcpConnectionPrivate priv
    end

    record _GTcpWrapperConnection =
        var _GTcpConnection parent_instance
        var ref _GTcpWrapperConnectionPrivate priv
    end

    record _GThreadedSocketService =
        var _GSocketService parent_instance
        var ref _GThreadedSocketServicePrivate priv
    end

    record _GThemedIcon =
        var int dummy    !empty record
    end

    record _GTlsCertificate =
        var _GObject parent_instance
        var ref _GTlsCertificatePrivate priv
    end

    record _GTlsClientConnection =
        var int dummy    !empty record
    end

    record _GTlsConnection =
        var _GIOStream parent_instance
        var ref _GTlsConnectionPrivate priv
    end

    record _GTlsDatabase =
        var _GObject parent_instance
        var ref _GTlsDatabasePrivate priv
    end

    record _GTlsFileDatabase =
        var int dummy    !empty record
    end

    record _GTlsInteraction =
        var _GObject parent_instance
        var ref _GTlsInteractionPrivate priv
    end

    record _GTlsPassword =
        var _GObject parent_instance
        var ref _GTlsPasswordPrivate priv
    end

    record _GTlsServerConnection =
        var int dummy    !empty record
    end

    record _GVfs =
        var _GObject parent_instance
    end

    record _GProxyResolver =
        var int dummy    !empty record
    end

    record _GProxy =
        var int dummy    !empty record
    end

    record _GProxyAddress =
        var _GInetSocketAddress parent_instance
        var ref _GProxyAddressPrivate priv
    end

    record _GProxyAddressEnumerator =
        var _GSocketAddressEnumerator parent_instance
        var ref _GProxyAddressEnumeratorPrivate priv
    end

    record _GVolume =
        var int dummy    !empty record
    end

    record _GVolumeMonitor =
        var _GObject parent_instance
        var ref void priv
    end

    record _GInputVector =
        var ref void buffer
        var u64 size
    end

    record _GOutputVector =
        var ref void buffer
        var u64 size
    end

    record _GCredentials =
        var int dummy    !empty record
    end

    record _GUnixCredentialsMessage =
        var int dummy    !empty record
    end

    record _GUnixFDList =
        var int dummy    !empty record
    end

    record _GDBusMessage =
        var int dummy    !empty record
    end

    record _GDBusConnection =
        var int dummy    !empty record
    end

    record _GDBusProxy =
        var _GObject parent_instance
        var ref _GDBusProxyPrivate priv
    end

    record _GDBusMethodInvocation =
        var int dummy    !empty record
    end

    record _GDBusServer =
        var int dummy    !empty record
    end

    record _GDBusAuthObserver =
        var int dummy    !empty record
    end

    record _GDBusErrorEntry =
        var i32 error_code
        var ref i8 dbus_error_name
    end

    record _GDBusInterfaceVTable =
        var ref clang proc(ref _GDBusConnection,ref i8,ref i8,ref i8,ref i8,ref _GVariant,ref _GDBusMethodInvocation,ref void) method_call
        var ref clang function(ref _GDBusConnection,ref i8,ref i8,ref i8,ref i8,ref ref _GError,ref void)ref _GVariant get_property
        var ref clang function(ref _GDBusConnection,ref i8,ref i8,ref i8,ref i8,ref _GVariant,ref ref _GError,ref void)i32 set_property
        var [8]ref void padding
    end

    record _GDBusSubtreeVTable =
        var ref clang function(ref _GDBusConnection,ref i8,ref i8,ref void)ref ref i8 enumerate
        var ref clang function(ref _GDBusConnection,ref i8,ref i8,ref i8,ref void)ref ref _GDBusInterfaceInfo introspect
        var ref clang function(ref _GDBusConnection,ref i8,ref i8,ref i8,ref i8,ref ref void,ref void)ref _GDBusInterfaceVTable dispatch
        var [8]ref void padding
    end

    record _GDBusAnnotationInfo =
        var i32 ref_count
        var ref i8 key
        var ref i8 value
        var ref ref _GDBusAnnotationInfo annotations
    end

    record _GDBusArgInfo =
        var i32 ref_count
        var ref i8 name
        var ref i8 signature
        var ref ref _GDBusAnnotationInfo annotations
    end

    record _GDBusMethodInfo =
        var i32 ref_count
        var ref i8 name
        var ref ref _GDBusArgInfo in_args
        var ref ref _GDBusArgInfo out_args
        var ref ref _GDBusAnnotationInfo annotations
    end

    record _GDBusSignalInfo =
        var i32 ref_count
        var ref i8 name
        var ref ref _GDBusArgInfo args
        var ref ref _GDBusAnnotationInfo annotations
    end

    record _GDBusPropertyInfo =
        var i32 ref_count
        var ref i8 name
        var ref i8 signature
        var i32 flags
        var ref ref _GDBusAnnotationInfo annotations
    end

    record _GDBusInterfaceInfo =
        var i32 ref_count
        var ref i8 name
        var ref ref _GDBusMethodInfo methods
        var ref ref _GDBusSignalInfo signals
        var ref ref _GDBusPropertyInfo properties
        var ref ref _GDBusAnnotationInfo annotations
    end

    record _GDBusNodeInfo =
        var i32 ref_count
        var ref i8 path
        var ref ref _GDBusInterfaceInfo interfaces
        var ref ref _GDBusNodeInfo nodes
        var ref ref _GDBusAnnotationInfo annotations
    end

    record _GDBusInterface =
        var int dummy    !empty record
    end

    record _GDBusInterfaceSkeleton =
        var _GObject parent_instance
        var ref _GDBusInterfaceSkeletonPrivate priv
    end

    record _GDBusObject =
        var int dummy    !empty record
    end

    record _GDBusObjectSkeleton =
        var _GObject parent_instance
        var ref _GDBusObjectSkeletonPrivate priv
    end

    record _GDBusObjectProxy =
        var _GObject parent_instance
        var ref _GDBusObjectProxyPrivate priv
    end

    record _GDBusObjectManager =
        var int dummy    !empty record
    end

    record _GDBusObjectManagerClient =
        var _GObject parent_instance
        var ref _GDBusObjectManagerClientPrivate priv
    end

    record _GDBusObjectManagerServer =
        var _GObject parent_instance
        var ref _GDBusObjectManagerServerPrivate priv
    end

    record _GTestDBus =
        var int dummy    !empty record
    end

    record _GActionInterface =
        var _GTypeInterface g_iface
        var ref clang function(ref _GAction)ref i8 get_name
        var ref clang function(ref _GAction)ref _GVariantType get_parameter_type
        var ref clang function(ref _GAction)ref _GVariantType get_state_type
        var ref clang function(ref _GAction)ref _GVariant get_state_hint
        var ref clang function(ref _GAction)i32 get_enabled
        var ref clang function(ref _GAction)ref _GVariant get_state
        var ref clang proc(ref _GAction,ref _GVariant) change_state
        var ref clang proc(ref _GAction,ref _GVariant) activate
    end

    clang function "g_action_get_type"                 ()u64
    clang function "g_action_get_name"                 (ref _GAction)ref i8
    clang function "g_action_get_parameter_type"       (ref _GAction)ref _GVariantType
    clang function "g_action_get_state_type"           (ref _GAction)ref _GVariantType
    clang function "g_action_get_state_hint"           (ref _GAction)ref _GVariant
    clang function "g_action_get_enabled"              (ref _GAction)i32
    clang function "g_action_get_state"                (ref _GAction)ref _GVariant
    clang proc     "g_action_change_state"             (ref _GAction,ref _GVariant)
    clang proc     "g_action_activate"                 (ref _GAction,ref _GVariant)
    record _GActionGroupInterface =
        var _GTypeInterface g_iface
        var ref clang function(ref _GActionGroup,ref i8)i32 has_action
        var ref clang function(ref _GActionGroup)ref ref i8 list_actions
        var ref clang function(ref _GActionGroup,ref i8)i32 get_action_enabled
        var ref clang function(ref _GActionGroup,ref i8)ref _GVariantType get_action_parameter_type
        var ref clang function(ref _GActionGroup,ref i8)ref _GVariantType get_action_state_type
        var ref clang function(ref _GActionGroup,ref i8)ref _GVariant get_action_state_hint
        var ref clang function(ref _GActionGroup,ref i8)ref _GVariant get_action_state
        var ref clang proc(ref _GActionGroup,ref i8,ref _GVariant) change_action_state
        var ref clang proc(ref _GActionGroup,ref i8,ref _GVariant) activate_action
        var ref clang proc(ref _GActionGroup,ref i8) action_added
        var ref clang proc(ref _GActionGroup,ref i8) action_removed
        var ref clang proc(ref _GActionGroup,ref i8,i32) action_enabled_changed
        var ref clang proc(ref _GActionGroup,ref i8,ref _GVariant) action_state_changed
        var ref clang function(ref _GActionGroup,ref i8,ref i32,ref ref _GVariantType,ref ref _GVariantType,ref ref _GVariant,ref ref _GVariant)i32 query_action
    end

    clang function "g_action_group_get_type"           ()u64
    clang function "g_action_group_has_action"         (ref _GActionGroup,ref i8)i32
    clang function "g_action_group_list_actions"       (ref _GActionGroup)ref ref i8
    clang function "g_action_group_get_action_parameter_type" (ref _GActionGroup,ref i8)ref _GVariantType
    clang function "g_action_group_get_action_state_type" (ref _GActionGroup,ref i8)ref _GVariantType
    clang function "g_action_group_get_action_state_hint" (ref _GActionGroup,ref i8)ref _GVariant
    clang function "g_action_group_get_action_enabled" (ref _GActionGroup,ref i8)i32
    clang function "g_action_group_get_action_state"   (ref _GActionGroup,ref i8)ref _GVariant
    clang proc     "g_action_group_change_action_state" (ref _GActionGroup,ref i8,ref _GVariant)
    clang proc     "g_action_group_activate_action"    (ref _GActionGroup,ref i8,ref _GVariant)
    clang proc     "g_action_group_action_added"       (ref _GActionGroup,ref i8)
    clang proc     "g_action_group_action_removed"     (ref _GActionGroup,ref i8)
    clang proc     "g_action_group_action_enabled_changed" (ref _GActionGroup,ref i8,i32)
    clang proc     "g_action_group_action_state_changed" (ref _GActionGroup,ref i8,ref _GVariant)
    clang function "g_action_group_query_action"       (ref _GActionGroup,ref i8,ref i32,ref ref _GVariantType,ref ref _GVariantType,ref ref _GVariant,ref ref _GVariant)i32
    clang function "g_dbus_connection_export_action_group" (ref _GDBusConnection,ref i8,ref _GActionGroup,ref ref _GError)u32
    clang proc     "g_dbus_connection_unexport_action_group" (ref _GDBusConnection,u32)
    record _GActionMapInterface =
        var _GTypeInterface g_iface
        var ref clang function(ref _GActionMap,ref i8)ref _GAction lookup_action
        var ref clang proc(ref _GActionMap,ref _GAction) add_action
        var ref clang proc(ref _GActionMap,ref i8) remove_action
    end

    record _GActionEntry =
        var ref i8 name
        var ref clang proc(ref _GSimpleAction,ref _GVariant,ref void) activate
        var ref i8 parameter_type
        var ref i8 state
        var ref clang proc(ref _GSimpleAction,ref _GVariant,ref void) change_state
        var [3]u64 padding
    end

    clang function "g_action_map_get_type"             ()u64
    clang function "g_action_map_lookup_action"        (ref _GActionMap,ref i8)ref _GAction
    clang proc     "g_action_map_add_action"           (ref _GActionMap,ref _GAction)
    clang proc     "g_action_map_remove_action"        (ref _GActionMap,ref i8)
    clang proc     "g_action_map_add_action_entries"   (ref _GActionMap,ref _GActionEntry,i32,ref void)
    record _GAppLaunchContextClass =
        var _GObjectClass parent_class
        var ref clang function(ref _GAppLaunchContext,ref _GAppInfo,ref _GList)ref i8 get_display
        var ref clang function(ref _GAppLaunchContext,ref _GAppInfo,ref _GList)ref i8 get_startup_notify_id
        var ref clang proc(ref _GAppLaunchContext,ref i8) launch_failed
        var ref clang proc() _g_reserved1
        var ref clang proc() _g_reserved2
        var ref clang proc() _g_reserved3
        var ref clang proc() _g_reserved4
        var ref clang proc() _g_reserved5
    end

    record _GAppLaunchContextPrivate =
        var int dummy    !empty record
    end

    record _GAppInfoIface =
        var _GTypeInterface g_iface
        var ref clang function(ref _GAppInfo)ref _GAppInfo dup
        var ref clang function(ref _GAppInfo,ref _GAppInfo)i32 equal
        var ref clang function(ref _GAppInfo)ref i8 get_id
        var ref clang function(ref _GAppInfo)ref i8 get_name
        var ref clang function(ref _GAppInfo)ref i8 get_description
        var ref clang function(ref _GAppInfo)ref i8 get_executable
        var ref clang function(ref _GAppInfo)ref _GIcon get_icon
        var ref clang function(ref _GAppInfo,ref _GList,ref _GAppLaunchContext,ref ref _GError)i32 launch
        var ref clang function(ref _GAppInfo)i32 supports_uris
        var ref clang function(ref _GAppInfo)i32 supports_files
        var ref clang function(ref _GAppInfo,ref _GList,ref _GAppLaunchContext,ref ref _GError)i32 launch_uris
        var ref clang function(ref _GAppInfo)i32 should_show
        var ref clang function(ref _GAppInfo,ref i8,ref ref _GError)i32 set_as_default_for_type
        var ref clang function(ref _GAppInfo,ref i8,ref ref _GError)i32 set_as_default_for_extension
        var ref clang function(ref _GAppInfo,ref i8,ref ref _GError)i32 add_supports_type
        var ref clang function(ref _GAppInfo)i32 can_remove_supports_type
        var ref clang function(ref _GAppInfo,ref i8,ref ref _GError)i32 remove_supports_type
        var ref clang function(ref _GAppInfo)i32 can_delete
        var ref clang function(ref _GAppInfo)i32 do_delete
        var ref clang function(ref _GAppInfo)ref i8 get_commandline
        var ref clang function(ref _GAppInfo)ref i8 get_display_name
        var ref clang function(ref _GAppInfo,ref i8,ref ref _GError)i32 set_as_last_used_for_type
        var ref clang function(ref _GAppInfo)ref ref i8 get_supported_types
    end

    clang function "g_app_info_get_type"               ()u64
    clang function "g_app_info_create_from_commandline" (ref i8,ref i8,i32,ref ref _GError)ref _GAppInfo
    clang function "g_app_info_dup"                    (ref _GAppInfo)ref _GAppInfo
    clang function "g_app_info_equal"                  (ref _GAppInfo,ref _GAppInfo)i32
    clang function "g_app_info_get_id"                 (ref _GAppInfo)ref i8
    clang function "g_app_info_get_name"               (ref _GAppInfo)ref i8
    clang function "g_app_info_get_display_name"       (ref _GAppInfo)ref i8
    clang function "g_app_info_get_description"        (ref _GAppInfo)ref i8
    clang function "g_app_info_get_executable"         (ref _GAppInfo)ref i8
    clang function "g_app_info_get_commandline"        (ref _GAppInfo)ref i8
    clang function "g_app_info_get_icon"               (ref _GAppInfo)ref _GIcon
    clang function "g_app_info_launch"                 (ref _GAppInfo,ref _GList,ref _GAppLaunchContext,ref ref _GError)i32
    clang function "g_app_info_supports_uris"          (ref _GAppInfo)i32
    clang function "g_app_info_supports_files"         (ref _GAppInfo)i32
    clang function "g_app_info_launch_uris"            (ref _GAppInfo,ref _GList,ref _GAppLaunchContext,ref ref _GError)i32
    clang function "g_app_info_should_show"            (ref _GAppInfo)i32
    clang function "g_app_info_set_as_default_for_type" (ref _GAppInfo,ref i8,ref ref _GError)i32
    clang function "g_app_info_set_as_default_for_extension" (ref _GAppInfo,ref i8,ref ref _GError)i32
    clang function "g_app_info_add_supports_type"      (ref _GAppInfo,ref i8,ref ref _GError)i32
    clang function "g_app_info_can_remove_supports_type" (ref _GAppInfo)i32
    clang function "g_app_info_remove_supports_type"   (ref _GAppInfo,ref i8,ref ref _GError)i32
    clang function "g_app_info_get_supported_types"    (ref _GAppInfo)ref ref i8
    clang function "g_app_info_can_delete"             (ref _GAppInfo)i32
    clang function "g_app_info_delete"                 (ref _GAppInfo)i32
    clang function "g_app_info_set_as_last_used_for_type" (ref _GAppInfo,ref i8,ref ref _GError)i32
    clang function "g_app_info_get_all"                ()ref _GList
    clang function "g_app_info_get_all_for_type"       (ref i8)ref _GList
    clang function "g_app_info_get_recommended_for_type" (ref i8)ref _GList
    clang function "g_app_info_get_fallback_for_type"  (ref i8)ref _GList
    clang proc     "g_app_info_reset_type_associations" (ref i8)
    clang function "g_app_info_get_default_for_type"   (ref i8,i32)ref _GAppInfo
    clang function "g_app_info_get_default_for_uri_scheme" (ref i8)ref _GAppInfo
    clang function "g_app_info_launch_default_for_uri" (ref i8,ref _GAppLaunchContext,ref ref _GError)i32
    clang function "g_app_launch_context_get_type"     ()u64
    clang function "g_app_launch_context_new"          ()ref _GAppLaunchContext
    clang proc     "g_app_launch_context_setenv"       (ref _GAppLaunchContext,ref i8,ref i8)
    clang proc     "g_app_launch_context_unsetenv"     (ref _GAppLaunchContext,ref i8)
    clang function "g_app_launch_context_get_environment" (ref _GAppLaunchContext)ref ref i8
    clang function "g_app_launch_context_get_display"  (ref _GAppLaunchContext,ref _GAppInfo,ref _GList)ref i8
    clang function "g_app_launch_context_get_startup_notify_id" (ref _GAppLaunchContext,ref _GAppInfo,ref _GList)ref i8
    clang proc     "g_app_launch_context_launch_failed" (ref _GAppLaunchContext,ref i8)
    record _GApplicationPrivate =
        var int dummy    !empty record
    end

    record _GApplicationClass =
        var _GObjectClass parent_class
        var ref clang proc(ref _GApplication) startup
        var ref clang proc(ref _GApplication) activate
        var ref clang proc(ref _GApplication,ref ref _GFile,i32,ref i8) open
        var ref clang function(ref _GApplication,ref _GApplicationCommandLine)i32 command_line
        var ref clang function(ref _GApplication,ref ref ref i8,ref i32)i32 local_command_line
        var ref clang proc(ref _GApplication,ref _GVariant) before_emit
        var ref clang proc(ref _GApplication,ref _GVariant) after_emit
        var ref clang proc(ref _GApplication,ref _GVariantBuilder) add_platform_data
        var ref clang proc(ref _GApplication) quit_mainloop
        var ref clang proc(ref _GApplication) run_mainloop
        var ref clang proc(ref _GApplication) shutdown
        var ref clang function(ref _GApplication,ref _GDBusConnection,ref i8,ref ref _GError)i32 dbus_register
        var ref clang proc(ref _GApplication,ref _GDBusConnection,ref i8) dbus_unregister
        var [9]ref void padding
    end

    clang function "g_application_get_type"            ()u64
    clang function "g_application_id_is_valid"         (ref i8)i32
    clang function "g_application_new"                 (ref i8,i32)ref _GApplication
    clang function "g_application_get_application_id"  (ref _GApplication)ref i8
    clang proc     "g_application_set_application_id"  (ref _GApplication,ref i8)
    clang function "g_application_get_dbus_connection" (ref _GApplication)ref _GDBusConnection
    clang function "g_application_get_dbus_object_path" (ref _GApplication)ref i8
    clang function "g_application_get_inactivity_timeout" (ref _GApplication)u32
    clang proc     "g_application_set_inactivity_timeout" (ref _GApplication,u32)
    clang function "g_application_get_flags"           (ref _GApplication)i32
    clang proc     "g_application_set_flags"           (ref _GApplication,i32)
    clang proc     "g_application_set_action_group"    (ref _GApplication,ref _GActionGroup)
    clang function "g_application_get_is_registered"   (ref _GApplication)i32
    clang function "g_application_get_is_remote"       (ref _GApplication)i32
    clang function "g_application_register"            (ref _GApplication,ref _GCancellable,ref ref _GError)i32
    clang proc     "g_application_hold"                (ref _GApplication)
    clang proc     "g_application_release"             (ref _GApplication)
    clang proc     "g_application_activate"            (ref _GApplication)
    clang proc     "g_application_open"                (ref _GApplication,ref ref _GFile,i32,ref i8)
    clang function "g_application_run"                 (ref _GApplication,i32,ref ref i8)i32
    clang proc     "g_application_quit"                (ref _GApplication)
    clang function "g_application_get_default"         ()ref _GApplication
    clang proc     "g_application_set_default"         (ref _GApplication)
    record _GApplicationCommandLinePrivate =
        var int dummy    !empty record
    end

    record _GApplicationCommandLineClass =
        var _GObjectClass parent_class
        var ref clang proc(ref _GApplicationCommandLine,ref i8) print_literal
        var ref clang proc(ref _GApplicationCommandLine,ref i8) printerr_literal
        var [12]ref void padding
    end

    clang function "g_application_command_line_get_type" ()u64
    clang function "g_application_command_line_get_arguments" (ref _GApplicationCommandLine,ref i32)ref ref i8
    clang function "g_application_command_line_get_environ" (ref _GApplicationCommandLine)ref ref i8
    clang function "g_application_command_line_getenv" (ref _GApplicationCommandLine,ref i8)ref i8
    clang function "g_application_command_line_get_cwd" (ref _GApplicationCommandLine)ref i8
    clang function "g_application_command_line_get_is_remote" (ref _GApplicationCommandLine)i32
    clang proc     "g_application_command_line_print"  (ref _GApplicationCommandLine,ref i8,...)
    clang proc     "g_application_command_line_printerr" (ref _GApplicationCommandLine,ref i8,...)
    clang function "g_application_command_line_get_exit_status" (ref _GApplicationCommandLine)i32
    clang proc     "g_application_command_line_set_exit_status" (ref _GApplicationCommandLine,i32)
    clang function "g_application_command_line_get_platform_data" (ref _GApplicationCommandLine)ref _GVariant
    record _GInitableIface =
        var _GTypeInterface g_iface
        var ref clang function(ref _GInitable,ref _GCancellable,ref ref _GError)i32 init
    end

    clang function "g_initable_get_type"               ()u64
    clang function "g_initable_init"                   (ref _GInitable,ref _GCancellable,ref ref _GError)i32
    clang function "g_initable_new"                    (u64,ref _GCancellable,ref ref _GError,ref i8,...)ref void
    clang function "g_initable_newv"                   (u64,u32,ref _GParameter,ref _GCancellable,ref ref _GError)ref void
    clang function "g_initable_new_valist"             (u64,ref i8,ref i8,ref _GCancellable,ref ref _GError)ref _GObject
    record _GAsyncInitableIface =
        var _GTypeInterface g_iface
        var ref clang proc(ref _GAsyncInitable,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) init_async
        var ref clang function(ref _GAsyncInitable,ref _GAsyncResult,ref ref _GError)i32 init_finish
    end

    clang function "g_async_initable_get_type"         ()u64
    clang proc     "g_async_initable_init_async"       (ref _GAsyncInitable,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_async_initable_init_finish"      (ref _GAsyncInitable,ref _GAsyncResult,ref ref _GError)i32
    clang proc     "g_async_initable_new_async"        (u64,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void,ref i8,...)
    clang proc     "g_async_initable_newv_async"       (u64,u32,ref _GParameter,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang proc     "g_async_initable_new_valist_async" (u64,ref i8,ref i8,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_async_initable_new_finish"       (ref _GAsyncInitable,ref _GAsyncResult,ref ref _GError)ref _GObject
    record _GAsyncResultIface =
        var _GTypeInterface g_iface
        var ref clang function(ref _GAsyncResult)ref void get_user_data
        var ref clang function(ref _GAsyncResult)ref _GObject get_source_object
        var ref clang function(ref _GAsyncResult,ref void)i32 is_tagged
    end

    clang function "g_async_result_get_type"           ()u64
    clang function "g_async_result_get_user_data"      (ref _GAsyncResult)ref void
    clang function "g_async_result_get_source_object"  (ref _GAsyncResult)ref _GObject
    clang function "g_async_result_legacy_propagate_error" (ref _GAsyncResult,ref ref _GError)i32
    clang function "g_async_result_is_tagged"          (ref _GAsyncResult,ref void)i32
    record _GInputStreamClass =
        var _GObjectClass parent_class
        var ref clang function(ref _GInputStream,ref void,u64,ref _GCancellable,ref ref _GError)i64 read_fn
        var ref clang function(ref _GInputStream,u64,ref _GCancellable,ref ref _GError)i64 skip
        var ref clang function(ref _GInputStream,ref _GCancellable,ref ref _GError)i32 close_fn
        var ref clang proc(ref _GInputStream,ref void,u64,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) read_async
        var ref clang function(ref _GInputStream,ref _GAsyncResult,ref ref _GError)i64 read_finish
        var ref clang proc(ref _GInputStream,u64,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) skip_async
        var ref clang function(ref _GInputStream,ref _GAsyncResult,ref ref _GError)i64 skip_finish
        var ref clang proc(ref _GInputStream,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) close_async
        var ref clang function(ref _GInputStream,ref _GAsyncResult,ref ref _GError)i32 close_finish
        var ref clang proc() _g_reserved1
        var ref clang proc() _g_reserved2
        var ref clang proc() _g_reserved3
        var ref clang proc() _g_reserved4
        var ref clang proc() _g_reserved5
    end

    record _GInputStreamPrivate =
        var int dummy    !empty record
    end

    clang function "g_input_stream_get_type"           ()u64
    clang function "g_input_stream_read"               (ref _GInputStream,ref void,u64,ref _GCancellable,ref ref _GError)i64
    clang function "g_input_stream_read_all"           (ref _GInputStream,ref void,u64,ref u64,ref _GCancellable,ref ref _GError)i32
    clang function "g_input_stream_read_bytes"         (ref _GInputStream,u64,ref _GCancellable,ref ref _GError)ref _GBytes
    clang function "g_input_stream_skip"               (ref _GInputStream,u64,ref _GCancellable,ref ref _GError)i64
    clang function "g_input_stream_close"              (ref _GInputStream,ref _GCancellable,ref ref _GError)i32
    clang proc     "g_input_stream_read_async"         (ref _GInputStream,ref void,u64,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_input_stream_read_finish"        (ref _GInputStream,ref _GAsyncResult,ref ref _GError)i64
    clang proc     "g_input_stream_read_bytes_async"   (ref _GInputStream,u64,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_input_stream_read_bytes_finish"  (ref _GInputStream,ref _GAsyncResult,ref ref _GError)ref _GBytes
    clang proc     "g_input_stream_skip_async"         (ref _GInputStream,u64,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_input_stream_skip_finish"        (ref _GInputStream,ref _GAsyncResult,ref ref _GError)i64
    clang proc     "g_input_stream_close_async"        (ref _GInputStream,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_input_stream_close_finish"       (ref _GInputStream,ref _GAsyncResult,ref ref _GError)i32
    clang function "g_input_stream_is_closed"          (ref _GInputStream)i32
    clang function "g_input_stream_has_pending"        (ref _GInputStream)i32
    clang function "g_input_stream_set_pending"        (ref _GInputStream,ref ref _GError)i32
    clang proc     "g_input_stream_clear_pending"      (ref _GInputStream)
    record _GFilterInputStreamClass =
        var _GInputStreamClass parent_class
        var ref clang proc() _g_reserved1
        var ref clang proc() _g_reserved2
        var ref clang proc() _g_reserved3
    end

    clang function "g_filter_input_stream_get_type"    ()u64
    clang function "g_filter_input_stream_get_base_stream" (ref _GFilterInputStream)ref _GInputStream
    clang function "g_filter_input_stream_get_close_base_stream" (ref _GFilterInputStream)i32
    clang proc     "g_filter_input_stream_set_close_base_stream" (ref _GFilterInputStream,i32)
    record _GBufferedInputStreamClass =
        var _GFilterInputStreamClass parent_class
        var ref clang function(ref _GBufferedInputStream,i64,ref _GCancellable,ref ref _GError)i64 fill
        var ref clang proc(ref _GBufferedInputStream,i64,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) fill_async
        var ref clang function(ref _GBufferedInputStream,ref _GAsyncResult,ref ref _GError)i64 fill_finish
        var ref clang proc() _g_reserved1
        var ref clang proc() _g_reserved2
        var ref clang proc() _g_reserved3
        var ref clang proc() _g_reserved4
        var ref clang proc() _g_reserved5
    end

    record _GBufferedInputStreamPrivate =
        var int dummy    !empty record
    end

    clang function "g_buffered_input_stream_get_type"  ()u64
    clang function "g_buffered_input_stream_new"       (ref _GInputStream)ref _GInputStream
    clang function "g_buffered_input_stream_new_sized" (ref _GInputStream,u64)ref _GInputStream
    clang function "g_buffered_input_stream_get_buffer_size" (ref _GBufferedInputStream)u64
    clang proc     "g_buffered_input_stream_set_buffer_size" (ref _GBufferedInputStream,u64)
    clang function "g_buffered_input_stream_get_available" (ref _GBufferedInputStream)u64
    clang function "g_buffered_input_stream_peek"      (ref _GBufferedInputStream,ref void,u64,u64)u64
    clang function "g_buffered_input_stream_peek_buffer" (ref _GBufferedInputStream,ref u64)ref void
    clang function "g_buffered_input_stream_fill"      (ref _GBufferedInputStream,i64,ref _GCancellable,ref ref _GError)i64
    clang proc     "g_buffered_input_stream_fill_async" (ref _GBufferedInputStream,i64,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_buffered_input_stream_fill_finish" (ref _GBufferedInputStream,ref _GAsyncResult,ref ref _GError)i64
    clang function "g_buffered_input_stream_read_byte" (ref _GBufferedInputStream,ref _GCancellable,ref ref _GError)i32
    record _GOutputStreamClass =
        var _GObjectClass parent_class
        var ref clang function(ref _GOutputStream,ref void,u64,ref _GCancellable,ref ref _GError)i64 write_fn
        var ref clang function(ref _GOutputStream,ref _GInputStream,i32,ref _GCancellable,ref ref _GError)i64 splice
        var ref clang function(ref _GOutputStream,ref _GCancellable,ref ref _GError)i32 flush
        var ref clang function(ref _GOutputStream,ref _GCancellable,ref ref _GError)i32 close_fn
        var ref clang proc(ref _GOutputStream,ref void,u64,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) write_async
        var ref clang function(ref _GOutputStream,ref _GAsyncResult,ref ref _GError)i64 write_finish
        var ref clang proc(ref _GOutputStream,ref _GInputStream,i32,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) splice_async
        var ref clang function(ref _GOutputStream,ref _GAsyncResult,ref ref _GError)i64 splice_finish
        var ref clang proc(ref _GOutputStream,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) flush_async
        var ref clang function(ref _GOutputStream,ref _GAsyncResult,ref ref _GError)i32 flush_finish
        var ref clang proc(ref _GOutputStream,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) close_async
        var ref clang function(ref _GOutputStream,ref _GAsyncResult,ref ref _GError)i32 close_finish
        var ref clang proc() _g_reserved1
        var ref clang proc() _g_reserved2
        var ref clang proc() _g_reserved3
        var ref clang proc() _g_reserved4
        var ref clang proc() _g_reserved5
        var ref clang proc() _g_reserved6
        var ref clang proc() _g_reserved7
        var ref clang proc() _g_reserved8
    end

    record _GOutputStreamPrivate =
        var int dummy    !empty record
    end

    clang function "g_output_stream_get_type"          ()u64
    clang function "g_output_stream_write"             (ref _GOutputStream,ref void,u64,ref _GCancellable,ref ref _GError)i64
    clang function "g_output_stream_write_all"         (ref _GOutputStream,ref void,u64,ref u64,ref _GCancellable,ref ref _GError)i32
    clang function "g_output_stream_write_bytes"       (ref _GOutputStream,ref _GBytes,ref _GCancellable,ref ref _GError)i64
    clang function "g_output_stream_splice"            (ref _GOutputStream,ref _GInputStream,i32,ref _GCancellable,ref ref _GError)i64
    clang function "g_output_stream_flush"             (ref _GOutputStream,ref _GCancellable,ref ref _GError)i32
    clang function "g_output_stream_close"             (ref _GOutputStream,ref _GCancellable,ref ref _GError)i32
    clang proc     "g_output_stream_write_async"       (ref _GOutputStream,ref void,u64,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_output_stream_write_finish"      (ref _GOutputStream,ref _GAsyncResult,ref ref _GError)i64
    clang proc     "g_output_stream_write_bytes_async" (ref _GOutputStream,ref _GBytes,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_output_stream_write_bytes_finish" (ref _GOutputStream,ref _GAsyncResult,ref ref _GError)i64
    clang proc     "g_output_stream_splice_async"      (ref _GOutputStream,ref _GInputStream,i32,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_output_stream_splice_finish"     (ref _GOutputStream,ref _GAsyncResult,ref ref _GError)i64
    clang proc     "g_output_stream_flush_async"       (ref _GOutputStream,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_output_stream_flush_finish"      (ref _GOutputStream,ref _GAsyncResult,ref ref _GError)i32
    clang proc     "g_output_stream_close_async"       (ref _GOutputStream,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_output_stream_close_finish"      (ref _GOutputStream,ref _GAsyncResult,ref ref _GError)i32
    clang function "g_output_stream_is_closed"         (ref _GOutputStream)i32
    clang function "g_output_stream_is_closing"        (ref _GOutputStream)i32
    clang function "g_output_stream_has_pending"       (ref _GOutputStream)i32
    clang function "g_output_stream_set_pending"       (ref _GOutputStream,ref ref _GError)i32
    clang proc     "g_output_stream_clear_pending"     (ref _GOutputStream)
    record _GFilterOutputStreamClass =
        var _GOutputStreamClass parent_class
        var ref clang proc() _g_reserved1
        var ref clang proc() _g_reserved2
        var ref clang proc() _g_reserved3
    end

    clang function "g_filter_output_stream_get_type"   ()u64
    clang function "g_filter_output_stream_get_base_stream" (ref _GFilterOutputStream)ref _GOutputStream
    clang function "g_filter_output_stream_get_close_base_stream" (ref _GFilterOutputStream)i32
    clang proc     "g_filter_output_stream_set_close_base_stream" (ref _GFilterOutputStream,i32)
    record _GBufferedOutputStreamClass =
        var _GFilterOutputStreamClass parent_class
        var ref clang proc() _g_reserved1
        var ref clang proc() _g_reserved2
    end

    record _GBufferedOutputStreamPrivate =
        var int dummy    !empty record
    end

    clang function "g_buffered_output_stream_get_type" ()u64
    clang function "g_buffered_output_stream_new"      (ref _GOutputStream)ref _GOutputStream
    clang function "g_buffered_output_stream_new_sized" (ref _GOutputStream,u64)ref _GOutputStream
    clang function "g_buffered_output_stream_get_buffer_size" (ref _GBufferedOutputStream)u64
    clang proc     "g_buffered_output_stream_set_buffer_size" (ref _GBufferedOutputStream,u64)
    clang function "g_buffered_output_stream_get_auto_grow" (ref _GBufferedOutputStream)i32
    clang proc     "g_buffered_output_stream_set_auto_grow" (ref _GBufferedOutputStream,i32)
    record _GCancellableClass =
        var _GObjectClass parent_class
        var ref clang proc(ref _GCancellable) cancelled
        var ref clang proc() _g_reserved1
        var ref clang proc() _g_reserved2
        var ref clang proc() _g_reserved3
        var ref clang proc() _g_reserved4
        var ref clang proc() _g_reserved5
    end

    record _GCancellablePrivate =
        var int dummy    !empty record
    end

    clang function "g_cancellable_get_type"            ()u64
    clang function "g_cancellable_new"                 ()ref _GCancellable
    clang function "g_cancellable_is_cancelled"        (ref _GCancellable)i32
    clang function "g_cancellable_set_error_if_cancelled" (ref _GCancellable,ref ref _GError)i32
    clang function "g_cancellable_get_fd"              (ref _GCancellable)i32
    clang function "g_cancellable_make_pollfd"         (ref _GCancellable,ref _GPollFD)i32
    clang proc     "g_cancellable_release_fd"          (ref _GCancellable)
    clang function "g_cancellable_source_new"          (ref _GCancellable)ref _GSource
    clang function "g_cancellable_get_current"         ()ref _GCancellable
    clang proc     "g_cancellable_push_current"        (ref _GCancellable)
    clang proc     "g_cancellable_pop_current"         (ref _GCancellable)
    clang proc     "g_cancellable_reset"               (ref _GCancellable)
    clang function "g_cancellable_connect"             (ref _GCancellable,ref clang proc(),ref void,ref clang proc(ref void))u32
    clang proc     "g_cancellable_disconnect"          (ref _GCancellable,u32)
    clang proc     "g_cancellable_cancel"              (ref _GCancellable)
    record _GConverterIface =
        var _GTypeInterface g_iface
        var ref clang function(ref _GConverter,ref void,u64,ref void,u64,i32,ref u64,ref u64,ref ref _GError)i32 convert
        var ref clang proc(ref _GConverter) reset
    end

    clang function "g_converter_get_type"              ()u64
    clang function "g_converter_convert"               (ref _GConverter,ref void,u64,ref void,u64,i32,ref u64,ref u64,ref ref _GError)i32
    clang proc     "g_converter_reset"                 (ref _GConverter)
    record _GCharsetConverterClass =
        var _GObjectClass parent_class
    end

    clang function "g_charset_converter_get_type"      ()u64
    clang function "g_charset_converter_new"           (ref i8,ref i8,ref ref _GError)ref _GCharsetConverter
    clang proc     "g_charset_converter_set_use_fallback" (ref _GCharsetConverter,i32)
    clang function "g_charset_converter_get_use_fallback" (ref _GCharsetConverter)i32
    clang function "g_charset_converter_get_num_fallbacks" (ref _GCharsetConverter)u32
    clang function "g_content_type_equals"             (ref i8,ref i8)i32
    clang function "g_content_type_is_a"               (ref i8,ref i8)i32
    clang function "g_content_type_is_unknown"         (ref i8)i32
    clang function "g_content_type_get_description"    (ref i8)ref i8
    clang function "g_content_type_get_mime_type"      (ref i8)ref i8
    clang function "g_content_type_get_icon"           (ref i8)ref _GIcon
    clang function "g_content_type_get_symbolic_icon"  (ref i8)ref _GIcon
    clang function "g_content_type_get_generic_icon_name" (ref i8)ref i8
    clang function "g_content_type_can_be_executable"  (ref i8)i32
    clang function "g_content_type_from_mime_type"     (ref i8)ref i8
    clang function "g_content_type_guess"              (ref i8,ref byte,u64,ref i32)ref i8
    clang function "g_content_type_guess_for_tree"     (ref _GFile)ref ref i8
    clang function "g_content_types_get_registered"    ()ref _GList
    record _GConverterInputStreamClass =
        var _GFilterInputStreamClass parent_class
        var ref clang proc() _g_reserved1
        var ref clang proc() _g_reserved2
        var ref clang proc() _g_reserved3
        var ref clang proc() _g_reserved4
        var ref clang proc() _g_reserved5
    end

    record _GConverterInputStreamPrivate =
        var int dummy    !empty record
    end

    clang function "g_converter_input_stream_get_type" ()u64
    clang function "g_converter_input_stream_new"      (ref _GInputStream,ref _GConverter)ref _GInputStream
    clang function "g_converter_input_stream_get_converter" (ref _GConverterInputStream)ref _GConverter
    record _GConverterOutputStreamClass =
        var _GFilterOutputStreamClass parent_class
        var ref clang proc() _g_reserved1
        var ref clang proc() _g_reserved2
        var ref clang proc() _g_reserved3
        var ref clang proc() _g_reserved4
        var ref clang proc() _g_reserved5
    end

    record _GConverterOutputStreamPrivate =
        var int dummy    !empty record
    end

    clang function "g_converter_output_stream_get_type" ()u64
    clang function "g_converter_output_stream_new"     (ref _GOutputStream,ref _GConverter)ref _GOutputStream
    clang function "g_converter_output_stream_get_converter" (ref _GConverterOutputStream)ref _GConverter
    record _GCredentialsClass =
        var int dummy    !empty record
    end

    clang function "g_credentials_get_type"            ()u64
    clang function "g_credentials_new"                 ()ref _GCredentials
    clang function "g_credentials_to_string"           (ref _GCredentials)ref i8
    clang function "g_credentials_get_native"          (ref _GCredentials,i32)ref void
    clang proc     "g_credentials_set_native"          (ref _GCredentials,i32,ref void)
    clang function "g_credentials_is_same_user"        (ref _GCredentials,ref _GCredentials,ref ref _GError)i32
    record _GDataInputStreamClass =
        var _GBufferedInputStreamClass parent_class
        var ref clang proc() _g_reserved1
        var ref clang proc() _g_reserved2
        var ref clang proc() _g_reserved3
        var ref clang proc() _g_reserved4
        var ref clang proc() _g_reserved5
    end

    record _GDataInputStreamPrivate =
        var int dummy    !empty record
    end

    clang function "g_data_input_stream_get_type"      ()u64
    clang function "g_data_input_stream_new"           (ref _GInputStream)ref _GDataInputStream
    clang proc     "g_data_input_stream_set_byte_order" (ref _GDataInputStream,i32)
    clang function "g_data_input_stream_get_byte_order" (ref _GDataInputStream)i32
    clang proc     "g_data_input_stream_set_newline_type" (ref _GDataInputStream,i32)
    clang function "g_data_input_stream_get_newline_type" (ref _GDataInputStream)i32
    clang function "g_data_input_stream_read_byte"     (ref _GDataInputStream,ref _GCancellable,ref ref _GError)byte
    clang function "g_data_input_stream_read_int16"    (ref _GDataInputStream,ref _GCancellable,ref ref _GError)i16
    clang function "g_data_input_stream_read_uint16"   (ref _GDataInputStream,ref _GCancellable,ref ref _GError)u16
    clang function "g_data_input_stream_read_int32"    (ref _GDataInputStream,ref _GCancellable,ref ref _GError)i32
    clang function "g_data_input_stream_read_uint32"   (ref _GDataInputStream,ref _GCancellable,ref ref _GError)u32
    clang function "g_data_input_stream_read_int64"    (ref _GDataInputStream,ref _GCancellable,ref ref _GError)i64
    clang function "g_data_input_stream_read_uint64"   (ref _GDataInputStream,ref _GCancellable,ref ref _GError)u64
    clang function "g_data_input_stream_read_line"     (ref _GDataInputStream,ref u64,ref _GCancellable,ref ref _GError)ref i8
    clang function "g_data_input_stream_read_line_utf8" (ref _GDataInputStream,ref u64,ref _GCancellable,ref ref _GError)ref i8
    clang proc     "g_data_input_stream_read_line_async" (ref _GDataInputStream,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_data_input_stream_read_line_finish" (ref _GDataInputStream,ref _GAsyncResult,ref u64,ref ref _GError)ref i8
    clang function "g_data_input_stream_read_line_finish_utf8" (ref _GDataInputStream,ref _GAsyncResult,ref u64,ref ref _GError)ref i8
    clang function "g_data_input_stream_read_until"    (ref _GDataInputStream,ref i8,ref u64,ref _GCancellable,ref ref _GError)ref i8
    clang proc     "g_data_input_stream_read_until_async" (ref _GDataInputStream,ref i8,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_data_input_stream_read_until_finish" (ref _GDataInputStream,ref _GAsyncResult,ref u64,ref ref _GError)ref i8
    clang function "g_data_input_stream_read_upto"     (ref _GDataInputStream,ref i8,i64,ref u64,ref _GCancellable,ref ref _GError)ref i8
    clang proc     "g_data_input_stream_read_upto_async" (ref _GDataInputStream,ref i8,i64,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_data_input_stream_read_upto_finish" (ref _GDataInputStream,ref _GAsyncResult,ref u64,ref ref _GError)ref i8
    record _GDataOutputStream =
        var _GFilterOutputStream parent_instance
        var ref _GDataOutputStreamPrivate priv
    end

    record _GDataOutputStreamClass =
        var _GFilterOutputStreamClass parent_class
        var ref clang proc() _g_reserved1
        var ref clang proc() _g_reserved2
        var ref clang proc() _g_reserved3
        var ref clang proc() _g_reserved4
        var ref clang proc() _g_reserved5
    end

    record _GDataOutputStreamPrivate =
        var int dummy    !empty record
    end

    clang function "g_data_output_stream_get_type"     ()u64
    clang function "g_data_output_stream_new"          (ref _GOutputStream)ref _GDataOutputStream
    clang proc     "g_data_output_stream_set_byte_order" (ref _GDataOutputStream,i32)
    clang function "g_data_output_stream_get_byte_order" (ref _GDataOutputStream)i32
    clang function "g_data_output_stream_put_byte"     (ref _GDataOutputStream,byte,ref _GCancellable,ref ref _GError)i32
    clang function "g_data_output_stream_put_int16"    (ref _GDataOutputStream,i16,ref _GCancellable,ref ref _GError)i32
    clang function "g_data_output_stream_put_uint16"   (ref _GDataOutputStream,u16,ref _GCancellable,ref ref _GError)i32
    clang function "g_data_output_stream_put_int32"    (ref _GDataOutputStream,i32,ref _GCancellable,ref ref _GError)i32
    clang function "g_data_output_stream_put_uint32"   (ref _GDataOutputStream,u32,ref _GCancellable,ref ref _GError)i32
    clang function "g_data_output_stream_put_int64"    (ref _GDataOutputStream,i64,ref _GCancellable,ref ref _GError)i32
    clang function "g_data_output_stream_put_uint64"   (ref _GDataOutputStream,u64,ref _GCancellable,ref ref _GError)i32
    clang function "g_data_output_stream_put_string"   (ref _GDataOutputStream,ref i8,ref _GCancellable,ref ref _GError)i32
    clang function "g_dbus_is_address"                 (ref i8)i32
    clang function "g_dbus_is_supported_address"       (ref i8,ref ref _GError)i32
    clang proc     "g_dbus_address_get_stream"         (ref i8,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_dbus_address_get_stream_finish"  (ref _GAsyncResult,ref ref i8,ref ref _GError)ref _GIOStream
    clang function "g_dbus_address_get_stream_sync"    (ref i8,ref ref i8,ref _GCancellable,ref ref _GError)ref _GIOStream
    clang function "g_dbus_address_get_for_bus_sync"   (i32,ref _GCancellable,ref ref _GError)ref i8
    clang function "g_dbus_auth_observer_get_type"     ()u64
    clang function "g_dbus_auth_observer_new"          ()ref _GDBusAuthObserver
    clang function "g_dbus_auth_observer_authorize_authenticated_peer" (ref _GDBusAuthObserver,ref _GIOStream,ref _GCredentials)i32
    clang function "g_dbus_auth_observer_allow_mechanism" (ref _GDBusAuthObserver,ref i8)i32
    clang function "g_dbus_connection_get_type"        ()u64
    clang proc     "g_bus_get"                         (i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_bus_get_finish"                  (ref _GAsyncResult,ref ref _GError)ref _GDBusConnection
    clang function "g_bus_get_sync"                    (i32,ref _GCancellable,ref ref _GError)ref _GDBusConnection
    clang proc     "g_dbus_connection_new"             (ref _GIOStream,ref i8,i32,ref _GDBusAuthObserver,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_dbus_connection_new_finish"      (ref _GAsyncResult,ref ref _GError)ref _GDBusConnection
    clang function "g_dbus_connection_new_sync"        (ref _GIOStream,ref i8,i32,ref _GDBusAuthObserver,ref _GCancellable,ref ref _GError)ref _GDBusConnection
    clang proc     "g_dbus_connection_new_for_address" (ref i8,i32,ref _GDBusAuthObserver,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_dbus_connection_new_for_address_finish" (ref _GAsyncResult,ref ref _GError)ref _GDBusConnection
    clang function "g_dbus_connection_new_for_address_sync" (ref i8,i32,ref _GDBusAuthObserver,ref _GCancellable,ref ref _GError)ref _GDBusConnection
    clang proc     "g_dbus_connection_start_message_processing" (ref _GDBusConnection)
    clang function "g_dbus_connection_is_closed"       (ref _GDBusConnection)i32
    clang function "g_dbus_connection_get_stream"      (ref _GDBusConnection)ref _GIOStream
    clang function "g_dbus_connection_get_guid"        (ref _GDBusConnection)ref i8
    clang function "g_dbus_connection_get_unique_name" (ref _GDBusConnection)ref i8
    clang function "g_dbus_connection_get_peer_credentials" (ref _GDBusConnection)ref _GCredentials
    clang function "g_dbus_connection_get_last_serial" (ref _GDBusConnection)u32
    clang function "g_dbus_connection_get_exit_on_close" (ref _GDBusConnection)i32
    clang proc     "g_dbus_connection_set_exit_on_close" (ref _GDBusConnection,i32)
    clang function "g_dbus_connection_get_capabilities" (ref _GDBusConnection)i32
    clang proc     "g_dbus_connection_close"           (ref _GDBusConnection,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_dbus_connection_close_finish"    (ref _GDBusConnection,ref _GAsyncResult,ref ref _GError)i32
    clang function "g_dbus_connection_close_sync"      (ref _GDBusConnection,ref _GCancellable,ref ref _GError)i32
    clang proc     "g_dbus_connection_flush"           (ref _GDBusConnection,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_dbus_connection_flush_finish"    (ref _GDBusConnection,ref _GAsyncResult,ref ref _GError)i32
    clang function "g_dbus_connection_flush_sync"      (ref _GDBusConnection,ref _GCancellable,ref ref _GError)i32
    clang function "g_dbus_connection_send_message"    (ref _GDBusConnection,ref _GDBusMessage,i32,ref u32,ref ref _GError)i32
    clang proc     "g_dbus_connection_send_message_with_reply" (ref _GDBusConnection,ref _GDBusMessage,i32,i32,ref u32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_dbus_connection_send_message_with_reply_finish" (ref _GDBusConnection,ref _GAsyncResult,ref ref _GError)ref _GDBusMessage
    clang function "g_dbus_connection_send_message_with_reply_sync" (ref _GDBusConnection,ref _GDBusMessage,i32,i32,ref u32,ref _GCancellable,ref ref _GError)ref _GDBusMessage
    clang function "g_dbus_connection_emit_signal"     (ref _GDBusConnection,ref i8,ref i8,ref i8,ref i8,ref _GVariant,ref ref _GError)i32
    clang proc     "g_dbus_connection_call"            (ref _GDBusConnection,ref i8,ref i8,ref i8,ref i8,ref _GVariant,ref _GVariantType,i32,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_dbus_connection_call_finish"     (ref _GDBusConnection,ref _GAsyncResult,ref ref _GError)ref _GVariant
    clang function "g_dbus_connection_call_sync"       (ref _GDBusConnection,ref i8,ref i8,ref i8,ref i8,ref _GVariant,ref _GVariantType,i32,i32,ref _GCancellable,ref ref _GError)ref _GVariant
    clang proc     "g_dbus_connection_call_with_unix_fd_list" (ref _GDBusConnection,ref i8,ref i8,ref i8,ref i8,ref _GVariant,ref _GVariantType,i32,i32,ref _GUnixFDList,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_dbus_connection_call_with_unix_fd_list_finish" (ref _GDBusConnection,ref ref _GUnixFDList,ref _GAsyncResult,ref ref _GError)ref _GVariant
    clang function "g_dbus_connection_call_with_unix_fd_list_sync" (ref _GDBusConnection,ref i8,ref i8,ref i8,ref i8,ref _GVariant,ref _GVariantType,i32,i32,ref _GUnixFDList,ref ref _GUnixFDList,ref _GCancellable,ref ref _GError)ref _GVariant
    clang function "g_dbus_connection_register_object" (ref _GDBusConnection,ref i8,ref _GDBusInterfaceInfo,ref _GDBusInterfaceVTable,ref void,ref clang proc(ref void),ref ref _GError)u32
    clang function "g_dbus_connection_unregister_object" (ref _GDBusConnection,u32)i32
    clang function "g_dbus_connection_register_subtree" (ref _GDBusConnection,ref i8,ref _GDBusSubtreeVTable,i32,ref void,ref clang proc(ref void),ref ref _GError)u32
    clang function "g_dbus_connection_unregister_subtree" (ref _GDBusConnection,u32)i32
    clang function "g_dbus_connection_signal_subscribe" (ref _GDBusConnection,ref i8,ref i8,ref i8,ref i8,ref i8,i32,ref clang proc(ref _GDBusConnection,ref i8,ref i8,ref i8,ref i8,ref _GVariant,ref void),ref void,ref clang proc(ref void))u32
    clang proc     "g_dbus_connection_signal_unsubscribe" (ref _GDBusConnection,u32)
    clang function "g_dbus_connection_add_filter"      (ref _GDBusConnection,ref clang function(ref _GDBusConnection,ref _GDBusMessage,i32,ref void)ref _GDBusMessage,ref void,ref clang proc(ref void))u32
    clang proc     "g_dbus_connection_remove_filter"   (ref _GDBusConnection,u32)
    clang function "g_dbus_error_quark"                ()u32
    clang function "g_dbus_error_is_remote_error"      (ref _GError)i32
    clang function "g_dbus_error_get_remote_error"     (ref _GError)ref i8
    clang function "g_dbus_error_strip_remote_error"   (ref _GError)i32
    clang function "g_dbus_error_register_error"       (u32,i32,ref i8)i32
    clang function "g_dbus_error_unregister_error"     (u32,i32,ref i8)i32
    clang proc     "g_dbus_error_register_error_domain" (ref i8,ref u64,ref _GDBusErrorEntry,u32)
    clang function "g_dbus_error_new_for_dbus_error"   (ref i8,ref i8)ref _GError
    clang proc     "g_dbus_error_set_dbus_error"       (ref ref _GError,ref i8,ref i8,ref i8,...)
    clang proc     "g_dbus_error_set_dbus_error_valist" (ref ref _GError,ref i8,ref i8,ref i8,ref i8)
    clang function "g_dbus_error_encode_gerror"        (ref _GError)ref i8
    clang function "g_dbus_annotation_info_lookup"     (ref ref _GDBusAnnotationInfo,ref i8)ref i8
    clang function "g_dbus_interface_info_lookup_method" (ref _GDBusInterfaceInfo,ref i8)ref _GDBusMethodInfo
    clang function "g_dbus_interface_info_lookup_signal" (ref _GDBusInterfaceInfo,ref i8)ref _GDBusSignalInfo
    clang function "g_dbus_interface_info_lookup_property" (ref _GDBusInterfaceInfo,ref i8)ref _GDBusPropertyInfo
    clang proc     "g_dbus_interface_info_cache_build" (ref _GDBusInterfaceInfo)
    clang proc     "g_dbus_interface_info_cache_release" (ref _GDBusInterfaceInfo)
    clang proc     "g_dbus_interface_info_generate_xml" (ref _GDBusInterfaceInfo,u32,ref _GString)
    clang function "g_dbus_node_info_new_for_xml"      (ref i8,ref ref _GError)ref _GDBusNodeInfo
    clang function "g_dbus_node_info_lookup_interface" (ref _GDBusNodeInfo,ref i8)ref _GDBusInterfaceInfo
    clang proc     "g_dbus_node_info_generate_xml"     (ref _GDBusNodeInfo,u32,ref _GString)
    clang function "g_dbus_node_info_ref"              (ref _GDBusNodeInfo)ref _GDBusNodeInfo
    clang function "g_dbus_interface_info_ref"         (ref _GDBusInterfaceInfo)ref _GDBusInterfaceInfo
    clang function "g_dbus_method_info_ref"            (ref _GDBusMethodInfo)ref _GDBusMethodInfo
    clang function "g_dbus_signal_info_ref"            (ref _GDBusSignalInfo)ref _GDBusSignalInfo
    clang function "g_dbus_property_info_ref"          (ref _GDBusPropertyInfo)ref _GDBusPropertyInfo
    clang function "g_dbus_arg_info_ref"               (ref _GDBusArgInfo)ref _GDBusArgInfo
    clang function "g_dbus_annotation_info_ref"        (ref _GDBusAnnotationInfo)ref _GDBusAnnotationInfo
    clang proc     "g_dbus_node_info_unref"            (ref _GDBusNodeInfo)
    clang proc     "g_dbus_interface_info_unref"       (ref _GDBusInterfaceInfo)
    clang proc     "g_dbus_method_info_unref"          (ref _GDBusMethodInfo)
    clang proc     "g_dbus_signal_info_unref"          (ref _GDBusSignalInfo)
    clang proc     "g_dbus_property_info_unref"        (ref _GDBusPropertyInfo)
    clang proc     "g_dbus_arg_info_unref"             (ref _GDBusArgInfo)
    clang proc     "g_dbus_annotation_info_unref"      (ref _GDBusAnnotationInfo)
    clang function "g_dbus_node_info_get_type"         ()u64
    clang function "g_dbus_interface_info_get_type"    ()u64
    clang function "g_dbus_method_info_get_type"       ()u64
    clang function "g_dbus_signal_info_get_type"       ()u64
    clang function "g_dbus_property_info_get_type"     ()u64
    clang function "g_dbus_arg_info_get_type"          ()u64
    clang function "g_dbus_annotation_info_get_type"   ()u64
    clang function "g_dbus_message_get_type"           ()u64
    clang function "g_dbus_message_new"                ()ref _GDBusMessage
    clang function "g_dbus_message_new_signal"         (ref i8,ref i8,ref i8)ref _GDBusMessage
    clang function "g_dbus_message_new_method_call"    (ref i8,ref i8,ref i8,ref i8)ref _GDBusMessage
    clang function "g_dbus_message_new_method_reply"   (ref _GDBusMessage)ref _GDBusMessage
    clang function "g_dbus_message_new_method_error"   (ref _GDBusMessage,ref i8,ref i8,...)ref _GDBusMessage
    clang function "g_dbus_message_new_method_error_valist" (ref _GDBusMessage,ref i8,ref i8,ref i8)ref _GDBusMessage
    clang function "g_dbus_message_new_method_error_literal" (ref _GDBusMessage,ref i8,ref i8)ref _GDBusMessage
    clang function "g_dbus_message_print"              (ref _GDBusMessage,u32)ref i8
    clang function "g_dbus_message_get_locked"         (ref _GDBusMessage)i32
    clang proc     "g_dbus_message_lock"               (ref _GDBusMessage)
    clang function "g_dbus_message_copy"               (ref _GDBusMessage,ref ref _GError)ref _GDBusMessage
    clang function "g_dbus_message_get_byte_order"     (ref _GDBusMessage)i32
    clang proc     "g_dbus_message_set_byte_order"     (ref _GDBusMessage,i32)
    clang function "g_dbus_message_get_message_type"   (ref _GDBusMessage)i32
    clang proc     "g_dbus_message_set_message_type"   (ref _GDBusMessage,i32)
    clang function "g_dbus_message_get_flags"          (ref _GDBusMessage)i32
    clang proc     "g_dbus_message_set_flags"          (ref _GDBusMessage,i32)
    clang function "g_dbus_message_get_serial"         (ref _GDBusMessage)u32
    clang proc     "g_dbus_message_set_serial"         (ref _GDBusMessage,u32)
    clang function "g_dbus_message_get_header"         (ref _GDBusMessage,i32)ref _GVariant
    clang proc     "g_dbus_message_set_header"         (ref _GDBusMessage,i32,ref _GVariant)
    clang function "g_dbus_message_get_header_fields"  (ref _GDBusMessage)ref byte
    clang function "g_dbus_message_get_body"           (ref _GDBusMessage)ref _GVariant
    clang proc     "g_dbus_message_set_body"           (ref _GDBusMessage,ref _GVariant)
    clang function "g_dbus_message_get_unix_fd_list"   (ref _GDBusMessage)ref _GUnixFDList
    clang proc     "g_dbus_message_set_unix_fd_list"   (ref _GDBusMessage,ref _GUnixFDList)
    clang function "g_dbus_message_get_reply_serial"   (ref _GDBusMessage)u32
    clang proc     "g_dbus_message_set_reply_serial"   (ref _GDBusMessage,u32)
    clang function "g_dbus_message_get_interface"      (ref _GDBusMessage)ref i8
    clang proc     "g_dbus_message_set_interface"      (ref _GDBusMessage,ref i8)
    clang function "g_dbus_message_get_member"         (ref _GDBusMessage)ref i8
    clang proc     "g_dbus_message_set_member"         (ref _GDBusMessage,ref i8)
    clang function "g_dbus_message_get_path"           (ref _GDBusMessage)ref i8
    clang proc     "g_dbus_message_set_path"           (ref _GDBusMessage,ref i8)
    clang function "g_dbus_message_get_sender"         (ref _GDBusMessage)ref i8
    clang proc     "g_dbus_message_set_sender"         (ref _GDBusMessage,ref i8)
    clang function "g_dbus_message_get_destination"    (ref _GDBusMessage)ref i8
    clang proc     "g_dbus_message_set_destination"    (ref _GDBusMessage,ref i8)
    clang function "g_dbus_message_get_error_name"     (ref _GDBusMessage)ref i8
    clang proc     "g_dbus_message_set_error_name"     (ref _GDBusMessage,ref i8)
    clang function "g_dbus_message_get_signature"      (ref _GDBusMessage)ref i8
    clang proc     "g_dbus_message_set_signature"      (ref _GDBusMessage,ref i8)
    clang function "g_dbus_message_get_num_unix_fds"   (ref _GDBusMessage)u32
    clang proc     "g_dbus_message_set_num_unix_fds"   (ref _GDBusMessage,u32)
    clang function "g_dbus_message_get_arg0"           (ref _GDBusMessage)ref i8
    clang function "g_dbus_message_new_from_blob"      (ref byte,u64,i32,ref ref _GError)ref _GDBusMessage
    clang function "g_dbus_message_bytes_needed"       (ref byte,u64,ref ref _GError)i64
    clang function "g_dbus_message_to_blob"            (ref _GDBusMessage,ref u64,i32,ref ref _GError)ref byte
    clang function "g_dbus_message_to_gerror"          (ref _GDBusMessage,ref ref _GError)i32
    clang function "g_dbus_method_invocation_get_type" ()u64
    clang function "g_dbus_method_invocation_get_sender" (ref _GDBusMethodInvocation)ref i8
    clang function "g_dbus_method_invocation_get_object_path" (ref _GDBusMethodInvocation)ref i8
    clang function "g_dbus_method_invocation_get_interface_name" (ref _GDBusMethodInvocation)ref i8
    clang function "g_dbus_method_invocation_get_method_name" (ref _GDBusMethodInvocation)ref i8
    clang function "g_dbus_method_invocation_get_method_info" (ref _GDBusMethodInvocation)ref _GDBusMethodInfo
    clang function "g_dbus_method_invocation_get_connection" (ref _GDBusMethodInvocation)ref _GDBusConnection
    clang function "g_dbus_method_invocation_get_message" (ref _GDBusMethodInvocation)ref _GDBusMessage
    clang function "g_dbus_method_invocation_get_parameters" (ref _GDBusMethodInvocation)ref _GVariant
    clang function "g_dbus_method_invocation_get_user_data" (ref _GDBusMethodInvocation)ref void
    clang proc     "g_dbus_method_invocation_return_value" (ref _GDBusMethodInvocation,ref _GVariant)
    clang proc     "g_dbus_method_invocation_return_value_with_unix_fd_list" (ref _GDBusMethodInvocation,ref _GVariant,ref _GUnixFDList)
    clang proc     "g_dbus_method_invocation_return_error" (ref _GDBusMethodInvocation,u32,i32,ref i8,...)
    clang proc     "g_dbus_method_invocation_return_error_valist" (ref _GDBusMethodInvocation,u32,i32,ref i8,ref i8)
    clang proc     "g_dbus_method_invocation_return_error_literal" (ref _GDBusMethodInvocation,u32,i32,ref i8)
    clang proc     "g_dbus_method_invocation_return_gerror" (ref _GDBusMethodInvocation,ref _GError)
    clang proc     "g_dbus_method_invocation_take_error" (ref _GDBusMethodInvocation,ref _GError)
    clang proc     "g_dbus_method_invocation_return_dbus_error" (ref _GDBusMethodInvocation,ref i8,ref i8)
    clang function "g_bus_own_name"                    (i32,ref i8,i32,ref clang proc(ref _GDBusConnection,ref i8,ref void),ref clang proc(ref _GDBusConnection,ref i8,ref void),ref clang proc(ref _GDBusConnection,ref i8,ref void),ref void,ref clang proc(ref void))u32
    clang function "g_bus_own_name_on_connection"      (ref _GDBusConnection,ref i8,i32,ref clang proc(ref _GDBusConnection,ref i8,ref void),ref clang proc(ref _GDBusConnection,ref i8,ref void),ref void,ref clang proc(ref void))u32
    clang function "g_bus_own_name_with_closures"      (i32,ref i8,i32,ref _GClosure,ref _GClosure,ref _GClosure)u32
    clang function "g_bus_own_name_on_connection_with_closures" (ref _GDBusConnection,ref i8,i32,ref _GClosure,ref _GClosure)u32
    clang proc     "g_bus_unown_name"                  (u32)
    clang function "g_bus_watch_name"                  (i32,ref i8,i32,ref clang proc(ref _GDBusConnection,ref i8,ref i8,ref void),ref clang proc(ref _GDBusConnection,ref i8,ref void),ref void,ref clang proc(ref void))u32
    clang function "g_bus_watch_name_on_connection"    (ref _GDBusConnection,ref i8,i32,ref clang proc(ref _GDBusConnection,ref i8,ref i8,ref void),ref clang proc(ref _GDBusConnection,ref i8,ref void),ref void,ref clang proc(ref void))u32
    clang function "g_bus_watch_name_with_closures"    (i32,ref i8,i32,ref _GClosure,ref _GClosure)u32
    clang function "g_bus_watch_name_on_connection_with_closures" (ref _GDBusConnection,ref i8,i32,ref _GClosure,ref _GClosure)u32
    clang proc     "g_bus_unwatch_name"                (u32)
    record _GDBusProxyClass =
        var _GObjectClass parent_class
        var ref clang proc(ref _GDBusProxy,ref _GVariant,ref ref i8) g_properties_changed
        var ref clang proc(ref _GDBusProxy,ref i8,ref i8,ref _GVariant) g_signal
        var [32]ref void padding
    end

    record _GDBusProxyPrivate =
        var int dummy    !empty record
    end

    clang function "g_dbus_proxy_get_type"             ()u64
    clang proc     "g_dbus_proxy_new"                  (ref _GDBusConnection,i32,ref _GDBusInterfaceInfo,ref i8,ref i8,ref i8,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_dbus_proxy_new_finish"           (ref _GAsyncResult,ref ref _GError)ref _GDBusProxy
    clang function "g_dbus_proxy_new_sync"             (ref _GDBusConnection,i32,ref _GDBusInterfaceInfo,ref i8,ref i8,ref i8,ref _GCancellable,ref ref _GError)ref _GDBusProxy
    clang proc     "g_dbus_proxy_new_for_bus"          (i32,i32,ref _GDBusInterfaceInfo,ref i8,ref i8,ref i8,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_dbus_proxy_new_for_bus_finish"   (ref _GAsyncResult,ref ref _GError)ref _GDBusProxy
    clang function "g_dbus_proxy_new_for_bus_sync"     (i32,i32,ref _GDBusInterfaceInfo,ref i8,ref i8,ref i8,ref _GCancellable,ref ref _GError)ref _GDBusProxy
    clang function "g_dbus_proxy_get_connection"       (ref _GDBusProxy)ref _GDBusConnection
    clang function "g_dbus_proxy_get_flags"            (ref _GDBusProxy)i32
    clang function "g_dbus_proxy_get_name"             (ref _GDBusProxy)ref i8
    clang function "g_dbus_proxy_get_name_owner"       (ref _GDBusProxy)ref i8
    clang function "g_dbus_proxy_get_object_path"      (ref _GDBusProxy)ref i8
    clang function "g_dbus_proxy_get_interface_name"   (ref _GDBusProxy)ref i8
    clang function "g_dbus_proxy_get_default_timeout"  (ref _GDBusProxy)i32
    clang proc     "g_dbus_proxy_set_default_timeout"  (ref _GDBusProxy,i32)
    clang function "g_dbus_proxy_get_interface_info"   (ref _GDBusProxy)ref _GDBusInterfaceInfo
    clang proc     "g_dbus_proxy_set_interface_info"   (ref _GDBusProxy,ref _GDBusInterfaceInfo)
    clang function "g_dbus_proxy_get_cached_property"  (ref _GDBusProxy,ref i8)ref _GVariant
    clang proc     "g_dbus_proxy_set_cached_property"  (ref _GDBusProxy,ref i8,ref _GVariant)
    clang function "g_dbus_proxy_get_cached_property_names" (ref _GDBusProxy)ref ref i8
    clang proc     "g_dbus_proxy_call"                 (ref _GDBusProxy,ref i8,ref _GVariant,i32,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_dbus_proxy_call_finish"          (ref _GDBusProxy,ref _GAsyncResult,ref ref _GError)ref _GVariant
    clang function "g_dbus_proxy_call_sync"            (ref _GDBusProxy,ref i8,ref _GVariant,i32,i32,ref _GCancellable,ref ref _GError)ref _GVariant
    clang proc     "g_dbus_proxy_call_with_unix_fd_list" (ref _GDBusProxy,ref i8,ref _GVariant,i32,i32,ref _GUnixFDList,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_dbus_proxy_call_with_unix_fd_list_finish" (ref _GDBusProxy,ref ref _GUnixFDList,ref _GAsyncResult,ref ref _GError)ref _GVariant
    clang function "g_dbus_proxy_call_with_unix_fd_list_sync" (ref _GDBusProxy,ref i8,ref _GVariant,i32,i32,ref _GUnixFDList,ref ref _GUnixFDList,ref _GCancellable,ref ref _GError)ref _GVariant
    clang function "g_dbus_server_get_type"            ()u64
    clang function "g_dbus_server_new_sync"            (ref i8,i32,ref i8,ref _GDBusAuthObserver,ref _GCancellable,ref ref _GError)ref _GDBusServer
    clang function "g_dbus_server_get_client_address"  (ref _GDBusServer)ref i8
    clang function "g_dbus_server_get_guid"            (ref _GDBusServer)ref i8
    clang function "g_dbus_server_get_flags"           (ref _GDBusServer)i32
    clang proc     "g_dbus_server_start"               (ref _GDBusServer)
    clang proc     "g_dbus_server_stop"                (ref _GDBusServer)
    clang function "g_dbus_server_is_active"           (ref _GDBusServer)i32
    clang function "g_dbus_is_guid"                    (ref i8)i32
    clang function "g_dbus_generate_guid"              ()ref i8
    clang function "g_dbus_is_name"                    (ref i8)i32
    clang function "g_dbus_is_unique_name"             (ref i8)i32
    clang function "g_dbus_is_member_name"             (ref i8)i32
    clang function "g_dbus_is_interface_name"          (ref i8)i32
    clang proc     "g_dbus_gvariant_to_gvalue"         (ref _GVariant,ref _GValue)
    clang function "g_dbus_gvalue_to_gvariant"         (ref _GValue,ref _GVariantType)ref _GVariant
    record _GDriveIface =
        var _GTypeInterface g_iface
        var ref clang proc(ref _GDrive) changed
        var ref clang proc(ref _GDrive) disconnected
        var ref clang proc(ref _GDrive) eject_button
        var ref clang function(ref _GDrive)ref i8 get_name
        var ref clang function(ref _GDrive)ref _GIcon get_icon
        var ref clang function(ref _GDrive)i32 has_volumes
        var ref clang function(ref _GDrive)ref _GList get_volumes
        var ref clang function(ref _GDrive)i32 is_media_removable
        var ref clang function(ref _GDrive)i32 has_media
        var ref clang function(ref _GDrive)i32 is_media_check_automatic
        var ref clang function(ref _GDrive)i32 can_eject
        var ref clang function(ref _GDrive)i32 can_poll_for_media
        var ref clang proc(ref _GDrive,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) eject
        var ref clang function(ref _GDrive,ref _GAsyncResult,ref ref _GError)i32 eject_finish
        var ref clang proc(ref _GDrive,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) poll_for_media
        var ref clang function(ref _GDrive,ref _GAsyncResult,ref ref _GError)i32 poll_for_media_finish
        var ref clang function(ref _GDrive,ref i8)ref i8 get_identifier
        var ref clang function(ref _GDrive)ref ref i8 enumerate_identifiers
        var ref clang function(ref _GDrive)i32 get_start_stop_type
        var ref clang function(ref _GDrive)i32 can_start
        var ref clang function(ref _GDrive)i32 can_start_degraded
        var ref clang proc(ref _GDrive,i32,ref _GMountOperation,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) start
        var ref clang function(ref _GDrive,ref _GAsyncResult,ref ref _GError)i32 start_finish
        var ref clang function(ref _GDrive)i32 can_stop
        var ref clang proc(ref _GDrive,i32,ref _GMountOperation,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) stop$
        var ref clang function(ref _GDrive,ref _GAsyncResult,ref ref _GError)i32 stop_finish
        var ref clang proc(ref _GDrive) stop_button
        var ref clang proc(ref _GDrive,i32,ref _GMountOperation,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) eject_with_operation
        var ref clang function(ref _GDrive,ref _GAsyncResult,ref ref _GError)i32 eject_with_operation_finish
        var ref clang function(ref _GDrive)ref i8 get_sort_key
        var ref clang function(ref _GDrive)ref _GIcon get_symbolic_icon
    end

    clang function "g_drive_get_type"                  ()u64
    clang function "g_drive_get_name"                  (ref _GDrive)ref i8
    clang function "g_drive_get_icon"                  (ref _GDrive)ref _GIcon
    clang function "g_drive_get_symbolic_icon"         (ref _GDrive)ref _GIcon
    clang function "g_drive_has_volumes"               (ref _GDrive)i32
    clang function "g_drive_get_volumes"               (ref _GDrive)ref _GList
    clang function "g_drive_is_media_removable"        (ref _GDrive)i32
    clang function "g_drive_has_media"                 (ref _GDrive)i32
    clang function "g_drive_is_media_check_automatic"  (ref _GDrive)i32
    clang function "g_drive_can_poll_for_media"        (ref _GDrive)i32
    clang function "g_drive_can_eject"                 (ref _GDrive)i32
    clang proc     "g_drive_eject"                     (ref _GDrive,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_drive_eject_finish"              (ref _GDrive,ref _GAsyncResult,ref ref _GError)i32
    clang proc     "g_drive_poll_for_media"            (ref _GDrive,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_drive_poll_for_media_finish"     (ref _GDrive,ref _GAsyncResult,ref ref _GError)i32
    clang function "g_drive_get_identifier"            (ref _GDrive,ref i8)ref i8
    clang function "g_drive_enumerate_identifiers"     (ref _GDrive)ref ref i8
    clang function "g_drive_get_start_stop_type"       (ref _GDrive)i32
    clang function "g_drive_can_start"                 (ref _GDrive)i32
    clang function "g_drive_can_start_degraded"        (ref _GDrive)i32
    clang proc     "g_drive_start"                     (ref _GDrive,i32,ref _GMountOperation,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_drive_start_finish"              (ref _GDrive,ref _GAsyncResult,ref ref _GError)i32
    clang function "g_drive_can_stop"                  (ref _GDrive)i32
    clang proc     "g_drive_stop"                      (ref _GDrive,i32,ref _GMountOperation,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_drive_stop_finish"               (ref _GDrive,ref _GAsyncResult,ref ref _GError)i32
    clang proc     "g_drive_eject_with_operation"      (ref _GDrive,i32,ref _GMountOperation,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_drive_eject_with_operation_finish" (ref _GDrive,ref _GAsyncResult,ref ref _GError)i32
    clang function "g_drive_get_sort_key"              (ref _GDrive)ref i8
    record _GIconIface =
        var _GTypeInterface g_iface
        var ref clang function(ref _GIcon)u32 hash
        var ref clang function(ref _GIcon,ref _GIcon)i32 equal
        var ref clang function(ref _GIcon,ref _GPtrArray,ref i32)i32 to_tokens
        var ref clang function(ref ref i8,i32,i32,ref ref _GError)ref _GIcon from_tokens
    end

    clang function "g_icon_get_type"                   ()u64
    clang function "g_icon_hash"                       (ref void)u32
    clang function "g_icon_equal"                      (ref _GIcon,ref _GIcon)i32
    clang function "g_icon_to_string"                  (ref _GIcon)ref i8
    clang function "g_icon_new_for_string"             (ref i8,ref ref _GError)ref _GIcon
    record _GEmblem =
        var int dummy    !empty record
    end

    record _GEmblemClass =
        var int dummy    !empty record
    end

    clang function "g_emblem_get_type"                 ()u64
    clang function "g_emblem_new"                      (ref _GIcon)ref _GEmblem
    clang function "g_emblem_new_with_origin"          (ref _GIcon,i32)ref _GEmblem
    clang function "g_emblem_get_icon"                 (ref _GEmblem)ref _GIcon
    clang function "g_emblem_get_origin"               (ref _GEmblem)i32
    record _GEmblemedIcon =
        var _GObject parent_instance
        var ref _GEmblemedIconPrivate priv
    end

    record _GEmblemedIconClass =
        var _GObjectClass parent_class
    end

    record _GEmblemedIconPrivate =
        var int dummy    !empty record
    end

    clang function "g_emblemed_icon_get_type"          ()u64
    clang function "g_emblemed_icon_new"               (ref _GIcon,ref _GEmblem)ref _GIcon
    clang function "g_emblemed_icon_get_icon"          (ref _GEmblemedIcon)ref _GIcon
    clang function "g_emblemed_icon_get_emblems"       (ref _GEmblemedIcon)ref _GList
    clang proc     "g_emblemed_icon_add_emblem"        (ref _GEmblemedIcon,ref _GEmblem)
    clang proc     "g_emblemed_icon_clear_emblems"     (ref _GEmblemedIcon)
    clang function "g_file_attribute_info_list_get_type" ()u64
    clang function "g_file_attribute_info_list_new"    ()ref _GFileAttributeInfoList
    clang function "g_file_attribute_info_list_ref"    (ref _GFileAttributeInfoList)ref _GFileAttributeInfoList
    clang proc     "g_file_attribute_info_list_unref"  (ref _GFileAttributeInfoList)
    clang function "g_file_attribute_info_list_dup"    (ref _GFileAttributeInfoList)ref _GFileAttributeInfoList
    clang function "g_file_attribute_info_list_lookup" (ref _GFileAttributeInfoList,ref i8)ref _GFileAttributeInfo
    clang proc     "g_file_attribute_info_list_add"    (ref _GFileAttributeInfoList,ref i8,i32,i32)
    record _GFileEnumeratorClass =
        var _GObjectClass parent_class
        var ref clang function(ref _GFileEnumerator,ref _GCancellable,ref ref _GError)ref _GFileInfo next_file
        var ref clang function(ref _GFileEnumerator,ref _GCancellable,ref ref _GError)i32 close_fn
        var ref clang proc(ref _GFileEnumerator,i32,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) next_files_async
        var ref clang function(ref _GFileEnumerator,ref _GAsyncResult,ref ref _GError)ref _GList next_files_finish
        var ref clang proc(ref _GFileEnumerator,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) close_async
        var ref clang function(ref _GFileEnumerator,ref _GAsyncResult,ref ref _GError)i32 close_finish
        var ref clang proc() _g_reserved1
        var ref clang proc() _g_reserved2
        var ref clang proc() _g_reserved3
        var ref clang proc() _g_reserved4
        var ref clang proc() _g_reserved5
        var ref clang proc() _g_reserved6
        var ref clang proc() _g_reserved7
    end

    record _GFileEnumeratorPrivate =
        var int dummy    !empty record
    end

    clang function "g_file_enumerator_get_type"        ()u64
    clang function "g_file_enumerator_next_file"       (ref _GFileEnumerator,ref _GCancellable,ref ref _GError)ref _GFileInfo
    clang function "g_file_enumerator_close"           (ref _GFileEnumerator,ref _GCancellable,ref ref _GError)i32
    clang proc     "g_file_enumerator_next_files_async" (ref _GFileEnumerator,i32,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_file_enumerator_next_files_finish" (ref _GFileEnumerator,ref _GAsyncResult,ref ref _GError)ref _GList
    clang proc     "g_file_enumerator_close_async"     (ref _GFileEnumerator,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_file_enumerator_close_finish"    (ref _GFileEnumerator,ref _GAsyncResult,ref ref _GError)i32
    clang function "g_file_enumerator_is_closed"       (ref _GFileEnumerator)i32
    clang function "g_file_enumerator_has_pending"     (ref _GFileEnumerator)i32
    clang proc     "g_file_enumerator_set_pending"     (ref _GFileEnumerator,i32)
    clang function "g_file_enumerator_get_container"   (ref _GFileEnumerator)ref _GFile
    record _GFileIface =
        var _GTypeInterface g_iface
        var ref clang function(ref _GFile)ref _GFile dup
        var ref clang function(ref _GFile)u32 hash
        var ref clang function(ref _GFile,ref _GFile)i32 equal
        var ref clang function(ref _GFile)i32 is_native
        var ref clang function(ref _GFile,ref i8)i32 has_uri_scheme
        var ref clang function(ref _GFile)ref i8 get_uri_scheme
        var ref clang function(ref _GFile)ref i8 get_basename
        var ref clang function(ref _GFile)ref i8 get_path
        var ref clang function(ref _GFile)ref i8 get_uri
        var ref clang function(ref _GFile)ref i8 get_parse_name
        var ref clang function(ref _GFile)ref _GFile get_parent
        var ref clang function(ref _GFile,ref _GFile)i32 prefix_matches
        var ref clang function(ref _GFile,ref _GFile)ref i8 get_relative_path
        var ref clang function(ref _GFile,ref i8)ref _GFile resolve_relative_path
        var ref clang function(ref _GFile,ref i8,ref ref _GError)ref _GFile get_child_for_display_name
        var ref clang function(ref _GFile,ref i8,i32,ref _GCancellable,ref ref _GError)ref _GFileEnumerator enumerate_children
        var ref clang proc(ref _GFile,ref i8,i32,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) enumerate_children_async
        var ref clang function(ref _GFile,ref _GAsyncResult,ref ref _GError)ref _GFileEnumerator enumerate_children_finish
        var ref clang function(ref _GFile,ref i8,i32,ref _GCancellable,ref ref _GError)ref _GFileInfo query_info
        var ref clang proc(ref _GFile,ref i8,i32,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) query_info_async
        var ref clang function(ref _GFile,ref _GAsyncResult,ref ref _GError)ref _GFileInfo query_info_finish
        var ref clang function(ref _GFile,ref i8,ref _GCancellable,ref ref _GError)ref _GFileInfo query_filesystem_info
        var ref clang proc(ref _GFile,ref i8,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) query_filesystem_info_async
        var ref clang function(ref _GFile,ref _GAsyncResult,ref ref _GError)ref _GFileInfo query_filesystem_info_finish
        var ref clang function(ref _GFile,ref _GCancellable,ref ref _GError)ref _GMount find_enclosing_mount
        var ref clang proc(ref _GFile,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) find_enclosing_mount_async
        var ref clang function(ref _GFile,ref _GAsyncResult,ref ref _GError)ref _GMount find_enclosing_mount_finish
        var ref clang function(ref _GFile,ref i8,ref _GCancellable,ref ref _GError)ref _GFile set_display_name
        var ref clang proc(ref _GFile,ref i8,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) set_display_name_async
        var ref clang function(ref _GFile,ref _GAsyncResult,ref ref _GError)ref _GFile set_display_name_finish
        var ref clang function(ref _GFile,ref _GCancellable,ref ref _GError)ref _GFileAttributeInfoList query_settable_attributes
        var ref clang proc() _query_settable_attributes_async
        var ref clang proc() _query_settable_attributes_finish
        var ref clang function(ref _GFile,ref _GCancellable,ref ref _GError)ref _GFileAttributeInfoList query_writable_namespaces
        var ref clang proc() _query_writable_namespaces_async
        var ref clang proc() _query_writable_namespaces_finish
        var ref clang function(ref _GFile,ref i8,i32,ref void,i32,ref _GCancellable,ref ref _GError)i32 set_attribute
        var ref clang function(ref _GFile,ref _GFileInfo,i32,ref _GCancellable,ref ref _GError)i32 set_attributes_from_info
        var ref clang proc(ref _GFile,ref _GFileInfo,i32,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) set_attributes_async
        var ref clang function(ref _GFile,ref _GAsyncResult,ref ref _GFileInfo,ref ref _GError)i32 set_attributes_finish
        var ref clang function(ref _GFile,ref _GCancellable,ref ref _GError)ref _GFileInputStream read_fn
        var ref clang proc(ref _GFile,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) read_async
        var ref clang function(ref _GFile,ref _GAsyncResult,ref ref _GError)ref _GFileInputStream read_finish
        var ref clang function(ref _GFile,i32,ref _GCancellable,ref ref _GError)ref _GFileOutputStream append_to
        var ref clang proc(ref _GFile,i32,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) append_to_async
        var ref clang function(ref _GFile,ref _GAsyncResult,ref ref _GError)ref _GFileOutputStream append_to_finish
        var ref clang function(ref _GFile,i32,ref _GCancellable,ref ref _GError)ref _GFileOutputStream create
        var ref clang proc(ref _GFile,i32,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) create_async
        var ref clang function(ref _GFile,ref _GAsyncResult,ref ref _GError)ref _GFileOutputStream create_finish
        var ref clang function(ref _GFile,ref i8,i32,i32,ref _GCancellable,ref ref _GError)ref _GFileOutputStream replace
        var ref clang proc(ref _GFile,ref i8,i32,i32,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) replace_async
        var ref clang function(ref _GFile,ref _GAsyncResult,ref ref _GError)ref _GFileOutputStream replace_finish
        var ref clang function(ref _GFile,ref _GCancellable,ref ref _GError)i32 delete_file
        var ref clang proc(ref _GFile,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) delete_file_async
        var ref clang function(ref _GFile,ref _GAsyncResult,ref ref _GError)i32 delete_file_finish
        var ref clang function(ref _GFile,ref _GCancellable,ref ref _GError)i32 trash
        var ref clang proc() _trash_async
        var ref clang proc() _trash_finish
        var ref clang function(ref _GFile,ref _GCancellable,ref ref _GError)i32 make_directory
        var ref clang proc() _make_directory_async
        var ref clang proc() _make_directory_finish
        var ref clang function(ref _GFile,ref i8,ref _GCancellable,ref ref _GError)i32 make_symbolic_link
        var ref clang proc() _make_symbolic_link_async
        var ref clang proc() _make_symbolic_link_finish
        var ref clang function(ref _GFile,ref _GFile,i32,ref _GCancellable,ref clang proc(i64,i64,ref void),ref void,ref ref _GError)i32 copy
        var ref clang proc(ref _GFile,ref _GFile,i32,i32,ref _GCancellable,ref clang proc(i64,i64,ref void),ref void,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) copy_async
        var ref clang function(ref _GFile,ref _GAsyncResult,ref ref _GError)i32 copy_finish
        var ref clang function(ref _GFile,ref _GFile,i32,ref _GCancellable,ref clang proc(i64,i64,ref void),ref void,ref ref _GError)i32 move
        var ref clang proc() _move_async
        var ref clang proc() _move_finish
        var ref clang proc(ref _GFile,i32,ref _GMountOperation,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) mount_mountable
        var ref clang function(ref _GFile,ref _GAsyncResult,ref ref _GError)ref _GFile mount_mountable_finish
        var ref clang proc(ref _GFile,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) unmount_mountable
        var ref clang function(ref _GFile,ref _GAsyncResult,ref ref _GError)i32 unmount_mountable_finish
        var ref clang proc(ref _GFile,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) eject_mountable
        var ref clang function(ref _GFile,ref _GAsyncResult,ref ref _GError)i32 eject_mountable_finish
        var ref clang proc(ref _GFile,i32,ref _GMountOperation,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) mount_enclosing_volume
        var ref clang function(ref _GFile,ref _GAsyncResult,ref ref _GError)i32 mount_enclosing_volume_finish
        var ref clang function(ref _GFile,i32,ref _GCancellable,ref ref _GError)ref _GFileMonitor monitor_dir
        var ref clang function(ref _GFile,i32,ref _GCancellable,ref ref _GError)ref _GFileMonitor monitor_file
        var ref clang function(ref _GFile,ref _GCancellable,ref ref _GError)ref _GFileIOStream open_readwrite
        var ref clang proc(ref _GFile,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) open_readwrite_async
        var ref clang function(ref _GFile,ref _GAsyncResult,ref ref _GError)ref _GFileIOStream open_readwrite_finish
        var ref clang function(ref _GFile,i32,ref _GCancellable,ref ref _GError)ref _GFileIOStream create_readwrite
        var ref clang proc(ref _GFile,i32,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) create_readwrite_async
        var ref clang function(ref _GFile,ref _GAsyncResult,ref ref _GError)ref _GFileIOStream create_readwrite_finish
        var ref clang function(ref _GFile,ref i8,i32,i32,ref _GCancellable,ref ref _GError)ref _GFileIOStream replace_readwrite
        var ref clang proc(ref _GFile,ref i8,i32,i32,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) replace_readwrite_async
        var ref clang function(ref _GFile,ref _GAsyncResult,ref ref _GError)ref _GFileIOStream replace_readwrite_finish
        var ref clang proc(ref _GFile,i32,ref _GMountOperation,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) start_mountable
        var ref clang function(ref _GFile,ref _GAsyncResult,ref ref _GError)i32 start_mountable_finish
        var ref clang proc(ref _GFile,i32,ref _GMountOperation,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) stop_mountable
        var ref clang function(ref _GFile,ref _GAsyncResult,ref ref _GError)i32 stop_mountable_finish
        var i32 supports_thread_contexts
        var ref clang proc(ref _GFile,i32,ref _GMountOperation,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) unmount_mountable_with_operation
        var ref clang function(ref _GFile,ref _GAsyncResult,ref ref _GError)i32 unmount_mountable_with_operation_finish
        var ref clang proc(ref _GFile,i32,ref _GMountOperation,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) eject_mountable_with_operation
        var ref clang function(ref _GFile,ref _GAsyncResult,ref ref _GError)i32 eject_mountable_with_operation_finish
        var ref clang proc(ref _GFile,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) poll_mountable
        var ref clang function(ref _GFile,ref _GAsyncResult,ref ref _GError)i32 poll_mountable_finish
    end

    clang function "g_file_get_type"                   ()u64
    clang function "g_file_new_for_path"               (ref i8)ref _GFile
    clang function "g_file_new_for_uri"                (ref i8)ref _GFile
    clang function "g_file_new_for_commandline_arg"    (ref i8)ref _GFile
    clang function "g_file_new_tmp"                    (ref i8,ref ref _GFileIOStream,ref ref _GError)ref _GFile
    clang function "g_file_parse_name"                 (ref i8)ref _GFile
    clang function "g_file_dup"                        (ref _GFile)ref _GFile
    clang function "g_file_hash"                       (ref void)u32
    clang function "g_file_equal"                      (ref _GFile,ref _GFile)i32
    clang function "g_file_get_basename"               (ref _GFile)ref i8
    clang function "g_file_get_path"                   (ref _GFile)ref i8
    clang function "g_file_get_uri"                    (ref _GFile)ref i8
    clang function "g_file_get_parse_name"             (ref _GFile)ref i8
    clang function "g_file_get_parent"                 (ref _GFile)ref _GFile
    clang function "g_file_has_parent"                 (ref _GFile,ref _GFile)i32
    clang function "g_file_get_child"                  (ref _GFile,ref i8)ref _GFile
    clang function "g_file_get_child_for_display_name" (ref _GFile,ref i8,ref ref _GError)ref _GFile
    clang function "g_file_has_prefix"                 (ref _GFile,ref _GFile)i32
    clang function "g_file_get_relative_path"          (ref _GFile,ref _GFile)ref i8
    clang function "g_file_resolve_relative_path"      (ref _GFile,ref i8)ref _GFile
    clang function "g_file_is_native"                  (ref _GFile)i32
    clang function "g_file_has_uri_scheme"             (ref _GFile,ref i8)i32
    clang function "g_file_get_uri_scheme"             (ref _GFile)ref i8
    clang function "g_file_read"                       (ref _GFile,ref _GCancellable,ref ref _GError)ref _GFileInputStream
    clang proc     "g_file_read_async"                 (ref _GFile,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_file_read_finish"                (ref _GFile,ref _GAsyncResult,ref ref _GError)ref _GFileInputStream
    clang function "g_file_append_to"                  (ref _GFile,i32,ref _GCancellable,ref ref _GError)ref _GFileOutputStream
    clang function "g_file_create"                     (ref _GFile,i32,ref _GCancellable,ref ref _GError)ref _GFileOutputStream
    clang function "g_file_replace"                    (ref _GFile,ref i8,i32,i32,ref _GCancellable,ref ref _GError)ref _GFileOutputStream
    clang proc     "g_file_append_to_async"            (ref _GFile,i32,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_file_append_to_finish"           (ref _GFile,ref _GAsyncResult,ref ref _GError)ref _GFileOutputStream
    clang proc     "g_file_create_async"               (ref _GFile,i32,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_file_create_finish"              (ref _GFile,ref _GAsyncResult,ref ref _GError)ref _GFileOutputStream
    clang proc     "g_file_replace_async"              (ref _GFile,ref i8,i32,i32,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_file_replace_finish"             (ref _GFile,ref _GAsyncResult,ref ref _GError)ref _GFileOutputStream
    clang function "g_file_open_readwrite"             (ref _GFile,ref _GCancellable,ref ref _GError)ref _GFileIOStream
    clang proc     "g_file_open_readwrite_async"       (ref _GFile,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_file_open_readwrite_finish"      (ref _GFile,ref _GAsyncResult,ref ref _GError)ref _GFileIOStream
    clang function "g_file_create_readwrite"           (ref _GFile,i32,ref _GCancellable,ref ref _GError)ref _GFileIOStream
    clang proc     "g_file_create_readwrite_async"     (ref _GFile,i32,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_file_create_readwrite_finish"    (ref _GFile,ref _GAsyncResult,ref ref _GError)ref _GFileIOStream
    clang function "g_file_replace_readwrite"          (ref _GFile,ref i8,i32,i32,ref _GCancellable,ref ref _GError)ref _GFileIOStream
    clang proc     "g_file_replace_readwrite_async"    (ref _GFile,ref i8,i32,i32,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_file_replace_readwrite_finish"   (ref _GFile,ref _GAsyncResult,ref ref _GError)ref _GFileIOStream
    clang function "g_file_query_exists"               (ref _GFile,ref _GCancellable)i32
    clang function "g_file_query_file_type"            (ref _GFile,i32,ref _GCancellable)i32
    clang function "g_file_query_info"                 (ref _GFile,ref i8,i32,ref _GCancellable,ref ref _GError)ref _GFileInfo
    clang proc     "g_file_query_info_async"           (ref _GFile,ref i8,i32,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_file_query_info_finish"          (ref _GFile,ref _GAsyncResult,ref ref _GError)ref _GFileInfo
    clang function "g_file_query_filesystem_info"      (ref _GFile,ref i8,ref _GCancellable,ref ref _GError)ref _GFileInfo
    clang proc     "g_file_query_filesystem_info_async" (ref _GFile,ref i8,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_file_query_filesystem_info_finish" (ref _GFile,ref _GAsyncResult,ref ref _GError)ref _GFileInfo
    clang function "g_file_find_enclosing_mount"       (ref _GFile,ref _GCancellable,ref ref _GError)ref _GMount
    clang proc     "g_file_find_enclosing_mount_async" (ref _GFile,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_file_find_enclosing_mount_finish" (ref _GFile,ref _GAsyncResult,ref ref _GError)ref _GMount
    clang function "g_file_enumerate_children"         (ref _GFile,ref i8,i32,ref _GCancellable,ref ref _GError)ref _GFileEnumerator
    clang proc     "g_file_enumerate_children_async"   (ref _GFile,ref i8,i32,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_file_enumerate_children_finish"  (ref _GFile,ref _GAsyncResult,ref ref _GError)ref _GFileEnumerator
    clang function "g_file_set_display_name"           (ref _GFile,ref i8,ref _GCancellable,ref ref _GError)ref _GFile
    clang proc     "g_file_set_display_name_async"     (ref _GFile,ref i8,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_file_set_display_name_finish"    (ref _GFile,ref _GAsyncResult,ref ref _GError)ref _GFile
    clang function "g_file_delete"                     (ref _GFile,ref _GCancellable,ref ref _GError)i32
    clang proc     "g_file_delete_async"               (ref _GFile,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_file_delete_finish"              (ref _GFile,ref _GAsyncResult,ref ref _GError)i32
    clang function "g_file_trash"                      (ref _GFile,ref _GCancellable,ref ref _GError)i32
    clang function "g_file_copy"                       (ref _GFile,ref _GFile,i32,ref _GCancellable,ref clang proc(i64,i64,ref void),ref void,ref ref _GError)i32
    clang proc     "g_file_copy_async"                 (ref _GFile,ref _GFile,i32,i32,ref _GCancellable,ref clang proc(i64,i64,ref void),ref void,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_file_copy_finish"                (ref _GFile,ref _GAsyncResult,ref ref _GError)i32
    clang function "g_file_move"                       (ref _GFile,ref _GFile,i32,ref _GCancellable,ref clang proc(i64,i64,ref void),ref void,ref ref _GError)i32
    clang function "g_file_make_directory"             (ref _GFile,ref _GCancellable,ref ref _GError)i32
    clang function "g_file_make_directory_with_parents" (ref _GFile,ref _GCancellable,ref ref _GError)i32
    clang function "g_file_make_symbolic_link"         (ref _GFile,ref i8,ref _GCancellable,ref ref _GError)i32
    clang function "g_file_query_settable_attributes"  (ref _GFile,ref _GCancellable,ref ref _GError)ref _GFileAttributeInfoList
    clang function "g_file_query_writable_namespaces"  (ref _GFile,ref _GCancellable,ref ref _GError)ref _GFileAttributeInfoList
    clang function "g_file_set_attribute"              (ref _GFile,ref i8,i32,ref void,i32,ref _GCancellable,ref ref _GError)i32
    clang function "g_file_set_attributes_from_info"   (ref _GFile,ref _GFileInfo,i32,ref _GCancellable,ref ref _GError)i32
    clang proc     "g_file_set_attributes_async"       (ref _GFile,ref _GFileInfo,i32,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_file_set_attributes_finish"      (ref _GFile,ref _GAsyncResult,ref ref _GFileInfo,ref ref _GError)i32
    clang function "g_file_set_attribute_string"       (ref _GFile,ref i8,ref i8,i32,ref _GCancellable,ref ref _GError)i32
    clang function "g_file_set_attribute_byte_string"  (ref _GFile,ref i8,ref i8,i32,ref _GCancellable,ref ref _GError)i32
    clang function "g_file_set_attribute_uint32"       (ref _GFile,ref i8,u32,i32,ref _GCancellable,ref ref _GError)i32
    clang function "g_file_set_attribute_int32"        (ref _GFile,ref i8,i32,i32,ref _GCancellable,ref ref _GError)i32
    clang function "g_file_set_attribute_uint64"       (ref _GFile,ref i8,u64,i32,ref _GCancellable,ref ref _GError)i32
    clang function "g_file_set_attribute_int64"        (ref _GFile,ref i8,i64,i32,ref _GCancellable,ref ref _GError)i32
    clang proc     "g_file_mount_enclosing_volume"     (ref _GFile,i32,ref _GMountOperation,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_file_mount_enclosing_volume_finish" (ref _GFile,ref _GAsyncResult,ref ref _GError)i32
    clang proc     "g_file_mount_mountable"            (ref _GFile,i32,ref _GMountOperation,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_file_mount_mountable_finish"     (ref _GFile,ref _GAsyncResult,ref ref _GError)ref _GFile
    clang proc     "g_file_unmount_mountable"          (ref _GFile,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_file_unmount_mountable_finish"   (ref _GFile,ref _GAsyncResult,ref ref _GError)i32
    clang proc     "g_file_unmount_mountable_with_operation" (ref _GFile,i32,ref _GMountOperation,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_file_unmount_mountable_with_operation_finish" (ref _GFile,ref _GAsyncResult,ref ref _GError)i32
    clang proc     "g_file_eject_mountable"            (ref _GFile,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_file_eject_mountable_finish"     (ref _GFile,ref _GAsyncResult,ref ref _GError)i32
    clang proc     "g_file_eject_mountable_with_operation" (ref _GFile,i32,ref _GMountOperation,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_file_eject_mountable_with_operation_finish" (ref _GFile,ref _GAsyncResult,ref ref _GError)i32
    clang function "g_file_copy_attributes"            (ref _GFile,ref _GFile,i32,ref _GCancellable,ref ref _GError)i32
    clang function "g_file_monitor_directory"          (ref _GFile,i32,ref _GCancellable,ref ref _GError)ref _GFileMonitor
    clang function "g_file_monitor_file"               (ref _GFile,i32,ref _GCancellable,ref ref _GError)ref _GFileMonitor
    clang function "g_file_monitor"                    (ref _GFile,i32,ref _GCancellable,ref ref _GError)ref _GFileMonitor
    clang proc     "g_file_start_mountable"            (ref _GFile,i32,ref _GMountOperation,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_file_start_mountable_finish"     (ref _GFile,ref _GAsyncResult,ref ref _GError)i32
    clang proc     "g_file_stop_mountable"             (ref _GFile,i32,ref _GMountOperation,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_file_stop_mountable_finish"      (ref _GFile,ref _GAsyncResult,ref ref _GError)i32
    clang proc     "g_file_poll_mountable"             (ref _GFile,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_file_poll_mountable_finish"      (ref _GFile,ref _GAsyncResult,ref ref _GError)i32
    clang function "g_file_query_default_handler"      (ref _GFile,ref _GCancellable,ref ref _GError)ref _GAppInfo
    clang function "g_file_load_contents"              (ref _GFile,ref _GCancellable,ref ref i8,ref u64,ref ref i8,ref ref _GError)i32
    clang proc     "g_file_load_contents_async"        (ref _GFile,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_file_load_contents_finish"       (ref _GFile,ref _GAsyncResult,ref ref i8,ref u64,ref ref i8,ref ref _GError)i32
    clang proc     "g_file_load_partial_contents_async" (ref _GFile,ref _GCancellable,ref clang function(ref i8,i64,ref void)i32,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_file_load_partial_contents_finish" (ref _GFile,ref _GAsyncResult,ref ref i8,ref u64,ref ref i8,ref ref _GError)i32
    clang function "g_file_replace_contents"           (ref _GFile,ref i8,u64,ref i8,i32,i32,ref ref i8,ref _GCancellable,ref ref _GError)i32
    clang proc     "g_file_replace_contents_async"     (ref _GFile,ref i8,u64,ref i8,i32,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_file_replace_contents_finish"    (ref _GFile,ref _GAsyncResult,ref ref i8,ref ref _GError)i32
    clang function "g_file_supports_thread_contexts"   (ref _GFile)i32
    record _GFileIconClass =
        var int dummy    !empty record
    end

    clang function "g_file_icon_get_type"              ()u64
    clang function "g_file_icon_new"                   (ref _GFile)ref _GIcon
    clang function "g_file_icon_get_file"              (ref _GFileIcon)ref _GFile
    record _GFileInfoClass =
        var int dummy    !empty record
    end

    clang function "g_file_info_get_type"              ()u64
    clang function "g_file_info_new"                   ()ref _GFileInfo
    clang function "g_file_info_dup"                   (ref _GFileInfo)ref _GFileInfo
    clang proc     "g_file_info_copy_into"             (ref _GFileInfo,ref _GFileInfo)
    clang function "g_file_info_has_attribute"         (ref _GFileInfo,ref i8)i32
    clang function "g_file_info_has_namespace"         (ref _GFileInfo,ref i8)i32
    clang function "g_file_info_list_attributes"       (ref _GFileInfo,ref i8)ref ref i8
    clang function "g_file_info_get_attribute_data"    (ref _GFileInfo,ref i8,ref i32,ref ref void,ref i32)i32
    clang function "g_file_info_get_attribute_type"    (ref _GFileInfo,ref i8)i32
    clang proc     "g_file_info_remove_attribute"      (ref _GFileInfo,ref i8)
    clang function "g_file_info_get_attribute_status"  (ref _GFileInfo,ref i8)i32
    clang function "g_file_info_set_attribute_status"  (ref _GFileInfo,ref i8,i32)i32
    clang function "g_file_info_get_attribute_as_string" (ref _GFileInfo,ref i8)ref i8
    clang function "g_file_info_get_attribute_string"  (ref _GFileInfo,ref i8)ref i8
    clang function "g_file_info_get_attribute_byte_string" (ref _GFileInfo,ref i8)ref i8
    clang function "g_file_info_get_attribute_boolean" (ref _GFileInfo,ref i8)i32
    clang function "g_file_info_get_attribute_uint32"  (ref _GFileInfo,ref i8)u32
    clang function "g_file_info_get_attribute_int32"   (ref _GFileInfo,ref i8)i32
    clang function "g_file_info_get_attribute_uint64"  (ref _GFileInfo,ref i8)u64
    clang function "g_file_info_get_attribute_int64"   (ref _GFileInfo,ref i8)i64
    clang function "g_file_info_get_attribute_object"  (ref _GFileInfo,ref i8)ref _GObject
    clang function "g_file_info_get_attribute_stringv" (ref _GFileInfo,ref i8)ref ref i8
    clang proc     "g_file_info_set_attribute"         (ref _GFileInfo,ref i8,i32,ref void)
    clang proc     "g_file_info_set_attribute_string"  (ref _GFileInfo,ref i8,ref i8)
    clang proc     "g_file_info_set_attribute_byte_string" (ref _GFileInfo,ref i8,ref i8)
    clang proc     "g_file_info_set_attribute_boolean" (ref _GFileInfo,ref i8,i32)
    clang proc     "g_file_info_set_attribute_uint32"  (ref _GFileInfo,ref i8,u32)
    clang proc     "g_file_info_set_attribute_int32"   (ref _GFileInfo,ref i8,i32)
    clang proc     "g_file_info_set_attribute_uint64"  (ref _GFileInfo,ref i8,u64)
    clang proc     "g_file_info_set_attribute_int64"   (ref _GFileInfo,ref i8,i64)
    clang proc     "g_file_info_set_attribute_object"  (ref _GFileInfo,ref i8,ref _GObject)
    clang proc     "g_file_info_set_attribute_stringv" (ref _GFileInfo,ref i8,ref ref i8)
    clang proc     "g_file_info_clear_status"          (ref _GFileInfo)
    clang function "g_file_info_get_file_type"         (ref _GFileInfo)i32
    clang function "g_file_info_get_is_hidden"         (ref _GFileInfo)i32
    clang function "g_file_info_get_is_backup"         (ref _GFileInfo)i32
    clang function "g_file_info_get_is_symlink"        (ref _GFileInfo)i32
    clang function "g_file_info_get_name"              (ref _GFileInfo)ref i8
    clang function "g_file_info_get_display_name"      (ref _GFileInfo)ref i8
    clang function "g_file_info_get_edit_name"         (ref _GFileInfo)ref i8
    clang function "g_file_info_get_icon"              (ref _GFileInfo)ref _GIcon
    clang function "g_file_info_get_symbolic_icon"     (ref _GFileInfo)ref _GIcon
    clang function "g_file_info_get_content_type"      (ref _GFileInfo)ref i8
    clang function "g_file_info_get_size"              (ref _GFileInfo)i64
    clang proc     "g_file_info_get_modification_time" (ref _GFileInfo,ref _GTimeVal)
    clang function "g_file_info_get_symlink_target"    (ref _GFileInfo)ref i8
    clang function "g_file_info_get_etag"              (ref _GFileInfo)ref i8
    clang function "g_file_info_get_sort_order"        (ref _GFileInfo)i32
    clang proc     "g_file_info_set_attribute_mask"    (ref _GFileInfo,ref _GFileAttributeMatcher)
    clang proc     "g_file_info_unset_attribute_mask"  (ref _GFileInfo)
    clang proc     "g_file_info_set_file_type"         (ref _GFileInfo,i32)
    clang proc     "g_file_info_set_is_hidden"         (ref _GFileInfo,i32)
    clang proc     "g_file_info_set_is_symlink"        (ref _GFileInfo,i32)
    clang proc     "g_file_info_set_name"              (ref _GFileInfo,ref i8)
    clang proc     "g_file_info_set_display_name"      (ref _GFileInfo,ref i8)
    clang proc     "g_file_info_set_edit_name"         (ref _GFileInfo,ref i8)
    clang proc     "g_file_info_set_icon"              (ref _GFileInfo,ref _GIcon)
    clang proc     "g_file_info_set_symbolic_icon"     (ref _GFileInfo,ref _GIcon)
    clang proc     "g_file_info_set_content_type"      (ref _GFileInfo,ref i8)
    clang proc     "g_file_info_set_size"              (ref _GFileInfo,i64)
    clang proc     "g_file_info_set_modification_time" (ref _GFileInfo,ref _GTimeVal)
    clang proc     "g_file_info_set_symlink_target"    (ref _GFileInfo,ref i8)
    clang proc     "g_file_info_set_sort_order"        (ref _GFileInfo,i32)
    clang function "g_file_attribute_matcher_get_type" ()u64
    clang function "g_file_attribute_matcher_new"      (ref i8)ref _GFileAttributeMatcher
    clang function "g_file_attribute_matcher_ref"      (ref _GFileAttributeMatcher)ref _GFileAttributeMatcher
    clang proc     "g_file_attribute_matcher_unref"    (ref _GFileAttributeMatcher)
    clang function "g_file_attribute_matcher_subtract" (ref _GFileAttributeMatcher,ref _GFileAttributeMatcher)ref _GFileAttributeMatcher
    clang function "g_file_attribute_matcher_matches"  (ref _GFileAttributeMatcher,ref i8)i32
    clang function "g_file_attribute_matcher_matches_only" (ref _GFileAttributeMatcher,ref i8)i32
    clang function "g_file_attribute_matcher_enumerate_namespace" (ref _GFileAttributeMatcher,ref i8)i32
    clang function "g_file_attribute_matcher_enumerate_next" (ref _GFileAttributeMatcher)ref i8
    clang function "g_file_attribute_matcher_to_string" (ref _GFileAttributeMatcher)ref i8
    record _GFileInputStreamClass =
        var _GInputStreamClass parent_class
        var ref clang function(ref _GFileInputStream)i64 tell
        var ref clang function(ref _GFileInputStream)i32 can_seek
        var ref clang function(ref _GFileInputStream,i64,i32,ref _GCancellable,ref ref _GError)i32 seek
        var ref clang function(ref _GFileInputStream,ref i8,ref _GCancellable,ref ref _GError)ref _GFileInfo query_info
        var ref clang proc(ref _GFileInputStream,ref i8,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) query_info_async
        var ref clang function(ref _GFileInputStream,ref _GAsyncResult,ref ref _GError)ref _GFileInfo query_info_finish
        var ref clang proc() _g_reserved1
        var ref clang proc() _g_reserved2
        var ref clang proc() _g_reserved3
        var ref clang proc() _g_reserved4
        var ref clang proc() _g_reserved5
    end

    record _GFileInputStreamPrivate =
        var int dummy    !empty record
    end

    clang function "g_file_input_stream_get_type"      ()u64
    clang function "g_file_input_stream_query_info"    (ref _GFileInputStream,ref i8,ref _GCancellable,ref ref _GError)ref _GFileInfo
    clang proc     "g_file_input_stream_query_info_async" (ref _GFileInputStream,ref i8,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_file_input_stream_query_info_finish" (ref _GFileInputStream,ref _GAsyncResult,ref ref _GError)ref _GFileInfo
    clang function "g_io_error_quark"                  ()u32
    clang function "g_io_error_from_errno"             (i32)i32
    clang function "g_io_error_from_win32_error"       (i32)i32
    record _GIOStreamPrivate =
        var int dummy    !empty record
    end

    record _GIOStreamClass =
        var _GObjectClass parent_class
        var ref clang function(ref _GIOStream)ref _GInputStream get_input_stream
        var ref clang function(ref _GIOStream)ref _GOutputStream get_output_stream
        var ref clang function(ref _GIOStream,ref _GCancellable,ref ref _GError)i32 close_fn
        var ref clang proc(ref _GIOStream,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) close_async
        var ref clang function(ref _GIOStream,ref _GAsyncResult,ref ref _GError)i32 close_finish
        var ref clang proc() _g_reserved1
        var ref clang proc() _g_reserved2
        var ref clang proc() _g_reserved3
        var ref clang proc() _g_reserved4
        var ref clang proc() _g_reserved5
        var ref clang proc() _g_reserved6
        var ref clang proc() _g_reserved7
        var ref clang proc() _g_reserved8
        var ref clang proc() _g_reserved9
        var ref clang proc() _g_reserved10
    end

    clang function "g_io_stream_get_type"              ()u64
    clang function "g_io_stream_get_input_stream"      (ref _GIOStream)ref _GInputStream
    clang function "g_io_stream_get_output_stream"     (ref _GIOStream)ref _GOutputStream
    clang proc     "g_io_stream_splice_async"          (ref _GIOStream,ref _GIOStream,i32,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_io_stream_splice_finish"         (ref _GAsyncResult,ref ref _GError)i32
    clang function "g_io_stream_close"                 (ref _GIOStream,ref _GCancellable,ref ref _GError)i32
    clang proc     "g_io_stream_close_async"           (ref _GIOStream,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_io_stream_close_finish"          (ref _GIOStream,ref _GAsyncResult,ref ref _GError)i32
    clang function "g_io_stream_is_closed"             (ref _GIOStream)i32
    clang function "g_io_stream_has_pending"           (ref _GIOStream)i32
    clang function "g_io_stream_set_pending"           (ref _GIOStream,ref ref _GError)i32
    clang proc     "g_io_stream_clear_pending"         (ref _GIOStream)
    record _GFileIOStreamClass =
        var _GIOStreamClass parent_class
        var ref clang function(ref _GFileIOStream)i64 tell
        var ref clang function(ref _GFileIOStream)i32 can_seek
        var ref clang function(ref _GFileIOStream,i64,i32,ref _GCancellable,ref ref _GError)i32 seek
        var ref clang function(ref _GFileIOStream)i32 can_truncate
        var ref clang function(ref _GFileIOStream,i64,ref _GCancellable,ref ref _GError)i32 truncate_fn
        var ref clang function(ref _GFileIOStream,ref i8,ref _GCancellable,ref ref _GError)ref _GFileInfo query_info
        var ref clang proc(ref _GFileIOStream,ref i8,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) query_info_async
        var ref clang function(ref _GFileIOStream,ref _GAsyncResult,ref ref _GError)ref _GFileInfo query_info_finish
        var ref clang function(ref _GFileIOStream)ref i8 get_etag
        var ref clang proc() _g_reserved1
        var ref clang proc() _g_reserved2
        var ref clang proc() _g_reserved3
        var ref clang proc() _g_reserved4
        var ref clang proc() _g_reserved5
    end

    record _GFileIOStreamPrivate =
        var int dummy    !empty record
    end

    clang function "g_file_io_stream_get_type"         ()u64
    clang function "g_file_io_stream_query_info"       (ref _GFileIOStream,ref i8,ref _GCancellable,ref ref _GError)ref _GFileInfo
    clang proc     "g_file_io_stream_query_info_async" (ref _GFileIOStream,ref i8,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_file_io_stream_query_info_finish" (ref _GFileIOStream,ref _GAsyncResult,ref ref _GError)ref _GFileInfo
    clang function "g_file_io_stream_get_etag"         (ref _GFileIOStream)ref i8
    record _GFileMonitorClass =
        var _GObjectClass parent_class
        var ref clang proc(ref _GFileMonitor,ref _GFile,ref _GFile,i32) changed
        var ref clang function(ref _GFileMonitor)i32 cancel
        var ref clang proc() _g_reserved1
        var ref clang proc() _g_reserved2
        var ref clang proc() _g_reserved3
        var ref clang proc() _g_reserved4
        var ref clang proc() _g_reserved5
    end

    record _GFileMonitorPrivate =
        var int dummy    !empty record
    end

    clang function "g_file_monitor_get_type"           ()u64
    clang function "g_file_monitor_cancel"             (ref _GFileMonitor)i32
    clang function "g_file_monitor_is_cancelled"       (ref _GFileMonitor)i32
    clang proc     "g_file_monitor_set_rate_limit"     (ref _GFileMonitor,i32)
    clang proc     "g_file_monitor_emit_event"         (ref _GFileMonitor,ref _GFile,ref _GFile,i32)
    record _GFilenameCompleterClass =
        var _GObjectClass parent_class
        var ref clang proc(ref _GFilenameCompleter) got_completion_data
        var ref clang proc() _g_reserved1
        var ref clang proc() _g_reserved2
        var ref clang proc() _g_reserved3
    end

    clang function "g_filename_completer_get_type"     ()u64
    clang function "g_filename_completer_new"          ()ref _GFilenameCompleter
    clang function "g_filename_completer_get_completion_suffix" (ref _GFilenameCompleter,ref i8)ref i8
    clang function "g_filename_completer_get_completions" (ref _GFilenameCompleter,ref i8)ref ref i8
    clang proc     "g_filename_completer_set_dirs_only" (ref _GFilenameCompleter,i32)
    record _GFileOutputStreamClass =
        var _GOutputStreamClass parent_class
        var ref clang function(ref _GFileOutputStream)i64 tell
        var ref clang function(ref _GFileOutputStream)i32 can_seek
        var ref clang function(ref _GFileOutputStream,i64,i32,ref _GCancellable,ref ref _GError)i32 seek
        var ref clang function(ref _GFileOutputStream)i32 can_truncate
        var ref clang function(ref _GFileOutputStream,i64,ref _GCancellable,ref ref _GError)i32 truncate_fn
        var ref clang function(ref _GFileOutputStream,ref i8,ref _GCancellable,ref ref _GError)ref _GFileInfo query_info
        var ref clang proc(ref _GFileOutputStream,ref i8,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) query_info_async
        var ref clang function(ref _GFileOutputStream,ref _GAsyncResult,ref ref _GError)ref _GFileInfo query_info_finish
        var ref clang function(ref _GFileOutputStream)ref i8 get_etag
        var ref clang proc() _g_reserved1
        var ref clang proc() _g_reserved2
        var ref clang proc() _g_reserved3
        var ref clang proc() _g_reserved4
        var ref clang proc() _g_reserved5
    end

    record _GFileOutputStreamPrivate =
        var int dummy    !empty record
    end

    clang function "g_file_output_stream_get_type"     ()u64
    clang function "g_file_output_stream_query_info"   (ref _GFileOutputStream,ref i8,ref _GCancellable,ref ref _GError)ref _GFileInfo
    clang proc     "g_file_output_stream_query_info_async" (ref _GFileOutputStream,ref i8,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_file_output_stream_query_info_finish" (ref _GFileOutputStream,ref _GAsyncResult,ref ref _GError)ref _GFileInfo
    clang function "g_file_output_stream_get_etag"     (ref _GFileOutputStream)ref i8
    record _GInetAddressClass =
        var _GObjectClass parent_class
        var ref clang function(ref _GInetAddress)ref i8 to_string
        var ref clang function(ref _GInetAddress)ref byte to_bytes
    end

    record _GInetAddressPrivate =
        var int dummy    !empty record
    end

    clang function "g_inet_address_get_type"           ()u64
    clang function "g_inet_address_new_from_string"    (ref i8)ref _GInetAddress
    clang function "g_inet_address_new_from_bytes"     (ref byte,i32)ref _GInetAddress
    clang function "g_inet_address_new_loopback"       (i32)ref _GInetAddress
    clang function "g_inet_address_new_any"            (i32)ref _GInetAddress
    clang function "g_inet_address_equal"              (ref _GInetAddress,ref _GInetAddress)i32
    clang function "g_inet_address_to_string"          (ref _GInetAddress)ref i8
    clang function "g_inet_address_to_bytes"           (ref _GInetAddress)ref byte
    clang function "g_inet_address_get_native_size"    (ref _GInetAddress)u64
    clang function "g_inet_address_get_family"         (ref _GInetAddress)i32
    clang function "g_inet_address_get_is_any"         (ref _GInetAddress)i32
    clang function "g_inet_address_get_is_loopback"    (ref _GInetAddress)i32
    clang function "g_inet_address_get_is_link_local"  (ref _GInetAddress)i32
    clang function "g_inet_address_get_is_site_local"  (ref _GInetAddress)i32
    clang function "g_inet_address_get_is_multicast"   (ref _GInetAddress)i32
    clang function "g_inet_address_get_is_mc_global"   (ref _GInetAddress)i32
    clang function "g_inet_address_get_is_mc_link_local" (ref _GInetAddress)i32
    clang function "g_inet_address_get_is_mc_node_local" (ref _GInetAddress)i32
    clang function "g_inet_address_get_is_mc_org_local" (ref _GInetAddress)i32
    clang function "g_inet_address_get_is_mc_site_local" (ref _GInetAddress)i32
    record _GInetAddressMaskClass =
        var _GObjectClass parent_class
    end

    record _GInetAddressMaskPrivate =
        var int dummy    !empty record
    end

    clang function "g_inet_address_mask_get_type"      ()u64
    clang function "g_inet_address_mask_new"           (ref _GInetAddress,u32,ref ref _GError)ref _GInetAddressMask
    clang function "g_inet_address_mask_new_from_string" (ref i8,ref ref _GError)ref _GInetAddressMask
    clang function "g_inet_address_mask_to_string"     (ref _GInetAddressMask)ref i8
    clang function "g_inet_address_mask_get_family"    (ref _GInetAddressMask)i32
    clang function "g_inet_address_mask_get_address"   (ref _GInetAddressMask)ref _GInetAddress
    clang function "g_inet_address_mask_get_length"    (ref _GInetAddressMask)u32
    clang function "g_inet_address_mask_matches"       (ref _GInetAddressMask,ref _GInetAddress)i32
    clang function "g_inet_address_mask_equal"         (ref _GInetAddressMask,ref _GInetAddressMask)i32
    record _GSocketAddressClass =
        var _GObjectClass parent_class
        var ref clang function(ref _GSocketAddress)i32 get_family
        var ref clang function(ref _GSocketAddress)i64 get_native_size
        var ref clang function(ref _GSocketAddress,ref void,u64,ref ref _GError)i32 to_native
    end

    clang function "g_socket_address_get_type"         ()u64
    clang function "g_socket_address_get_family"       (ref _GSocketAddress)i32
    clang function "g_socket_address_new_from_native"  (ref void,u64)ref _GSocketAddress
    clang function "g_socket_address_to_native"        (ref _GSocketAddress,ref void,u64,ref ref _GError)i32
    clang function "g_socket_address_get_native_size"  (ref _GSocketAddress)i64
    record _GInetSocketAddressClass =
        var _GSocketAddressClass parent_class
    end

    record _GInetSocketAddressPrivate =
        var int dummy    !empty record
    end

    clang function "g_inet_socket_address_get_type"    ()u64
    clang function "g_inet_socket_address_new"         (ref _GInetAddress,u16)ref _GSocketAddress
    clang function "g_inet_socket_address_get_address" (ref _GInetSocketAddress)ref _GInetAddress
    clang function "g_inet_socket_address_get_port"    (ref _GInetSocketAddress)u16
    clang function "g_inet_socket_address_get_flowinfo" (ref _GInetSocketAddress)u32
    clang function "g_inet_socket_address_get_scope_id" (ref _GInetSocketAddress)u32
    clang function "g_app_info_create_flags_get_type"  ()u64
    clang function "g_converter_flags_get_type"        ()u64
    clang function "g_converter_result_get_type"       ()u64
    clang function "g_data_stream_byte_order_get_type" ()u64
    clang function "g_data_stream_newline_type_get_type" ()u64
    clang function "g_file_attribute_type_get_type"    ()u64
    clang function "g_file_attribute_info_flags_get_type" ()u64
    clang function "g_file_attribute_status_get_type"  ()u64
    clang function "g_file_query_info_flags_get_type"  ()u64
    clang function "g_file_create_flags_get_type"      ()u64
    clang function "g_mount_mount_flags_get_type"      ()u64
    clang function "g_mount_unmount_flags_get_type"    ()u64
    clang function "g_drive_start_flags_get_type"      ()u64
    clang function "g_drive_start_stop_type_get_type"  ()u64
    clang function "g_file_copy_flags_get_type"        ()u64
    clang function "g_file_monitor_flags_get_type"     ()u64
    clang function "g_file_type_get_type"              ()u64
    clang function "g_filesystem_preview_type_get_type" ()u64
    clang function "g_file_monitor_event_get_type"     ()u64
    clang function "g_io_error_enum_get_type"          ()u64
    clang function "g_ask_password_flags_get_type"     ()u64
    clang function "g_password_save_get_type"          ()u64
    clang function "g_mount_operation_result_get_type" ()u64
    clang function "g_output_stream_splice_flags_get_type" ()u64
    clang function "g_io_stream_splice_flags_get_type" ()u64
    clang function "g_emblem_origin_get_type"          ()u64
    clang function "g_resolver_error_get_type"         ()u64
    clang function "g_resolver_record_type_get_type"   ()u64
    clang function "g_resource_error_get_type"         ()u64
    clang function "g_resource_flags_get_type"         ()u64
    clang function "g_resource_lookup_flags_get_type"  ()u64
    clang function "g_socket_family_get_type"          ()u64
    clang function "g_socket_type_get_type"            ()u64
    clang function "g_socket_msg_flags_get_type"       ()u64
    clang function "g_socket_protocol_get_type"        ()u64
    clang function "g_zlib_compressor_format_get_type" ()u64
    clang function "g_unix_socket_address_type_get_type" ()u64
    clang function "g_bus_type_get_type"               ()u64
    clang function "g_bus_name_owner_flags_get_type"   ()u64
    clang function "g_bus_name_watcher_flags_get_type" ()u64
    clang function "g_dbus_proxy_flags_get_type"       ()u64
    clang function "g_dbus_error_get_type"             ()u64
    clang function "g_dbus_connection_flags_get_type"  ()u64
    clang function "g_dbus_capability_flags_get_type"  ()u64
    clang function "g_dbus_call_flags_get_type"        ()u64
    clang function "g_dbus_message_type_get_type"      ()u64
    clang function "g_dbus_message_flags_get_type"     ()u64
    clang function "g_dbus_message_header_field_get_type" ()u64
    clang function "g_dbus_property_info_flags_get_type" ()u64
    clang function "g_dbus_subtree_flags_get_type"     ()u64
    clang function "g_dbus_server_flags_get_type"      ()u64
    clang function "g_dbus_signal_flags_get_type"      ()u64
    clang function "g_dbus_send_message_flags_get_type" ()u64
    clang function "g_credentials_type_get_type"       ()u64
    clang function "g_dbus_message_byte_order_get_type" ()u64
    clang function "g_application_flags_get_type"      ()u64
    clang function "g_tls_error_get_type"              ()u64
    clang function "g_tls_certificate_flags_get_type"  ()u64
    clang function "g_tls_authentication_mode_get_type" ()u64
    clang function "g_tls_rehandshake_mode_get_type"   ()u64
    clang function "g_tls_password_flags_get_type"     ()u64
    clang function "g_tls_interaction_result_get_type" ()u64
    clang function "g_dbus_interface_skeleton_flags_get_type" ()u64
    clang function "g_dbus_object_manager_client_flags_get_type" ()u64
    clang function "g_tls_database_verify_flags_get_type" ()u64
    clang function "g_tls_database_lookup_flags_get_type" ()u64
    clang function "g_io_module_scope_flags_get_type"  ()u64
    clang function "g_socket_client_event_get_type"    ()u64
    clang function "g_test_dbus_flags_get_type"        ()u64
    clang function "g_settings_bind_flags_get_type"    ()u64
    const G_MODULE_BIND_LAZY                 = 1
    const G_MODULE_BIND_LOCAL                = 2
    const G_MODULE_BIND_MASK                 = 3
    record _GModule =
        var int dummy    !empty record
    end

    clang function "g_module_supported"                ()i32
    clang function "g_module_open_utf8"                (ref i8,i32)ref _GModule
    clang function "g_module_close"                    (ref _GModule)i32
    clang proc     "g_module_make_resident"            (ref _GModule)
    clang function "g_module_error"                    ()ref i8
    clang function "g_module_symbol"                   (ref _GModule,ref i8,ref ref void)i32
    clang function "g_module_name_utf8"                (ref _GModule)ref i8
    clang function "g_module_build_path"               (ref i8,ref i8)ref i8
    record _GIOModuleScope =
        var int dummy    !empty record
    end

    clang function "g_io_module_scope_new"             (i32)ref _GIOModuleScope
    clang proc     "g_io_module_scope_free"            (ref _GIOModuleScope)
    clang proc     "g_io_module_scope_block"           (ref _GIOModuleScope,ref i8)
    record _GIOModuleClass =
        var int dummy    !empty record
    end

    clang function "g_io_module_get_type"              ()u64
    clang function "g_io_module_new"                   (ref i8)ref _GIOModule
    clang proc     "g_io_modules_scan_all_in_directory" (ref i8)
    clang function "g_io_modules_load_all_in_directory" (ref i8)ref _GList
    clang proc     "g_io_modules_scan_all_in_directory_with_scope" (ref i8,ref _GIOModuleScope)
    clang function "g_io_modules_load_all_in_directory_with_scope" (ref i8,ref _GIOModuleScope)ref _GList
    clang function "g_io_extension_point_register"     (ref i8)ref _GIOExtensionPoint
    clang function "g_io_extension_point_lookup"       (ref i8)ref _GIOExtensionPoint
    clang proc     "g_io_extension_point_set_required_type" (ref _GIOExtensionPoint,u64)
    clang function "g_io_extension_point_get_required_type" (ref _GIOExtensionPoint)u64
    clang function "g_io_extension_point_get_extensions" (ref _GIOExtensionPoint)ref _GList
    clang function "g_io_extension_point_get_extension_by_name" (ref _GIOExtensionPoint,ref i8)ref _GIOExtension
    clang function "g_io_extension_point_implement"    (ref i8,u64,ref i8,i32)ref _GIOExtension
    clang function "g_io_extension_get_type"           (ref _GIOExtension)u64
    clang function "g_io_extension_get_name"           (ref _GIOExtension)ref i8
    clang function "g_io_extension_get_priority"       (ref _GIOExtension)i32
    clang function "g_io_extension_ref_class"          (ref _GIOExtension)ref _GTypeClass
    clang proc     "g_io_module_load"                  (ref _GIOModule)
    clang proc     "g_io_module_unload"                (ref _GIOModule)
    clang function "g_io_module_query"                 ()ref ref i8
    clang proc     "g_io_scheduler_push_job"           (ref clang function(ref _GIOSchedulerJob,ref _GCancellable,ref void)i32,ref void,ref clang proc(ref void),i32,ref _GCancellable)
    clang proc     "g_io_scheduler_cancel_all_jobs"    ()
    clang function "g_io_scheduler_job_send_to_mainloop" (ref _GIOSchedulerJob,ref clang function(ref void)i32,ref void,ref clang proc(ref void))i32
    clang proc     "g_io_scheduler_job_send_to_mainloop_async" (ref _GIOSchedulerJob,ref clang function(ref void)i32,ref void,ref clang proc(ref void))
    record _GLoadableIconIface =
        var _GTypeInterface g_iface
        var ref clang function(ref _GLoadableIcon,i32,ref ref i8,ref _GCancellable,ref ref _GError)ref _GInputStream load
        var ref clang proc(ref _GLoadableIcon,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) load_async
        var ref clang function(ref _GLoadableIcon,ref _GAsyncResult,ref ref i8,ref ref _GError)ref _GInputStream load_finish
    end

    clang function "g_loadable_icon_get_type"          ()u64
    clang function "g_loadable_icon_load"              (ref _GLoadableIcon,i32,ref ref i8,ref _GCancellable,ref ref _GError)ref _GInputStream
    clang proc     "g_loadable_icon_load_async"        (ref _GLoadableIcon,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_loadable_icon_load_finish"       (ref _GLoadableIcon,ref _GAsyncResult,ref ref i8,ref ref _GError)ref _GInputStream
    record _GMemoryInputStreamClass =
        var _GInputStreamClass parent_class
        var ref clang proc() _g_reserved1
        var ref clang proc() _g_reserved2
        var ref clang proc() _g_reserved3
        var ref clang proc() _g_reserved4
        var ref clang proc() _g_reserved5
    end

    record _GMemoryInputStreamPrivate =
        var int dummy    !empty record
    end

    clang function "g_memory_input_stream_get_type"    ()u64
    clang function "g_memory_input_stream_new"         ()ref _GInputStream
    clang function "g_memory_input_stream_new_from_data" (ref void,i64,ref clang proc(ref void))ref _GInputStream
    clang function "g_memory_input_stream_new_from_bytes" (ref _GBytes)ref _GInputStream
    clang proc     "g_memory_input_stream_add_data"    (ref _GMemoryInputStream,ref void,i64,ref clang proc(ref void))
    clang proc     "g_memory_input_stream_add_bytes"   (ref _GMemoryInputStream,ref _GBytes)
    record _GMemoryOutputStreamClass =
        var _GOutputStreamClass parent_class
        var ref clang proc() _g_reserved1
        var ref clang proc() _g_reserved2
        var ref clang proc() _g_reserved3
        var ref clang proc() _g_reserved4
        var ref clang proc() _g_reserved5
    end

    record _GMemoryOutputStreamPrivate =
        var int dummy    !empty record
    end

    clang function "g_memory_output_stream_get_type"   ()u64
    clang function "g_memory_output_stream_new"        (ref void,u64,ref clang function(ref void,u64)ref void,ref clang proc(ref void))ref _GOutputStream
    clang function "g_memory_output_stream_get_data"   (ref _GMemoryOutputStream)ref void
    clang function "g_memory_output_stream_get_size"   (ref _GMemoryOutputStream)u64
    clang function "g_memory_output_stream_get_data_size" (ref _GMemoryOutputStream)u64
    clang function "g_memory_output_stream_steal_data" (ref _GMemoryOutputStream)ref void
    clang function "g_memory_output_stream_steal_as_bytes" (ref _GMemoryOutputStream)ref _GBytes
    record _GMountIface =
        var _GTypeInterface g_iface
        var ref clang proc(ref _GMount) changed
        var ref clang proc(ref _GMount) unmounted
        var ref clang function(ref _GMount)ref _GFile get_root
        var ref clang function(ref _GMount)ref i8 get_name
        var ref clang function(ref _GMount)ref _GIcon get_icon
        var ref clang function(ref _GMount)ref i8 get_uuid
        var ref clang function(ref _GMount)ref _GVolume get_volume
        var ref clang function(ref _GMount)ref _GDrive get_drive
        var ref clang function(ref _GMount)i32 can_unmount
        var ref clang function(ref _GMount)i32 can_eject
        var ref clang proc(ref _GMount,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) unmount
        var ref clang function(ref _GMount,ref _GAsyncResult,ref ref _GError)i32 unmount_finish
        var ref clang proc(ref _GMount,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) eject
        var ref clang function(ref _GMount,ref _GAsyncResult,ref ref _GError)i32 eject_finish
        var ref clang proc(ref _GMount,i32,ref _GMountOperation,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) remount
        var ref clang function(ref _GMount,ref _GAsyncResult,ref ref _GError)i32 remount_finish
        var ref clang proc(ref _GMount,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) guess_content_type
        var ref clang function(ref _GMount,ref _GAsyncResult,ref ref _GError)ref ref i8 guess_content_type_finish
        var ref clang function(ref _GMount,i32,ref _GCancellable,ref ref _GError)ref ref i8 guess_content_type_sync
        var ref clang proc(ref _GMount) pre_unmount
        var ref clang proc(ref _GMount,i32,ref _GMountOperation,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) unmount_with_operation
        var ref clang function(ref _GMount,ref _GAsyncResult,ref ref _GError)i32 unmount_with_operation_finish
        var ref clang proc(ref _GMount,i32,ref _GMountOperation,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) eject_with_operation
        var ref clang function(ref _GMount,ref _GAsyncResult,ref ref _GError)i32 eject_with_operation_finish
        var ref clang function(ref _GMount)ref _GFile get_default_location
        var ref clang function(ref _GMount)ref i8 get_sort_key
        var ref clang function(ref _GMount)ref _GIcon get_symbolic_icon
    end

    clang function "g_mount_get_type"                  ()u64
    clang function "g_mount_get_root"                  (ref _GMount)ref _GFile
    clang function "g_mount_get_default_location"      (ref _GMount)ref _GFile
    clang function "g_mount_get_name"                  (ref _GMount)ref i8
    clang function "g_mount_get_icon"                  (ref _GMount)ref _GIcon
    clang function "g_mount_get_symbolic_icon"         (ref _GMount)ref _GIcon
    clang function "g_mount_get_uuid"                  (ref _GMount)ref i8
    clang function "g_mount_get_volume"                (ref _GMount)ref _GVolume
    clang function "g_mount_get_drive"                 (ref _GMount)ref _GDrive
    clang function "g_mount_can_unmount"               (ref _GMount)i32
    clang function "g_mount_can_eject"                 (ref _GMount)i32
    clang proc     "g_mount_unmount"                   (ref _GMount,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_mount_unmount_finish"            (ref _GMount,ref _GAsyncResult,ref ref _GError)i32
    clang proc     "g_mount_eject"                     (ref _GMount,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_mount_eject_finish"              (ref _GMount,ref _GAsyncResult,ref ref _GError)i32
    clang proc     "g_mount_remount"                   (ref _GMount,i32,ref _GMountOperation,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_mount_remount_finish"            (ref _GMount,ref _GAsyncResult,ref ref _GError)i32
    clang proc     "g_mount_guess_content_type"        (ref _GMount,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_mount_guess_content_type_finish" (ref _GMount,ref _GAsyncResult,ref ref _GError)ref ref i8
    clang function "g_mount_guess_content_type_sync"   (ref _GMount,i32,ref _GCancellable,ref ref _GError)ref ref i8
    clang function "g_mount_is_shadowed"               (ref _GMount)i32
    clang proc     "g_mount_shadow"                    (ref _GMount)
    clang proc     "g_mount_unshadow"                  (ref _GMount)
    clang proc     "g_mount_unmount_with_operation"    (ref _GMount,i32,ref _GMountOperation,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_mount_unmount_with_operation_finish" (ref _GMount,ref _GAsyncResult,ref ref _GError)i32
    clang proc     "g_mount_eject_with_operation"      (ref _GMount,i32,ref _GMountOperation,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_mount_eject_with_operation_finish" (ref _GMount,ref _GAsyncResult,ref ref _GError)i32
    clang function "g_mount_get_sort_key"              (ref _GMount)ref i8
    record _GMountOperationClass =
        var _GObjectClass parent_class
        var ref clang proc(ref _GMountOperation,ref i8,ref i8,ref i8,i32) ask_password
        var ref clang proc(ref _GMountOperation,ref i8,ref ref i8) ask_question
        var ref clang proc(ref _GMountOperation,i32) reply
        var ref clang proc(ref _GMountOperation) aborted
        var ref clang proc(ref _GMountOperation,ref i8,ref _GArray,ref ref i8) show_processes
        var ref clang proc(ref _GMountOperation,ref i8,i64,i64) show_unmount_progress
        var ref clang proc() _g_reserved1
        var ref clang proc() _g_reserved2
        var ref clang proc() _g_reserved3
        var ref clang proc() _g_reserved4
        var ref clang proc() _g_reserved5
        var ref clang proc() _g_reserved6
        var ref clang proc() _g_reserved7
        var ref clang proc() _g_reserved8
        var ref clang proc() _g_reserved9
    end

    record _GMountOperationPrivate =
        var int dummy    !empty record
    end

    clang function "g_mount_operation_get_type"        ()u64
    clang function "g_mount_operation_new"             ()ref _GMountOperation
    clang function "g_mount_operation_get_username"    (ref _GMountOperation)ref i8
    clang proc     "g_mount_operation_set_username"    (ref _GMountOperation,ref i8)
    clang function "g_mount_operation_get_password"    (ref _GMountOperation)ref i8
    clang proc     "g_mount_operation_set_password"    (ref _GMountOperation,ref i8)
    clang function "g_mount_operation_get_anonymous"   (ref _GMountOperation)i32
    clang proc     "g_mount_operation_set_anonymous"   (ref _GMountOperation,i32)
    clang function "g_mount_operation_get_domain"      (ref _GMountOperation)ref i8
    clang proc     "g_mount_operation_set_domain"      (ref _GMountOperation,ref i8)
    clang function "g_mount_operation_get_password_save" (ref _GMountOperation)i32
    clang proc     "g_mount_operation_set_password_save" (ref _GMountOperation,i32)
    clang function "g_mount_operation_get_choice"      (ref _GMountOperation)i32
    clang proc     "g_mount_operation_set_choice"      (ref _GMountOperation,i32)
    clang proc     "g_mount_operation_reply"           (ref _GMountOperation,i32)
    record _GVolumeMonitorClass =
        var _GObjectClass parent_class
        var ref clang proc(ref _GVolumeMonitor,ref _GVolume) volume_added
        var ref clang proc(ref _GVolumeMonitor,ref _GVolume) volume_removed
        var ref clang proc(ref _GVolumeMonitor,ref _GVolume) volume_changed
        var ref clang proc(ref _GVolumeMonitor,ref _GMount) mount_added
        var ref clang proc(ref _GVolumeMonitor,ref _GMount) mount_removed
        var ref clang proc(ref _GVolumeMonitor,ref _GMount) mount_pre_unmount
        var ref clang proc(ref _GVolumeMonitor,ref _GMount) mount_changed
        var ref clang proc(ref _GVolumeMonitor,ref _GDrive) drive_connected
        var ref clang proc(ref _GVolumeMonitor,ref _GDrive) drive_disconnected
        var ref clang proc(ref _GVolumeMonitor,ref _GDrive) drive_changed
        var ref clang function()i32 is_supported
        var ref clang function(ref _GVolumeMonitor)ref _GList get_connected_drives
        var ref clang function(ref _GVolumeMonitor)ref _GList get_volumes
        var ref clang function(ref _GVolumeMonitor)ref _GList get_mounts
        var ref clang function(ref _GVolumeMonitor,ref i8)ref _GVolume get_volume_for_uuid
        var ref clang function(ref _GVolumeMonitor,ref i8)ref _GMount get_mount_for_uuid
        var ref clang function(ref _GMount,ref _GVolumeMonitor)ref _GVolume adopt_orphan_mount
        var ref clang proc(ref _GVolumeMonitor,ref _GDrive) drive_eject_button
        var ref clang proc(ref _GVolumeMonitor,ref _GDrive) drive_stop_button
        var ref clang proc() _g_reserved1
        var ref clang proc() _g_reserved2
        var ref clang proc() _g_reserved3
        var ref clang proc() _g_reserved4
        var ref clang proc() _g_reserved5
        var ref clang proc() _g_reserved6
    end

    clang function "g_volume_monitor_get_type"         ()u64
    clang function "g_volume_monitor_get"              ()ref _GVolumeMonitor
    clang function "g_volume_monitor_get_connected_drives" (ref _GVolumeMonitor)ref _GList
    clang function "g_volume_monitor_get_volumes"      (ref _GVolumeMonitor)ref _GList
    clang function "g_volume_monitor_get_mounts"       (ref _GVolumeMonitor)ref _GList
    clang function "g_volume_monitor_get_volume_for_uuid" (ref _GVolumeMonitor,ref i8)ref _GVolume
    clang function "g_volume_monitor_get_mount_for_uuid" (ref _GVolumeMonitor,ref i8)ref _GMount
    clang function "g_volume_monitor_adopt_orphan_mount" (ref _GMount)ref _GVolume
    record _GNativeVolumeMonitor =
        var _GVolumeMonitor parent_instance
    end

    record _GNativeVolumeMonitorClass =
        var _GVolumeMonitorClass parent_class
        var ref clang function(ref i8,ref _GCancellable)ref _GMount get_mount_for_mount_path
    end

    clang function "g_native_volume_monitor_get_type"  ()u64
    record _GNetworkAddressClass =
        var _GObjectClass parent_class
    end

    record _GNetworkAddressPrivate =
        var int dummy    !empty record
    end

    clang function "g_network_address_get_type"        ()u64
    clang function "g_network_address_new"             (ref i8,u16)ref _GSocketConnectable
    clang function "g_network_address_parse"           (ref i8,u16,ref ref _GError)ref _GSocketConnectable
    clang function "g_network_address_parse_uri"       (ref i8,u16,ref ref _GError)ref _GSocketConnectable
    clang function "g_network_address_get_hostname"    (ref _GNetworkAddress)ref i8
    clang function "g_network_address_get_port"        (ref _GNetworkAddress)u16
    clang function "g_network_address_get_scheme"      (ref _GNetworkAddress)ref i8
    record _GNetworkMonitorInterface =
        var _GTypeInterface g_iface
        var ref clang proc(ref _GNetworkMonitor,i32) network_changed
        var ref clang function(ref _GNetworkMonitor,ref _GSocketConnectable,ref _GCancellable,ref ref _GError)i32 can_reach
        var ref clang proc(ref _GNetworkMonitor,ref _GSocketConnectable,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) can_reach_async
        var ref clang function(ref _GNetworkMonitor,ref _GAsyncResult,ref ref _GError)i32 can_reach_finish
    end

    clang function "g_network_monitor_get_type"        ()u64
    clang function "g_network_monitor_get_default"     ()ref _GNetworkMonitor
    clang function "g_network_monitor_get_network_available" (ref _GNetworkMonitor)i32
    clang function "g_network_monitor_can_reach"       (ref _GNetworkMonitor,ref _GSocketConnectable,ref _GCancellable,ref ref _GError)i32
    clang proc     "g_network_monitor_can_reach_async" (ref _GNetworkMonitor,ref _GSocketConnectable,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_network_monitor_can_reach_finish" (ref _GNetworkMonitor,ref _GAsyncResult,ref ref _GError)i32
    record _GNetworkServiceClass =
        var _GObjectClass parent_class
    end

    record _GNetworkServicePrivate =
        var int dummy    !empty record
    end

    clang function "g_network_service_get_type"        ()u64
    clang function "g_network_service_new"             (ref i8,ref i8,ref i8)ref _GSocketConnectable
    clang function "g_network_service_get_service"     (ref _GNetworkService)ref i8
    clang function "g_network_service_get_protocol"    (ref _GNetworkService)ref i8
    clang function "g_network_service_get_domain"      (ref _GNetworkService)ref i8
    clang function "g_network_service_get_scheme"      (ref _GNetworkService)ref i8
    clang proc     "g_network_service_set_scheme"      (ref _GNetworkService,ref i8)
    record _GPermissionPrivate =
        var int dummy    !empty record
    end

    record _GPermissionClass =
        var _GObjectClass parent_class
        var ref clang function(ref _GPermission,ref _GCancellable,ref ref _GError)i32 acquire
        var ref clang proc(ref _GPermission,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) acquire_async
        var ref clang function(ref _GPermission,ref _GAsyncResult,ref ref _GError)i32 acquire_finish
        var ref clang function(ref _GPermission,ref _GCancellable,ref ref _GError)i32 release
        var ref clang proc(ref _GPermission,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) release_async
        var ref clang function(ref _GPermission,ref _GAsyncResult,ref ref _GError)i32 release_finish
        var [16]ref void reserved
    end

    clang function "g_permission_get_type"             ()u64
    clang function "g_permission_acquire"              (ref _GPermission,ref _GCancellable,ref ref _GError)i32
    clang proc     "g_permission_acquire_async"        (ref _GPermission,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_permission_acquire_finish"       (ref _GPermission,ref _GAsyncResult,ref ref _GError)i32
    clang function "g_permission_release"              (ref _GPermission,ref _GCancellable,ref ref _GError)i32
    clang proc     "g_permission_release_async"        (ref _GPermission,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_permission_release_finish"       (ref _GPermission,ref _GAsyncResult,ref ref _GError)i32
    clang function "g_permission_get_allowed"          (ref _GPermission)i32
    clang function "g_permission_get_can_acquire"      (ref _GPermission)i32
    clang function "g_permission_get_can_release"      (ref _GPermission)i32
    clang proc     "g_permission_impl_update"          (ref _GPermission,i32,i32,i32)
    record _GPollableInputStreamInterface =
        var _GTypeInterface g_iface
        var ref clang function(ref _GPollableInputStream)i32 can_poll
        var ref clang function(ref _GPollableInputStream)i32 is_readable
        var ref clang function(ref _GPollableInputStream,ref _GCancellable)ref _GSource create_source
        var ref clang function(ref _GPollableInputStream,ref void,u64,ref ref _GError)i64 read_nonblocking
    end

    clang function "g_pollable_input_stream_get_type"  ()u64
    clang function "g_pollable_input_stream_can_poll"  (ref _GPollableInputStream)i32
    clang function "g_pollable_input_stream_is_readable" (ref _GPollableInputStream)i32
    clang function "g_pollable_input_stream_create_source" (ref _GPollableInputStream,ref _GCancellable)ref _GSource
    clang function "g_pollable_input_stream_read_nonblocking" (ref _GPollableInputStream,ref void,u64,ref _GCancellable,ref ref _GError)i64
    record _GPollableOutputStreamInterface =
        var _GTypeInterface g_iface
        var ref clang function(ref _GPollableOutputStream)i32 can_poll
        var ref clang function(ref _GPollableOutputStream)i32 is_writable
        var ref clang function(ref _GPollableOutputStream,ref _GCancellable)ref _GSource create_source
        var ref clang function(ref _GPollableOutputStream,ref void,u64,ref ref _GError)i64 write_nonblocking
    end

    clang function "g_pollable_output_stream_get_type" ()u64
    clang function "g_pollable_output_stream_can_poll" (ref _GPollableOutputStream)i32
    clang function "g_pollable_output_stream_is_writable" (ref _GPollableOutputStream)i32
    clang function "g_pollable_output_stream_create_source" (ref _GPollableOutputStream,ref _GCancellable)ref _GSource
    clang function "g_pollable_output_stream_write_nonblocking" (ref _GPollableOutputStream,ref void,u64,ref _GCancellable,ref ref _GError)i64
    clang function "g_pollable_source_new"             (ref _GObject)ref _GSource
    clang function "g_pollable_source_new_full"        (ref void,ref _GSource,ref _GCancellable)ref _GSource
    clang function "g_pollable_stream_read"            (ref _GInputStream,ref void,u64,i32,ref _GCancellable,ref ref _GError)i64
    clang function "g_pollable_stream_write"           (ref _GOutputStream,ref void,u64,i32,ref _GCancellable,ref ref _GError)i64
    clang function "g_pollable_stream_write_all"       (ref _GOutputStream,ref void,u64,i32,ref u64,ref _GCancellable,ref ref _GError)i32
    record _GProxyInterface =
        var _GTypeInterface g_iface
        var ref clang function(ref _GProxy,ref _GIOStream,ref _GProxyAddress,ref _GCancellable,ref ref _GError)ref _GIOStream connect
        var ref clang proc(ref _GProxy,ref _GIOStream,ref _GProxyAddress,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) connect_async
        var ref clang function(ref _GProxy,ref _GAsyncResult,ref ref _GError)ref _GIOStream connect_finish
        var ref clang function(ref _GProxy)i32 supports_hostname
    end

    clang function "g_proxy_get_type"                  ()u64
    clang function "g_proxy_get_default_for_protocol"  (ref i8)ref _GProxy
    clang function "g_proxy_connect"                   (ref _GProxy,ref _GIOStream,ref _GProxyAddress,ref _GCancellable,ref ref _GError)ref _GIOStream
    clang proc     "g_proxy_connect_async"             (ref _GProxy,ref _GIOStream,ref _GProxyAddress,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_proxy_connect_finish"            (ref _GProxy,ref _GAsyncResult,ref ref _GError)ref _GIOStream
    clang function "g_proxy_supports_hostname"         (ref _GProxy)i32
    record _GProxyAddressClass =
        var _GInetSocketAddressClass parent_class
    end

    record _GProxyAddressPrivate =
        var int dummy    !empty record
    end

    clang function "g_proxy_address_get_type"          ()u64
    clang function "g_proxy_address_new"               (ref _GInetAddress,u16,ref i8,ref i8,u16,ref i8,ref i8)ref _GSocketAddress
    clang function "g_proxy_address_get_protocol"      (ref _GProxyAddress)ref i8
    clang function "g_proxy_address_get_destination_protocol" (ref _GProxyAddress)ref i8
    clang function "g_proxy_address_get_destination_hostname" (ref _GProxyAddress)ref i8
    clang function "g_proxy_address_get_destination_port" (ref _GProxyAddress)u16
    clang function "g_proxy_address_get_username"      (ref _GProxyAddress)ref i8
    clang function "g_proxy_address_get_password"      (ref _GProxyAddress)ref i8
    clang function "g_proxy_address_get_uri"           (ref _GProxyAddress)ref i8
    record _GSocketAddressEnumeratorClass =
        var _GObjectClass parent_class
        var ref clang function(ref _GSocketAddressEnumerator,ref _GCancellable,ref ref _GError)ref _GSocketAddress next$
        var ref clang proc(ref _GSocketAddressEnumerator,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) next_async
        var ref clang function(ref _GSocketAddressEnumerator,ref _GAsyncResult,ref ref _GError)ref _GSocketAddress next_finish
    end

    clang function "g_socket_address_enumerator_get_type" ()u64
    clang function "g_socket_address_enumerator_next"  (ref _GSocketAddressEnumerator,ref _GCancellable,ref ref _GError)ref _GSocketAddress
    clang proc     "g_socket_address_enumerator_next_async" (ref _GSocketAddressEnumerator,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_socket_address_enumerator_next_finish" (ref _GSocketAddressEnumerator,ref _GAsyncResult,ref ref _GError)ref _GSocketAddress
    record _GProxyAddressEnumeratorClass =
        var _GSocketAddressEnumeratorClass parent_class
        var ref clang proc() _g_reserved1
        var ref clang proc() _g_reserved2
        var ref clang proc() _g_reserved3
        var ref clang proc() _g_reserved4
        var ref clang proc() _g_reserved5
        var ref clang proc() _g_reserved6
        var ref clang proc() _g_reserved7
    end

    record _GProxyAddressEnumeratorPrivate =
        var int dummy    !empty record
    end

    clang function "g_proxy_address_enumerator_get_type" ()u64
    record _GProxyResolverInterface =
        var _GTypeInterface g_iface
        var ref clang function(ref _GProxyResolver)i32 is_supported
        var ref clang function(ref _GProxyResolver,ref i8,ref _GCancellable,ref ref _GError)ref ref i8 lookup
        var ref clang proc(ref _GProxyResolver,ref i8,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) lookup_async
        var ref clang function(ref _GProxyResolver,ref _GAsyncResult,ref ref _GError)ref ref i8 lookup_finish
    end

    clang function "g_proxy_resolver_get_type"         ()u64
    clang function "g_proxy_resolver_get_default"      ()ref _GProxyResolver
    clang function "g_proxy_resolver_is_supported"     (ref _GProxyResolver)i32
    clang function "g_proxy_resolver_lookup"           (ref _GProxyResolver,ref i8,ref _GCancellable,ref ref _GError)ref ref i8
    clang proc     "g_proxy_resolver_lookup_async"     (ref _GProxyResolver,ref i8,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_proxy_resolver_lookup_finish"    (ref _GProxyResolver,ref _GAsyncResult,ref ref _GError)ref ref i8
    record _GResolverPrivate =
        var int dummy    !empty record
    end

    record _GResolverClass =
        var _GObjectClass parent_class
        var ref clang proc(ref _GResolver) reload
        var ref clang function(ref _GResolver,ref i8,ref _GCancellable,ref ref _GError)ref _GList lookup_by_name
        var ref clang proc(ref _GResolver,ref i8,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) lookup_by_name_async
        var ref clang function(ref _GResolver,ref _GAsyncResult,ref ref _GError)ref _GList lookup_by_name_finish
        var ref clang function(ref _GResolver,ref _GInetAddress,ref _GCancellable,ref ref _GError)ref i8 lookup_by_address
        var ref clang proc(ref _GResolver,ref _GInetAddress,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) lookup_by_address_async
        var ref clang function(ref _GResolver,ref _GAsyncResult,ref ref _GError)ref i8 lookup_by_address_finish
        var ref clang function(ref _GResolver,ref i8,ref _GCancellable,ref ref _GError)ref _GList lookup_service
        var ref clang proc(ref _GResolver,ref i8,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) lookup_service_async
        var ref clang function(ref _GResolver,ref _GAsyncResult,ref ref _GError)ref _GList lookup_service_finish
        var ref clang function(ref _GResolver,ref i8,i32,ref _GCancellable,ref ref _GError)ref _GList lookup_records
        var ref clang proc(ref _GResolver,ref i8,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) lookup_records_async
        var ref clang function(ref _GResolver,ref _GAsyncResult,ref ref _GError)ref _GList lookup_records_finish
        var ref clang proc() _g_reserved4
        var ref clang proc() _g_reserved5
        var ref clang proc() _g_reserved6
    end

    clang function "g_resolver_get_type"               ()u64
    clang function "g_resolver_get_default"            ()ref _GResolver
    clang proc     "g_resolver_set_default"            (ref _GResolver)
    clang function "g_resolver_lookup_by_name"         (ref _GResolver,ref i8,ref _GCancellable,ref ref _GError)ref _GList
    clang proc     "g_resolver_lookup_by_name_async"   (ref _GResolver,ref i8,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_resolver_lookup_by_name_finish"  (ref _GResolver,ref _GAsyncResult,ref ref _GError)ref _GList
    clang proc     "g_resolver_free_addresses"         (ref _GList)
    clang function "g_resolver_lookup_by_address"      (ref _GResolver,ref _GInetAddress,ref _GCancellable,ref ref _GError)ref i8
    clang proc     "g_resolver_lookup_by_address_async" (ref _GResolver,ref _GInetAddress,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_resolver_lookup_by_address_finish" (ref _GResolver,ref _GAsyncResult,ref ref _GError)ref i8
    clang function "g_resolver_lookup_service"         (ref _GResolver,ref i8,ref i8,ref i8,ref _GCancellable,ref ref _GError)ref _GList
    clang proc     "g_resolver_lookup_service_async"   (ref _GResolver,ref i8,ref i8,ref i8,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_resolver_lookup_service_finish"  (ref _GResolver,ref _GAsyncResult,ref ref _GError)ref _GList
    clang function "g_resolver_lookup_records"         (ref _GResolver,ref i8,i32,ref _GCancellable,ref ref _GError)ref _GList
    clang proc     "g_resolver_lookup_records_async"   (ref _GResolver,ref i8,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_resolver_lookup_records_finish"  (ref _GResolver,ref _GAsyncResult,ref ref _GError)ref _GList
    clang proc     "g_resolver_free_targets"           (ref _GList)
    clang function "g_resolver_error_quark"            ()u32
    clang function "g_resource_error_quark"            ()u32
    record _GStaticResource =
        var ref byte data
        var u64 data_len
        var ref _GResource resource
        var ref _GStaticResource next$
        var ref void padding
    end

    clang function "g_resource_get_type"               ()u64
    clang function "g_resource_new_from_data"          (ref _GBytes,ref ref _GError)ref _GResource
    clang function "g_resource_ref"                    (ref _GResource)ref _GResource
    clang proc     "g_resource_unref"                  (ref _GResource)
    clang function "g_resource_load"                   (ref i8,ref ref _GError)ref _GResource
    clang function "g_resource_open_stream"            (ref _GResource,ref i8,i32,ref ref _GError)ref _GInputStream
    clang function "g_resource_lookup_data"            (ref _GResource,ref i8,i32,ref ref _GError)ref _GBytes
    clang function "g_resource_enumerate_children"     (ref _GResource,ref i8,i32,ref ref _GError)ref ref i8
    clang function "g_resource_get_info"               (ref _GResource,ref i8,i32,ref u64,ref u32,ref ref _GError)i32
    clang proc     "g_resources_register"              (ref _GResource)
    clang proc     "g_resources_unregister"            (ref _GResource)
    clang function "g_resources_open_stream"           (ref i8,i32,ref ref _GError)ref _GInputStream
    clang function "g_resources_lookup_data"           (ref i8,i32,ref ref _GError)ref _GBytes
    clang function "g_resources_enumerate_children"    (ref i8,i32,ref ref _GError)ref ref i8
    clang function "g_resources_get_info"              (ref i8,i32,ref u64,ref u32,ref ref _GError)i32
    clang proc     "g_static_resource_init"            (ref _GStaticResource)
    clang proc     "g_static_resource_fini"            (ref _GStaticResource)
    clang function "g_static_resource_get_resource"    (ref _GStaticResource)ref _GResource
    record _GSeekableIface =
        var _GTypeInterface g_iface
        var ref clang function(ref _GSeekable)i64 tell
        var ref clang function(ref _GSeekable)i32 can_seek
        var ref clang function(ref _GSeekable,i64,i32,ref _GCancellable,ref ref _GError)i32 seek
        var ref clang function(ref _GSeekable)i32 can_truncate
        var ref clang function(ref _GSeekable,i64,ref _GCancellable,ref ref _GError)i32 truncate_fn
    end

    clang function "g_seekable_get_type"               ()u64
    clang function "g_seekable_tell"                   (ref _GSeekable)i64
    clang function "g_seekable_can_seek"               (ref _GSeekable)i32
    clang function "g_seekable_seek"                   (ref _GSeekable,i64,i32,ref _GCancellable,ref ref _GError)i32
    clang function "g_seekable_can_truncate"           (ref _GSeekable)i32
    clang function "g_seekable_truncate"               (ref _GSeekable,i64,ref _GCancellable,ref ref _GError)i32
    record _GSettingsSchemaSource =
        var int dummy    !empty record
    end

    record _GSettingsSchema =
        var int dummy    !empty record
    end

    clang function "g_settings_schema_source_get_type" ()u64
    clang function "g_settings_schema_source_get_default" ()ref _GSettingsSchemaSource
    clang function "g_settings_schema_source_ref"      (ref _GSettingsSchemaSource)ref _GSettingsSchemaSource
    clang proc     "g_settings_schema_source_unref"    (ref _GSettingsSchemaSource)
    clang function "g_settings_schema_source_new_from_directory" (ref i8,ref _GSettingsSchemaSource,i32,ref ref _GError)ref _GSettingsSchemaSource
    clang function "g_settings_schema_source_lookup"   (ref _GSettingsSchemaSource,ref i8,i32)ref _GSettingsSchema
    clang function "g_settings_schema_get_type"        ()u64
    clang function "g_settings_schema_ref"             (ref _GSettingsSchema)ref _GSettingsSchema
    clang proc     "g_settings_schema_unref"           (ref _GSettingsSchema)
    clang function "g_settings_schema_get_id"          (ref _GSettingsSchema)ref i8
    clang function "g_settings_schema_get_path"        (ref _GSettingsSchema)ref i8
    record _GSettingsPrivate =
        var int dummy    !empty record
    end

    record _GSettingsClass =
        var _GObjectClass parent_class
        var ref clang proc(ref _GSettings,ref i8) writable_changed
        var ref clang proc(ref _GSettings,ref i8) changed
        var ref clang function(ref _GSettings,u32)i32 writable_change_event
        var ref clang function(ref _GSettings,ref u32,i32)i32 change_event
        var [20]ref void padding
    end

    clang function "g_settings_get_type"               ()u64
    clang function "g_settings_list_schemas"           ()ref ref i8
    clang function "g_settings_list_relocatable_schemas" ()ref ref i8
    clang function "g_settings_new"                    (ref i8)ref _GSettings
    clang function "g_settings_new_with_path"          (ref i8,ref i8)ref _GSettings
    clang function "g_settings_new_with_backend"       (ref i8,ref _GSettingsBackend)ref _GSettings
    clang function "g_settings_new_with_backend_and_path" (ref i8,ref _GSettingsBackend,ref i8)ref _GSettings
    clang function "g_settings_new_full"               (ref _GSettingsSchema,ref _GSettingsBackend,ref i8)ref _GSettings
    clang function "g_settings_list_children"          (ref _GSettings)ref ref i8
    clang function "g_settings_list_keys"              (ref _GSettings)ref ref i8
    clang function "g_settings_get_range"              (ref _GSettings,ref i8)ref _GVariant
    clang function "g_settings_range_check"            (ref _GSettings,ref i8,ref _GVariant)i32
    clang function "g_settings_set_value"              (ref _GSettings,ref i8,ref _GVariant)i32
    clang function "g_settings_get_value"              (ref _GSettings,ref i8)ref _GVariant
    clang function "g_settings_set"                    (ref _GSettings,ref i8,ref i8,...)i32
    clang proc     "g_settings_get"                    (ref _GSettings,ref i8,ref i8,...)
    clang proc     "g_settings_reset"                  (ref _GSettings,ref i8)
    clang function "g_settings_get_int"                (ref _GSettings,ref i8)i32
    clang function "g_settings_set_int"                (ref _GSettings,ref i8,i32)i32
    clang function "g_settings_get_uint"               (ref _GSettings,ref i8)u32
    clang function "g_settings_set_uint"               (ref _GSettings,ref i8,u32)i32
    clang function "g_settings_get_string"             (ref _GSettings,ref i8)ref i8
    clang function "g_settings_set_string"             (ref _GSettings,ref i8,ref i8)i32
    clang function "g_settings_get_boolean"            (ref _GSettings,ref i8)i32
    clang function "g_settings_set_boolean"            (ref _GSettings,ref i8,i32)i32
    clang function "g_settings_get_double"             (ref _GSettings,ref i8)r64
    clang function "g_settings_set_double"             (ref _GSettings,ref i8,r64)i32
    clang function "g_settings_get_strv"               (ref _GSettings,ref i8)ref ref i8
    clang function "g_settings_set_strv"               (ref _GSettings,ref i8,ref ref i8)i32
    clang function "g_settings_get_enum"               (ref _GSettings,ref i8)i32
    clang function "g_settings_set_enum"               (ref _GSettings,ref i8,i32)i32
    clang function "g_settings_get_flags"              (ref _GSettings,ref i8)u32
    clang function "g_settings_set_flags"              (ref _GSettings,ref i8,u32)i32
    clang function "g_settings_get_child"              (ref _GSettings,ref i8)ref _GSettings
    clang function "g_settings_is_writable"            (ref _GSettings,ref i8)i32
    clang proc     "g_settings_delay"                  (ref _GSettings)
    clang proc     "g_settings_apply"                  (ref _GSettings)
    clang proc     "g_settings_revert"                 (ref _GSettings)
    clang function "g_settings_get_has_unapplied"      (ref _GSettings)i32
    clang proc     "g_settings_sync"                   ()
    const G_SETTINGS_BIND_DEFAULT            = 0
    const G_SETTINGS_BIND_GET                = 1
    const G_SETTINGS_BIND_SET                = 2
    const G_SETTINGS_BIND_NO_SENSITIVITY     = 4
    const G_SETTINGS_BIND_GET_NO_CHANGES     = 8
    const G_SETTINGS_BIND_INVERT_BOOLEAN     = 16
    clang proc     "g_settings_bind"                   (ref _GSettings,ref i8,ref void,ref i8,i32)
    clang proc     "g_settings_bind_with_mapping"      (ref _GSettings,ref i8,ref void,ref i8,i32,ref clang function(ref _GValue,ref _GVariant,ref void)i32,ref clang function(ref _GValue,ref _GVariantType,ref void)ref _GVariant,ref void,ref clang proc(ref void))
    clang proc     "g_settings_bind_writable"          (ref _GSettings,ref i8,ref void,ref i8,i32)
    clang proc     "g_settings_unbind"                 (ref void,ref i8)
    clang function "g_settings_create_action"          (ref _GSettings,ref i8)ref _GAction
    clang function "g_settings_get_mapped"             (ref _GSettings,ref i8,ref clang function(ref _GVariant,ref ref void,ref void)i32,ref void)ref void
    clang function "g_simple_action_get_type"          ()u64
    clang function "g_simple_action_new"               (ref i8,ref _GVariantType)ref _GSimpleAction
    clang function "g_simple_action_new_stateful"      (ref i8,ref _GVariantType,ref _GVariant)ref _GSimpleAction
    clang proc     "g_simple_action_set_enabled"       (ref _GSimpleAction,i32)
    clang proc     "g_simple_action_set_state"         (ref _GSimpleAction,ref _GVariant)
    record _GSimpleActionGroupPrivate =
        var int dummy    !empty record
    end

    record _GSimpleActionGroupClass =
        var _GObjectClass parent_class
        var [12]ref void padding
    end

    clang function "g_simple_action_group_get_type"    ()u64
    clang function "g_simple_action_group_new"         ()ref _GSimpleActionGroup
    clang function "g_simple_action_group_lookup"      (ref _GSimpleActionGroup,ref i8)ref _GAction
    clang proc     "g_simple_action_group_insert"      (ref _GSimpleActionGroup,ref _GAction)
    clang proc     "g_simple_action_group_remove"      (ref _GSimpleActionGroup,ref i8)
    clang proc     "g_simple_action_group_add_entries" (ref _GSimpleActionGroup,ref _GActionEntry,i32,ref void)
    record _GSimpleAsyncResultClass =
        var int dummy    !empty record
    end

    clang function "g_simple_async_result_get_type"    ()u64
    clang function "g_simple_async_result_new"         (ref _GObject,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void,ref void)ref _GSimpleAsyncResult
    clang function "g_simple_async_result_new_error"   (ref _GObject,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void,u32,i32,ref i8,...)ref _GSimpleAsyncResult
    clang function "g_simple_async_result_new_from_error" (ref _GObject,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void,ref _GError)ref _GSimpleAsyncResult
    clang function "g_simple_async_result_new_take_error" (ref _GObject,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void,ref _GError)ref _GSimpleAsyncResult
    clang proc     "g_simple_async_result_set_op_res_gpointer" (ref _GSimpleAsyncResult,ref void,ref clang proc(ref void))
    clang function "g_simple_async_result_get_op_res_gpointer" (ref _GSimpleAsyncResult)ref void
    clang proc     "g_simple_async_result_set_op_res_gssize" (ref _GSimpleAsyncResult,i64)
    clang function "g_simple_async_result_get_op_res_gssize" (ref _GSimpleAsyncResult)i64
    clang proc     "g_simple_async_result_set_op_res_gboolean" (ref _GSimpleAsyncResult,i32)
    clang function "g_simple_async_result_get_op_res_gboolean" (ref _GSimpleAsyncResult)i32
    clang proc     "g_simple_async_result_set_check_cancellable" (ref _GSimpleAsyncResult,ref _GCancellable)
    clang function "g_simple_async_result_get_source_tag" (ref _GSimpleAsyncResult)ref void
    clang proc     "g_simple_async_result_set_handle_cancellation" (ref _GSimpleAsyncResult,i32)
    clang proc     "g_simple_async_result_complete"    (ref _GSimpleAsyncResult)
    clang proc     "g_simple_async_result_complete_in_idle" (ref _GSimpleAsyncResult)
    clang proc     "g_simple_async_result_run_in_thread" (ref _GSimpleAsyncResult,ref clang proc(ref _GSimpleAsyncResult,ref _GObject,ref _GCancellable),i32,ref _GCancellable)
    clang proc     "g_simple_async_result_set_from_error" (ref _GSimpleAsyncResult,ref _GError)
    clang proc     "g_simple_async_result_take_error"  (ref _GSimpleAsyncResult,ref _GError)
    clang function "g_simple_async_result_propagate_error" (ref _GSimpleAsyncResult,ref ref _GError)i32
    clang proc     "g_simple_async_result_set_error"   (ref _GSimpleAsyncResult,u32,i32,ref i8,...)
    clang proc     "g_simple_async_result_set_error_va" (ref _GSimpleAsyncResult,u32,i32,ref i8,ref i8)
    clang function "g_simple_async_result_is_valid"    (ref _GAsyncResult,ref _GObject,ref void)i32
    clang proc     "g_simple_async_report_error_in_idle" (ref _GObject,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void,u32,i32,ref i8,...)
    clang proc     "g_simple_async_report_gerror_in_idle" (ref _GObject,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void,ref _GError)
    clang proc     "g_simple_async_report_take_gerror_in_idle" (ref _GObject,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void,ref _GError)
    clang function "g_simple_permission_get_type"      ()u64
    clang function "g_simple_permission_new"           (i32)ref _GPermission
    record _GSocketClientPrivate =
        var int dummy    !empty record
    end

    record _GSocketClientClass =
        var _GObjectClass parent_class
        var ref clang proc(ref _GSocketClient,i32,ref _GSocketConnectable,ref _GIOStream) event
        var ref clang proc() _g_reserved1
        var ref clang proc() _g_reserved2
        var ref clang proc() _g_reserved3
        var ref clang proc() _g_reserved4
    end

    clang function "g_socket_client_get_type"          ()u64
    clang function "g_socket_client_new"               ()ref _GSocketClient
    clang function "g_socket_client_get_family"        (ref _GSocketClient)i32
    clang proc     "g_socket_client_set_family"        (ref _GSocketClient,i32)
    clang function "g_socket_client_get_socket_type"   (ref _GSocketClient)i32
    clang proc     "g_socket_client_set_socket_type"   (ref _GSocketClient,i32)
    clang function "g_socket_client_get_protocol"      (ref _GSocketClient)i32
    clang proc     "g_socket_client_set_protocol"      (ref _GSocketClient,i32)
    clang function "g_socket_client_get_local_address" (ref _GSocketClient)ref _GSocketAddress
    clang proc     "g_socket_client_set_local_address" (ref _GSocketClient,ref _GSocketAddress)
    clang function "g_socket_client_get_timeout"       (ref _GSocketClient)u32
    clang proc     "g_socket_client_set_timeout"       (ref _GSocketClient,u32)
    clang function "g_socket_client_get_enable_proxy"  (ref _GSocketClient)i32
    clang proc     "g_socket_client_set_enable_proxy"  (ref _GSocketClient,i32)
    clang function "g_socket_client_get_tls"           (ref _GSocketClient)i32
    clang proc     "g_socket_client_set_tls"           (ref _GSocketClient,i32)
    clang function "g_socket_client_get_tls_validation_flags" (ref _GSocketClient)i32
    clang proc     "g_socket_client_set_tls_validation_flags" (ref _GSocketClient,i32)
    clang function "g_socket_client_connect"           (ref _GSocketClient,ref _GSocketConnectable,ref _GCancellable,ref ref _GError)ref _GSocketConnection
    clang function "g_socket_client_connect_to_host"   (ref _GSocketClient,ref i8,u16,ref _GCancellable,ref ref _GError)ref _GSocketConnection
    clang function "g_socket_client_connect_to_service" (ref _GSocketClient,ref i8,ref i8,ref _GCancellable,ref ref _GError)ref _GSocketConnection
    clang function "g_socket_client_connect_to_uri"    (ref _GSocketClient,ref i8,u16,ref _GCancellable,ref ref _GError)ref _GSocketConnection
    clang proc     "g_socket_client_connect_async"     (ref _GSocketClient,ref _GSocketConnectable,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_socket_client_connect_finish"    (ref _GSocketClient,ref _GAsyncResult,ref ref _GError)ref _GSocketConnection
    clang proc     "g_socket_client_connect_to_host_async" (ref _GSocketClient,ref i8,u16,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_socket_client_connect_to_host_finish" (ref _GSocketClient,ref _GAsyncResult,ref ref _GError)ref _GSocketConnection
    clang proc     "g_socket_client_connect_to_service_async" (ref _GSocketClient,ref i8,ref i8,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_socket_client_connect_to_service_finish" (ref _GSocketClient,ref _GAsyncResult,ref ref _GError)ref _GSocketConnection
    clang proc     "g_socket_client_connect_to_uri_async" (ref _GSocketClient,ref i8,u16,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_socket_client_connect_to_uri_finish" (ref _GSocketClient,ref _GAsyncResult,ref ref _GError)ref _GSocketConnection
    clang proc     "g_socket_client_add_application_proxy" (ref _GSocketClient,ref i8)
    record _GSocketConnectableIface =
        var _GTypeInterface g_iface
        var ref clang function(ref _GSocketConnectable)ref _GSocketAddressEnumerator enumerate
        var ref clang function(ref _GSocketConnectable)ref _GSocketAddressEnumerator proxy_enumerate
    end

    clang function "g_socket_connectable_get_type"     ()u64
    clang function "g_socket_connectable_enumerate"    (ref _GSocketConnectable)ref _GSocketAddressEnumerator
    clang function "g_socket_connectable_proxy_enumerate" (ref _GSocketConnectable)ref _GSocketAddressEnumerator
    record _GSocketPrivate =
        var int dummy    !empty record
    end

    record _GSocketClass =
        var _GObjectClass parent_class
        var ref clang proc() _g_reserved1
        var ref clang proc() _g_reserved2
        var ref clang proc() _g_reserved3
        var ref clang proc() _g_reserved4
        var ref clang proc() _g_reserved5
        var ref clang proc() _g_reserved6
        var ref clang proc() _g_reserved7
        var ref clang proc() _g_reserved8
        var ref clang proc() _g_reserved9
        var ref clang proc() _g_reserved10
    end

    clang function "g_socket_get_type"                 ()u64
    clang function "g_socket_new"                      (i32,i32,i32,ref ref _GError)ref _GSocket
    clang function "g_socket_new_from_fd"              (i32,ref ref _GError)ref _GSocket
    clang function "g_socket_get_fd"                   (ref _GSocket)i32
    clang function "g_socket_get_family"               (ref _GSocket)i32
    clang function "g_socket_get_socket_type"          (ref _GSocket)i32
    clang function "g_socket_get_protocol"             (ref _GSocket)i32
    clang function "g_socket_get_local_address"        (ref _GSocket,ref ref _GError)ref _GSocketAddress
    clang function "g_socket_get_remote_address"       (ref _GSocket,ref ref _GError)ref _GSocketAddress
    clang proc     "g_socket_set_blocking"             (ref _GSocket,i32)
    clang function "g_socket_get_blocking"             (ref _GSocket)i32
    clang proc     "g_socket_set_keepalive"            (ref _GSocket,i32)
    clang function "g_socket_get_keepalive"            (ref _GSocket)i32
    clang function "g_socket_get_listen_backlog"       (ref _GSocket)i32
    clang proc     "g_socket_set_listen_backlog"       (ref _GSocket,i32)
    clang function "g_socket_get_timeout"              (ref _GSocket)u32
    clang proc     "g_socket_set_timeout"              (ref _GSocket,u32)
    clang function "g_socket_get_ttl"                  (ref _GSocket)u32
    clang proc     "g_socket_set_ttl"                  (ref _GSocket,u32)
    clang function "g_socket_get_broadcast"            (ref _GSocket)i32
    clang proc     "g_socket_set_broadcast"            (ref _GSocket,i32)
    clang function "g_socket_get_multicast_loopback"   (ref _GSocket)i32
    clang proc     "g_socket_set_multicast_loopback"   (ref _GSocket,i32)
    clang function "g_socket_get_multicast_ttl"        (ref _GSocket)u32
    clang proc     "g_socket_set_multicast_ttl"        (ref _GSocket,u32)
    clang function "g_socket_is_connected"             (ref _GSocket)i32
    clang function "g_socket_bind"                     (ref _GSocket,ref _GSocketAddress,i32,ref ref _GError)i32
    clang function "g_socket_join_multicast_group"     (ref _GSocket,ref _GInetAddress,i32,ref i8,ref ref _GError)i32
    clang function "g_socket_leave_multicast_group"    (ref _GSocket,ref _GInetAddress,i32,ref i8,ref ref _GError)i32
    clang function "g_socket_connect"                  (ref _GSocket,ref _GSocketAddress,ref _GCancellable,ref ref _GError)i32
    clang function "g_socket_check_connect_result"     (ref _GSocket,ref ref _GError)i32
    clang function "g_socket_get_available_bytes"      (ref _GSocket)i64
    clang function "g_socket_condition_check"          (ref _GSocket,i32)i32
    clang function "g_socket_condition_wait"           (ref _GSocket,i32,ref _GCancellable,ref ref _GError)i32
    clang function "g_socket_condition_timed_wait"     (ref _GSocket,i32,i64,ref _GCancellable,ref ref _GError)i32
    clang function "g_socket_accept"                   (ref _GSocket,ref _GCancellable,ref ref _GError)ref _GSocket
    clang function "g_socket_listen"                   (ref _GSocket,ref ref _GError)i32
    clang function "g_socket_receive"                  (ref _GSocket,ref i8,u64,ref _GCancellable,ref ref _GError)i64
    clang function "g_socket_receive_from"             (ref _GSocket,ref ref _GSocketAddress,ref i8,u64,ref _GCancellable,ref ref _GError)i64
    clang function "g_socket_send"                     (ref _GSocket,ref i8,u64,ref _GCancellable,ref ref _GError)i64
    clang function "g_socket_send_to"                  (ref _GSocket,ref _GSocketAddress,ref i8,u64,ref _GCancellable,ref ref _GError)i64
    clang function "g_socket_receive_message"          (ref _GSocket,ref ref _GSocketAddress,ref _GInputVector,i32,ref ref ref _GSocketControlMessage,ref i32,ref i32,ref _GCancellable,ref ref _GError)i64
    clang function "g_socket_send_message"             (ref _GSocket,ref _GSocketAddress,ref _GOutputVector,i32,ref ref _GSocketControlMessage,i32,i32,ref _GCancellable,ref ref _GError)i64
    clang function "g_socket_close"                    (ref _GSocket,ref ref _GError)i32
    clang function "g_socket_shutdown"                 (ref _GSocket,i32,i32,ref ref _GError)i32
    clang function "g_socket_is_closed"                (ref _GSocket)i32
    clang function "g_socket_create_source"            (ref _GSocket,i32,ref _GCancellable)ref _GSource
    clang function "g_socket_speaks_ipv4"              (ref _GSocket)i32
    clang function "g_socket_get_credentials"          (ref _GSocket,ref ref _GError)ref _GCredentials
    clang function "g_socket_receive_with_blocking"    (ref _GSocket,ref i8,u64,i32,ref _GCancellable,ref ref _GError)i64
    clang function "g_socket_send_with_blocking"       (ref _GSocket,ref i8,u64,i32,ref _GCancellable,ref ref _GError)i64
    record _GSocketConnectionPrivate =
        var int dummy    !empty record
    end

    record _GSocketConnectionClass =
        var _GIOStreamClass parent_class
        var ref clang proc() _g_reserved1
        var ref clang proc() _g_reserved2
        var ref clang proc() _g_reserved3
        var ref clang proc() _g_reserved4
        var ref clang proc() _g_reserved5
        var ref clang proc() _g_reserved6
    end

    clang function "g_socket_connection_get_type"      ()u64
    clang function "g_socket_connection_is_connected"  (ref _GSocketConnection)i32
    clang function "g_socket_connection_connect"       (ref _GSocketConnection,ref _GSocketAddress,ref _GCancellable,ref ref _GError)i32
    clang proc     "g_socket_connection_connect_async" (ref _GSocketConnection,ref _GSocketAddress,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_socket_connection_connect_finish" (ref _GSocketConnection,ref _GAsyncResult,ref ref _GError)i32
    clang function "g_socket_connection_get_socket"    (ref _GSocketConnection)ref _GSocket
    clang function "g_socket_connection_get_local_address" (ref _GSocketConnection,ref ref _GError)ref _GSocketAddress
    clang function "g_socket_connection_get_remote_address" (ref _GSocketConnection,ref ref _GError)ref _GSocketAddress
    clang proc     "g_socket_connection_factory_register_type" (u64,i32,i32,i32)
    clang function "g_socket_connection_factory_lookup_type" (i32,i32,i32)u64
    clang function "g_socket_connection_factory_create_connection" (ref _GSocket)ref _GSocketConnection
    record _GSocketControlMessagePrivate =
        var int dummy    !empty record
    end

    record _GSocketControlMessageClass =
        var _GObjectClass parent_class
        var ref clang function(ref _GSocketControlMessage)u64 get_size
        var ref clang function(ref _GSocketControlMessage)i32 get_level
        var ref clang function(ref _GSocketControlMessage)i32 get_type
        var ref clang proc(ref _GSocketControlMessage,ref void) serialize
        var ref clang function(i32,i32,u64,ref void)ref _GSocketControlMessage deserialize
        var ref clang proc() _g_reserved1
        var ref clang proc() _g_reserved2
        var ref clang proc() _g_reserved3
        var ref clang proc() _g_reserved4
        var ref clang proc() _g_reserved5
    end

    clang function "g_socket_control_message_get_type" ()u64
    clang function "g_socket_control_message_get_size" (ref _GSocketControlMessage)u64
    clang function "g_socket_control_message_get_level" (ref _GSocketControlMessage)i32
    clang function "g_socket_control_message_get_msg_type" (ref _GSocketControlMessage)i32
    clang proc     "g_socket_control_message_serialize" (ref _GSocketControlMessage,ref void)
    clang function "g_socket_control_message_deserialize" (i32,i32,u64,ref void)ref _GSocketControlMessage
    record _GSocketListenerPrivate =
        var int dummy    !empty record
    end

    record _GSocketListenerClass =
        var _GObjectClass parent_class
        var ref clang proc(ref _GSocketListener) changed
        var ref clang proc() _g_reserved1
        var ref clang proc() _g_reserved2
        var ref clang proc() _g_reserved3
        var ref clang proc() _g_reserved4
        var ref clang proc() _g_reserved5
        var ref clang proc() _g_reserved6
    end

    clang function "g_socket_listener_get_type"        ()u64
    clang function "g_socket_listener_new"             ()ref _GSocketListener
    clang proc     "g_socket_listener_set_backlog"     (ref _GSocketListener,i32)
    clang function "g_socket_listener_add_socket"      (ref _GSocketListener,ref _GSocket,ref _GObject,ref ref _GError)i32
    clang function "g_socket_listener_add_address"     (ref _GSocketListener,ref _GSocketAddress,i32,i32,ref _GObject,ref ref _GSocketAddress,ref ref _GError)i32
    clang function "g_socket_listener_add_inet_port"   (ref _GSocketListener,u16,ref _GObject,ref ref _GError)i32
    clang function "g_socket_listener_add_any_inet_port" (ref _GSocketListener,ref _GObject,ref ref _GError)u16
    clang function "g_socket_listener_accept_socket"   (ref _GSocketListener,ref ref _GObject,ref _GCancellable,ref ref _GError)ref _GSocket
    clang proc     "g_socket_listener_accept_socket_async" (ref _GSocketListener,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_socket_listener_accept_socket_finish" (ref _GSocketListener,ref _GAsyncResult,ref ref _GObject,ref ref _GError)ref _GSocket
    clang function "g_socket_listener_accept"          (ref _GSocketListener,ref ref _GObject,ref _GCancellable,ref ref _GError)ref _GSocketConnection
    clang proc     "g_socket_listener_accept_async"    (ref _GSocketListener,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_socket_listener_accept_finish"   (ref _GSocketListener,ref _GAsyncResult,ref ref _GObject,ref ref _GError)ref _GSocketConnection
    clang proc     "g_socket_listener_close"           (ref _GSocketListener)
    record _GSocketServicePrivate =
        var int dummy    !empty record
    end

    record _GSocketServiceClass =
        var _GSocketListenerClass parent_class
        var ref clang function(ref _GSocketService,ref _GSocketConnection,ref _GObject)i32 incoming
        var ref clang proc() _g_reserved1
        var ref clang proc() _g_reserved2
        var ref clang proc() _g_reserved3
        var ref clang proc() _g_reserved4
        var ref clang proc() _g_reserved5
        var ref clang proc() _g_reserved6
    end

    clang function "g_socket_service_get_type"         ()u64
    clang function "g_socket_service_new"              ()ref _GSocketService
    clang proc     "g_socket_service_start"            (ref _GSocketService)
    clang proc     "g_socket_service_stop"             (ref _GSocketService)
    clang function "g_socket_service_is_active"        (ref _GSocketService)i32
    clang function "g_srv_target_get_type"             ()u64
    clang function "g_srv_target_new"                  (ref i8,u16,u16,u16)ref _GSrvTarget
    clang function "g_srv_target_copy"                 (ref _GSrvTarget)ref _GSrvTarget
    clang proc     "g_srv_target_free"                 (ref _GSrvTarget)
    clang function "g_srv_target_get_hostname"         (ref _GSrvTarget)ref i8
    clang function "g_srv_target_get_port"             (ref _GSrvTarget)u16
    clang function "g_srv_target_get_priority"         (ref _GSrvTarget)u16
    clang function "g_srv_target_get_weight"           (ref _GSrvTarget)u16
    clang function "g_srv_target_list_sort"            (ref _GList)ref _GList
    record _GTcpConnectionPrivate =
        var int dummy    !empty record
    end

    record _GTcpConnectionClass =
        var _GSocketConnectionClass parent_class
    end

    clang function "g_tcp_connection_get_type"         ()u64
    clang proc     "g_tcp_connection_set_graceful_disconnect" (ref _GTcpConnection,i32)
    clang function "g_tcp_connection_get_graceful_disconnect" (ref _GTcpConnection)i32
    record _GTcpWrapperConnectionPrivate =
        var int dummy    !empty record
    end

    record _GTcpWrapperConnectionClass =
        var _GTcpConnectionClass parent_class
    end

    clang function "g_tcp_wrapper_connection_get_type" ()u64
    clang function "g_tcp_wrapper_connection_new"      (ref _GIOStream,ref _GSocket)ref _GSocketConnection
    clang function "g_tcp_wrapper_connection_get_base_io_stream" (ref _GTcpWrapperConnection)ref _GIOStream
    clang function "g_test_dbus_get_type"              ()u64
    clang function "g_test_dbus_new"                   (i32)ref _GTestDBus
    clang function "g_test_dbus_get_flags"             (ref _GTestDBus)i32
    clang function "g_test_dbus_get_bus_address"       (ref _GTestDBus)ref i8
    clang proc     "g_test_dbus_add_service_dir"       (ref _GTestDBus,ref i8)
    clang proc     "g_test_dbus_up"                    (ref _GTestDBus)
    clang proc     "g_test_dbus_stop"                  (ref _GTestDBus)
    clang proc     "g_test_dbus_down"                  (ref _GTestDBus)
    clang proc     "g_test_dbus_unset"                 ()
    record _GThemedIconClass =
        var int dummy    !empty record
    end

    clang function "g_themed_icon_get_type"            ()u64
    clang function "g_themed_icon_new"                 (ref i8)ref _GIcon
    clang function "g_themed_icon_new_with_default_fallbacks" (ref i8)ref _GIcon
    clang function "g_themed_icon_new_from_names"      (ref ref i8,i32)ref _GIcon
    clang proc     "g_themed_icon_prepend_name"        (ref _GThemedIcon,ref i8)
    clang proc     "g_themed_icon_append_name"         (ref _GThemedIcon,ref i8)
    clang function "g_themed_icon_get_names"           (ref _GThemedIcon)ref ref i8
    record _GThreadedSocketServicePrivate =
        var int dummy    !empty record
    end

    record _GThreadedSocketServiceClass =
        var _GSocketServiceClass parent_class
        var ref clang function(ref _GThreadedSocketService,ref _GSocketConnection,ref _GObject)i32 run
        var ref clang proc() _g_reserved1
        var ref clang proc() _g_reserved2
        var ref clang proc() _g_reserved3
        var ref clang proc() _g_reserved4
        var ref clang proc() _g_reserved5
    end

    clang function "g_threaded_socket_service_get_type" ()u64
    clang function "g_threaded_socket_service_new"     (i32)ref _GSocketService
    record _GTlsBackend =
        var int dummy    !empty record
    end

    record _GTlsBackendInterface =
        var _GTypeInterface g_iface
        var ref clang function(ref _GTlsBackend)i32 supports_tls
        var ref clang function()u64 get_certificate_type
        var ref clang function()u64 get_client_connection_type
        var ref clang function()u64 get_server_connection_type
        var ref clang function()u64 get_file_database_type
        var ref clang function(ref _GTlsBackend)ref _GTlsDatabase get_default_database
    end

    clang function "g_tls_backend_get_type"            ()u64
    clang function "g_tls_backend_get_default"         ()ref _GTlsBackend
    clang function "g_tls_backend_get_default_database" (ref _GTlsBackend)ref _GTlsDatabase
    clang function "g_tls_backend_supports_tls"        (ref _GTlsBackend)i32
    clang function "g_tls_backend_get_certificate_type" (ref _GTlsBackend)u64
    clang function "g_tls_backend_get_client_connection_type" (ref _GTlsBackend)u64
    clang function "g_tls_backend_get_server_connection_type" (ref _GTlsBackend)u64
    clang function "g_tls_backend_get_file_database_type" (ref _GTlsBackend)u64
    record _GTlsCertificateClass =
        var _GObjectClass parent_class
        var ref clang function(ref _GTlsCertificate,ref _GSocketConnectable,ref _GTlsCertificate)i32 verify
        var [8]ref void padding
    end

    record _GTlsCertificatePrivate =
        var int dummy    !empty record
    end

    clang function "g_tls_certificate_get_type"        ()u64
    clang function "g_tls_certificate_new_from_pem"    (ref i8,i64,ref ref _GError)ref _GTlsCertificate
    clang function "g_tls_certificate_new_from_file"   (ref i8,ref ref _GError)ref _GTlsCertificate
    clang function "g_tls_certificate_new_from_files"  (ref i8,ref i8,ref ref _GError)ref _GTlsCertificate
    clang function "g_tls_certificate_list_new_from_file" (ref i8,ref ref _GError)ref _GList
    clang function "g_tls_certificate_get_issuer"      (ref _GTlsCertificate)ref _GTlsCertificate
    clang function "g_tls_certificate_verify"          (ref _GTlsCertificate,ref _GSocketConnectable,ref _GTlsCertificate)i32
    clang function "g_tls_certificate_is_same"         (ref _GTlsCertificate,ref _GTlsCertificate)i32
    record _GTlsConnectionClass =
        var _GIOStreamClass parent_class
        var ref clang function(ref _GTlsConnection,ref _GTlsCertificate,i32)i32 accept_certificate
        var ref clang function(ref _GTlsConnection,ref _GCancellable,ref ref _GError)i32 handshake
        var ref clang proc(ref _GTlsConnection,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) handshake_async
        var ref clang function(ref _GTlsConnection,ref _GAsyncResult,ref ref _GError)i32 handshake_finish
        var [8]ref void padding
    end

    record _GTlsConnectionPrivate =
        var int dummy    !empty record
    end

    clang function "g_tls_connection_get_type"         ()u64
    clang proc     "g_tls_connection_set_use_system_certdb" (ref _GTlsConnection,i32)
    clang function "g_tls_connection_get_use_system_certdb" (ref _GTlsConnection)i32
    clang proc     "g_tls_connection_set_database"     (ref _GTlsConnection,ref _GTlsDatabase)
    clang function "g_tls_connection_get_database"     (ref _GTlsConnection)ref _GTlsDatabase
    clang proc     "g_tls_connection_set_certificate"  (ref _GTlsConnection,ref _GTlsCertificate)
    clang function "g_tls_connection_get_certificate"  (ref _GTlsConnection)ref _GTlsCertificate
    clang proc     "g_tls_connection_set_interaction"  (ref _GTlsConnection,ref _GTlsInteraction)
    clang function "g_tls_connection_get_interaction"  (ref _GTlsConnection)ref _GTlsInteraction
    clang function "g_tls_connection_get_peer_certificate" (ref _GTlsConnection)ref _GTlsCertificate
    clang function "g_tls_connection_get_peer_certificate_errors" (ref _GTlsConnection)i32
    clang proc     "g_tls_connection_set_require_close_notify" (ref _GTlsConnection,i32)
    clang function "g_tls_connection_get_require_close_notify" (ref _GTlsConnection)i32
    clang proc     "g_tls_connection_set_rehandshake_mode" (ref _GTlsConnection,i32)
    clang function "g_tls_connection_get_rehandshake_mode" (ref _GTlsConnection)i32
    clang function "g_tls_connection_handshake"        (ref _GTlsConnection,ref _GCancellable,ref ref _GError)i32
    clang proc     "g_tls_connection_handshake_async"  (ref _GTlsConnection,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_tls_connection_handshake_finish" (ref _GTlsConnection,ref _GAsyncResult,ref ref _GError)i32
    clang function "g_tls_error_quark"                 ()u32
    clang function "g_tls_connection_emit_accept_certificate" (ref _GTlsConnection,ref _GTlsCertificate,i32)i32
    record _GTlsClientConnectionInterface =
        var _GTypeInterface g_iface
    end

    clang function "g_tls_client_connection_get_type"  ()u64
    clang function "g_tls_client_connection_new"       (ref _GIOStream,ref _GSocketConnectable,ref ref _GError)ref _GIOStream
    clang function "g_tls_client_connection_get_validation_flags" (ref _GTlsClientConnection)i32
    clang proc     "g_tls_client_connection_set_validation_flags" (ref _GTlsClientConnection,i32)
    clang function "g_tls_client_connection_get_server_identity" (ref _GTlsClientConnection)ref _GSocketConnectable
    clang proc     "g_tls_client_connection_set_server_identity" (ref _GTlsClientConnection,ref _GSocketConnectable)
    clang function "g_tls_client_connection_get_use_ssl3" (ref _GTlsClientConnection)i32
    clang proc     "g_tls_client_connection_set_use_ssl3" (ref _GTlsClientConnection,i32)
    clang function "g_tls_client_connection_get_accepted_cas" (ref _GTlsClientConnection)ref _GList
    record _GTlsDatabaseClass =
        var _GObjectClass parent_class
        var ref clang function(ref _GTlsDatabase,ref _GTlsCertificate,ref i8,ref _GSocketConnectable,ref _GTlsInteraction,i32,ref _GCancellable,ref ref _GError)i32 verify_chain
        var ref clang proc(ref _GTlsDatabase,ref _GTlsCertificate,ref i8,ref _GSocketConnectable,ref _GTlsInteraction,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) verify_chain_async
        var ref clang function(ref _GTlsDatabase,ref _GAsyncResult,ref ref _GError)i32 verify_chain_finish
        var ref clang function(ref _GTlsDatabase,ref _GTlsCertificate)ref i8 create_certificate_handle
        var ref clang function(ref _GTlsDatabase,ref i8,ref _GTlsInteraction,i32,ref _GCancellable,ref ref _GError)ref _GTlsCertificate lookup_certificate_for_handle
        var ref clang proc(ref _GTlsDatabase,ref i8,ref _GTlsInteraction,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) lookup_certificate_for_handle_async
        var ref clang function(ref _GTlsDatabase,ref _GAsyncResult,ref ref _GError)ref _GTlsCertificate lookup_certificate_for_handle_finish
        var ref clang function(ref _GTlsDatabase,ref _GTlsCertificate,ref _GTlsInteraction,i32,ref _GCancellable,ref ref _GError)ref _GTlsCertificate lookup_certificate_issuer
        var ref clang proc(ref _GTlsDatabase,ref _GTlsCertificate,ref _GTlsInteraction,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) lookup_certificate_issuer_async
        var ref clang function(ref _GTlsDatabase,ref _GAsyncResult,ref ref _GError)ref _GTlsCertificate lookup_certificate_issuer_finish
        var ref clang function(ref _GTlsDatabase,ref _GByteArray,ref _GTlsInteraction,i32,ref _GCancellable,ref ref _GError)ref _GList lookup_certificates_issued_by
        var ref clang proc(ref _GTlsDatabase,ref _GByteArray,ref _GTlsInteraction,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) lookup_certificates_issued_by_async
        var ref clang function(ref _GTlsDatabase,ref _GAsyncResult,ref ref _GError)ref _GList lookup_certificates_issued_by_finish
        var [16]ref void padding
    end

    record _GTlsDatabasePrivate =
        var int dummy    !empty record
    end

    clang function "g_tls_database_get_type"           ()u64
    clang function "g_tls_database_verify_chain"       (ref _GTlsDatabase,ref _GTlsCertificate,ref i8,ref _GSocketConnectable,ref _GTlsInteraction,i32,ref _GCancellable,ref ref _GError)i32
    clang proc     "g_tls_database_verify_chain_async" (ref _GTlsDatabase,ref _GTlsCertificate,ref i8,ref _GSocketConnectable,ref _GTlsInteraction,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_tls_database_verify_chain_finish" (ref _GTlsDatabase,ref _GAsyncResult,ref ref _GError)i32
    clang function "g_tls_database_create_certificate_handle" (ref _GTlsDatabase,ref _GTlsCertificate)ref i8
    clang function "g_tls_database_lookup_certificate_for_handle" (ref _GTlsDatabase,ref i8,ref _GTlsInteraction,i32,ref _GCancellable,ref ref _GError)ref _GTlsCertificate
    clang proc     "g_tls_database_lookup_certificate_for_handle_async" (ref _GTlsDatabase,ref i8,ref _GTlsInteraction,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_tls_database_lookup_certificate_for_handle_finish" (ref _GTlsDatabase,ref _GAsyncResult,ref ref _GError)ref _GTlsCertificate
    clang function "g_tls_database_lookup_certificate_issuer" (ref _GTlsDatabase,ref _GTlsCertificate,ref _GTlsInteraction,i32,ref _GCancellable,ref ref _GError)ref _GTlsCertificate
    clang proc     "g_tls_database_lookup_certificate_issuer_async" (ref _GTlsDatabase,ref _GTlsCertificate,ref _GTlsInteraction,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_tls_database_lookup_certificate_issuer_finish" (ref _GTlsDatabase,ref _GAsyncResult,ref ref _GError)ref _GTlsCertificate
    clang function "g_tls_database_lookup_certificates_issued_by" (ref _GTlsDatabase,ref _GByteArray,ref _GTlsInteraction,i32,ref _GCancellable,ref ref _GError)ref _GList
    clang proc     "g_tls_database_lookup_certificates_issued_by_async" (ref _GTlsDatabase,ref _GByteArray,ref _GTlsInteraction,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_tls_database_lookup_certificates_issued_by_finish" (ref _GTlsDatabase,ref _GAsyncResult,ref ref _GError)ref _GList
    record _GTlsFileDatabaseInterface =
        var _GTypeInterface g_iface
        var [8]ref void padding
    end

    clang function "g_tls_file_database_get_type"      ()u64
    clang function "g_tls_file_database_new"           (ref i8,ref ref _GError)ref _GTlsDatabase
    record _GTlsInteractionClass =
        var _GObjectClass parent_class
        var ref clang function(ref _GTlsInteraction,ref _GTlsPassword,ref _GCancellable,ref ref _GError)i32 ask_password
        var ref clang proc(ref _GTlsInteraction,ref _GTlsPassword,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) ask_password_async
        var ref clang function(ref _GTlsInteraction,ref _GAsyncResult,ref ref _GError)i32 ask_password_finish
        var [24]ref void padding
    end

    record _GTlsInteractionPrivate =
        var int dummy    !empty record
    end

    clang function "g_tls_interaction_get_type"        ()u64
    clang function "g_tls_interaction_invoke_ask_password" (ref _GTlsInteraction,ref _GTlsPassword,ref _GCancellable,ref ref _GError)i32
    clang function "g_tls_interaction_ask_password"    (ref _GTlsInteraction,ref _GTlsPassword,ref _GCancellable,ref ref _GError)i32
    clang proc     "g_tls_interaction_ask_password_async" (ref _GTlsInteraction,ref _GTlsPassword,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_tls_interaction_ask_password_finish" (ref _GTlsInteraction,ref _GAsyncResult,ref ref _GError)i32
    record _GTlsServerConnectionInterface =
        var _GTypeInterface g_iface
    end

    clang function "g_tls_server_connection_get_type"  ()u64
    clang function "g_tls_server_connection_new"       (ref _GIOStream,ref _GTlsCertificate,ref ref _GError)ref _GIOStream
    record _GTlsPasswordClass =
        var _GObjectClass parent_class
        var ref clang function(ref _GTlsPassword,ref u64)ref byte get_value
        var ref clang proc(ref _GTlsPassword,ref byte,i64,ref clang proc(ref void)) set_value
        var ref clang function(ref _GTlsPassword)ref i8 get_default_warning
        var [4]ref void padding
    end

    record _GTlsPasswordPrivate =
        var int dummy    !empty record
    end

    clang function "g_tls_password_get_type"           ()u64
    clang function "g_tls_password_new"                (i32,ref i8)ref _GTlsPassword
    clang function "g_tls_password_get_value"          (ref _GTlsPassword,ref u64)ref byte
    clang proc     "g_tls_password_set_value"          (ref _GTlsPassword,ref byte,i64)
    clang proc     "g_tls_password_set_value_full"     (ref _GTlsPassword,ref byte,i64,ref clang proc(ref void))
    clang function "g_tls_password_get_flags"          (ref _GTlsPassword)i32
    clang proc     "g_tls_password_set_flags"          (ref _GTlsPassword,i32)
    clang function "g_tls_password_get_description"    (ref _GTlsPassword)ref i8
    clang proc     "g_tls_password_set_description"    (ref _GTlsPassword,ref i8)
    clang function "g_tls_password_get_warning"        (ref _GTlsPassword)ref i8
    clang proc     "g_tls_password_set_warning"        (ref _GTlsPassword,ref i8)
    record _GVfsClass =
        var _GObjectClass parent_class
        var ref clang function(ref _GVfs)i32 is_active
        var ref clang function(ref _GVfs,ref i8)ref _GFile get_file_for_path
        var ref clang function(ref _GVfs,ref i8)ref _GFile get_file_for_uri
        var ref clang function(ref _GVfs)ref ref i8 get_supported_uri_schemes
        var ref clang function(ref _GVfs,ref i8)ref _GFile parse_name
        var ref clang proc(ref _GVfs,ref i8,u64,ref _GFileAttributeMatcher,ref _GFileInfo,ref _GCancellable,ref ref void,ref ref clang proc(ref void)) local_file_add_info
        var ref clang proc(ref _GVfs,ref _GFileAttributeInfoList) add_writable_namespaces
        var ref clang function(ref _GVfs,ref i8,ref _GFileInfo,i32,ref _GCancellable,ref ref _GError)i32 local_file_set_attributes
        var ref clang proc(ref _GVfs,ref i8) local_file_removed
        var ref clang proc(ref _GVfs,ref i8,ref i8) local_file_moved
        var ref clang proc() _g_reserved1
        var ref clang proc() _g_reserved2
        var ref clang proc() _g_reserved3
        var ref clang proc() _g_reserved4
        var ref clang proc() _g_reserved5
        var ref clang proc() _g_reserved6
        var ref clang proc() _g_reserved7
    end

    clang function "g_vfs_get_type"                    ()u64
    clang function "g_vfs_is_active"                   (ref _GVfs)i32
    clang function "g_vfs_get_file_for_path"           (ref _GVfs,ref i8)ref _GFile
    clang function "g_vfs_get_file_for_uri"            (ref _GVfs,ref i8)ref _GFile
    clang function "g_vfs_get_supported_uri_schemes"   (ref _GVfs)ref ref i8
    clang function "g_vfs_parse_name"                  (ref _GVfs,ref i8)ref _GFile
    clang function "g_vfs_get_default"                 ()ref _GVfs
    clang function "g_vfs_get_local"                   ()ref _GVfs
    record _GVolumeIface =
        var _GTypeInterface g_iface
        var ref clang proc(ref _GVolume) changed
        var ref clang proc(ref _GVolume) removed
        var ref clang function(ref _GVolume)ref i8 get_name
        var ref clang function(ref _GVolume)ref _GIcon get_icon
        var ref clang function(ref _GVolume)ref i8 get_uuid
        var ref clang function(ref _GVolume)ref _GDrive get_drive
        var ref clang function(ref _GVolume)ref _GMount get_mount
        var ref clang function(ref _GVolume)i32 can_mount
        var ref clang function(ref _GVolume)i32 can_eject
        var ref clang proc(ref _GVolume,i32,ref _GMountOperation,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) mount_fn
        var ref clang function(ref _GVolume,ref _GAsyncResult,ref ref _GError)i32 mount_finish
        var ref clang proc(ref _GVolume,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) eject
        var ref clang function(ref _GVolume,ref _GAsyncResult,ref ref _GError)i32 eject_finish
        var ref clang function(ref _GVolume,ref i8)ref i8 get_identifier
        var ref clang function(ref _GVolume)ref ref i8 enumerate_identifiers
        var ref clang function(ref _GVolume)i32 should_automount
        var ref clang function(ref _GVolume)ref _GFile get_activation_root
        var ref clang proc(ref _GVolume,i32,ref _GMountOperation,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void) eject_with_operation
        var ref clang function(ref _GVolume,ref _GAsyncResult,ref ref _GError)i32 eject_with_operation_finish
        var ref clang function(ref _GVolume)ref i8 get_sort_key
        var ref clang function(ref _GVolume)ref _GIcon get_symbolic_icon
    end

    clang function "g_volume_get_type"                 ()u64
    clang function "g_volume_get_name"                 (ref _GVolume)ref i8
    clang function "g_volume_get_icon"                 (ref _GVolume)ref _GIcon
    clang function "g_volume_get_symbolic_icon"        (ref _GVolume)ref _GIcon
    clang function "g_volume_get_uuid"                 (ref _GVolume)ref i8
    clang function "g_volume_get_drive"                (ref _GVolume)ref _GDrive
    clang function "g_volume_get_mount"                (ref _GVolume)ref _GMount
    clang function "g_volume_can_mount"                (ref _GVolume)i32
    clang function "g_volume_can_eject"                (ref _GVolume)i32
    clang function "g_volume_should_automount"         (ref _GVolume)i32
    clang proc     "g_volume_mount"                    (ref _GVolume,i32,ref _GMountOperation,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_volume_mount_finish"             (ref _GVolume,ref _GAsyncResult,ref ref _GError)i32
    clang proc     "g_volume_eject"                    (ref _GVolume,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_volume_eject_finish"             (ref _GVolume,ref _GAsyncResult,ref ref _GError)i32
    clang function "g_volume_get_identifier"           (ref _GVolume,ref i8)ref i8
    clang function "g_volume_enumerate_identifiers"    (ref _GVolume)ref ref i8
    clang function "g_volume_get_activation_root"      (ref _GVolume)ref _GFile
    clang proc     "g_volume_eject_with_operation"     (ref _GVolume,i32,ref _GMountOperation,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_volume_eject_with_operation_finish" (ref _GVolume,ref _GAsyncResult,ref ref _GError)i32
    clang function "g_volume_get_sort_key"             (ref _GVolume)ref i8
    record _GZlibCompressorClass =
        var _GObjectClass parent_class
    end

    clang function "g_zlib_compressor_get_type"        ()u64
    clang function "g_zlib_compressor_new"             (i32,i32)ref _GZlibCompressor
    clang function "g_zlib_compressor_get_file_info"   (ref _GZlibCompressor)ref _GFileInfo
    clang proc     "g_zlib_compressor_set_file_info"   (ref _GZlibCompressor,ref _GFileInfo)
    record _GZlibDecompressorClass =
        var _GObjectClass parent_class
    end

    clang function "g_zlib_decompressor_get_type"      ()u64
    clang function "g_zlib_decompressor_new"           (i32)ref _GZlibDecompressor
    clang function "g_zlib_decompressor_get_file_info" (ref _GZlibDecompressor)ref _GFileInfo
    record _GDBusInterfaceIface =
        var _GTypeInterface parent_iface
        var ref clang function(ref _GDBusInterface)ref _GDBusInterfaceInfo get_info
        var ref clang function(ref _GDBusInterface)ref _GDBusObject get_object
        var ref clang proc(ref _GDBusInterface,ref _GDBusObject) set_object
        var ref clang function(ref _GDBusInterface)ref _GDBusObject dup_object
    end

    clang function "g_dbus_interface_get_type"         ()u64
    clang function "g_dbus_interface_get_info"         (ref _GDBusInterface)ref _GDBusInterfaceInfo
    clang function "g_dbus_interface_get_object"       (ref _GDBusInterface)ref _GDBusObject
    clang proc     "g_dbus_interface_set_object"       (ref _GDBusInterface,ref _GDBusObject)
    clang function "g_dbus_interface_dup_object"       (ref _GDBusInterface)ref _GDBusObject
    record _GDBusInterfaceSkeletonClass =
        var _GObjectClass parent_class
        var ref clang function(ref _GDBusInterfaceSkeleton)ref _GDBusInterfaceInfo get_info
        var ref clang function(ref _GDBusInterfaceSkeleton)ref _GDBusInterfaceVTable get_vtable
        var ref clang function(ref _GDBusInterfaceSkeleton)ref _GVariant get_properties
        var ref clang proc(ref _GDBusInterfaceSkeleton) flush
        var [8]ref void vfunc_padding
        var ref clang function(ref _GDBusInterfaceSkeleton,ref _GDBusMethodInvocation)i32 g_authorize_method
        var [8]ref void signal_padding
    end

    record _GDBusInterfaceSkeletonPrivate =
        var int dummy    !empty record
    end

    clang function "g_dbus_interface_skeleton_get_type" ()u64
    clang function "g_dbus_interface_skeleton_get_flags" (ref _GDBusInterfaceSkeleton)i32
    clang proc     "g_dbus_interface_skeleton_set_flags" (ref _GDBusInterfaceSkeleton,i32)
    clang function "g_dbus_interface_skeleton_get_info" (ref _GDBusInterfaceSkeleton)ref _GDBusInterfaceInfo
    clang function "g_dbus_interface_skeleton_get_vtable" (ref _GDBusInterfaceSkeleton)ref _GDBusInterfaceVTable
    clang function "g_dbus_interface_skeleton_get_properties" (ref _GDBusInterfaceSkeleton)ref _GVariant
    clang proc     "g_dbus_interface_skeleton_flush"   (ref _GDBusInterfaceSkeleton)
    clang function "g_dbus_interface_skeleton_export"  (ref _GDBusInterfaceSkeleton,ref _GDBusConnection,ref i8,ref ref _GError)i32
    clang proc     "g_dbus_interface_skeleton_unexport" (ref _GDBusInterfaceSkeleton)
    clang proc     "g_dbus_interface_skeleton_unexport_from_connection" (ref _GDBusInterfaceSkeleton,ref _GDBusConnection)
    clang function "g_dbus_interface_skeleton_get_connection" (ref _GDBusInterfaceSkeleton)ref _GDBusConnection
    clang function "g_dbus_interface_skeleton_get_connections" (ref _GDBusInterfaceSkeleton)ref _GList
    clang function "g_dbus_interface_skeleton_has_connection" (ref _GDBusInterfaceSkeleton,ref _GDBusConnection)i32
    clang function "g_dbus_interface_skeleton_get_object_path" (ref _GDBusInterfaceSkeleton)ref i8
    record _GDBusObjectIface =
        var _GTypeInterface parent_iface
        var ref clang function(ref _GDBusObject)ref i8 get_object_path
        var ref clang function(ref _GDBusObject)ref _GList get_interfaces
        var ref clang function(ref _GDBusObject,ref i8)ref _GDBusInterface get_interface
        var ref clang proc(ref _GDBusObject,ref _GDBusInterface) interface_added
        var ref clang proc(ref _GDBusObject,ref _GDBusInterface) interface_removed
    end

    clang function "g_dbus_object_get_type"            ()u64
    clang function "g_dbus_object_get_object_path"     (ref _GDBusObject)ref i8
    clang function "g_dbus_object_get_interfaces"      (ref _GDBusObject)ref _GList
    clang function "g_dbus_object_get_interface"       (ref _GDBusObject,ref i8)ref _GDBusInterface
    record _GDBusObjectSkeletonClass =
        var _GObjectClass parent_class
        var ref clang function(ref _GDBusObjectSkeleton,ref _GDBusInterfaceSkeleton,ref _GDBusMethodInvocation)i32 authorize_method
        var [8]ref void padding
    end

    record _GDBusObjectSkeletonPrivate =
        var int dummy    !empty record
    end

    clang function "g_dbus_object_skeleton_get_type"   ()u64
    clang function "g_dbus_object_skeleton_new"        (ref i8)ref _GDBusObjectSkeleton
    clang proc     "g_dbus_object_skeleton_flush"      (ref _GDBusObjectSkeleton)
    clang proc     "g_dbus_object_skeleton_add_interface" (ref _GDBusObjectSkeleton,ref _GDBusInterfaceSkeleton)
    clang proc     "g_dbus_object_skeleton_remove_interface" (ref _GDBusObjectSkeleton,ref _GDBusInterfaceSkeleton)
    clang proc     "g_dbus_object_skeleton_remove_interface_by_name" (ref _GDBusObjectSkeleton,ref i8)
    clang proc     "g_dbus_object_skeleton_set_object_path" (ref _GDBusObjectSkeleton,ref i8)
    record _GDBusObjectProxyClass =
        var _GObjectClass parent_class
        var [8]ref void padding
    end

    record _GDBusObjectProxyPrivate =
        var int dummy    !empty record
    end

    clang function "g_dbus_object_proxy_get_type"      ()u64
    clang function "g_dbus_object_proxy_new"           (ref _GDBusConnection,ref i8)ref _GDBusObjectProxy
    clang function "g_dbus_object_proxy_get_connection" (ref _GDBusObjectProxy)ref _GDBusConnection
    record _GDBusObjectManagerIface =
        var _GTypeInterface parent_iface
        var ref clang function(ref _GDBusObjectManager)ref i8 get_object_path
        var ref clang function(ref _GDBusObjectManager)ref _GList get_objects
        var ref clang function(ref _GDBusObjectManager,ref i8)ref _GDBusObject get_object
        var ref clang function(ref _GDBusObjectManager,ref i8,ref i8)ref _GDBusInterface get_interface
        var ref clang proc(ref _GDBusObjectManager,ref _GDBusObject) object_added
        var ref clang proc(ref _GDBusObjectManager,ref _GDBusObject) object_removed
        var ref clang proc(ref _GDBusObjectManager,ref _GDBusObject,ref _GDBusInterface) interface_added
        var ref clang proc(ref _GDBusObjectManager,ref _GDBusObject,ref _GDBusInterface) interface_removed
    end

    clang function "g_dbus_object_manager_get_type"    ()u64
    clang function "g_dbus_object_manager_get_object_path" (ref _GDBusObjectManager)ref i8
    clang function "g_dbus_object_manager_get_objects" (ref _GDBusObjectManager)ref _GList
    clang function "g_dbus_object_manager_get_object"  (ref _GDBusObjectManager,ref i8)ref _GDBusObject
    clang function "g_dbus_object_manager_get_interface" (ref _GDBusObjectManager,ref i8,ref i8)ref _GDBusInterface
    record _GDBusObjectManagerClientClass =
        var _GObjectClass parent_class
        var ref clang proc(ref _GDBusObjectManagerClient,ref _GDBusObjectProxy,ref _GDBusProxy,ref i8,ref i8,ref _GVariant) interface_proxy_signal
        var ref clang proc(ref _GDBusObjectManagerClient,ref _GDBusObjectProxy,ref _GDBusProxy,ref _GVariant,ref ref i8) interface_proxy_properties_changed
        var [8]ref void padding
    end

    record _GDBusObjectManagerClientPrivate =
        var int dummy    !empty record
    end

    clang function "g_dbus_object_manager_client_get_type" ()u64
    clang proc     "g_dbus_object_manager_client_new"  (ref _GDBusConnection,i32,ref i8,ref i8,ref clang function(ref _GDBusObjectManagerClient,ref i8,ref i8,ref void)u64,ref void,ref clang proc(ref void),ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_dbus_object_manager_client_new_finish" (ref _GAsyncResult,ref ref _GError)ref _GDBusObjectManager
    clang function "g_dbus_object_manager_client_new_sync" (ref _GDBusConnection,i32,ref i8,ref i8,ref clang function(ref _GDBusObjectManagerClient,ref i8,ref i8,ref void)u64,ref void,ref clang proc(ref void),ref _GCancellable,ref ref _GError)ref _GDBusObjectManager
    clang proc     "g_dbus_object_manager_client_new_for_bus" (i32,i32,ref i8,ref i8,ref clang function(ref _GDBusObjectManagerClient,ref i8,ref i8,ref void)u64,ref void,ref clang proc(ref void),ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "g_dbus_object_manager_client_new_for_bus_finish" (ref _GAsyncResult,ref ref _GError)ref _GDBusObjectManager
    clang function "g_dbus_object_manager_client_new_for_bus_sync" (i32,i32,ref i8,ref i8,ref clang function(ref _GDBusObjectManagerClient,ref i8,ref i8,ref void)u64,ref void,ref clang proc(ref void),ref _GCancellable,ref ref _GError)ref _GDBusObjectManager
    clang function "g_dbus_object_manager_client_get_connection" (ref _GDBusObjectManagerClient)ref _GDBusConnection
    clang function "g_dbus_object_manager_client_get_flags" (ref _GDBusObjectManagerClient)i32
    clang function "g_dbus_object_manager_client_get_name" (ref _GDBusObjectManagerClient)ref i8
    clang function "g_dbus_object_manager_client_get_name_owner" (ref _GDBusObjectManagerClient)ref i8
    record _GDBusObjectManagerServerClass =
        var _GObjectClass parent_class
        var [8]ref void padding
    end

    record _GDBusObjectManagerServerPrivate =
        var int dummy    !empty record
    end

    clang function "g_dbus_object_manager_server_get_type" ()u64
    clang function "g_dbus_object_manager_server_new"  (ref i8)ref _GDBusObjectManagerServer
    clang function "g_dbus_object_manager_server_get_connection" (ref _GDBusObjectManagerServer)ref _GDBusConnection
    clang proc     "g_dbus_object_manager_server_set_connection" (ref _GDBusObjectManagerServer,ref _GDBusConnection)
    clang proc     "g_dbus_object_manager_server_export" (ref _GDBusObjectManagerServer,ref _GDBusObjectSkeleton)
    clang proc     "g_dbus_object_manager_server_export_uniquely" (ref _GDBusObjectManagerServer,ref _GDBusObjectSkeleton)
    clang function "g_dbus_object_manager_server_is_exported" (ref _GDBusObjectManagerServer,ref _GDBusObjectSkeleton)i32
    clang function "g_dbus_object_manager_server_unexport" (ref _GDBusObjectManagerServer,ref i8)i32
    clang function "g_dbus_action_group_get_type"      ()u64
    clang function "g_dbus_action_group_get"           (ref _GDBusConnection,ref i8,ref i8)ref _GDBusActionGroup
    record _GRemoteActionGroupInterface =
        var _GTypeInterface g_iface
        var ref clang proc(ref _GRemoteActionGroup,ref i8,ref _GVariant,ref _GVariant) activate_action_full
        var ref clang proc(ref _GRemoteActionGroup,ref i8,ref _GVariant,ref _GVariant) change_action_state_full
    end

    clang function "g_remote_action_group_get_type"    ()u64
    clang proc     "g_remote_action_group_activate_action_full" (ref _GRemoteActionGroup,ref i8,ref _GVariant,ref _GVariant)
    clang proc     "g_remote_action_group_change_action_state_full" (ref _GRemoteActionGroup,ref i8,ref _GVariant,ref _GVariant)
    record _GMenuModelPrivate =
        var int dummy    !empty record
    end

    record _GMenuModelClass =
        var _GObjectClass parent_class
        var ref clang function(ref _GMenuModel)i32 is_mutable
        var ref clang function(ref _GMenuModel)i32 get_n_items
        var ref clang proc(ref _GMenuModel,i32,ref ref _GHashTable) get_item_attributes
        var ref clang function(ref _GMenuModel,i32)ref _GMenuAttributeIter iterate_item_attributes
        var ref clang function(ref _GMenuModel,i32,ref i8,ref _GVariantType)ref _GVariant get_item_attribute_value
        var ref clang proc(ref _GMenuModel,i32,ref ref _GHashTable) get_item_links
        var ref clang function(ref _GMenuModel,i32)ref _GMenuLinkIter iterate_item_links
        var ref clang function(ref _GMenuModel,i32,ref i8)ref _GMenuModel get_item_link
    end

    record _GMenuAttributeIterPrivate =
        var int dummy    !empty record
    end

    record _GMenuAttributeIterClass =
        var _GObjectClass parent_class
        var ref clang function(ref _GMenuAttributeIter,ref ref i8,ref ref _GVariant)i32 get_next
    end

    record _GMenuAttributeIter =
        var _GObject parent_instance
        var ref _GMenuAttributeIterPrivate priv
    end

    record _GMenuLinkIterPrivate =
        var int dummy    !empty record
    end

    record _GMenuLinkIterClass =
        var _GObjectClass parent_class
        var ref clang function(ref _GMenuLinkIter,ref ref i8,ref ref _GMenuModel)i32 get_next
    end

    record _GMenuLinkIter =
        var _GObject parent_instance
        var ref _GMenuLinkIterPrivate priv
    end

    clang function "g_menu_model_get_type"             ()u64
    clang function "g_menu_model_is_mutable"           (ref _GMenuModel)i32
    clang function "g_menu_model_get_n_items"          (ref _GMenuModel)i32
    clang function "g_menu_model_iterate_item_attributes" (ref _GMenuModel,i32)ref _GMenuAttributeIter
    clang function "g_menu_model_get_item_attribute_value" (ref _GMenuModel,i32,ref i8,ref _GVariantType)ref _GVariant
    clang function "g_menu_model_get_item_attribute"   (ref _GMenuModel,i32,ref i8,ref i8,...)i32
    clang function "g_menu_model_iterate_item_links"   (ref _GMenuModel,i32)ref _GMenuLinkIter
    clang function "g_menu_model_get_item_link"        (ref _GMenuModel,i32,ref i8)ref _GMenuModel
    clang proc     "g_menu_model_items_changed"        (ref _GMenuModel,i32,i32,i32)
    clang function "g_menu_attribute_iter_get_type"    ()u64
    clang function "g_menu_attribute_iter_get_next"    (ref _GMenuAttributeIter,ref ref i8,ref ref _GVariant)i32
    clang function "g_menu_attribute_iter_next"        (ref _GMenuAttributeIter)i32
    clang function "g_menu_attribute_iter_get_name"    (ref _GMenuAttributeIter)ref i8
    clang function "g_menu_attribute_iter_get_value"   (ref _GMenuAttributeIter)ref _GVariant
    clang function "g_menu_link_iter_get_type"         ()u64
    clang function "g_menu_link_iter_get_next"         (ref _GMenuLinkIter,ref ref i8,ref ref _GMenuModel)i32
    clang function "g_menu_link_iter_next"             (ref _GMenuLinkIter)i32
    clang function "g_menu_link_iter_get_name"         (ref _GMenuLinkIter)ref i8
    clang function "g_menu_link_iter_get_value"        (ref _GMenuLinkIter)ref _GMenuModel
    record _GMenuItem =
        var int dummy    !empty record
    end

    record _GMenu =
        var int dummy    !empty record
    end

    clang function "g_menu_get_type"                   ()u64
    clang function "g_menu_new"                        ()ref _GMenu
    clang proc     "g_menu_freeze"                     (ref _GMenu)
    clang proc     "g_menu_insert_item"                (ref _GMenu,i32,ref _GMenuItem)
    clang proc     "g_menu_prepend_item"               (ref _GMenu,ref _GMenuItem)
    clang proc     "g_menu_append_item"                (ref _GMenu,ref _GMenuItem)
    clang proc     "g_menu_remove"                     (ref _GMenu,i32)
    clang proc     "g_menu_insert"                     (ref _GMenu,i32,ref i8,ref i8)
    clang proc     "g_menu_prepend"                    (ref _GMenu,ref i8,ref i8)
    clang proc     "g_menu_append"                     (ref _GMenu,ref i8,ref i8)
    clang proc     "g_menu_insert_section"             (ref _GMenu,i32,ref i8,ref _GMenuModel)
    clang proc     "g_menu_prepend_section"            (ref _GMenu,ref i8,ref _GMenuModel)
    clang proc     "g_menu_append_section"             (ref _GMenu,ref i8,ref _GMenuModel)
    clang proc     "g_menu_insert_submenu"             (ref _GMenu,i32,ref i8,ref _GMenuModel)
    clang proc     "g_menu_prepend_submenu"            (ref _GMenu,ref i8,ref _GMenuModel)
    clang proc     "g_menu_append_submenu"             (ref _GMenu,ref i8,ref _GMenuModel)
    clang function "g_menu_item_get_type"              ()u64
    clang function "g_menu_item_new"                   (ref i8,ref i8)ref _GMenuItem
    clang function "g_menu_item_new_from_model"        (ref _GMenuModel,i32)ref _GMenuItem
    clang function "g_menu_item_new_submenu"           (ref i8,ref _GMenuModel)ref _GMenuItem
    clang function "g_menu_item_new_section"           (ref i8,ref _GMenuModel)ref _GMenuItem
    clang function "g_menu_item_get_attribute_value"   (ref _GMenuItem,ref i8,ref _GVariantType)ref _GVariant
    clang function "g_menu_item_get_attribute"         (ref _GMenuItem,ref i8,ref i8,...)i32
    clang function "g_menu_item_get_link"              (ref _GMenuItem,ref i8)ref _GMenuModel
    clang proc     "g_menu_item_set_attribute_value"   (ref _GMenuItem,ref i8,ref _GVariant)
    clang proc     "g_menu_item_set_attribute"         (ref _GMenuItem,ref i8,ref i8,...)
    clang proc     "g_menu_item_set_link"              (ref _GMenuItem,ref i8,ref _GMenuModel)
    clang proc     "g_menu_item_set_label"             (ref _GMenuItem,ref i8)
    clang proc     "g_menu_item_set_submenu"           (ref _GMenuItem,ref _GMenuModel)
    clang proc     "g_menu_item_set_section"           (ref _GMenuItem,ref _GMenuModel)
    clang proc     "g_menu_item_set_action_and_target_value" (ref _GMenuItem,ref i8,ref _GVariant)
    clang proc     "g_menu_item_set_action_and_target" (ref _GMenuItem,ref i8,ref i8,...)
    clang proc     "g_menu_item_set_detailed_action"   (ref _GMenuItem,ref i8)
    clang function "g_dbus_connection_export_menu_model" (ref _GDBusConnection,ref i8,ref _GMenuModel,ref ref _GError)u32
    clang proc     "g_dbus_connection_unexport_menu_model" (ref _GDBusConnection,u32)
    record _GDBusMenuModel =
        var int dummy    !empty record
    end

    clang function "g_dbus_menu_model_get_type"        ()u64
    clang function "g_dbus_menu_model_get"             (ref _GDBusConnection,ref i8,ref i8)ref _GDBusMenuModel
    record _PangoCoverage =
        var int dummy    !empty record
    end

    const PANGO_COVERAGE_NONE                = 0
    const PANGO_COVERAGE_FALLBACK            = 1
    const PANGO_COVERAGE_APPROXIMATE         = 2
    const PANGO_COVERAGE_EXACT               = 3
    clang function "pango_coverage_new"                ()ref _PangoCoverage
    clang function "pango_coverage_ref"                (ref _PangoCoverage)ref _PangoCoverage
    clang proc     "pango_coverage_unref"              (ref _PangoCoverage)
    clang function "pango_coverage_copy"               (ref _PangoCoverage)ref _PangoCoverage
    clang function "pango_coverage_get"                (ref _PangoCoverage,i32)i32
    clang proc     "pango_coverage_set"                (ref _PangoCoverage,i32,i32)
    clang proc     "pango_coverage_max"                (ref _PangoCoverage,ref _PangoCoverage)
    clang proc     "pango_coverage_to_bytes"           (ref _PangoCoverage,ref ref byte,ref i32)
    clang function "pango_coverage_from_bytes"         (ref byte,i32)ref _PangoCoverage
    record _PangoLogAttr =
        var u32 is_line_break
        var u32 is_mandatory_break
        var u32 is_char_break
        var u32 is_white
        var u32 is_cursor_position
        var u32 is_word_start
        var u32 is_word_end
        var u32 is_sentence_boundary
        var u32 is_sentence_start
        var u32 is_sentence_end
        var u32 backspace_deletes_character
        var u32 is_expandable_space
        var u32 is_word_boundary
    end

    record _PangoEngineLang =
        var int dummy    !empty record
    end

    record _PangoEngineShape =
        var int dummy    !empty record
    end

    record _PangoFont =
        var int dummy    !empty record
    end

    record _PangoFontMap =
        var int dummy    !empty record
    end

    record _PangoRectangle =
        var i32 x
        var i32 y
        var i32 width
        var i32 height
    end

    clang function "pango_units_from_double"           (r64)i32
    clang function "pango_units_to_double"             (i32)r64
    clang proc     "pango_extents_to_pixels"           (ref _PangoRectangle,ref _PangoRectangle)
    const PANGO_GRAVITY_SOUTH                = 0
    const PANGO_GRAVITY_EAST                 = 1
    const PANGO_GRAVITY_NORTH                = 2
    const PANGO_GRAVITY_WEST                 = 3
    const PANGO_GRAVITY_AUTO                 = 4
    const PANGO_GRAVITY_HINT_NATURAL         = 0
    const PANGO_GRAVITY_HINT_STRONG          = 1
    const PANGO_GRAVITY_HINT_LINE            = 2
    record _PangoMatrix =
        var r64 xx
        var r64 xy
        var r64 yx
        var r64 yy
        var r64 x0
        var r64 y0
    end

    clang function "pango_matrix_get_type"             ()u64
    clang function "pango_matrix_copy"                 (ref _PangoMatrix)ref _PangoMatrix
    clang proc     "pango_matrix_free"                 (ref _PangoMatrix)
    clang proc     "pango_matrix_translate"            (ref _PangoMatrix,r64,r64)
    clang proc     "pango_matrix_scale"                (ref _PangoMatrix,r64,r64)
    clang proc     "pango_matrix_rotate"               (ref _PangoMatrix,r64)
    clang proc     "pango_matrix_concat"               (ref _PangoMatrix,ref _PangoMatrix)
    clang proc     "pango_matrix_transform_point"      (ref _PangoMatrix,ref r64,ref r64)
    clang proc     "pango_matrix_transform_distance"   (ref _PangoMatrix,ref r64,ref r64)
    clang proc     "pango_matrix_transform_rectangle"  (ref _PangoMatrix,ref _PangoRectangle)
    clang proc     "pango_matrix_transform_pixel_rectangle" (ref _PangoMatrix,ref _PangoRectangle)
    clang function "pango_matrix_get_font_scale_factor" (ref _PangoMatrix)r64
    record _PangoScriptIter =
        var int dummy    !empty record
    end

    const PANGO_SCRIPT_INVALID_CODE          = -1
    const PANGO_SCRIPT_COMMON                = 0
    const PANGO_SCRIPT_INHERITED             = 1
    const PANGO_SCRIPT_ARABIC                = 2
    const PANGO_SCRIPT_ARMENIAN              = 3
    const PANGO_SCRIPT_BENGALI               = 4
    const PANGO_SCRIPT_BOPOMOFO              = 5
    const PANGO_SCRIPT_CHEROKEE              = 6
    const PANGO_SCRIPT_COPTIC                = 7
    const PANGO_SCRIPT_CYRILLIC              = 8
    const PANGO_SCRIPT_DESERET               = 9
    const PANGO_SCRIPT_DEVANAGARI            = 10
    const PANGO_SCRIPT_ETHIOPIC              = 11
    const PANGO_SCRIPT_GEORGIAN              = 12
    const PANGO_SCRIPT_GOTHIC                = 13
    const PANGO_SCRIPT_GREEK                 = 14
    const PANGO_SCRIPT_GUJARATI              = 15
    const PANGO_SCRIPT_GURMUKHI              = 16
    const PANGO_SCRIPT_HAN                   = 17
    const PANGO_SCRIPT_HANGUL                = 18
    const PANGO_SCRIPT_HEBREW                = 19
    const PANGO_SCRIPT_HIRAGANA              = 20
    const PANGO_SCRIPT_KANNADA               = 21
    const PANGO_SCRIPT_KATAKANA              = 22
    const PANGO_SCRIPT_KHMER                 = 23
    const PANGO_SCRIPT_LAO                   = 24
    const PANGO_SCRIPT_LATIN                 = 25
    const PANGO_SCRIPT_MALAYALAM             = 26
    const PANGO_SCRIPT_MONGOLIAN             = 27
    const PANGO_SCRIPT_MYANMAR               = 28
    const PANGO_SCRIPT_OGHAM                 = 29
    const PANGO_SCRIPT_OLD_ITALIC            = 30
    const PANGO_SCRIPT_ORIYA                 = 31
    const PANGO_SCRIPT_RUNIC                 = 32
    const PANGO_SCRIPT_SINHALA               = 33
    const PANGO_SCRIPT_SYRIAC                = 34
    const PANGO_SCRIPT_TAMIL                 = 35
    const PANGO_SCRIPT_TELUGU                = 36
    const PANGO_SCRIPT_THAANA                = 37
    const PANGO_SCRIPT_THAI                  = 38
    const PANGO_SCRIPT_TIBETAN               = 39
    const PANGO_SCRIPT_CANADIAN_ABORIGINAL   = 40
    const PANGO_SCRIPT_YI                    = 41
    const PANGO_SCRIPT_TAGALOG               = 42
    const PANGO_SCRIPT_HANUNOO               = 43
    const PANGO_SCRIPT_BUHID                 = 44
    const PANGO_SCRIPT_TAGBANWA              = 45
    const PANGO_SCRIPT_BRAILLE               = 46
    const PANGO_SCRIPT_CYPRIOT               = 47
    const PANGO_SCRIPT_LIMBU                 = 48
    const PANGO_SCRIPT_OSMANYA               = 49
    const PANGO_SCRIPT_SHAVIAN               = 50
    const PANGO_SCRIPT_LINEAR_B              = 51
    const PANGO_SCRIPT_TAI_LE                = 52
    const PANGO_SCRIPT_UGARITIC              = 53
    const PANGO_SCRIPT_NEW_TAI_LUE           = 54
    const PANGO_SCRIPT_BUGINESE              = 55
    const PANGO_SCRIPT_GLAGOLITIC            = 56
    const PANGO_SCRIPT_TIFINAGH              = 57
    const PANGO_SCRIPT_SYLOTI_NAGRI          = 58
    const PANGO_SCRIPT_OLD_PERSIAN           = 59
    const PANGO_SCRIPT_KHAROSHTHI            = 60
    const PANGO_SCRIPT_UNKNOWN               = 61
    const PANGO_SCRIPT_BALINESE              = 62
    const PANGO_SCRIPT_CUNEIFORM             = 63
    const PANGO_SCRIPT_PHOENICIAN            = 64
    const PANGO_SCRIPT_PHAGS_PA              = 65
    const PANGO_SCRIPT_NKO                   = 66
    const PANGO_SCRIPT_KAYAH_LI              = 67
    const PANGO_SCRIPT_LEPCHA                = 68
    const PANGO_SCRIPT_REJANG                = 69
    const PANGO_SCRIPT_SUNDANESE             = 70
    const PANGO_SCRIPT_SAURASHTRA            = 71
    const PANGO_SCRIPT_CHAM                  = 72
    const PANGO_SCRIPT_OL_CHIKI              = 73
    const PANGO_SCRIPT_VAI                   = 74
    const PANGO_SCRIPT_CARIAN                = 75
    const PANGO_SCRIPT_LYCIAN                = 76
    const PANGO_SCRIPT_LYDIAN                = 77
    clang function "pango_script_for_unichar"          (u32)i32
    clang function "pango_script_iter_new"             (ref i8,i32)ref _PangoScriptIter
    clang proc     "pango_script_iter_get_range"       (ref _PangoScriptIter,ref ref i8,ref ref i8,ref i32)
    clang function "pango_script_iter_next"            (ref _PangoScriptIter)i32
    clang proc     "pango_script_iter_free"            (ref _PangoScriptIter)
    record _PangoLanguage =
        var int dummy    !empty record
    end

    clang function "pango_language_get_type"           ()u64
    clang function "pango_language_from_string"        (ref i8)ref _PangoLanguage
    clang function "pango_language_to_string"          (ref _PangoLanguage)ref i8
    clang function "pango_language_get_sample_string"  (ref _PangoLanguage)ref i8
    clang function "pango_language_get_default"        ()ref _PangoLanguage
    clang function "pango_language_matches"            (ref _PangoLanguage,ref i8)i32
    clang function "pango_language_includes_script"    (ref _PangoLanguage,i32)i32
    clang function "pango_language_get_scripts"        (ref _PangoLanguage,ref i32)ref i32
    clang function "pango_script_get_sample_language"  (i32)ref _PangoLanguage
    clang function "pango_gravity_to_rotation"         (i32)r64
    clang function "pango_gravity_get_for_matrix"      (ref _PangoMatrix)i32
    clang function "pango_gravity_get_for_script"      (i32,i32,i32)i32
    clang function "pango_gravity_get_for_script_and_width" (i32,i32,i32,i32)i32
    const PANGO_BIDI_TYPE_L                  = 0
    const PANGO_BIDI_TYPE_LRE                = 1
    const PANGO_BIDI_TYPE_LRO                = 2
    const PANGO_BIDI_TYPE_R                  = 3
    const PANGO_BIDI_TYPE_AL                 = 4
    const PANGO_BIDI_TYPE_RLE                = 5
    const PANGO_BIDI_TYPE_RLO                = 6
    const PANGO_BIDI_TYPE_PDF                = 7
    const PANGO_BIDI_TYPE_EN                 = 8
    const PANGO_BIDI_TYPE_ES                 = 9
    const PANGO_BIDI_TYPE_ET                 = 10
    const PANGO_BIDI_TYPE_AN                 = 11
    const PANGO_BIDI_TYPE_CS                 = 12
    const PANGO_BIDI_TYPE_NSM                = 13
    const PANGO_BIDI_TYPE_BN                 = 14
    const PANGO_BIDI_TYPE_B                  = 15
    const PANGO_BIDI_TYPE_S                  = 16
    const PANGO_BIDI_TYPE_WS                 = 17
    const PANGO_BIDI_TYPE_ON                 = 18
    clang function "pango_bidi_type_for_unichar"       (u32)i32
    const PANGO_DIRECTION_LTR                = 0
    const PANGO_DIRECTION_RTL                = 1
    const PANGO_DIRECTION_TTB_LTR            = 2
    const PANGO_DIRECTION_TTB_RTL            = 3
    const PANGO_DIRECTION_WEAK_LTR           = 4
    const PANGO_DIRECTION_WEAK_RTL           = 5
    const PANGO_DIRECTION_NEUTRAL            = 6
    clang function "pango_unichar_direction"           (u32)i32
    clang function "pango_find_base_dir"               (ref i8,i32)i32
    clang function "pango_get_mirror_char"             (u32,ref u32)i32
    record _PangoFontDescription =
        var int dummy    !empty record
    end

    record _PangoFontMetrics =
        var int dummy    !empty record
    end

    const PANGO_STYLE_NORMAL                 = 0
    const PANGO_STYLE_OBLIQUE                = 1
    const PANGO_STYLE_ITALIC                 = 2
    const PANGO_VARIANT_NORMAL               = 0
    const PANGO_VARIANT_SMALL_CAPS           = 1
    const PANGO_WEIGHT_THIN                  = 100
    const PANGO_WEIGHT_ULTRALIGHT            = 200
    const PANGO_WEIGHT_LIGHT                 = 300
    const PANGO_WEIGHT_BOOK                  = 380
    const PANGO_WEIGHT_NORMAL                = 400
    const PANGO_WEIGHT_MEDIUM                = 500
    const PANGO_WEIGHT_SEMIBOLD              = 600
    const PANGO_WEIGHT_BOLD                  = 700
    const PANGO_WEIGHT_ULTRABOLD             = 800
    const PANGO_WEIGHT_HEAVY                 = 900
    const PANGO_WEIGHT_ULTRAHEAVY            = 1000
    const PANGO_STRETCH_ULTRA_CONDENSED      = 0
    const PANGO_STRETCH_EXTRA_CONDENSED      = 1
    const PANGO_STRETCH_CONDENSED            = 2
    const PANGO_STRETCH_SEMI_CONDENSED       = 3
    const PANGO_STRETCH_NORMAL               = 4
    const PANGO_STRETCH_SEMI_EXPANDED        = 5
    const PANGO_STRETCH_EXPANDED             = 6
    const PANGO_STRETCH_EXTRA_EXPANDED       = 7
    const PANGO_STRETCH_ULTRA_EXPANDED       = 8
    const PANGO_FONT_MASK_FAMILY             = 1
    const PANGO_FONT_MASK_STYLE              = 2
    const PANGO_FONT_MASK_VARIANT            = 4
    const PANGO_FONT_MASK_WEIGHT             = 8
    const PANGO_FONT_MASK_STRETCH            = 16
    const PANGO_FONT_MASK_SIZE               = 32
    const PANGO_FONT_MASK_GRAVITY            = 64
    clang function "pango_font_description_get_type"   ()u64
    clang function "pango_font_description_new"        ()ref _PangoFontDescription
    clang function "pango_font_description_copy"       (ref _PangoFontDescription)ref _PangoFontDescription
    clang function "pango_font_description_copy_static" (ref _PangoFontDescription)ref _PangoFontDescription
    clang function "pango_font_description_hash"       (ref _PangoFontDescription)u32
    clang function "pango_font_description_equal"      (ref _PangoFontDescription,ref _PangoFontDescription)i32
    clang proc     "pango_font_description_free"       (ref _PangoFontDescription)
    clang proc     "pango_font_descriptions_free"      (ref ref _PangoFontDescription,i32)
    clang proc     "pango_font_description_set_family" (ref _PangoFontDescription,ref i8)
    clang proc     "pango_font_description_set_family_static" (ref _PangoFontDescription,ref i8)
    clang function "pango_font_description_get_family" (ref _PangoFontDescription)ref i8
    clang proc     "pango_font_description_set_style"  (ref _PangoFontDescription,i32)
    clang function "pango_font_description_get_style"  (ref _PangoFontDescription)i32
    clang proc     "pango_font_description_set_variant" (ref _PangoFontDescription,i32)
    clang function "pango_font_description_get_variant" (ref _PangoFontDescription)i32
    clang proc     "pango_font_description_set_weight" (ref _PangoFontDescription,i32)
    clang function "pango_font_description_get_weight" (ref _PangoFontDescription)i32
    clang proc     "pango_font_description_set_stretch" (ref _PangoFontDescription,i32)
    clang function "pango_font_description_get_stretch" (ref _PangoFontDescription)i32
    clang proc     "pango_font_description_set_size"   (ref _PangoFontDescription,i32)
    clang function "pango_font_description_get_size"   (ref _PangoFontDescription)i32
    clang proc     "pango_font_description_set_absolute_size" (ref _PangoFontDescription,r64)
    clang function "pango_font_description_get_size_is_absolute" (ref _PangoFontDescription)i32
    clang proc     "pango_font_description_set_gravity" (ref _PangoFontDescription,i32)
    clang function "pango_font_description_get_gravity" (ref _PangoFontDescription)i32
    clang function "pango_font_description_get_set_fields" (ref _PangoFontDescription)i32
    clang proc     "pango_font_description_unset_fields" (ref _PangoFontDescription,i32)
    clang proc     "pango_font_description_merge"      (ref _PangoFontDescription,ref _PangoFontDescription,i32)
    clang proc     "pango_font_description_merge_static" (ref _PangoFontDescription,ref _PangoFontDescription,i32)
    clang function "pango_font_description_better_match" (ref _PangoFontDescription,ref _PangoFontDescription,ref _PangoFontDescription)i32
    clang function "pango_font_description_from_string" (ref i8)ref _PangoFontDescription
    clang function "pango_font_description_to_string"  (ref _PangoFontDescription)ref i8
    clang function "pango_font_description_to_filename" (ref _PangoFontDescription)ref i8
    clang function "pango_font_metrics_get_type"       ()u64
    clang function "pango_font_metrics_ref"            (ref _PangoFontMetrics)ref _PangoFontMetrics
    clang proc     "pango_font_metrics_unref"          (ref _PangoFontMetrics)
    clang function "pango_font_metrics_get_ascent"     (ref _PangoFontMetrics)i32
    clang function "pango_font_metrics_get_descent"    (ref _PangoFontMetrics)i32
    clang function "pango_font_metrics_get_approximate_char_width" (ref _PangoFontMetrics)i32
    clang function "pango_font_metrics_get_approximate_digit_width" (ref _PangoFontMetrics)i32
    clang function "pango_font_metrics_get_underline_position" (ref _PangoFontMetrics)i32
    clang function "pango_font_metrics_get_underline_thickness" (ref _PangoFontMetrics)i32
    clang function "pango_font_metrics_get_strikethrough_position" (ref _PangoFontMetrics)i32
    clang function "pango_font_metrics_get_strikethrough_thickness" (ref _PangoFontMetrics)i32
    record _PangoFontFamily =
        var int dummy    !empty record
    end

    record _PangoFontFace =
        var int dummy    !empty record
    end

    clang function "pango_font_family_get_type"        ()u64
    clang proc     "pango_font_family_list_faces"      (ref _PangoFontFamily,ref ref ref _PangoFontFace,ref i32)
    clang function "pango_font_family_get_name"        (ref _PangoFontFamily)ref i8
    clang function "pango_font_family_is_monospace"    (ref _PangoFontFamily)i32
    clang function "pango_font_face_get_type"          ()u64
    clang function "pango_font_face_describe"          (ref _PangoFontFace)ref _PangoFontDescription
    clang function "pango_font_face_get_face_name"     (ref _PangoFontFace)ref i8
    clang proc     "pango_font_face_list_sizes"        (ref _PangoFontFace,ref ref i32,ref i32)
    clang function "pango_font_face_is_synthesized"    (ref _PangoFontFace)i32
    clang function "pango_font_get_type"               ()u64
    clang function "pango_font_describe"               (ref _PangoFont)ref _PangoFontDescription
    clang function "pango_font_describe_with_absolute_size" (ref _PangoFont)ref _PangoFontDescription
    clang function "pango_font_get_coverage"           (ref _PangoFont,ref _PangoLanguage)ref _PangoCoverage
    clang function "pango_font_find_shaper"            (ref _PangoFont,ref _PangoLanguage,u32)ref _PangoEngineShape
    clang function "pango_font_get_metrics"            (ref _PangoFont,ref _PangoLanguage)ref _PangoFontMetrics
    clang proc     "pango_font_get_glyph_extents"      (ref _PangoFont,u32,ref _PangoRectangle,ref _PangoRectangle)
    clang function "pango_font_get_font_map"           (ref _PangoFont)ref _PangoFontMap
    record _PangoColor =
        var u16 red
        var u16 green
        var u16 blue
    end

    clang function "pango_color_get_type"              ()u64
    clang function "pango_color_copy"                  (ref _PangoColor)ref _PangoColor
    clang proc     "pango_color_free"                  (ref _PangoColor)
    clang function "pango_color_parse"                 (ref _PangoColor,ref i8)i32
    clang function "pango_color_to_string"             (ref _PangoColor)ref i8
    record _PangoAttribute =
        var ref _PangoAttrClass klass
        var u32 start_index
        var u32 end_index
    end

    record _PangoAttrClass =
        var i32 type$
        var ref clang function(ref _PangoAttribute)ref _PangoAttribute copy
        var ref clang proc(ref _PangoAttribute) destroy
        var ref clang function(ref _PangoAttribute,ref _PangoAttribute)i32 equal
    end

    record _PangoAttrString =
        var _PangoAttribute attr
        var ref i8 value
    end

    record _PangoAttrLanguage =
        var _PangoAttribute attr
        var ref _PangoLanguage value
    end

    record _PangoAttrInt =
        var _PangoAttribute attr
        var i32 value
    end

    record _PangoAttrSize =
        var _PangoAttribute attr
        var i32 size
        var u32 absolute
    end

    record _PangoAttrFloat =
        var _PangoAttribute attr
        var r64 value
    end

    record _PangoAttrColor =
        var _PangoAttribute attr
        var _PangoColor color
    end

    record _PangoAttrFontDesc =
        var _PangoAttribute attr
        var ref _PangoFontDescription desc
    end

    record _PangoAttrShape =
        var _PangoAttribute attr
        var _PangoRectangle ink_rect
        var _PangoRectangle logical_rect
        var ref void data
        var ref clang function(ref void)ref void copy_func
        var ref clang proc(ref void) destroy_func
    end

    record _PangoAttrList =
        var int dummy    !empty record
    end

    record _PangoAttrIterator =
        var int dummy    !empty record
    end

    const PANGO_ATTR_INVALID                 = 0
    const PANGO_ATTR_LANGUAGE                = 1
    const PANGO_ATTR_FAMILY                  = 2
    const PANGO_ATTR_STYLE                   = 3
    const PANGO_ATTR_WEIGHT                  = 4
    const PANGO_ATTR_VARIANT                 = 5
    const PANGO_ATTR_STRETCH                 = 6
    const PANGO_ATTR_SIZE                    = 7
    const PANGO_ATTR_FONT_DESC               = 8
    const PANGO_ATTR_FOREGROUND              = 9
    const PANGO_ATTR_BACKGROUND              = 10
    const PANGO_ATTR_UNDERLINE               = 11
    const PANGO_ATTR_STRIKETHROUGH           = 12
    const PANGO_ATTR_RISE                    = 13
    const PANGO_ATTR_SHAPE                   = 14
    const PANGO_ATTR_SCALE                   = 15
    const PANGO_ATTR_FALLBACK                = 16
    const PANGO_ATTR_LETTER_SPACING          = 17
    const PANGO_ATTR_UNDERLINE_COLOR         = 18
    const PANGO_ATTR_STRIKETHROUGH_COLOR     = 19
    const PANGO_ATTR_ABSOLUTE_SIZE           = 20
    const PANGO_ATTR_GRAVITY                 = 21
    const PANGO_ATTR_GRAVITY_HINT            = 22
    const PANGO_UNDERLINE_NONE               = 0
    const PANGO_UNDERLINE_SINGLE             = 1
    const PANGO_UNDERLINE_DOUBLE             = 2
    const PANGO_UNDERLINE_LOW                = 3
    const PANGO_UNDERLINE_ERROR              = 4
    clang function "pango_attr_type_register"          (ref i8)i32
    clang function "pango_attr_type_get_name"          (i32)ref i8
    clang proc     "pango_attribute_init"              (ref _PangoAttribute,ref _PangoAttrClass)
    clang function "pango_attribute_copy"              (ref _PangoAttribute)ref _PangoAttribute
    clang proc     "pango_attribute_destroy"           (ref _PangoAttribute)
    clang function "pango_attribute_equal"             (ref _PangoAttribute,ref _PangoAttribute)i32
    clang function "pango_attr_language_new"           (ref _PangoLanguage)ref _PangoAttribute
    clang function "pango_attr_family_new"             (ref i8)ref _PangoAttribute
    clang function "pango_attr_foreground_new"         (u16,u16,u16)ref _PangoAttribute
    clang function "pango_attr_background_new"         (u16,u16,u16)ref _PangoAttribute
    clang function "pango_attr_size_new"               (i32)ref _PangoAttribute
    clang function "pango_attr_size_new_absolute"      (i32)ref _PangoAttribute
    clang function "pango_attr_style_new"              (i32)ref _PangoAttribute
    clang function "pango_attr_weight_new"             (i32)ref _PangoAttribute
    clang function "pango_attr_variant_new"            (i32)ref _PangoAttribute
    clang function "pango_attr_stretch_new"            (i32)ref _PangoAttribute
    clang function "pango_attr_font_desc_new"          (ref _PangoFontDescription)ref _PangoAttribute
    clang function "pango_attr_underline_new"          (i32)ref _PangoAttribute
    clang function "pango_attr_underline_color_new"    (u16,u16,u16)ref _PangoAttribute
    clang function "pango_attr_strikethrough_new"      (i32)ref _PangoAttribute
    clang function "pango_attr_strikethrough_color_new" (u16,u16,u16)ref _PangoAttribute
    clang function "pango_attr_rise_new"               (i32)ref _PangoAttribute
    clang function "pango_attr_scale_new"              (r64)ref _PangoAttribute
    clang function "pango_attr_fallback_new"           (i32)ref _PangoAttribute
    clang function "pango_attr_letter_spacing_new"     (i32)ref _PangoAttribute
    clang function "pango_attr_shape_new"              (ref _PangoRectangle,ref _PangoRectangle)ref _PangoAttribute
    clang function "pango_attr_shape_new_with_data"    (ref _PangoRectangle,ref _PangoRectangle,ref void,ref clang function(ref void)ref void,ref clang proc(ref void))ref _PangoAttribute
    clang function "pango_attr_gravity_new"            (i32)ref _PangoAttribute
    clang function "pango_attr_gravity_hint_new"       (i32)ref _PangoAttribute
    clang function "pango_attr_list_get_type"          ()u64
    clang function "pango_attr_list_new"               ()ref _PangoAttrList
    clang function "pango_attr_list_ref"               (ref _PangoAttrList)ref _PangoAttrList
    clang proc     "pango_attr_list_unref"             (ref _PangoAttrList)
    clang function "pango_attr_list_copy"              (ref _PangoAttrList)ref _PangoAttrList
    clang proc     "pango_attr_list_insert"            (ref _PangoAttrList,ref _PangoAttribute)
    clang proc     "pango_attr_list_insert_before"     (ref _PangoAttrList,ref _PangoAttribute)
    clang proc     "pango_attr_list_change"            (ref _PangoAttrList,ref _PangoAttribute)
    clang proc     "pango_attr_list_splice"            (ref _PangoAttrList,ref _PangoAttrList,i32,i32)
    clang function "pango_attr_list_filter"            (ref _PangoAttrList,ref clang function(ref _PangoAttribute,ref void)i32,ref void)ref _PangoAttrList
    clang function "pango_attr_list_get_iterator"      (ref _PangoAttrList)ref _PangoAttrIterator
    clang proc     "pango_attr_iterator_range"         (ref _PangoAttrIterator,ref i32,ref i32)
    clang function "pango_attr_iterator_next"          (ref _PangoAttrIterator)i32
    clang function "pango_attr_iterator_copy"          (ref _PangoAttrIterator)ref _PangoAttrIterator
    clang proc     "pango_attr_iterator_destroy"       (ref _PangoAttrIterator)
    clang function "pango_attr_iterator_get"           (ref _PangoAttrIterator,i32)ref _PangoAttribute
    clang proc     "pango_attr_iterator_get_font"      (ref _PangoAttrIterator,ref _PangoFontDescription,ref ref _PangoLanguage,ref ref _GSList)
    clang function "pango_attr_iterator_get_attrs"     (ref _PangoAttrIterator)ref _GSList
    clang function "pango_parse_markup"                (ref i8,i32,u32,ref ref _PangoAttrList,ref ref i8,ref u32,ref ref _GError)i32
    record _PangoAnalysis =
        var ref _PangoEngineShape shape_engine
        var ref _PangoEngineLang lang_engine
        var ref _PangoFont font
        var byte level
        var byte gravity
        var byte flags
        var byte script
        var ref _PangoLanguage language
        var ref _GSList extra_attrs
    end

    record _PangoItem =
        var i32 offset
        var i32 length
        var i32 num_chars
        var _PangoAnalysis analysis
    end

    clang function "pango_item_get_type"               ()u64
    clang function "pango_item_new"                    ()ref _PangoItem
    clang function "pango_item_copy"                   (ref _PangoItem)ref _PangoItem
    clang proc     "pango_item_free"                   (ref _PangoItem)
    clang function "pango_item_split"                  (ref _PangoItem,i32,i32)ref _PangoItem
    clang proc     "pango_break"                       (ref i8,i32,ref _PangoAnalysis,ref _PangoLogAttr,i32)
    clang proc     "pango_find_paragraph_boundary"     (ref i8,i32,ref i32,ref i32)
    clang proc     "pango_get_log_attrs"               (ref i8,i32,i32,ref _PangoLanguage,ref _PangoLogAttr,i32)
    clang function "pango_fontset_get_type"            ()u64
    record _PangoFontset =
        var int dummy    !empty record
    end

    clang function "pango_fontset_get_font"            (ref _PangoFontset,u32)ref _PangoFont
    clang function "pango_fontset_get_metrics"         (ref _PangoFontset)ref _PangoFontMetrics
    clang proc     "pango_fontset_foreach"             (ref _PangoFontset,ref clang function(ref _PangoFontset,ref _PangoFont,ref void)i32,ref void)
    record _PangoContextClass =
        var int dummy    !empty record
    end

    clang function "pango_context_get_type"            ()u64
    clang function "pango_context_new"                 ()ref _PangoContext
    clang proc     "pango_context_set_font_map"        (ref _PangoContext,ref _PangoFontMap)
    clang function "pango_context_get_font_map"        (ref _PangoContext)ref _PangoFontMap
    clang proc     "pango_context_list_families"       (ref _PangoContext,ref ref ref _PangoFontFamily,ref i32)
    clang function "pango_context_load_font"           (ref _PangoContext,ref _PangoFontDescription)ref _PangoFont
    clang function "pango_context_load_fontset"        (ref _PangoContext,ref _PangoFontDescription,ref _PangoLanguage)ref _PangoFontset
    clang function "pango_context_get_metrics"         (ref _PangoContext,ref _PangoFontDescription,ref _PangoLanguage)ref _PangoFontMetrics
    clang proc     "pango_context_set_font_description" (ref _PangoContext,ref _PangoFontDescription)
    clang function "pango_context_get_font_description" (ref _PangoContext)ref _PangoFontDescription
    clang function "pango_context_get_language"        (ref _PangoContext)ref _PangoLanguage
    clang proc     "pango_context_set_language"        (ref _PangoContext,ref _PangoLanguage)
    clang proc     "pango_context_set_base_dir"        (ref _PangoContext,i32)
    clang function "pango_context_get_base_dir"        (ref _PangoContext)i32
    clang proc     "pango_context_set_base_gravity"    (ref _PangoContext,i32)
    clang function "pango_context_get_base_gravity"    (ref _PangoContext)i32
    clang function "pango_context_get_gravity"         (ref _PangoContext)i32
    clang proc     "pango_context_set_gravity_hint"    (ref _PangoContext,i32)
    clang function "pango_context_get_gravity_hint"    (ref _PangoContext)i32
    clang proc     "pango_context_set_matrix"          (ref _PangoContext,ref _PangoMatrix)
    clang function "pango_context_get_matrix"          (ref _PangoContext)ref _PangoMatrix
    clang function "pango_itemize"                     (ref _PangoContext,ref i8,i32,i32,ref _PangoAttrList,ref _PangoAttrIterator)ref _GList
    clang function "pango_itemize_with_base_dir"       (ref _PangoContext,i32,ref i8,i32,i32,ref _PangoAttrList,ref _PangoAttrIterator)ref _GList
    record _PangoGlyphGeometry =
        var i32 width
        var i32 x_offset
        var i32 y_offset
    end

    record _PangoGlyphVisAttr =
        var u32 is_cluster_start
    end

    record _PangoGlyphInfo =
        var u32 glyph
        var _PangoGlyphGeometry geometry
        var _PangoGlyphVisAttr attr
    end

    record _PangoGlyphString =
        var i32 num_glyphs
        var ref _PangoGlyphInfo glyphs
        var ref i32 log_clusters
        var i32 space
    end

    clang function "pango_glyph_string_new"            ()ref _PangoGlyphString
    clang proc     "pango_glyph_string_set_size"       (ref _PangoGlyphString,i32)
    clang function "pango_glyph_string_get_type"       ()u64
    clang function "pango_glyph_string_copy"           (ref _PangoGlyphString)ref _PangoGlyphString
    clang proc     "pango_glyph_string_free"           (ref _PangoGlyphString)
    clang proc     "pango_glyph_string_extents"        (ref _PangoGlyphString,ref _PangoFont,ref _PangoRectangle,ref _PangoRectangle)
    clang function "pango_glyph_string_get_width"      (ref _PangoGlyphString)i32
    clang proc     "pango_glyph_string_extents_range"  (ref _PangoGlyphString,i32,i32,ref _PangoFont,ref _PangoRectangle,ref _PangoRectangle)
    clang proc     "pango_glyph_string_get_logical_widths" (ref _PangoGlyphString,ref i8,i32,i32,ref i32)
    clang proc     "pango_glyph_string_index_to_x"     (ref _PangoGlyphString,ref i8,i32,ref _PangoAnalysis,i32,i32,ref i32)
    clang proc     "pango_glyph_string_x_to_index"     (ref _PangoGlyphString,ref i8,i32,ref _PangoAnalysis,i32,ref i32,ref i32)
    clang proc     "pango_shape"                       (ref i8,i32,ref _PangoAnalysis,ref _PangoGlyphString)
    clang function "pango_reorder_items"               (ref _GList)ref _GList
    clang function "pango_attr_type_get_type"          ()u64
    clang function "pango_underline_get_type"          ()u64
    clang function "pango_bidi_type_get_type"          ()u64
    clang function "pango_direction_get_type"          ()u64
    clang function "pango_coverage_level_get_type"     ()u64
    clang function "pango_style_get_type"              ()u64
    clang function "pango_variant_get_type"            ()u64
    clang function "pango_weight_get_type"             ()u64
    clang function "pango_stretch_get_type"            ()u64
    clang function "pango_font_mask_get_type"          ()u64
    clang function "pango_gravity_get_type"            ()u64
    clang function "pango_gravity_hint_get_type"       ()u64
    clang function "pango_alignment_get_type"          ()u64
    clang function "pango_wrap_mode_get_type"          ()u64
    clang function "pango_ellipsize_mode_get_type"     ()u64
    clang function "pango_render_part_get_type"        ()u64
    clang function "pango_script_get_type"             ()u64
    clang function "pango_tab_align_get_type"          ()u64
    record _PangoGlyphItem =
        var ref _PangoItem item
        var ref _PangoGlyphString glyphs
    end

    clang function "pango_glyph_item_get_type"         ()u64
    clang function "pango_glyph_item_split"            (ref _PangoGlyphItem,ref i8,i32)ref _PangoGlyphItem
    clang function "pango_glyph_item_copy"             (ref _PangoGlyphItem)ref _PangoGlyphItem
    clang proc     "pango_glyph_item_free"             (ref _PangoGlyphItem)
    clang function "pango_glyph_item_apply_attrs"      (ref _PangoGlyphItem,ref i8,ref _PangoAttrList)ref _GSList
    clang proc     "pango_glyph_item_letter_space"     (ref _PangoGlyphItem,ref i8,ref _PangoLogAttr,i32)
    clang proc     "pango_glyph_item_get_logical_widths" (ref _PangoGlyphItem,ref i8,ref i32)
    record _PangoGlyphItemIter =
        var ref _PangoGlyphItem glyph_item
        var ref i8 text
        var i32 start_glyph
        var i32 start_index
        var i32 start_char
        var i32 end_glyph
        var i32 end_index
        var i32 end_char
    end

    clang function "pango_glyph_item_iter_get_type"    ()u64
    clang function "pango_glyph_item_iter_copy"        (ref _PangoGlyphItemIter)ref _PangoGlyphItemIter
    clang proc     "pango_glyph_item_iter_free"        (ref _PangoGlyphItemIter)
    clang function "pango_glyph_item_iter_init_start"  (ref _PangoGlyphItemIter,ref _PangoGlyphItem,ref i8)i32
    clang function "pango_glyph_item_iter_init_end"    (ref _PangoGlyphItemIter,ref _PangoGlyphItem,ref i8)i32
    clang function "pango_glyph_item_iter_next_cluster" (ref _PangoGlyphItemIter)i32
    clang function "pango_glyph_item_iter_prev_cluster" (ref _PangoGlyphItemIter)i32
    record _PangoTabArray =
        var int dummy    !empty record
    end

    const PANGO_TAB_LEFT                     = 0
    clang function "pango_tab_array_new"               (i32,i32)ref _PangoTabArray
    clang function "pango_tab_array_new_with_positions" (i32,i32,i32,i32,...)ref _PangoTabArray
    clang function "pango_tab_array_get_type"          ()u64
    clang function "pango_tab_array_copy"              (ref _PangoTabArray)ref _PangoTabArray
    clang proc     "pango_tab_array_free"              (ref _PangoTabArray)
    clang function "pango_tab_array_get_size"          (ref _PangoTabArray)i32
    clang proc     "pango_tab_array_resize"            (ref _PangoTabArray,i32)
    clang proc     "pango_tab_array_set_tab"           (ref _PangoTabArray,i32,i32,i32)
    clang proc     "pango_tab_array_get_tab"           (ref _PangoTabArray,i32,ref i32,ref i32)
    clang proc     "pango_tab_array_get_tabs"          (ref _PangoTabArray,ref ref i32,ref ref i32)
    clang function "pango_tab_array_get_positions_in_pixels" (ref _PangoTabArray)i32
    record _PangoLayout =
        var int dummy    !empty record
    end

    record _PangoLayoutClass =
        var int dummy    !empty record
    end

    record _PangoLayoutLine =
        var ref _PangoLayout layout
        var i32 start_index
        var i32 length
        var ref _GSList runs
        var u32 is_paragraph_start
        var u32 resolved_dir
    end

    const PANGO_ALIGN_LEFT                   = 0
    const PANGO_ALIGN_CENTER                 = 1
    const PANGO_ALIGN_RIGHT                  = 2
    const PANGO_WRAP_WORD                    = 0
    const PANGO_WRAP_CHAR                    = 1
    const PANGO_WRAP_WORD_CHAR               = 2
    const PANGO_ELLIPSIZE_NONE               = 0
    const PANGO_ELLIPSIZE_START              = 1
    const PANGO_ELLIPSIZE_MIDDLE             = 2
    const PANGO_ELLIPSIZE_END                = 3
    clang function "pango_layout_get_type"             ()u64
    clang function "pango_layout_new"                  (ref _PangoContext)ref _PangoLayout
    clang function "pango_layout_copy"                 (ref _PangoLayout)ref _PangoLayout
    clang function "pango_layout_get_context"          (ref _PangoLayout)ref _PangoContext
    clang proc     "pango_layout_set_attributes"       (ref _PangoLayout,ref _PangoAttrList)
    clang function "pango_layout_get_attributes"       (ref _PangoLayout)ref _PangoAttrList
    clang proc     "pango_layout_set_text"             (ref _PangoLayout,ref i8,i32)
    clang function "pango_layout_get_text"             (ref _PangoLayout)ref i8
    clang function "pango_layout_get_character_count"  (ref _PangoLayout)i32
    clang proc     "pango_layout_set_markup"           (ref _PangoLayout,ref i8,i32)
    clang proc     "pango_layout_set_markup_with_accel" (ref _PangoLayout,ref i8,i32,u32,ref u32)
    clang proc     "pango_layout_set_font_description" (ref _PangoLayout,ref _PangoFontDescription)
    clang function "pango_layout_get_font_description" (ref _PangoLayout)ref _PangoFontDescription
    clang proc     "pango_layout_set_width"            (ref _PangoLayout,i32)
    clang function "pango_layout_get_width"            (ref _PangoLayout)i32
    clang proc     "pango_layout_set_height"           (ref _PangoLayout,i32)
    clang function "pango_layout_get_height"           (ref _PangoLayout)i32
    clang proc     "pango_layout_set_wrap"             (ref _PangoLayout,i32)
    clang function "pango_layout_get_wrap"             (ref _PangoLayout)i32
    clang function "pango_layout_is_wrapped"           (ref _PangoLayout)i32
    clang proc     "pango_layout_set_indent"           (ref _PangoLayout,i32)
    clang function "pango_layout_get_indent"           (ref _PangoLayout)i32
    clang proc     "pango_layout_set_spacing"          (ref _PangoLayout,i32)
    clang function "pango_layout_get_spacing"          (ref _PangoLayout)i32
    clang proc     "pango_layout_set_justify"          (ref _PangoLayout,i32)
    clang function "pango_layout_get_justify"          (ref _PangoLayout)i32
    clang proc     "pango_layout_set_auto_dir"         (ref _PangoLayout,i32)
    clang function "pango_layout_get_auto_dir"         (ref _PangoLayout)i32
    clang proc     "pango_layout_set_alignment"        (ref _PangoLayout,i32)
    clang function "pango_layout_get_alignment"        (ref _PangoLayout)i32
    clang proc     "pango_layout_set_tabs"             (ref _PangoLayout,ref _PangoTabArray)
    clang function "pango_layout_get_tabs"             (ref _PangoLayout)ref _PangoTabArray
    clang proc     "pango_layout_set_single_paragraph_mode" (ref _PangoLayout,i32)
    clang function "pango_layout_get_single_paragraph_mode" (ref _PangoLayout)i32
    clang proc     "pango_layout_set_ellipsize"        (ref _PangoLayout,i32)
    clang function "pango_layout_get_ellipsize"        (ref _PangoLayout)i32
    clang function "pango_layout_is_ellipsized"        (ref _PangoLayout)i32
    clang function "pango_layout_get_unknown_glyphs_count" (ref _PangoLayout)i32
    clang proc     "pango_layout_context_changed"      (ref _PangoLayout)
    clang proc     "pango_layout_get_log_attrs"        (ref _PangoLayout,ref ref _PangoLogAttr,ref i32)
    clang function "pango_layout_get_log_attrs_readonly" (ref _PangoLayout,ref i32)ref _PangoLogAttr
    clang proc     "pango_layout_index_to_pos"         (ref _PangoLayout,i32,ref _PangoRectangle)
    clang proc     "pango_layout_index_to_line_x"      (ref _PangoLayout,i32,i32,ref i32,ref i32)
    clang proc     "pango_layout_get_cursor_pos"       (ref _PangoLayout,i32,ref _PangoRectangle,ref _PangoRectangle)
    clang proc     "pango_layout_move_cursor_visually" (ref _PangoLayout,i32,i32,i32,i32,ref i32,ref i32)
    clang function "pango_layout_xy_to_index"          (ref _PangoLayout,i32,i32,ref i32,ref i32)i32
    clang proc     "pango_layout_get_extents"          (ref _PangoLayout,ref _PangoRectangle,ref _PangoRectangle)
    clang proc     "pango_layout_get_pixel_extents"    (ref _PangoLayout,ref _PangoRectangle,ref _PangoRectangle)
    clang proc     "pango_layout_get_size"             (ref _PangoLayout,ref i32,ref i32)
    clang proc     "pango_layout_get_pixel_size"       (ref _PangoLayout,ref i32,ref i32)
    clang function "pango_layout_get_baseline"         (ref _PangoLayout)i32
    clang function "pango_layout_get_line_count"       (ref _PangoLayout)i32
    clang function "pango_layout_get_line"             (ref _PangoLayout,i32)ref _PangoLayoutLine
    clang function "pango_layout_get_line_readonly"    (ref _PangoLayout,i32)ref _PangoLayoutLine
    clang function "pango_layout_get_lines"            (ref _PangoLayout)ref _GSList
    clang function "pango_layout_get_lines_readonly"   (ref _PangoLayout)ref _GSList
    clang function "pango_layout_line_get_type"        ()u64
    clang function "pango_layout_line_ref"             (ref _PangoLayoutLine)ref _PangoLayoutLine
    clang proc     "pango_layout_line_unref"           (ref _PangoLayoutLine)
    clang function "pango_layout_line_x_to_index"      (ref _PangoLayoutLine,i32,ref i32,ref i32)i32
    clang proc     "pango_layout_line_index_to_x"      (ref _PangoLayoutLine,i32,i32,ref i32)
    clang proc     "pango_layout_line_get_x_ranges"    (ref _PangoLayoutLine,i32,i32,ref ref i32,ref i32)
    clang proc     "pango_layout_line_get_extents"     (ref _PangoLayoutLine,ref _PangoRectangle,ref _PangoRectangle)
    clang proc     "pango_layout_line_get_pixel_extents" (ref _PangoLayoutLine,ref _PangoRectangle,ref _PangoRectangle)
    record _PangoLayoutIter =
        var int dummy    !empty record
    end

    clang function "pango_layout_iter_get_type"        ()u64
    clang function "pango_layout_get_iter"             (ref _PangoLayout)ref _PangoLayoutIter
    clang function "pango_layout_iter_copy"            (ref _PangoLayoutIter)ref _PangoLayoutIter
    clang proc     "pango_layout_iter_free"            (ref _PangoLayoutIter)
    clang function "pango_layout_iter_get_index"       (ref _PangoLayoutIter)i32
    clang function "pango_layout_iter_get_run"         (ref _PangoLayoutIter)ref _PangoGlyphItem
    clang function "pango_layout_iter_get_run_readonly" (ref _PangoLayoutIter)ref _PangoGlyphItem
    clang function "pango_layout_iter_get_line"        (ref _PangoLayoutIter)ref _PangoLayoutLine
    clang function "pango_layout_iter_get_line_readonly" (ref _PangoLayoutIter)ref _PangoLayoutLine
    clang function "pango_layout_iter_at_last_line"    (ref _PangoLayoutIter)i32
    clang function "pango_layout_iter_get_layout"      (ref _PangoLayoutIter)ref _PangoLayout
    clang function "pango_layout_iter_next_char"       (ref _PangoLayoutIter)i32
    clang function "pango_layout_iter_next_cluster"    (ref _PangoLayoutIter)i32
    clang function "pango_layout_iter_next_run"        (ref _PangoLayoutIter)i32
    clang function "pango_layout_iter_next_line"       (ref _PangoLayoutIter)i32
    clang proc     "pango_layout_iter_get_char_extents" (ref _PangoLayoutIter,ref _PangoRectangle)
    clang proc     "pango_layout_iter_get_cluster_extents" (ref _PangoLayoutIter,ref _PangoRectangle,ref _PangoRectangle)
    clang proc     "pango_layout_iter_get_run_extents" (ref _PangoLayoutIter,ref _PangoRectangle,ref _PangoRectangle)
    clang proc     "pango_layout_iter_get_line_extents" (ref _PangoLayoutIter,ref _PangoRectangle,ref _PangoRectangle)
    clang proc     "pango_layout_iter_get_line_yrange" (ref _PangoLayoutIter,ref i32,ref i32)
    clang proc     "pango_layout_iter_get_layout_extents" (ref _PangoLayoutIter,ref _PangoRectangle,ref _PangoRectangle)
    clang function "pango_layout_iter_get_baseline"    (ref _PangoLayoutIter)i32
    clang function "cairo_version"                     ()i32
    clang function "cairo_version_string"              ()ref i8
    record _cairo =
        var int dummy    !empty record
    end

    record _cairo_surface =
        var int dummy    !empty record
    end

    record _cairo_device =
        var int dummy    !empty record
    end

    record _cairo_matrix =
        var r64 xx
        var r64 yx
        var r64 xy
        var r64 yy
        var r64 x0
        var r64 y0
    end

    record _cairo_pattern =
        var int dummy    !empty record
    end

    record _cairo_user_data_key =
        var i32 unused
    end

    const CAIRO_STATUS_SUCCESS               = 0
    const CAIRO_STATUS_NO_MEMORY             = 1
    const CAIRO_STATUS_INVALID_RESTORE       = 2
    const CAIRO_STATUS_INVALID_POP_GROUP     = 3
    const CAIRO_STATUS_NO_CURRENT_POINT      = 4
    const CAIRO_STATUS_INVALID_MATRIX        = 5
    const CAIRO_STATUS_INVALID_STATUS        = 6
    const CAIRO_STATUS_NULL_POINTER          = 7
    const CAIRO_STATUS_INVALID_STRING        = 8
    const CAIRO_STATUS_INVALID_PATH_DATA     = 9
    const CAIRO_STATUS_READ_ERROR            = 10
    const CAIRO_STATUS_WRITE_ERROR           = 11
    const CAIRO_STATUS_SURFACE_FINISHED      = 12
    const CAIRO_STATUS_SURFACE_TYPE_MISMATCH = 13
    const CAIRO_STATUS_PATTERN_TYPE_MISMATCH = 14
    const CAIRO_STATUS_INVALID_CONTENT       = 15
    const CAIRO_STATUS_INVALID_FORMAT        = 16
    const CAIRO_STATUS_INVALID_VISUAL        = 17
    const CAIRO_STATUS_FILE_NOT_FOUND        = 18
    const CAIRO_STATUS_INVALID_DASH          = 19
    const CAIRO_STATUS_INVALID_DSC_COMMENT   = 20
    const CAIRO_STATUS_INVALID_INDEX         = 21
    const CAIRO_STATUS_CLIP_NOT_REPRESENTABLE = 22
    const CAIRO_STATUS_TEMP_FILE_ERROR       = 23
    const CAIRO_STATUS_INVALID_STRIDE        = 24
    const CAIRO_STATUS_FONT_TYPE_MISMATCH    = 25
    const CAIRO_STATUS_USER_FONT_IMMUTABLE   = 26
    const CAIRO_STATUS_USER_FONT_ERROR       = 27
    const CAIRO_STATUS_NEGATIVE_COUNT        = 28
    const CAIRO_STATUS_INVALID_CLUSTERS      = 29
    const CAIRO_STATUS_INVALID_SLANT         = 30
    const CAIRO_STATUS_INVALID_WEIGHT        = 31
    const CAIRO_STATUS_INVALID_SIZE          = 32
    const CAIRO_STATUS_USER_FONT_NOT_IMPLEMENTED = 33
    const CAIRO_STATUS_DEVICE_TYPE_MISMATCH  = 34
    const CAIRO_STATUS_DEVICE_ERROR          = 35
    const CAIRO_STATUS_LAST_STATUS           = 36
    const CAIRO_CONTENT_COLOR                = 4096
    const CAIRO_CONTENT_ALPHA                = 8192
    const CAIRO_CONTENT_COLOR_ALPHA          = 12288
    clang function "cairo_create"                      (ref _cairo_surface)ref _cairo
    clang function "cairo_reference"                   (ref _cairo)ref _cairo
    clang proc     "cairo_destroy"                     (ref _cairo)
    clang function "cairo_get_reference_count"         (ref _cairo)u32
    clang function "cairo_get_user_data"               (ref _cairo,ref _cairo_user_data_key)ref void
    clang function "cairo_set_user_data"               (ref _cairo,ref _cairo_user_data_key,ref void,ref clang proc(ref void))i32
    clang proc     "cairo_save"                        (ref _cairo)
    clang proc     "cairo_restore"                     (ref _cairo)
    clang proc     "cairo_push_group"                  (ref _cairo)
    clang proc     "cairo_push_group_with_content"     (ref _cairo,i32)
    clang function "cairo_pop_group"                   (ref _cairo)ref _cairo_pattern
    clang proc     "cairo_pop_group_to_source"         (ref _cairo)
    const CAIRO_OPERATOR_CLEAR               = 0
    const CAIRO_OPERATOR_SOURCE              = 1
    const CAIRO_OPERATOR_OVER                = 2
    const CAIRO_OPERATOR_IN                  = 3
    const CAIRO_OPERATOR_OUT                 = 4
    const CAIRO_OPERATOR_ATOP                = 5
    const CAIRO_OPERATOR_DEST                = 6
    const CAIRO_OPERATOR_DEST_OVER           = 7
    const CAIRO_OPERATOR_DEST_IN             = 8
    const CAIRO_OPERATOR_DEST_OUT            = 9
    const CAIRO_OPERATOR_DEST_ATOP           = 10
    const CAIRO_OPERATOR_XOR                 = 11
    const CAIRO_OPERATOR_ADD                 = 12
    const CAIRO_OPERATOR_SATURATE            = 13
    const CAIRO_OPERATOR_MULTIPLY            = 14
    const CAIRO_OPERATOR_SCREEN              = 15
    const CAIRO_OPERATOR_OVERLAY             = 16
    const CAIRO_OPERATOR_DARKEN              = 17
    const CAIRO_OPERATOR_LIGHTEN             = 18
    const CAIRO_OPERATOR_COLOR_DODGE         = 19
    const CAIRO_OPERATOR_COLOR_BURN          = 20
    const CAIRO_OPERATOR_HARD_LIGHT          = 21
    const CAIRO_OPERATOR_SOFT_LIGHT          = 22
    const CAIRO_OPERATOR_DIFFERENCE          = 23
    const CAIRO_OPERATOR_EXCLUSION           = 24
    const CAIRO_OPERATOR_HSL_HUE             = 25
    const CAIRO_OPERATOR_HSL_SATURATION      = 26
    const CAIRO_OPERATOR_HSL_COLOR           = 27
    const CAIRO_OPERATOR_HSL_LUMINOSITY      = 28
    clang proc     "cairo_set_operator"                (ref _cairo,i32)
    clang proc     "cairo_set_source"                  (ref _cairo,ref _cairo_pattern)
    clang proc     "cairo_set_source_rgb"              (ref _cairo,r64,r64,r64)
    clang proc     "cairo_set_source_rgba"             (ref _cairo,r64,r64,r64,r64)
    clang proc     "cairo_set_source_surface"          (ref _cairo,ref _cairo_surface,r64,r64)
    clang proc     "cairo_set_tolerance"               (ref _cairo,r64)
    const CAIRO_ANTIALIAS_DEFAULT            = 0
    const CAIRO_ANTIALIAS_NONE               = 1
    const CAIRO_ANTIALIAS_GRAY               = 2
    const CAIRO_ANTIALIAS_SUBPIXEL           = 3
    clang proc     "cairo_set_antialias"               (ref _cairo,i32)
    const CAIRO_FILL_RULE_WINDING            = 0
    const CAIRO_FILL_RULE_EVEN_ODD           = 1
    clang proc     "cairo_set_fill_rule"               (ref _cairo,i32)
    clang proc     "cairo_set_line_width"              (ref _cairo,r64)
    const CAIRO_LINE_CAP_BUTT                = 0
    const CAIRO_LINE_CAP_ROUND               = 1
    const CAIRO_LINE_CAP_SQUARE              = 2
    clang proc     "cairo_set_line_cap"                (ref _cairo,i32)
    const CAIRO_LINE_JOIN_MITER              = 0
    const CAIRO_LINE_JOIN_ROUND              = 1
    const CAIRO_LINE_JOIN_BEVEL              = 2
    clang proc     "cairo_set_line_join"               (ref _cairo,i32)
    clang proc     "cairo_set_dash"                    (ref _cairo,ref r64,i32,r64)
    clang proc     "cairo_set_miter_limit"             (ref _cairo,r64)
    clang proc     "cairo_translate"                   (ref _cairo,r64,r64)
    clang proc     "cairo_scale"                       (ref _cairo,r64,r64)
    clang proc     "cairo_rotate"                      (ref _cairo,r64)
    clang proc     "cairo_transform"                   (ref _cairo,ref _cairo_matrix)
    clang proc     "cairo_set_matrix"                  (ref _cairo,ref _cairo_matrix)
    clang proc     "cairo_identity_matrix"             (ref _cairo)
    clang proc     "cairo_user_to_device"              (ref _cairo,ref r64,ref r64)
    clang proc     "cairo_user_to_device_distance"     (ref _cairo,ref r64,ref r64)
    clang proc     "cairo_device_to_user"              (ref _cairo,ref r64,ref r64)
    clang proc     "cairo_device_to_user_distance"     (ref _cairo,ref r64,ref r64)
    clang proc     "cairo_new_path"                    (ref _cairo)
    clang proc     "cairo_move_to"                     (ref _cairo,r64,r64)
    clang proc     "cairo_new_sub_path"                (ref _cairo)
    clang proc     "cairo_line_to"                     (ref _cairo,r64,r64)
    clang proc     "cairo_curve_to"                    (ref _cairo,r64,r64,r64,r64,r64,r64)
    clang proc     "cairo_arc"                         (ref _cairo,r64,r64,r64,r64,r64)
    clang proc     "cairo_arc_negative"                (ref _cairo,r64,r64,r64,r64,r64)
    clang proc     "cairo_rel_move_to"                 (ref _cairo,r64,r64)
    clang proc     "cairo_rel_line_to"                 (ref _cairo,r64,r64)
    clang proc     "cairo_rel_curve_to"                (ref _cairo,r64,r64,r64,r64,r64,r64)
    clang proc     "cairo_rectangle"                   (ref _cairo,r64,r64,r64,r64)
    clang proc     "cairo_close_path"                  (ref _cairo)
    clang proc     "cairo_path_extents"                (ref _cairo,ref r64,ref r64,ref r64,ref r64)
    clang proc     "cairo_paint"                       (ref _cairo)
    clang proc     "cairo_paint_with_alpha"            (ref _cairo,r64)
    clang proc     "cairo_mask"                        (ref _cairo,ref _cairo_pattern)
    clang proc     "cairo_mask_surface"                (ref _cairo,ref _cairo_surface,r64,r64)
    clang proc     "cairo_stroke"                      (ref _cairo)
    clang proc     "cairo_stroke_preserve"             (ref _cairo)
    clang proc     "cairo_fill"                        (ref _cairo)
    clang proc     "cairo_fill_preserve"               (ref _cairo)
    clang proc     "cairo_copy_page"                   (ref _cairo)
    clang proc     "cairo_show_page"                   (ref _cairo)
    clang function "cairo_in_stroke"                   (ref _cairo,r64,r64)i32
    clang function "cairo_in_fill"                     (ref _cairo,r64,r64)i32
    clang function "cairo_in_clip"                     (ref _cairo,r64,r64)i32
    clang proc     "cairo_stroke_extents"              (ref _cairo,ref r64,ref r64,ref r64,ref r64)
    clang proc     "cairo_fill_extents"                (ref _cairo,ref r64,ref r64,ref r64,ref r64)
    clang proc     "cairo_reset_clip"                  (ref _cairo)
    clang proc     "cairo_clip"                        (ref _cairo)
    clang proc     "cairo_clip_preserve"               (ref _cairo)
    clang proc     "cairo_clip_extents"                (ref _cairo,ref r64,ref r64,ref r64,ref r64)
    record _cairo_rectangle =
        var r64 x
        var r64 y
        var r64 width
        var r64 height
    end

    record _cairo_rectangle_list =
        var i32 status
        var ref _cairo_rectangle rectangles
        var i32 num_rectangles
    end

    clang function "cairo_copy_clip_rectangle_list"    (ref _cairo)ref _cairo_rectangle_list
    clang proc     "cairo_rectangle_list_destroy"      (ref _cairo_rectangle_list)
    record _cairo_scaled_font =
        var int dummy    !empty record
    end

    record _cairo_font_face =
        var int dummy    !empty record
    end

    record $T12 =
        var u32 index
        var r64 x
        var r64 y
    end

    clang function "cairo_glyph_allocate"              (i32)ref $T12
    clang proc     "cairo_glyph_free"                  (ref $T12)
    record $T13 =
        var i32 num_bytes
        var i32 num_glyphs
    end

    clang function "cairo_text_cluster_allocate"       (i32)ref $T13
    clang proc     "cairo_text_cluster_free"           (ref $T13)
    const CAIRO_TEXT_CLUSTER_FLAG_BACKWARD   = 1
    record $T14 =
        var r64 x_bearing
        var r64 y_bearing
        var r64 width
        var r64 height
        var r64 x_advance
        var r64 y_advance
    end

    record $T15 =
        var r64 ascent
        var r64 descent
        var r64 height
        var r64 max_x_advance
        var r64 max_y_advance
    end

    const CAIRO_FONT_SLANT_NORMAL            = 0
    const CAIRO_FONT_SLANT_ITALIC            = 1
    const CAIRO_FONT_SLANT_OBLIQUE           = 2
    const CAIRO_FONT_WEIGHT_NORMAL           = 0
    const CAIRO_FONT_WEIGHT_BOLD             = 1
    const CAIRO_SUBPIXEL_ORDER_DEFAULT       = 0
    const CAIRO_SUBPIXEL_ORDER_RGB           = 1
    const CAIRO_SUBPIXEL_ORDER_BGR           = 2
    const CAIRO_SUBPIXEL_ORDER_VRGB          = 3
    const CAIRO_SUBPIXEL_ORDER_VBGR          = 4
    const CAIRO_HINT_STYLE_DEFAULT           = 0
    const CAIRO_HINT_STYLE_NONE              = 1
    const CAIRO_HINT_STYLE_SLIGHT            = 2
    const CAIRO_HINT_STYLE_MEDIUM            = 3
    const CAIRO_HINT_STYLE_FULL              = 4
    const CAIRO_HINT_METRICS_DEFAULT         = 0
    const CAIRO_HINT_METRICS_OFF             = 1
    const CAIRO_HINT_METRICS_ON              = 2
    record _cairo_font_options =
        var int dummy    !empty record
    end

    clang function "cairo_font_options_create"         ()ref _cairo_font_options
    clang function "cairo_font_options_copy"           (ref _cairo_font_options)ref _cairo_font_options
    clang proc     "cairo_font_options_destroy"        (ref _cairo_font_options)
    clang function "cairo_font_options_status"         (ref _cairo_font_options)i32
    clang proc     "cairo_font_options_merge"          (ref _cairo_font_options,ref _cairo_font_options)
    clang function "cairo_font_options_equal"          (ref _cairo_font_options,ref _cairo_font_options)i32
    clang function "cairo_font_options_hash"           (ref _cairo_font_options)u32
    clang proc     "cairo_font_options_set_antialias"  (ref _cairo_font_options,i32)
    clang function "cairo_font_options_get_antialias"  (ref _cairo_font_options)i32
    clang proc     "cairo_font_options_set_subpixel_order" (ref _cairo_font_options,i32)
    clang function "cairo_font_options_get_subpixel_order" (ref _cairo_font_options)i32
    clang proc     "cairo_font_options_set_hint_style" (ref _cairo_font_options,i32)
    clang function "cairo_font_options_get_hint_style" (ref _cairo_font_options)i32
    clang proc     "cairo_font_options_set_hint_metrics" (ref _cairo_font_options,i32)
    clang function "cairo_font_options_get_hint_metrics" (ref _cairo_font_options)i32
    clang proc     "cairo_select_font_face"            (ref _cairo,ref i8,i32,i32)
    clang proc     "cairo_set_font_size"               (ref _cairo,r64)
    clang proc     "cairo_set_font_matrix"             (ref _cairo,ref _cairo_matrix)
    clang proc     "cairo_get_font_matrix"             (ref _cairo,ref _cairo_matrix)
    clang proc     "cairo_set_font_options"            (ref _cairo,ref _cairo_font_options)
    clang proc     "cairo_get_font_options"            (ref _cairo,ref _cairo_font_options)
    clang proc     "cairo_set_font_face"               (ref _cairo,ref _cairo_font_face)
    clang function "cairo_get_font_face"               (ref _cairo)ref _cairo_font_face
    clang proc     "cairo_set_scaled_font"             (ref _cairo,ref _cairo_scaled_font)
    clang function "cairo_get_scaled_font"             (ref _cairo)ref _cairo_scaled_font
    clang proc     "cairo_show_text"                   (ref _cairo,ref i8)
    clang proc     "cairo_show_glyphs"                 (ref _cairo,ref $T12,i32)
    clang proc     "cairo_show_text_glyphs"            (ref _cairo,ref i8,i32,ref $T12,i32,ref $T13,i32,i32)
    clang proc     "cairo_text_path"                   (ref _cairo,ref i8)
    clang proc     "cairo_glyph_path"                  (ref _cairo,ref $T12,i32)
    clang proc     "cairo_text_extents"                (ref _cairo,ref i8,ref $T14)
    clang proc     "cairo_glyph_extents"               (ref _cairo,ref $T12,i32,ref $T14)
    clang proc     "cairo_font_extents"                (ref _cairo,ref $T15)
    clang function "cairo_font_face_reference"         (ref _cairo_font_face)ref _cairo_font_face
    clang proc     "cairo_font_face_destroy"           (ref _cairo_font_face)
    clang function "cairo_font_face_get_reference_count" (ref _cairo_font_face)u32
    clang function "cairo_font_face_status"            (ref _cairo_font_face)i32
    const CAIRO_FONT_TYPE_TOY                = 0
    const CAIRO_FONT_TYPE_FT                 = 1
    const CAIRO_FONT_TYPE_WIN32              = 2
    const CAIRO_FONT_TYPE_QUARTZ             = 3
    const CAIRO_FONT_TYPE_USER               = 4
    clang function "cairo_font_face_get_type"          (ref _cairo_font_face)i32
    clang function "cairo_font_face_get_user_data"     (ref _cairo_font_face,ref _cairo_user_data_key)ref void
    clang function "cairo_font_face_set_user_data"     (ref _cairo_font_face,ref _cairo_user_data_key,ref void,ref clang proc(ref void))i32
    clang function "cairo_scaled_font_create"          (ref _cairo_font_face,ref _cairo_matrix,ref _cairo_matrix,ref _cairo_font_options)ref _cairo_scaled_font
    clang function "cairo_scaled_font_reference"       (ref _cairo_scaled_font)ref _cairo_scaled_font
    clang proc     "cairo_scaled_font_destroy"         (ref _cairo_scaled_font)
    clang function "cairo_scaled_font_get_reference_count" (ref _cairo_scaled_font)u32
    clang function "cairo_scaled_font_status"          (ref _cairo_scaled_font)i32
    clang function "cairo_scaled_font_get_type"        (ref _cairo_scaled_font)i32
    clang function "cairo_scaled_font_get_user_data"   (ref _cairo_scaled_font,ref _cairo_user_data_key)ref void
    clang function "cairo_scaled_font_set_user_data"   (ref _cairo_scaled_font,ref _cairo_user_data_key,ref void,ref clang proc(ref void))i32
    clang proc     "cairo_scaled_font_extents"         (ref _cairo_scaled_font,ref $T15)
    clang proc     "cairo_scaled_font_text_extents"    (ref _cairo_scaled_font,ref i8,ref $T14)
    clang proc     "cairo_scaled_font_glyph_extents"   (ref _cairo_scaled_font,ref $T12,i32,ref $T14)
    clang function "cairo_scaled_font_text_to_glyphs"  (ref _cairo_scaled_font,r64,r64,ref i8,i32,ref ref $T12,ref i32,ref ref $T13,ref i32,ref i32)i32
    clang function "cairo_scaled_font_get_font_face"   (ref _cairo_scaled_font)ref _cairo_font_face
    clang proc     "cairo_scaled_font_get_font_matrix" (ref _cairo_scaled_font,ref _cairo_matrix)
    clang proc     "cairo_scaled_font_get_ctm"         (ref _cairo_scaled_font,ref _cairo_matrix)
    clang proc     "cairo_scaled_font_get_scale_matrix" (ref _cairo_scaled_font,ref _cairo_matrix)
    clang proc     "cairo_scaled_font_get_font_options" (ref _cairo_scaled_font,ref _cairo_font_options)
    clang function "cairo_toy_font_face_create"        (ref i8,i32,i32)ref _cairo_font_face
    clang function "cairo_toy_font_face_get_family"    (ref _cairo_font_face)ref i8
    clang function "cairo_toy_font_face_get_slant"     (ref _cairo_font_face)i32
    clang function "cairo_toy_font_face_get_weight"    (ref _cairo_font_face)i32
    clang function "cairo_user_font_face_create"       ()ref _cairo_font_face
    clang proc     "cairo_user_font_face_set_init_func" (ref _cairo_font_face,ref clang function(ref _cairo_scaled_font,ref _cairo,ref $T15)i32)
    clang proc     "cairo_user_font_face_set_render_glyph_func" (ref _cairo_font_face,ref clang function(ref _cairo_scaled_font,u32,ref _cairo,ref $T14)i32)
    clang proc     "cairo_user_font_face_set_text_to_glyphs_func" (ref _cairo_font_face,ref clang function(ref _cairo_scaled_font,ref i8,i32,ref ref $T12,ref i32,ref ref $T13,ref i32,ref i32)i32)
    clang proc     "cairo_user_font_face_set_unicode_to_glyph_func" (ref _cairo_font_face,ref clang function(ref _cairo_scaled_font,u32,ref u32)i32)
    clang function "cairo_user_font_face_get_init_func" (ref _cairo_font_face)ref clang function(ref _cairo_scaled_font,ref _cairo,ref $T15)i32
    clang function "cairo_user_font_face_get_render_glyph_func" (ref _cairo_font_face)ref clang function(ref _cairo_scaled_font,u32,ref _cairo,ref $T14)i32
    clang function "cairo_user_font_face_get_text_to_glyphs_func" (ref _cairo_font_face)ref clang function(ref _cairo_scaled_font,ref i8,i32,ref ref $T12,ref i32,ref ref $T13,ref i32,ref i32)i32
    clang function "cairo_user_font_face_get_unicode_to_glyph_func" (ref _cairo_font_face)ref clang function(ref _cairo_scaled_font,u32,ref u32)i32
    clang function "cairo_get_operator"                (ref _cairo)i32
    clang function "cairo_get_source"                  (ref _cairo)ref _cairo_pattern
    clang function "cairo_get_tolerance"               (ref _cairo)r64
    clang function "cairo_get_antialias"               (ref _cairo)i32
    clang function "cairo_has_current_point"           (ref _cairo)i32
    clang proc     "cairo_get_current_point"           (ref _cairo,ref r64,ref r64)
    clang function "cairo_get_fill_rule"               (ref _cairo)i32
    clang function "cairo_get_line_width"              (ref _cairo)r64
    clang function "cairo_get_line_cap"                (ref _cairo)i32
    clang function "cairo_get_line_join"               (ref _cairo)i32
    clang function "cairo_get_miter_limit"             (ref _cairo)r64
    clang function "cairo_get_dash_count"              (ref _cairo)i32
    clang proc     "cairo_get_dash"                    (ref _cairo,ref r64,ref r64)
    clang proc     "cairo_get_matrix"                  (ref _cairo,ref _cairo_matrix)
    clang function "cairo_get_target"                  (ref _cairo)ref _cairo_surface
    clang function "cairo_get_group_target"            (ref _cairo)ref _cairo_surface
    const CAIRO_PATH_MOVE_TO                 = 0
    const CAIRO_PATH_LINE_TO                 = 1
    const CAIRO_PATH_CURVE_TO                = 2
    const CAIRO_PATH_CLOSE_PATH              = 3
    record _cairo_path_data_t =
        var $T16 header
        var $T17 point
    end

    record $T16 =
        var i32 type$
        var i32 length
    end

    record $T17 =
        var r64 x
        var r64 y
    end

    record cairo_path =
        var i32 status
        var ref _cairo_path_data_t data
        var i32 num_data
    end

    clang function "cairo_copy_path"                   (ref _cairo)ref cairo_path
    clang function "cairo_copy_path_flat"              (ref _cairo)ref cairo_path
    clang proc     "cairo_append_path"                 (ref _cairo,ref cairo_path)
    clang proc     "cairo_path_destroy"                (ref cairo_path)
    clang function "cairo_status"                      (ref _cairo)i32
    clang function "cairo_status_to_string"            (i32)ref i8
    clang function "cairo_device_reference"            (ref _cairo_device)ref _cairo_device
    const CAIRO_DEVICE_TYPE_DRM              = 0
    const CAIRO_DEVICE_TYPE_GL               = 1
    const CAIRO_DEVICE_TYPE_SCRIPT           = 2
    const CAIRO_DEVICE_TYPE_XCB              = 3
    const CAIRO_DEVICE_TYPE_XLIB             = 4
    const CAIRO_DEVICE_TYPE_XML              = 5
    clang function "cairo_device_get_type"             (ref _cairo_device)i32
    clang function "cairo_device_status"               (ref _cairo_device)i32
    clang function "cairo_device_acquire"              (ref _cairo_device)i32
    clang proc     "cairo_device_release"              (ref _cairo_device)
    clang proc     "cairo_device_flush"                (ref _cairo_device)
    clang proc     "cairo_device_finish"               (ref _cairo_device)
    clang proc     "cairo_device_destroy"              (ref _cairo_device)
    clang function "cairo_device_get_reference_count"  (ref _cairo_device)u32
    clang function "cairo_device_get_user_data"        (ref _cairo_device,ref _cairo_user_data_key)ref void
    clang function "cairo_device_set_user_data"        (ref _cairo_device,ref _cairo_user_data_key,ref void,ref clang proc(ref void))i32
    clang function "cairo_surface_create_similar"      (ref _cairo_surface,i32,i32,i32)ref _cairo_surface
    clang function "cairo_surface_create_for_rectangle" (ref _cairo_surface,r64,r64,r64,r64)ref _cairo_surface
    clang function "cairo_surface_reference"           (ref _cairo_surface)ref _cairo_surface
    clang proc     "cairo_surface_finish"              (ref _cairo_surface)
    clang proc     "cairo_surface_destroy"             (ref _cairo_surface)
    clang function "cairo_surface_get_device"          (ref _cairo_surface)ref _cairo_device
    clang function "cairo_surface_get_reference_count" (ref _cairo_surface)u32
    clang function "cairo_surface_status"              (ref _cairo_surface)i32
    const CAIRO_SURFACE_TYPE_IMAGE           = 0
    const CAIRO_SURFACE_TYPE_PDF             = 1
    const CAIRO_SURFACE_TYPE_PS              = 2
    const CAIRO_SURFACE_TYPE_XLIB            = 3
    const CAIRO_SURFACE_TYPE_XCB             = 4
    const CAIRO_SURFACE_TYPE_GLITZ           = 5
    const CAIRO_SURFACE_TYPE_QUARTZ          = 6
    const CAIRO_SURFACE_TYPE_WIN32           = 7
    const CAIRO_SURFACE_TYPE_BEOS            = 8
    const CAIRO_SURFACE_TYPE_DIRECTFB        = 9
    const CAIRO_SURFACE_TYPE_SVG             = 10
    const CAIRO_SURFACE_TYPE_OS2             = 11
    const CAIRO_SURFACE_TYPE_WIN32_PRINTING  = 12
    const CAIRO_SURFACE_TYPE_QUARTZ_IMAGE    = 13
    const CAIRO_SURFACE_TYPE_SCRIPT          = 14
    const CAIRO_SURFACE_TYPE_QT              = 15
    const CAIRO_SURFACE_TYPE_RECORDING       = 16
    const CAIRO_SURFACE_TYPE_VG              = 17
    const CAIRO_SURFACE_TYPE_GL              = 18
    const CAIRO_SURFACE_TYPE_DRM             = 19
    const CAIRO_SURFACE_TYPE_TEE             = 20
    const CAIRO_SURFACE_TYPE_XML             = 21
    const CAIRO_SURFACE_TYPE_SKIA            = 22
    const CAIRO_SURFACE_TYPE_SUBSURFACE      = 23
    clang function "cairo_surface_get_type"            (ref _cairo_surface)i32
    clang function "cairo_surface_get_content"         (ref _cairo_surface)i32
    clang function "cairo_surface_write_to_png"        (ref _cairo_surface,ref i8)i32
    clang function "cairo_surface_write_to_png_stream" (ref _cairo_surface,ref clang function(ref void,ref byte,u32)i32,ref void)i32
    clang function "cairo_surface_get_user_data"       (ref _cairo_surface,ref _cairo_user_data_key)ref void
    clang function "cairo_surface_set_user_data"       (ref _cairo_surface,ref _cairo_user_data_key,ref void,ref clang proc(ref void))i32
    clang proc     "cairo_surface_get_mime_data"       (ref _cairo_surface,ref i8,ref ref byte,ref u32)
    clang function "cairo_surface_set_mime_data"       (ref _cairo_surface,ref i8,ref byte,u32,ref clang proc(ref void),ref void)i32
    clang proc     "cairo_surface_get_font_options"    (ref _cairo_surface,ref _cairo_font_options)
    clang proc     "cairo_surface_flush"               (ref _cairo_surface)
    clang proc     "cairo_surface_mark_dirty"          (ref _cairo_surface)
    clang proc     "cairo_surface_mark_dirty_rectangle" (ref _cairo_surface,i32,i32,i32,i32)
    clang proc     "cairo_surface_set_device_offset"   (ref _cairo_surface,r64,r64)
    clang proc     "cairo_surface_get_device_offset"   (ref _cairo_surface,ref r64,ref r64)
    clang proc     "cairo_surface_set_fallback_resolution" (ref _cairo_surface,r64,r64)
    clang proc     "cairo_surface_get_fallback_resolution" (ref _cairo_surface,ref r64,ref r64)
    clang proc     "cairo_surface_copy_page"           (ref _cairo_surface)
    clang proc     "cairo_surface_show_page"           (ref _cairo_surface)
    clang function "cairo_surface_has_show_text_glyphs" (ref _cairo_surface)i32
    const CAIRO_FORMAT_INVALID               = -1
    const CAIRO_FORMAT_ARGB32                = 0
    const CAIRO_FORMAT_RGB24                 = 1
    const CAIRO_FORMAT_A8                    = 2
    const CAIRO_FORMAT_A1                    = 3
    const CAIRO_FORMAT_RGB16_565             = 4
    clang function "cairo_image_surface_create"        (i32,i32,i32)ref _cairo_surface
    clang function "cairo_format_stride_for_width"     (i32,i32)i32
    clang function "cairo_image_surface_create_for_data" (ref byte,i32,i32,i32,i32)ref _cairo_surface
    clang function "cairo_image_surface_get_data"      (ref _cairo_surface)ref byte
    clang function "cairo_image_surface_get_format"    (ref _cairo_surface)i32
    clang function "cairo_image_surface_get_width"     (ref _cairo_surface)i32
    clang function "cairo_image_surface_get_height"    (ref _cairo_surface)i32
    clang function "cairo_image_surface_get_stride"    (ref _cairo_surface)i32
    clang function "cairo_image_surface_create_from_png" (ref i8)ref _cairo_surface
    clang function "cairo_image_surface_create_from_png_stream" (ref clang function(ref void,ref byte,u32)i32,ref void)ref _cairo_surface
    clang function "cairo_recording_surface_create"    (i32,ref _cairo_rectangle)ref _cairo_surface
    clang proc     "cairo_recording_surface_ink_extents" (ref _cairo_surface,ref r64,ref r64,ref r64,ref r64)
    clang function "cairo_pattern_create_rgb"          (r64,r64,r64)ref _cairo_pattern
    clang function "cairo_pattern_create_rgba"         (r64,r64,r64,r64)ref _cairo_pattern
    clang function "cairo_pattern_create_for_surface"  (ref _cairo_surface)ref _cairo_pattern
    clang function "cairo_pattern_create_linear"       (r64,r64,r64,r64)ref _cairo_pattern
    clang function "cairo_pattern_create_radial"       (r64,r64,r64,r64,r64,r64)ref _cairo_pattern
    clang function "cairo_pattern_reference"           (ref _cairo_pattern)ref _cairo_pattern
    clang proc     "cairo_pattern_destroy"             (ref _cairo_pattern)
    clang function "cairo_pattern_get_reference_count" (ref _cairo_pattern)u32
    clang function "cairo_pattern_status"              (ref _cairo_pattern)i32
    clang function "cairo_pattern_get_user_data"       (ref _cairo_pattern,ref _cairo_user_data_key)ref void
    clang function "cairo_pattern_set_user_data"       (ref _cairo_pattern,ref _cairo_user_data_key,ref void,ref clang proc(ref void))i32
    const CAIRO_PATTERN_TYPE_SOLID           = 0
    const CAIRO_PATTERN_TYPE_SURFACE         = 1
    const CAIRO_PATTERN_TYPE_LINEAR          = 2
    const CAIRO_PATTERN_TYPE_RADIAL          = 3
    clang function "cairo_pattern_get_type"            (ref _cairo_pattern)i32
    clang proc     "cairo_pattern_add_color_stop_rgb"  (ref _cairo_pattern,r64,r64,r64,r64)
    clang proc     "cairo_pattern_add_color_stop_rgba" (ref _cairo_pattern,r64,r64,r64,r64,r64)
    clang proc     "cairo_pattern_set_matrix"          (ref _cairo_pattern,ref _cairo_matrix)
    clang proc     "cairo_pattern_get_matrix"          (ref _cairo_pattern,ref _cairo_matrix)
    const CAIRO_EXTEND_NONE                  = 0
    const CAIRO_EXTEND_REPEAT                = 1
    const CAIRO_EXTEND_REFLECT               = 2
    const CAIRO_EXTEND_PAD                   = 3
    clang proc     "cairo_pattern_set_extend"          (ref _cairo_pattern,i32)
    clang function "cairo_pattern_get_extend"          (ref _cairo_pattern)i32
    const CAIRO_FILTER_FAST                  = 0
    const CAIRO_FILTER_GOOD                  = 1
    const CAIRO_FILTER_BEST                  = 2
    const CAIRO_FILTER_NEAREST               = 3
    const CAIRO_FILTER_BILINEAR              = 4
    const CAIRO_FILTER_GAUSSIAN              = 5
    clang proc     "cairo_pattern_set_filter"          (ref _cairo_pattern,i32)
    clang function "cairo_pattern_get_filter"          (ref _cairo_pattern)i32
    clang function "cairo_pattern_get_rgba"            (ref _cairo_pattern,ref r64,ref r64,ref r64,ref r64)i32
    clang function "cairo_pattern_get_surface"         (ref _cairo_pattern,ref ref _cairo_surface)i32
    clang function "cairo_pattern_get_color_stop_rgba" (ref _cairo_pattern,i32,ref r64,ref r64,ref r64,ref r64,ref r64)i32
    clang function "cairo_pattern_get_color_stop_count" (ref _cairo_pattern,ref i32)i32
    clang function "cairo_pattern_get_linear_points"   (ref _cairo_pattern,ref r64,ref r64,ref r64,ref r64)i32
    clang function "cairo_pattern_get_radial_circles"  (ref _cairo_pattern,ref r64,ref r64,ref r64,ref r64,ref r64,ref r64)i32
    clang proc     "cairo_matrix_init"                 (ref _cairo_matrix,r64,r64,r64,r64,r64,r64)
    clang proc     "cairo_matrix_init_identity"        (ref _cairo_matrix)
    clang proc     "cairo_matrix_init_translate"       (ref _cairo_matrix,r64,r64)
    clang proc     "cairo_matrix_init_scale"           (ref _cairo_matrix,r64,r64)
    clang proc     "cairo_matrix_init_rotate"          (ref _cairo_matrix,r64)
    clang proc     "cairo_matrix_translate"            (ref _cairo_matrix,r64,r64)
    clang proc     "cairo_matrix_scale"                (ref _cairo_matrix,r64,r64)
    clang proc     "cairo_matrix_rotate"               (ref _cairo_matrix,r64)
    clang function "cairo_matrix_invert"               (ref _cairo_matrix)i32
    clang proc     "cairo_matrix_multiply"             (ref _cairo_matrix,ref _cairo_matrix,ref _cairo_matrix)
    clang proc     "cairo_matrix_transform_distance"   (ref _cairo_matrix,ref r64,ref r64)
    clang proc     "cairo_matrix_transform_point"      (ref _cairo_matrix,ref r64,ref r64)
    record _cairo_region =
        var int dummy    !empty record
    end

    record _cairo_rectangle_int =
        var i32 x
        var i32 y
        var i32 width
        var i32 height
    end

    const CAIRO_REGION_OVERLAP_IN            = 0
    const CAIRO_REGION_OVERLAP_OUT           = 1
    const CAIRO_REGION_OVERLAP_PART          = 2
    clang function "cairo_region_create"               ()ref _cairo_region
    clang function "cairo_region_create_rectangle"     (ref _cairo_rectangle_int)ref _cairo_region
    clang function "cairo_region_create_rectangles"    (ref _cairo_rectangle_int,i32)ref _cairo_region
    clang function "cairo_region_copy"                 (ref _cairo_region)ref _cairo_region
    clang function "cairo_region_reference"            (ref _cairo_region)ref _cairo_region
    clang proc     "cairo_region_destroy"              (ref _cairo_region)
    clang function "cairo_region_equal"                (ref _cairo_region,ref _cairo_region)i32
    clang function "cairo_region_status"               (ref _cairo_region)i32
    clang proc     "cairo_region_get_extents"          (ref _cairo_region,ref _cairo_rectangle_int)
    clang function "cairo_region_num_rectangles"       (ref _cairo_region)i32
    clang proc     "cairo_region_get_rectangle"        (ref _cairo_region,i32,ref _cairo_rectangle_int)
    clang function "cairo_region_is_empty"             (ref _cairo_region)i32
    clang function "cairo_region_contains_rectangle"   (ref _cairo_region,ref _cairo_rectangle_int)i32
    clang function "cairo_region_contains_point"       (ref _cairo_region,i32,i32)i32
    clang proc     "cairo_region_translate"            (ref _cairo_region,i32,i32)
    clang function "cairo_region_subtract"             (ref _cairo_region,ref _cairo_region)i32
    clang function "cairo_region_subtract_rectangle"   (ref _cairo_region,ref _cairo_rectangle_int)i32
    clang function "cairo_region_intersect"            (ref _cairo_region,ref _cairo_region)i32
    clang function "cairo_region_intersect_rectangle"  (ref _cairo_region,ref _cairo_rectangle_int)i32
    clang function "cairo_region_union"                (ref _cairo_region,ref _cairo_region)i32
    clang function "cairo_region_union_rectangle"      (ref _cairo_region,ref _cairo_rectangle_int)i32
    clang function "cairo_region_xor"                  (ref _cairo_region,ref _cairo_region)i32
    clang function "cairo_region_xor_rectangle"        (ref _cairo_region,ref _cairo_rectangle_int)i32
    clang proc     "cairo_debug_reset_static_data"     ()
    record _GdkPoint =
        var i32 x
        var i32 y
    end

    record _GdkAtom =
        var int dummy    !empty record
    end

    record _GdkColor =
        var u32 pixel
        var u16 red
        var u16 green
        var u16 blue
    end

    record _GdkRGBA =
        var r64 red
        var r64 green
        var r64 blue
        var r64 alpha
    end

    record _GdkCursor =
        var int dummy    !empty record
    end

    record _GdkVisual =
        var int dummy    !empty record
    end

    record _GdkDevice =
        var int dummy    !empty record
    end

    record _GdkDragContext =
        var int dummy    !empty record
    end

    record _GdkDisplayManager =
        var int dummy    !empty record
    end

    record _GdkDeviceManager =
        var int dummy    !empty record
    end

    record _GdkDisplay =
        var int dummy    !empty record
    end

    record _GdkScreen =
        var int dummy    !empty record
    end

    record _GdkWindow =
        var int dummy    !empty record
    end

    record _GdkKeymap =
        var int dummy    !empty record
    end

    record _GdkAppLaunchContext =
        var int dummy    !empty record
    end

    const GDK_LSB_FIRST                      = 0
    const GDK_MSB_FIRST                      = 1
    const GDK_SHIFT_MASK                     = 1
    const GDK_LOCK_MASK                      = 2
    const GDK_CONTROL_MASK                   = 4
    const GDK_MOD1_MASK                      = 8
    const GDK_MOD2_MASK                      = 16
    const GDK_MOD3_MASK                      = 32
    const GDK_MOD4_MASK                      = 64
    const GDK_MOD5_MASK                      = 128
    const GDK_BUTTON1_MASK                   = 256
    const GDK_BUTTON2_MASK                   = 512
    const GDK_BUTTON3_MASK                   = 1024
    const GDK_BUTTON4_MASK                   = 2048
    const GDK_BUTTON5_MASK                   = 4096
    const GDK_MODIFIER_RESERVED_13_MASK      = 8192
    const GDK_MODIFIER_RESERVED_14_MASK      = 16384
    const GDK_MODIFIER_RESERVED_15_MASK      = 32768
    const GDK_MODIFIER_RESERVED_16_MASK      = 65536
    const GDK_MODIFIER_RESERVED_17_MASK      = 131072
    const GDK_MODIFIER_RESERVED_18_MASK      = 262144
    const GDK_MODIFIER_RESERVED_19_MASK      = 524288
    const GDK_MODIFIER_RESERVED_20_MASK      = 1048576
    const GDK_MODIFIER_RESERVED_21_MASK      = 2097152
    const GDK_MODIFIER_RESERVED_22_MASK      = 4194304
    const GDK_MODIFIER_RESERVED_23_MASK      = 8388608
    const GDK_MODIFIER_RESERVED_24_MASK      = 16777216
    const GDK_MODIFIER_RESERVED_25_MASK      = 33554432
    const GDK_SUPER_MASK                     = 67108864
    const GDK_HYPER_MASK                     = 134217728
    const GDK_META_MASK                      = 268435456
    const GDK_MODIFIER_RESERVED_29_MASK      = 536870912
    const GDK_RELEASE_MASK                   = 1073741824
    const GDK_MODIFIER_MASK                  = 1543512063
    const GDK_MODIFIER_INTENT_PRIMARY_ACCELERATOR = 0
    const GDK_MODIFIER_INTENT_CONTEXT_MENU   = 1
    const GDK_MODIFIER_INTENT_EXTEND_SELECTION = 2
    const GDK_MODIFIER_INTENT_MODIFY_SELECTION = 3
    const GDK_MODIFIER_INTENT_NO_TEXT_INPUT  = 4
    const GDK_MODIFIER_INTENT_SHIFT_GROUP    = 5
    const GDK_OK                             = 0
    const GDK_ERROR                          = -1
    const GDK_ERROR_PARAM                    = -2
    const GDK_ERROR_FILE                     = -3
    const GDK_ERROR_MEM                      = -4
    const GDK_GRAB_SUCCESS                   = 0
    const GDK_GRAB_ALREADY_GRABBED           = 1
    const GDK_GRAB_INVALID_TIME              = 2
    const GDK_GRAB_NOT_VIEWABLE              = 3
    const GDK_GRAB_FROZEN                    = 4
    const GDK_OWNERSHIP_NONE                 = 0
    const GDK_OWNERSHIP_WINDOW               = 1
    const GDK_OWNERSHIP_APPLICATION          = 2
    const GDK_EXPOSURE_MASK                  = 2
    const GDK_POINTER_MOTION_MASK            = 4
    const GDK_POINTER_MOTION_HINT_MASK       = 8
    const GDK_BUTTON_MOTION_MASK             = 16
    const GDK_BUTTON1_MOTION_MASK            = 32
    const GDK_BUTTON2_MOTION_MASK            = 64
    const GDK_BUTTON3_MOTION_MASK            = 128
    const GDK_BUTTON_PRESS_MASK              = 256
    const GDK_BUTTON_RELEASE_MASK            = 512
    const GDK_KEY_PRESS_MASK                 = 1024
    const GDK_KEY_RELEASE_MASK               = 2048
    const GDK_ENTER_NOTIFY_MASK              = 4096
    const GDK_LEAVE_NOTIFY_MASK              = 8192
    const GDK_FOCUS_CHANGE_MASK              = 16384
    const GDK_STRUCTURE_MASK                 = 32768
    const GDK_PROPERTY_CHANGE_MASK           = 65536
    const GDK_VISIBILITY_NOTIFY_MASK         = 131072
    const GDK_PROXIMITY_IN_MASK              = 262144
    const GDK_PROXIMITY_OUT_MASK             = 524288
    const GDK_SUBSTRUCTURE_MASK              = 1048576
    const GDK_SCROLL_MASK                    = 2097152
    const GDK_TOUCH_MASK                     = 4194304
    const GDK_SMOOTH_SCROLL_MASK             = 8388608
    const GDK_ALL_EVENTS_MASK                = 16777214
    record _GdkTimeCoord =
        var u32 _time64
        var [128]r64 axes
    end

    const GDK_SOURCE_MOUSE                   = 0
    const GDK_SOURCE_PEN                     = 1
    const GDK_SOURCE_ERASER                  = 2
    const GDK_SOURCE_CURSOR                  = 3
    const GDK_SOURCE_KEYBOARD                = 4
    const GDK_SOURCE_TOUCHSCREEN             = 5
    const GDK_SOURCE_TOUCHPAD                = 6
    const GDK_MODE_DISABLED                  = 0
    const GDK_MODE_SCREEN                    = 1
    const GDK_MODE_WINDOW                    = 2
    const GDK_AXIS_IGNORE                    = 0
    const GDK_AXIS_X                         = 1
    const GDK_AXIS_Y                         = 2
    const GDK_AXIS_PRESSURE                  = 3
    const GDK_AXIS_XTILT                     = 4
    const GDK_AXIS_YTILT                     = 5
    const GDK_AXIS_WHEEL                     = 6
    const GDK_AXIS_LAST                      = 7
    const GDK_DEVICE_TYPE_MASTER             = 0
    const GDK_DEVICE_TYPE_SLAVE              = 1
    const GDK_DEVICE_TYPE_FLOATING           = 2
    clang function "gdk_device_get_type"               ()u64
    clang function "gdk_device_get_name"               (ref _GdkDevice)ref i8
    clang function "gdk_device_get_has_cursor"         (ref _GdkDevice)i32
    clang function "gdk_device_get_source"             (ref _GdkDevice)i32
    clang function "gdk_device_get_mode"               (ref _GdkDevice)i32
    clang function "gdk_device_set_mode"               (ref _GdkDevice,i32)i32
    clang function "gdk_device_get_n_keys"             (ref _GdkDevice)i32
    clang function "gdk_device_get_key"                (ref _GdkDevice,u32,ref u32,ref i32)i32
    clang proc     "gdk_device_set_key"                (ref _GdkDevice,u32,u32,i32)
    clang function "gdk_device_get_axis_use"           (ref _GdkDevice,u32)i32
    clang proc     "gdk_device_set_axis_use"           (ref _GdkDevice,u32,i32)
    clang proc     "gdk_device_get_state"              (ref _GdkDevice,ref _GdkWindow,ref r64,ref i32)
    clang proc     "gdk_device_get_position"           (ref _GdkDevice,ref ref _GdkScreen,ref i32,ref i32)
    clang function "gdk_device_get_window_at_position" (ref _GdkDevice,ref i32,ref i32)ref _GdkWindow
    clang function "gdk_device_get_history"            (ref _GdkDevice,ref _GdkWindow,u32,u32,ref ref ref _GdkTimeCoord,ref i32)i32
    clang proc     "gdk_device_free_history"           (ref ref _GdkTimeCoord,i32)
    clang function "gdk_device_get_n_axes"             (ref _GdkDevice)i32
    clang function "gdk_device_list_axes"              (ref _GdkDevice)ref _GList
    clang function "gdk_device_get_axis_value"         (ref _GdkDevice,ref r64,ref _GdkAtom,ref r64)i32
    clang function "gdk_device_get_axis"               (ref _GdkDevice,ref r64,i32,ref r64)i32
    clang function "gdk_device_get_display"            (ref _GdkDevice)ref _GdkDisplay
    clang function "gdk_device_get_associated_device"  (ref _GdkDevice)ref _GdkDevice
    clang function "gdk_device_list_slave_devices"     (ref _GdkDevice)ref _GList
    clang function "gdk_device_get_device_type"        (ref _GdkDevice)i32
    clang function "gdk_device_grab"                   (ref _GdkDevice,ref _GdkWindow,i32,i32,i32,ref _GdkCursor,u32)i32
    clang proc     "gdk_device_ungrab"                 (ref _GdkDevice,u32)
    clang proc     "gdk_device_warp"                   (ref _GdkDevice,ref _GdkScreen,i32,i32)
    clang function "gdk_device_grab_info_libgtk_only"  (ref _GdkDisplay,ref _GdkDevice,ref ref _GdkWindow,ref i32)i32
    const GDK_ACTION_DEFAULT                 = 1
    const GDK_ACTION_COPY                    = 2
    const GDK_ACTION_MOVE                    = 4
    const GDK_ACTION_LINK                    = 8
    const GDK_ACTION_PRIVATE                 = 16
    const GDK_ACTION_ASK                     = 32
    const GDK_DRAG_PROTO_NONE                = 0
    const GDK_DRAG_PROTO_MOTIF               = 1
    const GDK_DRAG_PROTO_XDND                = 2
    const GDK_DRAG_PROTO_ROOTWIN             = 3
    const GDK_DRAG_PROTO_WIN32_DROPFILES     = 4
    const GDK_DRAG_PROTO_OLE2                = 5
    const GDK_DRAG_PROTO_LOCAL               = 6
    clang function "gdk_drag_context_get_type"         ()u64
    clang proc     "gdk_drag_context_set_device"       (ref _GdkDragContext,ref _GdkDevice)
    clang function "gdk_drag_context_get_device"       (ref _GdkDragContext)ref _GdkDevice
    clang function "gdk_drag_context_list_targets"     (ref _GdkDragContext)ref _GList
    clang function "gdk_drag_context_get_actions"      (ref _GdkDragContext)i32
    clang function "gdk_drag_context_get_suggested_action" (ref _GdkDragContext)i32
    clang function "gdk_drag_context_get_selected_action" (ref _GdkDragContext)i32
    clang function "gdk_drag_context_get_source_window" (ref _GdkDragContext)ref _GdkWindow
    clang function "gdk_drag_context_get_dest_window"  (ref _GdkDragContext)ref _GdkWindow
    clang function "gdk_drag_context_get_protocol"     (ref _GdkDragContext)i32
    clang proc     "gdk_drag_status"                   (ref _GdkDragContext,i32,u32)
    clang proc     "gdk_drop_reply"                    (ref _GdkDragContext,i32,u32)
    clang proc     "gdk_drop_finish"                   (ref _GdkDragContext,i32,u32)
    clang function "gdk_drag_get_selection"            (ref _GdkDragContext)ref _GdkAtom
    clang function "gdk_drag_begin"                    (ref _GdkWindow,ref _GList)ref _GdkDragContext
    clang function "gdk_drag_begin_for_device"         (ref _GdkWindow,ref _GdkDevice,ref _GList)ref _GdkDragContext
    clang proc     "gdk_drag_find_window_for_screen"   (ref _GdkDragContext,ref _GdkWindow,ref _GdkScreen,i32,i32,ref ref _GdkWindow,ref i32)
    clang function "gdk_drag_motion"                   (ref _GdkDragContext,ref _GdkWindow,i32,i32,i32,i32,i32,u32)i32
    clang proc     "gdk_drag_drop"                     (ref _GdkDragContext,u32)
    clang proc     "gdk_drag_abort"                    (ref _GdkDragContext,u32)
    clang function "gdk_drag_drop_succeeded"           (ref _GdkDragContext)i32
    record _GdkEventAny =
        var i32 type$
        var ref _GdkWindow window
        var i8 send_event
    end

    record _GdkEventExpose =
        var i32 type$
        var ref _GdkWindow window
        var i8 send_event
        var _cairo_rectangle_int area
        var ref _cairo_region region
        var i32 count
    end

    record _GdkEventVisibility =
        var i32 type$
        var ref _GdkWindow window
        var i8 send_event
        var i32 state
    end

    record _GdkEventMotion =
        var i32 type$
        var ref _GdkWindow window
        var i8 send_event
        var u32 _time64
        var r64 x
        var r64 y
        var ref r64 axes
        var u32 state
        var i16 is_hint
        var ref _GdkDevice device
        var r64 x_root
        var r64 y_root
    end

    record _GdkEventButton =
        var i32 type$
        var ref _GdkWindow window
        var i8 send_event
        var u32 _time64
        var r64 x
        var r64 y
        var ref r64 axes
        var u32 state
        var u32 button
        var ref _GdkDevice device
        var r64 x_root
        var r64 y_root
    end

    record _GdkEventTouch =
        var i32 type$
        var ref _GdkWindow window
        var i8 send_event
        var u32 _time64
        var r64 x
        var r64 y
        var ref r64 axes
        var u32 state
        var ref _GdkEventSequence sequence
        var i32 emulating_pointer
        var ref _GdkDevice device
        var r64 x_root
        var r64 y_root
    end

    record _GdkEventScroll =
        var i32 type$
        var ref _GdkWindow window
        var i8 send_event
        var u32 _time64
        var r64 x
        var r64 y
        var u32 state
        var i32 direction
        var ref _GdkDevice device
        var r64 x_root
        var r64 y_root
        var r64 delta_x
        var r64 delta_y
    end

    record _GdkEventKey =
        var i32 type$
        var ref _GdkWindow window
        var i8 send_event
        var u32 _time64
        var u32 state
        var u32 keyval
        var i32 length
        var ref i8 string
        var u16 hardware_keycode
        var byte group
        var u32 is_modifier
    end

    record _GdkEventFocus =
        var i32 type$
        var ref _GdkWindow window
        var i8 send_event
        var i16 in
    end

    record _GdkEventCrossing =
        var i32 type$
        var ref _GdkWindow window
        var i8 send_event
        var ref _GdkWindow subwindow
        var u32 _time64
        var r64 x
        var r64 y
        var r64 x_root
        var r64 y_root
        var i32 mode
        var i32 detail
        var i32 focus
        var u32 state
    end

    record _GdkEventConfigure =
        var i32 type$
        var ref _GdkWindow window
        var i8 send_event
        var i32 x
        var i32 y
        var i32 width
        var i32 height
    end

    record _GdkEventProperty =
        var i32 type$
        var ref _GdkWindow window
        var i8 send_event
        var ref _GdkAtom atom
        var u32 _time64
        var u32 state
    end

    record _GdkEventSelection =
        var i32 type$
        var ref _GdkWindow window
        var i8 send_event
        var ref _GdkAtom selection
        var ref _GdkAtom target
        var ref _GdkAtom property
        var u32 _time64
        var ref _GdkWindow requestor
    end

    record _GdkEventOwnerChange =
        var i32 type$
        var ref _GdkWindow window
        var i8 send_event
        var ref _GdkWindow owner
        var i32 reason
        var ref _GdkAtom selection
        var u32 _time64
        var u32 selection_time
    end

    record _GdkEventProximity =
        var i32 type$
        var ref _GdkWindow window
        var i8 send_event
        var u32 _time64
        var ref _GdkDevice device
    end

    record _GdkEventDND =
        var i32 type$
        var ref _GdkWindow window
        var i8 send_event
        var ref _GdkDragContext context
        var u32 _time64
        var i16 x_root
        var i16 y_root
    end

    record _GdkEventWindowState =
        var i32 type$
        var ref _GdkWindow window
        var i8 send_event
        var i32 changed_mask
        var i32 new_window_state
    end

    record _GdkEventSetting =
        var i32 type$
        var ref _GdkWindow window
        var i8 send_event
        var i32 action
        var ref i8 name
    end

    record _GdkEventGrabBroken =
        var i32 type$
        var ref _GdkWindow window
        var i8 send_event
        var i32 keyboard
        var i32 implicit
        var ref _GdkWindow grab_window
    end

    record _GdkEventSequence =
        var int dummy    !empty record
    end

    record _GdkEvent =
        var i32 type$
        var _GdkEventAny any
        var _GdkEventExpose expose
        var _GdkEventVisibility visibility
        var _GdkEventMotion motion
        var _GdkEventButton button
        var _GdkEventTouch touch
        var _GdkEventScroll scroll
        var _GdkEventKey key
        var _GdkEventCrossing crossing
        var _GdkEventFocus focus_change
        var _GdkEventConfigure configure
        var _GdkEventProperty property
        var _GdkEventSelection selection
        var _GdkEventOwnerChange owner_change
        var _GdkEventProximity proximity
        var _GdkEventDND dnd
        var _GdkEventWindowState window_state
        var _GdkEventSetting setting
        var _GdkEventGrabBroken grab_broken
    end

    const GDK_FILTER_CONTINUE                = 0
    const GDK_FILTER_TRANSLATE               = 1
    const GDK_FILTER_REMOVE                  = 2
    const GDK_NOTHING                        = -1
    const GDK_DELETE                         = 0
    const GDK_DESTROY                        = 1
    const GDK_EXPOSE                         = 2
    const GDK_MOTION_NOTIFY                  = 3
    const GDK_BUTTON_PRESS                   = 4
    const GDK_2BUTTON_PRESS                  = 5
    const GDK_DOUBLE_BUTTON_PRESS            = 5
    const GDK_3BUTTON_PRESS                  = 6
    const GDK_TRIPLE_BUTTON_PRESS            = 6
    const GDK_BUTTON_RELEASE                 = 7
    const GDK_KEY_PRESS                      = 8
    const GDK_KEY_RELEASE                    = 9
    const GDK_ENTER_NOTIFY                   = 10
    const GDK_LEAVE_NOTIFY                   = 11
    const GDK_FOCUS_CHANGE                   = 12
    const GDK_CONFIGURE                      = 13
    const GDK_MAP                            = 14
    const GDK_UNMAP                          = 15
    const GDK_PROPERTY_NOTIFY                = 16
    const GDK_SELECTION_CLEAR                = 17
    const GDK_SELECTION_REQUEST              = 18
    const GDK_SELECTION_NOTIFY               = 19
    const GDK_PROXIMITY_IN                   = 20
    const GDK_PROXIMITY_OUT                  = 21
    const GDK_DRAG_ENTER                     = 22
    const GDK_DRAG_LEAVE                     = 23
    const GDK_DRAG_MOTION                    = 24
    const GDK_DRAG_STATUS                    = 25
    const GDK_DROP_START                     = 26
    const GDK_DROP_FINISHED                  = 27
    const GDK_CLIENT_EVENT                   = 28
    const GDK_VISIBILITY_NOTIFY              = 29
    const GDK_SCROLL                         = 31
    const GDK_WINDOW_STATE                   = 32
    const GDK_SETTING                        = 33
    const GDK_OWNER_CHANGE                   = 34
    const GDK_GRAB_BROKEN                    = 35
    const GDK_DAMAGE                         = 36
    const GDK_TOUCH_BEGIN                    = 37
    const GDK_TOUCH_UPDATE                   = 38
    const GDK_TOUCH_END                      = 39
    const GDK_TOUCH_CANCEL                   = 40
    const GDK_EVENT_LAST                     = 41
    const GDK_VISIBILITY_UNOBSCURED          = 0
    const GDK_VISIBILITY_PARTIAL             = 1
    const GDK_VISIBILITY_FULLY_OBSCURED      = 2
    const GDK_SCROLL_UP                      = 0
    const GDK_SCROLL_DOWN                    = 1
    const GDK_SCROLL_LEFT                    = 2
    const GDK_SCROLL_RIGHT                   = 3
    const GDK_SCROLL_SMOOTH                  = 4
    const GDK_NOTIFY_ANCESTOR                = 0
    const GDK_NOTIFY_VIRTUAL                 = 1
    const GDK_NOTIFY_INFERIOR                = 2
    const GDK_NOTIFY_NONLINEAR               = 3
    const GDK_NOTIFY_NONLINEAR_VIRTUAL       = 4
    const GDK_NOTIFY_UNKNOWN                 = 5
    const GDK_CROSSING_NORMAL                = 0
    const GDK_CROSSING_GRAB                  = 1
    const GDK_CROSSING_UNGRAB                = 2
    const GDK_CROSSING_GTK_GRAB              = 3
    const GDK_CROSSING_GTK_UNGRAB            = 4
    const GDK_CROSSING_STATE_CHANGED         = 5
    const GDK_CROSSING_TOUCH_BEGIN           = 6
    const GDK_CROSSING_TOUCH_END             = 7
    const GDK_CROSSING_DEVICE_SWITCH         = 8
    const GDK_PROPERTY_NEW_VALUE             = 0
    const GDK_PROPERTY_DELETE                = 1
    const GDK_WINDOW_STATE_WITHDRAWN         = 1
    const GDK_WINDOW_STATE_ICONIFIED         = 2
    const GDK_WINDOW_STATE_MAXIMIZED         = 4
    const GDK_WINDOW_STATE_STICKY            = 8
    const GDK_WINDOW_STATE_FULLSCREEN        = 16
    const GDK_WINDOW_STATE_ABOVE             = 32
    const GDK_WINDOW_STATE_BELOW             = 64
    const GDK_WINDOW_STATE_FOCUSED           = 128
    const GDK_SETTING_ACTION_NEW             = 0
    const GDK_SETTING_ACTION_CHANGED         = 1
    const GDK_SETTING_ACTION_DELETED         = 2
    const GDK_OWNER_CHANGE_NEW_OWNER         = 0
    const GDK_OWNER_CHANGE_DESTROY           = 1
    const GDK_OWNER_CHANGE_CLOSE             = 2
    clang function "gdk_event_get_type"                ()u64
    clang function "gdk_events_pending"                ()i32
    clang function "gdk_event_get"                     ()ref _GdkEvent
    clang function "gdk_event_peek"                    ()ref _GdkEvent
    clang proc     "gdk_event_put"                     (ref _GdkEvent)
    clang function "gdk_event_new"                     (i32)ref _GdkEvent
    clang function "gdk_event_copy"                    (ref _GdkEvent)ref _GdkEvent
    clang proc     "gdk_event_free"                    (ref _GdkEvent)
    clang function "gdk_event_get_time"                (ref _GdkEvent)u32
    clang function "gdk_event_get_state"               (ref _GdkEvent,ref i32)i32
    clang function "gdk_event_get_coords"              (ref _GdkEvent,ref r64,ref r64)i32
    clang function "gdk_event_get_root_coords"         (ref _GdkEvent,ref r64,ref r64)i32
    clang function "gdk_event_get_button"              (ref _GdkEvent,ref u32)i32
    clang function "gdk_event_get_click_count"         (ref _GdkEvent,ref u32)i32
    clang function "gdk_event_get_keyval"              (ref _GdkEvent,ref u32)i32
    clang function "gdk_event_get_keycode"             (ref _GdkEvent,ref u16)i32
    clang function "gdk_event_get_scroll_direction"    (ref _GdkEvent,ref i32)i32
    clang function "gdk_event_get_scroll_deltas"       (ref _GdkEvent,ref r64,ref r64)i32
    clang function "gdk_event_get_axis"                (ref _GdkEvent,i32,ref r64)i32
    clang proc     "gdk_event_set_device"              (ref _GdkEvent,ref _GdkDevice)
    clang function "gdk_event_get_device"              (ref _GdkEvent)ref _GdkDevice
    clang proc     "gdk_event_set_source_device"       (ref _GdkEvent,ref _GdkDevice)
    clang function "gdk_event_get_source_device"       (ref _GdkEvent)ref _GdkDevice
    clang proc     "gdk_event_request_motions"         (ref _GdkEventMotion)
    clang function "gdk_event_triggers_context_menu"   (ref _GdkEvent)i32
    clang function "gdk_events_get_distance"           (ref _GdkEvent,ref _GdkEvent,ref r64)i32
    clang function "gdk_events_get_angle"              (ref _GdkEvent,ref _GdkEvent,ref r64)i32
    clang function "gdk_events_get_center"             (ref _GdkEvent,ref _GdkEvent,ref r64,ref r64)i32
    clang proc     "gdk_event_handler_set"             (ref clang proc(ref _GdkEvent,ref void),ref void,ref clang proc(ref void))
    clang proc     "gdk_event_set_screen"              (ref _GdkEvent,ref _GdkScreen)
    clang function "gdk_event_get_screen"              (ref _GdkEvent)ref _GdkScreen
    clang function "gdk_event_get_event_sequence"      (ref _GdkEvent)ref _GdkEventSequence
    clang proc     "gdk_set_show_events"               (i32)
    clang function "gdk_get_show_events"               ()i32
    clang function "gdk_setting_get"                   (ref i8,ref _GValue)i32
    clang function "gdk_display_get_type"              ()u64
    clang function "gdk_display_open"                  (ref i8)ref _GdkDisplay
    clang function "gdk_display_get_name"              (ref _GdkDisplay)ref i8
    clang function "gdk_display_get_n_screens"         (ref _GdkDisplay)i32
    clang function "gdk_display_get_screen"            (ref _GdkDisplay,i32)ref _GdkScreen
    clang function "gdk_display_get_default_screen"    (ref _GdkDisplay)ref _GdkScreen
    clang proc     "gdk_display_pointer_ungrab"        (ref _GdkDisplay,u32)
    clang proc     "gdk_display_keyboard_ungrab"       (ref _GdkDisplay,u32)
    clang function "gdk_display_pointer_is_grabbed"    (ref _GdkDisplay)i32
    clang function "gdk_display_device_is_grabbed"     (ref _GdkDisplay,ref _GdkDevice)i32
    clang proc     "gdk_display_beep"                  (ref _GdkDisplay)
    clang proc     "gdk_display_sync"                  (ref _GdkDisplay)
    clang proc     "gdk_display_flush"                 (ref _GdkDisplay)
    clang proc     "gdk_display_close"                 (ref _GdkDisplay)
    clang function "gdk_display_is_closed"             (ref _GdkDisplay)i32
    clang function "gdk_display_list_devices"          (ref _GdkDisplay)ref _GList
    clang function "gdk_display_get_event"             (ref _GdkDisplay)ref _GdkEvent
    clang function "gdk_display_peek_event"            (ref _GdkDisplay)ref _GdkEvent
    clang proc     "gdk_display_put_event"             (ref _GdkDisplay,ref _GdkEvent)
    clang function "gdk_display_has_pending"           (ref _GdkDisplay)i32
    clang proc     "gdk_display_set_double_click_time" (ref _GdkDisplay,u32)
    clang proc     "gdk_display_set_double_click_distance" (ref _GdkDisplay,u32)
    clang function "gdk_display_get_default"           ()ref _GdkDisplay
    clang proc     "gdk_display_get_pointer"           (ref _GdkDisplay,ref ref _GdkScreen,ref i32,ref i32,ref i32)
    clang function "gdk_display_get_window_at_pointer" (ref _GdkDisplay,ref i32,ref i32)ref _GdkWindow
    clang proc     "gdk_display_warp_pointer"          (ref _GdkDisplay,ref _GdkScreen,i32,i32)
    clang function "gdk_display_open_default_libgtk_only" ()ref _GdkDisplay
    clang function "gdk_display_supports_cursor_alpha" (ref _GdkDisplay)i32
    clang function "gdk_display_supports_cursor_color" (ref _GdkDisplay)i32
    clang function "gdk_display_get_default_cursor_size" (ref _GdkDisplay)u32
    clang proc     "gdk_display_get_maximal_cursor_size" (ref _GdkDisplay,ref u32,ref u32)
    clang function "gdk_display_get_default_group"     (ref _GdkDisplay)ref _GdkWindow
    clang function "gdk_display_supports_selection_notification" (ref _GdkDisplay)i32
    clang function "gdk_display_request_selection_notification" (ref _GdkDisplay,ref _GdkAtom)i32
    clang function "gdk_display_supports_clipboard_persistence" (ref _GdkDisplay)i32
    clang proc     "gdk_display_store_clipboard"       (ref _GdkDisplay,ref _GdkWindow,u32,ref ref _GdkAtom,i32)
    clang function "gdk_display_supports_shapes"       (ref _GdkDisplay)i32
    clang function "gdk_display_supports_input_shapes" (ref _GdkDisplay)i32
    clang function "gdk_display_supports_composite"    (ref _GdkDisplay)i32
    clang proc     "gdk_display_notify_startup_complete" (ref _GdkDisplay,ref i8)
    clang function "gdk_display_get_device_manager"    (ref _GdkDisplay)ref _GdkDeviceManager
    clang function "gdk_display_get_app_launch_context" (ref _GdkDisplay)ref _GdkAppLaunchContext
    clang function "gdk_screen_get_type"               ()u64
    clang function "gdk_screen_get_system_visual"      (ref _GdkScreen)ref _GdkVisual
    clang function "gdk_screen_get_rgba_visual"        (ref _GdkScreen)ref _GdkVisual
    clang function "gdk_screen_is_composited"          (ref _GdkScreen)i32
    clang function "gdk_screen_get_root_window"        (ref _GdkScreen)ref _GdkWindow
    clang function "gdk_screen_get_display"            (ref _GdkScreen)ref _GdkDisplay
    clang function "gdk_screen_get_number"             (ref _GdkScreen)i32
    clang function "gdk_screen_get_width"              (ref _GdkScreen)i32
    clang function "gdk_screen_get_height"             (ref _GdkScreen)i32
    clang function "gdk_screen_get_width_mm"           (ref _GdkScreen)i32
    clang function "gdk_screen_get_height_mm"          (ref _GdkScreen)i32
    clang function "gdk_screen_list_visuals"           (ref _GdkScreen)ref _GList
    clang function "gdk_screen_get_toplevel_windows"   (ref _GdkScreen)ref _GList
    clang function "gdk_screen_make_display_name"      (ref _GdkScreen)ref i8
    clang function "gdk_screen_get_n_monitors"         (ref _GdkScreen)i32
    clang function "gdk_screen_get_primary_monitor"    (ref _GdkScreen)i32
    clang proc     "gdk_screen_get_monitor_geometry"   (ref _GdkScreen,i32,ref _cairo_rectangle_int)
    clang proc     "gdk_screen_get_monitor_workarea"   (ref _GdkScreen,i32,ref _cairo_rectangle_int)
    clang function "gdk_screen_get_monitor_at_point"   (ref _GdkScreen,i32,i32)i32
    clang function "gdk_screen_get_monitor_at_window"  (ref _GdkScreen,ref _GdkWindow)i32
    clang function "gdk_screen_get_monitor_width_mm"   (ref _GdkScreen,i32)i32
    clang function "gdk_screen_get_monitor_height_mm"  (ref _GdkScreen,i32)i32
    clang function "gdk_screen_get_monitor_plug_name"  (ref _GdkScreen,i32)ref i8
    clang function "gdk_screen_get_default"            ()ref _GdkScreen
    clang function "gdk_screen_get_setting"            (ref _GdkScreen,ref i8,ref _GValue)i32
    clang proc     "gdk_screen_set_font_options"       (ref _GdkScreen,ref _cairo_font_options)
    clang function "gdk_screen_get_font_options"       (ref _GdkScreen)ref _cairo_font_options
    clang proc     "gdk_screen_set_resolution"         (ref _GdkScreen,r64)
    clang function "gdk_screen_get_resolution"         (ref _GdkScreen)r64
    clang function "gdk_screen_get_active_window"      (ref _GdkScreen)ref _GdkWindow
    clang function "gdk_screen_get_window_stack"       (ref _GdkScreen)ref _GList
    clang function "gdk_app_launch_context_get_type"   ()u64
    clang function "gdk_app_launch_context_new"        ()ref _GdkAppLaunchContext
    clang proc     "gdk_app_launch_context_set_display" (ref _GdkAppLaunchContext,ref _GdkDisplay)
    clang proc     "gdk_app_launch_context_set_screen" (ref _GdkAppLaunchContext,ref _GdkScreen)
    clang proc     "gdk_app_launch_context_set_desktop" (ref _GdkAppLaunchContext,i32)
    clang proc     "gdk_app_launch_context_set_timestamp" (ref _GdkAppLaunchContext,u32)
    clang proc     "gdk_app_launch_context_set_icon"   (ref _GdkAppLaunchContext,ref _GIcon)
    clang proc     "gdk_app_launch_context_set_icon_name" (ref _GdkAppLaunchContext,ref i8)
    clang function "gdk_rgba_get_type"                 ()u64
    clang function "gdk_rgba_copy"                     (ref _GdkRGBA)ref _GdkRGBA
    clang proc     "gdk_rgba_free"                     (ref _GdkRGBA)
    clang function "gdk_rgba_hash"                     (ref void)u32
    clang function "gdk_rgba_equal"                    (ref void,ref void)i32
    clang function "gdk_rgba_parse"                    (ref _GdkRGBA,ref i8)i32
    clang function "gdk_rgba_to_string"                (ref _GdkRGBA)ref i8
    u32 gdk_pixbuf_major_version
    u32 gdk_pixbuf_minor_version
    u32 gdk_pixbuf_micro_version
    ref i8 gdk_pixbuf_version
    const GDK_PIXBUF_ALPHA_BILEVEL           = 0
    const GDK_PIXBUF_ALPHA_FULL              = 1
    const GDK_COLORSPACE_RGB                 = 0
    record _GdkPixbuf =
        var int dummy    !empty record
    end

    const GDK_PIXBUF_ERROR_CORRUPT_IMAGE     = 0
    const GDK_PIXBUF_ERROR_INSUFFICIENT_MEMORY = 1
    const GDK_PIXBUF_ERROR_BAD_OPTION        = 2
    const GDK_PIXBUF_ERROR_UNKNOWN_TYPE      = 3
    const GDK_PIXBUF_ERROR_UNSUPPORTED_OPERATION = 4
    const GDK_PIXBUF_ERROR_FAILED            = 5
    clang function "gdk_pixbuf_error_quark"            ()u32
    clang function "gdk_pixbuf_get_type"               ()u64
    clang function "gdk_pixbuf_ref"                    (ref _GdkPixbuf)ref _GdkPixbuf
    clang proc     "gdk_pixbuf_unref"                  (ref _GdkPixbuf)
    clang function "gdk_pixbuf_get_colorspace"         (ref _GdkPixbuf)i32
    clang function "gdk_pixbuf_get_n_channels"         (ref _GdkPixbuf)i32
    clang function "gdk_pixbuf_get_has_alpha"          (ref _GdkPixbuf)i32
    clang function "gdk_pixbuf_get_bits_per_sample"    (ref _GdkPixbuf)i32
    clang function "gdk_pixbuf_get_pixels"             (ref _GdkPixbuf)ref byte
    clang function "gdk_pixbuf_get_width"              (ref _GdkPixbuf)i32
    clang function "gdk_pixbuf_get_height"             (ref _GdkPixbuf)i32
    clang function "gdk_pixbuf_get_rowstride"          (ref _GdkPixbuf)i32
    clang function "gdk_pixbuf_get_byte_length"        (ref _GdkPixbuf)u64
    clang function "gdk_pixbuf_get_pixels_with_length" (ref _GdkPixbuf,ref u32)ref byte
    clang function "gdk_pixbuf_new"                    (i32,i32,i32,i32,i32)ref _GdkPixbuf
    clang function "gdk_pixbuf_copy"                   (ref _GdkPixbuf)ref _GdkPixbuf
    clang function "gdk_pixbuf_new_subpixbuf"          (ref _GdkPixbuf,i32,i32,i32,i32)ref _GdkPixbuf
    clang function "gdk_pixbuf_new_from_file_utf8"     (ref i8,ref ref _GError)ref _GdkPixbuf
    clang function "gdk_pixbuf_new_from_file_at_size_utf8" (ref i8,i32,i32,ref ref _GError)ref _GdkPixbuf
    clang function "gdk_pixbuf_new_from_file_at_scale_utf8" (ref i8,i32,i32,i32,ref ref _GError)ref _GdkPixbuf
    clang function "gdk_pixbuf_new_from_resource"      (ref i8,ref ref _GError)ref _GdkPixbuf
    clang function "gdk_pixbuf_new_from_resource_at_scale" (ref i8,i32,i32,i32,ref ref _GError)ref _GdkPixbuf
    clang function "gdk_pixbuf_new_from_data"          (ref byte,i32,i32,i32,i32,i32,i32,ref clang proc(ref byte,ref void),ref void)ref _GdkPixbuf
    clang function "gdk_pixbuf_new_from_xpm_data"      (ref ref i8)ref _GdkPixbuf
    clang function "gdk_pixbuf_new_from_inline"        (i32,ref byte,i32,ref ref _GError)ref _GdkPixbuf
    clang proc     "gdk_pixbuf_fill"                   (ref _GdkPixbuf,u32)
    clang function "gdk_pixbuf_save_utf8"              (ref _GdkPixbuf,ref i8,ref i8,ref ref _GError,...)i32
    clang function "gdk_pixbuf_savev_utf8"             (ref _GdkPixbuf,ref i8,ref i8,ref ref i8,ref ref i8,ref ref _GError)i32
    clang function "gdk_pixbuf_save_to_callback"       (ref _GdkPixbuf,ref clang function(ref i8,u64,ref ref _GError,ref void)i32,ref void,ref i8,ref ref _GError,...)i32
    clang function "gdk_pixbuf_save_to_callbackv"      (ref _GdkPixbuf,ref clang function(ref i8,u64,ref ref _GError,ref void)i32,ref void,ref i8,ref ref i8,ref ref i8,ref ref _GError)i32
    clang function "gdk_pixbuf_save_to_buffer"         (ref _GdkPixbuf,ref ref i8,ref u64,ref i8,ref ref _GError,...)i32
    clang function "gdk_pixbuf_save_to_bufferv"        (ref _GdkPixbuf,ref ref i8,ref u64,ref i8,ref ref i8,ref ref i8,ref ref _GError)i32
    clang function "gdk_pixbuf_new_from_stream"        (ref _GInputStream,ref _GCancellable,ref ref _GError)ref _GdkPixbuf
    clang proc     "gdk_pixbuf_new_from_stream_async"  (ref _GInputStream,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "gdk_pixbuf_new_from_stream_finish" (ref _GAsyncResult,ref ref _GError)ref _GdkPixbuf
    clang function "gdk_pixbuf_new_from_stream_at_scale" (ref _GInputStream,i32,i32,i32,ref _GCancellable,ref ref _GError)ref _GdkPixbuf
    clang proc     "gdk_pixbuf_new_from_stream_at_scale_async" (ref _GInputStream,i32,i32,i32,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void)
    clang function "gdk_pixbuf_save_to_stream"         (ref _GdkPixbuf,ref _GOutputStream,ref i8,ref _GCancellable,ref ref _GError,...)i32
    clang proc     "gdk_pixbuf_save_to_stream_async"   (ref _GdkPixbuf,ref _GOutputStream,ref i8,ref _GCancellable,ref clang proc(ref _GObject,ref _GAsyncResult,ref void),ref void,...)
    clang function "gdk_pixbuf_save_to_stream_finish"  (ref _GAsyncResult,ref ref _GError)i32
    clang function "gdk_pixbuf_add_alpha"              (ref _GdkPixbuf,i32,byte,byte,byte)ref _GdkPixbuf
    clang proc     "gdk_pixbuf_copy_area"              (ref _GdkPixbuf,i32,i32,i32,i32,ref _GdkPixbuf,i32,i32)
    clang proc     "gdk_pixbuf_saturate_and_pixelate"  (ref _GdkPixbuf,ref _GdkPixbuf,r32,i32)
    clang function "gdk_pixbuf_apply_embedded_orientation" (ref _GdkPixbuf)ref _GdkPixbuf
    clang function "gdk_pixbuf_get_option"             (ref _GdkPixbuf,ref i8)ref i8
    const GDK_INTERP_NEAREST                 = 0
    const GDK_INTERP_TILES                   = 1
    const GDK_INTERP_BILINEAR                = 2
    const GDK_INTERP_HYPER                   = 3
    const GDK_PIXBUF_ROTATE_NONE             = 0
    const GDK_PIXBUF_ROTATE_COUNTERCLOCKWISE = 90
    const GDK_PIXBUF_ROTATE_UPSIDEDOWN       = 180
    const GDK_PIXBUF_ROTATE_CLOCKWISE        = 270
    clang proc     "gdk_pixbuf_scale"                  (ref _GdkPixbuf,ref _GdkPixbuf,i32,i32,i32,i32,r64,r64,r64,r64,i32)
    clang proc     "gdk_pixbuf_composite"              (ref _GdkPixbuf,ref _GdkPixbuf,i32,i32,i32,i32,r64,r64,r64,r64,i32,i32)
    clang proc     "gdk_pixbuf_composite_color"        (ref _GdkPixbuf,ref _GdkPixbuf,i32,i32,i32,i32,r64,r64,r64,r64,i32,i32,i32,i32,i32,u32,u32)
    clang function "gdk_pixbuf_scale_simple"           (ref _GdkPixbuf,i32,i32,i32)ref _GdkPixbuf
    clang function "gdk_pixbuf_composite_color_simple" (ref _GdkPixbuf,i32,i32,i32,i32,i32,u32,u32)ref _GdkPixbuf
    clang function "gdk_pixbuf_rotate_simple"          (ref _GdkPixbuf,i32)ref _GdkPixbuf
    clang function "gdk_pixbuf_flip"                   (ref _GdkPixbuf,i32)ref _GdkPixbuf
    record _GdkPixbufAnimation =
        var int dummy    !empty record
    end

    record _GdkPixbufAnimationIter =
        var int dummy    !empty record
    end

    clang function "gdk_pixbuf_animation_get_type"     ()u64
    clang function "gdk_pixbuf_animation_new_from_file_utf8" (ref i8,ref ref _GError)ref _GdkPixbufAnimation
    clang function "gdk_pixbuf_animation_ref"          (ref _GdkPixbufAnimation)ref _GdkPixbufAnimation
    clang proc     "gdk_pixbuf_animation_unref"        (ref _GdkPixbufAnimation)
    clang function "gdk_pixbuf_animation_get_width"    (ref _GdkPixbufAnimation)i32
    clang function "gdk_pixbuf_animation_get_height"   (ref _GdkPixbufAnimation)i32
    clang function "gdk_pixbuf_animation_is_static_image" (ref _GdkPixbufAnimation)i32
    clang function "gdk_pixbuf_animation_get_static_image" (ref _GdkPixbufAnimation)ref _GdkPixbuf
    clang function "gdk_pixbuf_animation_get_iter"     (ref _GdkPixbufAnimation,ref _GTimeVal)ref _GdkPixbufAnimationIter
    clang function "gdk_pixbuf_animation_iter_get_type" ()u64
    clang function "gdk_pixbuf_animation_iter_get_delay_time" (ref _GdkPixbufAnimationIter)i32
    clang function "gdk_pixbuf_animation_iter_get_pixbuf" (ref _GdkPixbufAnimationIter)ref _GdkPixbuf
    clang function "gdk_pixbuf_animation_iter_on_currently_loading_frame" (ref _GdkPixbufAnimationIter)i32
    clang function "gdk_pixbuf_animation_iter_advance" (ref _GdkPixbufAnimationIter,ref _GTimeVal)i32
    record _GdkPixbufSimpleAnim =
        var int dummy    !empty record
    end

    record _GdkPixbufSimpleAnimClass =
        var int dummy    !empty record
    end

    clang function "gdk_pixbuf_simple_anim_get_type"   ()u64
    clang function "gdk_pixbuf_simple_anim_iter_get_type" ()u64
    clang function "gdk_pixbuf_simple_anim_new"        (i32,i32,r32)ref _GdkPixbufSimpleAnim
    clang proc     "gdk_pixbuf_simple_anim_add_frame"  (ref _GdkPixbufSimpleAnim,ref _GdkPixbuf)
    clang proc     "gdk_pixbuf_simple_anim_set_loop"   (ref _GdkPixbufSimpleAnim,i32)
    clang function "gdk_pixbuf_simple_anim_get_loop"   (ref _GdkPixbufSimpleAnim)i32
    record _GdkPixbufFormat =
        var int dummy    !empty record
    end

    clang function "gdk_pixbuf_format_get_type"        ()u64
    clang function "gdk_pixbuf_get_formats"            ()ref _GSList
    clang function "gdk_pixbuf_format_get_name"        (ref _GdkPixbufFormat)ref i8
    clang function "gdk_pixbuf_format_get_description" (ref _GdkPixbufFormat)ref i8
    clang function "gdk_pixbuf_format_get_mime_types"  (ref _GdkPixbufFormat)ref ref i8
    clang function "gdk_pixbuf_format_get_extensions"  (ref _GdkPixbufFormat)ref ref i8
    clang function "gdk_pixbuf_format_is_writable"     (ref _GdkPixbufFormat)i32
    clang function "gdk_pixbuf_format_is_scalable"     (ref _GdkPixbufFormat)i32
    clang function "gdk_pixbuf_format_is_disabled"     (ref _GdkPixbufFormat)i32
    clang proc     "gdk_pixbuf_format_set_disabled"    (ref _GdkPixbufFormat,i32)
    clang function "gdk_pixbuf_format_get_license"     (ref _GdkPixbufFormat)ref i8
    clang function "gdk_pixbuf_get_file_info"          (ref i8,ref i32,ref i32)ref _GdkPixbufFormat
    clang function "gdk_pixbuf_format_copy"            (ref _GdkPixbufFormat)ref _GdkPixbufFormat
    clang proc     "gdk_pixbuf_format_free"            (ref _GdkPixbufFormat)
    record _GdkPixbufLoader =
        var _GObject parent_instance
        var ref void priv
    end

    record _GdkPixbufLoaderClass =
        var _GObjectClass parent_class
        var ref clang proc(ref _GdkPixbufLoader,i32,i32) size_prepared
        var ref clang proc(ref _GdkPixbufLoader) area_prepared
        var ref clang proc(ref _GdkPixbufLoader,i32,i32,i32,i32) area_updated
        var ref clang proc(ref _GdkPixbufLoader) closed
    end

    clang function "gdk_pixbuf_loader_get_type"        ()u64
    clang function "gdk_pixbuf_loader_new"             ()ref _GdkPixbufLoader
    clang function "gdk_pixbuf_loader_new_with_type"   (ref i8,ref ref _GError)ref _GdkPixbufLoader
    clang function "gdk_pixbuf_loader_new_with_mime_type" (ref i8,ref ref _GError)ref _GdkPixbufLoader
    clang proc     "gdk_pixbuf_loader_set_size"        (ref _GdkPixbufLoader,i32,i32)
    clang function "gdk_pixbuf_loader_write"           (ref _GdkPixbufLoader,ref byte,u64,ref ref _GError)i32
    clang function "gdk_pixbuf_loader_get_pixbuf"      (ref _GdkPixbufLoader)ref _GdkPixbuf
    clang function "gdk_pixbuf_loader_get_animation"   (ref _GdkPixbufLoader)ref _GdkPixbufAnimation
    clang function "gdk_pixbuf_loader_close"           (ref _GdkPixbufLoader,ref ref _GError)i32
    clang function "gdk_pixbuf_loader_get_format"      (ref _GdkPixbufLoader)ref _GdkPixbufFormat
    clang function "gdk_pixbuf_alpha_mode_get_type"    ()u64
    clang function "gdk_colorspace_get_type"           ()u64
    clang function "gdk_pixbuf_error_get_type"         ()u64
    clang function "gdk_interp_type_get_type"          ()u64
    clang function "gdk_pixbuf_rotation_get_type"      ()u64
    clang function "gdk_pixbuf_get_from_window"        (ref _GdkWindow,i32,i32,i32,i32)ref _GdkPixbuf
    clang function "gdk_pixbuf_get_from_surface"       (ref _cairo_surface,i32,i32,i32,i32)ref _GdkPixbuf
    record _PangoCairoFont =
        var int dummy    !empty record
    end

    record _PangoCairoFontMap =
        var int dummy    !empty record
    end

    clang function "pango_cairo_font_map_get_type"     ()u64
    clang function "pango_cairo_font_map_new"          ()ref _PangoFontMap
    clang function "pango_cairo_font_map_new_for_font_type" (i32)ref _PangoFontMap
    clang function "pango_cairo_font_map_get_default"  ()ref _PangoFontMap
    clang proc     "pango_cairo_font_map_set_default"  (ref _PangoCairoFontMap)
    clang function "pango_cairo_font_map_get_font_type" (ref _PangoCairoFontMap)i32
    clang proc     "pango_cairo_font_map_set_resolution" (ref _PangoCairoFontMap,r64)
    clang function "pango_cairo_font_map_get_resolution" (ref _PangoCairoFontMap)r64
    clang function "pango_cairo_font_map_create_context" (ref _PangoCairoFontMap)ref _PangoContext
    clang function "pango_cairo_font_get_type"         ()u64
    clang function "pango_cairo_font_get_scaled_font"  (ref _PangoCairoFont)ref _cairo_scaled_font
    clang proc     "pango_cairo_update_context"        (ref _cairo,ref _PangoContext)
    clang proc     "pango_cairo_context_set_font_options" (ref _PangoContext,ref _cairo_font_options)
    clang function "pango_cairo_context_get_font_options" (ref _PangoContext)ref _cairo_font_options
    clang proc     "pango_cairo_context_set_resolution" (ref _PangoContext,r64)
    clang function "pango_cairo_context_get_resolution" (ref _PangoContext)r64
    clang proc     "pango_cairo_context_set_shape_renderer" (ref _PangoContext,ref clang proc(ref _cairo,ref _PangoAttrShape,i32,ref void),ref void,ref clang proc(ref void))
    clang function "pango_cairo_context_get_shape_renderer" (ref _PangoContext,ref ref void)ref clang proc(ref _cairo,ref _PangoAttrShape,i32,ref void)
    clang function "pango_cairo_create_context"        (ref _cairo)ref _PangoContext
    clang function "pango_cairo_create_layout"         (ref _cairo)ref _PangoLayout
    clang proc     "pango_cairo_update_layout"         (ref _cairo,ref _PangoLayout)
    clang proc     "pango_cairo_show_glyph_string"     (ref _cairo,ref _PangoFont,ref _PangoGlyphString)
    clang proc     "pango_cairo_show_glyph_item"       (ref _cairo,ref i8,ref _PangoGlyphItem)
    clang proc     "pango_cairo_show_layout_line"      (ref _cairo,ref _PangoLayoutLine)
    clang proc     "pango_cairo_show_layout"           (ref _cairo,ref _PangoLayout)
    clang proc     "pango_cairo_show_error_underline"  (ref _cairo,r64,r64,r64,r64)
    clang proc     "pango_cairo_glyph_string_path"     (ref _cairo,ref _PangoFont,ref _PangoGlyphString)
    clang proc     "pango_cairo_layout_line_path"      (ref _cairo,ref _PangoLayoutLine)
    clang proc     "pango_cairo_layout_path"           (ref _cairo,ref _PangoLayout)
    clang proc     "pango_cairo_error_underline_path"  (ref _cairo,r64,r64,r64,r64)
    clang function "gdk_cairo_create"                  (ref _GdkWindow)ref _cairo
    clang function "gdk_cairo_get_clip_rectangle"      (ref _cairo,ref _cairo_rectangle_int)i32
    clang proc     "gdk_cairo_set_source_rgba"         (ref _cairo,ref _GdkRGBA)
    clang proc     "gdk_cairo_set_source_pixbuf"       (ref _cairo,ref _GdkPixbuf,r64,r64)
    clang proc     "gdk_cairo_set_source_window"       (ref _cairo,ref _GdkWindow,r64,r64)
    clang proc     "gdk_cairo_rectangle"               (ref _cairo,ref _cairo_rectangle_int)
    clang proc     "gdk_cairo_region"                  (ref _cairo,ref _cairo_region)
    clang function "gdk_cairo_region_create_from_surface" (ref _cairo_surface)ref _cairo_region
    clang proc     "gdk_cairo_set_source_color"        (ref _cairo,ref _GdkColor)
    const GDK_X_CURSOR                       = 0
    const GDK_ARROW                          = 2
    const GDK_BASED_ARROW_DOWN               = 4
    const GDK_BASED_ARROW_UP                 = 6
    const GDK_BOAT                           = 8
    const GDK_BOGOSITY                       = 10
    const GDK_BOTTOM_LEFT_CORNER             = 12
    const GDK_BOTTOM_RIGHT_CORNER            = 14
    const GDK_BOTTOM_SIDE                    = 16
    const GDK_BOTTOM_TEE                     = 18
    const GDK_BOX_SPIRAL                     = 20
    const GDK_CENTER_PTR                     = 22
    const GDK_CIRCLE                         = 24
    const GDK_CLOCK                          = 26
    const GDK_COFFEE_MUG                     = 28
    const GDK_CROSS                          = 30
    const GDK_CROSS_REVERSE                  = 32
    const GDK_CROSSHAIR                      = 34
    const GDK_DIAMOND_CROSS                  = 36
    const GDK_DOT                            = 38
    const GDK_DOTBOX                         = 40
    const GDK_DOUBLE_ARROW                   = 42
    const GDK_DRAFT_LARGE                    = 44
    const GDK_DRAFT_SMALL                    = 46
    const GDK_DRAPED_BOX                     = 48
    const GDK_EXCHANGE                       = 50
    const GDK_FLEUR                          = 52
    const GDK_GOBBLER                        = 54
    const GDK_GUMBY                          = 56
    const GDK_HAND1                          = 58
    const GDK_HAND2                          = 60
    const GDK_HEART                          = 62
    const GDK_ICON                           = 64
    const GDK_IRON_CROSS                     = 66
    const GDK_LEFT_PTR                       = 68
    const GDK_LEFT_SIDE                      = 70
    const GDK_LEFT_TEE                       = 72
    const GDK_LEFTBUTTON                     = 74
    const GDK_LL_ANGLE                       = 76
    const GDK_LR_ANGLE                       = 78
    const GDK_MAN                            = 80
    const GDK_MIDDLEBUTTON                   = 82
    const GDK_MOUSE                          = 84
    const GDK_PENCIL                         = 86
    const GDK_PIRATE                         = 88
    const GDK_PLUS                           = 90
    const GDK_QUESTION_ARROW                 = 92
    const GDK_RIGHT_PTR                      = 94
    const GDK_RIGHT_SIDE                     = 96
    const GDK_RIGHT_TEE                      = 98
    const GDK_RIGHTBUTTON                    = 100
    const GDK_RTL_LOGO                       = 102
    const GDK_SAILBOAT                       = 104
    const GDK_SB_DOWN_ARROW                  = 106
    const GDK_SB_H_DOUBLE_ARROW              = 108
    const GDK_SB_LEFT_ARROW                  = 110
    const GDK_SB_RIGHT_ARROW                 = 112
    const GDK_SB_UP_ARROW                    = 114
    const GDK_SB_V_DOUBLE_ARROW              = 116
    const GDK_SHUTTLE                        = 118
    const GDK_SIZING                         = 120
    const GDK_SPIDER                         = 122
    const GDK_SPRAYCAN                       = 124
    const GDK_STAR                           = 126
    const GDK_TARGET                         = 128
    const GDK_TCROSS                         = 130
    const GDK_TOP_LEFT_ARROW                 = 132
    const GDK_TOP_LEFT_CORNER                = 134
    const GDK_TOP_RIGHT_CORNER               = 136
    const GDK_TOP_SIDE                       = 138
    const GDK_TOP_TEE                        = 140
    const GDK_TREK                           = 142
    const GDK_UL_ANGLE                       = 144
    const GDK_UMBRELLA                       = 146
    const GDK_UR_ANGLE                       = 148
    const GDK_WATCH                          = 150
    const GDK_XTERM                          = 152
    const GDK_LAST_CURSOR                    = 153
    const GDK_BLANK_CURSOR                   = -2
    const GDK_CURSOR_IS_PIXMAP               = -1
    clang function "gdk_cursor_get_type"               ()u64
    clang function "gdk_cursor_new_for_display"        (ref _GdkDisplay,i32)ref _GdkCursor
    clang function "gdk_cursor_new"                    (i32)ref _GdkCursor
    clang function "gdk_cursor_new_from_pixbuf"        (ref _GdkDisplay,ref _GdkPixbuf,i32,i32)ref _GdkCursor
    clang function "gdk_cursor_new_from_name"          (ref _GdkDisplay,ref i8)ref _GdkCursor
    clang function "gdk_cursor_get_display"            (ref _GdkCursor)ref _GdkDisplay
    clang function "gdk_cursor_ref"                    (ref _GdkCursor)ref _GdkCursor
    clang proc     "gdk_cursor_unref"                  (ref _GdkCursor)
    clang function "gdk_cursor_get_image"              (ref _GdkCursor)ref _GdkPixbuf
    clang function "gdk_cursor_get_cursor_type"        (ref _GdkCursor)i32
    clang function "gdk_display_manager_get_type"      ()u64
    clang function "gdk_display_manager_get"           ()ref _GdkDisplayManager
    clang function "gdk_display_manager_get_default_display" (ref _GdkDisplayManager)ref _GdkDisplay
    clang proc     "gdk_display_manager_set_default_display" (ref _GdkDisplayManager,ref _GdkDisplay)
    clang function "gdk_display_manager_list_displays" (ref _GdkDisplayManager)ref _GSList
    clang function "gdk_display_manager_open_display"  (ref _GdkDisplayManager,ref i8)ref _GdkDisplay
    clang function "gdk_cursor_type_get_type"          ()u64
    clang function "gdk_input_source_get_type"         ()u64
    clang function "gdk_input_mode_get_type"           ()u64
    clang function "gdk_axis_use_get_type"             ()u64
    clang function "gdk_device_type_get_type"          ()u64
    clang function "gdk_drag_action_get_type"          ()u64
    clang function "gdk_drag_protocol_get_type"        ()u64
    clang function "gdk_filter_return_get_type"        ()u64
    clang function "gdk_event_type_get_type"           ()u64
    clang function "gdk_visibility_state_get_type"     ()u64
    clang function "gdk_scroll_direction_get_type"     ()u64
    clang function "gdk_notify_type_get_type"          ()u64
    clang function "gdk_crossing_mode_get_type"        ()u64
    clang function "gdk_property_state_get_type"       ()u64
    clang function "gdk_window_state_get_type"         ()u64
    clang function "gdk_setting_action_get_type"       ()u64
    clang function "gdk_owner_change_get_type"         ()u64
    clang function "gdk_prop_mode_get_type"            ()u64
    clang function "gdk_byte_order_get_type"           ()u64
    clang function "gdk_modifier_type_get_type"        ()u64
    clang function "gdk_modifier_intent_get_type"      ()u64
    clang function "gdk_status_get_type"               ()u64
    clang function "gdk_grab_status_get_type"          ()u64
    clang function "gdk_grab_ownership_get_type"       ()u64
    clang function "gdk_event_mask_get_type"           ()u64
    clang function "gdk_visual_type_get_type"          ()u64
    clang function "gdk_window_window_class_get_type"  ()u64
    clang function "gdk_window_type_get_type"          ()u64
    clang function "gdk_window_attributes_type_get_type" ()u64
    clang function "gdk_window_hints_get_type"         ()u64
    clang function "gdk_window_type_hint_get_type"     ()u64
    clang function "gdk_wm_decoration_get_type"        ()u64
    clang function "gdk_wm_function_get_type"          ()u64
    clang function "gdk_gravity_get_type"              ()u64
    clang function "gdk_window_edge_get_type"          ()u64
    record _GdkKeymapKey =
        var u32 keycode
        var i32 group
        var i32 level
    end

    clang function "gdk_keymap_get_type"               ()u64
    clang function "gdk_keymap_get_default"            ()ref _GdkKeymap
    clang function "gdk_keymap_get_for_display"        (ref _GdkDisplay)ref _GdkKeymap
    clang function "gdk_keymap_lookup_key"             (ref _GdkKeymap,ref _GdkKeymapKey)u32
    clang function "gdk_keymap_translate_keyboard_state" (ref _GdkKeymap,u32,i32,i32,ref u32,ref i32,ref i32,ref i32)i32
    clang function "gdk_keymap_get_entries_for_keyval" (ref _GdkKeymap,u32,ref ref _GdkKeymapKey,ref i32)i32
    clang function "gdk_keymap_get_entries_for_keycode" (ref _GdkKeymap,u32,ref ref _GdkKeymapKey,ref ref u32,ref i32)i32
    clang function "gdk_keymap_get_direction"          (ref _GdkKeymap)i32
    clang function "gdk_keymap_have_bidi_layouts"      (ref _GdkKeymap)i32
    clang function "gdk_keymap_get_caps_lock_state"    (ref _GdkKeymap)i32
    clang function "gdk_keymap_get_num_lock_state"     (ref _GdkKeymap)i32
    clang function "gdk_keymap_get_modifier_state"     (ref _GdkKeymap)u32
    clang proc     "gdk_keymap_add_virtual_modifiers"  (ref _GdkKeymap,ref i32)
    clang function "gdk_keymap_map_virtual_modifiers"  (ref _GdkKeymap,ref i32)i32
    clang function "gdk_keymap_get_modifier_mask"      (ref _GdkKeymap,i32)i32
    clang function "gdk_keyval_name"                   (u32)ref i8
    clang function "gdk_keyval_from_name"              (ref i8)u32
    clang proc     "gdk_keyval_convert_case"           (u32,ref u32,ref u32)
    clang function "gdk_keyval_to_upper"               (u32)u32
    clang function "gdk_keyval_to_lower"               (u32)u32
    clang function "gdk_keyval_is_upper"               (u32)i32
    clang function "gdk_keyval_is_lower"               (u32)i32
    clang function "gdk_keyval_to_unicode"             (u32)u32
    clang function "gdk_unicode_to_keyval"             (u32)u32
    clang proc     "gdk_parse_args"                    (ref i32,ref ref ref i8)
    clang proc     "gdk_init"                          (ref i32,ref ref ref i8)
    clang function "gdk_init_check"                    (ref i32,ref ref ref i8)i32
    clang proc     "gdk_add_option_entries_libgtk_only" (ref _GOptionGroup)
    clang proc     "gdk_pre_parse_libgtk_only"         ()
    clang function "gdk_get_program_class"             ()ref i8
    clang proc     "gdk_set_program_class"             (ref i8)
    clang proc     "gdk_notify_startup_complete"       ()
    clang proc     "gdk_notify_startup_complete_with_id" (ref i8)
    clang proc     "gdk_error_trap_push"               ()
    clang function "gdk_error_trap_pop"                ()i32
    clang proc     "gdk_error_trap_pop_ignored"        ()
    clang function "gdk_get_display_arg_name"          ()ref i8
    clang function "gdk_get_display"                   ()ref i8
    clang function "gdk_pointer_grab"                  (ref _GdkWindow,i32,i32,ref _GdkWindow,ref _GdkCursor,u32)i32
    clang function "gdk_keyboard_grab"                 (ref _GdkWindow,i32,u32)i32
    clang proc     "gdk_pointer_ungrab"                (u32)
    clang proc     "gdk_keyboard_ungrab"               (u32)
    clang function "gdk_pointer_is_grabbed"            ()i32
    clang function "gdk_screen_width"                  ()i32
    clang function "gdk_screen_height"                 ()i32
    clang function "gdk_screen_width_mm"               ()i32
    clang function "gdk_screen_height_mm"              ()i32
    clang proc     "gdk_set_double_click_time"         (u32)
    clang proc     "gdk_beep"                          ()
    clang proc     "gdk_flush"                         ()
    clang proc     "gdk_disable_multidevice"           ()
    clang function "gdk_pango_context_get_for_screen"  (ref _GdkScreen)ref _PangoContext
    clang function "gdk_pango_context_get"             ()ref _PangoContext
    clang function "gdk_pango_layout_line_get_clip_region" (ref _PangoLayoutLine,i32,i32,ref i32,i32)ref _cairo_region
    clang function "gdk_pango_layout_get_clip_region"  (ref _PangoLayout,i32,i32,ref i32,i32)ref _cairo_region
    const GDK_PROP_MODE_REPLACE              = 0
    const GDK_PROP_MODE_PREPEND              = 1
    const GDK_PROP_MODE_APPEND               = 2
    clang function "gdk_atom_intern"                   (ref i8,i32)ref _GdkAtom
    clang function "gdk_atom_intern_static_string"     (ref i8)ref _GdkAtom
    clang function "gdk_atom_name"                     (ref _GdkAtom)ref i8
    clang function "gdk_property_get"                  (ref _GdkWindow,ref _GdkAtom,ref _GdkAtom,u32,u32,i32,ref ref _GdkAtom,ref i32,ref i32,ref ref byte)i32
    clang proc     "gdk_property_change"               (ref _GdkWindow,ref _GdkAtom,ref _GdkAtom,i32,i32,ref byte,i32)
    clang proc     "gdk_property_delete"               (ref _GdkWindow,ref _GdkAtom)
    clang function "gdk_text_property_to_utf8_list_for_display" (ref _GdkDisplay,ref _GdkAtom,i32,ref byte,i32,ref ref ref i8)i32
    clang function "gdk_utf8_to_string_target"         (ref i8)ref i8
    clang function "gdk_rectangle_intersect"           (ref _cairo_rectangle_int,ref _cairo_rectangle_int,ref _cairo_rectangle_int)i32
    clang proc     "gdk_rectangle_union"               (ref _cairo_rectangle_int,ref _cairo_rectangle_int,ref _cairo_rectangle_int)
    clang function "gdk_rectangle_get_type"            ()u64
    clang function "gdk_selection_owner_set"           (ref _GdkWindow,ref _GdkAtom,u32,i32)i32
    clang function "gdk_selection_owner_get"           (ref _GdkAtom)ref _GdkWindow
    clang function "gdk_selection_owner_set_for_display" (ref _GdkDisplay,ref _GdkWindow,ref _GdkAtom,u32,i32)i32
    clang function "gdk_selection_owner_get_for_display" (ref _GdkDisplay,ref _GdkAtom)ref _GdkWindow
    clang proc     "gdk_selection_convert"             (ref _GdkWindow,ref _GdkAtom,ref _GdkAtom,u32)
    clang function "gdk_selection_property_get"        (ref _GdkWindow,ref ref byte,ref ref _GdkAtom,ref i32)i32
    clang proc     "gdk_selection_send_notify"         (ref _GdkWindow,ref _GdkAtom,ref _GdkAtom,ref _GdkAtom,u32)
    clang proc     "gdk_selection_send_notify_for_display" (ref _GdkDisplay,ref _GdkWindow,ref _GdkAtom,ref _GdkAtom,ref _GdkAtom,u32)
    record _GdkGeometry =
        var i32 min_width
        var i32 min_height
        var i32 max_width
        var i32 max_height
        var i32 base_width
        var i32 base_height
        var i32 width_inc
        var i32 height_inc
        var r64 min_aspect
        var r64 max_aspect
        var i32 win_gravity
    end

    record _GdkWindowAttr =
        var ref i8 title
        var i32 event_mask
        var i32 x
        var i32 y
        var i32 width
        var i32 height
        var i32 wclass
        var ref _GdkVisual visual
        var i32 window_type
        var ref _GdkCursor cursor
        var ref i8 wmclass_name
        var ref i8 wmclass_class
        var i32 override_redirect
        var i32 type_hint
    end

    record _GdkWindowRedirect =
        var int dummy    !empty record
    end

    const GDK_INPUT_OUTPUT                   = 0
    const GDK_INPUT_ONLY                     = 1
    const GDK_WINDOW_ROOT                    = 0
    const GDK_WINDOW_TOPLEVEL                = 1
    const GDK_WINDOW_CHILD                   = 2
    const GDK_WINDOW_TEMP                    = 3
    const GDK_WINDOW_FOREIGN                 = 4
    const GDK_WINDOW_OFFSCREEN               = 5
    const GDK_WA_TITLE                       = 2
    const GDK_WA_X                           = 4
    const GDK_WA_Y                           = 8
    const GDK_WA_CURSOR                      = 16
    const GDK_WA_VISUAL                      = 32
    const GDK_WA_WMCLASS                     = 64
    const GDK_WA_NOREDIR                     = 128
    const GDK_WA_TYPE_HINT                   = 256
    const GDK_HINT_POS                       = 1
    const GDK_HINT_MIN_SIZE                  = 2
    const GDK_HINT_MAX_SIZE                  = 4
    const GDK_HINT_BASE_SIZE                 = 8
    const GDK_HINT_ASPECT                    = 16
    const GDK_HINT_RESIZE_INC                = 32
    const GDK_HINT_WIN_GRAVITY               = 64
    const GDK_HINT_USER_POS                  = 128
    const GDK_HINT_USER_SIZE                 = 256
    const GDK_WINDOW_TYPE_HINT_NORMAL        = 0
    const GDK_WINDOW_TYPE_HINT_DIALOG        = 1
    const GDK_WINDOW_TYPE_HINT_MENU          = 2
    const GDK_WINDOW_TYPE_HINT_TOOLBAR       = 3
    const GDK_WINDOW_TYPE_HINT_SPLASHSCREEN  = 4
    const GDK_WINDOW_TYPE_HINT_UTILITY       = 5
    const GDK_WINDOW_TYPE_HINT_DOCK          = 6
    const GDK_WINDOW_TYPE_HINT_DESKTOP       = 7
    const GDK_WINDOW_TYPE_HINT_DROPDOWN_MENU = 8
    const GDK_WINDOW_TYPE_HINT_POPUP_MENU    = 9
    const GDK_WINDOW_TYPE_HINT_TOOLTIP       = 10
    const GDK_WINDOW_TYPE_HINT_NOTIFICATION  = 11
    const GDK_WINDOW_TYPE_HINT_COMBO         = 12
    const GDK_WINDOW_TYPE_HINT_DND           = 13
    const GDK_DECOR_ALL                      = 1
    const GDK_DECOR_BORDER                   = 2
    const GDK_DECOR_RESIZEH                  = 4
    const GDK_DECOR_TITLE                    = 8
    const GDK_DECOR_MENU                     = 16
    const GDK_DECOR_MINIMIZE                 = 32
    const GDK_DECOR_MAXIMIZE                 = 64
    const GDK_FUNC_ALL                       = 1
    const GDK_FUNC_RESIZE                    = 2
    const GDK_FUNC_MOVE                      = 4
    const GDK_FUNC_MINIMIZE                  = 8
    const GDK_FUNC_MAXIMIZE                  = 16
    const GDK_FUNC_CLOSE                     = 32
    const GDK_GRAVITY_NORTH_WEST             = 1
    const GDK_GRAVITY_NORTH                  = 2
    const GDK_GRAVITY_NORTH_EAST             = 3
    const GDK_GRAVITY_WEST                   = 4
    const GDK_GRAVITY_CENTER                 = 5
    const GDK_GRAVITY_EAST                   = 6
    const GDK_GRAVITY_SOUTH_WEST             = 7
    const GDK_GRAVITY_SOUTH                  = 8
    const GDK_GRAVITY_SOUTH_EAST             = 9
    const GDK_GRAVITY_STATIC                 = 10
    const GDK_WINDOW_EDGE_NORTH_WEST         = 0
    const GDK_WINDOW_EDGE_NORTH              = 1
    const GDK_WINDOW_EDGE_NORTH_EAST         = 2
    const GDK_WINDOW_EDGE_WEST               = 3
    const GDK_WINDOW_EDGE_EAST               = 4
    const GDK_WINDOW_EDGE_SOUTH_WEST         = 5
    const GDK_WINDOW_EDGE_SOUTH              = 6
    const GDK_WINDOW_EDGE_SOUTH_EAST         = 7
    record _GdkWindowClass =
        var _GObjectClass parent_class
        var ref clang function(ref _GdkWindow,r64,r64)ref _GdkWindow pick_embedded_child
        var ref clang proc(ref _GdkWindow,r64,r64,ref r64,ref r64) to_embedder
        var ref clang proc(ref _GdkWindow,r64,r64,ref r64,ref r64) from_embedder
        var ref clang function(ref _GdkWindow,i32,i32)ref _cairo_surface create_surface
        var ref clang proc() _gdk_reserved1
        var ref clang proc() _gdk_reserved2
        var ref clang proc() _gdk_reserved3
        var ref clang proc() _gdk_reserved4
        var ref clang proc() _gdk_reserved5
        var ref clang proc() _gdk_reserved6
        var ref clang proc() _gdk_reserved7
        var ref clang proc() _gdk_reserved8
    end

    clang function "gdk_window_get_type"               ()u64
    clang function "gdk_window_new"                    (ref _GdkWindow,ref _GdkWindowAttr,i32)ref _GdkWindow
    clang proc     "gdk_window_destroy"                (ref _GdkWindow)
    clang function "gdk_window_get_window_type"        (ref _GdkWindow)i32
    clang function "gdk_window_is_destroyed"           (ref _GdkWindow)i32
    clang function "gdk_window_get_visual"             (ref _GdkWindow)ref _GdkVisual
    clang function "gdk_window_get_screen"             (ref _GdkWindow)ref _GdkScreen
    clang function "gdk_window_get_display"            (ref _GdkWindow)ref _GdkDisplay
    clang function "gdk_window_at_pointer"             (ref i32,ref i32)ref _GdkWindow
    clang proc     "gdk_window_show"                   (ref _GdkWindow)
    clang proc     "gdk_window_hide"                   (ref _GdkWindow)
    clang proc     "gdk_window_withdraw"               (ref _GdkWindow)
    clang proc     "gdk_window_show_unraised"          (ref _GdkWindow)
    clang proc     "gdk_window_move"                   (ref _GdkWindow,i32,i32)
    clang proc     "gdk_window_resize"                 (ref _GdkWindow,i32,i32)
    clang proc     "gdk_window_move_resize"            (ref _GdkWindow,i32,i32,i32,i32)
    clang proc     "gdk_window_reparent"               (ref _GdkWindow,ref _GdkWindow,i32,i32)
    clang proc     "gdk_window_raise"                  (ref _GdkWindow)
    clang proc     "gdk_window_lower"                  (ref _GdkWindow)
    clang proc     "gdk_window_restack"                (ref _GdkWindow,ref _GdkWindow,i32)
    clang proc     "gdk_window_focus"                  (ref _GdkWindow,u32)
    clang proc     "gdk_window_set_user_data"          (ref _GdkWindow,ref void)
    clang proc     "gdk_window_set_override_redirect"  (ref _GdkWindow,i32)
    clang function "gdk_window_get_accept_focus"       (ref _GdkWindow)i32
    clang proc     "gdk_window_set_accept_focus"       (ref _GdkWindow,i32)
    clang function "gdk_window_get_focus_on_map"       (ref _GdkWindow)i32
    clang proc     "gdk_window_set_focus_on_map"       (ref _GdkWindow,i32)
    clang proc     "gdk_window_add_filter"             (ref _GdkWindow,ref clang function(ref void,ref _GdkEvent,ref void)i32,ref void)
    clang proc     "gdk_window_remove_filter"          (ref _GdkWindow,ref clang function(ref void,ref _GdkEvent,ref void)i32,ref void)
    clang proc     "gdk_window_scroll"                 (ref _GdkWindow,i32,i32)
    clang proc     "gdk_window_move_region"            (ref _GdkWindow,ref _cairo_region,i32,i32)
    clang function "gdk_window_ensure_native"          (ref _GdkWindow)i32
    clang proc     "gdk_window_shape_combine_region"   (ref _GdkWindow,ref _cairo_region,i32,i32)
    clang proc     "gdk_window_set_child_shapes"       (ref _GdkWindow)
    clang function "gdk_window_get_composited"         (ref _GdkWindow)i32
    clang proc     "gdk_window_set_composited"         (ref _GdkWindow,i32)
    clang proc     "gdk_window_merge_child_shapes"     (ref _GdkWindow)
    clang proc     "gdk_window_input_shape_combine_region" (ref _GdkWindow,ref _cairo_region,i32,i32)
    clang proc     "gdk_window_set_child_input_shapes" (ref _GdkWindow)
    clang proc     "gdk_window_merge_child_input_shapes" (ref _GdkWindow)
    clang function "gdk_window_is_visible"             (ref _GdkWindow)i32
    clang function "gdk_window_is_viewable"            (ref _GdkWindow)i32
    clang function "gdk_window_is_input_only"          (ref _GdkWindow)i32
    clang function "gdk_window_is_shaped"              (ref _GdkWindow)i32
    clang function "gdk_window_get_state"              (ref _GdkWindow)i32
    clang function "gdk_window_set_static_gravities"   (ref _GdkWindow,i32)i32
    clang function "gdk_window_has_native"             (ref _GdkWindow)i32
    clang proc     "gdk_window_set_type_hint"          (ref _GdkWindow,i32)
    clang function "gdk_window_get_type_hint"          (ref _GdkWindow)i32
    clang function "gdk_window_get_modal_hint"         (ref _GdkWindow)i32
    clang proc     "gdk_window_set_modal_hint"         (ref _GdkWindow,i32)
    clang proc     "gdk_window_set_skip_taskbar_hint"  (ref _GdkWindow,i32)
    clang proc     "gdk_window_set_skip_pager_hint"    (ref _GdkWindow,i32)
    clang proc     "gdk_window_set_urgency_hint"       (ref _GdkWindow,i32)
    clang proc     "gdk_window_set_geometry_hints"     (ref _GdkWindow,ref _GdkGeometry,i32)
    clang function "gdk_window_get_clip_region"        (ref _GdkWindow)ref _cairo_region
    clang function "gdk_window_get_visible_region"     (ref _GdkWindow)ref _cairo_region
    clang proc     "gdk_window_begin_paint_rect"       (ref _GdkWindow,ref _cairo_rectangle_int)
    clang proc     "gdk_window_begin_paint_region"     (ref _GdkWindow,ref _cairo_region)
    clang proc     "gdk_window_end_paint"              (ref _GdkWindow)
    clang proc     "gdk_window_flush"                  (ref _GdkWindow)
    clang proc     "gdk_window_set_title"              (ref _GdkWindow,ref i8)
    clang proc     "gdk_window_set_role"               (ref _GdkWindow,ref i8)
    clang proc     "gdk_window_set_startup_id"         (ref _GdkWindow,ref i8)
    clang proc     "gdk_window_set_transient_for"      (ref _GdkWindow,ref _GdkWindow)
    clang proc     "gdk_window_set_background"         (ref _GdkWindow,ref _GdkColor)
    clang proc     "gdk_window_set_background_rgba"    (ref _GdkWindow,ref _GdkRGBA)
    clang proc     "gdk_window_set_background_pattern" (ref _GdkWindow,ref _cairo_pattern)
    clang function "gdk_window_get_background_pattern" (ref _GdkWindow)ref _cairo_pattern
    clang proc     "gdk_window_set_cursor"             (ref _GdkWindow,ref _GdkCursor)
    clang function "gdk_window_get_cursor"             (ref _GdkWindow)ref _GdkCursor
    clang proc     "gdk_window_set_device_cursor"      (ref _GdkWindow,ref _GdkDevice,ref _GdkCursor)
    clang function "gdk_window_get_device_cursor"      (ref _GdkWindow,ref _GdkDevice)ref _GdkCursor
    clang proc     "gdk_window_get_user_data"          (ref _GdkWindow,ref ref void)
    clang proc     "gdk_window_get_geometry"           (ref _GdkWindow,ref i32,ref i32,ref i32,ref i32)
    clang function "gdk_window_get_width"              (ref _GdkWindow)i32
    clang function "gdk_window_get_height"             (ref _GdkWindow)i32
    clang proc     "gdk_window_get_position"           (ref _GdkWindow,ref i32,ref i32)
    clang function "gdk_window_get_origin"             (ref _GdkWindow,ref i32,ref i32)i32
    clang proc     "gdk_window_get_root_coords"        (ref _GdkWindow,i32,i32,ref i32,ref i32)
    clang proc     "gdk_window_coords_to_parent"       (ref _GdkWindow,r64,r64,ref r64,ref r64)
    clang proc     "gdk_window_coords_from_parent"     (ref _GdkWindow,r64,r64,ref r64,ref r64)
    clang proc     "gdk_window_get_root_origin"        (ref _GdkWindow,ref i32,ref i32)
    clang proc     "gdk_window_get_frame_extents"      (ref _GdkWindow,ref _cairo_rectangle_int)
    clang function "gdk_window_get_pointer"            (ref _GdkWindow,ref i32,ref i32,ref i32)ref _GdkWindow
    clang function "gdk_window_get_device_position"    (ref _GdkWindow,ref _GdkDevice,ref i32,ref i32,ref i32)ref _GdkWindow
    clang function "gdk_window_get_parent"             (ref _GdkWindow)ref _GdkWindow
    clang function "gdk_window_get_toplevel"           (ref _GdkWindow)ref _GdkWindow
    clang function "gdk_window_get_effective_parent"   (ref _GdkWindow)ref _GdkWindow
    clang function "gdk_window_get_effective_toplevel" (ref _GdkWindow)ref _GdkWindow
    clang function "gdk_window_get_children"           (ref _GdkWindow)ref _GList
    clang function "gdk_window_peek_children"          (ref _GdkWindow)ref _GList
    clang function "gdk_window_get_events"             (ref _GdkWindow)i32
    clang proc     "gdk_window_set_events"             (ref _GdkWindow,i32)
    clang proc     "gdk_window_set_device_events"      (ref _GdkWindow,ref _GdkDevice,i32)
    clang function "gdk_window_get_device_events"      (ref _GdkWindow,ref _GdkDevice)i32
    clang proc     "gdk_window_set_source_events"      (ref _GdkWindow,i32,i32)
    clang function "gdk_window_get_source_events"      (ref _GdkWindow,i32)i32
    clang proc     "gdk_window_set_icon_list"          (ref _GdkWindow,ref _GList)
    clang proc     "gdk_window_set_icon_name"          (ref _GdkWindow,ref i8)
    clang proc     "gdk_window_set_group"              (ref _GdkWindow,ref _GdkWindow)
    clang function "gdk_window_get_group"              (ref _GdkWindow)ref _GdkWindow
    clang proc     "gdk_window_set_decorations"        (ref _GdkWindow,i32)
    clang function "gdk_window_get_decorations"        (ref _GdkWindow,ref i32)i32
    clang proc     "gdk_window_set_functions"          (ref _GdkWindow,i32)
    clang function "gdk_window_create_similar_surface" (ref _GdkWindow,i32,i32,i32)ref _cairo_surface
    clang proc     "gdk_window_beep"                   (ref _GdkWindow)
    clang proc     "gdk_window_iconify"                (ref _GdkWindow)
    clang proc     "gdk_window_deiconify"              (ref _GdkWindow)
    clang proc     "gdk_window_stick"                  (ref _GdkWindow)
    clang proc     "gdk_window_unstick"                (ref _GdkWindow)
    clang proc     "gdk_window_maximize"               (ref _GdkWindow)
    clang proc     "gdk_window_unmaximize"             (ref _GdkWindow)
    clang proc     "gdk_window_fullscreen"             (ref _GdkWindow)
    clang proc     "gdk_window_unfullscreen"           (ref _GdkWindow)
    clang proc     "gdk_window_set_keep_above"         (ref _GdkWindow,i32)
    clang proc     "gdk_window_set_keep_below"         (ref _GdkWindow,i32)
    clang proc     "gdk_window_set_opacity"            (ref _GdkWindow,r64)
    clang proc     "gdk_window_register_dnd"           (ref _GdkWindow)
    clang function "gdk_window_get_drag_protocol"      (ref _GdkWindow,ref ref _GdkWindow)i32
    clang proc     "gdk_window_begin_resize_drag"      (ref _GdkWindow,i32,i32,i32,i32,u32)
    clang proc     "gdk_window_begin_resize_drag_for_device" (ref _GdkWindow,i32,ref _GdkDevice,i32,i32,i32,u32)
    clang proc     "gdk_window_begin_move_drag"        (ref _GdkWindow,i32,i32,i32,u32)
    clang proc     "gdk_window_begin_move_drag_for_device" (ref _GdkWindow,ref _GdkDevice,i32,i32,i32,u32)
    clang proc     "gdk_window_invalidate_rect"        (ref _GdkWindow,ref _cairo_rectangle_int,i32)
    clang proc     "gdk_window_invalidate_region"      (ref _GdkWindow,ref _cairo_region,i32)
    clang proc     "gdk_window_invalidate_maybe_recurse" (ref _GdkWindow,ref _cairo_region,ref clang function(ref _GdkWindow,ref void)i32,ref void)
    clang function "gdk_window_get_update_area"        (ref _GdkWindow)ref _cairo_region
    clang proc     "gdk_window_freeze_updates"         (ref _GdkWindow)
    clang proc     "gdk_window_thaw_updates"           (ref _GdkWindow)
    clang proc     "gdk_window_freeze_toplevel_updates_libgtk_only" (ref _GdkWindow)
    clang proc     "gdk_window_thaw_toplevel_updates_libgtk_only" (ref _GdkWindow)
    clang proc     "gdk_window_process_all_updates"    ()
    clang proc     "gdk_window_process_updates"        (ref _GdkWindow,i32)
    clang proc     "gdk_window_set_debug_updates"      (i32)
    clang proc     "gdk_window_constrain_size"         (ref _GdkGeometry,u32,i32,i32,ref i32,ref i32)
    clang proc     "gdk_window_enable_synchronized_configure" (ref _GdkWindow)
    clang proc     "gdk_window_configure_finished"     (ref _GdkWindow)
    clang function "gdk_get_default_root_window"       ()ref _GdkWindow
    clang function "gdk_offscreen_window_get_surface"  (ref _GdkWindow)ref _cairo_surface
    clang proc     "gdk_offscreen_window_set_embedder" (ref _GdkWindow,ref _GdkWindow)
    clang function "gdk_offscreen_window_get_embedder" (ref _GdkWindow)ref _GdkWindow
    clang proc     "gdk_window_geometry_changed"       (ref _GdkWindow)
    clang proc     "gdk_window_set_support_multidevice" (ref _GdkWindow,i32)
    clang function "gdk_window_get_support_multidevice" (ref _GdkWindow)i32
    clang proc     "gdk_test_render_sync"              (ref _GdkWindow)
    clang function "gdk_test_simulate_key"             (ref _GdkWindow,i32,i32,u32,i32,i32)i32
    clang function "gdk_test_simulate_button"          (ref _GdkWindow,i32,i32,u32,i32,i32)i32
    clang proc     "gdk_threads_init"                  ()
    clang proc     "gdk_threads_enter"                 ()
    clang proc     "gdk_threads_leave"                 ()
    clang proc     "gdk_threads_set_lock_functions"    (ref clang proc(),ref clang proc())
    clang function "gdk_threads_add_idle_full"         (i32,ref clang function(ref void)i32,ref void,ref clang proc(ref void))u32
    clang function "gdk_threads_add_idle"              (ref clang function(ref void)i32,ref void)u32
    clang function "gdk_threads_add_timeout_full"      (i32,u32,ref clang function(ref void)i32,ref void,ref clang proc(ref void))u32
    clang function "gdk_threads_add_timeout"           (u32,ref clang function(ref void)i32,ref void)u32
    clang function "gdk_threads_add_timeout_seconds_full" (i32,u32,ref clang function(ref void)i32,ref void,ref clang proc(ref void))u32
    clang function "gdk_threads_add_timeout_seconds"   (u32,ref clang function(ref void)i32,ref void)u32
    const GDK_VISUAL_STATIC_GRAY             = 0
    const GDK_VISUAL_GRAYSCALE               = 1
    const GDK_VISUAL_STATIC_COLOR            = 2
    const GDK_VISUAL_PSEUDO_COLOR            = 3
    const GDK_VISUAL_TRUE_COLOR              = 4
    const GDK_VISUAL_DIRECT_COLOR            = 5
    clang function "gdk_visual_get_type"               ()u64
    clang function "gdk_visual_get_best_depth"         ()i32
    clang function "gdk_visual_get_best_type"          ()i32
    clang function "gdk_visual_get_system"             ()ref _GdkVisual
    clang function "gdk_visual_get_best"               ()ref _GdkVisual
    clang function "gdk_visual_get_best_with_depth"    (i32)ref _GdkVisual
    clang function "gdk_visual_get_best_with_type"     (i32)ref _GdkVisual
    clang function "gdk_visual_get_best_with_both"     (i32,i32)ref _GdkVisual
    clang proc     "gdk_query_depths"                  (ref ref i32,ref i32)
    clang proc     "gdk_query_visual_types"            (ref ref i32,ref i32)
    clang function "gdk_list_visuals"                  ()ref _GList
    clang function "gdk_visual_get_screen"             (ref _GdkVisual)ref _GdkScreen
    clang function "gdk_visual_get_visual_type"        (ref _GdkVisual)i32
    clang function "gdk_visual_get_depth"              (ref _GdkVisual)i32
    clang function "gdk_visual_get_byte_order"         (ref _GdkVisual)i32
    clang function "gdk_visual_get_colormap_size"      (ref _GdkVisual)i32
    clang function "gdk_visual_get_bits_per_rgb"       (ref _GdkVisual)i32
    clang proc     "gdk_visual_get_red_pixel_details"  (ref _GdkVisual,ref u32,ref i32,ref i32)
    clang proc     "gdk_visual_get_green_pixel_details" (ref _GdkVisual,ref u32,ref i32,ref i32)
    clang proc     "gdk_visual_get_blue_pixel_details" (ref _GdkVisual,ref u32,ref i32,ref i32)
    const GTK_ALIGN_FILL                     = 0
    const GTK_ALIGN_START                    = 1
    const GTK_ALIGN_END                      = 2
    const GTK_ALIGN_CENTER                   = 3
    const GTK_ARROWS_BOTH                    = 0
    const GTK_ARROWS_START                   = 1
    const GTK_ARROWS_END                     = 2
    const GTK_ARROW_UP                       = 0
    const GTK_ARROW_DOWN                     = 1
    const GTK_ARROW_LEFT                     = 2
    const GTK_ARROW_RIGHT                    = 3
    const GTK_ARROW_NONE                     = 4
    const GTK_EXPAND                         = 1
    const GTK_SHRINK                         = 2
    const GTK_FILL                           = 4
    const GTK_BUTTONBOX_SPREAD               = 1
    const GTK_BUTTONBOX_EDGE                 = 2
    const GTK_BUTTONBOX_START                = 3
    const GTK_BUTTONBOX_END                  = 4
    const GTK_BUTTONBOX_CENTER               = 5
    const GTK_DELETE_CHARS                   = 0
    const GTK_DELETE_WORD_ENDS               = 1
    const GTK_DELETE_WORDS                   = 2
    const GTK_DELETE_DISPLAY_LINES           = 3
    const GTK_DELETE_DISPLAY_LINE_ENDS       = 4
    const GTK_DELETE_PARAGRAPH_ENDS          = 5
    const GTK_DELETE_PARAGRAPHS              = 6
    const GTK_DELETE_WHITESPACE              = 7
    const GTK_DIR_TAB_FORWARD                = 0
    const GTK_DIR_TAB_BACKWARD               = 1
    const GTK_DIR_UP                         = 2
    const GTK_DIR_DOWN                       = 3
    const GTK_DIR_LEFT                       = 4
    const GTK_DIR_RIGHT                      = 5
    const GTK_EXPANDER_COLLAPSED             = 0
    const GTK_EXPANDER_SEMI_COLLAPSED        = 1
    const GTK_EXPANDER_SEMI_EXPANDED         = 2
    const GTK_EXPANDER_EXPANDED              = 3
    const GTK_ICON_SIZE_INVALID              = 0
    const GTK_ICON_SIZE_MENU                 = 1
    const GTK_ICON_SIZE_SMALL_TOOLBAR        = 2
    const GTK_ICON_SIZE_LARGE_TOOLBAR        = 3
    const GTK_ICON_SIZE_BUTTON               = 4
    const GTK_ICON_SIZE_DND                  = 5
    const GTK_ICON_SIZE_DIALOG               = 6
    const GTK_SENSITIVITY_AUTO               = 0
    const GTK_SENSITIVITY_ON                 = 1
    const GTK_SENSITIVITY_OFF                = 2
    const GTK_TEXT_DIR_NONE                  = 0
    const GTK_TEXT_DIR_LTR                   = 1
    const GTK_TEXT_DIR_RTL                   = 2
    const GTK_JUSTIFY_LEFT                   = 0
    const GTK_JUSTIFY_RIGHT                  = 1
    const GTK_JUSTIFY_CENTER                 = 2
    const GTK_JUSTIFY_FILL                   = 3
    const GTK_MENU_DIR_PARENT                = 0
    const GTK_MENU_DIR_CHILD                 = 1
    const GTK_MENU_DIR_NEXT                  = 2
    const GTK_MENU_DIR_PREV                  = 3
    const GTK_MESSAGE_INFO                   = 0
    const GTK_MESSAGE_WARNING                = 1
    const GTK_MESSAGE_QUESTION               = 2
    const GTK_MESSAGE_ERROR                  = 3
    const GTK_MESSAGE_OTHER                  = 4
    const GTK_MOVEMENT_LOGICAL_POSITIONS     = 0
    const GTK_MOVEMENT_VISUAL_POSITIONS      = 1
    const GTK_MOVEMENT_WORDS                 = 2
    const GTK_MOVEMENT_DISPLAY_LINES         = 3
    const GTK_MOVEMENT_DISPLAY_LINE_ENDS     = 4
    const GTK_MOVEMENT_PARAGRAPHS            = 5
    const GTK_MOVEMENT_PARAGRAPH_ENDS        = 6
    const GTK_MOVEMENT_PAGES                 = 7
    const GTK_MOVEMENT_BUFFER_ENDS           = 8
    const GTK_MOVEMENT_HORIZONTAL_PAGES      = 9
    const GTK_SCROLL_STEPS                   = 0
    const GTK_SCROLL_PAGES                   = 1
    const GTK_SCROLL_ENDS                    = 2
    const GTK_SCROLL_HORIZONTAL_STEPS        = 3
    const GTK_SCROLL_HORIZONTAL_PAGES        = 4
    const GTK_SCROLL_HORIZONTAL_ENDS         = 5
    const GTK_ORIENTATION_HORIZONTAL         = 0
    const GTK_ORIENTATION_VERTICAL           = 1
    const GTK_CORNER_TOP_LEFT                = 0
    const GTK_CORNER_BOTTOM_LEFT             = 1
    const GTK_CORNER_TOP_RIGHT               = 2
    const GTK_CORNER_BOTTOM_RIGHT            = 3
    const GTK_PACK_START                     = 0
    const GTK_PACK_END                       = 1
    const GTK_PATH_PRIO_LOWEST               = 0
    const GTK_PATH_PRIO_GTK                  = 4
    const GTK_PATH_PRIO_APPLICATION          = 8
    const GTK_PATH_PRIO_THEME                = 10
    const GTK_PATH_PRIO_RC                   = 12
    const GTK_PATH_PRIO_HIGHEST              = 15
    const GTK_PATH_WIDGET                    = 0
    const GTK_PATH_WIDGET_CLASS              = 1
    const GTK_PATH_CLASS                     = 2
    const GTK_POLICY_ALWAYS                  = 0
    const GTK_POLICY_AUTOMATIC               = 1
    const GTK_POLICY_NEVER                   = 2
    const GTK_POS_LEFT                       = 0
    const GTK_POS_RIGHT                      = 1
    const GTK_POS_TOP                        = 2
    const GTK_POS_BOTTOM                     = 3
    const GTK_RELIEF_NORMAL                  = 0
    const GTK_RELIEF_HALF                    = 1
    const GTK_RELIEF_NONE                    = 2
    const GTK_RESIZE_PARENT                  = 0
    const GTK_RESIZE_QUEUE                   = 1
    const GTK_RESIZE_IMMEDIATE               = 2
    const GTK_SCROLL_NONE                    = 0
    const GTK_SCROLL_JUMP                    = 1
    const GTK_SCROLL_STEP_BACKWARD           = 2
    const GTK_SCROLL_STEP_FORWARD            = 3
    const GTK_SCROLL_PAGE_BACKWARD           = 4
    const GTK_SCROLL_PAGE_FORWARD            = 5
    const GTK_SCROLL_STEP_UP                 = 6
    const GTK_SCROLL_STEP_DOWN               = 7
    const GTK_SCROLL_PAGE_UP                 = 8
    const GTK_SCROLL_PAGE_DOWN               = 9
    const GTK_SCROLL_STEP_LEFT               = 10
    const GTK_SCROLL_STEP_RIGHT              = 11
    const GTK_SCROLL_PAGE_LEFT               = 12
    const GTK_SCROLL_PAGE_RIGHT              = 13
    const GTK_SCROLL_START                   = 14
    const GTK_SCROLL_END                     = 15
    const GTK_SELECTION_NONE                 = 0
    const GTK_SELECTION_SINGLE               = 1
    const GTK_SELECTION_BROWSE               = 2
    const GTK_SELECTION_MULTIPLE             = 3
    const GTK_SHADOW_NONE                    = 0
    const GTK_SHADOW_IN                      = 1
    const GTK_SHADOW_OUT                     = 2
    const GTK_SHADOW_ETCHED_IN               = 3
    const GTK_SHADOW_ETCHED_OUT              = 4
    const GTK_STATE_NORMAL                   = 0
    const GTK_STATE_ACTIVE                   = 1
    const GTK_STATE_PRELIGHT                 = 2
    const GTK_STATE_SELECTED                 = 3
    const GTK_STATE_INSENSITIVE              = 4
    const GTK_STATE_INCONSISTENT             = 5
    const GTK_STATE_FOCUSED                  = 6
    const GTK_TOOLBAR_ICONS                  = 0
    const GTK_TOOLBAR_TEXT                   = 1
    const GTK_TOOLBAR_BOTH                   = 2
    const GTK_TOOLBAR_BOTH_HORIZ             = 3
    const GTK_WIN_POS_NONE                   = 0
    const GTK_WIN_POS_CENTER                 = 1
    const GTK_WIN_POS_MOUSE                  = 2
    const GTK_WIN_POS_CENTER_ALWAYS          = 3
    const GTK_WIN_POS_CENTER_ON_PARENT       = 4
    const GTK_WINDOW_TOPLEVEL                = 0
    const GTK_WINDOW_POPUP                   = 1
    const GTK_WRAP_NONE                      = 0
    const GTK_WRAP_CHAR                      = 1
    const GTK_WRAP_WORD                      = 2
    const GTK_WRAP_WORD_CHAR                 = 3
    const GTK_SORT_ASCENDING                 = 0
    const GTK_SORT_DESCENDING                = 1
    const GTK_IM_PREEDIT_NOTHING             = 0
    const GTK_IM_PREEDIT_CALLBACK            = 1
    const GTK_IM_PREEDIT_NONE                = 2
    const GTK_IM_STATUS_NOTHING              = 0
    const GTK_IM_STATUS_CALLBACK             = 1
    const GTK_IM_STATUS_NONE                 = 2
    const GTK_PACK_DIRECTION_LTR             = 0
    const GTK_PACK_DIRECTION_RTL             = 1
    const GTK_PACK_DIRECTION_TTB             = 2
    const GTK_PACK_DIRECTION_BTT             = 3
    const GTK_PRINT_PAGES_ALL                = 0
    const GTK_PRINT_PAGES_CURRENT            = 1
    const GTK_PRINT_PAGES_RANGES             = 2
    const GTK_PRINT_PAGES_SELECTION          = 3
    const GTK_PAGE_SET_ALL                   = 0
    const GTK_PAGE_SET_EVEN                  = 1
    const GTK_PAGE_SET_ODD                   = 2
    const GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_TOP_TO_BOTTOM = 0
    const GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_BOTTOM_TO_TOP = 1
    const GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_TOP_TO_BOTTOM = 2
    const GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_BOTTOM_TO_TOP = 3
    const GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_LEFT_TO_RIGHT = 4
    const GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_RIGHT_TO_LEFT = 5
    const GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_LEFT_TO_RIGHT = 6
    const GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_RIGHT_TO_LEFT = 7
    const GTK_PAGE_ORIENTATION_PORTRAIT      = 0
    const GTK_PAGE_ORIENTATION_LANDSCAPE     = 1
    const GTK_PAGE_ORIENTATION_REVERSE_PORTRAIT = 2
    const GTK_PAGE_ORIENTATION_REVERSE_LANDSCAPE = 3
    const GTK_PRINT_QUALITY_LOW              = 0
    const GTK_PRINT_QUALITY_NORMAL           = 1
    const GTK_PRINT_QUALITY_HIGH             = 2
    const GTK_PRINT_QUALITY_DRAFT            = 3
    const GTK_PRINT_DUPLEX_SIMPLEX           = 0
    const GTK_PRINT_DUPLEX_HORIZONTAL        = 1
    const GTK_PRINT_DUPLEX_VERTICAL          = 2
    const GTK_UNIT_NONE                      = 0
    const GTK_UNIT_POINTS                    = 1
    const GTK_UNIT_INCH                      = 2
    const GTK_UNIT_MM                        = 3
    const GTK_TREE_VIEW_GRID_LINES_NONE      = 0
    const GTK_TREE_VIEW_GRID_LINES_HORIZONTAL = 1
    const GTK_TREE_VIEW_GRID_LINES_VERTICAL  = 2
    const GTK_TREE_VIEW_GRID_LINES_BOTH      = 3
    const GTK_DRAG_RESULT_SUCCESS            = 0
    const GTK_DRAG_RESULT_NO_TARGET          = 1
    const GTK_DRAG_RESULT_USER_CANCELLED     = 2
    const GTK_DRAG_RESULT_TIMEOUT_EXPIRED    = 3
    const GTK_DRAG_RESULT_GRAB_BROKEN        = 4
    const GTK_DRAG_RESULT_ERROR              = 5
    const GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH  = 0
    const GTK_SIZE_REQUEST_WIDTH_FOR_HEIGHT  = 1
    const GTK_SIZE_REQUEST_CONSTANT_SIZE     = 2
    const GTK_SCROLL_MINIMUM                 = 0
    const GTK_SCROLL_NATURAL                 = 1
    const GTK_STATE_FLAG_NORMAL              = 0
    const GTK_STATE_FLAG_ACTIVE              = 1
    const GTK_STATE_FLAG_PRELIGHT            = 2
    const GTK_STATE_FLAG_SELECTED            = 4
    const GTK_STATE_FLAG_INSENSITIVE         = 8
    const GTK_STATE_FLAG_INCONSISTENT        = 16
    const GTK_STATE_FLAG_FOCUSED             = 32
    const GTK_STATE_FLAG_BACKDROP            = 64
    const GTK_REGION_EVEN                    = 1
    const GTK_REGION_ODD                     = 2
    const GTK_REGION_FIRST                   = 4
    const GTK_REGION_LAST                    = 8
    const GTK_REGION_ONLY                    = 16
    const GTK_REGION_SORTED                  = 32
    const GTK_JUNCTION_NONE                  = 0
    const GTK_JUNCTION_CORNER_TOPLEFT        = 1
    const GTK_JUNCTION_CORNER_TOPRIGHT       = 2
    const GTK_JUNCTION_CORNER_BOTTOMLEFT     = 4
    const GTK_JUNCTION_CORNER_BOTTOMRIGHT    = 8
    const GTK_JUNCTION_TOP                   = 3
    const GTK_JUNCTION_BOTTOM                = 12
    const GTK_JUNCTION_LEFT                  = 5
    const GTK_JUNCTION_RIGHT                 = 10
    const GTK_BORDER_STYLE_NONE              = 0
    const GTK_BORDER_STYLE_SOLID             = 1
    const GTK_BORDER_STYLE_INSET             = 2
    const GTK_BORDER_STYLE_OUTSET            = 3
    const GTK_BORDER_STYLE_HIDDEN            = 4
    const GTK_BORDER_STYLE_DOTTED            = 5
    const GTK_BORDER_STYLE_DASHED            = 6
    const GTK_BORDER_STYLE_DOUBLE            = 7
    const GTK_BORDER_STYLE_GROOVE            = 8
    const GTK_BORDER_STYLE_RIDGE             = 9
    const GTK_LEVEL_BAR_MODE_CONTINUOUS      = 0
    const GTK_LEVEL_BAR_MODE_DISCRETE        = 1
    const GTK_INPUT_PURPOSE_FREE_FORM        = 0
    const GTK_INPUT_PURPOSE_ALPHA            = 1
    const GTK_INPUT_PURPOSE_DIGITS           = 2
    const GTK_INPUT_PURPOSE_NUMBER           = 3
    const GTK_INPUT_PURPOSE_PHONE            = 4
    const GTK_INPUT_PURPOSE_URL              = 5
    const GTK_INPUT_PURPOSE_EMAIL            = 6
    const GTK_INPUT_PURPOSE_NAME             = 7
    const GTK_INPUT_PURPOSE_PASSWORD         = 8
    const GTK_INPUT_PURPOSE_PIN              = 9
    const GTK_INPUT_HINT_NONE                = 0
    const GTK_INPUT_HINT_SPELLCHECK          = 1
    const GTK_INPUT_HINT_NO_SPELLCHECK       = 2
    const GTK_INPUT_HINT_WORD_COMPLETION     = 4
    const GTK_INPUT_HINT_LOWERCASE           = 8
    const GTK_INPUT_HINT_UPPERCASE_CHARS     = 16
    const GTK_INPUT_HINT_UPPERCASE_WORDS     = 32
    const GTK_INPUT_HINT_UPPERCASE_SENTENCES = 64
    const GTK_INPUT_HINT_INHIBIT_OSK         = 128
    const GTK_ACCEL_VISIBLE                  = 1
    const GTK_ACCEL_LOCKED                   = 2
    const GTK_ACCEL_MASK                     = 7
    record _GtkAccelGroup =
        var _GObject parent
        var ref _GtkAccelGroupPrivate priv
    end

    record _GtkAccelGroupClass =
        var _GObjectClass parent_class
        var ref clang proc(ref _GtkAccelGroup,u32,i32,ref _GClosure) accel_changed
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    record _GtkAccelGroupPrivate =
        var int dummy    !empty record
    end

    record _GtkAccelKey =
        var u32 accel_key
        var i32 accel_mods
        var u32 accel_flags
    end

    record _GtkAccelGroupEntry =
        var _GtkAccelKey key
        var ref _GClosure closure
        var u32 accel_path_quark
    end

    clang function "gtk_accel_group_get_type"          ()u64
    clang function "gtk_accel_group_new"               ()ref _GtkAccelGroup
    clang function "gtk_accel_group_get_is_locked"     (ref _GtkAccelGroup)i32
    clang function "gtk_accel_group_get_modifier_mask" (ref _GtkAccelGroup)i32
    clang proc     "gtk_accel_group_lock"              (ref _GtkAccelGroup)
    clang proc     "gtk_accel_group_unlock"            (ref _GtkAccelGroup)
    clang proc     "gtk_accel_group_connect"           (ref _GtkAccelGroup,u32,i32,i32,ref _GClosure)
    clang proc     "gtk_accel_group_connect_by_path"   (ref _GtkAccelGroup,ref i8,ref _GClosure)
    clang function "gtk_accel_group_disconnect"        (ref _GtkAccelGroup,ref _GClosure)i32
    clang function "gtk_accel_group_disconnect_key"    (ref _GtkAccelGroup,u32,i32)i32
    clang function "gtk_accel_group_activate"          (ref _GtkAccelGroup,u32,ref _GObject,u32,i32)i32
    clang proc     "_gtk_accel_group_attach"           (ref _GtkAccelGroup,ref _GObject)
    clang proc     "_gtk_accel_group_detach"           (ref _GtkAccelGroup,ref _GObject)
    clang function "gtk_accel_groups_activate"         (ref _GObject,u32,i32)i32
    clang function "gtk_accel_groups_from_object"      (ref _GObject)ref _GSList
    clang function "gtk_accel_group_find"              (ref _GtkAccelGroup,ref clang function(ref _GtkAccelKey,ref _GClosure,ref void)i32,ref void)ref _GtkAccelKey
    clang function "gtk_accel_group_from_accel_closure" (ref _GClosure)ref _GtkAccelGroup
    clang function "gtk_accelerator_valid"             (u32,i32)i32
    clang proc     "gtk_accelerator_parse"             (ref i8,ref u32,ref i32)
    clang proc     "gtk_accelerator_parse_with_keycode" (ref i8,ref u32,ref ref u32,ref i32)
    clang function "gtk_accelerator_name"              (u32,i32)ref i8
    clang function "gtk_accelerator_name_with_keycode" (ref _GdkDisplay,u32,u32,i32)ref i8
    clang function "gtk_accelerator_get_label"         (u32,i32)ref i8
    clang function "gtk_accelerator_get_label_with_keycode" (ref _GdkDisplay,u32,u32,i32)ref i8
    clang proc     "gtk_accelerator_set_default_mod_mask" (i32)
    clang function "gtk_accelerator_get_default_mod_mask" ()i32
    clang function "gtk_accel_group_query"             (ref _GtkAccelGroup,u32,i32,ref u32)ref _GtkAccelGroupEntry
    clang proc     "_gtk_accel_group_reconnect"        (ref _GtkAccelGroup,u32)
    clang function "_gtk_accel_group_get_accelerables" (ref _GtkAccelGroup)ref _GSList
    record _GtkBorder =
        var i16 left
        var i16 right
        var i16 top
        var i16 bottom
    end

    clang function "gtk_border_get_type"               ()u64
    clang function "gtk_border_new"                    ()ref _GtkBorder
    clang function "gtk_border_copy"                   (ref _GtkBorder)ref _GtkBorder
    clang proc     "gtk_border_free"                   (ref _GtkBorder)
    record _GtkAdjustment =
        var _GObject parent_instance
        var ref _GtkAdjustmentPrivate priv
    end

    record _GtkClipboard =
        var int dummy    !empty record
    end

    record _GtkIconSet =
        var int dummy    !empty record
    end

    record _GtkIconSource =
        var int dummy    !empty record
    end

    record _GtkRcStyle =
        var _GObject parent_instance
        var ref i8 name
        var [5]ref i8 bg_pixmap_name
        var ref _PangoFontDescription font_desc
        var [5]i32 color_flags
        var [5]_GdkColor fg
        var [5]_GdkColor bg
        var [5]_GdkColor text
        var [5]_GdkColor base
        var i32 xthickness
        var i32 ythickness
        var ref _GArray rc_properties
        var ref _GSList rc_style_lists
        var ref _GSList icon_factories
        var u32 engine_specified
    end

    record _GtkRequisition =
        var i32 width
        var i32 height
    end

    record _GtkSelectionData =
        var int dummy    !empty record
    end

    record _GtkSettings =
        var _GObject parent_instance
        var ref _GtkSettingsPrivate priv
    end

    record _GtkStyle =
        var _GObject parent_instance
        var [5]_GdkColor fg
        var [5]_GdkColor bg
        var [5]_GdkColor light
        var [5]_GdkColor dark
        var [5]_GdkColor mid
        var [5]_GdkColor text
        var [5]_GdkColor base
        var [5]_GdkColor text_aa
        var _GdkColor black
        var _GdkColor white
        var ref _PangoFontDescription font_desc
        var i32 xthickness
        var i32 ythickness
        var [5]ref _cairo_pattern background
        var i32 attach_count
        var ref _GdkVisual visual
        var ref _PangoFontDescription private_font_desc
        var ref _GtkRcStyle rc_style
        var ref _GSList styles
        var ref _GArray property_cache
        var ref _GSList icon_factories
    end

    record _GtkStyleContext =
        var _GObject parent_object
        var ref _GtkStyleContextPrivate priv
    end

    record _GtkTooltip =
        var int dummy    !empty record
    end

    record _GtkWidget =
        var _GObject parent_instance
        var ref _GtkWidgetPrivate priv
    end

    record _GtkWidgetPath =
        var int dummy    !empty record
    end

    record _GtkWindow =
        var _GtkBin bin
        var ref _GtkWindowPrivate priv
    end

    const ATK_STATE_INVALID                  = 0
    const ATK_STATE_ACTIVE                   = 1
    const ATK_STATE_ARMED                    = 2
    const ATK_STATE_BUSY                     = 3
    const ATK_STATE_CHECKED                  = 4
    const ATK_STATE_DEFUNCT                  = 5
    const ATK_STATE_EDITABLE                 = 6
    const ATK_STATE_ENABLED                  = 7
    const ATK_STATE_EXPANDABLE               = 8
    const ATK_STATE_EXPANDED                 = 9
    const ATK_STATE_FOCUSABLE                = 10
    const ATK_STATE_FOCUSED                  = 11
    const ATK_STATE_HORIZONTAL               = 12
    const ATK_STATE_ICONIFIED                = 13
    const ATK_STATE_MODAL                    = 14
    const ATK_STATE_MULTI_LINE               = 15
    const ATK_STATE_MULTISELECTABLE          = 16
    const ATK_STATE_OPAQUE                   = 17
    const ATK_STATE_PRESSED                  = 18
    const ATK_STATE_RESIZABLE                = 19
    const ATK_STATE_SELECTABLE               = 20
    const ATK_STATE_SELECTED                 = 21
    const ATK_STATE_SENSITIVE                = 22
    const ATK_STATE_SHOWING                  = 23
    const ATK_STATE_SINGLE_LINE              = 24
    const ATK_STATE_STALE                    = 25
    const ATK_STATE_TRANSIENT                = 26
    const ATK_STATE_VERTICAL                 = 27
    const ATK_STATE_VISIBLE                  = 28
    const ATK_STATE_MANAGES_DESCENDANTS      = 29
    const ATK_STATE_INDETERMINATE            = 30
    const ATK_STATE_TRUNCATED                = 31
    const ATK_STATE_REQUIRED                 = 32
    const ATK_STATE_INVALID_ENTRY            = 33
    const ATK_STATE_SUPPORTS_AUTOCOMPLETION  = 34
    const ATK_STATE_SELECTABLE_TEXT          = 35
    const ATK_STATE_DEFAULT                  = 36
    const ATK_STATE_ANIMATED                 = 37
    const ATK_STATE_VISITED                  = 38
    const ATK_STATE_LAST_DEFINED             = 39
    clang function "atk_state_type_register"           (ref i8)i32
    clang function "atk_state_type_get_name"           (i32)ref i8
    clang function "atk_state_type_for_name"           (ref i8)i32
    const ATK_RELATION_NULL                  = 0
    const ATK_RELATION_CONTROLLED_BY         = 1
    const ATK_RELATION_CONTROLLER_FOR        = 2
    const ATK_RELATION_LABEL_FOR             = 3
    const ATK_RELATION_LABELLED_BY           = 4
    const ATK_RELATION_MEMBER_OF             = 5
    const ATK_RELATION_NODE_CHILD_OF         = 6
    const ATK_RELATION_FLOWS_TO              = 7
    const ATK_RELATION_FLOWS_FROM            = 8
    const ATK_RELATION_SUBWINDOW_OF          = 9
    const ATK_RELATION_EMBEDS                = 10
    const ATK_RELATION_EMBEDDED_BY           = 11
    const ATK_RELATION_POPUP_FOR             = 12
    const ATK_RELATION_PARENT_WINDOW_OF      = 13
    const ATK_RELATION_DESCRIBED_BY          = 14
    const ATK_RELATION_DESCRIPTION_FOR       = 15
    const ATK_RELATION_NODE_PARENT_OF        = 16
    const ATK_RELATION_LAST_DEFINED          = 17
    const ATK_ROLE_INVALID                   = 0
    const ATK_ROLE_ACCEL_LABEL               = 1
    const ATK_ROLE_ALERT                     = 2
    const ATK_ROLE_ANIMATION                 = 3
    const ATK_ROLE_ARROW                     = 4
    const ATK_ROLE_CALENDAR                  = 5
    const ATK_ROLE_CANVAS                    = 6
    const ATK_ROLE_CHECK_BOX                 = 7
    const ATK_ROLE_CHECK_MENU_ITEM           = 8
    const ATK_ROLE_COLOR_CHOOSER             = 9
    const ATK_ROLE_COLUMN_HEADER             = 10
    const ATK_ROLE_COMBO_BOX                 = 11
    const ATK_ROLE_DATE_EDITOR               = 12
    const ATK_ROLE_DESKTOP_ICON              = 13
    const ATK_ROLE_DESKTOP_FRAME             = 14
    const ATK_ROLE_DIAL                      = 15
    const ATK_ROLE_DIALOG                    = 16
    const ATK_ROLE_DIRECTORY_PANE            = 17
    const ATK_ROLE_DRAWING_AREA              = 18
    const ATK_ROLE_FILE_CHOOSER              = 19
    const ATK_ROLE_FILLER                    = 20
    const ATK_ROLE_FONT_CHOOSER              = 21
    const ATK_ROLE_FRAME                     = 22
    const ATK_ROLE_GLASS_PANE                = 23
    const ATK_ROLE_HTML_CONTAINER            = 24
    const ATK_ROLE_ICON                      = 25
    const ATK_ROLE_IMAGE                     = 26
    const ATK_ROLE_INTERNAL_FRAME            = 27
    const ATK_ROLE_LABEL                     = 28
    const ATK_ROLE_LAYERED_PANE              = 29
    const ATK_ROLE_LIST                      = 30
    const ATK_ROLE_LIST_ITEM                 = 31
    const ATK_ROLE_MENU                      = 32
    const ATK_ROLE_MENU_BAR                  = 33
    const ATK_ROLE_MENU_ITEM                 = 34
    const ATK_ROLE_OPTION_PANE               = 35
    const ATK_ROLE_PAGE_TAB                  = 36
    const ATK_ROLE_PAGE_TAB_LIST             = 37
    const ATK_ROLE_PANEL                     = 38
    const ATK_ROLE_PASSWORD_TEXT             = 39
    const ATK_ROLE_POPUP_MENU                = 40
    const ATK_ROLE_PROGRESS_BAR              = 41
    const ATK_ROLE_PUSH_BUTTON               = 42
    const ATK_ROLE_RADIO_BUTTON              = 43
    const ATK_ROLE_RADIO_MENU_ITEM           = 44
    const ATK_ROLE_ROOT_PANE                 = 45
    const ATK_ROLE_ROW_HEADER                = 46
    const ATK_ROLE_SCROLL_BAR                = 47
    const ATK_ROLE_SCROLL_PANE               = 48
    const ATK_ROLE_SEPARATOR                 = 49
    const ATK_ROLE_SLIDER                    = 50
    const ATK_ROLE_SPLIT_PANE                = 51
    const ATK_ROLE_SPIN_BUTTON               = 52
    const ATK_ROLE_STATUSBAR                 = 53
    const ATK_ROLE_TABLE                     = 54
    const ATK_ROLE_TABLE_CELL                = 55
    const ATK_ROLE_TABLE_COLUMN_HEADER       = 56
    const ATK_ROLE_TABLE_ROW_HEADER          = 57
    const ATK_ROLE_TEAR_OFF_MENU_ITEM        = 58
    const ATK_ROLE_TERMINAL                  = 59
    const ATK_ROLE_TEXT                      = 60
    const ATK_ROLE_TOGGLE_BUTTON             = 61
    const ATK_ROLE_TOOL_BAR                  = 62
    const ATK_ROLE_TOOL_TIP                  = 63
    const ATK_ROLE_TREE                      = 64
    const ATK_ROLE_TREE_TABLE                = 65
    const ATK_ROLE_UNKNOWN                   = 66
    const ATK_ROLE_VIEWPORT                  = 67
    const ATK_ROLE_WINDOW                    = 68
    const ATK_ROLE_HEADER                    = 69
    const ATK_ROLE_FOOTER                    = 70
    const ATK_ROLE_PARAGRAPH                 = 71
    const ATK_ROLE_RULER                     = 72
    const ATK_ROLE_APPLICATION               = 73
    const ATK_ROLE_AUTOCOMPLETE              = 74
    const ATK_ROLE_EDITBAR                   = 75
    const ATK_ROLE_EMBEDDED                  = 76
    const ATK_ROLE_ENTRY                     = 77
    const ATK_ROLE_CHART                     = 78
    const ATK_ROLE_CAPTION                   = 79
    const ATK_ROLE_DOCUMENT_FRAME            = 80
    const ATK_ROLE_HEADING                   = 81
    const ATK_ROLE_PAGE                      = 82
    const ATK_ROLE_SECTION                   = 83
    const ATK_ROLE_REDUNDANT_OBJECT          = 84
    const ATK_ROLE_FORM                      = 85
    const ATK_ROLE_LINK                      = 86
    const ATK_ROLE_INPUT_METHOD_WINDOW       = 87
    const ATK_ROLE_TABLE_ROW                 = 88
    const ATK_ROLE_TREE_ITEM                 = 89
    const ATK_ROLE_DOCUMENT_SPREADSHEET      = 90
    const ATK_ROLE_DOCUMENT_PRESENTATION     = 91
    const ATK_ROLE_DOCUMENT_TEXT             = 92
    const ATK_ROLE_DOCUMENT_WEB              = 93
    const ATK_ROLE_DOCUMENT_EMAIL            = 94
    const ATK_ROLE_COMMENT                   = 95
    const ATK_ROLE_LIST_BOX                  = 96
    const ATK_ROLE_GROUPING                  = 97
    const ATK_ROLE_IMAGE_MAP                 = 98
    const ATK_ROLE_NOTIFICATION              = 99
    const ATK_ROLE_INFO_BAR                  = 100
    const ATK_ROLE_LAST_DEFINED              = 101
    clang function "atk_role_register"                 (ref i8)i32
    const ATK_LAYER_INVALID                  = 0
    const ATK_LAYER_BACKGROUND               = 1
    const ATK_LAYER_CANVAS                   = 2
    const ATK_LAYER_WIDGET                   = 3
    const ATK_LAYER_MDI                      = 4
    const ATK_LAYER_POPUP                    = 5
    const ATK_LAYER_OVERLAY                  = 6
    const ATK_LAYER_WINDOW                   = 7
    record _AtkAttribute =
        var ref i8 name
        var ref i8 value
    end

    record _AtkImplementor =
        var int dummy    !empty record
    end

    record _AtkImplementorIface =
        var _GTypeInterface parent
        var ref clang function(ref _AtkImplementor)ref _AtkObject ref_accessible
    end

    record _AtkObject =
        var _GObject parent
        var ref i8 description
        var ref i8 name
        var ref _AtkObject accessible_parent
        var i32 role
        var ref _AtkRelationSet relation_set
        var i32 layer
    end

    record _AtkObjectClass =
        var _GObjectClass parent
        var ref clang function(ref _AtkObject)ref i8 get_name
        var ref clang function(ref _AtkObject)ref i8 get_description
        var ref clang function(ref _AtkObject)ref _AtkObject get_parent
        var ref clang function(ref _AtkObject)i32 get_n_children
        var ref clang function(ref _AtkObject,i32)ref _AtkObject ref_child
        var ref clang function(ref _AtkObject)i32 get_index_in_parent
        var ref clang function(ref _AtkObject)ref _AtkRelationSet ref_relation_set
        var ref clang function(ref _AtkObject)i32 get_role
        var ref clang function(ref _AtkObject)i32 get_layer
        var ref clang function(ref _AtkObject)i32 get_mdi_zorder
        var ref clang function(ref _AtkObject)ref _AtkStateSet ref_state_set
        var ref clang proc(ref _AtkObject,ref i8) set_name
        var ref clang proc(ref _AtkObject,ref i8) set_description
        var ref clang proc(ref _AtkObject,ref _AtkObject) set_parent
        var ref clang proc(ref _AtkObject,i32) set_role
        var ref clang function(ref _AtkObject,ref ref clang proc(ref _AtkObject,ref _AtkPropertyValues))u32 connect_property_change_handler
        var ref clang proc(ref _AtkObject,u32) remove_property_change_handler
        var ref clang proc(ref _AtkObject,ref void) initialize
        var ref clang proc(ref _AtkObject,u32,ref void) children_changed
        var ref clang proc(ref _AtkObject,i32) focus_event
        var ref clang proc(ref _AtkObject,ref _AtkPropertyValues) property_change
        var ref clang proc(ref _AtkObject,ref i8,i32) state_change
        var ref clang proc(ref _AtkObject) visible_data_changed
        var ref clang proc(ref _AtkObject,ref ref void) active_descendant_changed
        var ref clang function(ref _AtkObject)ref _GSList get_attributes
        var ref clang function(ref void)i32 pad1
        var ref clang function(ref void)i32 pad2
    end

    record _AtkRelationSet =
        var _GObject parent
        var ref _GPtrArray relations
    end

    record _AtkStateSet =
        var _GObject parent
    end

    record _AtkPropertyValues =
        var ref i8 property_name
        var _GValue old_value
        var _GValue new_value
    end

    clang function "atk_object_get_type"               ()u64
    clang function "atk_implementor_get_type"          ()u64
    clang function "atk_implementor_ref_accessible"    (ref _AtkImplementor)ref _AtkObject
    clang function "atk_object_get_name"               (ref _AtkObject)ref i8
    clang function "atk_object_get_description"        (ref _AtkObject)ref i8
    clang function "atk_object_get_parent"             (ref _AtkObject)ref _AtkObject
    clang function "atk_object_get_n_accessible_children" (ref _AtkObject)i32
    clang function "atk_object_ref_accessible_child"   (ref _AtkObject,i32)ref _AtkObject
    clang function "atk_object_ref_relation_set"       (ref _AtkObject)ref _AtkRelationSet
    clang function "atk_object_get_role"               (ref _AtkObject)i32
    clang function "atk_object_get_layer"              (ref _AtkObject)i32
    clang function "atk_object_get_mdi_zorder"         (ref _AtkObject)i32
    clang function "atk_object_get_attributes"         (ref _AtkObject)ref _GSList
    clang function "atk_object_ref_state_set"          (ref _AtkObject)ref _AtkStateSet
    clang function "atk_object_get_index_in_parent"    (ref _AtkObject)i32
    clang proc     "atk_object_set_name"               (ref _AtkObject,ref i8)
    clang proc     "atk_object_set_description"        (ref _AtkObject,ref i8)
    clang proc     "atk_object_set_parent"             (ref _AtkObject,ref _AtkObject)
    clang proc     "atk_object_set_role"               (ref _AtkObject,i32)
    clang function "atk_object_connect_property_change_handler" (ref _AtkObject,ref ref clang proc(ref _AtkObject,ref _AtkPropertyValues))u32
    clang proc     "atk_object_remove_property_change_handler" (ref _AtkObject,u32)
    clang proc     "atk_object_notify_state_change"    (ref _AtkObject,u64,i32)
    clang proc     "atk_object_initialize"             (ref _AtkObject,ref void)
    clang function "atk_role_get_name"                 (i32)ref i8
    clang function "atk_role_for_name"                 (ref i8)i32
    clang function "atk_object_add_relationship"       (ref _AtkObject,i32,ref _AtkObject)i32
    clang function "atk_object_remove_relationship"    (ref _AtkObject,i32,ref _AtkObject)i32
    clang function "atk_role_get_localized_name"       (i32)ref i8
    record _AtkAction =
        var int dummy    !empty record
    end

    record _AtkActionIface =
        var _GTypeInterface parent
        var ref clang function(ref _AtkAction,i32)i32 do_action
        var ref clang function(ref _AtkAction)i32 get_n_actions
        var ref clang function(ref _AtkAction,i32)ref i8 get_description
        var ref clang function(ref _AtkAction,i32)ref i8 get_name
        var ref clang function(ref _AtkAction,i32)ref i8 get_keybinding
        var ref clang function(ref _AtkAction,i32,ref i8)i32 set_description
        var ref clang function(ref _AtkAction,i32)ref i8 get_localized_name
        var ref clang function(ref void)i32 pad2
    end

    clang function "atk_action_get_type"               ()u64
    clang function "atk_action_do_action"              (ref _AtkAction,i32)i32
    clang function "atk_action_get_n_actions"          (ref _AtkAction)i32
    clang function "atk_action_get_description"        (ref _AtkAction,i32)ref i8
    clang function "atk_action_get_name"               (ref _AtkAction,i32)ref i8
    clang function "atk_action_get_keybinding"         (ref _AtkAction,i32)ref i8
    clang function "atk_action_set_description"        (ref _AtkAction,i32,ref i8)i32
    clang function "atk_action_get_localized_name"     (ref _AtkAction,i32)ref i8
    record _AtkUtil =
        var _GObject parent
    end

    record _AtkUtilClass =
        var _GObjectClass parent
        var ref clang function(ref clang function(ref _GSignalInvocationHint,u32,ref _GValue,ref void)i32,ref i8)u32 add_global_event_listener
        var ref clang proc(u32) remove_global_event_listener
        var ref clang function(ref clang function(ref _AtkKeyEventStruct,ref void)i32,ref void)u32 add_key_event_listener
        var ref clang proc(u32) remove_key_event_listener
        var ref clang function()ref _AtkObject get_root
        var ref clang function()ref i8 get_toolkit_name
        var ref clang function()ref i8 get_toolkit_version
    end

    record _AtkKeyEventStruct =
        var i32 type$
        var u32 state
        var u32 keyval
        var i32 length
        var ref i8 string
        var u16 keycode
        var u32 timestamp
    end

    const ATK_KEY_EVENT_PRESS                = 0
    const ATK_KEY_EVENT_RELEASE              = 1
    const ATK_KEY_EVENT_LAST_DEFINED         = 2
    clang function "atk_util_get_type"                 ()u64
    const ATK_XY_SCREEN                      = 0
    const ATK_XY_WINDOW                      = 1
    clang function "atk_add_focus_tracker"             (ref clang proc(ref _AtkObject))u32
    clang proc     "atk_remove_focus_tracker"          (u32)
    clang proc     "atk_focus_tracker_init"            (ref clang proc())
    clang proc     "atk_focus_tracker_notify"          (ref _AtkObject)
    clang function "atk_add_global_event_listener"     (ref clang function(ref _GSignalInvocationHint,u32,ref _GValue,ref void)i32,ref i8)u32
    clang proc     "atk_remove_global_event_listener"  (u32)
    clang function "atk_add_key_event_listener"        (ref clang function(ref _AtkKeyEventStruct,ref void)i32,ref void)u32
    clang proc     "atk_remove_key_event_listener"     (u32)
    clang function "atk_get_root"                      ()ref _AtkObject
    clang function "atk_get_focus_object"              ()ref _AtkObject
    clang function "atk_get_toolkit_name"              ()ref i8
    clang function "atk_get_toolkit_version"           ()ref i8
    clang function "atk_get_version"                   ()ref i8
    record _AtkComponent =
        var int dummy    !empty record
    end

    record _AtkComponentIface =
        var _GTypeInterface parent
        var ref clang function(ref _AtkComponent,ref clang proc(ref _AtkObject,i32))u32 add_focus_handler
        var ref clang function(ref _AtkComponent,i32,i32,i32)i32 contains
        var ref clang function(ref _AtkComponent,i32,i32,i32)ref _AtkObject ref_accessible_at_point
        var ref clang proc(ref _AtkComponent,ref i32,ref i32,ref i32,ref i32,i32) get_extents
        var ref clang proc(ref _AtkComponent,ref i32,ref i32,i32) get_position
        var ref clang proc(ref _AtkComponent,ref i32,ref i32) get_size
        var ref clang function(ref _AtkComponent)i32 grab_focus
        var ref clang proc(ref _AtkComponent,u32) remove_focus_handler
        var ref clang function(ref _AtkComponent,i32,i32,i32,i32,i32)i32 set_extents
        var ref clang function(ref _AtkComponent,i32,i32,i32)i32 set_position
        var ref clang function(ref _AtkComponent,i32,i32)i32 set_size
        var ref clang function(ref _AtkComponent)i32 get_layer
        var ref clang function(ref _AtkComponent)i32 get_mdi_zorder
        var ref clang proc(ref _AtkComponent,ref _AtkRectangle) bounds_changed
        var ref clang function(ref _AtkComponent)r64 get_alpha
    end

    record _AtkRectangle =
        var i32 x
        var i32 y
        var i32 width
        var i32 height
    end

    clang function "atk_rectangle_get_type"            ()u64
    clang function "atk_component_get_type"            ()u64
    clang function "atk_component_add_focus_handler"   (ref _AtkComponent,ref clang proc(ref _AtkObject,i32))u32
    clang function "atk_component_contains"            (ref _AtkComponent,i32,i32,i32)i32
    clang function "atk_component_ref_accessible_at_point" (ref _AtkComponent,i32,i32,i32)ref _AtkObject
    clang proc     "atk_component_get_extents"         (ref _AtkComponent,ref i32,ref i32,ref i32,ref i32,i32)
    clang proc     "atk_component_get_position"        (ref _AtkComponent,ref i32,ref i32,i32)
    clang proc     "atk_component_get_size"            (ref _AtkComponent,ref i32,ref i32)
    clang function "atk_component_get_layer"           (ref _AtkComponent)i32
    clang function "atk_component_get_mdi_zorder"      (ref _AtkComponent)i32
    clang function "atk_component_grab_focus"          (ref _AtkComponent)i32
    clang proc     "atk_component_remove_focus_handler" (ref _AtkComponent,u32)
    clang function "atk_component_set_extents"         (ref _AtkComponent,i32,i32,i32,i32,i32)i32
    clang function "atk_component_set_position"        (ref _AtkComponent,i32,i32,i32)i32
    clang function "atk_component_set_size"            (ref _AtkComponent,i32,i32)i32
    clang function "atk_component_get_alpha"           (ref _AtkComponent)r64
    record _AtkDocument =
        var int dummy    !empty record
    end

    record _AtkDocumentIface =
        var _GTypeInterface parent
        var ref clang function(ref _AtkDocument)ref i8 get_document_type
        var ref clang function(ref _AtkDocument)ref void get_document
        var ref clang function(ref _AtkDocument)ref i8 get_document_locale
        var ref clang function(ref _AtkDocument)ref _GSList get_document_attributes
        var ref clang function(ref _AtkDocument,ref i8)ref i8 get_document_attribute_value
        var ref clang function(ref _AtkDocument,ref i8,ref i8)i32 set_document_attribute
        var ref clang function(ref void)i32 pad1
        var ref clang function(ref void)i32 pad2
        var ref clang function(ref void)i32 pad3
        var ref clang function(ref void)i32 pad4
    end

    clang function "atk_document_get_type"             ()u64
    clang function "atk_document_get_document_type"    (ref _AtkDocument)ref i8
    clang function "atk_document_get_document"         (ref _AtkDocument)ref void
    clang function "atk_document_get_locale"           (ref _AtkDocument)ref i8
    clang function "atk_document_get_attributes"       (ref _AtkDocument)ref _GSList
    clang function "atk_document_get_attribute_value"  (ref _AtkDocument,ref i8)ref i8
    clang function "atk_document_set_attribute_value"  (ref _AtkDocument,ref i8,ref i8)i32
    const ATK_TEXT_ATTR_INVALID              = 0
    const ATK_TEXT_ATTR_LEFT_MARGIN          = 1
    const ATK_TEXT_ATTR_RIGHT_MARGIN         = 2
    const ATK_TEXT_ATTR_INDENT               = 3
    const ATK_TEXT_ATTR_INVISIBLE            = 4
    const ATK_TEXT_ATTR_EDITABLE             = 5
    const ATK_TEXT_ATTR_PIXELS_ABOVE_LINES   = 6
    const ATK_TEXT_ATTR_PIXELS_BELOW_LINES   = 7
    const ATK_TEXT_ATTR_PIXELS_INSIDE_WRAP   = 8
    const ATK_TEXT_ATTR_BG_FULL_HEIGHT       = 9
    const ATK_TEXT_ATTR_RISE                 = 10
    const ATK_TEXT_ATTR_UNDERLINE            = 11
    const ATK_TEXT_ATTR_STRIKETHROUGH        = 12
    const ATK_TEXT_ATTR_SIZE                 = 13
    const ATK_TEXT_ATTR_SCALE                = 14
    const ATK_TEXT_ATTR_WEIGHT               = 15
    const ATK_TEXT_ATTR_LANGUAGE             = 16
    const ATK_TEXT_ATTR_FAMILY_NAME          = 17
    const ATK_TEXT_ATTR_BG_COLOR             = 18
    const ATK_TEXT_ATTR_FG_COLOR             = 19
    const ATK_TEXT_ATTR_BG_STIPPLE           = 20
    const ATK_TEXT_ATTR_FG_STIPPLE           = 21
    const ATK_TEXT_ATTR_WRAP_MODE            = 22
    const ATK_TEXT_ATTR_DIRECTION            = 23
    const ATK_TEXT_ATTR_JUSTIFICATION        = 24
    const ATK_TEXT_ATTR_STRETCH              = 25
    const ATK_TEXT_ATTR_VARIANT              = 26
    const ATK_TEXT_ATTR_STYLE                = 27
    const ATK_TEXT_ATTR_LAST_DEFINED         = 28
    clang function "atk_text_attribute_register"       (ref i8)i32
    record _AtkText =
        var int dummy    !empty record
    end

    record _AtkTextIface =
        var _GTypeInterface parent
        var ref clang function(ref _AtkText,i32,i32)ref i8 get_text
        var ref clang function(ref _AtkText,i32,i32,ref i32,ref i32)ref i8 get_text_after_offset
        var ref clang function(ref _AtkText,i32,i32,ref i32,ref i32)ref i8 get_text_at_offset
        var ref clang function(ref _AtkText,i32)u32 get_character_at_offset
        var ref clang function(ref _AtkText,i32,i32,ref i32,ref i32)ref i8 get_text_before_offset
        var ref clang function(ref _AtkText)i32 get_caret_offset
        var ref clang function(ref _AtkText,i32,ref i32,ref i32)ref _GSList get_run_attributes
        var ref clang function(ref _AtkText)ref _GSList get_default_attributes
        var ref clang proc(ref _AtkText,i32,ref i32,ref i32,ref i32,ref i32,i32) get_character_extents
        var ref clang function(ref _AtkText)i32 get_character_count
        var ref clang function(ref _AtkText,i32,i32,i32)i32 get_offset_at_point
        var ref clang function(ref _AtkText)i32 get_n_selections
        var ref clang function(ref _AtkText,i32,ref i32,ref i32)ref i8 get_selection
        var ref clang function(ref _AtkText,i32,i32)i32 add_selection
        var ref clang function(ref _AtkText,i32)i32 remove_selection
        var ref clang function(ref _AtkText,i32,i32,i32)i32 set_selection
        var ref clang function(ref _AtkText,i32)i32 set_caret_offset
        var ref clang proc(ref _AtkText,i32,i32) text_changed
        var ref clang proc(ref _AtkText,i32) text_caret_moved
        var ref clang proc(ref _AtkText) text_selection_changed
        var ref clang proc(ref _AtkText) text_attributes_changed
        var ref clang proc(ref _AtkText,i32,i32,i32,ref _AtkTextRectangle) get_range_extents
        var ref clang function(ref _AtkText,ref _AtkTextRectangle,i32,i32,i32)ref ref _AtkTextRange get_bounded_ranges
        var ref clang function(ref void)i32 pad4
    end

    const ATK_TEXT_BOUNDARY_CHAR             = 0
    const ATK_TEXT_BOUNDARY_WORD_START       = 1
    const ATK_TEXT_BOUNDARY_WORD_END         = 2
    const ATK_TEXT_BOUNDARY_SENTENCE_START   = 3
    const ATK_TEXT_BOUNDARY_SENTENCE_END     = 4
    const ATK_TEXT_BOUNDARY_LINE_START       = 5
    const ATK_TEXT_BOUNDARY_LINE_END         = 6
    record _AtkTextRectangle =
        var i32 x
        var i32 y
        var i32 width
        var i32 height
    end

    record _AtkTextRange =
        var _AtkTextRectangle bounds
        var i32 start_offset
        var i32 end_offset
        var ref i8 content
    end

    clang function "atk_text_range_get_type"           ()u64
    const ATK_TEXT_CLIP_NONE                 = 0
    const ATK_TEXT_CLIP_MIN                  = 1
    const ATK_TEXT_CLIP_MAX                  = 2
    const ATK_TEXT_CLIP_BOTH                 = 3
    clang function "atk_text_get_type"                 ()u64
    clang function "atk_text_get_text"                 (ref _AtkText,i32,i32)ref i8
    clang function "atk_text_get_character_at_offset"  (ref _AtkText,i32)u32
    clang function "atk_text_get_text_after_offset"    (ref _AtkText,i32,i32,ref i32,ref i32)ref i8
    clang function "atk_text_get_text_at_offset"       (ref _AtkText,i32,i32,ref i32,ref i32)ref i8
    clang function "atk_text_get_text_before_offset"   (ref _AtkText,i32,i32,ref i32,ref i32)ref i8
    clang function "atk_text_get_caret_offset"         (ref _AtkText)i32
    clang proc     "atk_text_get_character_extents"    (ref _AtkText,i32,ref i32,ref i32,ref i32,ref i32,i32)
    clang function "atk_text_get_run_attributes"       (ref _AtkText,i32,ref i32,ref i32)ref _GSList
    clang function "atk_text_get_default_attributes"   (ref _AtkText)ref _GSList
    clang function "atk_text_get_character_count"      (ref _AtkText)i32
    clang function "atk_text_get_offset_at_point"      (ref _AtkText,i32,i32,i32)i32
    clang function "atk_text_get_n_selections"         (ref _AtkText)i32
    clang function "atk_text_get_selection"            (ref _AtkText,i32,ref i32,ref i32)ref i8
    clang function "atk_text_add_selection"            (ref _AtkText,i32,i32)i32
    clang function "atk_text_remove_selection"         (ref _AtkText,i32)i32
    clang function "atk_text_set_selection"            (ref _AtkText,i32,i32,i32)i32
    clang function "atk_text_set_caret_offset"         (ref _AtkText,i32)i32
    clang proc     "atk_text_get_range_extents"        (ref _AtkText,i32,i32,i32,ref _AtkTextRectangle)
    clang function "atk_text_get_bounded_ranges"       (ref _AtkText,ref _AtkTextRectangle,i32,i32,i32)ref ref _AtkTextRange
    clang proc     "atk_text_free_ranges"              (ref ref _AtkTextRange)
    clang proc     "atk_attribute_set_free"            (ref _GSList)
    clang function "atk_text_attribute_get_name"       (i32)ref i8
    clang function "atk_text_attribute_for_name"       (ref i8)i32
    clang function "atk_text_attribute_get_value"      (i32,i32)ref i8
    record _AtkEditableText =
        var int dummy    !empty record
    end

    record _AtkEditableTextIface =
        var _GTypeInterface parent_interface
        var ref clang function(ref _AtkEditableText,ref _GSList,i32,i32)i32 set_run_attributes
        var ref clang proc(ref _AtkEditableText,ref i8) set_text_contents
        var ref clang proc(ref _AtkEditableText,ref i8,i32,ref i32) insert_text
        var ref clang proc(ref _AtkEditableText,i32,i32) copy_text
        var ref clang proc(ref _AtkEditableText,i32,i32) cut_text
        var ref clang proc(ref _AtkEditableText,i32,i32) delete_text
        var ref clang proc(ref _AtkEditableText,i32) paste_text
        var ref clang function(ref void)i32 pad1
        var ref clang function(ref void)i32 pad2
    end

    clang function "atk_editable_text_get_type"        ()u64
    clang function "atk_editable_text_set_run_attributes" (ref _AtkEditableText,ref _GSList,i32,i32)i32
    clang proc     "atk_editable_text_set_text_contents" (ref _AtkEditableText,ref i8)
    clang proc     "atk_editable_text_insert_text"     (ref _AtkEditableText,ref i8,i32,ref i32)
    clang proc     "atk_editable_text_copy_text"       (ref _AtkEditableText,i32,i32)
    clang proc     "atk_editable_text_cut_text"        (ref _AtkEditableText,i32,i32)
    clang proc     "atk_editable_text_delete_text"     (ref _AtkEditableText,i32,i32)
    clang proc     "atk_editable_text_paste_text"      (ref _AtkEditableText,i32)
    record _AtkGObjectAccessible =
        var _AtkObject parent
    end

    record _AtkGObjectAccessibleClass =
        var _AtkObjectClass parent_class
        var ref clang function(ref void)i32 pad1
        var ref clang function(ref void)i32 pad2
    end

    clang function "atk_gobject_accessible_get_type"   ()u64
    clang function "atk_gobject_accessible_for_object" (ref _GObject)ref _AtkObject
    clang function "atk_gobject_accessible_get_object" (ref _AtkGObjectAccessible)ref _GObject
    const ATK_HYPERLINK_IS_INLINE            = 1
    record _AtkHyperlink =
        var _GObject parent
    end

    record _AtkHyperlinkClass =
        var _GObjectClass parent
        var ref clang function(ref _AtkHyperlink,i32)ref i8 get_uri
        var ref clang function(ref _AtkHyperlink,i32)ref _AtkObject get_object
        var ref clang function(ref _AtkHyperlink)i32 get_end_index
        var ref clang function(ref _AtkHyperlink)i32 get_start_index
        var ref clang function(ref _AtkHyperlink)i32 is_valid
        var ref clang function(ref _AtkHyperlink)i32 get_n_anchors
        var ref clang function(ref _AtkHyperlink)u32 link_state
        var ref clang function(ref _AtkHyperlink)i32 is_selected_link
        var ref clang proc(ref _AtkHyperlink) link_activated
        var ref clang function(ref void)i32 pad1
    end

    clang function "atk_hyperlink_get_type"            ()u64
    clang function "atk_hyperlink_get_uri"             (ref _AtkHyperlink,i32)ref i8
    clang function "atk_hyperlink_get_object"          (ref _AtkHyperlink,i32)ref _AtkObject
    clang function "atk_hyperlink_get_end_index"       (ref _AtkHyperlink)i32
    clang function "atk_hyperlink_get_start_index"     (ref _AtkHyperlink)i32
    clang function "atk_hyperlink_is_valid"            (ref _AtkHyperlink)i32
    clang function "atk_hyperlink_is_inline"           (ref _AtkHyperlink)i32
    clang function "atk_hyperlink_get_n_anchors"       (ref _AtkHyperlink)i32
    clang function "atk_hyperlink_is_selected_link"    (ref _AtkHyperlink)i32
    record _AtkHyperlinkImpl =
        var int dummy    !empty record
    end

    record _AtkHyperlinkImplIface =
        var _GTypeInterface parent
        var ref clang function(ref _AtkHyperlinkImpl)ref _AtkHyperlink get_hyperlink
        var ref clang function(ref void)i32 pad1
    end

    clang function "atk_hyperlink_impl_get_type"       ()u64
    clang function "atk_hyperlink_impl_get_hyperlink"  (ref _AtkHyperlinkImpl)ref _AtkHyperlink
    record _AtkHypertext =
        var int dummy    !empty record
    end

    record _AtkHypertextIface =
        var _GTypeInterface parent
        var ref clang function(ref _AtkHypertext,i32)ref _AtkHyperlink get_link
        var ref clang function(ref _AtkHypertext)i32 get_n_links
        var ref clang function(ref _AtkHypertext,i32)i32 get_link_index
        var ref clang proc(ref _AtkHypertext,i32) link_selected
        var ref clang function(ref void)i32 pad1
        var ref clang function(ref void)i32 pad2
        var ref clang function(ref void)i32 pad3
    end

    clang function "atk_hypertext_get_type"            ()u64
    clang function "atk_hypertext_get_link"            (ref _AtkHypertext,i32)ref _AtkHyperlink
    clang function "atk_hypertext_get_n_links"         (ref _AtkHypertext)i32
    clang function "atk_hypertext_get_link_index"      (ref _AtkHypertext,i32)i32
    record _AtkImage =
        var int dummy    !empty record
    end

    record _AtkImageIface =
        var _GTypeInterface parent
        var ref clang proc(ref _AtkImage,ref i32,ref i32,i32) get_image_position
        var ref clang function(ref _AtkImage)ref i8 get_image_description
        var ref clang proc(ref _AtkImage,ref i32,ref i32) get_image_size
        var ref clang function(ref _AtkImage,ref i8)i32 set_image_description
        var ref clang function(ref _AtkImage)ref i8 get_image_locale
        var ref clang function(ref void)i32 pad1
    end

    clang function "atk_image_get_type"                ()u64
    clang function "atk_image_get_image_description"   (ref _AtkImage)ref i8
    clang proc     "atk_image_get_image_size"          (ref _AtkImage,ref i32,ref i32)
    clang function "atk_image_set_image_description"   (ref _AtkImage,ref i8)i32
    clang proc     "atk_image_get_image_position"      (ref _AtkImage,ref i32,ref i32,i32)
    clang function "atk_image_get_image_locale"        (ref _AtkImage)ref i8
    record _AtkNoOpObject =
        var _AtkObject parent
    end

    record _AtkNoOpObjectClass =
        var _AtkObjectClass parent_class
    end

    clang function "atk_no_op_object_get_type"         ()u64
    clang function "atk_no_op_object_new"              (ref _GObject)ref _AtkObject
    record _AtkObjectFactory =
        var _GObject parent
    end

    record _AtkObjectFactoryClass =
        var _GObjectClass parent_class
        var ref clang function(ref _GObject)ref _AtkObject create_accessible
        var ref clang proc(ref _AtkObjectFactory) invalidate
        var ref clang function()u64 get_accessible_type
        var ref clang function(ref void)i32 pad1
        var ref clang function(ref void)i32 pad2
    end

    clang function "atk_object_factory_get_type"       ()u64
    clang function "atk_object_factory_create_accessible" (ref _AtkObjectFactory,ref _GObject)ref _AtkObject
    clang proc     "atk_object_factory_invalidate"     (ref _AtkObjectFactory)
    clang function "atk_object_factory_get_accessible_type" (ref _AtkObjectFactory)u64
    record _AtkNoOpObjectFactory =
        var _AtkObjectFactory parent
    end

    record _AtkNoOpObjectFactoryClass =
        var _AtkObjectFactoryClass parent_class
    end

    clang function "atk_no_op_object_factory_get_type" ()u64
    clang function "atk_no_op_object_factory_new"      ()ref _AtkObjectFactory
    record _AtkPlug =
        var _AtkObject parent
    end

    record _AtkPlugClass =
        var _AtkObjectClass parent_class
        var ref clang function(ref _AtkPlug)ref i8 get_object_id
    end

    clang function "atk_plug_get_type"                 ()u64
    clang function "atk_plug_new"                      ()ref _AtkObject
    clang function "atk_plug_get_id"                   (ref _AtkPlug)ref i8
    record _AtkRegistry =
        var _GObject parent
        var ref _GHashTable factory_type_registry
        var ref _GHashTable factory_singleton_cache
    end

    record _AtkRegistryClass =
        var _GObjectClass parent_class
    end

    clang function "atk_registry_get_type"             ()u64
    clang proc     "atk_registry_set_factory_type"     (ref _AtkRegistry,u64,u64)
    clang function "atk_registry_get_factory_type"     (ref _AtkRegistry,u64)u64
    clang function "atk_registry_get_factory"          (ref _AtkRegistry,u64)ref _AtkObjectFactory
    clang function "atk_get_default_registry"          ()ref _AtkRegistry
    record _AtkRelation =
        var _GObject parent
        var ref _GPtrArray target
        var i32 relationship
    end

    record _AtkRelationClass =
        var _GObjectClass parent
    end

    clang function "atk_relation_get_type"             ()u64
    clang function "atk_relation_type_register"        (ref i8)i32
    clang function "atk_relation_type_get_name"        (i32)ref i8
    clang function "atk_relation_type_for_name"        (ref i8)i32
    clang function "atk_relation_new"                  (ref ref _AtkObject,i32,i32)ref _AtkRelation
    clang function "atk_relation_get_relation_type"    (ref _AtkRelation)i32
    clang function "atk_relation_get_target"           (ref _AtkRelation)ref _GPtrArray
    clang proc     "atk_relation_add_target"           (ref _AtkRelation,ref _AtkObject)
    clang function "atk_relation_remove_target"        (ref _AtkRelation,ref _AtkObject)i32
    record _AtkRelationSetClass =
        var _GObjectClass parent
        var ref clang function(ref void)i32 pad1
        var ref clang function(ref void)i32 pad2
    end

    clang function "atk_relation_set_get_type"         ()u64
    clang function "atk_relation_set_new"              ()ref _AtkRelationSet
    clang function "atk_relation_set_contains"         (ref _AtkRelationSet,i32)i32
    clang function "atk_relation_set_contains_target"  (ref _AtkRelationSet,i32,ref _AtkObject)i32
    clang proc     "atk_relation_set_remove"           (ref _AtkRelationSet,ref _AtkRelation)
    clang proc     "atk_relation_set_add"              (ref _AtkRelationSet,ref _AtkRelation)
    clang function "atk_relation_set_get_n_relations"  (ref _AtkRelationSet)i32
    clang function "atk_relation_set_get_relation"     (ref _AtkRelationSet,i32)ref _AtkRelation
    clang function "atk_relation_set_get_relation_by_type" (ref _AtkRelationSet,i32)ref _AtkRelation
    clang proc     "atk_relation_set_add_relation_by_type" (ref _AtkRelationSet,i32,ref _AtkObject)
    record _AtkSelection =
        var int dummy    !empty record
    end

    record _AtkSelectionIface =
        var _GTypeInterface parent
        var ref clang function(ref _AtkSelection,i32)i32 add_selection
        var ref clang function(ref _AtkSelection)i32 clear_selection
        var ref clang function(ref _AtkSelection,i32)ref _AtkObject ref_selection
        var ref clang function(ref _AtkSelection)i32 get_selection_count
        var ref clang function(ref _AtkSelection,i32)i32 is_child_selected
        var ref clang function(ref _AtkSelection,i32)i32 remove_selection
        var ref clang function(ref _AtkSelection)i32 select_all_selection
        var ref clang proc(ref _AtkSelection) selection_changed
        var ref clang function(ref void)i32 pad1
        var ref clang function(ref void)i32 pad2
    end

    clang function "atk_selection_get_type"            ()u64
    clang function "atk_selection_add_selection"       (ref _AtkSelection,i32)i32
    clang function "atk_selection_clear_selection"     (ref _AtkSelection)i32
    clang function "atk_selection_ref_selection"       (ref _AtkSelection,i32)ref _AtkObject
    clang function "atk_selection_get_selection_count" (ref _AtkSelection)i32
    clang function "atk_selection_is_child_selected"   (ref _AtkSelection,i32)i32
    clang function "atk_selection_remove_selection"    (ref _AtkSelection,i32)i32
    clang function "atk_selection_select_all_selection" (ref _AtkSelection)i32
    record _AtkSocket =
        var _AtkObject parent
        var ref i8 embedded_plug_id
    end

    record _AtkSocketClass =
        var _AtkObjectClass parent_class
        var ref clang proc(ref _AtkSocket,ref i8) embed
    end

    clang function "atk_socket_get_type"               ()u64
    clang function "atk_socket_new"                    ()ref _AtkObject
    clang proc     "atk_socket_embed"                  (ref _AtkSocket,ref i8)
    clang function "atk_socket_is_occupied"            (ref _AtkSocket)i32
    record _AtkStateSetClass =
        var _GObjectClass parent
    end

    clang function "atk_state_set_get_type"            ()u64
    clang function "atk_state_set_new"                 ()ref _AtkStateSet
    clang function "atk_state_set_is_empty"            (ref _AtkStateSet)i32
    clang function "atk_state_set_add_state"           (ref _AtkStateSet,i32)i32
    clang proc     "atk_state_set_add_states"          (ref _AtkStateSet,ref i32,i32)
    clang proc     "atk_state_set_clear_states"        (ref _AtkStateSet)
    clang function "atk_state_set_contains_state"      (ref _AtkStateSet,i32)i32
    clang function "atk_state_set_contains_states"     (ref _AtkStateSet,ref i32,i32)i32
    clang function "atk_state_set_remove_state"        (ref _AtkStateSet,i32)i32
    clang function "atk_state_set_and_sets"            (ref _AtkStateSet,ref _AtkStateSet)ref _AtkStateSet
    clang function "atk_state_set_or_sets"             (ref _AtkStateSet,ref _AtkStateSet)ref _AtkStateSet
    clang function "atk_state_set_xor_sets"            (ref _AtkStateSet,ref _AtkStateSet)ref _AtkStateSet
    record _AtkStreamableContent =
        var int dummy    !empty record
    end

    record _AtkStreamableContentIface =
        var _GTypeInterface parent
        var ref clang function(ref _AtkStreamableContent)i32 get_n_mime_types
        var ref clang function(ref _AtkStreamableContent,i32)ref i8 get_mime_type
        var ref clang function(ref _AtkStreamableContent,ref i8)ref _GIOChannel get_stream
        var ref clang function(ref _AtkStreamableContent,ref i8)ref i8 get_uri
        var ref clang function(ref void)i32 pad1
        var ref clang function(ref void)i32 pad2
        var ref clang function(ref void)i32 pad3
    end

    clang function "atk_streamable_content_get_type"   ()u64
    clang function "atk_streamable_content_get_n_mime_types" (ref _AtkStreamableContent)i32
    clang function "atk_streamable_content_get_mime_type" (ref _AtkStreamableContent,i32)ref i8
    clang function "atk_streamable_content_get_stream" (ref _AtkStreamableContent,ref i8)ref _GIOChannel
    clang function "atk_streamable_content_get_uri"    (ref _AtkStreamableContent,ref i8)ref i8
    record _AtkTable =
        var int dummy    !empty record
    end

    record _AtkTableIface =
        var _GTypeInterface parent
        var ref clang function(ref _AtkTable,i32,i32)ref _AtkObject ref_at
        var ref clang function(ref _AtkTable,i32,i32)i32 get_index_at
        var ref clang function(ref _AtkTable,i32)i32 get_column_at_index
        var ref clang function(ref _AtkTable,i32)i32 get_row_at_index
        var ref clang function(ref _AtkTable)i32 get_n_columns
        var ref clang function(ref _AtkTable)i32 get_n_rows
        var ref clang function(ref _AtkTable,i32,i32)i32 get_column_extent_at
        var ref clang function(ref _AtkTable,i32,i32)i32 get_row_extent_at
        var ref clang function(ref _AtkTable)ref _AtkObject get_caption
        var ref clang function(ref _AtkTable,i32)ref i8 get_column_description
        var ref clang function(ref _AtkTable,i32)ref _AtkObject get_column_header
        var ref clang function(ref _AtkTable,i32)ref i8 get_row_description
        var ref clang function(ref _AtkTable,i32)ref _AtkObject get_row_header
        var ref clang function(ref _AtkTable)ref _AtkObject get_summary
        var ref clang proc(ref _AtkTable,ref _AtkObject) set_caption
        var ref clang proc(ref _AtkTable,i32,ref i8) set_column_description
        var ref clang proc(ref _AtkTable,i32,ref _AtkObject) set_column_header
        var ref clang proc(ref _AtkTable,i32,ref i8) set_row_description
        var ref clang proc(ref _AtkTable,i32,ref _AtkObject) set_row_header
        var ref clang proc(ref _AtkTable,ref _AtkObject) set_summary
        var ref clang function(ref _AtkTable,ref ref i32)i32 get_selected_columns
        var ref clang function(ref _AtkTable,ref ref i32)i32 get_selected_rows
        var ref clang function(ref _AtkTable,i32)i32 is_column_selected
        var ref clang function(ref _AtkTable,i32)i32 is_row_selected
        var ref clang function(ref _AtkTable,i32,i32)i32 is_selected
        var ref clang function(ref _AtkTable,i32)i32 add_row_selection
        var ref clang function(ref _AtkTable,i32)i32 remove_row_selection
        var ref clang function(ref _AtkTable,i32)i32 add_column_selection
        var ref clang function(ref _AtkTable,i32)i32 remove_column_selection
        var ref clang proc(ref _AtkTable,i32,i32) row_inserted
        var ref clang proc(ref _AtkTable,i32,i32) column_inserted
        var ref clang proc(ref _AtkTable,i32,i32) row_deleted
        var ref clang proc(ref _AtkTable,i32,i32) column_deleted
        var ref clang proc(ref _AtkTable) row_reordered
        var ref clang proc(ref _AtkTable) column_reordered
        var ref clang proc(ref _AtkTable) model_changed
        var ref clang function(ref void)i32 pad1
        var ref clang function(ref void)i32 pad2
        var ref clang function(ref void)i32 pad3
        var ref clang function(ref void)i32 pad4
    end

    clang function "atk_table_get_type"                ()u64
    clang function "atk_table_ref_at"                  (ref _AtkTable,i32,i32)ref _AtkObject
    clang function "atk_table_get_index_at"            (ref _AtkTable,i32,i32)i32
    clang function "atk_table_get_column_at_index"     (ref _AtkTable,i32)i32
    clang function "atk_table_get_row_at_index"        (ref _AtkTable,i32)i32
    clang function "atk_table_get_n_columns"           (ref _AtkTable)i32
    clang function "atk_table_get_n_rows"              (ref _AtkTable)i32
    clang function "atk_table_get_column_extent_at"    (ref _AtkTable,i32,i32)i32
    clang function "atk_table_get_row_extent_at"       (ref _AtkTable,i32,i32)i32
    clang function "atk_table_get_caption"             (ref _AtkTable)ref _AtkObject
    clang function "atk_table_get_column_description"  (ref _AtkTable,i32)ref i8
    clang function "atk_table_get_column_header"       (ref _AtkTable,i32)ref _AtkObject
    clang function "atk_table_get_row_description"     (ref _AtkTable,i32)ref i8
    clang function "atk_table_get_row_header"          (ref _AtkTable,i32)ref _AtkObject
    clang function "atk_table_get_summary"             (ref _AtkTable)ref _AtkObject
    clang proc     "atk_table_set_caption"             (ref _AtkTable,ref _AtkObject)
    clang proc     "atk_table_set_column_description"  (ref _AtkTable,i32,ref i8)
    clang proc     "atk_table_set_column_header"       (ref _AtkTable,i32,ref _AtkObject)
    clang proc     "atk_table_set_row_description"     (ref _AtkTable,i32,ref i8)
    clang proc     "atk_table_set_row_header"          (ref _AtkTable,i32,ref _AtkObject)
    clang proc     "atk_table_set_summary"             (ref _AtkTable,ref _AtkObject)
    clang function "atk_table_get_selected_columns"    (ref _AtkTable,ref ref i32)i32
    clang function "atk_table_get_selected_rows"       (ref _AtkTable,ref ref i32)i32
    clang function "atk_table_is_column_selected"      (ref _AtkTable,i32)i32
    clang function "atk_table_is_row_selected"         (ref _AtkTable,i32)i32
    clang function "atk_table_is_selected"             (ref _AtkTable,i32,i32)i32
    clang function "atk_table_add_row_selection"       (ref _AtkTable,i32)i32
    clang function "atk_table_remove_row_selection"    (ref _AtkTable,i32)i32
    clang function "atk_table_add_column_selection"    (ref _AtkTable,i32)i32
    clang function "atk_table_remove_column_selection" (ref _AtkTable,i32)i32
    record _AtkMisc =
        var _GObject parent
    end

    record _AtkMiscClass =
        var _GObjectClass parent
        var ref clang proc(ref _AtkMisc) threads_enter
        var ref clang proc(ref _AtkMisc) threads_leave
        var [32]ref void vfuncs
    end

    ref _AtkMisc atk_misc_instance
    clang function "atk_misc_get_type"                 ()u64
    clang proc     "atk_misc_threads_enter"            (ref _AtkMisc)
    clang proc     "atk_misc_threads_leave"            (ref _AtkMisc)
    clang function "atk_misc_get_instance"             ()ref _AtkMisc
    record _AtkValue =
        var int dummy    !empty record
    end

    record _AtkValueIface =
        var _GTypeInterface parent
        var ref clang proc(ref _AtkValue,ref _GValue) get_current_value
        var ref clang proc(ref _AtkValue,ref _GValue) get_maximum_value
        var ref clang proc(ref _AtkValue,ref _GValue) get_minimum_value
        var ref clang function(ref _AtkValue,ref _GValue)i32 set_current_value
        var ref clang proc(ref _AtkValue,ref _GValue) get_minimum_increment
        var ref clang function(ref void)i32 pad1
    end

    clang function "atk_value_get_type"                ()u64
    clang proc     "atk_value_get_current_value"       (ref _AtkValue,ref _GValue)
    clang proc     "atk_value_get_maximum_value"       (ref _AtkValue,ref _GValue)
    clang proc     "atk_value_get_minimum_value"       (ref _AtkValue,ref _GValue)
    clang function "atk_value_set_current_value"       (ref _AtkValue,ref _GValue)i32
    clang proc     "atk_value_get_minimum_increment"   (ref _AtkValue,ref _GValue)
    record _AtkWindow =
        var int dummy    !empty record
    end

    record _AtkWindowIface =
        var _GTypeInterface parent
        var [16]ref void _padding_dummy
    end

    clang function "atk_window_get_type"               ()u64
    const GTK_WIDGET_HELP_TOOLTIP            = 0
    const GTK_WIDGET_HELP_WHATS_THIS         = 1
    record _GtkWidgetPrivate =
        var int dummy    !empty record
    end

    record _GtkWidgetClass =
        var _GObjectClass parent_class
        var u32 activate_signal
        var ref clang proc(ref _GtkWidget,u32,ref ref _GParamSpec) dispatch_child_properties_changed
        var ref clang proc(ref _GtkWidget) destroy
        var ref clang proc(ref _GtkWidget) show
        var ref clang proc(ref _GtkWidget) show_all
        var ref clang proc(ref _GtkWidget) hide
        var ref clang proc(ref _GtkWidget) map
        var ref clang proc(ref _GtkWidget) unmap
        var ref clang proc(ref _GtkWidget) realize
        var ref clang proc(ref _GtkWidget) unrealize
        var ref clang proc(ref _GtkWidget,ref _cairo_rectangle_int) size_allocate
        var ref clang proc(ref _GtkWidget,i32) state_changed
        var ref clang proc(ref _GtkWidget,i32) state_flags_changed
        var ref clang proc(ref _GtkWidget,ref _GtkWidget) parent_set
        var ref clang proc(ref _GtkWidget,ref _GtkWidget) hierarchy_changed
        var ref clang proc(ref _GtkWidget,ref _GtkStyle) style_set
        var ref clang proc(ref _GtkWidget,i32) direction_changed
        var ref clang proc(ref _GtkWidget,i32) grab_notify
        var ref clang proc(ref _GtkWidget,ref _GParamSpec) child_notify
        var ref clang function(ref _GtkWidget,ref _cairo)i32 draw
        var ref clang function(ref _GtkWidget)i32 get_request_mode
        var ref clang proc(ref _GtkWidget,ref i32,ref i32) get_preferred_height
        var ref clang proc(ref _GtkWidget,i32,ref i32,ref i32) get_preferred_width_for_height
        var ref clang proc(ref _GtkWidget,ref i32,ref i32) get_preferred_width
        var ref clang proc(ref _GtkWidget,i32,ref i32,ref i32) get_preferred_height_for_width
        var ref clang function(ref _GtkWidget,i32)i32 mnemonic_activate
        var ref clang proc(ref _GtkWidget) grab_focus
        var ref clang function(ref _GtkWidget,i32)i32 focus
        var ref clang proc(ref _GtkWidget,i32) move_focus
        var ref clang function(ref _GtkWidget,i32)i32 keynav_failed
        var ref clang function(ref _GtkWidget,ref _GdkEvent)i32 event
        var ref clang function(ref _GtkWidget,ref _GdkEventButton)i32 button_press_event
        var ref clang function(ref _GtkWidget,ref _GdkEventButton)i32 button_release_event
        var ref clang function(ref _GtkWidget,ref _GdkEventScroll)i32 scroll_event
        var ref clang function(ref _GtkWidget,ref _GdkEventMotion)i32 motion_notify_event
        var ref clang function(ref _GtkWidget,ref _GdkEventAny)i32 delete_event
        var ref clang function(ref _GtkWidget,ref _GdkEventAny)i32 destroy_event
        var ref clang function(ref _GtkWidget,ref _GdkEventKey)i32 key_press_event
        var ref clang function(ref _GtkWidget,ref _GdkEventKey)i32 key_release_event
        var ref clang function(ref _GtkWidget,ref _GdkEventCrossing)i32 enter_notify_event
        var ref clang function(ref _GtkWidget,ref _GdkEventCrossing)i32 leave_notify_event
        var ref clang function(ref _GtkWidget,ref _GdkEventConfigure)i32 configure_event
        var ref clang function(ref _GtkWidget,ref _GdkEventFocus)i32 focus_in_event
        var ref clang function(ref _GtkWidget,ref _GdkEventFocus)i32 focus_out_event
        var ref clang function(ref _GtkWidget,ref _GdkEventAny)i32 map_event
        var ref clang function(ref _GtkWidget,ref _GdkEventAny)i32 unmap_event
        var ref clang function(ref _GtkWidget,ref _GdkEventProperty)i32 property_notify_event
        var ref clang function(ref _GtkWidget,ref _GdkEventSelection)i32 selection_clear_event
        var ref clang function(ref _GtkWidget,ref _GdkEventSelection)i32 selection_request_event
        var ref clang function(ref _GtkWidget,ref _GdkEventSelection)i32 selection_notify_event
        var ref clang function(ref _GtkWidget,ref _GdkEventProximity)i32 proximity_in_event
        var ref clang function(ref _GtkWidget,ref _GdkEventProximity)i32 proximity_out_event
        var ref clang function(ref _GtkWidget,ref _GdkEventVisibility)i32 visibility_notify_event
        var ref clang function(ref _GtkWidget,ref _GdkEventWindowState)i32 window_state_event
        var ref clang function(ref _GtkWidget,ref _GdkEventExpose)i32 damage_event
        var ref clang function(ref _GtkWidget,ref _GdkEventGrabBroken)i32 grab_broken_event
        var ref clang proc(ref _GtkWidget,ref _GtkSelectionData,u32,u32) selection_get
        var ref clang proc(ref _GtkWidget,ref _GtkSelectionData,u32) selection_received
        var ref clang proc(ref _GtkWidget,ref _GdkDragContext) drag_begin
        var ref clang proc(ref _GtkWidget,ref _GdkDragContext) drag_end
        var ref clang proc(ref _GtkWidget,ref _GdkDragContext,ref _GtkSelectionData,u32,u32) drag_data_get
        var ref clang proc(ref _GtkWidget,ref _GdkDragContext) drag_data_delete
        var ref clang proc(ref _GtkWidget,ref _GdkDragContext,u32) drag_leave
        var ref clang function(ref _GtkWidget,ref _GdkDragContext,i32,i32,u32)i32 drag_motion
        var ref clang function(ref _GtkWidget,ref _GdkDragContext,i32,i32,u32)i32 drag_drop
        var ref clang proc(ref _GtkWidget,ref _GdkDragContext,i32,i32,ref _GtkSelectionData,u32,u32) drag_data_received
        var ref clang function(ref _GtkWidget,ref _GdkDragContext,i32)i32 drag_failed
        var ref clang function(ref _GtkWidget)i32 popup_menu
        var ref clang function(ref _GtkWidget,i32)i32 show_help
        var ref clang function(ref _GtkWidget)ref _AtkObject get_accessible
        var ref clang proc(ref _GtkWidget,ref _GdkScreen) screen_changed
        var ref clang function(ref _GtkWidget,u32)i32 can_activate_accel
        var ref clang proc(ref _GtkWidget) composited_changed
        var ref clang function(ref _GtkWidget,i32,i32,i32,ref _GtkTooltip)i32 query_tooltip
        var ref clang proc(ref _GtkWidget,ref i32,ref i32) compute_expand
        var ref clang proc(ref _GtkWidget,i32,ref i32,ref i32) adjust_size_request
        var ref clang proc(ref _GtkWidget,i32,ref i32,ref i32,ref i32,ref i32) adjust_size_allocation
        var ref clang proc(ref _GtkWidget) style_updated
        var ref clang function(ref _GtkWidget,ref _GdkEventTouch)i32 touch_event
        var ref _GtkWidgetClassPrivate priv
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
        var ref clang proc() _gtk_reserved5
        var ref clang proc() _gtk_reserved6
        var ref clang proc() _gtk_reserved7
    end

    record _GtkWidgetClassPrivate =
        var int dummy    !empty record
    end

    record _GtkWidgetAuxInfo =
        var i32 width
        var i32 height
        var u32 halign
        var u32 valign
        var _GtkBorder margin
    end

    clang function "gtk_widget_get_type"               ()u64
    clang function "gtk_widget_new"                    (u64,ref i8,...)ref _GtkWidget
    clang proc     "gtk_widget_destroy"                (ref _GtkWidget)
    clang proc     "gtk_widget_destroyed"              (ref _GtkWidget,ref ref _GtkWidget)
    clang proc     "gtk_widget_unparent"               (ref _GtkWidget)
    clang proc     "gtk_widget_show"                   (ref _GtkWidget)
    clang proc     "gtk_widget_hide"                   (ref _GtkWidget)
    clang proc     "gtk_widget_show_now"               (ref _GtkWidget)
    clang proc     "gtk_widget_show_all"               (ref _GtkWidget)
    clang proc     "gtk_widget_set_no_show_all"        (ref _GtkWidget,i32)
    clang function "gtk_widget_get_no_show_all"        (ref _GtkWidget)i32
    clang proc     "gtk_widget_map"                    (ref _GtkWidget)
    clang proc     "gtk_widget_unmap"                  (ref _GtkWidget)
    clang proc     "gtk_widget_realize"                (ref _GtkWidget)
    clang proc     "gtk_widget_unrealize"              (ref _GtkWidget)
    clang proc     "gtk_widget_draw"                   (ref _GtkWidget,ref _cairo)
    clang proc     "gtk_widget_queue_draw"             (ref _GtkWidget)
    clang proc     "gtk_widget_queue_draw_area"        (ref _GtkWidget,i32,i32,i32,i32)
    clang proc     "gtk_widget_queue_draw_region"      (ref _GtkWidget,ref _cairo_region)
    clang proc     "gtk_widget_queue_resize"           (ref _GtkWidget)
    clang proc     "gtk_widget_queue_resize_no_redraw" (ref _GtkWidget)
    clang proc     "gtk_widget_size_request"           (ref _GtkWidget,ref _GtkRequisition)
    clang proc     "gtk_widget_size_allocate"          (ref _GtkWidget,ref _cairo_rectangle_int)
    clang function "gtk_widget_get_request_mode"       (ref _GtkWidget)i32
    clang proc     "gtk_widget_get_preferred_width"    (ref _GtkWidget,ref i32,ref i32)
    clang proc     "gtk_widget_get_preferred_height_for_width" (ref _GtkWidget,i32,ref i32,ref i32)
    clang proc     "gtk_widget_get_preferred_height"   (ref _GtkWidget,ref i32,ref i32)
    clang proc     "gtk_widget_get_preferred_width_for_height" (ref _GtkWidget,i32,ref i32,ref i32)
    clang proc     "gtk_widget_get_preferred_size"     (ref _GtkWidget,ref _GtkRequisition,ref _GtkRequisition)
    clang proc     "gtk_widget_get_child_requisition"  (ref _GtkWidget,ref _GtkRequisition)
    clang proc     "gtk_widget_add_accelerator"        (ref _GtkWidget,ref i8,ref _GtkAccelGroup,u32,i32,i32)
    clang function "gtk_widget_remove_accelerator"     (ref _GtkWidget,ref _GtkAccelGroup,u32,i32)i32
    clang proc     "gtk_widget_set_accel_path"         (ref _GtkWidget,ref i8,ref _GtkAccelGroup)
    clang function "gtk_widget_list_accel_closures"    (ref _GtkWidget)ref _GList
    clang function "gtk_widget_can_activate_accel"     (ref _GtkWidget,u32)i32
    clang function "gtk_widget_mnemonic_activate"      (ref _GtkWidget,i32)i32
    clang function "gtk_widget_event"                  (ref _GtkWidget,ref _GdkEvent)i32
    clang function "gtk_widget_send_expose"            (ref _GtkWidget,ref _GdkEvent)i32
    clang function "gtk_widget_send_focus_change"      (ref _GtkWidget,ref _GdkEvent)i32
    clang function "gtk_widget_activate"               (ref _GtkWidget)i32
    clang proc     "gtk_widget_reparent"               (ref _GtkWidget,ref _GtkWidget)
    clang function "gtk_widget_intersect"              (ref _GtkWidget,ref _cairo_rectangle_int,ref _cairo_rectangle_int)i32
    clang function "gtk_widget_region_intersect"       (ref _GtkWidget,ref _cairo_region)ref _cairo_region
    clang proc     "gtk_widget_freeze_child_notify"    (ref _GtkWidget)
    clang proc     "gtk_widget_child_notify"           (ref _GtkWidget,ref i8)
    clang proc     "gtk_widget_thaw_child_notify"      (ref _GtkWidget)
    clang proc     "gtk_widget_set_can_focus"          (ref _GtkWidget,i32)
    clang function "gtk_widget_get_can_focus"          (ref _GtkWidget)i32
    clang function "gtk_widget_has_focus"              (ref _GtkWidget)i32
    clang function "gtk_widget_is_focus"               (ref _GtkWidget)i32
    clang function "gtk_widget_has_visible_focus"      (ref _GtkWidget)i32
    clang proc     "gtk_widget_grab_focus"             (ref _GtkWidget)
    clang proc     "gtk_widget_set_can_default"        (ref _GtkWidget,i32)
    clang function "gtk_widget_get_can_default"        (ref _GtkWidget)i32
    clang function "gtk_widget_has_default"            (ref _GtkWidget)i32
    clang proc     "gtk_widget_grab_default"           (ref _GtkWidget)
    clang proc     "gtk_widget_set_receives_default"   (ref _GtkWidget,i32)
    clang function "gtk_widget_get_receives_default"   (ref _GtkWidget)i32
    clang function "gtk_widget_has_grab"               (ref _GtkWidget)i32
    clang function "gtk_widget_device_is_shadowed"     (ref _GtkWidget,ref _GdkDevice)i32
    clang proc     "gtk_widget_set_name"               (ref _GtkWidget,ref i8)
    clang function "gtk_widget_get_name"               (ref _GtkWidget)ref i8
    clang proc     "gtk_widget_set_state"              (ref _GtkWidget,i32)
    clang function "gtk_widget_get_state"              (ref _GtkWidget)i32
    clang proc     "gtk_widget_set_state_flags"        (ref _GtkWidget,i32,i32)
    clang proc     "gtk_widget_unset_state_flags"      (ref _GtkWidget,i32)
    clang function "gtk_widget_get_state_flags"        (ref _GtkWidget)i32
    clang proc     "gtk_widget_set_sensitive"          (ref _GtkWidget,i32)
    clang function "gtk_widget_get_sensitive"          (ref _GtkWidget)i32
    clang function "gtk_widget_is_sensitive"           (ref _GtkWidget)i32
    clang proc     "gtk_widget_set_visible"            (ref _GtkWidget,i32)
    clang function "gtk_widget_get_visible"            (ref _GtkWidget)i32
    clang proc     "gtk_widget_set_has_window"         (ref _GtkWidget,i32)
    clang function "gtk_widget_get_has_window"         (ref _GtkWidget)i32
    clang function "gtk_widget_is_toplevel"            (ref _GtkWidget)i32
    clang function "gtk_widget_is_drawable"            (ref _GtkWidget)i32
    clang proc     "gtk_widget_set_realized"           (ref _GtkWidget,i32)
    clang function "gtk_widget_get_realized"           (ref _GtkWidget)i32
    clang proc     "gtk_widget_set_mapped"             (ref _GtkWidget,i32)
    clang function "gtk_widget_get_mapped"             (ref _GtkWidget)i32
    clang proc     "gtk_widget_set_app_paintable"      (ref _GtkWidget,i32)
    clang function "gtk_widget_get_app_paintable"      (ref _GtkWidget)i32
    clang proc     "gtk_widget_set_double_buffered"    (ref _GtkWidget,i32)
    clang function "gtk_widget_get_double_buffered"    (ref _GtkWidget)i32
    clang proc     "gtk_widget_set_redraw_on_allocate" (ref _GtkWidget,i32)
    clang proc     "gtk_widget_set_parent"             (ref _GtkWidget,ref _GtkWidget)
    clang function "gtk_widget_get_parent"             (ref _GtkWidget)ref _GtkWidget
    clang proc     "gtk_widget_set_parent_window"      (ref _GtkWidget,ref _GdkWindow)
    clang function "gtk_widget_get_parent_window"      (ref _GtkWidget)ref _GdkWindow
    clang proc     "gtk_widget_set_child_visible"      (ref _GtkWidget,i32)
    clang function "gtk_widget_get_child_visible"      (ref _GtkWidget)i32
    clang proc     "gtk_widget_set_window"             (ref _GtkWidget,ref _GdkWindow)
    clang function "gtk_widget_get_window"             (ref _GtkWidget)ref _GdkWindow
    clang function "gtk_widget_get_allocated_width"    (ref _GtkWidget)i32
    clang function "gtk_widget_get_allocated_height"   (ref _GtkWidget)i32
    clang proc     "gtk_widget_get_allocation"         (ref _GtkWidget,ref _cairo_rectangle_int)
    clang proc     "gtk_widget_set_allocation"         (ref _GtkWidget,ref _cairo_rectangle_int)
    clang proc     "gtk_widget_get_requisition"        (ref _GtkWidget,ref _GtkRequisition)
    clang function "gtk_widget_child_focus"            (ref _GtkWidget,i32)i32
    clang function "gtk_widget_keynav_failed"          (ref _GtkWidget,i32)i32
    clang proc     "gtk_widget_error_bell"             (ref _GtkWidget)
    clang proc     "gtk_widget_set_size_request"       (ref _GtkWidget,i32,i32)
    clang proc     "gtk_widget_get_size_request"       (ref _GtkWidget,ref i32,ref i32)
    clang proc     "gtk_widget_set_events"             (ref _GtkWidget,i32)
    clang proc     "gtk_widget_add_events"             (ref _GtkWidget,i32)
    clang proc     "gtk_widget_set_device_events"      (ref _GtkWidget,ref _GdkDevice,i32)
    clang proc     "gtk_widget_add_device_events"      (ref _GtkWidget,ref _GdkDevice,i32)
    clang proc     "gtk_widget_set_device_enabled"     (ref _GtkWidget,ref _GdkDevice,i32)
    clang function "gtk_widget_get_device_enabled"     (ref _GtkWidget,ref _GdkDevice)i32
    clang function "gtk_widget_get_toplevel"           (ref _GtkWidget)ref _GtkWidget
    clang function "gtk_widget_get_ancestor"           (ref _GtkWidget,u64)ref _GtkWidget
    clang function "gtk_widget_get_visual"             (ref _GtkWidget)ref _GdkVisual
    clang proc     "gtk_widget_set_visual"             (ref _GtkWidget,ref _GdkVisual)
    clang function "gtk_widget_get_screen"             (ref _GtkWidget)ref _GdkScreen
    clang function "gtk_widget_has_screen"             (ref _GtkWidget)i32
    clang function "gtk_widget_get_display"            (ref _GtkWidget)ref _GdkDisplay
    clang function "gtk_widget_get_root_window"        (ref _GtkWidget)ref _GdkWindow
    clang function "gtk_widget_get_settings"           (ref _GtkWidget)ref _GtkSettings
    clang function "gtk_widget_get_clipboard"          (ref _GtkWidget,ref _GdkAtom)ref _GtkClipboard
    clang function "gtk_widget_get_hexpand"            (ref _GtkWidget)i32
    clang proc     "gtk_widget_set_hexpand"            (ref _GtkWidget,i32)
    clang function "gtk_widget_get_hexpand_set"        (ref _GtkWidget)i32
    clang proc     "gtk_widget_set_hexpand_set"        (ref _GtkWidget,i32)
    clang function "gtk_widget_get_vexpand"            (ref _GtkWidget)i32
    clang proc     "gtk_widget_set_vexpand"            (ref _GtkWidget,i32)
    clang function "gtk_widget_get_vexpand_set"        (ref _GtkWidget)i32
    clang proc     "gtk_widget_set_vexpand_set"        (ref _GtkWidget,i32)
    clang proc     "gtk_widget_queue_compute_expand"   (ref _GtkWidget)
    clang function "gtk_widget_compute_expand"         (ref _GtkWidget,i32)i32
    clang function "gtk_widget_get_support_multidevice" (ref _GtkWidget)i32
    clang proc     "gtk_widget_set_support_multidevice" (ref _GtkWidget,i32)
    clang proc     "gtk_widget_class_set_accessible_type" (ref _GtkWidgetClass,u64)
    clang proc     "gtk_widget_class_set_accessible_role" (ref _GtkWidgetClass,i32)
    clang function "gtk_widget_get_accessible"         (ref _GtkWidget)ref _AtkObject
    clang function "gtk_widget_get_halign"             (ref _GtkWidget)i32
    clang proc     "gtk_widget_set_halign"             (ref _GtkWidget,i32)
    clang function "gtk_widget_get_valign"             (ref _GtkWidget)i32
    clang proc     "gtk_widget_set_valign"             (ref _GtkWidget,i32)
    clang function "gtk_widget_get_margin_left"        (ref _GtkWidget)i32
    clang proc     "gtk_widget_set_margin_left"        (ref _GtkWidget,i32)
    clang function "gtk_widget_get_margin_right"       (ref _GtkWidget)i32
    clang proc     "gtk_widget_set_margin_right"       (ref _GtkWidget,i32)
    clang function "gtk_widget_get_margin_top"         (ref _GtkWidget)i32
    clang proc     "gtk_widget_set_margin_top"         (ref _GtkWidget,i32)
    clang function "gtk_widget_get_margin_bottom"      (ref _GtkWidget)i32
    clang proc     "gtk_widget_set_margin_bottom"      (ref _GtkWidget,i32)
    clang function "gtk_widget_get_events"             (ref _GtkWidget)i32
    clang function "gtk_widget_get_device_events"      (ref _GtkWidget,ref _GdkDevice)i32
    clang proc     "gtk_widget_get_pointer"            (ref _GtkWidget,ref i32,ref i32)
    clang function "gtk_widget_is_ancestor"            (ref _GtkWidget,ref _GtkWidget)i32
    clang function "gtk_widget_translate_coordinates"  (ref _GtkWidget,ref _GtkWidget,i32,i32,ref i32,ref i32)i32
    clang function "gtk_widget_hide_on_delete"         (ref _GtkWidget)i32
    clang proc     "gtk_widget_override_color"         (ref _GtkWidget,i32,ref _GdkRGBA)
    clang proc     "gtk_widget_override_background_color" (ref _GtkWidget,i32,ref _GdkRGBA)
    clang proc     "gtk_widget_override_font"          (ref _GtkWidget,ref _PangoFontDescription)
    clang proc     "gtk_widget_override_symbolic_color" (ref _GtkWidget,ref i8,ref _GdkRGBA)
    clang proc     "gtk_widget_override_cursor"        (ref _GtkWidget,ref _GdkRGBA,ref _GdkRGBA)
    clang proc     "gtk_widget_reset_style"            (ref _GtkWidget)
    clang function "gtk_widget_create_pango_context"   (ref _GtkWidget)ref _PangoContext
    clang function "gtk_widget_get_pango_context"      (ref _GtkWidget)ref _PangoContext
    clang function "gtk_widget_create_pango_layout"    (ref _GtkWidget,ref i8)ref _PangoLayout
    clang function "gtk_widget_render_icon_pixbuf"     (ref _GtkWidget,ref i8,i32)ref _GdkPixbuf
    clang proc     "gtk_widget_set_composite_name"     (ref _GtkWidget,ref i8)
    clang function "gtk_widget_get_composite_name"     (ref _GtkWidget)ref i8
    clang proc     "gtk_widget_push_composite_child"   ()
    clang proc     "gtk_widget_pop_composite_child"    ()
    clang proc     "gtk_widget_class_install_style_property" (ref _GtkWidgetClass,ref _GParamSpec)
    clang proc     "gtk_widget_class_install_style_property_parser" (ref _GtkWidgetClass,ref _GParamSpec,ref clang function(ref _GParamSpec,ref _GString,ref _GValue)i32)
    clang function "gtk_widget_class_find_style_property" (ref _GtkWidgetClass,ref i8)ref _GParamSpec
    clang function "gtk_widget_class_list_style_properties" (ref _GtkWidgetClass,ref u32)ref ref _GParamSpec
    clang proc     "gtk_widget_style_get_property"     (ref _GtkWidget,ref i8,ref _GValue)
    clang proc     "gtk_widget_style_get_valist"       (ref _GtkWidget,ref i8,ref i8)
    clang proc     "gtk_widget_style_get"              (ref _GtkWidget,ref i8,...)
    clang proc     "gtk_widget_set_direction"          (ref _GtkWidget,i32)
    clang function "gtk_widget_get_direction"          (ref _GtkWidget)i32
    clang proc     "gtk_widget_set_default_direction"  (i32)
    clang function "gtk_widget_get_default_direction"  ()i32
    clang function "gtk_widget_is_composited"          (ref _GtkWidget)i32
    clang proc     "gtk_widget_shape_combine_region"   (ref _GtkWidget,ref _cairo_region)
    clang proc     "gtk_widget_input_shape_combine_region" (ref _GtkWidget,ref _cairo_region)
    clang function "gtk_widget_list_mnemonic_labels"   (ref _GtkWidget)ref _GList
    clang proc     "gtk_widget_add_mnemonic_label"     (ref _GtkWidget,ref _GtkWidget)
    clang proc     "gtk_widget_remove_mnemonic_label"  (ref _GtkWidget,ref _GtkWidget)
    clang proc     "gtk_widget_set_tooltip_window"     (ref _GtkWidget,ref _GtkWindow)
    clang function "gtk_widget_get_tooltip_window"     (ref _GtkWidget)ref _GtkWindow
    clang proc     "gtk_widget_trigger_tooltip_query"  (ref _GtkWidget)
    clang proc     "gtk_widget_set_tooltip_text"       (ref _GtkWidget,ref i8)
    clang function "gtk_widget_get_tooltip_text"       (ref _GtkWidget)ref i8
    clang proc     "gtk_widget_set_tooltip_markup"     (ref _GtkWidget,ref i8)
    clang function "gtk_widget_get_tooltip_markup"     (ref _GtkWidget)ref i8
    clang proc     "gtk_widget_set_has_tooltip"        (ref _GtkWidget,i32)
    clang function "gtk_widget_get_has_tooltip"        (ref _GtkWidget)i32
    clang function "gtk_cairo_should_draw_window"      (ref _cairo,ref _GdkWindow)i32
    clang proc     "gtk_cairo_transform_to_window"     (ref _cairo,ref _GtkWidget,ref _GdkWindow)
    clang function "gtk_requisition_get_type"          ()u64
    clang function "gtk_requisition_new"               ()ref _GtkRequisition
    clang function "gtk_requisition_copy"              (ref _GtkRequisition)ref _GtkRequisition
    clang proc     "gtk_requisition_free"              (ref _GtkRequisition)
    clang function "gtk_widget_in_destruction"         (ref _GtkWidget)i32
    clang function "gtk_widget_get_style_context"      (ref _GtkWidget)ref _GtkStyleContext
    clang function "gtk_widget_get_path"               (ref _GtkWidget)ref _GtkWidgetPath
    clang function "gtk_widget_get_modifier_mask"      (ref _GtkWidget,i32)i32
    clang proc     "gtk_widget_insert_action_group"    (ref _GtkWidget,ref i8,ref _GActionGroup)
    record _GtkApplication =
        var _GApplication parent
        var ref _GtkApplicationPrivate priv
    end

    record _GtkApplicationClass =
        var _GApplicationClass parent_class
        var ref clang proc(ref _GtkApplication,ref _GtkWindow) window_added
        var ref clang proc(ref _GtkApplication,ref _GtkWindow) window_removed
        var [12]ref void padding
    end

    record _GtkApplicationPrivate =
        var int dummy    !empty record
    end

    clang function "gtk_application_get_type"          ()u64
    clang function "gtk_application_new"               (ref i8,i32)ref _GtkApplication
    clang proc     "gtk_application_add_window"        (ref _GtkApplication,ref _GtkWindow)
    clang proc     "gtk_application_remove_window"     (ref _GtkApplication,ref _GtkWindow)
    clang function "gtk_application_get_windows"       (ref _GtkApplication)ref _GList
    clang function "gtk_application_get_app_menu"      (ref _GtkApplication)ref _GMenuModel
    clang proc     "gtk_application_set_app_menu"      (ref _GtkApplication,ref _GMenuModel)
    clang function "gtk_application_get_menubar"       (ref _GtkApplication)ref _GMenuModel
    clang proc     "gtk_application_set_menubar"       (ref _GtkApplication,ref _GMenuModel)
    clang proc     "gtk_application_add_accelerator"   (ref _GtkApplication,ref i8,ref i8,ref _GVariant)
    clang proc     "gtk_application_remove_accelerator" (ref _GtkApplication,ref i8,ref _GVariant)
    const GTK_APPLICATION_INHIBIT_LOGOUT     = 1
    const GTK_APPLICATION_INHIBIT_SWITCH     = 2
    const GTK_APPLICATION_INHIBIT_SUSPEND    = 4
    const GTK_APPLICATION_INHIBIT_IDLE       = 8
    clang function "gtk_application_inhibit"           (ref _GtkApplication,ref _GtkWindow,i32,ref i8)u32
    clang proc     "gtk_application_uninhibit"         (ref _GtkApplication,u32)
    clang function "gtk_application_is_inhibited"      (ref _GtkApplication,i32)i32
    clang function "gtk_application_get_window_by_id"  (ref _GtkApplication,u32)ref _GtkWindow
    clang function "gtk_application_get_active_window" (ref _GtkApplication)ref _GtkWindow
    record _GtkContainer =
        var _GtkWidget widget
        var ref _GtkContainerPrivate priv
    end

    record _GtkContainerPrivate =
        var int dummy    !empty record
    end

    record _GtkContainerClass =
        var _GtkWidgetClass parent_class
        var ref clang proc(ref _GtkContainer,ref _GtkWidget) add
        var ref clang proc(ref _GtkContainer,ref _GtkWidget) remove
        var ref clang proc(ref _GtkContainer) check_resize
        var ref clang proc(ref _GtkContainer,i32,ref clang proc(ref _GtkWidget,ref void),ref void) forall
        var ref clang proc(ref _GtkContainer,ref _GtkWidget) set_focus_child
        var ref clang function(ref _GtkContainer)u64 child_type
        var ref clang function(ref _GtkContainer,ref _GtkWidget)ref i8 composite_name
        var ref clang proc(ref _GtkContainer,ref _GtkWidget,u32,ref _GValue,ref _GParamSpec) set_child_property
        var ref clang proc(ref _GtkContainer,ref _GtkWidget,u32,ref _GValue,ref _GParamSpec) get_child_property
        var ref clang function(ref _GtkContainer,ref _GtkWidget)ref _GtkWidgetPath get_path_for_child
        var u32 _handle_border_width
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
        var ref clang proc() _gtk_reserved5
        var ref clang proc() _gtk_reserved6
        var ref clang proc() _gtk_reserved7
        var ref clang proc() _gtk_reserved8
    end

    clang function "gtk_container_get_type"            ()u64
    clang proc     "gtk_container_set_border_width"    (ref _GtkContainer,u32)
    clang function "gtk_container_get_border_width"    (ref _GtkContainer)u32
    clang proc     "gtk_container_add"                 (ref _GtkContainer,ref _GtkWidget)
    clang proc     "gtk_container_remove"              (ref _GtkContainer,ref _GtkWidget)
    clang proc     "gtk_container_set_resize_mode"     (ref _GtkContainer,i32)
    clang function "gtk_container_get_resize_mode"     (ref _GtkContainer)i32
    clang proc     "gtk_container_check_resize"        (ref _GtkContainer)
    clang proc     "gtk_container_foreach"             (ref _GtkContainer,ref clang proc(ref _GtkWidget,ref void),ref void)
    clang function "gtk_container_get_children"        (ref _GtkContainer)ref _GList
    clang proc     "gtk_container_propagate_draw"      (ref _GtkContainer,ref _GtkWidget,ref _cairo)
    clang proc     "gtk_container_set_focus_chain"     (ref _GtkContainer,ref _GList)
    clang function "gtk_container_get_focus_chain"     (ref _GtkContainer,ref ref _GList)i32
    clang proc     "gtk_container_unset_focus_chain"   (ref _GtkContainer)
    clang proc     "gtk_container_set_reallocate_redraws" (ref _GtkContainer,i32)
    clang proc     "gtk_container_set_focus_child"     (ref _GtkContainer,ref _GtkWidget)
    clang function "gtk_container_get_focus_child"     (ref _GtkContainer)ref _GtkWidget
    clang proc     "gtk_container_set_focus_vadjustment" (ref _GtkContainer,ref _GtkAdjustment)
    clang function "gtk_container_get_focus_vadjustment" (ref _GtkContainer)ref _GtkAdjustment
    clang proc     "gtk_container_set_focus_hadjustment" (ref _GtkContainer,ref _GtkAdjustment)
    clang function "gtk_container_get_focus_hadjustment" (ref _GtkContainer)ref _GtkAdjustment
    clang proc     "gtk_container_resize_children"     (ref _GtkContainer)
    clang function "gtk_container_child_type"          (ref _GtkContainer)u64
    clang proc     "gtk_container_class_install_child_property" (ref _GtkContainerClass,u32,ref _GParamSpec)
    clang function "gtk_container_class_find_child_property" (ref _GObjectClass,ref i8)ref _GParamSpec
    clang function "gtk_container_class_list_child_properties" (ref _GObjectClass,ref u32)ref ref _GParamSpec
    clang proc     "gtk_container_add_with_properties" (ref _GtkContainer,ref _GtkWidget,ref i8,...)
    clang proc     "gtk_container_child_set"           (ref _GtkContainer,ref _GtkWidget,ref i8,...)
    clang proc     "gtk_container_child_get"           (ref _GtkContainer,ref _GtkWidget,ref i8,...)
    clang proc     "gtk_container_child_set_valist"    (ref _GtkContainer,ref _GtkWidget,ref i8,ref i8)
    clang proc     "gtk_container_child_get_valist"    (ref _GtkContainer,ref _GtkWidget,ref i8,ref i8)
    clang proc     "gtk_container_child_set_property"  (ref _GtkContainer,ref _GtkWidget,ref i8,ref _GValue)
    clang proc     "gtk_container_child_get_property"  (ref _GtkContainer,ref _GtkWidget,ref i8,ref _GValue)
    clang proc     "gtk_container_child_notify"        (ref _GtkContainer,ref _GtkWidget,ref i8)
    clang proc     "gtk_container_forall"              (ref _GtkContainer,ref clang proc(ref _GtkWidget,ref void),ref void)
    clang proc     "gtk_container_class_handle_border_width" (ref _GtkContainerClass)
    clang function "gtk_container_get_path_for_child"  (ref _GtkContainer,ref _GtkWidget)ref _GtkWidgetPath
    record _GtkBin =
        var _GtkContainer container
        var ref _GtkBinPrivate priv
    end

    record _GtkBinPrivate =
        var int dummy    !empty record
    end

    record _GtkBinClass =
        var _GtkContainerClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_bin_get_type"                  ()u64
    clang function "gtk_bin_get_child"                 (ref _GtkBin)ref _GtkWidget
    clang proc     "_gtk_bin_set_child"                (ref _GtkBin,ref _GtkWidget)
    record _GtkWindowPrivate =
        var int dummy    !empty record
    end

    record _GtkWindowClass =
        var _GtkBinClass parent_class
        var ref clang proc(ref _GtkWindow,ref _GtkWidget) set_focus
        var ref clang proc(ref _GtkWindow) activate_focus
        var ref clang proc(ref _GtkWindow) activate_default
        var ref clang proc(ref _GtkWindow) keys_changed
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    record _GtkWindowGeometryInfo =
        var int dummy    !empty record
    end

    record _GtkWindowGroup =
        var _GObject parent_instance
        var ref _GtkWindowGroupPrivate priv
    end

    record _GtkWindowGroupClass =
        var _GObjectClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    record _GtkWindowGroupPrivate =
        var int dummy    !empty record
    end

    clang function "gtk_window_get_type"               ()u64
    clang function "gtk_window_new"                    (i32)ref _GtkWidget
    clang proc     "gtk_window_set_title"              (ref _GtkWindow,ref i8)
    clang function "gtk_window_get_title"              (ref _GtkWindow)ref i8
    clang proc     "gtk_window_set_wmclass"            (ref _GtkWindow,ref i8,ref i8)
    clang proc     "gtk_window_set_role"               (ref _GtkWindow,ref i8)
    clang proc     "gtk_window_set_startup_id"         (ref _GtkWindow,ref i8)
    clang function "gtk_window_get_role"               (ref _GtkWindow)ref i8
    clang proc     "gtk_window_add_accel_group"        (ref _GtkWindow,ref _GtkAccelGroup)
    clang proc     "gtk_window_remove_accel_group"     (ref _GtkWindow,ref _GtkAccelGroup)
    clang proc     "gtk_window_set_position"           (ref _GtkWindow,i32)
    clang function "gtk_window_activate_focus"         (ref _GtkWindow)i32
    clang proc     "gtk_window_set_focus"              (ref _GtkWindow,ref _GtkWidget)
    clang function "gtk_window_get_focus"              (ref _GtkWindow)ref _GtkWidget
    clang proc     "gtk_window_set_default"            (ref _GtkWindow,ref _GtkWidget)
    clang function "gtk_window_get_default_widget"     (ref _GtkWindow)ref _GtkWidget
    clang function "gtk_window_activate_default"       (ref _GtkWindow)i32
    clang proc     "gtk_window_set_transient_for"      (ref _GtkWindow,ref _GtkWindow)
    clang function "gtk_window_get_transient_for"      (ref _GtkWindow)ref _GtkWindow
    clang proc     "gtk_window_set_attached_to"        (ref _GtkWindow,ref _GtkWidget)
    clang function "gtk_window_get_attached_to"        (ref _GtkWindow)ref _GtkWidget
    clang proc     "gtk_window_set_opacity"            (ref _GtkWindow,r64)
    clang function "gtk_window_get_opacity"            (ref _GtkWindow)r64
    clang proc     "gtk_window_set_type_hint"          (ref _GtkWindow,i32)
    clang function "gtk_window_get_type_hint"          (ref _GtkWindow)i32
    clang proc     "gtk_window_set_skip_taskbar_hint"  (ref _GtkWindow,i32)
    clang function "gtk_window_get_skip_taskbar_hint"  (ref _GtkWindow)i32
    clang proc     "gtk_window_set_skip_pager_hint"    (ref _GtkWindow,i32)
    clang function "gtk_window_get_skip_pager_hint"    (ref _GtkWindow)i32
    clang proc     "gtk_window_set_urgency_hint"       (ref _GtkWindow,i32)
    clang function "gtk_window_get_urgency_hint"       (ref _GtkWindow)i32
    clang proc     "gtk_window_set_accept_focus"       (ref _GtkWindow,i32)
    clang function "gtk_window_get_accept_focus"       (ref _GtkWindow)i32
    clang proc     "gtk_window_set_focus_on_map"       (ref _GtkWindow,i32)
    clang function "gtk_window_get_focus_on_map"       (ref _GtkWindow)i32
    clang proc     "gtk_window_set_destroy_with_parent" (ref _GtkWindow,i32)
    clang function "gtk_window_get_destroy_with_parent" (ref _GtkWindow)i32
    clang proc     "gtk_window_set_hide_titlebar_when_maximized" (ref _GtkWindow,i32)
    clang function "gtk_window_get_hide_titlebar_when_maximized" (ref _GtkWindow)i32
    clang proc     "gtk_window_set_mnemonics_visible"  (ref _GtkWindow,i32)
    clang function "gtk_window_get_mnemonics_visible"  (ref _GtkWindow)i32
    clang proc     "gtk_window_set_focus_visible"      (ref _GtkWindow,i32)
    clang function "gtk_window_get_focus_visible"      (ref _GtkWindow)i32
    clang proc     "gtk_window_set_resizable"          (ref _GtkWindow,i32)
    clang function "gtk_window_get_resizable"          (ref _GtkWindow)i32
    clang proc     "gtk_window_set_gravity"            (ref _GtkWindow,i32)
    clang function "gtk_window_get_gravity"            (ref _GtkWindow)i32
    clang proc     "gtk_window_set_geometry_hints"     (ref _GtkWindow,ref _GtkWidget,ref _GdkGeometry,i32)
    clang proc     "gtk_window_set_screen"             (ref _GtkWindow,ref _GdkScreen)
    clang function "gtk_window_get_screen"             (ref _GtkWindow)ref _GdkScreen
    clang function "gtk_window_is_active"              (ref _GtkWindow)i32
    clang function "gtk_window_has_toplevel_focus"     (ref _GtkWindow)i32
    clang proc     "gtk_window_set_decorated"          (ref _GtkWindow,i32)
    clang function "gtk_window_get_decorated"          (ref _GtkWindow)i32
    clang proc     "gtk_window_set_deletable"          (ref _GtkWindow,i32)
    clang function "gtk_window_get_deletable"          (ref _GtkWindow)i32
    clang proc     "gtk_window_set_icon_list"          (ref _GtkWindow,ref _GList)
    clang function "gtk_window_get_icon_list"          (ref _GtkWindow)ref _GList
    clang proc     "gtk_window_set_icon"               (ref _GtkWindow,ref _GdkPixbuf)
    clang proc     "gtk_window_set_icon_name"          (ref _GtkWindow,ref i8)
    clang function "gtk_window_set_icon_from_file"     (ref _GtkWindow,ref i8,ref ref _GError)i32
    clang function "gtk_window_get_icon"               (ref _GtkWindow)ref _GdkPixbuf
    clang function "gtk_window_get_icon_name"          (ref _GtkWindow)ref i8
    clang proc     "gtk_window_set_default_icon_list"  (ref _GList)
    clang function "gtk_window_get_default_icon_list"  ()ref _GList
    clang proc     "gtk_window_set_default_icon"       (ref _GdkPixbuf)
    clang proc     "gtk_window_set_default_icon_name"  (ref i8)
    clang function "gtk_window_get_default_icon_name"  ()ref i8
    clang function "gtk_window_set_default_icon_from_file" (ref i8,ref ref _GError)i32
    clang proc     "gtk_window_set_auto_startup_notification" (i32)
    clang proc     "gtk_window_set_modal"              (ref _GtkWindow,i32)
    clang function "gtk_window_get_modal"              (ref _GtkWindow)i32
    clang function "gtk_window_list_toplevels"         ()ref _GList
    clang proc     "gtk_window_set_has_user_ref_count" (ref _GtkWindow,i32)
    clang proc     "gtk_window_add_mnemonic"           (ref _GtkWindow,u32,ref _GtkWidget)
    clang proc     "gtk_window_remove_mnemonic"        (ref _GtkWindow,u32,ref _GtkWidget)
    clang function "gtk_window_mnemonic_activate"      (ref _GtkWindow,u32,i32)i32
    clang proc     "gtk_window_set_mnemonic_modifier"  (ref _GtkWindow,i32)
    clang function "gtk_window_get_mnemonic_modifier"  (ref _GtkWindow)i32
    clang function "gtk_window_activate_key"           (ref _GtkWindow,ref _GdkEventKey)i32
    clang function "gtk_window_propagate_key_event"    (ref _GtkWindow,ref _GdkEventKey)i32
    clang proc     "gtk_window_present"                (ref _GtkWindow)
    clang proc     "gtk_window_present_with_time"      (ref _GtkWindow,u32)
    clang proc     "gtk_window_iconify"                (ref _GtkWindow)
    clang proc     "gtk_window_deiconify"              (ref _GtkWindow)
    clang proc     "gtk_window_stick"                  (ref _GtkWindow)
    clang proc     "gtk_window_unstick"                (ref _GtkWindow)
    clang proc     "gtk_window_maximize"               (ref _GtkWindow)
    clang proc     "gtk_window_unmaximize"             (ref _GtkWindow)
    clang proc     "gtk_window_fullscreen"             (ref _GtkWindow)
    clang proc     "gtk_window_unfullscreen"           (ref _GtkWindow)
    clang proc     "gtk_window_set_keep_above"         (ref _GtkWindow,i32)
    clang proc     "gtk_window_set_keep_below"         (ref _GtkWindow,i32)
    clang proc     "gtk_window_begin_resize_drag"      (ref _GtkWindow,i32,i32,i32,i32,u32)
    clang proc     "gtk_window_begin_move_drag"        (ref _GtkWindow,i32,i32,i32,u32)
    clang proc     "gtk_window_set_default_size"       (ref _GtkWindow,i32,i32)
    clang proc     "gtk_window_get_default_size"       (ref _GtkWindow,ref i32,ref i32)
    clang proc     "gtk_window_resize"                 (ref _GtkWindow,i32,i32)
    clang proc     "gtk_window_get_size"               (ref _GtkWindow,ref i32,ref i32)
    clang proc     "gtk_window_move"                   (ref _GtkWindow,i32,i32)
    clang proc     "gtk_window_get_position"           (ref _GtkWindow,ref i32,ref i32)
    clang function "gtk_window_parse_geometry"         (ref _GtkWindow,ref i8)i32
    clang proc     "gtk_window_set_default_geometry"   (ref _GtkWindow,i32,i32)
    clang proc     "gtk_window_resize_to_geometry"     (ref _GtkWindow,i32,i32)
    clang function "gtk_window_get_group"              (ref _GtkWindow)ref _GtkWindowGroup
    clang function "gtk_window_has_group"              (ref _GtkWindow)i32
    clang proc     "gtk_window_reshow_with_initial_size" (ref _GtkWindow)
    clang function "gtk_window_get_window_type"        (ref _GtkWindow)i32
    clang function "gtk_window_group_get_type"         ()u64
    clang function "gtk_window_group_new"              ()ref _GtkWindowGroup
    clang proc     "gtk_window_group_add_window"       (ref _GtkWindowGroup,ref _GtkWindow)
    clang proc     "gtk_window_group_remove_window"    (ref _GtkWindowGroup,ref _GtkWindow)
    clang function "gtk_window_group_list_windows"     (ref _GtkWindowGroup)ref _GList
    clang function "gtk_window_group_get_current_grab" (ref _GtkWindowGroup)ref _GtkWidget
    clang function "gtk_window_group_get_current_device_grab" (ref _GtkWindowGroup,ref _GdkDevice)ref _GtkWidget
    clang function "gtk_window_get_application"        (ref _GtkWindow)ref _GtkApplication
    clang proc     "gtk_window_set_application"        (ref _GtkWindow,ref _GtkApplication)
    clang proc     "gtk_window_set_has_resize_grip"    (ref _GtkWindow,i32)
    clang function "gtk_window_get_has_resize_grip"    (ref _GtkWindow)i32
    clang function "gtk_window_resize_grip_is_visible" (ref _GtkWindow)i32
    clang function "gtk_window_get_resize_grip_area"   (ref _GtkWindow,ref _cairo_rectangle_int)i32
    const GTK_DIALOG_MODAL                   = 1
    const GTK_DIALOG_DESTROY_WITH_PARENT     = 2
    const GTK_RESPONSE_NONE                  = -1
    const GTK_RESPONSE_REJECT                = -2
    const GTK_RESPONSE_ACCEPT                = -3
    const GTK_RESPONSE_DELETE_EVENT          = -4
    const GTK_RESPONSE_OK                    = -5
    const GTK_RESPONSE_CANCEL                = -6
    const GTK_RESPONSE_CLOSE                 = -7
    const GTK_RESPONSE_YES                   = -8
    const GTK_RESPONSE_NO                    = -9
    const GTK_RESPONSE_APPLY                 = -10
    const GTK_RESPONSE_HELP                  = -11
    record _GtkDialog =
        var _GtkWindow window
        var ref _GtkDialogPrivate priv
    end

    record _GtkDialogPrivate =
        var int dummy    !empty record
    end

    record _GtkDialogClass =
        var _GtkWindowClass parent_class
        var ref clang proc(ref _GtkDialog,i32) response
        var ref clang proc(ref _GtkDialog) close
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_dialog_get_type"               ()u64
    clang function "gtk_dialog_new"                    ()ref _GtkWidget
    clang function "gtk_dialog_new_with_buttons"       (ref i8,ref _GtkWindow,i32,ref i8,...)ref _GtkWidget
    clang proc     "gtk_dialog_add_action_widget"      (ref _GtkDialog,ref _GtkWidget,i32)
    clang function "gtk_dialog_add_button"             (ref _GtkDialog,ref i8,i32)ref _GtkWidget
    clang proc     "gtk_dialog_add_buttons"            (ref _GtkDialog,ref i8,...)
    clang proc     "gtk_dialog_set_response_sensitive" (ref _GtkDialog,i32,i32)
    clang proc     "gtk_dialog_set_default_response"   (ref _GtkDialog,i32)
    clang function "gtk_dialog_get_widget_for_response" (ref _GtkDialog,i32)ref _GtkWidget
    clang function "gtk_dialog_get_response_for_widget" (ref _GtkDialog,ref _GtkWidget)i32
    clang function "gtk_alternative_dialog_button_order" (ref _GdkScreen)i32
    clang proc     "gtk_dialog_set_alternative_button_order" (ref _GtkDialog,i32,...)
    clang proc     "gtk_dialog_set_alternative_button_order_from_array" (ref _GtkDialog,i32,ref i32)
    clang proc     "gtk_dialog_response"               (ref _GtkDialog,i32)
    clang function "gtk_dialog_run"                    (ref _GtkDialog)i32
    clang function "gtk_dialog_get_action_area"        (ref _GtkDialog)ref _GtkWidget
    clang function "gtk_dialog_get_content_area"       (ref _GtkDialog)ref _GtkWidget
    record _GtkAboutDialog =
        var _GtkDialog parent_instance
        var ref _GtkAboutDialogPrivate priv
    end

    record _GtkAboutDialogClass =
        var _GtkDialogClass parent_class
        var ref clang function(ref _GtkAboutDialog,ref i8)i32 activate_link
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    record _GtkAboutDialogPrivate =
        var int dummy    !empty record
    end

    const GTK_LICENSE_UNKNOWN                = 0
    const GTK_LICENSE_CUSTOM                 = 1
    const GTK_LICENSE_GPL_2_0                = 2
    const GTK_LICENSE_GPL_3_0                = 3
    const GTK_LICENSE_LGPL_2_1               = 4
    const GTK_LICENSE_LGPL_3_0               = 5
    const GTK_LICENSE_BSD                    = 6
    const GTK_LICENSE_MIT_X11                = 7
    const GTK_LICENSE_ARTISTIC               = 8
    clang function "gtk_about_dialog_get_type"         ()u64
    clang function "gtk_about_dialog_new"              ()ref _GtkWidget
    clang proc     "gtk_show_about_dialog"             (ref _GtkWindow,ref i8,...)
    clang function "gtk_about_dialog_get_program_name" (ref _GtkAboutDialog)ref i8
    clang proc     "gtk_about_dialog_set_program_name" (ref _GtkAboutDialog,ref i8)
    clang function "gtk_about_dialog_get_version"      (ref _GtkAboutDialog)ref i8
    clang proc     "gtk_about_dialog_set_version"      (ref _GtkAboutDialog,ref i8)
    clang function "gtk_about_dialog_get_copyright"    (ref _GtkAboutDialog)ref i8
    clang proc     "gtk_about_dialog_set_copyright"    (ref _GtkAboutDialog,ref i8)
    clang function "gtk_about_dialog_get_comments"     (ref _GtkAboutDialog)ref i8
    clang proc     "gtk_about_dialog_set_comments"     (ref _GtkAboutDialog,ref i8)
    clang function "gtk_about_dialog_get_license"      (ref _GtkAboutDialog)ref i8
    clang proc     "gtk_about_dialog_set_license"      (ref _GtkAboutDialog,ref i8)
    clang proc     "gtk_about_dialog_set_license_type" (ref _GtkAboutDialog,i32)
    clang function "gtk_about_dialog_get_license_type" (ref _GtkAboutDialog)i32
    clang function "gtk_about_dialog_get_wrap_license" (ref _GtkAboutDialog)i32
    clang proc     "gtk_about_dialog_set_wrap_license" (ref _GtkAboutDialog,i32)
    clang function "gtk_about_dialog_get_website"      (ref _GtkAboutDialog)ref i8
    clang proc     "gtk_about_dialog_set_website"      (ref _GtkAboutDialog,ref i8)
    clang function "gtk_about_dialog_get_website_label" (ref _GtkAboutDialog)ref i8
    clang proc     "gtk_about_dialog_set_website_label" (ref _GtkAboutDialog,ref i8)
    clang function "gtk_about_dialog_get_authors"      (ref _GtkAboutDialog)ref ref i8
    clang proc     "gtk_about_dialog_set_authors"      (ref _GtkAboutDialog,ref ref i8)
    clang function "gtk_about_dialog_get_documenters"  (ref _GtkAboutDialog)ref ref i8
    clang proc     "gtk_about_dialog_set_documenters"  (ref _GtkAboutDialog,ref ref i8)
    clang function "gtk_about_dialog_get_artists"      (ref _GtkAboutDialog)ref ref i8
    clang proc     "gtk_about_dialog_set_artists"      (ref _GtkAboutDialog,ref ref i8)
    clang function "gtk_about_dialog_get_translator_credits" (ref _GtkAboutDialog)ref i8
    clang proc     "gtk_about_dialog_set_translator_credits" (ref _GtkAboutDialog,ref i8)
    clang function "gtk_about_dialog_get_logo"         (ref _GtkAboutDialog)ref _GdkPixbuf
    clang proc     "gtk_about_dialog_set_logo"         (ref _GtkAboutDialog,ref _GdkPixbuf)
    clang function "gtk_about_dialog_get_logo_icon_name" (ref _GtkAboutDialog)ref i8
    clang proc     "gtk_about_dialog_set_logo_icon_name" (ref _GtkAboutDialog,ref i8)
    clang proc     "gtk_about_dialog_add_credit_section" (ref _GtkAboutDialog,ref i8,ref ref i8)
    record _GtkMisc =
        var _GtkWidget widget
        var ref _GtkMiscPrivate priv
    end

    record _GtkMiscPrivate =
        var int dummy    !empty record
    end

    record _GtkMiscClass =
        var _GtkWidgetClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_misc_get_type"                 ()u64
    clang proc     "gtk_misc_set_alignment"            (ref _GtkMisc,r32,r32)
    clang proc     "gtk_misc_get_alignment"            (ref _GtkMisc,ref r32,ref r32)
    clang proc     "gtk_misc_set_padding"              (ref _GtkMisc,i32,i32)
    clang proc     "gtk_misc_get_padding"              (ref _GtkMisc,ref i32,ref i32)
    clang proc     "_gtk_misc_get_padding_and_border"  (ref _GtkMisc,ref _GtkBorder)
    record _GtkMenuShell =
        var _GtkContainer container
        var ref _GtkMenuShellPrivate priv
    end

    record _GtkMenuShellClass =
        var _GtkContainerClass parent_class
        var u32 submenu_placement
        var ref clang proc(ref _GtkMenuShell) deactivate
        var ref clang proc(ref _GtkMenuShell) selection_done
        var ref clang proc(ref _GtkMenuShell,i32) move_current
        var ref clang proc(ref _GtkMenuShell,i32) activate_current
        var ref clang proc(ref _GtkMenuShell) cancel
        var ref clang proc(ref _GtkMenuShell,ref _GtkWidget) select_item
        var ref clang proc(ref _GtkMenuShell,ref _GtkWidget,i32) insert
        var ref clang function(ref _GtkMenuShell)i32 get_popup_delay
        var ref clang function(ref _GtkMenuShell,i32)i32 move_selected
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    record _GtkMenuShellPrivate =
        var int dummy    !empty record
    end

    clang function "gtk_menu_shell_get_type"           ()u64
    clang proc     "gtk_menu_shell_append"             (ref _GtkMenuShell,ref _GtkWidget)
    clang proc     "gtk_menu_shell_prepend"            (ref _GtkMenuShell,ref _GtkWidget)
    clang proc     "gtk_menu_shell_insert"             (ref _GtkMenuShell,ref _GtkWidget,i32)
    clang proc     "gtk_menu_shell_deactivate"         (ref _GtkMenuShell)
    clang proc     "gtk_menu_shell_select_item"        (ref _GtkMenuShell,ref _GtkWidget)
    clang proc     "gtk_menu_shell_deselect"           (ref _GtkMenuShell)
    clang proc     "gtk_menu_shell_activate_item"      (ref _GtkMenuShell,ref _GtkWidget,i32)
    clang proc     "gtk_menu_shell_select_first"       (ref _GtkMenuShell,i32)
    clang proc     "gtk_menu_shell_cancel"             (ref _GtkMenuShell)
    clang function "gtk_menu_shell_get_take_focus"     (ref _GtkMenuShell)i32
    clang proc     "gtk_menu_shell_set_take_focus"     (ref _GtkMenuShell,i32)
    clang function "gtk_menu_shell_get_selected_item"  (ref _GtkMenuShell)ref _GtkWidget
    clang function "gtk_menu_shell_get_parent_shell"   (ref _GtkMenuShell)ref _GtkWidget
    clang proc     "gtk_menu_shell_bind_model"         (ref _GtkMenuShell,ref _GMenuModel,ref i8,i32)
    record _GtkMenu =
        var _GtkMenuShell menu_shell
        var ref _GtkMenuPrivate priv
    end

    record _GtkMenuClass =
        var _GtkMenuShellClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    record _GtkMenuPrivate =
        var int dummy    !empty record
    end

    clang function "gtk_menu_get_type"                 ()u64
    clang function "gtk_menu_new"                      ()ref _GtkWidget
    clang function "gtk_menu_new_from_model"           (ref _GMenuModel)ref _GtkWidget
    clang proc     "gtk_menu_popup"                    (ref _GtkMenu,ref _GtkWidget,ref _GtkWidget,ref clang proc(ref _GtkMenu,ref i32,ref i32,ref i32,ref void),ref void,u32,u32)
    clang proc     "gtk_menu_popup_for_device"         (ref _GtkMenu,ref _GdkDevice,ref _GtkWidget,ref _GtkWidget,ref clang proc(ref _GtkMenu,ref i32,ref i32,ref i32,ref void),ref void,ref clang proc(ref void),u32,u32)
    clang proc     "gtk_menu_reposition"               (ref _GtkMenu)
    clang proc     "gtk_menu_popdown"                  (ref _GtkMenu)
    clang function "gtk_menu_get_active"               (ref _GtkMenu)ref _GtkWidget
    clang proc     "gtk_menu_set_active"               (ref _GtkMenu,u32)
    clang proc     "gtk_menu_set_accel_group"          (ref _GtkMenu,ref _GtkAccelGroup)
    clang function "gtk_menu_get_accel_group"          (ref _GtkMenu)ref _GtkAccelGroup
    clang proc     "gtk_menu_set_accel_path"           (ref _GtkMenu,ref i8)
    clang function "gtk_menu_get_accel_path"           (ref _GtkMenu)ref i8
    clang proc     "gtk_menu_attach_to_widget"         (ref _GtkMenu,ref _GtkWidget,ref clang proc(ref _GtkWidget,ref _GtkMenu))
    clang proc     "gtk_menu_detach"                   (ref _GtkMenu)
    clang function "gtk_menu_get_attach_widget"        (ref _GtkMenu)ref _GtkWidget
    clang proc     "gtk_menu_set_tearoff_state"        (ref _GtkMenu,i32)
    clang function "gtk_menu_get_tearoff_state"        (ref _GtkMenu)i32
    clang proc     "gtk_menu_set_title"                (ref _GtkMenu,ref i8)
    clang function "gtk_menu_get_title"                (ref _GtkMenu)ref i8
    clang proc     "gtk_menu_reorder_child"            (ref _GtkMenu,ref _GtkWidget,i32)
    clang proc     "gtk_menu_set_screen"               (ref _GtkMenu,ref _GdkScreen)
    clang proc     "gtk_menu_attach"                   (ref _GtkMenu,ref _GtkWidget,u32,u32,u32,u32)
    clang proc     "gtk_menu_set_monitor"              (ref _GtkMenu,i32)
    clang function "gtk_menu_get_monitor"              (ref _GtkMenu)i32
    clang function "gtk_menu_get_for_attach_widget"    (ref _GtkWidget)ref _GList
    clang proc     "gtk_menu_set_reserve_toggle_size"  (ref _GtkMenu,i32)
    clang function "gtk_menu_get_reserve_toggle_size"  (ref _GtkMenu)i32
    record _GtkLabel =
        var _GtkMisc misc
        var ref _GtkLabelPrivate priv
    end

    record _GtkLabelPrivate =
        var int dummy    !empty record
    end

    record _GtkLabelClass =
        var _GtkMiscClass parent_class
        var ref clang proc(ref _GtkLabel,i32,i32,i32) move_cursor
        var ref clang proc(ref _GtkLabel) copy_clipboard
        var ref clang proc(ref _GtkLabel,ref _GtkMenu) populate_popup
        var ref clang function(ref _GtkLabel,ref i8)i32 activate_link
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
        var ref clang proc() _gtk_reserved5
        var ref clang proc() _gtk_reserved6
        var ref clang proc() _gtk_reserved7
        var ref clang proc() _gtk_reserved8
    end

    record _GtkLabelSelectionInfo =
        var int dummy    !empty record
    end

    clang function "gtk_label_get_type"                ()u64
    clang function "gtk_label_new"                     (ref i8)ref _GtkWidget
    clang function "gtk_label_new_with_mnemonic"       (ref i8)ref _GtkWidget
    clang proc     "gtk_label_set_text"                (ref _GtkLabel,ref i8)
    clang function "gtk_label_get_text"                (ref _GtkLabel)ref i8
    clang proc     "gtk_label_set_attributes"          (ref _GtkLabel,ref _PangoAttrList)
    clang function "gtk_label_get_attributes"          (ref _GtkLabel)ref _PangoAttrList
    clang proc     "gtk_label_set_label"               (ref _GtkLabel,ref i8)
    clang function "gtk_label_get_label"               (ref _GtkLabel)ref i8
    clang proc     "gtk_label_set_markup"              (ref _GtkLabel,ref i8)
    clang proc     "gtk_label_set_use_markup"          (ref _GtkLabel,i32)
    clang function "gtk_label_get_use_markup"          (ref _GtkLabel)i32
    clang proc     "gtk_label_set_use_underline"       (ref _GtkLabel,i32)
    clang function "gtk_label_get_use_underline"       (ref _GtkLabel)i32
    clang proc     "gtk_label_set_markup_with_mnemonic" (ref _GtkLabel,ref i8)
    clang function "gtk_label_get_mnemonic_keyval"     (ref _GtkLabel)u32
    clang proc     "gtk_label_set_mnemonic_widget"     (ref _GtkLabel,ref _GtkWidget)
    clang function "gtk_label_get_mnemonic_widget"     (ref _GtkLabel)ref _GtkWidget
    clang proc     "gtk_label_set_text_with_mnemonic"  (ref _GtkLabel,ref i8)
    clang proc     "gtk_label_set_justify"             (ref _GtkLabel,i32)
    clang function "gtk_label_get_justify"             (ref _GtkLabel)i32
    clang proc     "gtk_label_set_ellipsize"           (ref _GtkLabel,i32)
    clang function "gtk_label_get_ellipsize"           (ref _GtkLabel)i32
    clang proc     "gtk_label_set_width_chars"         (ref _GtkLabel,i32)
    clang function "gtk_label_get_width_chars"         (ref _GtkLabel)i32
    clang proc     "gtk_label_set_max_width_chars"     (ref _GtkLabel,i32)
    clang function "gtk_label_get_max_width_chars"     (ref _GtkLabel)i32
    clang proc     "gtk_label_set_pattern"             (ref _GtkLabel,ref i8)
    clang proc     "gtk_label_set_line_wrap"           (ref _GtkLabel,i32)
    clang function "gtk_label_get_line_wrap"           (ref _GtkLabel)i32
    clang proc     "gtk_label_set_line_wrap_mode"      (ref _GtkLabel,i32)
    clang function "gtk_label_get_line_wrap_mode"      (ref _GtkLabel)i32
    clang proc     "gtk_label_set_selectable"          (ref _GtkLabel,i32)
    clang function "gtk_label_get_selectable"          (ref _GtkLabel)i32
    clang proc     "gtk_label_set_angle"               (ref _GtkLabel,r64)
    clang function "gtk_label_get_angle"               (ref _GtkLabel)r64
    clang proc     "gtk_label_select_region"           (ref _GtkLabel,i32,i32)
    clang function "gtk_label_get_selection_bounds"    (ref _GtkLabel,ref i32,ref i32)i32
    clang function "gtk_label_get_layout"              (ref _GtkLabel)ref _PangoLayout
    clang proc     "gtk_label_get_layout_offsets"      (ref _GtkLabel,ref i32,ref i32)
    clang proc     "gtk_label_set_single_line_mode"    (ref _GtkLabel,i32)
    clang function "gtk_label_get_single_line_mode"    (ref _GtkLabel)i32
    clang function "gtk_label_get_current_uri"         (ref _GtkLabel)ref i8
    clang proc     "gtk_label_set_track_visited_links" (ref _GtkLabel,i32)
    clang function "gtk_label_get_track_visited_links" (ref _GtkLabel)i32
    clang proc     "_gtk_label_mnemonics_visible_apply_recursively" (ref _GtkWidget,i32)
    clang function "_gtk_label_get_cursor_position"    (ref _GtkLabel)i32
    clang function "_gtk_label_get_selection_bound"    (ref _GtkLabel)i32
    record _GtkAccelLabel =
        var _GtkLabel label
        var ref _GtkAccelLabelPrivate priv
    end

    record _GtkAccelLabelClass =
        var _GtkLabelClass parent_class
        var ref i8 signal_quote1
        var ref i8 signal_quote2
        var ref i8 mod_name_shift
        var ref i8 mod_name_control
        var ref i8 mod_name_alt
        var ref i8 mod_separator
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    record _GtkAccelLabelPrivate =
        var int dummy    !empty record
    end

    clang function "gtk_accel_label_get_type"          ()u64
    clang function "gtk_accel_label_new"               (ref i8)ref _GtkWidget
    clang function "gtk_accel_label_get_accel_widget"  (ref _GtkAccelLabel)ref _GtkWidget
    clang function "gtk_accel_label_get_accel_width"   (ref _GtkAccelLabel)u32
    clang proc     "gtk_accel_label_set_accel_widget"  (ref _GtkAccelLabel,ref _GtkWidget)
    clang proc     "gtk_accel_label_set_accel_closure" (ref _GtkAccelLabel,ref _GClosure)
    clang function "gtk_accel_label_refetch"           (ref _GtkAccelLabel)i32
    clang proc     "gtk_accel_label_set_accel"         (ref _GtkAccelLabel,u32,i32)
    clang function "_gtk_accel_label_class_get_accelerator_label" (ref _GtkAccelLabelClass,u32,i32)ref i8
    record _GtkAccelMap =
        var int dummy    !empty record
    end

    record _GtkAccelMapClass =
        var int dummy    !empty record
    end

    clang proc     "gtk_accel_map_add_entry"           (ref i8,u32,i32)
    clang function "gtk_accel_map_lookup_entry"        (ref i8,ref _GtkAccelKey)i32
    clang function "gtk_accel_map_change_entry"        (ref i8,u32,i32,i32)i32
    clang proc     "gtk_accel_map_load"                (ref i8)
    clang proc     "gtk_accel_map_save"                (ref i8)
    clang proc     "gtk_accel_map_foreach"             (ref void,ref clang proc(ref void,ref i8,u32,i32,i32))
    clang proc     "gtk_accel_map_load_fd"             (i32)
    clang proc     "gtk_accel_map_load_scanner"        (ref _GScanner)
    clang proc     "gtk_accel_map_save_fd"             (i32)
    clang proc     "gtk_accel_map_lock_path"           (ref i8)
    clang proc     "gtk_accel_map_unlock_path"         (ref i8)
    clang proc     "gtk_accel_map_add_filter"          (ref i8)
    clang proc     "gtk_accel_map_foreach_unfiltered"  (ref void,ref clang proc(ref void,ref i8,u32,i32,i32))
    clang function "gtk_accel_map_get_type"            ()u64
    clang function "gtk_accel_map_get"                 ()ref _GtkAccelMap
    record _GtkAccessible =
        var _AtkObject parent
        var ref _GtkAccessiblePrivate priv
    end

    record _GtkAccessiblePrivate =
        var int dummy    !empty record
    end

    record _GtkAccessibleClass =
        var _AtkObjectClass parent_class
        var ref clang proc(ref _GtkAccessible) connect_widget_destroyed
        var ref clang proc(ref _GtkAccessible) widget_set
        var ref clang proc(ref _GtkAccessible) widget_unset
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_accessible_get_type"           ()u64
    clang proc     "gtk_accessible_set_widget"         (ref _GtkAccessible,ref _GtkWidget)
    clang function "gtk_accessible_get_widget"         (ref _GtkAccessible)ref _GtkWidget
    clang proc     "gtk_accessible_connect_widget_destroyed" (ref _GtkAccessible)
    record _GtkAction =
        var _GObject object
        var ref _GtkActionPrivate private_data
    end

    record _GtkActionClass =
        var _GObjectClass parent_class
        var ref clang proc(ref _GtkAction) activate
        var u64 menu_item_type
        var u64 toolbar_item_type
        var ref clang function(ref _GtkAction)ref _GtkWidget create_menu_item
        var ref clang function(ref _GtkAction)ref _GtkWidget create_tool_item
        var ref clang proc(ref _GtkAction,ref _GtkWidget) connect_proxy
        var ref clang proc(ref _GtkAction,ref _GtkWidget) disconnect_proxy
        var ref clang function(ref _GtkAction)ref _GtkWidget create_menu
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    record _GtkActionPrivate =
        var int dummy    !empty record
    end

    clang function "gtk_action_get_type"               ()u64
    clang function "gtk_action_new"                    (ref i8,ref i8,ref i8,ref i8)ref _GtkAction
    clang function "gtk_action_get_name"               (ref _GtkAction)ref i8
    clang function "gtk_action_is_sensitive"           (ref _GtkAction)i32
    clang function "gtk_action_get_sensitive"          (ref _GtkAction)i32
    clang proc     "gtk_action_set_sensitive"          (ref _GtkAction,i32)
    clang function "gtk_action_is_visible"             (ref _GtkAction)i32
    clang function "gtk_action_get_visible"            (ref _GtkAction)i32
    clang proc     "gtk_action_set_visible"            (ref _GtkAction,i32)
    clang proc     "gtk_action_activate"               (ref _GtkAction)
    clang function "gtk_action_create_icon"            (ref _GtkAction,i32)ref _GtkWidget
    clang function "gtk_action_create_menu_item"       (ref _GtkAction)ref _GtkWidget
    clang function "gtk_action_create_tool_item"       (ref _GtkAction)ref _GtkWidget
    clang function "gtk_action_create_menu"            (ref _GtkAction)ref _GtkWidget
    clang function "gtk_action_get_proxies"            (ref _GtkAction)ref _GSList
    clang proc     "gtk_action_connect_accelerator"    (ref _GtkAction)
    clang proc     "gtk_action_disconnect_accelerator" (ref _GtkAction)
    clang function "gtk_action_get_accel_path"         (ref _GtkAction)ref i8
    clang function "gtk_action_get_accel_closure"      (ref _GtkAction)ref _GClosure
    clang proc     "gtk_action_block_activate"         (ref _GtkAction)
    clang proc     "gtk_action_unblock_activate"       (ref _GtkAction)
    clang proc     "_gtk_action_add_to_proxy_list"     (ref _GtkAction,ref _GtkWidget)
    clang proc     "_gtk_action_remove_from_proxy_list" (ref _GtkAction,ref _GtkWidget)
    clang proc     "_gtk_action_emit_activate"         (ref _GtkAction)
    clang proc     "gtk_action_set_accel_path"         (ref _GtkAction,ref i8)
    clang proc     "gtk_action_set_accel_group"        (ref _GtkAction,ref _GtkAccelGroup)
    clang proc     "_gtk_action_sync_menu_visible"     (ref _GtkAction,ref _GtkWidget,i32)
    clang proc     "gtk_action_set_label"              (ref _GtkAction,ref i8)
    clang function "gtk_action_get_label"              (ref _GtkAction)ref i8
    clang proc     "gtk_action_set_short_label"        (ref _GtkAction,ref i8)
    clang function "gtk_action_get_short_label"        (ref _GtkAction)ref i8
    clang proc     "gtk_action_set_tooltip"            (ref _GtkAction,ref i8)
    clang function "gtk_action_get_tooltip"            (ref _GtkAction)ref i8
    clang proc     "gtk_action_set_stock_id"           (ref _GtkAction,ref i8)
    clang function "gtk_action_get_stock_id"           (ref _GtkAction)ref i8
    clang proc     "gtk_action_set_gicon"              (ref _GtkAction,ref _GIcon)
    clang function "gtk_action_get_gicon"              (ref _GtkAction)ref _GIcon
    clang proc     "gtk_action_set_icon_name"          (ref _GtkAction,ref i8)
    clang function "gtk_action_get_icon_name"          (ref _GtkAction)ref i8
    clang proc     "gtk_action_set_visible_horizontal" (ref _GtkAction,i32)
    clang function "gtk_action_get_visible_horizontal" (ref _GtkAction)i32
    clang proc     "gtk_action_set_visible_vertical"   (ref _GtkAction,i32)
    clang function "gtk_action_get_visible_vertical"   (ref _GtkAction)i32
    clang proc     "gtk_action_set_is_important"       (ref _GtkAction,i32)
    clang function "gtk_action_get_is_important"       (ref _GtkAction)i32
    clang proc     "gtk_action_set_always_show_image"  (ref _GtkAction,i32)
    clang function "gtk_action_get_always_show_image"  (ref _GtkAction)i32
    record _GtkActionableInterface =
        var _GTypeInterface g_iface
        var ref clang function(ref _GtkActionable)ref i8 get_action_name
        var ref clang proc(ref _GtkActionable,ref i8) set_action_name
        var ref clang function(ref _GtkActionable)ref _GVariant get_action_target_value
        var ref clang proc(ref _GtkActionable,ref _GVariant) set_action_target_value
    end

    record _GtkActionable =
        var int dummy    !empty record
    end

    clang function "gtk_actionable_get_type"           ()u64
    clang function "gtk_actionable_get_action_name"    (ref _GtkActionable)ref i8
    clang proc     "gtk_actionable_set_action_name"    (ref _GtkActionable,ref i8)
    clang function "gtk_actionable_get_action_target_value" (ref _GtkActionable)ref _GVariant
    clang proc     "gtk_actionable_set_action_target_value" (ref _GtkActionable,ref _GVariant)
    clang proc     "gtk_actionable_set_action_target"  (ref _GtkActionable,ref i8,...)
    clang proc     "gtk_actionable_set_detailed_action_name" (ref _GtkActionable,ref i8)
    record _GtkStockItem =
        var ref i8 stock_id
        var ref i8 label
        var i32 modifier
        var u32 keyval
        var ref i8 translation_domain
    end

    clang proc     "gtk_stock_add"                     (ref _GtkStockItem,u32)
    clang proc     "gtk_stock_add_static"              (ref _GtkStockItem,u32)
    clang function "gtk_stock_lookup"                  (ref i8,ref _GtkStockItem)i32
    clang function "gtk_stock_list_ids"                ()ref _GSList
    clang function "gtk_stock_item_copy"               (ref _GtkStockItem)ref _GtkStockItem
    clang proc     "gtk_stock_item_free"               (ref _GtkStockItem)
    clang proc     "gtk_stock_set_translate_func"      (ref i8,ref clang function(ref i8,ref void)ref i8,ref void,ref clang proc(ref void))
    record _GtkActionGroup =
        var _GObject parent
        var ref _GtkActionGroupPrivate priv
    end

    record _GtkActionGroupPrivate =
        var int dummy    !empty record
    end

    record _GtkActionGroupClass =
        var _GObjectClass parent_class
        var ref clang function(ref _GtkActionGroup,ref i8)ref _GtkAction get_action
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    record _GtkActionEntry =
        var ref i8 name
        var ref i8 stock_id
        var ref i8 label
        var ref i8 accelerator
        var ref i8 tooltip
        var ref clang proc() callback$
    end

    record _GtkToggleActionEntry =
        var ref i8 name
        var ref i8 stock_id
        var ref i8 label
        var ref i8 accelerator
        var ref i8 tooltip
        var ref clang proc() callback$
        var i32 is_active
    end

    record _GtkRadioActionEntry =
        var ref i8 name
        var ref i8 stock_id
        var ref i8 label
        var ref i8 accelerator
        var ref i8 tooltip
        var i32 value
    end

    clang function "gtk_action_group_get_type"         ()u64
    clang function "gtk_action_group_new"              (ref i8)ref _GtkActionGroup
    clang function "gtk_action_group_get_name"         (ref _GtkActionGroup)ref i8
    clang function "gtk_action_group_get_sensitive"    (ref _GtkActionGroup)i32
    clang proc     "gtk_action_group_set_sensitive"    (ref _GtkActionGroup,i32)
    clang function "gtk_action_group_get_visible"      (ref _GtkActionGroup)i32
    clang proc     "gtk_action_group_set_visible"      (ref _GtkActionGroup,i32)
    clang function "gtk_action_group_get_accel_group"  (ref _GtkActionGroup)ref _GtkAccelGroup
    clang proc     "gtk_action_group_set_accel_group"  (ref _GtkActionGroup,ref _GtkAccelGroup)
    clang function "gtk_action_group_get_action"       (ref _GtkActionGroup,ref i8)ref _GtkAction
    clang function "gtk_action_group_list_actions"     (ref _GtkActionGroup)ref _GList
    clang proc     "gtk_action_group_add_action"       (ref _GtkActionGroup,ref _GtkAction)
    clang proc     "gtk_action_group_add_action_with_accel" (ref _GtkActionGroup,ref _GtkAction,ref i8)
    clang proc     "gtk_action_group_remove_action"    (ref _GtkActionGroup,ref _GtkAction)
    clang proc     "gtk_action_group_add_actions"      (ref _GtkActionGroup,ref _GtkActionEntry,u32,ref void)
    clang proc     "gtk_action_group_add_toggle_actions" (ref _GtkActionGroup,ref _GtkToggleActionEntry,u32,ref void)
    clang proc     "gtk_action_group_add_radio_actions" (ref _GtkActionGroup,ref _GtkRadioActionEntry,u32,i32,ref clang proc(),ref void)
    clang proc     "gtk_action_group_add_actions_full" (ref _GtkActionGroup,ref _GtkActionEntry,u32,ref void,ref clang proc(ref void))
    clang proc     "gtk_action_group_add_toggle_actions_full" (ref _GtkActionGroup,ref _GtkToggleActionEntry,u32,ref void,ref clang proc(ref void))
    clang proc     "gtk_action_group_add_radio_actions_full" (ref _GtkActionGroup,ref _GtkRadioActionEntry,u32,i32,ref clang proc(),ref void,ref clang proc(ref void))
    clang proc     "gtk_action_group_set_translate_func" (ref _GtkActionGroup,ref clang function(ref i8,ref void)ref i8,ref void,ref clang proc(ref void))
    clang proc     "gtk_action_group_set_translation_domain" (ref _GtkActionGroup,ref i8)
    clang function "gtk_action_group_translate_string" (ref _GtkActionGroup,ref i8)ref i8
    clang proc     "_gtk_action_group_emit_connect_proxy" (ref _GtkActionGroup,ref _GtkAction,ref _GtkWidget)
    clang proc     "_gtk_action_group_emit_disconnect_proxy" (ref _GtkActionGroup,ref _GtkAction,ref _GtkWidget)
    clang proc     "_gtk_action_group_emit_pre_activate" (ref _GtkActionGroup,ref _GtkAction)
    clang proc     "_gtk_action_group_emit_post_activate" (ref _GtkActionGroup,ref _GtkAction)
    record _GtkActivatable =
        var int dummy    !empty record
    end

    record _GtkActivatableIface =
        var _GTypeInterface g_iface
        var ref clang proc(ref _GtkActivatable,ref _GtkAction,ref i8) update
        var ref clang proc(ref _GtkActivatable,ref _GtkAction) sync_action_properties
    end

    clang function "gtk_activatable_get_type"          ()u64
    clang proc     "gtk_activatable_sync_action_properties" (ref _GtkActivatable,ref _GtkAction)
    clang proc     "gtk_activatable_set_related_action" (ref _GtkActivatable,ref _GtkAction)
    clang function "gtk_activatable_get_related_action" (ref _GtkActivatable)ref _GtkAction
    clang proc     "gtk_activatable_set_use_action_appearance" (ref _GtkActivatable,i32)
    clang function "gtk_activatable_get_use_action_appearance" (ref _GtkActivatable)i32
    clang proc     "gtk_activatable_do_set_related_action" (ref _GtkActivatable,ref _GtkAction)
    record _GtkAdjustmentPrivate =
        var int dummy    !empty record
    end

    record _GtkAdjustmentClass =
        var _GObjectClass parent_class
        var ref clang proc(ref _GtkAdjustment) changed
        var ref clang proc(ref _GtkAdjustment) value_changed
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_adjustment_get_type"           ()u64
    clang function "gtk_adjustment_new"                (r64,r64,r64,r64,r64,r64)ref _GtkAdjustment
    clang proc     "gtk_adjustment_changed"            (ref _GtkAdjustment)
    clang proc     "gtk_adjustment_value_changed"      (ref _GtkAdjustment)
    clang proc     "gtk_adjustment_clamp_page"         (ref _GtkAdjustment,r64,r64)
    clang function "gtk_adjustment_get_value"          (ref _GtkAdjustment)r64
    clang proc     "gtk_adjustment_set_value"          (ref _GtkAdjustment,r64)
    clang function "gtk_adjustment_get_lower"          (ref _GtkAdjustment)r64
    clang proc     "gtk_adjustment_set_lower"          (ref _GtkAdjustment,r64)
    clang function "gtk_adjustment_get_upper"          (ref _GtkAdjustment)r64
    clang proc     "gtk_adjustment_set_upper"          (ref _GtkAdjustment,r64)
    clang function "gtk_adjustment_get_step_increment" (ref _GtkAdjustment)r64
    clang proc     "gtk_adjustment_set_step_increment" (ref _GtkAdjustment,r64)
    clang function "gtk_adjustment_get_page_increment" (ref _GtkAdjustment)r64
    clang proc     "gtk_adjustment_set_page_increment" (ref _GtkAdjustment,r64)
    clang function "gtk_adjustment_get_page_size"      (ref _GtkAdjustment)r64
    clang proc     "gtk_adjustment_set_page_size"      (ref _GtkAdjustment,r64)
    clang proc     "gtk_adjustment_configure"          (ref _GtkAdjustment,r64,r64,r64,r64,r64,r64)
    clang function "gtk_adjustment_get_minimum_increment" (ref _GtkAdjustment)r64
    record _GtkAlignment =
        var _GtkBin bin
        var ref _GtkAlignmentPrivate priv
    end

    record _GtkAlignmentPrivate =
        var int dummy    !empty record
    end

    record _GtkAlignmentClass =
        var _GtkBinClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_alignment_get_type"            ()u64
    clang function "gtk_alignment_new"                 (r32,r32,r32,r32)ref _GtkWidget
    clang proc     "gtk_alignment_set"                 (ref _GtkAlignment,r32,r32,r32,r32)
    clang proc     "gtk_alignment_set_padding"         (ref _GtkAlignment,u32,u32,u32,u32)
    clang proc     "gtk_alignment_get_padding"         (ref _GtkAlignment,ref u32,ref u32,ref u32,ref u32)
    record _GtkAppChooser =
        var int dummy    !empty record
    end

    clang function "gtk_app_chooser_get_type"          ()u64
    clang function "gtk_app_chooser_get_app_info"      (ref _GtkAppChooser)ref _GAppInfo
    clang function "gtk_app_chooser_get_content_type"  (ref _GtkAppChooser)ref i8
    clang proc     "gtk_app_chooser_refresh"           (ref _GtkAppChooser)
    record _GtkAppChooserDialog =
        var _GtkDialog parent
        var ref _GtkAppChooserDialogPrivate priv
    end

    record _GtkAppChooserDialogClass =
        var _GtkDialogClass parent_class
        var [16]ref void padding
    end

    record _GtkAppChooserDialogPrivate =
        var int dummy    !empty record
    end

    clang function "gtk_app_chooser_dialog_get_type"   ()u64
    clang function "gtk_app_chooser_dialog_new"        (ref _GtkWindow,i32,ref _GFile)ref _GtkWidget
    clang function "gtk_app_chooser_dialog_new_for_content_type" (ref _GtkWindow,i32,ref i8)ref _GtkWidget
    clang function "gtk_app_chooser_dialog_get_widget" (ref _GtkAppChooserDialog)ref _GtkWidget
    clang proc     "gtk_app_chooser_dialog_set_heading" (ref _GtkAppChooserDialog,ref i8)
    clang function "gtk_app_chooser_dialog_get_heading" (ref _GtkAppChooserDialog)ref i8
    record _GtkBox =
        var _GtkContainer container
        var ref _GtkBoxPrivate priv
    end

    record _GtkBoxPrivate =
        var int dummy    !empty record
    end

    record _GtkBoxClass =
        var _GtkContainerClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_box_get_type"                  ()u64
    clang function "gtk_box_new"                       (i32,i32)ref _GtkWidget
    clang proc     "gtk_box_pack_start"                (ref _GtkBox,ref _GtkWidget,i32,i32,u32)
    clang proc     "gtk_box_pack_end"                  (ref _GtkBox,ref _GtkWidget,i32,i32,u32)
    clang proc     "gtk_box_set_homogeneous"           (ref _GtkBox,i32)
    clang function "gtk_box_get_homogeneous"           (ref _GtkBox)i32
    clang proc     "gtk_box_set_spacing"               (ref _GtkBox,i32)
    clang function "gtk_box_get_spacing"               (ref _GtkBox)i32
    clang proc     "gtk_box_reorder_child"             (ref _GtkBox,ref _GtkWidget,i32)
    clang proc     "gtk_box_query_child_packing"       (ref _GtkBox,ref _GtkWidget,ref i32,ref i32,ref u32,ref i32)
    clang proc     "gtk_box_set_child_packing"         (ref _GtkBox,ref _GtkWidget,i32,i32,u32,i32)
    record _GtkAppChooserWidget =
        var _GtkBox parent
        var ref _GtkAppChooserWidgetPrivate priv
    end

    record _GtkAppChooserWidgetClass =
        var _GtkBoxClass parent_class
        var ref clang proc(ref _GtkAppChooserWidget,ref _GAppInfo) application_selected
        var ref clang proc(ref _GtkAppChooserWidget,ref _GAppInfo) application_activated
        var ref clang proc(ref _GtkAppChooserWidget,ref _GtkMenu,ref _GAppInfo) populate_popup
        var [16]ref void padding
    end

    record _GtkAppChooserWidgetPrivate =
        var int dummy    !empty record
    end

    clang function "gtk_app_chooser_widget_get_type"   ()u64
    clang function "gtk_app_chooser_widget_new"        (ref i8)ref _GtkWidget
    clang proc     "gtk_app_chooser_widget_set_show_default" (ref _GtkAppChooserWidget,i32)
    clang function "gtk_app_chooser_widget_get_show_default" (ref _GtkAppChooserWidget)i32
    clang proc     "gtk_app_chooser_widget_set_show_recommended" (ref _GtkAppChooserWidget,i32)
    clang function "gtk_app_chooser_widget_get_show_recommended" (ref _GtkAppChooserWidget)i32
    clang proc     "gtk_app_chooser_widget_set_show_fallback" (ref _GtkAppChooserWidget,i32)
    clang function "gtk_app_chooser_widget_get_show_fallback" (ref _GtkAppChooserWidget)i32
    clang proc     "gtk_app_chooser_widget_set_show_other" (ref _GtkAppChooserWidget,i32)
    clang function "gtk_app_chooser_widget_get_show_other" (ref _GtkAppChooserWidget)i32
    clang proc     "gtk_app_chooser_widget_set_show_all" (ref _GtkAppChooserWidget,i32)
    clang function "gtk_app_chooser_widget_get_show_all" (ref _GtkAppChooserWidget)i32
    clang proc     "gtk_app_chooser_widget_set_default_text" (ref _GtkAppChooserWidget,ref i8)
    clang function "gtk_app_chooser_widget_get_default_text" (ref _GtkAppChooserWidget)ref i8
    record _GtkTreeIter =
        var i32 stamp
        var ref void user_data
        var ref void user_data2
        var ref void user_data3
    end

    record _GtkTreePath =
        var int dummy    !empty record
    end

    record _GtkTreeRowReference =
        var int dummy    !empty record
    end

    record _GtkTreeModel =
        var int dummy    !empty record
    end

    record _GtkTreeModelIface =
        var _GTypeInterface g_iface
        var ref clang proc(ref _GtkTreeModel,ref _GtkTreePath,ref _GtkTreeIter) row_changed
        var ref clang proc(ref _GtkTreeModel,ref _GtkTreePath,ref _GtkTreeIter) row_inserted
        var ref clang proc(ref _GtkTreeModel,ref _GtkTreePath,ref _GtkTreeIter) row_has_child_toggled
        var ref clang proc(ref _GtkTreeModel,ref _GtkTreePath) row_deleted
        var ref clang proc(ref _GtkTreeModel,ref _GtkTreePath,ref _GtkTreeIter,ref i32) rows_reordered
        var ref clang function(ref _GtkTreeModel)i32 get_flags
        var ref clang function(ref _GtkTreeModel)i32 get_n_columns
        var ref clang function(ref _GtkTreeModel,i32)u64 get_column_type
        var ref clang function(ref _GtkTreeModel,ref _GtkTreeIter,ref _GtkTreePath)i32 get_iter
        var ref clang function(ref _GtkTreeModel,ref _GtkTreeIter)ref _GtkTreePath get_path
        var ref clang proc(ref _GtkTreeModel,ref _GtkTreeIter,i32,ref _GValue) get_value
        var ref clang function(ref _GtkTreeModel,ref _GtkTreeIter)i32 iter_next
        var ref clang function(ref _GtkTreeModel,ref _GtkTreeIter)i32 iter_previous
        var ref clang function(ref _GtkTreeModel,ref _GtkTreeIter,ref _GtkTreeIter)i32 iter_children
        var ref clang function(ref _GtkTreeModel,ref _GtkTreeIter)i32 iter_has_child
        var ref clang function(ref _GtkTreeModel,ref _GtkTreeIter)i32 iter_n_children
        var ref clang function(ref _GtkTreeModel,ref _GtkTreeIter,ref _GtkTreeIter,i32)i32 iter_nth_child
        var ref clang function(ref _GtkTreeModel,ref _GtkTreeIter,ref _GtkTreeIter)i32 iter_parent
        var ref clang proc(ref _GtkTreeModel,ref _GtkTreeIter) ref_node
        var ref clang proc(ref _GtkTreeModel,ref _GtkTreeIter) unref_node
    end

    const GTK_TREE_MODEL_ITERS_PERSIST       = 1
    const GTK_TREE_MODEL_LIST_ONLY           = 2
    clang function "gtk_tree_path_new"                 ()ref _GtkTreePath
    clang function "gtk_tree_path_new_from_string"     (ref i8)ref _GtkTreePath
    clang function "gtk_tree_path_new_from_indices"    (i32,...)ref _GtkTreePath
    clang function "gtk_tree_path_to_string"           (ref _GtkTreePath)ref i8
    clang function "gtk_tree_path_new_first"           ()ref _GtkTreePath
    clang proc     "gtk_tree_path_append_index"        (ref _GtkTreePath,i32)
    clang proc     "gtk_tree_path_prepend_index"       (ref _GtkTreePath,i32)
    clang function "gtk_tree_path_get_depth"           (ref _GtkTreePath)i32
    clang function "gtk_tree_path_get_indices"         (ref _GtkTreePath)ref i32
    clang function "gtk_tree_path_get_indices_with_depth" (ref _GtkTreePath,ref i32)ref i32
    clang proc     "gtk_tree_path_free"                (ref _GtkTreePath)
    clang function "gtk_tree_path_copy"                (ref _GtkTreePath)ref _GtkTreePath
    clang function "gtk_tree_path_get_type"            ()u64
    clang function "gtk_tree_path_compare"             (ref _GtkTreePath,ref _GtkTreePath)i32
    clang proc     "gtk_tree_path_next"                (ref _GtkTreePath)
    clang function "gtk_tree_path_prev"                (ref _GtkTreePath)i32
    clang function "gtk_tree_path_up"                  (ref _GtkTreePath)i32
    clang proc     "gtk_tree_path_down"                (ref _GtkTreePath)
    clang function "gtk_tree_path_is_ancestor"         (ref _GtkTreePath,ref _GtkTreePath)i32
    clang function "gtk_tree_path_is_descendant"       (ref _GtkTreePath,ref _GtkTreePath)i32
    clang function "gtk_tree_row_reference_get_type"   ()u64
    clang function "gtk_tree_row_reference_new"        (ref _GtkTreeModel,ref _GtkTreePath)ref _GtkTreeRowReference
    clang function "gtk_tree_row_reference_new_proxy"  (ref _GObject,ref _GtkTreeModel,ref _GtkTreePath)ref _GtkTreeRowReference
    clang function "gtk_tree_row_reference_get_path"   (ref _GtkTreeRowReference)ref _GtkTreePath
    clang function "gtk_tree_row_reference_get_model"  (ref _GtkTreeRowReference)ref _GtkTreeModel
    clang function "gtk_tree_row_reference_valid"      (ref _GtkTreeRowReference)i32
    clang function "gtk_tree_row_reference_copy"       (ref _GtkTreeRowReference)ref _GtkTreeRowReference
    clang proc     "gtk_tree_row_reference_free"       (ref _GtkTreeRowReference)
    clang proc     "gtk_tree_row_reference_inserted"   (ref _GObject,ref _GtkTreePath)
    clang proc     "gtk_tree_row_reference_deleted"    (ref _GObject,ref _GtkTreePath)
    clang proc     "gtk_tree_row_reference_reordered"  (ref _GObject,ref _GtkTreePath,ref _GtkTreeIter,ref i32)
    clang function "gtk_tree_iter_copy"                (ref _GtkTreeIter)ref _GtkTreeIter
    clang proc     "gtk_tree_iter_free"                (ref _GtkTreeIter)
    clang function "gtk_tree_iter_get_type"            ()u64
    clang function "gtk_tree_model_get_type"           ()u64
    clang function "gtk_tree_model_get_flags"          (ref _GtkTreeModel)i32
    clang function "gtk_tree_model_get_n_columns"      (ref _GtkTreeModel)i32
    clang function "gtk_tree_model_get_column_type"    (ref _GtkTreeModel,i32)u64
    clang function "gtk_tree_model_get_iter"           (ref _GtkTreeModel,ref _GtkTreeIter,ref _GtkTreePath)i32
    clang function "gtk_tree_model_get_iter_from_string" (ref _GtkTreeModel,ref _GtkTreeIter,ref i8)i32
    clang function "gtk_tree_model_get_string_from_iter" (ref _GtkTreeModel,ref _GtkTreeIter)ref i8
    clang function "gtk_tree_model_get_iter_first"     (ref _GtkTreeModel,ref _GtkTreeIter)i32
    clang function "gtk_tree_model_get_path"           (ref _GtkTreeModel,ref _GtkTreeIter)ref _GtkTreePath
    clang proc     "gtk_tree_model_get_value"          (ref _GtkTreeModel,ref _GtkTreeIter,i32,ref _GValue)
    clang function "gtk_tree_model_iter_previous"      (ref _GtkTreeModel,ref _GtkTreeIter)i32
    clang function "gtk_tree_model_iter_next"          (ref _GtkTreeModel,ref _GtkTreeIter)i32
    clang function "gtk_tree_model_iter_children"      (ref _GtkTreeModel,ref _GtkTreeIter,ref _GtkTreeIter)i32
    clang function "gtk_tree_model_iter_has_child"     (ref _GtkTreeModel,ref _GtkTreeIter)i32
    clang function "gtk_tree_model_iter_n_children"    (ref _GtkTreeModel,ref _GtkTreeIter)i32
    clang function "gtk_tree_model_iter_nth_child"     (ref _GtkTreeModel,ref _GtkTreeIter,ref _GtkTreeIter,i32)i32
    clang function "gtk_tree_model_iter_parent"        (ref _GtkTreeModel,ref _GtkTreeIter,ref _GtkTreeIter)i32
    clang proc     "gtk_tree_model_ref_node"           (ref _GtkTreeModel,ref _GtkTreeIter)
    clang proc     "gtk_tree_model_unref_node"         (ref _GtkTreeModel,ref _GtkTreeIter)
    clang proc     "gtk_tree_model_get"                (ref _GtkTreeModel,ref _GtkTreeIter,...)
    clang proc     "gtk_tree_model_get_valist"         (ref _GtkTreeModel,ref _GtkTreeIter,ref i8)
    clang proc     "gtk_tree_model_foreach"            (ref _GtkTreeModel,ref clang function(ref _GtkTreeModel,ref _GtkTreePath,ref _GtkTreeIter,ref void)i32,ref void)
    clang proc     "gtk_tree_model_row_changed"        (ref _GtkTreeModel,ref _GtkTreePath,ref _GtkTreeIter)
    clang proc     "gtk_tree_model_row_inserted"       (ref _GtkTreeModel,ref _GtkTreePath,ref _GtkTreeIter)
    clang proc     "gtk_tree_model_row_has_child_toggled" (ref _GtkTreeModel,ref _GtkTreePath,ref _GtkTreeIter)
    clang proc     "gtk_tree_model_row_deleted"        (ref _GtkTreeModel,ref _GtkTreePath)
    clang proc     "gtk_tree_model_rows_reordered"     (ref _GtkTreeModel,ref _GtkTreePath,ref _GtkTreeIter,ref i32)
    record _GtkCellEditable =
        var int dummy    !empty record
    end

    record _GtkCellEditableIface =
        var _GTypeInterface g_iface
        var ref clang proc(ref _GtkCellEditable) editing_done
        var ref clang proc(ref _GtkCellEditable) remove_widget
        var ref clang proc(ref _GtkCellEditable,ref _GdkEvent) start_editing
    end

    clang function "gtk_cell_editable_get_type"        ()u64
    clang proc     "gtk_cell_editable_start_editing"   (ref _GtkCellEditable,ref _GdkEvent)
    clang proc     "gtk_cell_editable_editing_done"    (ref _GtkCellEditable)
    clang proc     "gtk_cell_editable_remove_widget"   (ref _GtkCellEditable)
    const GTK_CELL_RENDERER_SELECTED         = 1
    const GTK_CELL_RENDERER_PRELIT           = 2
    const GTK_CELL_RENDERER_INSENSITIVE      = 4
    const GTK_CELL_RENDERER_SORTED           = 8
    const GTK_CELL_RENDERER_FOCUSED          = 16
    const GTK_CELL_RENDERER_EXPANDABLE       = 32
    const GTK_CELL_RENDERER_EXPANDED         = 64
    const GTK_CELL_RENDERER_MODE_INERT       = 0
    const GTK_CELL_RENDERER_MODE_ACTIVATABLE = 1
    const GTK_CELL_RENDERER_MODE_EDITABLE    = 2
    record _GtkCellRenderer =
        var _GObject parent_instance
        var ref _GtkCellRendererPrivate priv
    end

    record _GtkCellRendererPrivate =
        var int dummy    !empty record
    end

    record _GtkCellRendererClass =
        var _GObjectClass parent_class
        var ref clang function(ref _GtkCellRenderer)i32 get_request_mode
        var ref clang proc(ref _GtkCellRenderer,ref _GtkWidget,ref i32,ref i32) get_preferred_width
        var ref clang proc(ref _GtkCellRenderer,ref _GtkWidget,i32,ref i32,ref i32) get_preferred_height_for_width
        var ref clang proc(ref _GtkCellRenderer,ref _GtkWidget,ref i32,ref i32) get_preferred_height
        var ref clang proc(ref _GtkCellRenderer,ref _GtkWidget,i32,ref i32,ref i32) get_preferred_width_for_height
        var ref clang proc(ref _GtkCellRenderer,ref _GtkWidget,i32,ref _cairo_rectangle_int,ref _cairo_rectangle_int) get_aligned_area
        var ref clang proc(ref _GtkCellRenderer,ref _GtkWidget,ref _cairo_rectangle_int,ref i32,ref i32,ref i32,ref i32) get_size
        var ref clang proc(ref _GtkCellRenderer,ref _cairo,ref _GtkWidget,ref _cairo_rectangle_int,ref _cairo_rectangle_int,i32) render
        var ref clang function(ref _GtkCellRenderer,ref _GdkEvent,ref _GtkWidget,ref i8,ref _cairo_rectangle_int,ref _cairo_rectangle_int,i32)i32 activate
        var ref clang function(ref _GtkCellRenderer,ref _GdkEvent,ref _GtkWidget,ref i8,ref _cairo_rectangle_int,ref _cairo_rectangle_int,i32)ref _GtkCellEditable start_editing
        var ref clang proc(ref _GtkCellRenderer) editing_canceled
        var ref clang proc(ref _GtkCellRenderer,ref _GtkCellEditable,ref i8) editing_started
        var ref _GtkCellRendererClassPrivate priv
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    record _GtkCellRendererClassPrivate =
        var int dummy    !empty record
    end

    clang function "gtk_cell_renderer_get_type"        ()u64
    clang function "gtk_cell_renderer_get_request_mode" (ref _GtkCellRenderer)i32
    clang proc     "gtk_cell_renderer_get_preferred_width" (ref _GtkCellRenderer,ref _GtkWidget,ref i32,ref i32)
    clang proc     "gtk_cell_renderer_get_preferred_height_for_width" (ref _GtkCellRenderer,ref _GtkWidget,i32,ref i32,ref i32)
    clang proc     "gtk_cell_renderer_get_preferred_height" (ref _GtkCellRenderer,ref _GtkWidget,ref i32,ref i32)
    clang proc     "gtk_cell_renderer_get_preferred_width_for_height" (ref _GtkCellRenderer,ref _GtkWidget,i32,ref i32,ref i32)
    clang proc     "gtk_cell_renderer_get_preferred_size" (ref _GtkCellRenderer,ref _GtkWidget,ref _GtkRequisition,ref _GtkRequisition)
    clang proc     "gtk_cell_renderer_get_aligned_area" (ref _GtkCellRenderer,ref _GtkWidget,i32,ref _cairo_rectangle_int,ref _cairo_rectangle_int)
    clang proc     "gtk_cell_renderer_get_size"        (ref _GtkCellRenderer,ref _GtkWidget,ref _cairo_rectangle_int,ref i32,ref i32,ref i32,ref i32)
    clang proc     "gtk_cell_renderer_render"          (ref _GtkCellRenderer,ref _cairo,ref _GtkWidget,ref _cairo_rectangle_int,ref _cairo_rectangle_int,i32)
    clang function "gtk_cell_renderer_activate"        (ref _GtkCellRenderer,ref _GdkEvent,ref _GtkWidget,ref i8,ref _cairo_rectangle_int,ref _cairo_rectangle_int,i32)i32
    clang function "gtk_cell_renderer_start_editing"   (ref _GtkCellRenderer,ref _GdkEvent,ref _GtkWidget,ref i8,ref _cairo_rectangle_int,ref _cairo_rectangle_int,i32)ref _GtkCellEditable
    clang proc     "gtk_cell_renderer_set_fixed_size"  (ref _GtkCellRenderer,i32,i32)
    clang proc     "gtk_cell_renderer_get_fixed_size"  (ref _GtkCellRenderer,ref i32,ref i32)
    clang proc     "gtk_cell_renderer_set_alignment"   (ref _GtkCellRenderer,r32,r32)
    clang proc     "gtk_cell_renderer_get_alignment"   (ref _GtkCellRenderer,ref r32,ref r32)
    clang proc     "gtk_cell_renderer_set_padding"     (ref _GtkCellRenderer,i32,i32)
    clang proc     "gtk_cell_renderer_get_padding"     (ref _GtkCellRenderer,ref i32,ref i32)
    clang proc     "gtk_cell_renderer_set_visible"     (ref _GtkCellRenderer,i32)
    clang function "gtk_cell_renderer_get_visible"     (ref _GtkCellRenderer)i32
    clang proc     "gtk_cell_renderer_set_sensitive"   (ref _GtkCellRenderer,i32)
    clang function "gtk_cell_renderer_get_sensitive"   (ref _GtkCellRenderer)i32
    clang function "gtk_cell_renderer_is_activatable"  (ref _GtkCellRenderer)i32
    clang proc     "gtk_cell_renderer_stop_editing"    (ref _GtkCellRenderer,i32)
    clang proc     "_gtk_cell_renderer_calc_offset"    (ref _GtkCellRenderer,ref _cairo_rectangle_int,i32,i32,i32,ref i32,ref i32)
    clang function "gtk_cell_renderer_get_state"       (ref _GtkCellRenderer,ref _GtkWidget,i32)i32
    clang proc     "_gtk_cell_renderer_class_set_accessible_type" (ref _GtkCellRendererClass,u64)
    clang function "_gtk_cell_renderer_get_accessible_type" (ref _GtkCellRenderer)u64
    const GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID = -1
    const GTK_TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID = -2
    record _GtkTreeSortable =
        var int dummy    !empty record
    end

    record _GtkTreeSortableIface =
        var _GTypeInterface g_iface
        var ref clang proc(ref _GtkTreeSortable) sort_column_changed
        var ref clang function(ref _GtkTreeSortable,ref i32,ref i32)i32 get_sort_column_id
        var ref clang proc(ref _GtkTreeSortable,i32,i32) set_sort_column_id
        var ref clang proc(ref _GtkTreeSortable,i32,ref clang function(ref _GtkTreeModel,ref _GtkTreeIter,ref _GtkTreeIter,ref void)i32,ref void,ref clang proc(ref void)) set_sort_func
        var ref clang proc(ref _GtkTreeSortable,ref clang function(ref _GtkTreeModel,ref _GtkTreeIter,ref _GtkTreeIter,ref void)i32,ref void,ref clang proc(ref void)) set_default_sort_func
        var ref clang function(ref _GtkTreeSortable)i32 has_default_sort_func
    end

    clang function "gtk_tree_sortable_get_type"        ()u64
    clang proc     "gtk_tree_sortable_sort_column_changed" (ref _GtkTreeSortable)
    clang function "gtk_tree_sortable_get_sort_column_id" (ref _GtkTreeSortable,ref i32,ref i32)i32
    clang proc     "gtk_tree_sortable_set_sort_column_id" (ref _GtkTreeSortable,i32,i32)
    clang proc     "gtk_tree_sortable_set_sort_func"   (ref _GtkTreeSortable,i32,ref clang function(ref _GtkTreeModel,ref _GtkTreeIter,ref _GtkTreeIter,ref void)i32,ref void,ref clang proc(ref void))
    clang proc     "gtk_tree_sortable_set_default_sort_func" (ref _GtkTreeSortable,ref clang function(ref _GtkTreeModel,ref _GtkTreeIter,ref _GtkTreeIter,ref void)i32,ref void,ref clang proc(ref void))
    clang function "gtk_tree_sortable_has_default_sort_func" (ref _GtkTreeSortable)i32
    record _GtkCellArea =
        var _GObject parent_instance
        var ref _GtkCellAreaPrivate priv
    end

    record _GtkCellAreaClass =
        var _GObjectClass parent_class
        var ref clang proc(ref _GtkCellArea,ref _GtkCellRenderer) add
        var ref clang proc(ref _GtkCellArea,ref _GtkCellRenderer) remove
        var ref clang proc(ref _GtkCellArea,ref clang function(ref _GtkCellRenderer,ref void)i32,ref void) foreach
        var ref clang proc(ref _GtkCellArea,ref _GtkCellAreaContext,ref _GtkWidget,ref _cairo_rectangle_int,ref _cairo_rectangle_int,ref clang function(ref _GtkCellRenderer,ref _cairo_rectangle_int,ref _cairo_rectangle_int,ref void)i32,ref void) foreach_alloc
        var ref clang function(ref _GtkCellArea,ref _GtkCellAreaContext,ref _GtkWidget,ref _GdkEvent,ref _cairo_rectangle_int,i32)i32 event
        var ref clang proc(ref _GtkCellArea,ref _GtkCellAreaContext,ref _GtkWidget,ref _cairo,ref _cairo_rectangle_int,ref _cairo_rectangle_int,i32,i32) render
        var ref clang proc(ref _GtkCellArea,ref _GtkTreeModel,ref _GtkTreeIter,i32,i32) apply_attributes
        var ref clang function(ref _GtkCellArea)ref _GtkCellAreaContext create_context
        var ref clang function(ref _GtkCellArea,ref _GtkCellAreaContext)ref _GtkCellAreaContext copy_context
        var ref clang function(ref _GtkCellArea)i32 get_request_mode
        var ref clang proc(ref _GtkCellArea,ref _GtkCellAreaContext,ref _GtkWidget,ref i32,ref i32) get_preferred_width
        var ref clang proc(ref _GtkCellArea,ref _GtkCellAreaContext,ref _GtkWidget,i32,ref i32,ref i32) get_preferred_height_for_width
        var ref clang proc(ref _GtkCellArea,ref _GtkCellAreaContext,ref _GtkWidget,ref i32,ref i32) get_preferred_height
        var ref clang proc(ref _GtkCellArea,ref _GtkCellAreaContext,ref _GtkWidget,i32,ref i32,ref i32) get_preferred_width_for_height
        var ref clang proc(ref _GtkCellArea,ref _GtkCellRenderer,u32,ref _GValue,ref _GParamSpec) set_cell_property
        var ref clang proc(ref _GtkCellArea,ref _GtkCellRenderer,u32,ref _GValue,ref _GParamSpec) get_cell_property
        var ref clang function(ref _GtkCellArea,i32)i32 focus
        var ref clang function(ref _GtkCellArea)i32 is_activatable
        var ref clang function(ref _GtkCellArea,ref _GtkCellAreaContext,ref _GtkWidget,ref _cairo_rectangle_int,i32,i32)i32 activate
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
        var ref clang proc() _gtk_reserved5
        var ref clang proc() _gtk_reserved6
        var ref clang proc() _gtk_reserved7
        var ref clang proc() _gtk_reserved8
    end

    record _GtkCellAreaPrivate =
        var int dummy    !empty record
    end

    record _GtkCellAreaContext =
        var _GObject parent_instance
        var ref _GtkCellAreaContextPrivate priv
    end

    clang function "gtk_cell_area_get_type"            ()u64
    clang proc     "gtk_cell_area_add"                 (ref _GtkCellArea,ref _GtkCellRenderer)
    clang proc     "gtk_cell_area_remove"              (ref _GtkCellArea,ref _GtkCellRenderer)
    clang function "gtk_cell_area_has_renderer"        (ref _GtkCellArea,ref _GtkCellRenderer)i32
    clang proc     "gtk_cell_area_foreach"             (ref _GtkCellArea,ref clang function(ref _GtkCellRenderer,ref void)i32,ref void)
    clang proc     "gtk_cell_area_foreach_alloc"       (ref _GtkCellArea,ref _GtkCellAreaContext,ref _GtkWidget,ref _cairo_rectangle_int,ref _cairo_rectangle_int,ref clang function(ref _GtkCellRenderer,ref _cairo_rectangle_int,ref _cairo_rectangle_int,ref void)i32,ref void)
    clang function "gtk_cell_area_event"               (ref _GtkCellArea,ref _GtkCellAreaContext,ref _GtkWidget,ref _GdkEvent,ref _cairo_rectangle_int,i32)i32
    clang proc     "gtk_cell_area_render"              (ref _GtkCellArea,ref _GtkCellAreaContext,ref _GtkWidget,ref _cairo,ref _cairo_rectangle_int,ref _cairo_rectangle_int,i32,i32)
    clang proc     "gtk_cell_area_get_cell_allocation" (ref _GtkCellArea,ref _GtkCellAreaContext,ref _GtkWidget,ref _GtkCellRenderer,ref _cairo_rectangle_int,ref _cairo_rectangle_int)
    clang function "gtk_cell_area_get_cell_at_position" (ref _GtkCellArea,ref _GtkCellAreaContext,ref _GtkWidget,ref _cairo_rectangle_int,i32,i32,ref _cairo_rectangle_int)ref _GtkCellRenderer
    clang function "gtk_cell_area_create_context"      (ref _GtkCellArea)ref _GtkCellAreaContext
    clang function "gtk_cell_area_copy_context"        (ref _GtkCellArea,ref _GtkCellAreaContext)ref _GtkCellAreaContext
    clang function "gtk_cell_area_get_request_mode"    (ref _GtkCellArea)i32
    clang proc     "gtk_cell_area_get_preferred_width" (ref _GtkCellArea,ref _GtkCellAreaContext,ref _GtkWidget,ref i32,ref i32)
    clang proc     "gtk_cell_area_get_preferred_height_for_width" (ref _GtkCellArea,ref _GtkCellAreaContext,ref _GtkWidget,i32,ref i32,ref i32)
    clang proc     "gtk_cell_area_get_preferred_height" (ref _GtkCellArea,ref _GtkCellAreaContext,ref _GtkWidget,ref i32,ref i32)
    clang proc     "gtk_cell_area_get_preferred_width_for_height" (ref _GtkCellArea,ref _GtkCellAreaContext,ref _GtkWidget,i32,ref i32,ref i32)
    clang function "gtk_cell_area_get_current_path_string" (ref _GtkCellArea)ref i8
    clang proc     "gtk_cell_area_apply_attributes"    (ref _GtkCellArea,ref _GtkTreeModel,ref _GtkTreeIter,i32,i32)
    clang proc     "gtk_cell_area_attribute_connect"   (ref _GtkCellArea,ref _GtkCellRenderer,ref i8,i32)
    clang proc     "gtk_cell_area_attribute_disconnect" (ref _GtkCellArea,ref _GtkCellRenderer,ref i8)
    clang proc     "gtk_cell_area_class_install_cell_property" (ref _GtkCellAreaClass,u32,ref _GParamSpec)
    clang function "gtk_cell_area_class_find_cell_property" (ref _GtkCellAreaClass,ref i8)ref _GParamSpec
    clang function "gtk_cell_area_class_list_cell_properties" (ref _GtkCellAreaClass,ref u32)ref ref _GParamSpec
    clang proc     "gtk_cell_area_add_with_properties" (ref _GtkCellArea,ref _GtkCellRenderer,ref i8,...)
    clang proc     "gtk_cell_area_cell_set"            (ref _GtkCellArea,ref _GtkCellRenderer,ref i8,...)
    clang proc     "gtk_cell_area_cell_get"            (ref _GtkCellArea,ref _GtkCellRenderer,ref i8,...)
    clang proc     "gtk_cell_area_cell_set_valist"     (ref _GtkCellArea,ref _GtkCellRenderer,ref i8,ref i8)
    clang proc     "gtk_cell_area_cell_get_valist"     (ref _GtkCellArea,ref _GtkCellRenderer,ref i8,ref i8)
    clang proc     "gtk_cell_area_cell_set_property"   (ref _GtkCellArea,ref _GtkCellRenderer,ref i8,ref _GValue)
    clang proc     "gtk_cell_area_cell_get_property"   (ref _GtkCellArea,ref _GtkCellRenderer,ref i8,ref _GValue)
    clang function "gtk_cell_area_is_activatable"      (ref _GtkCellArea)i32
    clang function "gtk_cell_area_activate"            (ref _GtkCellArea,ref _GtkCellAreaContext,ref _GtkWidget,ref _cairo_rectangle_int,i32,i32)i32
    clang function "gtk_cell_area_focus"               (ref _GtkCellArea,i32)i32
    clang proc     "gtk_cell_area_set_focus_cell"      (ref _GtkCellArea,ref _GtkCellRenderer)
    clang function "gtk_cell_area_get_focus_cell"      (ref _GtkCellArea)ref _GtkCellRenderer
    clang proc     "gtk_cell_area_add_focus_sibling"   (ref _GtkCellArea,ref _GtkCellRenderer,ref _GtkCellRenderer)
    clang proc     "gtk_cell_area_remove_focus_sibling" (ref _GtkCellArea,ref _GtkCellRenderer,ref _GtkCellRenderer)
    clang function "gtk_cell_area_is_focus_sibling"    (ref _GtkCellArea,ref _GtkCellRenderer,ref _GtkCellRenderer)i32
    clang function "gtk_cell_area_get_focus_siblings"  (ref _GtkCellArea,ref _GtkCellRenderer)ref _GList
    clang function "gtk_cell_area_get_focus_from_sibling" (ref _GtkCellArea,ref _GtkCellRenderer)ref _GtkCellRenderer
    clang function "gtk_cell_area_get_edited_cell"     (ref _GtkCellArea)ref _GtkCellRenderer
    clang function "gtk_cell_area_get_edit_widget"     (ref _GtkCellArea)ref _GtkCellEditable
    clang function "gtk_cell_area_activate_cell"       (ref _GtkCellArea,ref _GtkWidget,ref _GtkCellRenderer,ref _GdkEvent,ref _cairo_rectangle_int,i32)i32
    clang proc     "gtk_cell_area_stop_editing"        (ref _GtkCellArea,i32)
    clang proc     "gtk_cell_area_inner_cell_area"     (ref _GtkCellArea,ref _GtkWidget,ref _cairo_rectangle_int,ref _cairo_rectangle_int)
    clang proc     "gtk_cell_area_request_renderer"    (ref _GtkCellArea,ref _GtkCellRenderer,i32,ref _GtkWidget,i32,ref i32,ref i32)
    clang proc     "_gtk_cell_area_set_cell_data_func_with_proxy" (ref _GtkCellArea,ref _GtkCellRenderer,ref clang proc(ref void,ref void),ref void,ref clang proc(ref void),ref void)
    record _GtkTreeViewColumn =
        var _GObject parent_instance
        var ref _GtkTreeViewColumnPrivate priv
    end

    record _GtkTreeViewColumnClass =
        var _GObjectClass parent_class
        var ref clang proc(ref _GtkTreeViewColumn) clicked
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    record _GtkTreeViewColumnPrivate =
        var int dummy    !empty record
    end

    const GTK_TREE_VIEW_COLUMN_GROW_ONLY     = 0
    const GTK_TREE_VIEW_COLUMN_AUTOSIZE      = 1
    const GTK_TREE_VIEW_COLUMN_FIXED         = 2
    clang function "gtk_tree_view_column_get_type"     ()u64
    clang function "gtk_tree_view_column_new"          ()ref _GtkTreeViewColumn
    clang function "gtk_tree_view_column_new_with_area" (ref _GtkCellArea)ref _GtkTreeViewColumn
    clang function "gtk_tree_view_column_new_with_attributes" (ref i8,ref _GtkCellRenderer,...)ref _GtkTreeViewColumn
    clang proc     "gtk_tree_view_column_pack_start"   (ref _GtkTreeViewColumn,ref _GtkCellRenderer,i32)
    clang proc     "gtk_tree_view_column_pack_end"     (ref _GtkTreeViewColumn,ref _GtkCellRenderer,i32)
    clang proc     "gtk_tree_view_column_clear"        (ref _GtkTreeViewColumn)
    clang proc     "gtk_tree_view_column_add_attribute" (ref _GtkTreeViewColumn,ref _GtkCellRenderer,ref i8,i32)
    clang proc     "gtk_tree_view_column_set_attributes" (ref _GtkTreeViewColumn,ref _GtkCellRenderer,...)
    clang proc     "gtk_tree_view_column_set_cell_data_func" (ref _GtkTreeViewColumn,ref _GtkCellRenderer,ref clang proc(ref _GtkTreeViewColumn,ref _GtkCellRenderer,ref _GtkTreeModel,ref _GtkTreeIter,ref void),ref void,ref clang proc(ref void))
    clang proc     "gtk_tree_view_column_clear_attributes" (ref _GtkTreeViewColumn,ref _GtkCellRenderer)
    clang proc     "gtk_tree_view_column_set_spacing"  (ref _GtkTreeViewColumn,i32)
    clang function "gtk_tree_view_column_get_spacing"  (ref _GtkTreeViewColumn)i32
    clang proc     "gtk_tree_view_column_set_visible"  (ref _GtkTreeViewColumn,i32)
    clang function "gtk_tree_view_column_get_visible"  (ref _GtkTreeViewColumn)i32
    clang proc     "gtk_tree_view_column_set_resizable" (ref _GtkTreeViewColumn,i32)
    clang function "gtk_tree_view_column_get_resizable" (ref _GtkTreeViewColumn)i32
    clang proc     "gtk_tree_view_column_set_sizing"   (ref _GtkTreeViewColumn,i32)
    clang function "gtk_tree_view_column_get_sizing"   (ref _GtkTreeViewColumn)i32
    clang function "gtk_tree_view_column_get_x_offset" (ref _GtkTreeViewColumn)i32
    clang function "gtk_tree_view_column_get_width"    (ref _GtkTreeViewColumn)i32
    clang function "gtk_tree_view_column_get_fixed_width" (ref _GtkTreeViewColumn)i32
    clang proc     "gtk_tree_view_column_set_fixed_width" (ref _GtkTreeViewColumn,i32)
    clang proc     "gtk_tree_view_column_set_min_width" (ref _GtkTreeViewColumn,i32)
    clang function "gtk_tree_view_column_get_min_width" (ref _GtkTreeViewColumn)i32
    clang proc     "gtk_tree_view_column_set_max_width" (ref _GtkTreeViewColumn,i32)
    clang function "gtk_tree_view_column_get_max_width" (ref _GtkTreeViewColumn)i32
    clang proc     "gtk_tree_view_column_clicked"      (ref _GtkTreeViewColumn)
    clang proc     "gtk_tree_view_column_set_title"    (ref _GtkTreeViewColumn,ref i8)
    clang function "gtk_tree_view_column_get_title"    (ref _GtkTreeViewColumn)ref i8
    clang proc     "gtk_tree_view_column_set_expand"   (ref _GtkTreeViewColumn,i32)
    clang function "gtk_tree_view_column_get_expand"   (ref _GtkTreeViewColumn)i32
    clang proc     "gtk_tree_view_column_set_clickable" (ref _GtkTreeViewColumn,i32)
    clang function "gtk_tree_view_column_get_clickable" (ref _GtkTreeViewColumn)i32
    clang proc     "gtk_tree_view_column_set_widget"   (ref _GtkTreeViewColumn,ref _GtkWidget)
    clang function "gtk_tree_view_column_get_widget"   (ref _GtkTreeViewColumn)ref _GtkWidget
    clang proc     "gtk_tree_view_column_set_alignment" (ref _GtkTreeViewColumn,r32)
    clang function "gtk_tree_view_column_get_alignment" (ref _GtkTreeViewColumn)r32
    clang proc     "gtk_tree_view_column_set_reorderable" (ref _GtkTreeViewColumn,i32)
    clang function "gtk_tree_view_column_get_reorderable" (ref _GtkTreeViewColumn)i32
    clang proc     "gtk_tree_view_column_set_sort_column_id" (ref _GtkTreeViewColumn,i32)
    clang function "gtk_tree_view_column_get_sort_column_id" (ref _GtkTreeViewColumn)i32
    clang proc     "gtk_tree_view_column_set_sort_indicator" (ref _GtkTreeViewColumn,i32)
    clang function "gtk_tree_view_column_get_sort_indicator" (ref _GtkTreeViewColumn)i32
    clang proc     "gtk_tree_view_column_set_sort_order" (ref _GtkTreeViewColumn,i32)
    clang function "gtk_tree_view_column_get_sort_order" (ref _GtkTreeViewColumn)i32
    clang proc     "gtk_tree_view_column_cell_set_cell_data" (ref _GtkTreeViewColumn,ref _GtkTreeModel,ref _GtkTreeIter,i32,i32)
    clang proc     "gtk_tree_view_column_cell_get_size" (ref _GtkTreeViewColumn,ref _cairo_rectangle_int,ref i32,ref i32,ref i32,ref i32)
    clang function "gtk_tree_view_column_cell_is_visible" (ref _GtkTreeViewColumn)i32
    clang proc     "gtk_tree_view_column_focus_cell"   (ref _GtkTreeViewColumn,ref _GtkCellRenderer)
    clang function "gtk_tree_view_column_cell_get_position" (ref _GtkTreeViewColumn,ref _GtkCellRenderer,ref i32,ref i32)i32
    clang proc     "gtk_tree_view_column_queue_resize" (ref _GtkTreeViewColumn)
    clang function "gtk_tree_view_column_get_tree_view" (ref _GtkTreeViewColumn)ref _GtkWidget
    clang function "gtk_tree_view_column_get_button"   (ref _GtkTreeViewColumn)ref _GtkWidget
    record _GtkTextAttributes =
        var u32 refcount
        var _GtkTextAppearance appearance
        var i32 justification
        var i32 direction
        var ref _PangoFontDescription font
        var r64 font_scale
        var i32 left_margin
        var i32 right_margin
        var i32 indent
        var i32 pixels_above_lines
        var i32 pixels_below_lines
        var i32 pixels_inside_wrap
        var ref _PangoTabArray tabs
        var i32 wrap_mode
        var ref _PangoLanguage language
        var ref _GdkColor pg_bg_color
        var u32 invisible
        var u32 bg_full_height
        var u32 editable
        var ref _GdkRGBA pg_bg_rgba
        var [3]u32 padding
    end

    record _GtkTextAppearance =
        var _GdkColor bg_color
        var _GdkColor fg_color
        var i32 rise
        var u32 underline
        var u32 strikethrough
        var u32 draw_bg
        var u32 inside_selection
        var u32 is_text
        var [2]ref _GdkRGBA rgba
    end

    clang function "gtk_text_attributes_new"           ()ref _GtkTextAttributes
    clang function "gtk_text_attributes_copy"          (ref _GtkTextAttributes)ref _GtkTextAttributes
    clang proc     "gtk_text_attributes_copy_values"   (ref _GtkTextAttributes,ref _GtkTextAttributes)
    clang proc     "gtk_text_attributes_unref"         (ref _GtkTextAttributes)
    clang function "gtk_text_attributes_ref"           (ref _GtkTextAttributes)ref _GtkTextAttributes
    clang function "gtk_text_attributes_get_type"      ()u64
    record _GtkTextChildAnchor =
        var _GObject parent_instance
        var ref void segment
    end

    record _GtkTextChildAnchorClass =
        var _GObjectClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_text_child_anchor_get_type"    ()u64
    clang function "gtk_text_child_anchor_new"         ()ref _GtkTextChildAnchor
    clang function "gtk_text_child_anchor_get_widgets" (ref _GtkTextChildAnchor)ref _GList
    clang function "gtk_text_child_anchor_get_deleted" (ref _GtkTextChildAnchor)i32
    record _GtkTextIter =
        var ref void dummy1
        var ref void dummy2
        var i32 dummy3
        var i32 dummy4
        var i32 dummy5
        var i32 dummy6
        var i32 dummy7
        var i32 dummy8
        var ref void dummy9
        var ref void dummy10
        var i32 dummy11
        var i32 dummy12
        var i32 dummy13
        var ref void dummy14
    end

    record _GtkTextTagTable =
        var _GObject parent_instance
        var ref _GtkTextTagTablePrivate priv
    end

    record _GtkTextTag =
        var _GObject parent_instance
        var ref _GtkTextTagPrivate priv
    end

    record _GtkTextTagPrivate =
        var int dummy    !empty record
    end

    record _GtkTextTagClass =
        var _GObjectClass parent_class
        var ref clang function(ref _GtkTextTag,ref _GObject,ref _GdkEvent,ref _GtkTextIter)i32 event
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_text_tag_get_type"             ()u64
    clang function "gtk_text_tag_new"                  (ref i8)ref _GtkTextTag
    clang function "gtk_text_tag_get_priority"         (ref _GtkTextTag)i32
    clang proc     "gtk_text_tag_set_priority"         (ref _GtkTextTag,i32)
    clang function "gtk_text_tag_event"                (ref _GtkTextTag,ref _GObject,ref _GdkEvent,ref _GtkTextIter)i32
    const GTK_TEXT_SEARCH_VISIBLE_ONLY       = 1
    const GTK_TEXT_SEARCH_TEXT_ONLY          = 2
    const GTK_TEXT_SEARCH_CASE_INSENSITIVE   = 4
    record _GtkTextBuffer =
        var _GObject parent_instance
        var ref _GtkTextBufferPrivate priv
    end

    clang function "gtk_text_iter_get_buffer"          (ref _GtkTextIter)ref _GtkTextBuffer
    clang function "gtk_text_iter_copy"                (ref _GtkTextIter)ref _GtkTextIter
    clang proc     "gtk_text_iter_free"                (ref _GtkTextIter)
    clang proc     "gtk_text_iter_assign"              (ref _GtkTextIter,ref _GtkTextIter)
    clang function "gtk_text_iter_get_type"            ()u64
    clang function "gtk_text_iter_get_offset"          (ref _GtkTextIter)i32
    clang function "gtk_text_iter_get_line"            (ref _GtkTextIter)i32
    clang function "gtk_text_iter_get_line_offset"     (ref _GtkTextIter)i32
    clang function "gtk_text_iter_get_line_index"      (ref _GtkTextIter)i32
    clang function "gtk_text_iter_get_visible_line_offset" (ref _GtkTextIter)i32
    clang function "gtk_text_iter_get_visible_line_index" (ref _GtkTextIter)i32
    clang function "gtk_text_iter_get_char"            (ref _GtkTextIter)u32
    clang function "gtk_text_iter_get_slice"           (ref _GtkTextIter,ref _GtkTextIter)ref i8
    clang function "gtk_text_iter_get_text"            (ref _GtkTextIter,ref _GtkTextIter)ref i8
    clang function "gtk_text_iter_get_visible_slice"   (ref _GtkTextIter,ref _GtkTextIter)ref i8
    clang function "gtk_text_iter_get_visible_text"    (ref _GtkTextIter,ref _GtkTextIter)ref i8
    clang function "gtk_text_iter_get_pixbuf"          (ref _GtkTextIter)ref _GdkPixbuf
    clang function "gtk_text_iter_get_marks"           (ref _GtkTextIter)ref _GSList
    clang function "gtk_text_iter_get_child_anchor"    (ref _GtkTextIter)ref _GtkTextChildAnchor
    clang function "gtk_text_iter_get_toggled_tags"    (ref _GtkTextIter,i32)ref _GSList
    clang function "gtk_text_iter_begins_tag"          (ref _GtkTextIter,ref _GtkTextTag)i32
    clang function "gtk_text_iter_ends_tag"            (ref _GtkTextIter,ref _GtkTextTag)i32
    clang function "gtk_text_iter_toggles_tag"         (ref _GtkTextIter,ref _GtkTextTag)i32
    clang function "gtk_text_iter_has_tag"             (ref _GtkTextIter,ref _GtkTextTag)i32
    clang function "gtk_text_iter_get_tags"            (ref _GtkTextIter)ref _GSList
    clang function "gtk_text_iter_editable"            (ref _GtkTextIter,i32)i32
    clang function "gtk_text_iter_can_insert"          (ref _GtkTextIter,i32)i32
    clang function "gtk_text_iter_starts_word"         (ref _GtkTextIter)i32
    clang function "gtk_text_iter_ends_word"           (ref _GtkTextIter)i32
    clang function "gtk_text_iter_inside_word"         (ref _GtkTextIter)i32
    clang function "gtk_text_iter_starts_sentence"     (ref _GtkTextIter)i32
    clang function "gtk_text_iter_ends_sentence"       (ref _GtkTextIter)i32
    clang function "gtk_text_iter_inside_sentence"     (ref _GtkTextIter)i32
    clang function "gtk_text_iter_starts_line"         (ref _GtkTextIter)i32
    clang function "gtk_text_iter_ends_line"           (ref _GtkTextIter)i32
    clang function "gtk_text_iter_is_cursor_position"  (ref _GtkTextIter)i32
    clang function "gtk_text_iter_get_chars_in_line"   (ref _GtkTextIter)i32
    clang function "gtk_text_iter_get_bytes_in_line"   (ref _GtkTextIter)i32
    clang function "gtk_text_iter_get_attributes"      (ref _GtkTextIter,ref _GtkTextAttributes)i32
    clang function "gtk_text_iter_get_language"        (ref _GtkTextIter)ref _PangoLanguage
    clang function "gtk_text_iter_is_end"              (ref _GtkTextIter)i32
    clang function "gtk_text_iter_is_start"            (ref _GtkTextIter)i32
    clang function "gtk_text_iter_forward_char"        (ref _GtkTextIter)i32
    clang function "gtk_text_iter_backward_char"       (ref _GtkTextIter)i32
    clang function "gtk_text_iter_forward_chars"       (ref _GtkTextIter,i32)i32
    clang function "gtk_text_iter_backward_chars"      (ref _GtkTextIter,i32)i32
    clang function "gtk_text_iter_forward_line"        (ref _GtkTextIter)i32
    clang function "gtk_text_iter_backward_line"       (ref _GtkTextIter)i32
    clang function "gtk_text_iter_forward_lines"       (ref _GtkTextIter,i32)i32
    clang function "gtk_text_iter_backward_lines"      (ref _GtkTextIter,i32)i32
    clang function "gtk_text_iter_forward_word_end"    (ref _GtkTextIter)i32
    clang function "gtk_text_iter_backward_word_start" (ref _GtkTextIter)i32
    clang function "gtk_text_iter_forward_word_ends"   (ref _GtkTextIter,i32)i32
    clang function "gtk_text_iter_backward_word_starts" (ref _GtkTextIter,i32)i32
    clang function "gtk_text_iter_forward_visible_line" (ref _GtkTextIter)i32
    clang function "gtk_text_iter_backward_visible_line" (ref _GtkTextIter)i32
    clang function "gtk_text_iter_forward_visible_lines" (ref _GtkTextIter,i32)i32
    clang function "gtk_text_iter_backward_visible_lines" (ref _GtkTextIter,i32)i32
    clang function "gtk_text_iter_forward_visible_word_end" (ref _GtkTextIter)i32
    clang function "gtk_text_iter_backward_visible_word_start" (ref _GtkTextIter)i32
    clang function "gtk_text_iter_forward_visible_word_ends" (ref _GtkTextIter,i32)i32
    clang function "gtk_text_iter_backward_visible_word_starts" (ref _GtkTextIter,i32)i32
    clang function "gtk_text_iter_forward_sentence_end" (ref _GtkTextIter)i32
    clang function "gtk_text_iter_backward_sentence_start" (ref _GtkTextIter)i32
    clang function "gtk_text_iter_forward_sentence_ends" (ref _GtkTextIter,i32)i32
    clang function "gtk_text_iter_backward_sentence_starts" (ref _GtkTextIter,i32)i32
    clang function "gtk_text_iter_forward_cursor_position" (ref _GtkTextIter)i32
    clang function "gtk_text_iter_backward_cursor_position" (ref _GtkTextIter)i32
    clang function "gtk_text_iter_forward_cursor_positions" (ref _GtkTextIter,i32)i32
    clang function "gtk_text_iter_backward_cursor_positions" (ref _GtkTextIter,i32)i32
    clang function "gtk_text_iter_forward_visible_cursor_position" (ref _GtkTextIter)i32
    clang function "gtk_text_iter_backward_visible_cursor_position" (ref _GtkTextIter)i32
    clang function "gtk_text_iter_forward_visible_cursor_positions" (ref _GtkTextIter,i32)i32
    clang function "gtk_text_iter_backward_visible_cursor_positions" (ref _GtkTextIter,i32)i32
    clang proc     "gtk_text_iter_set_offset"          (ref _GtkTextIter,i32)
    clang proc     "gtk_text_iter_set_line"            (ref _GtkTextIter,i32)
    clang proc     "gtk_text_iter_set_line_offset"     (ref _GtkTextIter,i32)
    clang proc     "gtk_text_iter_set_line_index"      (ref _GtkTextIter,i32)
    clang proc     "gtk_text_iter_forward_to_end"      (ref _GtkTextIter)
    clang function "gtk_text_iter_forward_to_line_end" (ref _GtkTextIter)i32
    clang proc     "gtk_text_iter_set_visible_line_offset" (ref _GtkTextIter,i32)
    clang proc     "gtk_text_iter_set_visible_line_index" (ref _GtkTextIter,i32)
    clang function "gtk_text_iter_forward_to_tag_toggle" (ref _GtkTextIter,ref _GtkTextTag)i32
    clang function "gtk_text_iter_backward_to_tag_toggle" (ref _GtkTextIter,ref _GtkTextTag)i32
    clang function "gtk_text_iter_forward_find_char"   (ref _GtkTextIter,ref clang function(u32,ref void)i32,ref void,ref _GtkTextIter)i32
    clang function "gtk_text_iter_backward_find_char"  (ref _GtkTextIter,ref clang function(u32,ref void)i32,ref void,ref _GtkTextIter)i32
    clang function "gtk_text_iter_forward_search"      (ref _GtkTextIter,ref i8,i32,ref _GtkTextIter,ref _GtkTextIter,ref _GtkTextIter)i32
    clang function "gtk_text_iter_backward_search"     (ref _GtkTextIter,ref i8,i32,ref _GtkTextIter,ref _GtkTextIter,ref _GtkTextIter)i32
    clang function "gtk_text_iter_equal"               (ref _GtkTextIter,ref _GtkTextIter)i32
    clang function "gtk_text_iter_compare"             (ref _GtkTextIter,ref _GtkTextIter)i32
    clang function "gtk_text_iter_in_range"            (ref _GtkTextIter,ref _GtkTextIter,ref _GtkTextIter)i32
    clang proc     "gtk_text_iter_order"               (ref _GtkTextIter,ref _GtkTextIter)
    record _GtkTargetList =
        var int dummy    !empty record
    end

    record _GtkTargetEntry =
        var ref i8 target
        var u32 flags
        var u32 info
    end

    clang function "gtk_target_list_get_type"          ()u64
    clang function "gtk_target_list_new"               (ref _GtkTargetEntry,u32)ref _GtkTargetList
    clang function "gtk_target_list_ref"               (ref _GtkTargetList)ref _GtkTargetList
    clang proc     "gtk_target_list_unref"             (ref _GtkTargetList)
    clang proc     "gtk_target_list_add"               (ref _GtkTargetList,ref _GdkAtom,u32,u32)
    clang proc     "gtk_target_list_add_text_targets"  (ref _GtkTargetList,u32)
    clang proc     "gtk_target_list_add_rich_text_targets" (ref _GtkTargetList,u32,i32,ref _GtkTextBuffer)
    clang proc     "gtk_target_list_add_image_targets" (ref _GtkTargetList,u32,i32)
    clang proc     "gtk_target_list_add_uri_targets"   (ref _GtkTargetList,u32)
    clang proc     "gtk_target_list_add_table"         (ref _GtkTargetList,ref _GtkTargetEntry,u32)
    clang proc     "gtk_target_list_remove"            (ref _GtkTargetList,ref _GdkAtom)
    clang function "gtk_target_list_find"              (ref _GtkTargetList,ref _GdkAtom,ref u32)i32
    clang function "gtk_target_table_new_from_list"    (ref _GtkTargetList,ref i32)ref _GtkTargetEntry
    clang proc     "gtk_target_table_free"             (ref _GtkTargetEntry,i32)
    clang function "gtk_selection_owner_set"           (ref _GtkWidget,ref _GdkAtom,u32)i32
    clang function "gtk_selection_owner_set_for_display" (ref _GdkDisplay,ref _GtkWidget,ref _GdkAtom,u32)i32
    clang proc     "gtk_selection_add_target"          (ref _GtkWidget,ref _GdkAtom,ref _GdkAtom,u32)
    clang proc     "gtk_selection_add_targets"         (ref _GtkWidget,ref _GdkAtom,ref _GtkTargetEntry,u32)
    clang proc     "gtk_selection_clear_targets"       (ref _GtkWidget,ref _GdkAtom)
    clang function "gtk_selection_convert"             (ref _GtkWidget,ref _GdkAtom,ref _GdkAtom,u32)i32
    clang proc     "gtk_selection_remove_all"          (ref _GtkWidget)
    clang function "gtk_selection_data_get_selection"  (ref _GtkSelectionData)ref _GdkAtom
    clang function "gtk_selection_data_get_target"     (ref _GtkSelectionData)ref _GdkAtom
    clang function "gtk_selection_data_get_data_type"  (ref _GtkSelectionData)ref _GdkAtom
    clang function "gtk_selection_data_get_format"     (ref _GtkSelectionData)i32
    clang function "gtk_selection_data_get_data"       (ref _GtkSelectionData)ref byte
    clang function "gtk_selection_data_get_length"     (ref _GtkSelectionData)i32
    clang function "gtk_selection_data_get_data_with_length" (ref _GtkSelectionData,ref i32)ref byte
    clang function "gtk_selection_data_get_display"    (ref _GtkSelectionData)ref _GdkDisplay
    clang proc     "gtk_selection_data_set"            (ref _GtkSelectionData,ref _GdkAtom,i32,ref byte,i32)
    clang function "gtk_selection_data_set_text"       (ref _GtkSelectionData,ref i8,i32)i32
    clang function "gtk_selection_data_get_text"       (ref _GtkSelectionData)ref byte
    clang function "gtk_selection_data_set_pixbuf"     (ref _GtkSelectionData,ref _GdkPixbuf)i32
    clang function "gtk_selection_data_get_pixbuf"     (ref _GtkSelectionData)ref _GdkPixbuf
    clang function "gtk_selection_data_set_uris"       (ref _GtkSelectionData,ref ref i8)i32
    clang function "gtk_selection_data_get_uris"       (ref _GtkSelectionData)ref ref i8
    clang function "gtk_selection_data_get_targets"    (ref _GtkSelectionData,ref ref ref _GdkAtom,ref i32)i32
    clang function "gtk_selection_data_targets_include_text" (ref _GtkSelectionData)i32
    clang function "gtk_selection_data_targets_include_rich_text" (ref _GtkSelectionData,ref _GtkTextBuffer)i32
    clang function "gtk_selection_data_targets_include_image" (ref _GtkSelectionData,i32)i32
    clang function "gtk_selection_data_targets_include_uri" (ref _GtkSelectionData)i32
    clang function "gtk_targets_include_text"          (ref ref _GdkAtom,i32)i32
    clang function "gtk_targets_include_rich_text"     (ref ref _GdkAtom,i32,ref _GtkTextBuffer)i32
    clang function "gtk_targets_include_image"         (ref ref _GdkAtom,i32,i32)i32
    clang function "gtk_targets_include_uri"           (ref ref _GdkAtom,i32)i32
    clang function "gtk_selection_data_get_type"       ()u64
    clang function "gtk_selection_data_copy"           (ref _GtkSelectionData)ref _GtkSelectionData
    clang proc     "gtk_selection_data_free"           (ref _GtkSelectionData)
    clang function "gtk_target_entry_get_type"         ()u64
    clang function "gtk_target_entry_new"              (ref i8,u32,u32)ref _GtkTargetEntry
    clang function "gtk_target_entry_copy"             (ref _GtkTargetEntry)ref _GtkTargetEntry
    clang proc     "gtk_target_entry_free"             (ref _GtkTargetEntry)
    const GTK_DEST_DEFAULT_MOTION            = 1
    const GTK_DEST_DEFAULT_HIGHLIGHT         = 2
    const GTK_DEST_DEFAULT_DROP              = 4
    const GTK_DEST_DEFAULT_ALL               = 7
    const GTK_TARGET_SAME_APP                = 1
    const GTK_TARGET_SAME_WIDGET             = 2
    const GTK_TARGET_OTHER_APP               = 4
    const GTK_TARGET_OTHER_WIDGET            = 8
    clang proc     "gtk_drag_get_data"                 (ref _GtkWidget,ref _GdkDragContext,ref _GdkAtom,u32)
    clang proc     "gtk_drag_finish"                   (ref _GdkDragContext,i32,i32,u32)
    clang function "gtk_drag_get_source_widget"        (ref _GdkDragContext)ref _GtkWidget
    clang proc     "gtk_drag_highlight"                (ref _GtkWidget)
    clang proc     "gtk_drag_unhighlight"              (ref _GtkWidget)
    clang proc     "gtk_drag_dest_set"                 (ref _GtkWidget,i32,ref _GtkTargetEntry,i32,i32)
    clang proc     "gtk_drag_dest_set_proxy"           (ref _GtkWidget,ref _GdkWindow,i32,i32)
    clang proc     "gtk_drag_dest_unset"               (ref _GtkWidget)
    clang function "gtk_drag_dest_find_target"         (ref _GtkWidget,ref _GdkDragContext,ref _GtkTargetList)ref _GdkAtom
    clang function "gtk_drag_dest_get_target_list"     (ref _GtkWidget)ref _GtkTargetList
    clang proc     "gtk_drag_dest_set_target_list"     (ref _GtkWidget,ref _GtkTargetList)
    clang proc     "gtk_drag_dest_add_text_targets"    (ref _GtkWidget)
    clang proc     "gtk_drag_dest_add_image_targets"   (ref _GtkWidget)
    clang proc     "gtk_drag_dest_add_uri_targets"     (ref _GtkWidget)
    clang proc     "gtk_drag_dest_set_track_motion"    (ref _GtkWidget,i32)
    clang function "gtk_drag_dest_get_track_motion"    (ref _GtkWidget)i32
    clang proc     "gtk_drag_source_set"               (ref _GtkWidget,i32,ref _GtkTargetEntry,i32,i32)
    clang proc     "gtk_drag_source_unset"             (ref _GtkWidget)
    clang function "gtk_drag_source_get_target_list"   (ref _GtkWidget)ref _GtkTargetList
    clang proc     "gtk_drag_source_set_target_list"   (ref _GtkWidget,ref _GtkTargetList)
    clang proc     "gtk_drag_source_add_text_targets"  (ref _GtkWidget)
    clang proc     "gtk_drag_source_add_image_targets" (ref _GtkWidget)
    clang proc     "gtk_drag_source_add_uri_targets"   (ref _GtkWidget)
    clang proc     "gtk_drag_source_set_icon_pixbuf"   (ref _GtkWidget,ref _GdkPixbuf)
    clang proc     "gtk_drag_source_set_icon_stock"    (ref _GtkWidget,ref i8)
    clang proc     "gtk_drag_source_set_icon_name"     (ref _GtkWidget,ref i8)
    clang proc     "gtk_drag_source_set_icon_gicon"    (ref _GtkWidget,ref _GIcon)
    clang function "gtk_drag_begin"                    (ref _GtkWidget,ref _GtkTargetList,i32,i32,ref _GdkEvent)ref _GdkDragContext
    clang proc     "gtk_drag_set_icon_widget"          (ref _GdkDragContext,ref _GtkWidget,i32,i32)
    clang proc     "gtk_drag_set_icon_pixbuf"          (ref _GdkDragContext,ref _GdkPixbuf,i32,i32)
    clang proc     "gtk_drag_set_icon_stock"           (ref _GdkDragContext,ref i8,i32,i32)
    clang proc     "gtk_drag_set_icon_surface"         (ref _GdkDragContext,ref _cairo_surface)
    clang proc     "gtk_drag_set_icon_name"            (ref _GdkDragContext,ref i8,i32,i32)
    clang proc     "gtk_drag_set_icon_gicon"           (ref _GdkDragContext,ref _GIcon,i32,i32)
    clang proc     "gtk_drag_set_icon_default"         (ref _GdkDragContext)
    clang function "gtk_drag_check_threshold"          (ref _GtkWidget,i32,i32,i32,i32)i32
    clang proc     "_gtk_drag_source_handle_event"     (ref _GtkWidget,ref _GdkEvent)
    clang proc     "_gtk_drag_dest_handle_event"       (ref _GtkWidget,ref _GdkEvent)
    record _GtkEditable =
        var int dummy    !empty record
    end

    record _GtkEditableInterface =
        var _GTypeInterface base_iface
        var ref clang proc(ref _GtkEditable,ref i8,i32,ref i32) insert_text
        var ref clang proc(ref _GtkEditable,i32,i32) delete_text
        var ref clang proc(ref _GtkEditable) changed
        var ref clang proc(ref _GtkEditable,ref i8,i32,ref i32) do_insert_text
        var ref clang proc(ref _GtkEditable,i32,i32) do_delete_text
        var ref clang function(ref _GtkEditable,i32,i32)ref i8 get_chars
        var ref clang proc(ref _GtkEditable,i32,i32) set_selection_bounds
        var ref clang function(ref _GtkEditable,ref i32,ref i32)i32 get_selection_bounds
        var ref clang proc(ref _GtkEditable,i32) set_position
        var ref clang function(ref _GtkEditable)i32 get_position
    end

    clang function "gtk_editable_get_type"             ()u64
    clang proc     "gtk_editable_select_region"        (ref _GtkEditable,i32,i32)
    clang function "gtk_editable_get_selection_bounds" (ref _GtkEditable,ref i32,ref i32)i32
    clang proc     "gtk_editable_insert_text"          (ref _GtkEditable,ref i8,i32,ref i32)
    clang proc     "gtk_editable_delete_text"          (ref _GtkEditable,i32,i32)
    clang function "gtk_editable_get_chars"            (ref _GtkEditable,i32,i32)ref i8
    clang proc     "gtk_editable_cut_clipboard"        (ref _GtkEditable)
    clang proc     "gtk_editable_copy_clipboard"       (ref _GtkEditable)
    clang proc     "gtk_editable_paste_clipboard"      (ref _GtkEditable)
    clang proc     "gtk_editable_delete_selection"     (ref _GtkEditable)
    clang proc     "gtk_editable_set_position"         (ref _GtkEditable,i32)
    clang function "gtk_editable_get_position"         (ref _GtkEditable)i32
    clang proc     "gtk_editable_set_editable"         (ref _GtkEditable,i32)
    clang function "gtk_editable_get_editable"         (ref _GtkEditable)i32
    record _GtkIMContext =
        var _GObject parent_instance
    end

    record _GtkIMContextClass =
        var _GObjectClass parent_class
        var ref clang proc(ref _GtkIMContext) preedit_start
        var ref clang proc(ref _GtkIMContext) preedit_end
        var ref clang proc(ref _GtkIMContext) preedit_changed
        var ref clang proc(ref _GtkIMContext,ref i8) commit
        var ref clang function(ref _GtkIMContext)i32 retrieve_surrounding
        var ref clang function(ref _GtkIMContext,i32,i32)i32 delete_surrounding
        var ref clang proc(ref _GtkIMContext,ref _GdkWindow) set_client_window
        var ref clang proc(ref _GtkIMContext,ref ref i8,ref ref _PangoAttrList,ref i32) get_preedit_string
        var ref clang function(ref _GtkIMContext,ref _GdkEventKey)i32 filter_keypress
        var ref clang proc(ref _GtkIMContext) focus_in
        var ref clang proc(ref _GtkIMContext) focus_out
        var ref clang proc(ref _GtkIMContext) reset
        var ref clang proc(ref _GtkIMContext,ref _cairo_rectangle_int) set_cursor_location
        var ref clang proc(ref _GtkIMContext,i32) set_use_preedit
        var ref clang proc(ref _GtkIMContext,ref i8,i32,i32) set_surrounding
        var ref clang function(ref _GtkIMContext,ref ref i8,ref i32)i32 get_surrounding
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
        var ref clang proc() _gtk_reserved5
        var ref clang proc() _gtk_reserved6
    end

    clang function "gtk_im_context_get_type"           ()u64
    clang proc     "gtk_im_context_set_client_window"  (ref _GtkIMContext,ref _GdkWindow)
    clang proc     "gtk_im_context_get_preedit_string" (ref _GtkIMContext,ref ref i8,ref ref _PangoAttrList,ref i32)
    clang function "gtk_im_context_filter_keypress"    (ref _GtkIMContext,ref _GdkEventKey)i32
    clang proc     "gtk_im_context_focus_in"           (ref _GtkIMContext)
    clang proc     "gtk_im_context_focus_out"          (ref _GtkIMContext)
    clang proc     "gtk_im_context_reset"              (ref _GtkIMContext)
    clang proc     "gtk_im_context_set_cursor_location" (ref _GtkIMContext,ref _cairo_rectangle_int)
    clang proc     "gtk_im_context_set_use_preedit"    (ref _GtkIMContext,i32)
    clang proc     "gtk_im_context_set_surrounding"    (ref _GtkIMContext,ref i8,i32,i32)
    clang function "gtk_im_context_get_surrounding"    (ref _GtkIMContext,ref ref i8,ref i32)i32
    clang function "gtk_im_context_delete_surrounding" (ref _GtkIMContext,i32,i32)i32
    record _GtkEntryBuffer =
        var _GObject parent_instance
        var ref _GtkEntryBufferPrivate priv
    end

    record _GtkEntryBufferClass =
        var _GObjectClass parent_class
        var ref clang proc(ref _GtkEntryBuffer,u32,ref i8,u32) inserted_text
        var ref clang proc(ref _GtkEntryBuffer,u32,u32) deleted_text
        var ref clang function(ref _GtkEntryBuffer,ref u64)ref i8 get_text
        var ref clang function(ref _GtkEntryBuffer)u32 get_length
        var ref clang function(ref _GtkEntryBuffer,u32,ref i8,u32)u32 insert_text
        var ref clang function(ref _GtkEntryBuffer,u32,u32)u32 delete_text
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
        var ref clang proc() _gtk_reserved5
        var ref clang proc() _gtk_reserved6
        var ref clang proc() _gtk_reserved7
        var ref clang proc() _gtk_reserved8
    end

    record _GtkEntryBufferPrivate =
        var int dummy    !empty record
    end

    clang function "gtk_entry_buffer_get_type"         ()u64
    clang function "gtk_entry_buffer_new"              (ref i8,i32)ref _GtkEntryBuffer
    clang function "gtk_entry_buffer_get_bytes"        (ref _GtkEntryBuffer)u64
    clang function "gtk_entry_buffer_get_length"       (ref _GtkEntryBuffer)u32
    clang function "gtk_entry_buffer_get_text"         (ref _GtkEntryBuffer)ref i8
    clang proc     "gtk_entry_buffer_set_text"         (ref _GtkEntryBuffer,ref i8,i32)
    clang proc     "gtk_entry_buffer_set_max_length"   (ref _GtkEntryBuffer,i32)
    clang function "gtk_entry_buffer_get_max_length"   (ref _GtkEntryBuffer)i32
    clang function "gtk_entry_buffer_insert_text"      (ref _GtkEntryBuffer,u32,ref i8,i32)u32
    clang function "gtk_entry_buffer_delete_text"      (ref _GtkEntryBuffer,u32,i32)u32
    clang proc     "gtk_entry_buffer_emit_inserted_text" (ref _GtkEntryBuffer,u32,ref i8,u32)
    clang proc     "gtk_entry_buffer_emit_deleted_text" (ref _GtkEntryBuffer,u32,u32)
    record _GtkListStore =
        var _GObject parent
        var ref _GtkListStorePrivate priv
    end

    record _GtkListStorePrivate =
        var int dummy    !empty record
    end

    record _GtkListStoreClass =
        var _GObjectClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_list_store_get_type"           ()u64
    clang function "gtk_list_store_new"                (i32,...)ref _GtkListStore
    clang function "gtk_list_store_newv"               (i32,ref u64)ref _GtkListStore
    clang proc     "gtk_list_store_set_column_types"   (ref _GtkListStore,i32,ref u64)
    clang proc     "gtk_list_store_set_value"          (ref _GtkListStore,ref _GtkTreeIter,i32,ref _GValue)
    clang proc     "gtk_list_store_set"                (ref _GtkListStore,ref _GtkTreeIter,...)
    clang proc     "gtk_list_store_set_valuesv"        (ref _GtkListStore,ref _GtkTreeIter,ref i32,ref _GValue,i32)
    clang proc     "gtk_list_store_set_valist"         (ref _GtkListStore,ref _GtkTreeIter,ref i8)
    clang function "gtk_list_store_remove"             (ref _GtkListStore,ref _GtkTreeIter)i32
    clang proc     "gtk_list_store_insert"             (ref _GtkListStore,ref _GtkTreeIter,i32)
    clang proc     "gtk_list_store_insert_before"      (ref _GtkListStore,ref _GtkTreeIter,ref _GtkTreeIter)
    clang proc     "gtk_list_store_insert_after"       (ref _GtkListStore,ref _GtkTreeIter,ref _GtkTreeIter)
    clang proc     "gtk_list_store_insert_with_values" (ref _GtkListStore,ref _GtkTreeIter,i32,...)
    clang proc     "gtk_list_store_insert_with_valuesv" (ref _GtkListStore,ref _GtkTreeIter,i32,ref i32,ref _GValue,i32)
    clang proc     "gtk_list_store_prepend"            (ref _GtkListStore,ref _GtkTreeIter)
    clang proc     "gtk_list_store_append"             (ref _GtkListStore,ref _GtkTreeIter)
    clang proc     "gtk_list_store_clear"              (ref _GtkListStore)
    clang function "gtk_list_store_iter_is_valid"      (ref _GtkListStore,ref _GtkTreeIter)i32
    clang proc     "gtk_list_store_reorder"            (ref _GtkListStore,ref i32)
    clang proc     "gtk_list_store_swap"               (ref _GtkListStore,ref _GtkTreeIter,ref _GtkTreeIter)
    clang proc     "gtk_list_store_move_after"         (ref _GtkListStore,ref _GtkTreeIter,ref _GtkTreeIter)
    clang proc     "gtk_list_store_move_before"        (ref _GtkListStore,ref _GtkTreeIter,ref _GtkTreeIter)
    record _GtkTreeModelFilter =
        var _GObject parent
        var ref _GtkTreeModelFilterPrivate priv
    end

    record _GtkTreeModelFilterClass =
        var _GObjectClass parent_class
        var ref clang function(ref _GtkTreeModelFilter,ref _GtkTreeModel,ref _GtkTreeIter)i32 visible
        var ref clang proc(ref _GtkTreeModelFilter,ref _GtkTreeModel,ref _GtkTreeIter,ref _GValue,i32) modify
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    record _GtkTreeModelFilterPrivate =
        var int dummy    !empty record
    end

    clang function "gtk_tree_model_filter_get_type"    ()u64
    clang function "gtk_tree_model_filter_new"         (ref _GtkTreeModel,ref _GtkTreePath)ref _GtkTreeModel
    clang proc     "gtk_tree_model_filter_set_visible_func" (ref _GtkTreeModelFilter,ref clang function(ref _GtkTreeModel,ref _GtkTreeIter,ref void)i32,ref void,ref clang proc(ref void))
    clang proc     "gtk_tree_model_filter_set_modify_func" (ref _GtkTreeModelFilter,i32,ref u64,ref clang proc(ref _GtkTreeModel,ref _GtkTreeIter,ref _GValue,i32,ref void),ref void,ref clang proc(ref void))
    clang proc     "gtk_tree_model_filter_set_visible_column" (ref _GtkTreeModelFilter,i32)
    clang function "gtk_tree_model_filter_get_model"   (ref _GtkTreeModelFilter)ref _GtkTreeModel
    clang function "gtk_tree_model_filter_convert_child_iter_to_iter" (ref _GtkTreeModelFilter,ref _GtkTreeIter,ref _GtkTreeIter)i32
    clang proc     "gtk_tree_model_filter_convert_iter_to_child_iter" (ref _GtkTreeModelFilter,ref _GtkTreeIter,ref _GtkTreeIter)
    clang function "gtk_tree_model_filter_convert_child_path_to_path" (ref _GtkTreeModelFilter,ref _GtkTreePath)ref _GtkTreePath
    clang function "gtk_tree_model_filter_convert_path_to_child_path" (ref _GtkTreeModelFilter,ref _GtkTreePath)ref _GtkTreePath
    clang proc     "gtk_tree_model_filter_refilter"    (ref _GtkTreeModelFilter)
    clang proc     "gtk_tree_model_filter_clear_cache" (ref _GtkTreeModelFilter)
    record _GtkEntryCompletion =
        var _GObject parent_instance
        var ref _GtkEntryCompletionPrivate priv
    end

    record _GtkEntryCompletionClass =
        var _GObjectClass parent_class
        var ref clang function(ref _GtkEntryCompletion,ref _GtkTreeModel,ref _GtkTreeIter)i32 match_selected
        var ref clang proc(ref _GtkEntryCompletion,i32) action_activated
        var ref clang function(ref _GtkEntryCompletion,ref i8)i32 insert_prefix
        var ref clang function(ref _GtkEntryCompletion,ref _GtkTreeModel,ref _GtkTreeIter)i32 cursor_on_match
        var ref clang proc() _gtk_reserved0
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
    end

    record _GtkEntryCompletionPrivate =
        var int dummy    !empty record
    end

    clang function "gtk_entry_completion_get_type"     ()u64
    clang function "gtk_entry_completion_new"          ()ref _GtkEntryCompletion
    clang function "gtk_entry_completion_new_with_area" (ref _GtkCellArea)ref _GtkEntryCompletion
    clang function "gtk_entry_completion_get_entry"    (ref _GtkEntryCompletion)ref _GtkWidget
    clang proc     "gtk_entry_completion_set_model"    (ref _GtkEntryCompletion,ref _GtkTreeModel)
    clang function "gtk_entry_completion_get_model"    (ref _GtkEntryCompletion)ref _GtkTreeModel
    clang proc     "gtk_entry_completion_set_match_func" (ref _GtkEntryCompletion,ref clang function(ref _GtkEntryCompletion,ref i8,ref _GtkTreeIter,ref void)i32,ref void,ref clang proc(ref void))
    clang proc     "gtk_entry_completion_set_minimum_key_length" (ref _GtkEntryCompletion,i32)
    clang function "gtk_entry_completion_get_minimum_key_length" (ref _GtkEntryCompletion)i32
    clang function "gtk_entry_completion_compute_prefix" (ref _GtkEntryCompletion,ref i8)ref i8
    clang proc     "gtk_entry_completion_complete"     (ref _GtkEntryCompletion)
    clang proc     "gtk_entry_completion_insert_prefix" (ref _GtkEntryCompletion)
    clang proc     "gtk_entry_completion_insert_action_text" (ref _GtkEntryCompletion,i32,ref i8)
    clang proc     "gtk_entry_completion_insert_action_markup" (ref _GtkEntryCompletion,i32,ref i8)
    clang proc     "gtk_entry_completion_delete_action" (ref _GtkEntryCompletion,i32)
    clang proc     "gtk_entry_completion_set_inline_completion" (ref _GtkEntryCompletion,i32)
    clang function "gtk_entry_completion_get_inline_completion" (ref _GtkEntryCompletion)i32
    clang proc     "gtk_entry_completion_set_inline_selection" (ref _GtkEntryCompletion,i32)
    clang function "gtk_entry_completion_get_inline_selection" (ref _GtkEntryCompletion)i32
    clang proc     "gtk_entry_completion_set_popup_completion" (ref _GtkEntryCompletion,i32)
    clang function "gtk_entry_completion_get_popup_completion" (ref _GtkEntryCompletion)i32
    clang proc     "gtk_entry_completion_set_popup_set_width" (ref _GtkEntryCompletion,i32)
    clang function "gtk_entry_completion_get_popup_set_width" (ref _GtkEntryCompletion)i32
    clang proc     "gtk_entry_completion_set_popup_single_match" (ref _GtkEntryCompletion,i32)
    clang function "gtk_entry_completion_get_popup_single_match" (ref _GtkEntryCompletion)i32
    clang function "gtk_entry_completion_get_completion_prefix" (ref _GtkEntryCompletion)ref i8
    clang proc     "gtk_entry_completion_set_text_column" (ref _GtkEntryCompletion,i32)
    clang function "gtk_entry_completion_get_text_column" (ref _GtkEntryCompletion)i32
    record _GtkImage =
        var _GtkMisc misc
        var ref _GtkImagePrivate priv
    end

    record _GtkImagePrivate =
        var int dummy    !empty record
    end

    record _GtkImageClass =
        var _GtkMiscClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    const GTK_IMAGE_EMPTY                    = 0
    const GTK_IMAGE_PIXBUF                   = 1
    const GTK_IMAGE_STOCK                    = 2
    const GTK_IMAGE_ICON_SET                 = 3
    const GTK_IMAGE_ANIMATION                = 4
    const GTK_IMAGE_ICON_NAME                = 5
    const GTK_IMAGE_GICON                    = 6
    clang function "gtk_image_get_type"                ()u64
    clang function "gtk_image_new"                     ()ref _GtkWidget
    clang function "gtk_image_new_from_file"           (ref i8)ref _GtkWidget
    clang function "gtk_image_new_from_resource"       (ref i8)ref _GtkWidget
    clang function "gtk_image_new_from_pixbuf"         (ref _GdkPixbuf)ref _GtkWidget
    clang function "gtk_image_new_from_stock"          (ref i8,i32)ref _GtkWidget
    clang function "gtk_image_new_from_icon_set"       (ref _GtkIconSet,i32)ref _GtkWidget
    clang function "gtk_image_new_from_animation"      (ref _GdkPixbufAnimation)ref _GtkWidget
    clang function "gtk_image_new_from_icon_name"      (ref i8,i32)ref _GtkWidget
    clang function "gtk_image_new_from_gicon"          (ref _GIcon,i32)ref _GtkWidget
    clang proc     "gtk_image_clear"                   (ref _GtkImage)
    clang proc     "gtk_image_set_from_file"           (ref _GtkImage,ref i8)
    clang proc     "gtk_image_set_from_resource"       (ref _GtkImage,ref i8)
    clang proc     "gtk_image_set_from_pixbuf"         (ref _GtkImage,ref _GdkPixbuf)
    clang proc     "gtk_image_set_from_stock"          (ref _GtkImage,ref i8,i32)
    clang proc     "gtk_image_set_from_icon_set"       (ref _GtkImage,ref _GtkIconSet,i32)
    clang proc     "gtk_image_set_from_animation"      (ref _GtkImage,ref _GdkPixbufAnimation)
    clang proc     "gtk_image_set_from_icon_name"      (ref _GtkImage,ref i8,i32)
    clang proc     "gtk_image_set_from_gicon"          (ref _GtkImage,ref _GIcon,i32)
    clang proc     "gtk_image_set_pixel_size"          (ref _GtkImage,i32)
    clang function "gtk_image_get_storage_type"        (ref _GtkImage)i32
    clang function "gtk_image_get_pixbuf"              (ref _GtkImage)ref _GdkPixbuf
    clang proc     "gtk_image_get_stock"               (ref _GtkImage,ref ref i8,ref i32)
    clang proc     "gtk_image_get_icon_set"            (ref _GtkImage,ref ref _GtkIconSet,ref i32)
    clang function "gtk_image_get_animation"           (ref _GtkImage)ref _GdkPixbufAnimation
    clang proc     "gtk_image_get_icon_name"           (ref _GtkImage,ref ref i8,ref i32)
    clang proc     "gtk_image_get_gicon"               (ref _GtkImage,ref ref _GIcon,ref i32)
    clang function "gtk_image_get_pixel_size"          (ref _GtkImage)i32
    const GTK_ENTRY_ICON_PRIMARY             = 0
    const GTK_ENTRY_ICON_SECONDARY           = 1
    record _GtkEntry =
        var _GtkWidget parent_instance
        var ref _GtkEntryPrivate priv
    end

    record _GtkEntryPrivate =
        var int dummy    !empty record
    end

    record _GtkEntryClass =
        var _GtkWidgetClass parent_class
        var ref clang proc(ref _GtkEntry,ref _GtkMenu) populate_popup
        var ref clang proc(ref _GtkEntry) activate
        var ref clang proc(ref _GtkEntry,i32,i32,i32) move_cursor
        var ref clang proc(ref _GtkEntry,ref i8) insert_at_cursor
        var ref clang proc(ref _GtkEntry,i32,i32) delete_from_cursor
        var ref clang proc(ref _GtkEntry) backspace
        var ref clang proc(ref _GtkEntry) cut_clipboard
        var ref clang proc(ref _GtkEntry) copy_clipboard
        var ref clang proc(ref _GtkEntry) paste_clipboard
        var ref clang proc(ref _GtkEntry) toggle_overwrite
        var ref clang proc(ref _GtkEntry,ref i32,ref i32,ref i32,ref i32) get_text_area_size
        var ref clang proc(ref _GtkEntry,ref i32,ref i32,ref i32,ref i32) get_frame_size
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
        var ref clang proc() _gtk_reserved5
        var ref clang proc() _gtk_reserved6
        var ref clang proc() _gtk_reserved7
    end

    clang function "gtk_entry_get_type"                ()u64
    clang function "gtk_entry_new"                     ()ref _GtkWidget
    clang function "gtk_entry_new_with_buffer"         (ref _GtkEntryBuffer)ref _GtkWidget
    clang function "gtk_entry_get_buffer"              (ref _GtkEntry)ref _GtkEntryBuffer
    clang proc     "gtk_entry_set_buffer"              (ref _GtkEntry,ref _GtkEntryBuffer)
    clang proc     "gtk_entry_get_text_area"           (ref _GtkEntry,ref _cairo_rectangle_int)
    clang proc     "gtk_entry_set_visibility"          (ref _GtkEntry,i32)
    clang function "gtk_entry_get_visibility"          (ref _GtkEntry)i32
    clang proc     "gtk_entry_set_invisible_char"      (ref _GtkEntry,u32)
    clang function "gtk_entry_get_invisible_char"      (ref _GtkEntry)u32
    clang proc     "gtk_entry_unset_invisible_char"    (ref _GtkEntry)
    clang proc     "gtk_entry_set_has_frame"           (ref _GtkEntry,i32)
    clang function "gtk_entry_get_has_frame"           (ref _GtkEntry)i32
    clang proc     "gtk_entry_set_inner_border"        (ref _GtkEntry,ref _GtkBorder)
    clang function "gtk_entry_get_inner_border"        (ref _GtkEntry)ref _GtkBorder
    clang proc     "gtk_entry_set_overwrite_mode"      (ref _GtkEntry,i32)
    clang function "gtk_entry_get_overwrite_mode"      (ref _GtkEntry)i32
    clang proc     "gtk_entry_set_max_length"          (ref _GtkEntry,i32)
    clang function "gtk_entry_get_max_length"          (ref _GtkEntry)i32
    clang function "gtk_entry_get_text_length"         (ref _GtkEntry)u16
    clang proc     "gtk_entry_set_activates_default"   (ref _GtkEntry,i32)
    clang function "gtk_entry_get_activates_default"   (ref _GtkEntry)i32
    clang proc     "gtk_entry_set_width_chars"         (ref _GtkEntry,i32)
    clang function "gtk_entry_get_width_chars"         (ref _GtkEntry)i32
    clang proc     "gtk_entry_set_text"                (ref _GtkEntry,ref i8)
    clang function "gtk_entry_get_text"                (ref _GtkEntry)ref i8
    clang function "gtk_entry_get_layout"              (ref _GtkEntry)ref _PangoLayout
    clang proc     "gtk_entry_get_layout_offsets"      (ref _GtkEntry,ref i32,ref i32)
    clang proc     "gtk_entry_set_alignment"           (ref _GtkEntry,r32)
    clang function "gtk_entry_get_alignment"           (ref _GtkEntry)r32
    clang proc     "gtk_entry_set_completion"          (ref _GtkEntry,ref _GtkEntryCompletion)
    clang function "gtk_entry_get_completion"          (ref _GtkEntry)ref _GtkEntryCompletion
    clang function "gtk_entry_layout_index_to_text_index" (ref _GtkEntry,i32)i32
    clang function "gtk_entry_text_index_to_layout_index" (ref _GtkEntry,i32)i32
    clang proc     "gtk_entry_set_cursor_hadjustment"  (ref _GtkEntry,ref _GtkAdjustment)
    clang function "gtk_entry_get_cursor_hadjustment"  (ref _GtkEntry)ref _GtkAdjustment
    clang proc     "gtk_entry_set_progress_fraction"   (ref _GtkEntry,r64)
    clang function "gtk_entry_get_progress_fraction"   (ref _GtkEntry)r64
    clang proc     "gtk_entry_set_progress_pulse_step" (ref _GtkEntry,r64)
    clang function "gtk_entry_get_progress_pulse_step" (ref _GtkEntry)r64
    clang proc     "gtk_entry_progress_pulse"          (ref _GtkEntry)
    clang function "gtk_entry_get_placeholder_text"    (ref _GtkEntry)ref i8
    clang proc     "gtk_entry_set_placeholder_text"    (ref _GtkEntry,ref i8)
    clang proc     "gtk_entry_set_icon_from_pixbuf"    (ref _GtkEntry,i32,ref _GdkPixbuf)
    clang proc     "gtk_entry_set_icon_from_stock"     (ref _GtkEntry,i32,ref i8)
    clang proc     "gtk_entry_set_icon_from_icon_name" (ref _GtkEntry,i32,ref i8)
    clang proc     "gtk_entry_set_icon_from_gicon"     (ref _GtkEntry,i32,ref _GIcon)
    clang function "gtk_entry_get_icon_storage_type"   (ref _GtkEntry,i32)i32
    clang function "gtk_entry_get_icon_pixbuf"         (ref _GtkEntry,i32)ref _GdkPixbuf
    clang function "gtk_entry_get_icon_stock"          (ref _GtkEntry,i32)ref i8
    clang function "gtk_entry_get_icon_name"           (ref _GtkEntry,i32)ref i8
    clang function "gtk_entry_get_icon_gicon"          (ref _GtkEntry,i32)ref _GIcon
    clang proc     "gtk_entry_set_icon_activatable"    (ref _GtkEntry,i32,i32)
    clang function "gtk_entry_get_icon_activatable"    (ref _GtkEntry,i32)i32
    clang proc     "gtk_entry_set_icon_sensitive"      (ref _GtkEntry,i32,i32)
    clang function "gtk_entry_get_icon_sensitive"      (ref _GtkEntry,i32)i32
    clang function "gtk_entry_get_icon_at_pos"         (ref _GtkEntry,i32,i32)i32
    clang proc     "gtk_entry_set_icon_tooltip_text"   (ref _GtkEntry,i32,ref i8)
    clang function "gtk_entry_get_icon_tooltip_text"   (ref _GtkEntry,i32)ref i8
    clang proc     "gtk_entry_set_icon_tooltip_markup" (ref _GtkEntry,i32,ref i8)
    clang function "gtk_entry_get_icon_tooltip_markup" (ref _GtkEntry,i32)ref i8
    clang proc     "gtk_entry_set_icon_drag_source"    (ref _GtkEntry,i32,ref _GtkTargetList,i32)
    clang function "gtk_entry_get_current_icon_drag_source" (ref _GtkEntry)i32
    clang proc     "gtk_entry_get_icon_area"           (ref _GtkEntry,i32,ref _cairo_rectangle_int)
    clang function "gtk_entry_im_context_filter_keypress" (ref _GtkEntry,ref _GdkEventKey)i32
    clang proc     "gtk_entry_reset_im_context"        (ref _GtkEntry)
    clang proc     "gtk_entry_set_input_purpose"       (ref _GtkEntry,i32)
    clang function "gtk_entry_get_input_purpose"       (ref _GtkEntry)i32
    clang proc     "gtk_entry_set_input_hints"         (ref _GtkEntry,i32)
    clang function "gtk_entry_get_input_hints"         (ref _GtkEntry)i32
    clang proc     "gtk_entry_set_attributes"          (ref _GtkEntry,ref _PangoAttrList)
    clang function "gtk_entry_get_attributes"          (ref _GtkEntry)ref _PangoAttrList
    const GTK_TREE_VIEW_DROP_BEFORE          = 0
    const GTK_TREE_VIEW_DROP_AFTER           = 1
    const GTK_TREE_VIEW_DROP_INTO_OR_BEFORE  = 2
    const GTK_TREE_VIEW_DROP_INTO_OR_AFTER   = 3
    record _GtkTreeView =
        var _GtkContainer parent
        var ref _GtkTreeViewPrivate priv
    end

    record _GtkTreeViewClass =
        var _GtkContainerClass parent_class
        var ref clang proc(ref _GtkTreeView,ref _GtkTreePath,ref _GtkTreeViewColumn) row_activated
        var ref clang function(ref _GtkTreeView,ref _GtkTreeIter,ref _GtkTreePath)i32 test_expand_row
        var ref clang function(ref _GtkTreeView,ref _GtkTreeIter,ref _GtkTreePath)i32 test_collapse_row
        var ref clang proc(ref _GtkTreeView,ref _GtkTreeIter,ref _GtkTreePath) row_expanded
        var ref clang proc(ref _GtkTreeView,ref _GtkTreeIter,ref _GtkTreePath) row_collapsed
        var ref clang proc(ref _GtkTreeView) columns_changed
        var ref clang proc(ref _GtkTreeView) cursor_changed
        var ref clang function(ref _GtkTreeView,i32,i32)i32 move_cursor
        var ref clang function(ref _GtkTreeView)i32 select_all
        var ref clang function(ref _GtkTreeView)i32 unselect_all
        var ref clang function(ref _GtkTreeView,i32)i32 select_cursor_row
        var ref clang function(ref _GtkTreeView)i32 toggle_cursor_row
        var ref clang function(ref _GtkTreeView,i32,i32,i32)i32 expand_collapse_cursor_row
        var ref clang function(ref _GtkTreeView)i32 select_cursor_parent
        var ref clang function(ref _GtkTreeView)i32 start_interactive_search
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
        var ref clang proc() _gtk_reserved5
        var ref clang proc() _gtk_reserved6
        var ref clang proc() _gtk_reserved7
        var ref clang proc() _gtk_reserved8
    end

    record _GtkTreeViewPrivate =
        var int dummy    !empty record
    end

    record _GtkTreeSelection =
        var _GObject parent
        var ref _GtkTreeSelectionPrivate priv
    end

    record _GtkTreeSelectionClass =
        var _GObjectClass parent_class
        var ref clang proc(ref _GtkTreeSelection) changed
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_tree_view_get_type"            ()u64
    clang function "gtk_tree_view_new"                 ()ref _GtkWidget
    clang function "gtk_tree_view_new_with_model"      (ref _GtkTreeModel)ref _GtkWidget
    clang function "gtk_tree_view_get_model"           (ref _GtkTreeView)ref _GtkTreeModel
    clang proc     "gtk_tree_view_set_model"           (ref _GtkTreeView,ref _GtkTreeModel)
    clang function "gtk_tree_view_get_selection"       (ref _GtkTreeView)ref _GtkTreeSelection
    clang function "gtk_tree_view_get_hadjustment"     (ref _GtkTreeView)ref _GtkAdjustment
    clang proc     "gtk_tree_view_set_hadjustment"     (ref _GtkTreeView,ref _GtkAdjustment)
    clang function "gtk_tree_view_get_vadjustment"     (ref _GtkTreeView)ref _GtkAdjustment
    clang proc     "gtk_tree_view_set_vadjustment"     (ref _GtkTreeView,ref _GtkAdjustment)
    clang function "gtk_tree_view_get_headers_visible" (ref _GtkTreeView)i32
    clang proc     "gtk_tree_view_set_headers_visible" (ref _GtkTreeView,i32)
    clang proc     "gtk_tree_view_columns_autosize"    (ref _GtkTreeView)
    clang function "gtk_tree_view_get_headers_clickable" (ref _GtkTreeView)i32
    clang proc     "gtk_tree_view_set_headers_clickable" (ref _GtkTreeView,i32)
    clang proc     "gtk_tree_view_set_rules_hint"      (ref _GtkTreeView,i32)
    clang function "gtk_tree_view_get_rules_hint"      (ref _GtkTreeView)i32
    clang function "gtk_tree_view_append_column"       (ref _GtkTreeView,ref _GtkTreeViewColumn)i32
    clang function "gtk_tree_view_remove_column"       (ref _GtkTreeView,ref _GtkTreeViewColumn)i32
    clang function "gtk_tree_view_insert_column"       (ref _GtkTreeView,ref _GtkTreeViewColumn,i32)i32
    clang function "gtk_tree_view_insert_column_with_attributes" (ref _GtkTreeView,i32,ref i8,ref _GtkCellRenderer,...)i32
    clang function "gtk_tree_view_insert_column_with_data_func" (ref _GtkTreeView,i32,ref i8,ref _GtkCellRenderer,ref clang proc(ref _GtkTreeViewColumn,ref _GtkCellRenderer,ref _GtkTreeModel,ref _GtkTreeIter,ref void),ref void,ref clang proc(ref void))i32
    clang function "gtk_tree_view_get_n_columns"       (ref _GtkTreeView)u32
    clang function "gtk_tree_view_get_column"          (ref _GtkTreeView,i32)ref _GtkTreeViewColumn
    clang function "gtk_tree_view_get_columns"         (ref _GtkTreeView)ref _GList
    clang proc     "gtk_tree_view_move_column_after"   (ref _GtkTreeView,ref _GtkTreeViewColumn,ref _GtkTreeViewColumn)
    clang proc     "gtk_tree_view_set_expander_column" (ref _GtkTreeView,ref _GtkTreeViewColumn)
    clang function "gtk_tree_view_get_expander_column" (ref _GtkTreeView)ref _GtkTreeViewColumn
    clang proc     "gtk_tree_view_set_column_drag_function" (ref _GtkTreeView,ref clang function(ref _GtkTreeView,ref _GtkTreeViewColumn,ref _GtkTreeViewColumn,ref _GtkTreeViewColumn,ref void)i32,ref void,ref clang proc(ref void))
    clang proc     "gtk_tree_view_scroll_to_point"     (ref _GtkTreeView,i32,i32)
    clang proc     "gtk_tree_view_scroll_to_cell"      (ref _GtkTreeView,ref _GtkTreePath,ref _GtkTreeViewColumn,i32,r32,r32)
    clang proc     "gtk_tree_view_row_activated"       (ref _GtkTreeView,ref _GtkTreePath,ref _GtkTreeViewColumn)
    clang proc     "gtk_tree_view_expand_all"          (ref _GtkTreeView)
    clang proc     "gtk_tree_view_collapse_all"        (ref _GtkTreeView)
    clang proc     "gtk_tree_view_expand_to_path"      (ref _GtkTreeView,ref _GtkTreePath)
    clang function "gtk_tree_view_expand_row"          (ref _GtkTreeView,ref _GtkTreePath,i32)i32
    clang function "gtk_tree_view_collapse_row"        (ref _GtkTreeView,ref _GtkTreePath)i32
    clang proc     "gtk_tree_view_map_expanded_rows"   (ref _GtkTreeView,ref clang proc(ref _GtkTreeView,ref _GtkTreePath,ref void),ref void)
    clang function "gtk_tree_view_row_expanded"        (ref _GtkTreeView,ref _GtkTreePath)i32
    clang proc     "gtk_tree_view_set_reorderable"     (ref _GtkTreeView,i32)
    clang function "gtk_tree_view_get_reorderable"     (ref _GtkTreeView)i32
    clang proc     "gtk_tree_view_set_cursor"          (ref _GtkTreeView,ref _GtkTreePath,ref _GtkTreeViewColumn,i32)
    clang proc     "gtk_tree_view_set_cursor_on_cell"  (ref _GtkTreeView,ref _GtkTreePath,ref _GtkTreeViewColumn,ref _GtkCellRenderer,i32)
    clang proc     "gtk_tree_view_get_cursor"          (ref _GtkTreeView,ref ref _GtkTreePath,ref ref _GtkTreeViewColumn)
    clang function "gtk_tree_view_get_bin_window"      (ref _GtkTreeView)ref _GdkWindow
    clang function "gtk_tree_view_get_path_at_pos"     (ref _GtkTreeView,i32,i32,ref ref _GtkTreePath,ref ref _GtkTreeViewColumn,ref i32,ref i32)i32
    clang proc     "gtk_tree_view_get_cell_area"       (ref _GtkTreeView,ref _GtkTreePath,ref _GtkTreeViewColumn,ref _cairo_rectangle_int)
    clang proc     "gtk_tree_view_get_background_area" (ref _GtkTreeView,ref _GtkTreePath,ref _GtkTreeViewColumn,ref _cairo_rectangle_int)
    clang proc     "gtk_tree_view_get_visible_rect"    (ref _GtkTreeView,ref _cairo_rectangle_int)
    clang function "gtk_tree_view_get_visible_range"   (ref _GtkTreeView,ref ref _GtkTreePath,ref ref _GtkTreePath)i32
    clang function "gtk_tree_view_is_blank_at_pos"     (ref _GtkTreeView,i32,i32,ref ref _GtkTreePath,ref ref _GtkTreeViewColumn,ref i32,ref i32)i32
    clang proc     "gtk_tree_view_enable_model_drag_source" (ref _GtkTreeView,i32,ref _GtkTargetEntry,i32,i32)
    clang proc     "gtk_tree_view_enable_model_drag_dest" (ref _GtkTreeView,ref _GtkTargetEntry,i32,i32)
    clang proc     "gtk_tree_view_unset_rows_drag_source" (ref _GtkTreeView)
    clang proc     "gtk_tree_view_unset_rows_drag_dest" (ref _GtkTreeView)
    clang proc     "gtk_tree_view_set_drag_dest_row"   (ref _GtkTreeView,ref _GtkTreePath,i32)
    clang proc     "gtk_tree_view_get_drag_dest_row"   (ref _GtkTreeView,ref ref _GtkTreePath,ref i32)
    clang function "gtk_tree_view_get_dest_row_at_pos" (ref _GtkTreeView,i32,i32,ref ref _GtkTreePath,ref i32)i32
    clang function "gtk_tree_view_create_row_drag_icon" (ref _GtkTreeView,ref _GtkTreePath)ref _cairo_surface
    clang proc     "gtk_tree_view_set_enable_search"   (ref _GtkTreeView,i32)
    clang function "gtk_tree_view_get_enable_search"   (ref _GtkTreeView)i32
    clang function "gtk_tree_view_get_search_column"   (ref _GtkTreeView)i32
    clang proc     "gtk_tree_view_set_search_column"   (ref _GtkTreeView,i32)
    clang function "gtk_tree_view_get_search_equal_func" (ref _GtkTreeView)ref clang function(ref _GtkTreeModel,i32,ref i8,ref _GtkTreeIter,ref void)i32
    clang proc     "gtk_tree_view_set_search_equal_func" (ref _GtkTreeView,ref clang function(ref _GtkTreeModel,i32,ref i8,ref _GtkTreeIter,ref void)i32,ref void,ref clang proc(ref void))
    clang function "gtk_tree_view_get_search_entry"    (ref _GtkTreeView)ref _GtkEntry
    clang proc     "gtk_tree_view_set_search_entry"    (ref _GtkTreeView,ref _GtkEntry)
    clang function "gtk_tree_view_get_search_position_func" (ref _GtkTreeView)ref clang proc(ref _GtkTreeView,ref _GtkWidget,ref void)
    clang proc     "gtk_tree_view_set_search_position_func" (ref _GtkTreeView,ref clang proc(ref _GtkTreeView,ref _GtkWidget,ref void),ref void,ref clang proc(ref void))
    clang proc     "gtk_tree_view_convert_widget_to_tree_coords" (ref _GtkTreeView,i32,i32,ref i32,ref i32)
    clang proc     "gtk_tree_view_convert_tree_to_widget_coords" (ref _GtkTreeView,i32,i32,ref i32,ref i32)
    clang proc     "gtk_tree_view_convert_widget_to_bin_window_coords" (ref _GtkTreeView,i32,i32,ref i32,ref i32)
    clang proc     "gtk_tree_view_convert_bin_window_to_widget_coords" (ref _GtkTreeView,i32,i32,ref i32,ref i32)
    clang proc     "gtk_tree_view_convert_tree_to_bin_window_coords" (ref _GtkTreeView,i32,i32,ref i32,ref i32)
    clang proc     "gtk_tree_view_convert_bin_window_to_tree_coords" (ref _GtkTreeView,i32,i32,ref i32,ref i32)
    clang proc     "gtk_tree_view_set_destroy_count_func" (ref _GtkTreeView,ref clang proc(ref _GtkTreeView,ref _GtkTreePath,i32,ref void),ref void,ref clang proc(ref void))
    clang proc     "gtk_tree_view_set_fixed_height_mode" (ref _GtkTreeView,i32)
    clang function "gtk_tree_view_get_fixed_height_mode" (ref _GtkTreeView)i32
    clang proc     "gtk_tree_view_set_hover_selection" (ref _GtkTreeView,i32)
    clang function "gtk_tree_view_get_hover_selection" (ref _GtkTreeView)i32
    clang proc     "gtk_tree_view_set_hover_expand"    (ref _GtkTreeView,i32)
    clang function "gtk_tree_view_get_hover_expand"    (ref _GtkTreeView)i32
    clang proc     "gtk_tree_view_set_rubber_banding"  (ref _GtkTreeView,i32)
    clang function "gtk_tree_view_get_rubber_banding"  (ref _GtkTreeView)i32
    clang function "gtk_tree_view_is_rubber_banding_active" (ref _GtkTreeView)i32
    clang function "gtk_tree_view_get_row_separator_func" (ref _GtkTreeView)ref clang function(ref _GtkTreeModel,ref _GtkTreeIter,ref void)i32
    clang proc     "gtk_tree_view_set_row_separator_func" (ref _GtkTreeView,ref clang function(ref _GtkTreeModel,ref _GtkTreeIter,ref void)i32,ref void,ref clang proc(ref void))
    clang function "gtk_tree_view_get_grid_lines"      (ref _GtkTreeView)i32
    clang proc     "gtk_tree_view_set_grid_lines"      (ref _GtkTreeView,i32)
    clang function "gtk_tree_view_get_enable_tree_lines" (ref _GtkTreeView)i32
    clang proc     "gtk_tree_view_set_enable_tree_lines" (ref _GtkTreeView,i32)
    clang proc     "gtk_tree_view_set_show_expanders"  (ref _GtkTreeView,i32)
    clang function "gtk_tree_view_get_show_expanders"  (ref _GtkTreeView)i32
    clang proc     "gtk_tree_view_set_level_indentation" (ref _GtkTreeView,i32)
    clang function "gtk_tree_view_get_level_indentation" (ref _GtkTreeView)i32
    clang proc     "gtk_tree_view_set_tooltip_row"     (ref _GtkTreeView,ref _GtkTooltip,ref _GtkTreePath)
    clang proc     "gtk_tree_view_set_tooltip_cell"    (ref _GtkTreeView,ref _GtkTooltip,ref _GtkTreePath,ref _GtkTreeViewColumn,ref _GtkCellRenderer)
    clang function "gtk_tree_view_get_tooltip_context" (ref _GtkTreeView,ref i32,ref i32,i32,ref ref _GtkTreeModel,ref ref _GtkTreePath,ref _GtkTreeIter)i32
    clang proc     "gtk_tree_view_set_tooltip_column"  (ref _GtkTreeView,i32)
    clang function "gtk_tree_view_get_tooltip_column"  (ref _GtkTreeView)i32
    record _GtkComboBox =
        var _GtkBin parent_instance
        var ref _GtkComboBoxPrivate priv
    end

    record _GtkComboBoxClass =
        var _GtkBinClass parent_class
        var ref clang proc(ref _GtkComboBox) changed
        var ref clang function(ref _GtkComboBox,ref i8)ref i8 format_entry_text
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
    end

    record _GtkComboBoxPrivate =
        var int dummy    !empty record
    end

    clang function "gtk_combo_box_get_type"            ()u64
    clang function "gtk_combo_box_new"                 ()ref _GtkWidget
    clang function "gtk_combo_box_new_with_area"       (ref _GtkCellArea)ref _GtkWidget
    clang function "gtk_combo_box_new_with_area_and_entry" (ref _GtkCellArea)ref _GtkWidget
    clang function "gtk_combo_box_new_with_entry"      ()ref _GtkWidget
    clang function "gtk_combo_box_new_with_model"      (ref _GtkTreeModel)ref _GtkWidget
    clang function "gtk_combo_box_new_with_model_and_entry" (ref _GtkTreeModel)ref _GtkWidget
    clang function "gtk_combo_box_get_wrap_width"      (ref _GtkComboBox)i32
    clang proc     "gtk_combo_box_set_wrap_width"      (ref _GtkComboBox,i32)
    clang function "gtk_combo_box_get_row_span_column" (ref _GtkComboBox)i32
    clang proc     "gtk_combo_box_set_row_span_column" (ref _GtkComboBox,i32)
    clang function "gtk_combo_box_get_column_span_column" (ref _GtkComboBox)i32
    clang proc     "gtk_combo_box_set_column_span_column" (ref _GtkComboBox,i32)
    clang function "gtk_combo_box_get_add_tearoffs"    (ref _GtkComboBox)i32
    clang proc     "gtk_combo_box_set_add_tearoffs"    (ref _GtkComboBox,i32)
    clang function "gtk_combo_box_get_title"           (ref _GtkComboBox)ref i8
    clang proc     "gtk_combo_box_set_title"           (ref _GtkComboBox,ref i8)
    clang function "gtk_combo_box_get_focus_on_click"  (ref _GtkComboBox)i32
    clang proc     "gtk_combo_box_set_focus_on_click"  (ref _GtkComboBox,i32)
    clang function "gtk_combo_box_get_active"          (ref _GtkComboBox)i32
    clang proc     "gtk_combo_box_set_active"          (ref _GtkComboBox,i32)
    clang function "gtk_combo_box_get_active_iter"     (ref _GtkComboBox,ref _GtkTreeIter)i32
    clang proc     "gtk_combo_box_set_active_iter"     (ref _GtkComboBox,ref _GtkTreeIter)
    clang proc     "gtk_combo_box_set_model"           (ref _GtkComboBox,ref _GtkTreeModel)
    clang function "gtk_combo_box_get_model"           (ref _GtkComboBox)ref _GtkTreeModel
    clang function "gtk_combo_box_get_row_separator_func" (ref _GtkComboBox)ref clang function(ref _GtkTreeModel,ref _GtkTreeIter,ref void)i32
    clang proc     "gtk_combo_box_set_row_separator_func" (ref _GtkComboBox,ref clang function(ref _GtkTreeModel,ref _GtkTreeIter,ref void)i32,ref void,ref clang proc(ref void))
    clang proc     "gtk_combo_box_set_button_sensitivity" (ref _GtkComboBox,i32)
    clang function "gtk_combo_box_get_button_sensitivity" (ref _GtkComboBox)i32
    clang function "gtk_combo_box_get_has_entry"       (ref _GtkComboBox)i32
    clang proc     "gtk_combo_box_set_entry_text_column" (ref _GtkComboBox,i32)
    clang function "gtk_combo_box_get_entry_text_column" (ref _GtkComboBox)i32
    clang proc     "gtk_combo_box_set_popup_fixed_width" (ref _GtkComboBox,i32)
    clang function "gtk_combo_box_get_popup_fixed_width" (ref _GtkComboBox)i32
    clang proc     "gtk_combo_box_popup"               (ref _GtkComboBox)
    clang proc     "gtk_combo_box_popup_for_device"    (ref _GtkComboBox,ref _GdkDevice)
    clang proc     "gtk_combo_box_popdown"             (ref _GtkComboBox)
    clang function "gtk_combo_box_get_popup_accessible" (ref _GtkComboBox)ref _AtkObject
    clang function "gtk_combo_box_get_id_column"       (ref _GtkComboBox)i32
    clang proc     "gtk_combo_box_set_id_column"       (ref _GtkComboBox,i32)
    clang function "gtk_combo_box_get_active_id"       (ref _GtkComboBox)ref i8
    clang function "gtk_combo_box_set_active_id"       (ref _GtkComboBox,ref i8)i32
    record _GtkAppChooserButton =
        var _GtkComboBox parent
        var ref _GtkAppChooserButtonPrivate priv
    end

    record _GtkAppChooserButtonClass =
        var _GtkComboBoxClass parent_class
        var ref clang proc(ref _GtkAppChooserButton,ref i8) custom_item_activated
        var [16]ref void padding
    end

    record _GtkAppChooserButtonPrivate =
        var int dummy    !empty record
    end

    clang function "gtk_app_chooser_button_get_type"   ()u64
    clang function "gtk_app_chooser_button_new"        (ref i8)ref _GtkWidget
    clang proc     "gtk_app_chooser_button_append_separator" (ref _GtkAppChooserButton)
    clang proc     "gtk_app_chooser_button_append_custom_item" (ref _GtkAppChooserButton,ref i8,ref i8,ref _GIcon)
    clang proc     "gtk_app_chooser_button_set_active_custom_item" (ref _GtkAppChooserButton,ref i8)
    clang proc     "gtk_app_chooser_button_set_show_dialog_item" (ref _GtkAppChooserButton,i32)
    clang function "gtk_app_chooser_button_get_show_dialog_item" (ref _GtkAppChooserButton)i32
    clang proc     "gtk_app_chooser_button_set_heading" (ref _GtkAppChooserButton,ref i8)
    clang function "gtk_app_chooser_button_get_heading" (ref _GtkAppChooserButton)ref i8
    clang proc     "gtk_app_chooser_button_set_show_default_item" (ref _GtkAppChooserButton,i32)
    clang function "gtk_app_chooser_button_get_show_default_item" (ref _GtkAppChooserButton)i32
    record _GtkApplicationWindowPrivate =
        var int dummy    !empty record
    end

    record _GtkApplicationWindowClass =
        var _GtkWindowClass parent_class
        var [14]ref void padding
    end

    record _GtkApplicationWindow =
        var _GtkWindow parent_instance
        var ref _GtkApplicationWindowPrivate priv
    end

    clang function "gtk_application_window_get_type"   ()u64
    clang function "gtk_application_window_new"        (ref _GtkApplication)ref _GtkWidget
    clang proc     "gtk_application_window_set_show_menubar" (ref _GtkApplicationWindow,i32)
    clang function "gtk_application_window_get_show_menubar" (ref _GtkApplicationWindow)i32
    clang function "gtk_application_window_get_id"     (ref _GtkApplicationWindow)u32
    record _GtkArrow =
        var _GtkMisc misc
        var ref _GtkArrowPrivate priv
    end

    record _GtkArrowPrivate =
        var int dummy    !empty record
    end

    record _GtkArrowClass =
        var _GtkMiscClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_arrow_get_type"                ()u64
    clang function "gtk_arrow_new"                     (i32,i32)ref _GtkWidget
    clang proc     "gtk_arrow_set"                     (ref _GtkArrow,i32,i32)
    record _GtkFrame =
        var _GtkBin bin
        var ref _GtkFramePrivate priv
    end

    record _GtkFramePrivate =
        var int dummy    !empty record
    end

    record _GtkFrameClass =
        var _GtkBinClass parent_class
        var ref clang proc(ref _GtkFrame,ref _cairo_rectangle_int) compute_child_allocation
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_frame_get_type"                ()u64
    clang function "gtk_frame_new"                     (ref i8)ref _GtkWidget
    clang proc     "gtk_frame_set_label"               (ref _GtkFrame,ref i8)
    clang function "gtk_frame_get_label"               (ref _GtkFrame)ref i8
    clang proc     "gtk_frame_set_label_widget"        (ref _GtkFrame,ref _GtkWidget)
    clang function "gtk_frame_get_label_widget"        (ref _GtkFrame)ref _GtkWidget
    clang proc     "gtk_frame_set_label_align"         (ref _GtkFrame,r32,r32)
    clang proc     "gtk_frame_get_label_align"         (ref _GtkFrame,ref r32,ref r32)
    clang proc     "gtk_frame_set_shadow_type"         (ref _GtkFrame,i32)
    clang function "gtk_frame_get_shadow_type"         (ref _GtkFrame)i32
    record _GtkAspectFrame =
        var _GtkFrame frame
        var ref _GtkAspectFramePrivate priv
    end

    record _GtkAspectFramePrivate =
        var int dummy    !empty record
    end

    record _GtkAspectFrameClass =
        var _GtkFrameClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_aspect_frame_get_type"         ()u64
    clang function "gtk_aspect_frame_new"              (ref i8,r32,r32,r32,i32)ref _GtkWidget
    clang proc     "gtk_aspect_frame_set"              (ref _GtkAspectFrame,r32,r32,r32,i32)
    const GTK_ASSISTANT_PAGE_CONTENT         = 0
    const GTK_ASSISTANT_PAGE_INTRO           = 1
    const GTK_ASSISTANT_PAGE_CONFIRM         = 2
    const GTK_ASSISTANT_PAGE_SUMMARY         = 3
    const GTK_ASSISTANT_PAGE_PROGRESS        = 4
    const GTK_ASSISTANT_PAGE_CUSTOM          = 5
    record _GtkAssistant =
        var _GtkWindow parent
        var ref _GtkAssistantPrivate priv
    end

    record _GtkAssistantPrivate =
        var int dummy    !empty record
    end

    record _GtkAssistantClass =
        var _GtkWindowClass parent_class
        var ref clang proc(ref _GtkAssistant,ref _GtkWidget) prepare
        var ref clang proc(ref _GtkAssistant) apply
        var ref clang proc(ref _GtkAssistant) close
        var ref clang proc(ref _GtkAssistant) cancel
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
        var ref clang proc() _gtk_reserved5
    end

    clang function "gtk_assistant_get_type"            ()u64
    clang function "gtk_assistant_new"                 ()ref _GtkWidget
    clang proc     "gtk_assistant_next_page"           (ref _GtkAssistant)
    clang proc     "gtk_assistant_previous_page"       (ref _GtkAssistant)
    clang function "gtk_assistant_get_current_page"    (ref _GtkAssistant)i32
    clang proc     "gtk_assistant_set_current_page"    (ref _GtkAssistant,i32)
    clang function "gtk_assistant_get_n_pages"         (ref _GtkAssistant)i32
    clang function "gtk_assistant_get_nth_page"        (ref _GtkAssistant,i32)ref _GtkWidget
    clang function "gtk_assistant_prepend_page"        (ref _GtkAssistant,ref _GtkWidget)i32
    clang function "gtk_assistant_append_page"         (ref _GtkAssistant,ref _GtkWidget)i32
    clang function "gtk_assistant_insert_page"         (ref _GtkAssistant,ref _GtkWidget,i32)i32
    clang proc     "gtk_assistant_remove_page"         (ref _GtkAssistant,i32)
    clang proc     "gtk_assistant_set_forward_page_func" (ref _GtkAssistant,ref clang function(i32,ref void)i32,ref void,ref clang proc(ref void))
    clang proc     "gtk_assistant_set_page_type"       (ref _GtkAssistant,ref _GtkWidget,i32)
    clang function "gtk_assistant_get_page_type"       (ref _GtkAssistant,ref _GtkWidget)i32
    clang proc     "gtk_assistant_set_page_title"      (ref _GtkAssistant,ref _GtkWidget,ref i8)
    clang function "gtk_assistant_get_page_title"      (ref _GtkAssistant,ref _GtkWidget)ref i8
    clang proc     "gtk_assistant_set_page_header_image" (ref _GtkAssistant,ref _GtkWidget,ref _GdkPixbuf)
    clang function "gtk_assistant_get_page_header_image" (ref _GtkAssistant,ref _GtkWidget)ref _GdkPixbuf
    clang proc     "gtk_assistant_set_page_side_image" (ref _GtkAssistant,ref _GtkWidget,ref _GdkPixbuf)
    clang function "gtk_assistant_get_page_side_image" (ref _GtkAssistant,ref _GtkWidget)ref _GdkPixbuf
    clang proc     "gtk_assistant_set_page_complete"   (ref _GtkAssistant,ref _GtkWidget,i32)
    clang function "gtk_assistant_get_page_complete"   (ref _GtkAssistant,ref _GtkWidget)i32
    clang proc     "gtk_assistant_add_action_widget"   (ref _GtkAssistant,ref _GtkWidget)
    clang proc     "gtk_assistant_remove_action_widget" (ref _GtkAssistant,ref _GtkWidget)
    clang proc     "gtk_assistant_update_buttons_state" (ref _GtkAssistant)
    clang proc     "gtk_assistant_commit"              (ref _GtkAssistant)
    record _GtkButtonBox =
        var _GtkBox box
        var ref _GtkButtonBoxPrivate priv
    end

    record _GtkButtonBoxPrivate =
        var int dummy    !empty record
    end

    record _GtkButtonBoxClass =
        var _GtkBoxClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_button_box_get_type"           ()u64
    clang function "gtk_button_box_new"                (i32)ref _GtkWidget
    clang function "gtk_button_box_get_layout"         (ref _GtkButtonBox)i32
    clang proc     "gtk_button_box_set_layout"         (ref _GtkButtonBox,i32)
    clang function "gtk_button_box_get_child_secondary" (ref _GtkButtonBox,ref _GtkWidget)i32
    clang proc     "gtk_button_box_set_child_secondary" (ref _GtkButtonBox,ref _GtkWidget,i32)
    clang function "gtk_button_box_get_child_non_homogeneous" (ref _GtkButtonBox,ref _GtkWidget)i32
    clang proc     "gtk_button_box_set_child_non_homogeneous" (ref _GtkButtonBox,ref _GtkWidget,i32)
    record _GtkBindingSet =
        var ref i8 set_name
        var i32 priority
        var ref _GSList widget_path_pspecs
        var ref _GSList widget_class_pspecs
        var ref _GSList class_branch_pspecs
        var ref _GtkBindingEntry entries
        var ref _GtkBindingEntry current
        var u32 parsed
    end

    record _GtkBindingEntry =
        var u32 keyval
        var i32 modifiers
        var ref _GtkBindingSet binding_set
        var u32 destroyed
        var u32 in_emission
        var u32 marks_unbound
        var ref _GtkBindingEntry set_next
        var ref _GtkBindingEntry hash_next
        var ref _GtkBindingSignal signals
    end

    record _GtkBindingSignal =
        var ref _GtkBindingSignal next$
        var ref i8 signal_name
        var u32 n_args
        var ref _GtkBindingArg args
    end

    record _GtkBindingArg =
        var u64 arg_type
        var $T18 d
    end

    record $T18 =
        var i32 long_data
        var r64 double_data
        var ref i8 string_data
    end

    clang function "gtk_binding_set_new"               (ref i8)ref _GtkBindingSet
    clang function "gtk_binding_set_by_class"          (ref void)ref _GtkBindingSet
    clang function "gtk_binding_set_find"              (ref i8)ref _GtkBindingSet
    clang function "gtk_bindings_activate"             (ref _GObject,u32,i32)i32
    clang function "gtk_bindings_activate_event"       (ref _GObject,ref _GdkEventKey)i32
    clang function "gtk_binding_set_activate"          (ref _GtkBindingSet,u32,i32,ref _GObject)i32
    clang proc     "gtk_binding_entry_skip"            (ref _GtkBindingSet,u32,i32)
    clang proc     "gtk_binding_entry_add_signal"      (ref _GtkBindingSet,u32,i32,ref i8,u32,...)
    clang proc     "gtk_binding_entry_add_signall"     (ref _GtkBindingSet,u32,i32,ref i8,ref _GSList)
    clang function "gtk_binding_entry_add_signal_from_string" (ref _GtkBindingSet,ref i8)i32
    clang proc     "gtk_binding_entry_remove"          (ref _GtkBindingSet,u32,i32)
    clang proc     "gtk_binding_set_add_path"          (ref _GtkBindingSet,i32,ref i8,i32)
    record _GtkBuilder =
        var _GObject parent_instance
        var ref _GtkBuilderPrivate priv
    end

    record _GtkBuilderClass =
        var _GObjectClass parent_class
        var ref clang function(ref _GtkBuilder,ref i8)u64 get_type_from_name
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
        var ref clang proc() _gtk_reserved5
        var ref clang proc() _gtk_reserved6
        var ref clang proc() _gtk_reserved7
        var ref clang proc() _gtk_reserved8
    end

    record _GtkBuilderPrivate =
        var int dummy    !empty record
    end

    const GTK_BUILDER_ERROR_INVALID_TYPE_FUNCTION = 0
    const GTK_BUILDER_ERROR_UNHANDLED_TAG    = 1
    const GTK_BUILDER_ERROR_MISSING_ATTRIBUTE = 2
    const GTK_BUILDER_ERROR_INVALID_ATTRIBUTE = 3
    const GTK_BUILDER_ERROR_INVALID_TAG      = 4
    const GTK_BUILDER_ERROR_MISSING_PROPERTY_VALUE = 5
    const GTK_BUILDER_ERROR_INVALID_VALUE    = 6
    const GTK_BUILDER_ERROR_VERSION_MISMATCH = 7
    const GTK_BUILDER_ERROR_DUPLICATE_ID     = 8
    clang function "gtk_builder_error_quark"           ()u32
    clang function "gtk_builder_get_type"              ()u64
    clang function "gtk_builder_new"                   ()ref _GtkBuilder
    clang function "gtk_builder_add_from_file"         (ref _GtkBuilder,ref i8,ref ref _GError)u32
    clang function "gtk_builder_add_from_resource"     (ref _GtkBuilder,ref i8,ref ref _GError)u32
    clang function "gtk_builder_add_from_string"       (ref _GtkBuilder,ref i8,u64,ref ref _GError)u32
    clang function "gtk_builder_add_objects_from_file" (ref _GtkBuilder,ref i8,ref ref i8,ref ref _GError)u32
    clang function "gtk_builder_add_objects_from_resource" (ref _GtkBuilder,ref i8,ref ref i8,ref ref _GError)u32
    clang function "gtk_builder_add_objects_from_string" (ref _GtkBuilder,ref i8,u64,ref ref i8,ref ref _GError)u32
    clang function "gtk_builder_get_object"            (ref _GtkBuilder,ref i8)ref _GObject
    clang function "gtk_builder_get_objects"           (ref _GtkBuilder)ref _GSList
    clang proc     "gtk_builder_connect_signals"       (ref _GtkBuilder,ref void)
    clang proc     "gtk_builder_connect_signals_full"  (ref _GtkBuilder,ref clang proc(ref _GtkBuilder,ref _GObject,ref i8,ref i8,ref _GObject,i32,ref void),ref void)
    clang proc     "gtk_builder_set_translation_domain" (ref _GtkBuilder,ref i8)
    clang function "gtk_builder_get_translation_domain" (ref _GtkBuilder)ref i8
    clang function "gtk_builder_get_type_from_name"    (ref _GtkBuilder,ref i8)u64
    clang function "gtk_builder_value_from_string"     (ref _GtkBuilder,ref _GParamSpec,ref i8,ref _GValue,ref ref _GError)i32
    clang function "gtk_builder_value_from_string_type" (ref _GtkBuilder,u64,ref i8,ref _GValue,ref ref _GError)i32
    record _GtkBuildable =
        var int dummy    !empty record
    end

    record _GtkBuildableIface =
        var _GTypeInterface g_iface
        var ref clang proc(ref _GtkBuildable,ref i8) set_name
        var ref clang function(ref _GtkBuildable)ref i8 get_name
        var ref clang proc(ref _GtkBuildable,ref _GtkBuilder,ref _GObject,ref i8) add_child
        var ref clang proc(ref _GtkBuildable,ref _GtkBuilder,ref i8,ref _GValue) set_buildable_property
        var ref clang function(ref _GtkBuildable,ref _GtkBuilder,ref i8)ref _GObject construct_child
        var ref clang function(ref _GtkBuildable,ref _GtkBuilder,ref _GObject,ref i8,ref _GMarkupParser,ref ref void)i32 custom_tag_start
        var ref clang proc(ref _GtkBuildable,ref _GtkBuilder,ref _GObject,ref i8,ref ref void) custom_tag_end
        var ref clang proc(ref _GtkBuildable,ref _GtkBuilder,ref _GObject,ref i8,ref void) custom_finished
        var ref clang proc(ref _GtkBuildable,ref _GtkBuilder) parser_finished
        var ref clang function(ref _GtkBuildable,ref _GtkBuilder,ref i8)ref _GObject get_internal_child
    end

    clang function "gtk_buildable_get_type"            ()u64
    clang proc     "gtk_buildable_set_name"            (ref _GtkBuildable,ref i8)
    clang function "gtk_buildable_get_name"            (ref _GtkBuildable)ref i8
    clang proc     "gtk_buildable_add_child"           (ref _GtkBuildable,ref _GtkBuilder,ref _GObject,ref i8)
    clang proc     "gtk_buildable_set_buildable_property" (ref _GtkBuildable,ref _GtkBuilder,ref i8,ref _GValue)
    clang function "gtk_buildable_construct_child"     (ref _GtkBuildable,ref _GtkBuilder,ref i8)ref _GObject
    clang function "gtk_buildable_custom_tag_start"    (ref _GtkBuildable,ref _GtkBuilder,ref _GObject,ref i8,ref _GMarkupParser,ref ref void)i32
    clang proc     "gtk_buildable_custom_tag_end"      (ref _GtkBuildable,ref _GtkBuilder,ref _GObject,ref i8,ref ref void)
    clang proc     "gtk_buildable_custom_finished"     (ref _GtkBuildable,ref _GtkBuilder,ref _GObject,ref i8,ref void)
    clang proc     "gtk_buildable_parser_finished"     (ref _GtkBuildable,ref _GtkBuilder)
    clang function "gtk_buildable_get_internal_child"  (ref _GtkBuildable,ref _GtkBuilder,ref i8)ref _GObject
    record _GtkButton =
        var _GtkBin bin
        var ref _GtkButtonPrivate priv
    end

    record _GtkButtonPrivate =
        var int dummy    !empty record
    end

    record _GtkButtonClass =
        var _GtkBinClass parent_class
        var ref clang proc(ref _GtkButton) pressed
        var ref clang proc(ref _GtkButton) released
        var ref clang proc(ref _GtkButton) clicked
        var ref clang proc(ref _GtkButton) enter
        var ref clang proc(ref _GtkButton) leave
        var ref clang proc(ref _GtkButton) activate
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_button_get_type"               ()u64
    clang function "gtk_button_new"                    ()ref _GtkWidget
    clang function "gtk_button_new_with_label"         (ref i8)ref _GtkWidget
    clang function "gtk_button_new_from_stock"         (ref i8)ref _GtkWidget
    clang function "gtk_button_new_with_mnemonic"      (ref i8)ref _GtkWidget
    clang proc     "gtk_button_clicked"                (ref _GtkButton)
    clang proc     "gtk_button_pressed"                (ref _GtkButton)
    clang proc     "gtk_button_released"               (ref _GtkButton)
    clang proc     "gtk_button_enter"                  (ref _GtkButton)
    clang proc     "gtk_button_leave"                  (ref _GtkButton)
    clang proc     "gtk_button_set_relief"             (ref _GtkButton,i32)
    clang function "gtk_button_get_relief"             (ref _GtkButton)i32
    clang proc     "gtk_button_set_label"              (ref _GtkButton,ref i8)
    clang function "gtk_button_get_label"              (ref _GtkButton)ref i8
    clang proc     "gtk_button_set_use_underline"      (ref _GtkButton,i32)
    clang function "gtk_button_get_use_underline"      (ref _GtkButton)i32
    clang proc     "gtk_button_set_use_stock"          (ref _GtkButton,i32)
    clang function "gtk_button_get_use_stock"          (ref _GtkButton)i32
    clang proc     "gtk_button_set_focus_on_click"     (ref _GtkButton,i32)
    clang function "gtk_button_get_focus_on_click"     (ref _GtkButton)i32
    clang proc     "gtk_button_set_alignment"          (ref _GtkButton,r32,r32)
    clang proc     "gtk_button_get_alignment"          (ref _GtkButton,ref r32,ref r32)
    clang proc     "gtk_button_set_image"              (ref _GtkButton,ref _GtkWidget)
    clang function "gtk_button_get_image"              (ref _GtkButton)ref _GtkWidget
    clang proc     "gtk_button_set_image_position"     (ref _GtkButton,i32)
    clang function "gtk_button_get_image_position"     (ref _GtkButton)i32
    clang proc     "gtk_button_set_always_show_image"  (ref _GtkButton,i32)
    clang function "gtk_button_get_always_show_image"  (ref _GtkButton)i32
    clang function "gtk_button_get_event_window"       (ref _GtkButton)ref _GdkWindow
    record _GtkCalendar =
        var _GtkWidget widget
        var ref _GtkCalendarPrivate priv
    end

    record _GtkCalendarClass =
        var _GtkWidgetClass parent_class
        var ref clang proc(ref _GtkCalendar) month_changed
        var ref clang proc(ref _GtkCalendar) day_selected
        var ref clang proc(ref _GtkCalendar) day_selected_double_click
        var ref clang proc(ref _GtkCalendar) prev_month
        var ref clang proc(ref _GtkCalendar) next_month
        var ref clang proc(ref _GtkCalendar) prev_year
        var ref clang proc(ref _GtkCalendar) next_year
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    record _GtkCalendarPrivate =
        var int dummy    !empty record
    end

    const GTK_CALENDAR_SHOW_HEADING          = 1
    const GTK_CALENDAR_SHOW_DAY_NAMES        = 2
    const GTK_CALENDAR_NO_MONTH_CHANGE       = 4
    const GTK_CALENDAR_SHOW_WEEK_NUMBERS     = 8
    const GTK_CALENDAR_SHOW_DETAILS          = 32
    clang function "gtk_calendar_get_type"             ()u64
    clang function "gtk_calendar_new"                  ()ref _GtkWidget
    clang proc     "gtk_calendar_select_month"         (ref _GtkCalendar,u32,u32)
    clang proc     "gtk_calendar_select_day"           (ref _GtkCalendar,u32)
    clang proc     "gtk_calendar_mark_day"             (ref _GtkCalendar,u32)
    clang proc     "gtk_calendar_unmark_day"           (ref _GtkCalendar,u32)
    clang proc     "gtk_calendar_clear_marks"          (ref _GtkCalendar)
    clang proc     "gtk_calendar_set_display_options"  (ref _GtkCalendar,i32)
    clang function "gtk_calendar_get_display_options"  (ref _GtkCalendar)i32
    clang proc     "gtk_calendar_get_date"             (ref _GtkCalendar,ref u32,ref u32,ref u32)
    clang proc     "gtk_calendar_set_detail_func"      (ref _GtkCalendar,ref clang function(ref _GtkCalendar,u32,u32,u32,ref void)ref i8,ref void,ref clang proc(ref void))
    clang proc     "gtk_calendar_set_detail_width_chars" (ref _GtkCalendar,i32)
    clang proc     "gtk_calendar_set_detail_height_rows" (ref _GtkCalendar,i32)
    clang function "gtk_calendar_get_detail_width_chars" (ref _GtkCalendar)i32
    clang function "gtk_calendar_get_detail_height_rows" (ref _GtkCalendar)i32
    clang function "gtk_calendar_get_day_is_marked"    (ref _GtkCalendar,u32)i32
    record _GtkCellAreaBox =
        var _GtkCellArea parent_instance
        var ref _GtkCellAreaBoxPrivate priv
    end

    record _GtkCellAreaBoxClass =
        var _GtkCellAreaClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    record _GtkCellAreaBoxPrivate =
        var int dummy    !empty record
    end

    clang function "gtk_cell_area_box_get_type"        ()u64
    clang function "gtk_cell_area_box_new"             ()ref _GtkCellArea
    clang proc     "gtk_cell_area_box_pack_start"      (ref _GtkCellAreaBox,ref _GtkCellRenderer,i32,i32,i32)
    clang proc     "gtk_cell_area_box_pack_end"        (ref _GtkCellAreaBox,ref _GtkCellRenderer,i32,i32,i32)
    clang function "gtk_cell_area_box_get_spacing"     (ref _GtkCellAreaBox)i32
    clang proc     "gtk_cell_area_box_set_spacing"     (ref _GtkCellAreaBox,i32)
    clang function "_gtk_cell_area_box_group_visible"  (ref _GtkCellAreaBox,i32)i32
    record _GtkCellAreaContextPrivate =
        var int dummy    !empty record
    end

    record _GtkCellAreaContextClass =
        var _GObjectClass parent_class
        var ref clang proc(ref _GtkCellAreaContext,i32,i32) allocate
        var ref clang proc(ref _GtkCellAreaContext) reset
        var ref clang proc(ref _GtkCellAreaContext,i32,ref i32,ref i32) get_preferred_height_for_width
        var ref clang proc(ref _GtkCellAreaContext,i32,ref i32,ref i32) get_preferred_width_for_height
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
        var ref clang proc() _gtk_reserved5
        var ref clang proc() _gtk_reserved6
    end

    clang function "gtk_cell_area_context_get_type"    ()u64
    clang function "gtk_cell_area_context_get_area"    (ref _GtkCellAreaContext)ref _GtkCellArea
    clang proc     "gtk_cell_area_context_allocate"    (ref _GtkCellAreaContext,i32,i32)
    clang proc     "gtk_cell_area_context_reset"       (ref _GtkCellAreaContext)
    clang proc     "gtk_cell_area_context_get_preferred_width" (ref _GtkCellAreaContext,ref i32,ref i32)
    clang proc     "gtk_cell_area_context_get_preferred_height" (ref _GtkCellAreaContext,ref i32,ref i32)
    clang proc     "gtk_cell_area_context_get_preferred_height_for_width" (ref _GtkCellAreaContext,i32,ref i32,ref i32)
    clang proc     "gtk_cell_area_context_get_preferred_width_for_height" (ref _GtkCellAreaContext,i32,ref i32,ref i32)
    clang proc     "gtk_cell_area_context_get_allocation" (ref _GtkCellAreaContext,ref i32,ref i32)
    clang proc     "gtk_cell_area_context_push_preferred_width" (ref _GtkCellAreaContext,i32,i32)
    clang proc     "gtk_cell_area_context_push_preferred_height" (ref _GtkCellAreaContext,i32,i32)
    record _GtkCellLayout =
        var int dummy    !empty record
    end

    record _GtkCellLayoutIface =
        var _GTypeInterface g_iface
        var ref clang proc(ref _GtkCellLayout,ref _GtkCellRenderer,i32) pack_start
        var ref clang proc(ref _GtkCellLayout,ref _GtkCellRenderer,i32) pack_end
        var ref clang proc(ref _GtkCellLayout) clear
        var ref clang proc(ref _GtkCellLayout,ref _GtkCellRenderer,ref i8,i32) add_attribute
        var ref clang proc(ref _GtkCellLayout,ref _GtkCellRenderer,ref clang proc(ref _GtkCellLayout,ref _GtkCellRenderer,ref _GtkTreeModel,ref _GtkTreeIter,ref void),ref void,ref clang proc(ref void)) set_cell_data_func
        var ref clang proc(ref _GtkCellLayout,ref _GtkCellRenderer) clear_attributes
        var ref clang proc(ref _GtkCellLayout,ref _GtkCellRenderer,i32) reorder
        var ref clang function(ref _GtkCellLayout)ref _GList get_cells
        var ref clang function(ref _GtkCellLayout)ref _GtkCellArea get_area
    end

    clang function "gtk_cell_layout_get_type"          ()u64
    clang proc     "gtk_cell_layout_pack_start"        (ref _GtkCellLayout,ref _GtkCellRenderer,i32)
    clang proc     "gtk_cell_layout_pack_end"          (ref _GtkCellLayout,ref _GtkCellRenderer,i32)
    clang function "gtk_cell_layout_get_cells"         (ref _GtkCellLayout)ref _GList
    clang proc     "gtk_cell_layout_clear"             (ref _GtkCellLayout)
    clang proc     "gtk_cell_layout_set_attributes"    (ref _GtkCellLayout,ref _GtkCellRenderer,...)
    clang proc     "gtk_cell_layout_add_attribute"     (ref _GtkCellLayout,ref _GtkCellRenderer,ref i8,i32)
    clang proc     "gtk_cell_layout_set_cell_data_func" (ref _GtkCellLayout,ref _GtkCellRenderer,ref clang proc(ref _GtkCellLayout,ref _GtkCellRenderer,ref _GtkTreeModel,ref _GtkTreeIter,ref void),ref void,ref clang proc(ref void))
    clang proc     "gtk_cell_layout_clear_attributes"  (ref _GtkCellLayout,ref _GtkCellRenderer)
    clang proc     "gtk_cell_layout_reorder"           (ref _GtkCellLayout,ref _GtkCellRenderer,i32)
    clang function "gtk_cell_layout_get_area"          (ref _GtkCellLayout)ref _GtkCellArea
    clang function "_gtk_cell_layout_buildable_custom_tag_start" (ref _GtkBuildable,ref _GtkBuilder,ref _GObject,ref i8,ref _GMarkupParser,ref ref void)i32
    clang function "_gtk_cell_layout_buildable_custom_tag_end" (ref _GtkBuildable,ref _GtkBuilder,ref _GObject,ref i8,ref ref void)i32
    clang proc     "_gtk_cell_layout_buildable_add_child" (ref _GtkBuildable,ref _GtkBuilder,ref _GObject,ref i8)
    record _GtkCellRendererText =
        var _GtkCellRenderer parent
        var ref _GtkCellRendererTextPrivate priv
    end

    record _GtkCellRendererTextPrivate =
        var int dummy    !empty record
    end

    record _GtkCellRendererTextClass =
        var _GtkCellRendererClass parent_class
        var ref clang proc(ref _GtkCellRendererText,ref i8,ref i8) edited
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_cell_renderer_text_get_type"   ()u64
    clang function "gtk_cell_renderer_text_new"        ()ref _GtkCellRenderer
    clang proc     "gtk_cell_renderer_text_set_fixed_height_from_font" (ref _GtkCellRendererText,i32)
    record _GtkCellRendererAccel =
        var _GtkCellRendererText parent
        var ref _GtkCellRendererAccelPrivate priv
    end

    record _GtkCellRendererAccelPrivate =
        var int dummy    !empty record
    end

    record _GtkCellRendererAccelClass =
        var _GtkCellRendererTextClass parent_class
        var ref clang proc(ref _GtkCellRendererAccel,ref i8,u32,i32,u32) accel_edited
        var ref clang proc(ref _GtkCellRendererAccel,ref i8) accel_cleared
        var ref clang proc() _gtk_reserved0
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    const GTK_CELL_RENDERER_ACCEL_MODE_GTK   = 0
    const GTK_CELL_RENDERER_ACCEL_MODE_OTHER = 1
    clang function "gtk_cell_renderer_accel_get_type"  ()u64
    clang function "gtk_cell_renderer_accel_new"       ()ref _GtkCellRenderer
    record _GtkCellRendererCombo =
        var _GtkCellRendererText parent
        var ref _GtkCellRendererComboPrivate priv
    end

    record _GtkCellRendererComboPrivate =
        var int dummy    !empty record
    end

    record _GtkCellRendererComboClass =
        var _GtkCellRendererTextClass parent
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_cell_renderer_combo_get_type"  ()u64
    clang function "gtk_cell_renderer_combo_new"       ()ref _GtkCellRenderer
    record _GtkCellRendererPixbuf =
        var _GtkCellRenderer parent
        var ref _GtkCellRendererPixbufPrivate priv
    end

    record _GtkCellRendererPixbufPrivate =
        var int dummy    !empty record
    end

    record _GtkCellRendererPixbufClass =
        var _GtkCellRendererClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_cell_renderer_pixbuf_get_type" ()u64
    clang function "gtk_cell_renderer_pixbuf_new"      ()ref _GtkCellRenderer
    record _GtkCellRendererProgress =
        var _GtkCellRenderer parent_instance
        var ref _GtkCellRendererProgressPrivate priv
    end

    record _GtkCellRendererProgressClass =
        var _GtkCellRendererClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    record _GtkCellRendererProgressPrivate =
        var int dummy    !empty record
    end

    clang function "gtk_cell_renderer_progress_get_type" ()u64
    clang function "gtk_cell_renderer_progress_new"    ()ref _GtkCellRenderer
    record _GtkCellRendererSpin =
        var _GtkCellRendererText parent
        var ref _GtkCellRendererSpinPrivate priv
    end

    record _GtkCellRendererSpinClass =
        var _GtkCellRendererTextClass parent
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    record _GtkCellRendererSpinPrivate =
        var int dummy    !empty record
    end

    clang function "gtk_cell_renderer_spin_get_type"   ()u64
    clang function "gtk_cell_renderer_spin_new"        ()ref _GtkCellRenderer
    record _GtkCellRendererSpinner =
        var _GtkCellRenderer parent
        var ref _GtkCellRendererSpinnerPrivate priv
    end

    record _GtkCellRendererSpinnerClass =
        var _GtkCellRendererClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    record _GtkCellRendererSpinnerPrivate =
        var int dummy    !empty record
    end

    clang function "gtk_cell_renderer_spinner_get_type" ()u64
    clang function "gtk_cell_renderer_spinner_new"     ()ref _GtkCellRenderer
    record _GtkCellRendererToggle =
        var _GtkCellRenderer parent
        var ref _GtkCellRendererTogglePrivate priv
    end

    record _GtkCellRendererTogglePrivate =
        var int dummy    !empty record
    end

    record _GtkCellRendererToggleClass =
        var _GtkCellRendererClass parent_class
        var ref clang proc(ref _GtkCellRendererToggle,ref i8) toggled
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_cell_renderer_toggle_get_type" ()u64
    clang function "gtk_cell_renderer_toggle_new"      ()ref _GtkCellRenderer
    clang function "gtk_cell_renderer_toggle_get_radio" (ref _GtkCellRendererToggle)i32
    clang proc     "gtk_cell_renderer_toggle_set_radio" (ref _GtkCellRendererToggle,i32)
    clang function "gtk_cell_renderer_toggle_get_active" (ref _GtkCellRendererToggle)i32
    clang proc     "gtk_cell_renderer_toggle_set_active" (ref _GtkCellRendererToggle,i32)
    clang function "gtk_cell_renderer_toggle_get_activatable" (ref _GtkCellRendererToggle)i32
    clang proc     "gtk_cell_renderer_toggle_set_activatable" (ref _GtkCellRendererToggle,i32)
    record _GtkCellView =
        var _GtkWidget parent_instance
        var ref _GtkCellViewPrivate priv
    end

    record _GtkCellViewClass =
        var _GtkWidgetClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    record _GtkCellViewPrivate =
        var int dummy    !empty record
    end

    clang function "gtk_cell_view_get_type"            ()u64
    clang function "gtk_cell_view_new"                 ()ref _GtkWidget
    clang function "gtk_cell_view_new_with_context"    (ref _GtkCellArea,ref _GtkCellAreaContext)ref _GtkWidget
    clang function "gtk_cell_view_new_with_text"       (ref i8)ref _GtkWidget
    clang function "gtk_cell_view_new_with_markup"     (ref i8)ref _GtkWidget
    clang function "gtk_cell_view_new_with_pixbuf"     (ref _GdkPixbuf)ref _GtkWidget
    clang proc     "gtk_cell_view_set_model"           (ref _GtkCellView,ref _GtkTreeModel)
    clang function "gtk_cell_view_get_model"           (ref _GtkCellView)ref _GtkTreeModel
    clang proc     "gtk_cell_view_set_displayed_row"   (ref _GtkCellView,ref _GtkTreePath)
    clang function "gtk_cell_view_get_displayed_row"   (ref _GtkCellView)ref _GtkTreePath
    clang proc     "gtk_cell_view_set_background_rgba" (ref _GtkCellView,ref _GdkRGBA)
    clang function "gtk_cell_view_get_draw_sensitive"  (ref _GtkCellView)i32
    clang proc     "gtk_cell_view_set_draw_sensitive"  (ref _GtkCellView,i32)
    clang function "gtk_cell_view_get_fit_model"       (ref _GtkCellView)i32
    clang proc     "gtk_cell_view_set_fit_model"       (ref _GtkCellView,i32)
    clang function "gtk_cell_view_get_size_of_row"     (ref _GtkCellView,ref _GtkTreePath,ref _GtkRequisition)i32
    clang proc     "gtk_cell_view_set_background_color" (ref _GtkCellView,ref _GdkColor)
    record _GtkToggleButton =
        var _GtkButton button
        var ref _GtkToggleButtonPrivate priv
    end

    record _GtkToggleButtonPrivate =
        var int dummy    !empty record
    end

    record _GtkToggleButtonClass =
        var _GtkButtonClass parent_class
        var ref clang proc(ref _GtkToggleButton) toggled
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_toggle_button_get_type"        ()u64
    clang function "gtk_toggle_button_new"             ()ref _GtkWidget
    clang function "gtk_toggle_button_new_with_label"  (ref i8)ref _GtkWidget
    clang function "gtk_toggle_button_new_with_mnemonic" (ref i8)ref _GtkWidget
    clang proc     "gtk_toggle_button_set_mode"        (ref _GtkToggleButton,i32)
    clang function "gtk_toggle_button_get_mode"        (ref _GtkToggleButton)i32
    clang proc     "gtk_toggle_button_set_active"      (ref _GtkToggleButton,i32)
    clang function "gtk_toggle_button_get_active"      (ref _GtkToggleButton)i32
    clang proc     "gtk_toggle_button_toggled"         (ref _GtkToggleButton)
    clang proc     "gtk_toggle_button_set_inconsistent" (ref _GtkToggleButton,i32)
    clang function "gtk_toggle_button_get_inconsistent" (ref _GtkToggleButton)i32
    clang proc     "_gtk_toggle_button_set_active"     (ref _GtkToggleButton,i32)
    record _GtkCheckButton =
        var _GtkToggleButton toggle_button
    end

    record _GtkCheckButtonClass =
        var _GtkToggleButtonClass parent_class
        var ref clang proc(ref _GtkCheckButton,ref _cairo) draw_indicator
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_check_button_get_type"         ()u64
    clang function "gtk_check_button_new"              ()ref _GtkWidget
    clang function "gtk_check_button_new_with_label"   (ref i8)ref _GtkWidget
    clang function "gtk_check_button_new_with_mnemonic" (ref i8)ref _GtkWidget
    clang proc     "_gtk_check_button_get_props"       (ref _GtkCheckButton,ref i32,ref i32)
    record _GtkMenuItem =
        var _GtkBin bin
        var ref _GtkMenuItemPrivate priv
    end

    record _GtkMenuItemClass =
        var _GtkBinClass parent_class
        var u32 hide_on_activate
        var ref clang proc(ref _GtkMenuItem) activate
        var ref clang proc(ref _GtkMenuItem) activate_item
        var ref clang proc(ref _GtkMenuItem,ref i32) toggle_size_request
        var ref clang proc(ref _GtkMenuItem,i32) toggle_size_allocate
        var ref clang proc(ref _GtkMenuItem,ref i8) set_label
        var ref clang function(ref _GtkMenuItem)ref i8 get_label
        var ref clang proc(ref _GtkMenuItem) select
        var ref clang proc(ref _GtkMenuItem) deselect
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    record _GtkMenuItemPrivate =
        var int dummy    !empty record
    end

    clang function "gtk_menu_item_get_type"            ()u64
    clang function "gtk_menu_item_new"                 ()ref _GtkWidget
    clang function "gtk_menu_item_new_with_label"      (ref i8)ref _GtkWidget
    clang function "gtk_menu_item_new_with_mnemonic"   (ref i8)ref _GtkWidget
    clang proc     "gtk_menu_item_set_submenu"         (ref _GtkMenuItem,ref _GtkWidget)
    clang function "gtk_menu_item_get_submenu"         (ref _GtkMenuItem)ref _GtkWidget
    clang proc     "gtk_menu_item_select"              (ref _GtkMenuItem)
    clang proc     "gtk_menu_item_deselect"            (ref _GtkMenuItem)
    clang proc     "gtk_menu_item_activate"            (ref _GtkMenuItem)
    clang proc     "gtk_menu_item_toggle_size_request" (ref _GtkMenuItem,ref i32)
    clang proc     "gtk_menu_item_toggle_size_allocate" (ref _GtkMenuItem,i32)
    clang proc     "gtk_menu_item_set_right_justified" (ref _GtkMenuItem,i32)
    clang function "gtk_menu_item_get_right_justified" (ref _GtkMenuItem)i32
    clang proc     "gtk_menu_item_set_accel_path"      (ref _GtkMenuItem,ref i8)
    clang function "gtk_menu_item_get_accel_path"      (ref _GtkMenuItem)ref i8
    clang proc     "gtk_menu_item_set_label"           (ref _GtkMenuItem,ref i8)
    clang function "gtk_menu_item_get_label"           (ref _GtkMenuItem)ref i8
    clang proc     "gtk_menu_item_set_use_underline"   (ref _GtkMenuItem,i32)
    clang function "gtk_menu_item_get_use_underline"   (ref _GtkMenuItem)i32
    clang proc     "gtk_menu_item_set_reserve_indicator" (ref _GtkMenuItem,i32)
    clang function "gtk_menu_item_get_reserve_indicator" (ref _GtkMenuItem)i32
    record _GtkCheckMenuItem =
        var _GtkMenuItem menu_item
        var ref _GtkCheckMenuItemPrivate priv
    end

    record _GtkCheckMenuItemPrivate =
        var int dummy    !empty record
    end

    record _GtkCheckMenuItemClass =
        var _GtkMenuItemClass parent_class
        var ref clang proc(ref _GtkCheckMenuItem) toggled
        var ref clang proc(ref _GtkCheckMenuItem,ref _cairo) draw_indicator
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_check_menu_item_get_type"      ()u64
    clang function "gtk_check_menu_item_new"           ()ref _GtkWidget
    clang function "gtk_check_menu_item_new_with_label" (ref i8)ref _GtkWidget
    clang function "gtk_check_menu_item_new_with_mnemonic" (ref i8)ref _GtkWidget
    clang proc     "gtk_check_menu_item_set_active"    (ref _GtkCheckMenuItem,i32)
    clang function "gtk_check_menu_item_get_active"    (ref _GtkCheckMenuItem)i32
    clang proc     "gtk_check_menu_item_toggled"       (ref _GtkCheckMenuItem)
    clang proc     "gtk_check_menu_item_set_inconsistent" (ref _GtkCheckMenuItem,i32)
    clang function "gtk_check_menu_item_get_inconsistent" (ref _GtkCheckMenuItem)i32
    clang proc     "gtk_check_menu_item_set_draw_as_radio" (ref _GtkCheckMenuItem,i32)
    clang function "gtk_check_menu_item_get_draw_as_radio" (ref _GtkCheckMenuItem)i32
    clang proc     "_gtk_check_menu_item_set_active"   (ref _GtkCheckMenuItem,i32)
    clang function "gtk_clipboard_get_type"            ()u64
    clang function "gtk_clipboard_get_for_display"     (ref _GdkDisplay,ref _GdkAtom)ref _GtkClipboard
    clang function "gtk_clipboard_get"                 (ref _GdkAtom)ref _GtkClipboard
    clang function "gtk_clipboard_get_display"         (ref _GtkClipboard)ref _GdkDisplay
    clang function "gtk_clipboard_set_with_data"       (ref _GtkClipboard,ref _GtkTargetEntry,u32,ref clang proc(ref _GtkClipboard,ref _GtkSelectionData,u32,ref void),ref clang proc(ref _GtkClipboard,ref void),ref void)i32
    clang function "gtk_clipboard_set_with_owner"      (ref _GtkClipboard,ref _GtkTargetEntry,u32,ref clang proc(ref _GtkClipboard,ref _GtkSelectionData,u32,ref void),ref clang proc(ref _GtkClipboard,ref void),ref _GObject)i32
    clang function "gtk_clipboard_get_owner"           (ref _GtkClipboard)ref _GObject
    clang proc     "gtk_clipboard_clear"               (ref _GtkClipboard)
    clang proc     "gtk_clipboard_set_text"            (ref _GtkClipboard,ref i8,i32)
    clang proc     "gtk_clipboard_set_image"           (ref _GtkClipboard,ref _GdkPixbuf)
    clang proc     "gtk_clipboard_request_contents"    (ref _GtkClipboard,ref _GdkAtom,ref clang proc(ref _GtkClipboard,ref _GtkSelectionData,ref void),ref void)
    clang proc     "gtk_clipboard_request_text"        (ref _GtkClipboard,ref clang proc(ref _GtkClipboard,ref i8,ref void),ref void)
    clang proc     "gtk_clipboard_request_rich_text"   (ref _GtkClipboard,ref _GtkTextBuffer,ref clang proc(ref _GtkClipboard,ref _GdkAtom,ref byte,u64,ref void),ref void)
    clang proc     "gtk_clipboard_request_image"       (ref _GtkClipboard,ref clang proc(ref _GtkClipboard,ref _GdkPixbuf,ref void),ref void)
    clang proc     "gtk_clipboard_request_uris"        (ref _GtkClipboard,ref clang proc(ref _GtkClipboard,ref ref i8,ref void),ref void)
    clang proc     "gtk_clipboard_request_targets"     (ref _GtkClipboard,ref clang proc(ref _GtkClipboard,ref ref _GdkAtom,i32,ref void),ref void)
    clang function "gtk_clipboard_wait_for_contents"   (ref _GtkClipboard,ref _GdkAtom)ref _GtkSelectionData
    clang function "gtk_clipboard_wait_for_text"       (ref _GtkClipboard)ref i8
    clang function "gtk_clipboard_wait_for_rich_text"  (ref _GtkClipboard,ref _GtkTextBuffer,ref ref _GdkAtom,ref u64)ref byte
    clang function "gtk_clipboard_wait_for_image"      (ref _GtkClipboard)ref _GdkPixbuf
    clang function "gtk_clipboard_wait_for_uris"       (ref _GtkClipboard)ref ref i8
    clang function "gtk_clipboard_wait_for_targets"    (ref _GtkClipboard,ref ref ref _GdkAtom,ref i32)i32
    clang function "gtk_clipboard_wait_is_text_available" (ref _GtkClipboard)i32
    clang function "gtk_clipboard_wait_is_rich_text_available" (ref _GtkClipboard,ref _GtkTextBuffer)i32
    clang function "gtk_clipboard_wait_is_image_available" (ref _GtkClipboard)i32
    clang function "gtk_clipboard_wait_is_uris_available" (ref _GtkClipboard)i32
    clang function "gtk_clipboard_wait_is_target_available" (ref _GtkClipboard,ref _GdkAtom)i32
    clang proc     "gtk_clipboard_set_can_store"       (ref _GtkClipboard,ref _GtkTargetEntry,i32)
    clang proc     "gtk_clipboard_store"               (ref _GtkClipboard)
    clang proc     "_gtk_clipboard_handle_event"       (ref _GdkEventOwnerChange)
    clang proc     "_gtk_clipboard_store_all"          ()
    record _GtkColorButton =
        var _GtkButton button
        var ref _GtkColorButtonPrivate priv
    end

    record _GtkColorButtonClass =
        var _GtkButtonClass parent_class
        var ref clang proc(ref _GtkColorButton) color_set
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    record _GtkColorButtonPrivate =
        var int dummy    !empty record
    end

    clang function "gtk_color_button_get_type"         ()u64
    clang function "gtk_color_button_new"              ()ref _GtkWidget
    clang function "gtk_color_button_new_with_rgba"    (ref _GdkRGBA)ref _GtkWidget
    clang proc     "gtk_color_button_set_title"        (ref _GtkColorButton,ref i8)
    clang function "gtk_color_button_get_title"        (ref _GtkColorButton)ref i8
    clang function "gtk_color_button_new_with_color"   (ref _GdkColor)ref _GtkWidget
    clang proc     "gtk_color_button_set_color"        (ref _GtkColorButton,ref _GdkColor)
    clang proc     "gtk_color_button_get_color"        (ref _GtkColorButton,ref _GdkColor)
    clang proc     "gtk_color_button_set_alpha"        (ref _GtkColorButton,u16)
    clang function "gtk_color_button_get_alpha"        (ref _GtkColorButton)u16
    clang proc     "gtk_color_button_set_use_alpha"    (ref _GtkColorButton,i32)
    clang function "gtk_color_button_get_use_alpha"    (ref _GtkColorButton)i32
    clang proc     "gtk_color_button_set_rgba"         (ref _GtkColorButton,ref _GdkRGBA)
    clang proc     "gtk_color_button_get_rgba"         (ref _GtkColorButton,ref _GdkRGBA)
    record _GtkColorChooser =
        var int dummy    !empty record
    end

    record _GtkColorChooserInterface =
        var _GTypeInterface base_interface
        var ref clang proc(ref _GtkColorChooser,ref _GdkRGBA) get_rgba
        var ref clang proc(ref _GtkColorChooser,ref _GdkRGBA) set_rgba
        var ref clang proc(ref _GtkColorChooser,i32,i32,i32,ref _GdkRGBA) add_palette
        var ref clang proc(ref _GtkColorChooser,ref _GdkRGBA) color_activated
        var [12]ref void padding
    end

    clang function "gtk_color_chooser_get_type"        ()u64
    clang proc     "gtk_color_chooser_get_rgba"        (ref _GtkColorChooser,ref _GdkRGBA)
    clang proc     "gtk_color_chooser_set_rgba"        (ref _GtkColorChooser,ref _GdkRGBA)
    clang function "gtk_color_chooser_get_use_alpha"   (ref _GtkColorChooser)i32
    clang proc     "gtk_color_chooser_set_use_alpha"   (ref _GtkColorChooser,i32)
    clang proc     "gtk_color_chooser_add_palette"     (ref _GtkColorChooser,i32,i32,i32,ref _GdkRGBA)
    record _GtkColorChooserDialog =
        var _GtkDialog parent_instance
        var ref _GtkColorChooserDialogPrivate priv
    end

    record _GtkColorChooserDialogPrivate =
        var int dummy    !empty record
    end

    record _GtkColorChooserDialogClass =
        var _GtkDialogClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_color_chooser_dialog_get_type" ()u64
    clang function "gtk_color_chooser_dialog_new"      (ref i8,ref _GtkWindow)ref _GtkWidget
    record _GtkColorChooserWidget =
        var _GtkBox parent_instance
        var ref _GtkColorChooserWidgetPrivate priv
    end

    record _GtkColorChooserWidgetPrivate =
        var int dummy    !empty record
    end

    record _GtkColorChooserWidgetClass =
        var _GtkBoxClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
        var ref clang proc() _gtk_reserved5
        var ref clang proc() _gtk_reserved6
        var ref clang proc() _gtk_reserved7
        var ref clang proc() _gtk_reserved8
    end

    clang function "gtk_color_chooser_widget_get_type" ()u64
    clang function "gtk_color_chooser_widget_new"      ()ref _GtkWidget
    clang proc     "gtk_hsv_to_rgb"                    (r64,r64,r64,ref r64,ref r64,ref r64)
    clang proc     "gtk_rgb_to_hsv"                    (r64,r64,r64,ref r64,ref r64,ref r64)
    record _GtkComboBoxText =
        var _GtkComboBox parent_instance
        var ref _GtkComboBoxTextPrivate priv
    end

    record _GtkComboBoxTextPrivate =
        var int dummy    !empty record
    end

    record _GtkComboBoxTextClass =
        var _GtkComboBoxClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_combo_box_text_get_type"       ()u64
    clang function "gtk_combo_box_text_new"            ()ref _GtkWidget
    clang function "gtk_combo_box_text_new_with_entry" ()ref _GtkWidget
    clang proc     "gtk_combo_box_text_append_text"    (ref _GtkComboBoxText,ref i8)
    clang proc     "gtk_combo_box_text_insert_text"    (ref _GtkComboBoxText,i32,ref i8)
    clang proc     "gtk_combo_box_text_prepend_text"   (ref _GtkComboBoxText,ref i8)
    clang proc     "gtk_combo_box_text_remove"         (ref _GtkComboBoxText,i32)
    clang proc     "gtk_combo_box_text_remove_all"     (ref _GtkComboBoxText)
    clang function "gtk_combo_box_text_get_active_text" (ref _GtkComboBoxText)ref i8
    clang proc     "gtk_combo_box_text_insert"         (ref _GtkComboBoxText,i32,ref i8,ref i8)
    clang proc     "gtk_combo_box_text_append"         (ref _GtkComboBoxText,ref i8,ref i8)
    clang proc     "gtk_combo_box_text_prepend"        (ref _GtkComboBoxText,ref i8,ref i8)
    const GTK_CSS_SECTION_DOCUMENT           = 0
    const GTK_CSS_SECTION_IMPORT             = 1
    const GTK_CSS_SECTION_COLOR_DEFINITION   = 2
    const GTK_CSS_SECTION_BINDING_SET        = 3
    const GTK_CSS_SECTION_RULESET            = 4
    const GTK_CSS_SECTION_SELECTOR           = 5
    const GTK_CSS_SECTION_DECLARATION        = 6
    const GTK_CSS_SECTION_VALUE              = 7
    const GTK_CSS_SECTION_KEYFRAMES          = 8
    record _GtkCssSection =
        var int dummy    !empty record
    end

    clang function "gtk_css_section_get_type"          ()u64
    clang function "gtk_css_section_ref"               (ref _GtkCssSection)ref _GtkCssSection
    clang proc     "gtk_css_section_unref"             (ref _GtkCssSection)
    clang function "gtk_css_section_get_section_type"  (ref _GtkCssSection)i32
    clang function "gtk_css_section_get_parent"        (ref _GtkCssSection)ref _GtkCssSection
    clang function "gtk_css_section_get_file"          (ref _GtkCssSection)ref _GFile
    clang function "gtk_css_section_get_start_line"    (ref _GtkCssSection)u32
    clang function "gtk_css_section_get_start_position" (ref _GtkCssSection)u32
    clang function "gtk_css_section_get_end_line"      (ref _GtkCssSection)u32
    clang function "gtk_css_section_get_end_position"  (ref _GtkCssSection)u32
    const GTK_CSS_PROVIDER_ERROR_FAILED      = 0
    const GTK_CSS_PROVIDER_ERROR_SYNTAX      = 1
    const GTK_CSS_PROVIDER_ERROR_IMPORT      = 2
    const GTK_CSS_PROVIDER_ERROR_NAME        = 3
    const GTK_CSS_PROVIDER_ERROR_DEPRECATED  = 4
    const GTK_CSS_PROVIDER_ERROR_UNKNOWN_VALUE = 5
    clang function "gtk_css_provider_error_quark"      ()u32
    record _GtkCssProvider =
        var _GObject parent_instance
        var ref _GtkCssProviderPrivate priv
    end

    record _GtkCssProviderClass =
        var _GObjectClass parent_class
        var ref clang proc(ref _GtkCssProvider,ref _GtkCssSection,ref _GError) parsing_error
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    record _GtkCssProviderPrivate =
        var int dummy    !empty record
    end

    clang function "gtk_css_provider_get_type"         ()u64
    clang function "gtk_css_provider_new"              ()ref _GtkCssProvider
    clang function "gtk_css_provider_to_string"        (ref _GtkCssProvider)ref i8
    clang function "gtk_css_provider_load_from_data"   (ref _GtkCssProvider,ref i8,i64,ref ref _GError)i32
    clang function "gtk_css_provider_load_from_file"   (ref _GtkCssProvider,ref _GFile,ref ref _GError)i32
    clang function "gtk_css_provider_load_from_path"   (ref _GtkCssProvider,ref i8,ref ref _GError)i32
    clang function "gtk_css_provider_get_default"      ()ref _GtkCssProvider
    clang function "gtk_css_provider_get_named"        (ref i8,ref i8)ref _GtkCssProvider
    const GTK_DEBUG_MISC                     = 1
    const GTK_DEBUG_PLUGSOCKET               = 2
    const GTK_DEBUG_TEXT                     = 4
    const GTK_DEBUG_TREE                     = 8
    const GTK_DEBUG_UPDATES                  = 16
    const GTK_DEBUG_KEYBINDINGS              = 32
    const GTK_DEBUG_MULTIHEAD                = 64
    const GTK_DEBUG_MODULES                  = 128
    const GTK_DEBUG_GEOMETRY                 = 256
    const GTK_DEBUG_ICONTHEME                = 512
    const GTK_DEBUG_PRINTING                 = 1024
    const GTK_DEBUG_BUILDER                  = 2048
    const GTK_DEBUG_SIZE_REQUEST             = 4096
    const GTK_DEBUG_NO_CSS_CACHE             = 8192
    clang function "gtk_get_debug_flags"               ()u32
    clang proc     "gtk_set_debug_flags"               (u32)
    record _GtkDrawingArea =
        var _GtkWidget widget
        var ref void dummy
    end

    record _GtkDrawingAreaClass =
        var _GtkWidgetClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_drawing_area_get_type"         ()u64
    clang function "gtk_drawing_area_new"              ()ref _GtkWidget
    record _GtkEventBox =
        var _GtkBin bin
        var ref _GtkEventBoxPrivate priv
    end

    record _GtkEventBoxClass =
        var _GtkBinClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    record _GtkEventBoxPrivate =
        var int dummy    !empty record
    end

    clang function "gtk_event_box_get_type"            ()u64
    clang function "gtk_event_box_new"                 ()ref _GtkWidget
    clang function "gtk_event_box_get_visible_window"  (ref _GtkEventBox)i32
    clang proc     "gtk_event_box_set_visible_window"  (ref _GtkEventBox,i32)
    clang function "gtk_event_box_get_above_child"     (ref _GtkEventBox)i32
    clang proc     "gtk_event_box_set_above_child"     (ref _GtkEventBox,i32)
    record _GtkExpander =
        var _GtkBin bin
        var ref _GtkExpanderPrivate priv
    end

    record _GtkExpanderClass =
        var _GtkBinClass parent_class
        var ref clang proc(ref _GtkExpander) activate
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    record _GtkExpanderPrivate =
        var int dummy    !empty record
    end

    clang function "gtk_expander_get_type"             ()u64
    clang function "gtk_expander_new"                  (ref i8)ref _GtkWidget
    clang function "gtk_expander_new_with_mnemonic"    (ref i8)ref _GtkWidget
    clang proc     "gtk_expander_set_expanded"         (ref _GtkExpander,i32)
    clang function "gtk_expander_get_expanded"         (ref _GtkExpander)i32
    clang proc     "gtk_expander_set_spacing"          (ref _GtkExpander,i32)
    clang function "gtk_expander_get_spacing"          (ref _GtkExpander)i32
    clang proc     "gtk_expander_set_label"            (ref _GtkExpander,ref i8)
    clang function "gtk_expander_get_label"            (ref _GtkExpander)ref i8
    clang proc     "gtk_expander_set_use_underline"    (ref _GtkExpander,i32)
    clang function "gtk_expander_get_use_underline"    (ref _GtkExpander)i32
    clang proc     "gtk_expander_set_use_markup"       (ref _GtkExpander,i32)
    clang function "gtk_expander_get_use_markup"       (ref _GtkExpander)i32
    clang proc     "gtk_expander_set_label_widget"     (ref _GtkExpander,ref _GtkWidget)
    clang function "gtk_expander_get_label_widget"     (ref _GtkExpander)ref _GtkWidget
    clang proc     "gtk_expander_set_label_fill"       (ref _GtkExpander,i32)
    clang function "gtk_expander_get_label_fill"       (ref _GtkExpander)i32
    clang proc     "gtk_expander_set_resize_toplevel"  (ref _GtkExpander,i32)
    clang function "gtk_expander_get_resize_toplevel"  (ref _GtkExpander)i32
    record _GtkFixed =
        var _GtkContainer container
        var ref _GtkFixedPrivate priv
    end

    record _GtkFixedPrivate =
        var int dummy    !empty record
    end

    record _GtkFixedClass =
        var _GtkContainerClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    record _GtkFixedChild =
        var ref _GtkWidget widget
        var i32 x
        var i32 y
    end

    clang function "gtk_fixed_get_type"                ()u64
    clang function "gtk_fixed_new"                     ()ref _GtkWidget
    clang proc     "gtk_fixed_put"                     (ref _GtkFixed,ref _GtkWidget,i32,i32)
    clang proc     "gtk_fixed_move"                    (ref _GtkFixed,ref _GtkWidget,i32,i32)
    record _GtkFileFilter =
        var int dummy    !empty record
    end

    record _GtkFileFilterInfo =
        var i32 contains
        var ref i8 filename
        var ref i8 uri
        var ref i8 display_name
        var ref i8 mime_type
    end

    const GTK_FILE_FILTER_FILENAME           = 1
    const GTK_FILE_FILTER_URI                = 2
    const GTK_FILE_FILTER_DISPLAY_NAME       = 4
    const GTK_FILE_FILTER_MIME_TYPE          = 8
    clang function "gtk_file_filter_get_type"          ()u64
    clang function "gtk_file_filter_new"               ()ref _GtkFileFilter
    clang proc     "gtk_file_filter_set_name"          (ref _GtkFileFilter,ref i8)
    clang function "gtk_file_filter_get_name"          (ref _GtkFileFilter)ref i8
    clang proc     "gtk_file_filter_add_mime_type"     (ref _GtkFileFilter,ref i8)
    clang proc     "gtk_file_filter_add_pattern"       (ref _GtkFileFilter,ref i8)
    clang proc     "gtk_file_filter_add_pixbuf_formats" (ref _GtkFileFilter)
    clang proc     "gtk_file_filter_add_custom"        (ref _GtkFileFilter,i32,ref clang function(ref _GtkFileFilterInfo,ref void)i32,ref void,ref clang proc(ref void))
    clang function "gtk_file_filter_get_needed"        (ref _GtkFileFilter)i32
    clang function "gtk_file_filter_filter"            (ref _GtkFileFilter,ref _GtkFileFilterInfo)i32
    record _GtkFileChooser =
        var int dummy    !empty record
    end

    const GTK_FILE_CHOOSER_ACTION_OPEN       = 0
    const GTK_FILE_CHOOSER_ACTION_SAVE       = 1
    const GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER = 2
    const GTK_FILE_CHOOSER_ACTION_CREATE_FOLDER = 3
    const GTK_FILE_CHOOSER_CONFIRMATION_CONFIRM = 0
    const GTK_FILE_CHOOSER_CONFIRMATION_ACCEPT_FILENAME = 1
    const GTK_FILE_CHOOSER_CONFIRMATION_SELECT_AGAIN = 2
    clang function "gtk_file_chooser_get_type"         ()u64
    const GTK_FILE_CHOOSER_ERROR_NONEXISTENT = 0
    const GTK_FILE_CHOOSER_ERROR_BAD_FILENAME = 1
    const GTK_FILE_CHOOSER_ERROR_ALREADY_EXISTS = 2
    const GTK_FILE_CHOOSER_ERROR_INCOMPLETE_HOSTNAME = 3
    clang function "gtk_file_chooser_error_quark"      ()u32
    clang proc     "gtk_file_chooser_set_action"       (ref _GtkFileChooser,i32)
    clang function "gtk_file_chooser_get_action"       (ref _GtkFileChooser)i32
    clang proc     "gtk_file_chooser_set_local_only"   (ref _GtkFileChooser,i32)
    clang function "gtk_file_chooser_get_local_only"   (ref _GtkFileChooser)i32
    clang proc     "gtk_file_chooser_set_select_multiple" (ref _GtkFileChooser,i32)
    clang function "gtk_file_chooser_get_select_multiple" (ref _GtkFileChooser)i32
    clang proc     "gtk_file_chooser_set_show_hidden"  (ref _GtkFileChooser,i32)
    clang function "gtk_file_chooser_get_show_hidden"  (ref _GtkFileChooser)i32
    clang proc     "gtk_file_chooser_set_do_overwrite_confirmation" (ref _GtkFileChooser,i32)
    clang function "gtk_file_chooser_get_do_overwrite_confirmation" (ref _GtkFileChooser)i32
    clang proc     "gtk_file_chooser_set_create_folders" (ref _GtkFileChooser,i32)
    clang function "gtk_file_chooser_get_create_folders" (ref _GtkFileChooser)i32
    clang proc     "gtk_file_chooser_set_current_name" (ref _GtkFileChooser,ref i8)
    clang function "gtk_file_chooser_get_filename"     (ref _GtkFileChooser)ref i8
    clang function "gtk_file_chooser_set_filename"     (ref _GtkFileChooser,ref i8)i32
    clang function "gtk_file_chooser_select_filename"  (ref _GtkFileChooser,ref i8)i32
    clang proc     "gtk_file_chooser_unselect_filename" (ref _GtkFileChooser,ref i8)
    clang proc     "gtk_file_chooser_select_all"       (ref _GtkFileChooser)
    clang proc     "gtk_file_chooser_unselect_all"     (ref _GtkFileChooser)
    clang function "gtk_file_chooser_get_filenames"    (ref _GtkFileChooser)ref _GSList
    clang function "gtk_file_chooser_set_current_folder" (ref _GtkFileChooser,ref i8)i32
    clang function "gtk_file_chooser_get_current_folder" (ref _GtkFileChooser)ref i8
    clang function "gtk_file_chooser_get_uri"          (ref _GtkFileChooser)ref i8
    clang function "gtk_file_chooser_set_uri"          (ref _GtkFileChooser,ref i8)i32
    clang function "gtk_file_chooser_select_uri"       (ref _GtkFileChooser,ref i8)i32
    clang proc     "gtk_file_chooser_unselect_uri"     (ref _GtkFileChooser,ref i8)
    clang function "gtk_file_chooser_get_uris"         (ref _GtkFileChooser)ref _GSList
    clang function "gtk_file_chooser_set_current_folder_uri" (ref _GtkFileChooser,ref i8)i32
    clang function "gtk_file_chooser_get_current_folder_uri" (ref _GtkFileChooser)ref i8
    clang function "gtk_file_chooser_get_file"         (ref _GtkFileChooser)ref _GFile
    clang function "gtk_file_chooser_set_file"         (ref _GtkFileChooser,ref _GFile,ref ref _GError)i32
    clang function "gtk_file_chooser_select_file"      (ref _GtkFileChooser,ref _GFile,ref ref _GError)i32
    clang proc     "gtk_file_chooser_unselect_file"    (ref _GtkFileChooser,ref _GFile)
    clang function "gtk_file_chooser_get_files"        (ref _GtkFileChooser)ref _GSList
    clang function "gtk_file_chooser_set_current_folder_file" (ref _GtkFileChooser,ref _GFile,ref ref _GError)i32
    clang function "gtk_file_chooser_get_current_folder_file" (ref _GtkFileChooser)ref _GFile
    clang proc     "gtk_file_chooser_set_preview_widget" (ref _GtkFileChooser,ref _GtkWidget)
    clang function "gtk_file_chooser_get_preview_widget" (ref _GtkFileChooser)ref _GtkWidget
    clang proc     "gtk_file_chooser_set_preview_widget_active" (ref _GtkFileChooser,i32)
    clang function "gtk_file_chooser_get_preview_widget_active" (ref _GtkFileChooser)i32
    clang proc     "gtk_file_chooser_set_use_preview_label" (ref _GtkFileChooser,i32)
    clang function "gtk_file_chooser_get_use_preview_label" (ref _GtkFileChooser)i32
    clang function "gtk_file_chooser_get_preview_filename" (ref _GtkFileChooser)ref i8
    clang function "gtk_file_chooser_get_preview_uri"  (ref _GtkFileChooser)ref i8
    clang function "gtk_file_chooser_get_preview_file" (ref _GtkFileChooser)ref _GFile
    clang proc     "gtk_file_chooser_set_extra_widget" (ref _GtkFileChooser,ref _GtkWidget)
    clang function "gtk_file_chooser_get_extra_widget" (ref _GtkFileChooser)ref _GtkWidget
    clang proc     "gtk_file_chooser_add_filter"       (ref _GtkFileChooser,ref _GtkFileFilter)
    clang proc     "gtk_file_chooser_remove_filter"    (ref _GtkFileChooser,ref _GtkFileFilter)
    clang function "gtk_file_chooser_list_filters"     (ref _GtkFileChooser)ref _GSList
    clang proc     "gtk_file_chooser_set_filter"       (ref _GtkFileChooser,ref _GtkFileFilter)
    clang function "gtk_file_chooser_get_filter"       (ref _GtkFileChooser)ref _GtkFileFilter
    clang function "gtk_file_chooser_add_shortcut_folder" (ref _GtkFileChooser,ref i8,ref ref _GError)i32
    clang function "gtk_file_chooser_remove_shortcut_folder" (ref _GtkFileChooser,ref i8,ref ref _GError)i32
    clang function "gtk_file_chooser_list_shortcut_folders" (ref _GtkFileChooser)ref _GSList
    clang function "gtk_file_chooser_add_shortcut_folder_uri" (ref _GtkFileChooser,ref i8,ref ref _GError)i32
    clang function "gtk_file_chooser_remove_shortcut_folder_uri" (ref _GtkFileChooser,ref i8,ref ref _GError)i32
    clang function "gtk_file_chooser_list_shortcut_folder_uris" (ref _GtkFileChooser)ref _GSList
    record _GtkFileChooserButton =
        var _GtkBox parent
        var ref _GtkFileChooserButtonPrivate priv
    end

    record _GtkFileChooserButtonPrivate =
        var int dummy    !empty record
    end

    record _GtkFileChooserButtonClass =
        var _GtkBoxClass parent_class
        var ref clang proc(ref _GtkFileChooserButton) file_set
        var ref void __gtk_reserved1
        var ref void __gtk_reserved2
        var ref void __gtk_reserved3
        var ref void __gtk_reserved4
    end

    clang function "gtk_file_chooser_button_get_type"  ()u64
    clang function "gtk_file_chooser_button_new"       (ref i8,i32)ref _GtkWidget
    clang function "gtk_file_chooser_button_new_with_dialog" (ref _GtkWidget)ref _GtkWidget
    clang function "gtk_file_chooser_button_get_title" (ref _GtkFileChooserButton)ref i8
    clang proc     "gtk_file_chooser_button_set_title" (ref _GtkFileChooserButton,ref i8)
    clang function "gtk_file_chooser_button_get_width_chars" (ref _GtkFileChooserButton)i32
    clang proc     "gtk_file_chooser_button_set_width_chars" (ref _GtkFileChooserButton,i32)
    clang function "gtk_file_chooser_button_get_focus_on_click" (ref _GtkFileChooserButton)i32
    clang proc     "gtk_file_chooser_button_set_focus_on_click" (ref _GtkFileChooserButton,i32)
    record _GtkFileChooserDialog =
        var _GtkDialog parent_instance
        var ref _GtkFileChooserDialogPrivate priv
    end

    record _GtkFileChooserDialogPrivate =
        var int dummy    !empty record
    end

    record _GtkFileChooserDialogClass =
        var _GtkDialogClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_file_chooser_dialog_get_type"  ()u64
    clang function "gtk_file_chooser_dialog_new"       (ref i8,ref _GtkWindow,i32,ref i8,...)ref _GtkWidget
    record _GtkFileChooserWidget =
        var _GtkBox parent_instance
        var ref _GtkFileChooserWidgetPrivate priv
    end

    record _GtkFileChooserWidgetPrivate =
        var int dummy    !empty record
    end

    record _GtkFileChooserWidgetClass =
        var _GtkBoxClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_file_chooser_widget_get_type"  ()u64
    clang function "gtk_file_chooser_widget_new"       (i32)ref _GtkWidget
    record _GtkFontButton =
        var _GtkButton button
        var ref _GtkFontButtonPrivate priv
    end

    record _GtkFontButtonClass =
        var _GtkButtonClass parent_class
        var ref clang proc(ref _GtkFontButton) font_set
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    record _GtkFontButtonPrivate =
        var int dummy    !empty record
    end

    clang function "gtk_font_button_get_type"          ()u64
    clang function "gtk_font_button_new"               ()ref _GtkWidget
    clang function "gtk_font_button_new_with_font"     (ref i8)ref _GtkWidget
    clang function "gtk_font_button_get_title"         (ref _GtkFontButton)ref i8
    clang proc     "gtk_font_button_set_title"         (ref _GtkFontButton,ref i8)
    clang function "gtk_font_button_get_use_font"      (ref _GtkFontButton)i32
    clang proc     "gtk_font_button_set_use_font"      (ref _GtkFontButton,i32)
    clang function "gtk_font_button_get_use_size"      (ref _GtkFontButton)i32
    clang proc     "gtk_font_button_set_use_size"      (ref _GtkFontButton,i32)
    clang function "gtk_font_button_get_font_name"     (ref _GtkFontButton)ref i8
    clang function "gtk_font_button_set_font_name"     (ref _GtkFontButton,ref i8)i32
    clang function "gtk_font_button_get_show_style"    (ref _GtkFontButton)i32
    clang proc     "gtk_font_button_set_show_style"    (ref _GtkFontButton,i32)
    clang function "gtk_font_button_get_show_size"     (ref _GtkFontButton)i32
    clang proc     "gtk_font_button_set_show_size"     (ref _GtkFontButton,i32)
    record _GtkFontChooser =
        var int dummy    !empty record
    end

    record _GtkFontChooserIface =
        var _GTypeInterface base_iface
        var ref clang function(ref _GtkFontChooser)ref _PangoFontFamily get_font_family
        var ref clang function(ref _GtkFontChooser)ref _PangoFontFace get_font_face
        var ref clang function(ref _GtkFontChooser)i32 get_font_size
        var ref clang proc(ref _GtkFontChooser,ref clang function(ref _PangoFontFamily,ref _PangoFontFace,ref void)i32,ref void,ref clang proc(ref void)) set_filter_func
        var ref clang proc(ref _GtkFontChooser,ref i8) font_activated
        var [12]ref void padding
    end

    clang function "gtk_font_chooser_get_type"         ()u64
    clang function "gtk_font_chooser_get_font_family"  (ref _GtkFontChooser)ref _PangoFontFamily
    clang function "gtk_font_chooser_get_font_face"    (ref _GtkFontChooser)ref _PangoFontFace
    clang function "gtk_font_chooser_get_font_size"    (ref _GtkFontChooser)i32
    clang function "gtk_font_chooser_get_font_desc"    (ref _GtkFontChooser)ref _PangoFontDescription
    clang proc     "gtk_font_chooser_set_font_desc"    (ref _GtkFontChooser,ref _PangoFontDescription)
    clang function "gtk_font_chooser_get_font"         (ref _GtkFontChooser)ref i8
    clang proc     "gtk_font_chooser_set_font"         (ref _GtkFontChooser,ref i8)
    clang function "gtk_font_chooser_get_preview_text" (ref _GtkFontChooser)ref i8
    clang proc     "gtk_font_chooser_set_preview_text" (ref _GtkFontChooser,ref i8)
    clang function "gtk_font_chooser_get_show_preview_entry" (ref _GtkFontChooser)i32
    clang proc     "gtk_font_chooser_set_show_preview_entry" (ref _GtkFontChooser,i32)
    clang proc     "gtk_font_chooser_set_filter_func"  (ref _GtkFontChooser,ref clang function(ref _PangoFontFamily,ref _PangoFontFace,ref void)i32,ref void,ref clang proc(ref void))
    record _GtkFontChooserDialog =
        var _GtkDialog parent_instance
        var ref _GtkFontChooserDialogPrivate priv
    end

    record _GtkFontChooserDialogPrivate =
        var int dummy    !empty record
    end

    record _GtkFontChooserDialogClass =
        var _GtkDialogClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_font_chooser_dialog_get_type"  ()u64
    clang function "gtk_font_chooser_dialog_new"       (ref i8,ref _GtkWindow)ref _GtkWidget
    record _GtkFontChooserWidget =
        var _GtkBox parent_instance
        var ref _GtkFontChooserWidgetPrivate priv
    end

    record _GtkFontChooserWidgetPrivate =
        var int dummy    !empty record
    end

    record _GtkFontChooserWidgetClass =
        var _GtkBoxClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
        var ref clang proc() _gtk_reserved5
        var ref clang proc() _gtk_reserved6
        var ref clang proc() _gtk_reserved7
        var ref clang proc() _gtk_reserved8
    end

    clang function "gtk_font_chooser_widget_get_type"  ()u64
    clang function "gtk_font_chooser_widget_new"       ()ref _GtkWidget
    record _GtkIconFactory =
        var _GObject parent_instance
        var ref _GtkIconFactoryPrivate priv
    end

    record _GtkIconFactoryPrivate =
        var int dummy    !empty record
    end

    record _GtkIconFactoryClass =
        var _GObjectClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_icon_factory_get_type"         ()u64
    clang function "gtk_icon_factory_new"              ()ref _GtkIconFactory
    clang proc     "gtk_icon_factory_add"              (ref _GtkIconFactory,ref i8,ref _GtkIconSet)
    clang function "gtk_icon_factory_lookup"           (ref _GtkIconFactory,ref i8)ref _GtkIconSet
    clang proc     "gtk_icon_factory_add_default"      (ref _GtkIconFactory)
    clang proc     "gtk_icon_factory_remove_default"   (ref _GtkIconFactory)
    clang function "gtk_icon_factory_lookup_default"   (ref i8)ref _GtkIconSet
    clang function "gtk_icon_size_lookup"              (i32,ref i32,ref i32)i32
    clang function "gtk_icon_size_lookup_for_settings" (ref _GtkSettings,i32,ref i32,ref i32)i32
    clang function "gtk_icon_size_register"            (ref i8,i32,i32)i32
    clang proc     "gtk_icon_size_register_alias"      (ref i8,i32)
    clang function "gtk_icon_size_from_name"           (ref i8)i32
    clang function "gtk_icon_size_get_name"            (i32)ref i8
    clang function "gtk_icon_set_get_type"             ()u64
    clang function "gtk_icon_set_new"                  ()ref _GtkIconSet
    clang function "gtk_icon_set_new_from_pixbuf"      (ref _GdkPixbuf)ref _GtkIconSet
    clang function "gtk_icon_set_ref"                  (ref _GtkIconSet)ref _GtkIconSet
    clang proc     "gtk_icon_set_unref"                (ref _GtkIconSet)
    clang function "gtk_icon_set_copy"                 (ref _GtkIconSet)ref _GtkIconSet
    clang function "gtk_icon_set_render_icon"          (ref _GtkIconSet,ref _GtkStyle,i32,i32,i32,ref _GtkWidget,ref i8)ref _GdkPixbuf
    clang proc     "gtk_icon_set_add_source"           (ref _GtkIconSet,ref _GtkIconSource)
    clang proc     "gtk_icon_set_get_sizes"            (ref _GtkIconSet,ref ref i32,ref i32)
    clang function "gtk_icon_source_get_type"          ()u64
    clang function "gtk_icon_source_new"               ()ref _GtkIconSource
    clang function "gtk_icon_source_copy"              (ref _GtkIconSource)ref _GtkIconSource
    clang proc     "gtk_icon_source_free"              (ref _GtkIconSource)
    clang proc     "gtk_icon_source_set_filename"      (ref _GtkIconSource,ref i8)
    clang proc     "gtk_icon_source_set_icon_name"     (ref _GtkIconSource,ref i8)
    clang proc     "gtk_icon_source_set_pixbuf"        (ref _GtkIconSource,ref _GdkPixbuf)
    clang function "gtk_icon_source_get_filename"      (ref _GtkIconSource)ref i8
    clang function "gtk_icon_source_get_icon_name"     (ref _GtkIconSource)ref i8
    clang function "gtk_icon_source_get_pixbuf"        (ref _GtkIconSource)ref _GdkPixbuf
    clang proc     "gtk_icon_source_set_direction_wildcarded" (ref _GtkIconSource,i32)
    clang proc     "gtk_icon_source_set_state_wildcarded" (ref _GtkIconSource,i32)
    clang proc     "gtk_icon_source_set_size_wildcarded" (ref _GtkIconSource,i32)
    clang function "gtk_icon_source_get_size_wildcarded" (ref _GtkIconSource)i32
    clang function "gtk_icon_source_get_state_wildcarded" (ref _GtkIconSource)i32
    clang function "gtk_icon_source_get_direction_wildcarded" (ref _GtkIconSource)i32
    clang proc     "gtk_icon_source_set_direction"     (ref _GtkIconSource,i32)
    clang proc     "gtk_icon_source_set_state"         (ref _GtkIconSource,i32)
    clang proc     "gtk_icon_source_set_size"          (ref _GtkIconSource,i32)
    clang function "gtk_icon_source_get_direction"     (ref _GtkIconSource)i32
    clang function "gtk_icon_source_get_state"         (ref _GtkIconSource)i32
    clang function "gtk_icon_source_get_size"          (ref _GtkIconSource)i32
    clang proc     "_gtk_icon_set_invalidate_caches"   ()
    clang function "_gtk_icon_factory_list_ids"        ()ref _GList
    clang proc     "_gtk_icon_factory_ensure_default_icons" ()
    record _GtkStyleProperties =
        var _GObject parent_object
        var ref _GtkStylePropertiesPrivate priv
    end

    record _GtkStylePropertiesClass =
        var _GObjectClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    record _GtkStylePropertiesPrivate =
        var int dummy    !empty record
    end

    record _GtkSymbolicColor =
        var int dummy    !empty record
    end

    record _GtkGradient =
        var int dummy    !empty record
    end

    clang function "gtk_style_properties_get_type"     ()u64
    clang proc     "gtk_style_properties_register_property" (ref clang function(ref i8,ref _GValue,ref ref _GError)i32,ref _GParamSpec)
    clang function "gtk_style_properties_lookup_property" (ref i8,ref ref clang function(ref i8,ref _GValue,ref ref _GError)i32,ref ref _GParamSpec)i32
    clang function "gtk_style_properties_new"          ()ref _GtkStyleProperties
    clang proc     "gtk_style_properties_map_color"    (ref _GtkStyleProperties,ref i8,ref _GtkSymbolicColor)
    clang function "gtk_style_properties_lookup_color" (ref _GtkStyleProperties,ref i8)ref _GtkSymbolicColor
    clang proc     "gtk_style_properties_set_property" (ref _GtkStyleProperties,ref i8,i32,ref _GValue)
    clang proc     "gtk_style_properties_set_valist"   (ref _GtkStyleProperties,i32,ref i8)
    clang proc     "gtk_style_properties_set"          (ref _GtkStyleProperties,i32,...)
    clang function "gtk_style_properties_get_property" (ref _GtkStyleProperties,ref i8,i32,ref _GValue)i32
    clang proc     "gtk_style_properties_get_valist"   (ref _GtkStyleProperties,i32,ref i8)
    clang proc     "gtk_style_properties_get"          (ref _GtkStyleProperties,i32,...)
    clang proc     "gtk_style_properties_unset_property" (ref _GtkStyleProperties,ref i8,i32)
    clang proc     "gtk_style_properties_clear"        (ref _GtkStyleProperties)
    clang proc     "gtk_style_properties_merge"        (ref _GtkStyleProperties,ref _GtkStyleProperties,i32)
    record _GtkStyleProviderIface =
        var _GTypeInterface g_iface
        var ref clang function(ref _GtkStyleProvider,ref _GtkWidgetPath)ref _GtkStyleProperties get_style
        var ref clang function(ref _GtkStyleProvider,ref _GtkWidgetPath,i32,ref _GParamSpec,ref _GValue)i32 get_style_property
        var ref clang function(ref _GtkStyleProvider,ref _GtkWidgetPath)ref _GtkIconFactory get_icon_factory
    end

    record _GtkStyleProvider =
        var int dummy    !empty record
    end

    clang function "gtk_style_provider_get_type"       ()u64
    clang function "gtk_style_provider_get_style"      (ref _GtkStyleProvider,ref _GtkWidgetPath)ref _GtkStyleProperties
    clang function "gtk_style_provider_get_style_property" (ref _GtkStyleProvider,ref _GtkWidgetPath,i32,ref _GParamSpec,ref _GValue)i32
    clang function "gtk_style_provider_get_icon_factory" (ref _GtkStyleProvider,ref _GtkWidgetPath)ref _GtkIconFactory
    record _GtkStyleContextClass =
        var _GObjectClass parent_class
        var ref clang proc(ref _GtkStyleContext) changed
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    record _GtkStyleContextPrivate =
        var int dummy    !empty record
    end

    clang function "gtk_style_context_get_type"        ()u64
    clang function "gtk_style_context_new"             ()ref _GtkStyleContext
    clang proc     "gtk_style_context_add_provider_for_screen" (ref _GdkScreen,ref _GtkStyleProvider,u32)
    clang proc     "gtk_style_context_remove_provider_for_screen" (ref _GdkScreen,ref _GtkStyleProvider)
    clang proc     "gtk_style_context_add_provider"    (ref _GtkStyleContext,ref _GtkStyleProvider,u32)
    clang proc     "gtk_style_context_remove_provider" (ref _GtkStyleContext,ref _GtkStyleProvider)
    clang proc     "gtk_style_context_save"            (ref _GtkStyleContext)
    clang proc     "gtk_style_context_restore"         (ref _GtkStyleContext)
    clang function "gtk_style_context_get_section"     (ref _GtkStyleContext,ref i8)ref _GtkCssSection
    clang proc     "gtk_style_context_get_property"    (ref _GtkStyleContext,ref i8,i32,ref _GValue)
    clang proc     "gtk_style_context_get_valist"      (ref _GtkStyleContext,i32,ref i8)
    clang proc     "gtk_style_context_get"             (ref _GtkStyleContext,i32,...)
    clang proc     "gtk_style_context_set_state"       (ref _GtkStyleContext,i32)
    clang function "gtk_style_context_get_state"       (ref _GtkStyleContext)i32
    clang function "gtk_style_context_state_is_running" (ref _GtkStyleContext,i32,ref r64)i32
    clang proc     "gtk_style_context_set_path"        (ref _GtkStyleContext,ref _GtkWidgetPath)
    clang function "gtk_style_context_get_path"        (ref _GtkStyleContext)ref _GtkWidgetPath
    clang proc     "gtk_style_context_set_parent"      (ref _GtkStyleContext,ref _GtkStyleContext)
    clang function "gtk_style_context_get_parent"      (ref _GtkStyleContext)ref _GtkStyleContext
    clang function "gtk_style_context_list_classes"    (ref _GtkStyleContext)ref _GList
    clang proc     "gtk_style_context_add_class"       (ref _GtkStyleContext,ref i8)
    clang proc     "gtk_style_context_remove_class"    (ref _GtkStyleContext,ref i8)
    clang function "gtk_style_context_has_class"       (ref _GtkStyleContext,ref i8)i32
    clang function "gtk_style_context_list_regions"    (ref _GtkStyleContext)ref _GList
    clang proc     "gtk_style_context_add_region"      (ref _GtkStyleContext,ref i8,i32)
    clang proc     "gtk_style_context_remove_region"   (ref _GtkStyleContext,ref i8)
    clang function "gtk_style_context_has_region"      (ref _GtkStyleContext,ref i8,ref i32)i32
    clang proc     "gtk_style_context_get_style_property" (ref _GtkStyleContext,ref i8,ref _GValue)
    clang proc     "gtk_style_context_get_style_valist" (ref _GtkStyleContext,ref i8)
    clang proc     "gtk_style_context_get_style"       (ref _GtkStyleContext,...)
    clang function "gtk_style_context_lookup_icon_set" (ref _GtkStyleContext,ref i8)ref _GtkIconSet
    clang function "gtk_icon_set_render_icon_pixbuf"   (ref _GtkIconSet,ref _GtkStyleContext,i32)ref _GdkPixbuf
    clang proc     "gtk_style_context_set_screen"      (ref _GtkStyleContext,ref _GdkScreen)
    clang function "gtk_style_context_get_screen"      (ref _GtkStyleContext)ref _GdkScreen
    clang proc     "gtk_style_context_set_direction"   (ref _GtkStyleContext,i32)
    clang function "gtk_style_context_get_direction"   (ref _GtkStyleContext)i32
    clang proc     "gtk_style_context_set_junction_sides" (ref _GtkStyleContext,i32)
    clang function "gtk_style_context_get_junction_sides" (ref _GtkStyleContext)i32
    clang function "gtk_style_context_lookup_color"    (ref _GtkStyleContext,ref i8,ref _GdkRGBA)i32
    clang proc     "gtk_style_context_notify_state_change" (ref _GtkStyleContext,ref _GdkWindow,ref void,i32,i32)
    clang proc     "gtk_style_context_cancel_animations" (ref _GtkStyleContext,ref void)
    clang proc     "gtk_style_context_scroll_animations" (ref _GtkStyleContext,ref _GdkWindow,i32,i32)
    clang proc     "gtk_style_context_push_animatable_region" (ref _GtkStyleContext,ref void)
    clang proc     "gtk_style_context_pop_animatable_region" (ref _GtkStyleContext)
    clang proc     "gtk_style_context_get_color"       (ref _GtkStyleContext,i32,ref _GdkRGBA)
    clang proc     "gtk_style_context_get_background_color" (ref _GtkStyleContext,i32,ref _GdkRGBA)
    clang proc     "gtk_style_context_get_border_color" (ref _GtkStyleContext,i32,ref _GdkRGBA)
    clang function "gtk_style_context_get_font"        (ref _GtkStyleContext,i32)ref _PangoFontDescription
    clang proc     "gtk_style_context_get_border"      (ref _GtkStyleContext,i32,ref _GtkBorder)
    clang proc     "gtk_style_context_get_padding"     (ref _GtkStyleContext,i32,ref _GtkBorder)
    clang proc     "gtk_style_context_get_margin"      (ref _GtkStyleContext,i32,ref _GtkBorder)
    clang proc     "gtk_style_context_invalidate"      (ref _GtkStyleContext)
    clang proc     "gtk_style_context_reset_widgets"   (ref _GdkScreen)
    clang proc     "gtk_style_context_set_background"  (ref _GtkStyleContext,ref _GdkWindow)
    clang proc     "gtk_render_check"                  (ref _GtkStyleContext,ref _cairo,r64,r64,r64,r64)
    clang proc     "gtk_render_option"                 (ref _GtkStyleContext,ref _cairo,r64,r64,r64,r64)
    clang proc     "gtk_render_arrow"                  (ref _GtkStyleContext,ref _cairo,r64,r64,r64,r64)
    clang proc     "gtk_render_background"             (ref _GtkStyleContext,ref _cairo,r64,r64,r64,r64)
    clang proc     "gtk_render_frame"                  (ref _GtkStyleContext,ref _cairo,r64,r64,r64,r64)
    clang proc     "gtk_render_expander"               (ref _GtkStyleContext,ref _cairo,r64,r64,r64,r64)
    clang proc     "gtk_render_focus"                  (ref _GtkStyleContext,ref _cairo,r64,r64,r64,r64)
    clang proc     "gtk_render_layout"                 (ref _GtkStyleContext,ref _cairo,r64,r64,ref _PangoLayout)
    clang proc     "gtk_render_line"                   (ref _GtkStyleContext,ref _cairo,r64,r64,r64,r64)
    clang proc     "gtk_render_slider"                 (ref _GtkStyleContext,ref _cairo,r64,r64,r64,r64,i32)
    clang proc     "gtk_render_frame_gap"              (ref _GtkStyleContext,ref _cairo,r64,r64,r64,r64,i32,r64,r64)
    clang proc     "gtk_render_extension"              (ref _GtkStyleContext,ref _cairo,r64,r64,r64,r64,i32)
    clang proc     "gtk_render_handle"                 (ref _GtkStyleContext,ref _cairo,r64,r64,r64,r64)
    clang proc     "gtk_render_activity"               (ref _GtkStyleContext,ref _cairo,r64,r64,r64,r64)
    clang function "gtk_render_icon_pixbuf"            (ref _GtkStyleContext,ref _GtkIconSource,i32)ref _GdkPixbuf
    clang proc     "gtk_render_icon"                   (ref _GtkStyleContext,ref _cairo,ref _GdkPixbuf,r64,r64)
    clang proc     "gtk_render_insertion_cursor"       (ref _GtkStyleContext,ref _cairo,r64,r64,ref _PangoLayout,i32,i32)
    clang proc     "gtk_draw_insertion_cursor"         (ref _GtkWidget,ref _cairo,ref _cairo_rectangle_int,i32,i32,i32)
    clang function "_gtk_style_context_get_attributes" (ref _GSList,ref _GtkStyleContext,i32)ref _GSList
    clang function "gtk_symbolic_color_get_type"       ()u64
    clang function "gtk_symbolic_color_new_literal"    (ref _GdkRGBA)ref _GtkSymbolicColor
    clang function "gtk_symbolic_color_new_name"       (ref i8)ref _GtkSymbolicColor
    clang function "gtk_symbolic_color_new_shade"      (ref _GtkSymbolicColor,r64)ref _GtkSymbolicColor
    clang function "gtk_symbolic_color_new_alpha"      (ref _GtkSymbolicColor,r64)ref _GtkSymbolicColor
    clang function "gtk_symbolic_color_new_mix"        (ref _GtkSymbolicColor,ref _GtkSymbolicColor,r64)ref _GtkSymbolicColor
    clang function "gtk_symbolic_color_new_win32"      (ref i8,i32)ref _GtkSymbolicColor
    clang function "gtk_symbolic_color_ref"            (ref _GtkSymbolicColor)ref _GtkSymbolicColor
    clang proc     "gtk_symbolic_color_unref"          (ref _GtkSymbolicColor)
    clang function "gtk_symbolic_color_to_string"      (ref _GtkSymbolicColor)ref i8
    clang function "gtk_symbolic_color_resolve"        (ref _GtkSymbolicColor,ref _GtkStyleProperties,ref _GdkRGBA)i32
    clang function "gtk_gradient_get_type"             ()u64
    clang function "gtk_gradient_new_linear"           (r64,r64,r64,r64)ref _GtkGradient
    clang function "gtk_gradient_new_radial"           (r64,r64,r64,r64,r64,r64)ref _GtkGradient
    clang proc     "gtk_gradient_add_color_stop"       (ref _GtkGradient,r64,ref _GtkSymbolicColor)
    clang function "gtk_gradient_ref"                  (ref _GtkGradient)ref _GtkGradient
    clang proc     "gtk_gradient_unref"                (ref _GtkGradient)
    clang function "gtk_gradient_resolve"              (ref _GtkGradient,ref _GtkStyleProperties,ref ref _cairo_pattern)i32
    clang function "gtk_gradient_resolve_for_context"  (ref _GtkGradient,ref _GtkStyleContext)ref _cairo_pattern
    clang function "gtk_gradient_to_string"            (ref _GtkGradient)ref i8
    record _GtkGrid =
        var _GtkContainer container
        var ref _GtkGridPrivate priv
    end

    record _GtkGridPrivate =
        var int dummy    !empty record
    end

    record _GtkGridClass =
        var _GtkContainerClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
        var ref clang proc() _gtk_reserved5
        var ref clang proc() _gtk_reserved6
        var ref clang proc() _gtk_reserved7
        var ref clang proc() _gtk_reserved8
    end

    clang function "gtk_grid_get_type"                 ()u64
    clang function "gtk_grid_new"                      ()ref _GtkWidget
    clang proc     "gtk_grid_attach"                   (ref _GtkGrid,ref _GtkWidget,i32,i32,i32,i32)
    clang proc     "gtk_grid_attach_next_to"           (ref _GtkGrid,ref _GtkWidget,ref _GtkWidget,i32,i32,i32)
    clang function "gtk_grid_get_child_at"             (ref _GtkGrid,i32,i32)ref _GtkWidget
    clang proc     "gtk_grid_insert_row"               (ref _GtkGrid,i32)
    clang proc     "gtk_grid_insert_column"            (ref _GtkGrid,i32)
    clang proc     "gtk_grid_insert_next_to"           (ref _GtkGrid,ref _GtkWidget,i32)
    clang proc     "gtk_grid_set_row_homogeneous"      (ref _GtkGrid,i32)
    clang function "gtk_grid_get_row_homogeneous"      (ref _GtkGrid)i32
    clang proc     "gtk_grid_set_row_spacing"          (ref _GtkGrid,u32)
    clang function "gtk_grid_get_row_spacing"          (ref _GtkGrid)u32
    clang proc     "gtk_grid_set_column_homogeneous"   (ref _GtkGrid,i32)
    clang function "gtk_grid_get_column_homogeneous"   (ref _GtkGrid)i32
    clang proc     "gtk_grid_set_column_spacing"       (ref _GtkGrid,u32)
    clang function "gtk_grid_get_column_spacing"       (ref _GtkGrid)u32
    record _GtkIconInfo =
        var int dummy    !empty record
    end

    record _GtkIconTheme =
        var _GObject parent_instance
        var ref _GtkIconThemePrivate priv
    end

    record _GtkIconThemeClass =
        var _GObjectClass parent_class
        var ref clang proc(ref _GtkIconTheme) changed
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    record _GtkIconThemePrivate =
        var int dummy    !empty record
    end

    const GTK_ICON_LOOKUP_NO_SVG             = 1
    const GTK_ICON_LOOKUP_FORCE_SVG          = 2
    const GTK_ICON_LOOKUP_USE_BUILTIN        = 4
    const GTK_ICON_LOOKUP_GENERIC_FALLBACK   = 8
    const GTK_ICON_LOOKUP_FORCE_SIZE         = 16
    const GTK_ICON_THEME_NOT_FOUND           = 0
    const GTK_ICON_THEME_FAILED              = 1
    clang function "gtk_icon_theme_error_quark"        ()u32
    clang function "gtk_icon_theme_get_type"           ()u64
    clang function "gtk_icon_theme_new"                ()ref _GtkIconTheme
    clang function "gtk_icon_theme_get_default"        ()ref _GtkIconTheme
    clang function "gtk_icon_theme_get_for_screen"     (ref _GdkScreen)ref _GtkIconTheme
    clang proc     "gtk_icon_theme_set_screen"         (ref _GtkIconTheme,ref _GdkScreen)
    clang proc     "gtk_icon_theme_set_search_path"    (ref _GtkIconTheme,ref ref i8,i32)
    clang proc     "gtk_icon_theme_get_search_path"    (ref _GtkIconTheme,ref ref ref i8,ref i32)
    clang proc     "gtk_icon_theme_append_search_path" (ref _GtkIconTheme,ref i8)
    clang proc     "gtk_icon_theme_prepend_search_path" (ref _GtkIconTheme,ref i8)
    clang proc     "gtk_icon_theme_set_custom_theme"   (ref _GtkIconTheme,ref i8)
    clang function "gtk_icon_theme_has_icon"           (ref _GtkIconTheme,ref i8)i32
    clang function "gtk_icon_theme_get_icon_sizes"     (ref _GtkIconTheme,ref i8)ref i32
    clang function "gtk_icon_theme_lookup_icon"        (ref _GtkIconTheme,ref i8,i32,i32)ref _GtkIconInfo
    clang function "gtk_icon_theme_choose_icon"        (ref _GtkIconTheme,ref ref i8,i32,i32)ref _GtkIconInfo
    clang function "gtk_icon_theme_load_icon"          (ref _GtkIconTheme,ref i8,i32,i32,ref ref _GError)ref _GdkPixbuf
    clang function "gtk_icon_theme_lookup_by_gicon"    (ref _GtkIconTheme,ref _GIcon,i32,i32)ref _GtkIconInfo
    clang function "gtk_icon_theme_list_icons"         (ref _GtkIconTheme,ref i8)ref _GList
    clang function "gtk_icon_theme_list_contexts"      (ref _GtkIconTheme)ref _GList
    clang function "gtk_icon_theme_get_example_icon_name" (ref _GtkIconTheme)ref i8
    clang function "gtk_icon_theme_rescan_if_needed"   (ref _GtkIconTheme)i32
    clang proc     "gtk_icon_theme_add_builtin_icon"   (ref i8,i32,ref _GdkPixbuf)
    clang function "gtk_icon_info_get_type"            ()u64
    clang function "gtk_icon_info_copy"                (ref _GtkIconInfo)ref _GtkIconInfo
    clang proc     "gtk_icon_info_free"                (ref _GtkIconInfo)
    clang function "gtk_icon_info_new_for_pixbuf"      (ref _GtkIconTheme,ref _GdkPixbuf)ref _GtkIconInfo
    clang function "gtk_icon_info_get_base_size"       (ref _GtkIconInfo)i32
    clang function "gtk_icon_info_get_filename"        (ref _GtkIconInfo)ref i8
    clang function "gtk_icon_info_get_builtin_pixbuf"  (ref _GtkIconInfo)ref _GdkPixbuf
    clang function "gtk_icon_info_load_icon"           (ref _GtkIconInfo,ref ref _GError)ref _GdkPixbuf
    clang function "gtk_icon_info_load_symbolic"       (ref _GtkIconInfo,ref _GdkRGBA,ref _GdkRGBA,ref _GdkRGBA,ref _GdkRGBA,ref i32,ref ref _GError)ref _GdkPixbuf
    clang function "gtk_icon_info_load_symbolic_for_context" (ref _GtkIconInfo,ref _GtkStyleContext,ref i32,ref ref _GError)ref _GdkPixbuf
    clang function "gtk_icon_info_load_symbolic_for_style" (ref _GtkIconInfo,ref _GtkStyle,i32,ref i32,ref ref _GError)ref _GdkPixbuf
    clang proc     "gtk_icon_info_set_raw_coordinates" (ref _GtkIconInfo,i32)
    clang function "gtk_icon_info_get_embedded_rect"   (ref _GtkIconInfo,ref _cairo_rectangle_int)i32
    clang function "gtk_icon_info_get_attach_points"   (ref _GtkIconInfo,ref ref _GdkPoint,ref i32)i32
    clang function "gtk_icon_info_get_display_name"    (ref _GtkIconInfo)ref i8
    clang proc     "_gtk_icon_theme_check_reload"      (ref _GdkDisplay)
    clang proc     "_gtk_icon_theme_ensure_builtin_cache" ()
    clang function "gtk_tooltip_get_type"              ()u64
    clang proc     "gtk_tooltip_set_markup"            (ref _GtkTooltip,ref i8)
    clang proc     "gtk_tooltip_set_text"              (ref _GtkTooltip,ref i8)
    clang proc     "gtk_tooltip_set_icon"              (ref _GtkTooltip,ref _GdkPixbuf)
    clang proc     "gtk_tooltip_set_icon_from_stock"   (ref _GtkTooltip,ref i8,i32)
    clang proc     "gtk_tooltip_set_icon_from_icon_name" (ref _GtkTooltip,ref i8,i32)
    clang proc     "gtk_tooltip_set_icon_from_gicon"   (ref _GtkTooltip,ref _GIcon,i32)
    clang proc     "gtk_tooltip_set_custom"            (ref _GtkTooltip,ref _GtkWidget)
    clang proc     "gtk_tooltip_set_tip_area"          (ref _GtkTooltip,ref _cairo_rectangle_int)
    clang proc     "gtk_tooltip_trigger_tooltip_query" (ref _GdkDisplay)
    clang proc     "_gtk_tooltip_focus_in"             (ref _GtkWidget)
    clang proc     "_gtk_tooltip_focus_out"            (ref _GtkWidget)
    clang proc     "_gtk_tooltip_toggle_keyboard_mode" (ref _GtkWidget)
    clang proc     "_gtk_tooltip_handle_event"         (ref _GdkEvent)
    clang proc     "_gtk_tooltip_hide"                 (ref _GtkWidget)
    clang function "_gtk_widget_find_at_coords"        (ref _GdkWindow,i32,i32,ref i32,ref i32)ref _GtkWidget
    record _GtkIconView =
        var _GtkContainer parent
        var ref _GtkIconViewPrivate priv
    end

    record _GtkIconViewClass =
        var _GtkContainerClass parent_class
        var ref clang proc(ref _GtkIconView,ref _GtkTreePath) item_activated
        var ref clang proc(ref _GtkIconView) selection_changed
        var ref clang proc(ref _GtkIconView) select_all
        var ref clang proc(ref _GtkIconView) unselect_all
        var ref clang proc(ref _GtkIconView) select_cursor_item
        var ref clang proc(ref _GtkIconView) toggle_cursor_item
        var ref clang function(ref _GtkIconView,i32,i32)i32 move_cursor
        var ref clang function(ref _GtkIconView)i32 activate_cursor_item
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    record _GtkIconViewPrivate =
        var int dummy    !empty record
    end

    const GTK_ICON_VIEW_NO_DROP              = 0
    const GTK_ICON_VIEW_DROP_INTO            = 1
    const GTK_ICON_VIEW_DROP_LEFT            = 2
    const GTK_ICON_VIEW_DROP_RIGHT           = 3
    const GTK_ICON_VIEW_DROP_ABOVE           = 4
    const GTK_ICON_VIEW_DROP_BELOW           = 5
    clang function "gtk_icon_view_get_type"            ()u64
    clang function "gtk_icon_view_new"                 ()ref _GtkWidget
    clang function "gtk_icon_view_new_with_area"       (ref _GtkCellArea)ref _GtkWidget
    clang function "gtk_icon_view_new_with_model"      (ref _GtkTreeModel)ref _GtkWidget
    clang proc     "gtk_icon_view_set_model"           (ref _GtkIconView,ref _GtkTreeModel)
    clang function "gtk_icon_view_get_model"           (ref _GtkIconView)ref _GtkTreeModel
    clang proc     "gtk_icon_view_set_text_column"     (ref _GtkIconView,i32)
    clang function "gtk_icon_view_get_text_column"     (ref _GtkIconView)i32
    clang proc     "gtk_icon_view_set_markup_column"   (ref _GtkIconView,i32)
    clang function "gtk_icon_view_get_markup_column"   (ref _GtkIconView)i32
    clang proc     "gtk_icon_view_set_pixbuf_column"   (ref _GtkIconView,i32)
    clang function "gtk_icon_view_get_pixbuf_column"   (ref _GtkIconView)i32
    clang proc     "gtk_icon_view_set_item_orientation" (ref _GtkIconView,i32)
    clang function "gtk_icon_view_get_item_orientation" (ref _GtkIconView)i32
    clang proc     "gtk_icon_view_set_columns"         (ref _GtkIconView,i32)
    clang function "gtk_icon_view_get_columns"         (ref _GtkIconView)i32
    clang proc     "gtk_icon_view_set_item_width"      (ref _GtkIconView,i32)
    clang function "gtk_icon_view_get_item_width"      (ref _GtkIconView)i32
    clang proc     "gtk_icon_view_set_spacing"         (ref _GtkIconView,i32)
    clang function "gtk_icon_view_get_spacing"         (ref _GtkIconView)i32
    clang proc     "gtk_icon_view_set_row_spacing"     (ref _GtkIconView,i32)
    clang function "gtk_icon_view_get_row_spacing"     (ref _GtkIconView)i32
    clang proc     "gtk_icon_view_set_column_spacing"  (ref _GtkIconView,i32)
    clang function "gtk_icon_view_get_column_spacing"  (ref _GtkIconView)i32
    clang proc     "gtk_icon_view_set_margin"          (ref _GtkIconView,i32)
    clang function "gtk_icon_view_get_margin"          (ref _GtkIconView)i32
    clang proc     "gtk_icon_view_set_item_padding"    (ref _GtkIconView,i32)
    clang function "gtk_icon_view_get_item_padding"    (ref _GtkIconView)i32
    clang function "gtk_icon_view_get_path_at_pos"     (ref _GtkIconView,i32,i32)ref _GtkTreePath
    clang function "gtk_icon_view_get_item_at_pos"     (ref _GtkIconView,i32,i32,ref ref _GtkTreePath,ref ref _GtkCellRenderer)i32
    clang function "gtk_icon_view_get_visible_range"   (ref _GtkIconView,ref ref _GtkTreePath,ref ref _GtkTreePath)i32
    clang proc     "gtk_icon_view_selected_foreach"    (ref _GtkIconView,ref clang proc(ref _GtkIconView,ref _GtkTreePath,ref void),ref void)
    clang proc     "gtk_icon_view_set_selection_mode"  (ref _GtkIconView,i32)
    clang function "gtk_icon_view_get_selection_mode"  (ref _GtkIconView)i32
    clang proc     "gtk_icon_view_select_path"         (ref _GtkIconView,ref _GtkTreePath)
    clang proc     "gtk_icon_view_unselect_path"       (ref _GtkIconView,ref _GtkTreePath)
    clang function "gtk_icon_view_path_is_selected"    (ref _GtkIconView,ref _GtkTreePath)i32
    clang function "gtk_icon_view_get_item_row"        (ref _GtkIconView,ref _GtkTreePath)i32
    clang function "gtk_icon_view_get_item_column"     (ref _GtkIconView,ref _GtkTreePath)i32
    clang function "gtk_icon_view_get_selected_items"  (ref _GtkIconView)ref _GList
    clang proc     "gtk_icon_view_select_all"          (ref _GtkIconView)
    clang proc     "gtk_icon_view_unselect_all"        (ref _GtkIconView)
    clang proc     "gtk_icon_view_item_activated"      (ref _GtkIconView,ref _GtkTreePath)
    clang proc     "gtk_icon_view_set_cursor"          (ref _GtkIconView,ref _GtkTreePath,ref _GtkCellRenderer,i32)
    clang function "gtk_icon_view_get_cursor"          (ref _GtkIconView,ref ref _GtkTreePath,ref ref _GtkCellRenderer)i32
    clang proc     "gtk_icon_view_scroll_to_path"      (ref _GtkIconView,ref _GtkTreePath,i32,r32,r32)
    clang proc     "gtk_icon_view_enable_model_drag_source" (ref _GtkIconView,i32,ref _GtkTargetEntry,i32,i32)
    clang proc     "gtk_icon_view_enable_model_drag_dest" (ref _GtkIconView,ref _GtkTargetEntry,i32,i32)
    clang proc     "gtk_icon_view_unset_model_drag_source" (ref _GtkIconView)
    clang proc     "gtk_icon_view_unset_model_drag_dest" (ref _GtkIconView)
    clang proc     "gtk_icon_view_set_reorderable"     (ref _GtkIconView,i32)
    clang function "gtk_icon_view_get_reorderable"     (ref _GtkIconView)i32
    clang proc     "gtk_icon_view_set_drag_dest_item"  (ref _GtkIconView,ref _GtkTreePath,i32)
    clang proc     "gtk_icon_view_get_drag_dest_item"  (ref _GtkIconView,ref ref _GtkTreePath,ref i32)
    clang function "gtk_icon_view_get_dest_item_at_pos" (ref _GtkIconView,i32,i32,ref ref _GtkTreePath,ref i32)i32
    clang function "gtk_icon_view_create_drag_icon"    (ref _GtkIconView,ref _GtkTreePath)ref _cairo_surface
    clang proc     "gtk_icon_view_convert_widget_to_bin_window_coords" (ref _GtkIconView,i32,i32,ref i32,ref i32)
    clang function "gtk_icon_view_get_cell_rect"       (ref _GtkIconView,ref _GtkTreePath,ref _GtkCellRenderer,ref _cairo_rectangle_int)i32
    clang proc     "gtk_icon_view_set_tooltip_item"    (ref _GtkIconView,ref _GtkTooltip,ref _GtkTreePath)
    clang proc     "gtk_icon_view_set_tooltip_cell"    (ref _GtkIconView,ref _GtkTooltip,ref _GtkTreePath,ref _GtkCellRenderer)
    clang function "gtk_icon_view_get_tooltip_context" (ref _GtkIconView,ref i32,ref i32,i32,ref ref _GtkTreeModel,ref ref _GtkTreePath,ref _GtkTreeIter)i32
    clang proc     "gtk_icon_view_set_tooltip_column"  (ref _GtkIconView,i32)
    clang function "gtk_icon_view_get_tooltip_column"  (ref _GtkIconView)i32
    record _GtkImageMenuItem =
        var _GtkMenuItem menu_item
        var ref _GtkImageMenuItemPrivate priv
    end

    record _GtkImageMenuItemPrivate =
        var int dummy    !empty record
    end

    record _GtkImageMenuItemClass =
        var _GtkMenuItemClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_image_menu_item_get_type"      ()u64
    clang function "gtk_image_menu_item_new"           ()ref _GtkWidget
    clang function "gtk_image_menu_item_new_with_label" (ref i8)ref _GtkWidget
    clang function "gtk_image_menu_item_new_with_mnemonic" (ref i8)ref _GtkWidget
    clang function "gtk_image_menu_item_new_from_stock" (ref i8,ref _GtkAccelGroup)ref _GtkWidget
    clang proc     "gtk_image_menu_item_set_always_show_image" (ref _GtkImageMenuItem,i32)
    clang function "gtk_image_menu_item_get_always_show_image" (ref _GtkImageMenuItem)i32
    clang proc     "gtk_image_menu_item_set_image"     (ref _GtkImageMenuItem,ref _GtkWidget)
    clang function "gtk_image_menu_item_get_image"     (ref _GtkImageMenuItem)ref _GtkWidget
    clang proc     "gtk_image_menu_item_set_use_stock" (ref _GtkImageMenuItem,i32)
    clang function "gtk_image_menu_item_get_use_stock" (ref _GtkImageMenuItem)i32
    clang proc     "gtk_image_menu_item_set_accel_group" (ref _GtkImageMenuItem,ref _GtkAccelGroup)
    record _GtkIMContextInfo =
        var ref i8 context_id
        var ref i8 context_name
        var ref i8 domain
        var ref i8 domain_dirname
        var ref i8 default_locales
    end

    record _GtkIMContextSimple =
        var _GtkIMContext object
        var ref _GtkIMContextSimplePrivate priv
    end

    record _GtkIMContextSimplePrivate =
        var int dummy    !empty record
    end

    record _GtkIMContextSimpleClass =
        var _GtkIMContextClass parent_class
    end

    clang function "gtk_im_context_simple_get_type"    ()u64
    clang function "gtk_im_context_simple_new"         ()ref _GtkIMContext
    clang proc     "gtk_im_context_simple_add_table"   (ref _GtkIMContextSimple,ref u16,i32,i32)
    record _GtkIMMulticontext =
        var _GtkIMContext object
        var ref _GtkIMMulticontextPrivate priv
    end

    record _GtkIMMulticontextClass =
        var _GtkIMContextClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    record _GtkIMMulticontextPrivate =
        var int dummy    !empty record
    end

    clang function "gtk_im_multicontext_get_type"      ()u64
    clang function "gtk_im_multicontext_new"           ()ref _GtkIMContext
    clang proc     "gtk_im_multicontext_append_menuitems" (ref _GtkIMMulticontext,ref _GtkMenuShell)
    clang function "gtk_im_multicontext_get_context_id" (ref _GtkIMMulticontext)ref i8
    clang proc     "gtk_im_multicontext_set_context_id" (ref _GtkIMMulticontext,ref i8)
    record _GtkInfoBarPrivate =
        var int dummy    !empty record
    end

    record _GtkInfoBarClass =
        var _GtkBoxClass parent_class
        var ref clang proc(ref _GtkInfoBar,i32) response
        var ref clang proc(ref _GtkInfoBar) close
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    record _GtkInfoBar =
        var _GtkBox parent
        var ref _GtkInfoBarPrivate priv
    end

    clang function "gtk_info_bar_get_type"             ()u64
    clang function "gtk_info_bar_new"                  ()ref _GtkWidget
    clang function "gtk_info_bar_new_with_buttons"     (ref i8,...)ref _GtkWidget
    clang function "gtk_info_bar_get_action_area"      (ref _GtkInfoBar)ref _GtkWidget
    clang function "gtk_info_bar_get_content_area"     (ref _GtkInfoBar)ref _GtkWidget
    clang proc     "gtk_info_bar_add_action_widget"    (ref _GtkInfoBar,ref _GtkWidget,i32)
    clang function "gtk_info_bar_add_button"           (ref _GtkInfoBar,ref i8,i32)ref _GtkWidget
    clang proc     "gtk_info_bar_add_buttons"          (ref _GtkInfoBar,ref i8,...)
    clang proc     "gtk_info_bar_set_response_sensitive" (ref _GtkInfoBar,i32,i32)
    clang proc     "gtk_info_bar_set_default_response" (ref _GtkInfoBar,i32)
    clang proc     "gtk_info_bar_response"             (ref _GtkInfoBar,i32)
    clang proc     "gtk_info_bar_set_message_type"     (ref _GtkInfoBar,i32)
    clang function "gtk_info_bar_get_message_type"     (ref _GtkInfoBar)i32
    record _GtkInvisible =
        var _GtkWidget widget
        var ref _GtkInvisiblePrivate priv
    end

    record _GtkInvisiblePrivate =
        var int dummy    !empty record
    end

    record _GtkInvisibleClass =
        var _GtkWidgetClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_invisible_get_type"            ()u64
    clang function "gtk_invisible_new"                 ()ref _GtkWidget
    clang function "gtk_invisible_new_for_screen"      (ref _GdkScreen)ref _GtkWidget
    clang proc     "gtk_invisible_set_screen"          (ref _GtkInvisible,ref _GdkScreen)
    clang function "gtk_invisible_get_screen"          (ref _GtkInvisible)ref _GdkScreen
    record _GtkLayout =
        var _GtkContainer container
        var ref _GtkLayoutPrivate priv
    end

    record _GtkLayoutPrivate =
        var int dummy    !empty record
    end

    record _GtkLayoutClass =
        var _GtkContainerClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_layout_get_type"               ()u64
    clang function "gtk_layout_new"                    (ref _GtkAdjustment,ref _GtkAdjustment)ref _GtkWidget
    clang function "gtk_layout_get_bin_window"         (ref _GtkLayout)ref _GdkWindow
    clang proc     "gtk_layout_put"                    (ref _GtkLayout,ref _GtkWidget,i32,i32)
    clang proc     "gtk_layout_move"                   (ref _GtkLayout,ref _GtkWidget,i32,i32)
    clang proc     "gtk_layout_set_size"               (ref _GtkLayout,u32,u32)
    clang proc     "gtk_layout_get_size"               (ref _GtkLayout,ref u32,ref u32)
    clang function "gtk_layout_get_hadjustment"        (ref _GtkLayout)ref _GtkAdjustment
    clang function "gtk_layout_get_vadjustment"        (ref _GtkLayout)ref _GtkAdjustment
    clang proc     "gtk_layout_set_hadjustment"        (ref _GtkLayout,ref _GtkAdjustment)
    clang proc     "gtk_layout_set_vadjustment"        (ref _GtkLayout,ref _GtkAdjustment)
    record _GtkLevelBarClass =
        var _GtkWidgetClass parent_class
        var ref clang proc(ref _GtkLevelBar,ref i8) offset_changed
        var [16]ref void padding
    end

    record _GtkLevelBar =
        var _GtkWidget parent
        var ref _GtkLevelBarPrivate priv
    end

    record _GtkLevelBarPrivate =
        var int dummy    !empty record
    end

    clang function "gtk_level_bar_get_type"            ()u64
    clang function "gtk_level_bar_new"                 ()ref _GtkWidget
    clang function "gtk_level_bar_new_for_interval"    (r64,r64)ref _GtkWidget
    clang proc     "gtk_level_bar_set_mode"            (ref _GtkLevelBar,i32)
    clang function "gtk_level_bar_get_mode"            (ref _GtkLevelBar)i32
    clang proc     "gtk_level_bar_set_value"           (ref _GtkLevelBar,r64)
    clang function "gtk_level_bar_get_value"           (ref _GtkLevelBar)r64
    clang proc     "gtk_level_bar_set_min_value"       (ref _GtkLevelBar,r64)
    clang function "gtk_level_bar_get_min_value"       (ref _GtkLevelBar)r64
    clang proc     "gtk_level_bar_set_max_value"       (ref _GtkLevelBar,r64)
    clang function "gtk_level_bar_get_max_value"       (ref _GtkLevelBar)r64
    clang proc     "gtk_level_bar_add_offset_value"    (ref _GtkLevelBar,ref i8,r64)
    clang proc     "gtk_level_bar_remove_offset_value" (ref _GtkLevelBar,ref i8)
    clang function "gtk_level_bar_get_offset_value"    (ref _GtkLevelBar,ref i8,ref r64)i32
    record _GtkLinkButton =
        var _GtkButton parent_instance
        var ref _GtkLinkButtonPrivate priv
    end

    record _GtkLinkButtonClass =
        var _GtkButtonClass parent_class
        var ref clang function(ref _GtkLinkButton)i32 activate_link
        var ref clang proc() _gtk_padding1
        var ref clang proc() _gtk_padding2
        var ref clang proc() _gtk_padding3
        var ref clang proc() _gtk_padding4
    end

    record _GtkLinkButtonPrivate =
        var int dummy    !empty record
    end

    clang function "gtk_link_button_get_type"          ()u64
    clang function "gtk_link_button_new"               (ref i8)ref _GtkWidget
    clang function "gtk_link_button_new_with_label"    (ref i8,ref i8)ref _GtkWidget
    clang function "gtk_link_button_get_uri"           (ref _GtkLinkButton)ref i8
    clang proc     "gtk_link_button_set_uri"           (ref _GtkLinkButton,ref i8)
    clang function "gtk_link_button_get_visited"       (ref _GtkLinkButton)i32
    clang proc     "gtk_link_button_set_visited"       (ref _GtkLinkButton,i32)
    record _GtkLockButton =
        var _GtkButton parent
        var ref _GtkLockButtonPrivate priv
    end

    record _GtkLockButtonClass =
        var _GtkButtonClass parent_class
        var ref clang proc() reserved0
        var ref clang proc() reserved1
        var ref clang proc() reserved2
        var ref clang proc() reserved3
        var ref clang proc() reserved4
        var ref clang proc() reserved5
        var ref clang proc() reserved6
        var ref clang proc() reserved7
    end

    record _GtkLockButtonPrivate =
        var int dummy    !empty record
    end

    clang function "gtk_lock_button_get_type"          ()u64
    clang function "gtk_lock_button_new"               (ref _GPermission)ref _GtkWidget
    clang function "gtk_lock_button_get_permission"    (ref _GtkLockButton)ref _GPermission
    clang proc     "gtk_lock_button_set_permission"    (ref _GtkLockButton,ref _GPermission)
    clang function "gtk_get_major_version"             ()u32
    clang function "gtk_get_minor_version"             ()u32
    clang function "gtk_get_micro_version"             ()u32
    clang function "gtk_get_binary_age"                ()u32
    clang function "gtk_get_interface_age"             ()u32
    clang function "gtk_check_version"                 (u32,u32,u32)ref i8
    clang function "gtk_parse_args"                    (ref i32,ref ref ref i8)i32
    clang proc     "gtk_init"                          (ref i32,ref ref ref i8)
    clang function "gtk_init_check"                    (ref i32,ref ref ref i8)i32
    clang function "gtk_init_with_args"                (ref i32,ref ref ref i8,ref i8,ref _GOptionEntry,ref i8,ref ref _GError)i32
    clang function "gtk_get_option_group"              (i32)ref _GOptionGroup
    clang proc     "gtk_init_abi_check"                (ref i32,ref ref ref i8,i32,u64,u64)
    clang function "gtk_init_check_abi_check"          (ref i32,ref ref ref i8,i32,u64,u64)i32
    clang proc     "gtk_disable_setlocale"             ()
    clang function "gtk_get_default_language"          ()ref _PangoLanguage
    clang function "gtk_events_pending"                ()i32
    clang proc     "gtk_main_do_event"                 (ref _GdkEvent)
    clang proc     "gtk_main"                          ()
    clang function "gtk_main_level"                    ()u32
    clang proc     "gtk_main_quit"                     ()
    clang function "gtk_main_iteration"                ()i32
    clang function "gtk_main_iteration_do"             (i32)i32
    clang function "gtk_true"                          ()i32
    clang function "gtk_false"                         ()i32
    clang proc     "gtk_grab_add"                      (ref _GtkWidget)
    clang function "gtk_grab_get_current"              ()ref _GtkWidget
    clang proc     "gtk_grab_remove"                   (ref _GtkWidget)
    clang proc     "gtk_device_grab_add"               (ref _GtkWidget,ref _GdkDevice,i32)
    clang proc     "gtk_device_grab_remove"            (ref _GtkWidget,ref _GdkDevice)
    clang function "gtk_key_snooper_install"           (ref clang function(ref _GtkWidget,ref _GdkEventKey,ref void)i32,ref void)u32
    clang proc     "gtk_key_snooper_remove"            (u32)
    clang function "gtk_get_current_event"             ()ref _GdkEvent
    clang function "gtk_get_current_event_time"        ()u32
    clang function "gtk_get_current_event_state"       (ref i32)i32
    clang function "gtk_get_current_event_device"      ()ref _GdkDevice
    clang function "gtk_get_event_widget"              (ref _GdkEvent)ref _GtkWidget
    clang proc     "gtk_propagate_event"               (ref _GtkWidget,ref _GdkEvent)
    record _GtkMenuBar =
        var _GtkMenuShell menu_shell
        var ref _GtkMenuBarPrivate priv
    end

    record _GtkMenuBarPrivate =
        var int dummy    !empty record
    end

    record _GtkMenuBarClass =
        var _GtkMenuShellClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_menu_bar_get_type"             ()u64
    clang function "gtk_menu_bar_new"                  ()ref _GtkWidget
    clang function "gtk_menu_bar_new_from_model"       (ref _GMenuModel)ref _GtkWidget
    clang function "gtk_menu_bar_get_pack_direction"   (ref _GtkMenuBar)i32
    clang proc     "gtk_menu_bar_set_pack_direction"   (ref _GtkMenuBar,i32)
    clang function "gtk_menu_bar_get_child_pack_direction" (ref _GtkMenuBar)i32
    clang proc     "gtk_menu_bar_set_child_pack_direction" (ref _GtkMenuBar,i32)
    clang proc     "_gtk_menu_bar_cycle_focus"         (ref _GtkMenuBar,i32)
    record _GtkMenuButton =
        var _GtkToggleButton parent
        var ref _GtkMenuButtonPrivate priv
    end

    record _GtkMenuButtonClass =
        var _GtkToggleButtonClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    record _GtkMenuButtonPrivate =
        var int dummy    !empty record
    end

    clang function "gtk_menu_button_get_type"          ()u64
    clang function "gtk_menu_button_new"               ()ref _GtkWidget
    clang proc     "gtk_menu_button_set_popup"         (ref _GtkMenuButton,ref _GtkWidget)
    clang function "gtk_menu_button_get_popup"         (ref _GtkMenuButton)ref _GtkMenu
    clang proc     "gtk_menu_button_set_direction"     (ref _GtkMenuButton,i32)
    clang function "gtk_menu_button_get_direction"     (ref _GtkMenuButton)i32
    clang proc     "gtk_menu_button_set_menu_model"    (ref _GtkMenuButton,ref _GMenuModel)
    clang function "gtk_menu_button_get_menu_model"    (ref _GtkMenuButton)ref _GMenuModel
    clang proc     "gtk_menu_button_set_align_widget"  (ref _GtkMenuButton,ref _GtkWidget)
    clang function "gtk_menu_button_get_align_widget"  (ref _GtkMenuButton)ref _GtkWidget
    record _GtkSizeGroup =
        var _GObject parent_instance
        var ref _GtkSizeGroupPrivate priv
    end

    record _GtkSizeGroupPrivate =
        var int dummy    !empty record
    end

    record _GtkSizeGroupClass =
        var _GObjectClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    const GTK_SIZE_GROUP_NONE                = 0
    const GTK_SIZE_GROUP_HORIZONTAL          = 1
    const GTK_SIZE_GROUP_VERTICAL            = 2
    const GTK_SIZE_GROUP_BOTH                = 3
    clang function "gtk_size_group_get_type"           ()u64
    clang function "gtk_size_group_new"                (i32)ref _GtkSizeGroup
    clang proc     "gtk_size_group_set_mode"           (ref _GtkSizeGroup,i32)
    clang function "gtk_size_group_get_mode"           (ref _GtkSizeGroup)i32
    clang proc     "gtk_size_group_set_ignore_hidden"  (ref _GtkSizeGroup,i32)
    clang function "gtk_size_group_get_ignore_hidden"  (ref _GtkSizeGroup)i32
    clang proc     "gtk_size_group_add_widget"         (ref _GtkSizeGroup,ref _GtkWidget)
    clang proc     "gtk_size_group_remove_widget"      (ref _GtkSizeGroup,ref _GtkWidget)
    clang function "gtk_size_group_get_widgets"        (ref _GtkSizeGroup)ref _GSList
    record _GtkToolItem =
        var _GtkBin parent
        var ref _GtkToolItemPrivate priv
    end

    record _GtkToolItemClass =
        var _GtkBinClass parent_class
        var ref clang function(ref _GtkToolItem)i32 create_menu_proxy
        var ref clang proc(ref _GtkToolItem) toolbar_reconfigured
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    record _GtkToolItemPrivate =
        var int dummy    !empty record
    end

    clang function "gtk_tool_item_get_type"            ()u64
    clang function "gtk_tool_item_new"                 ()ref _GtkToolItem
    clang proc     "gtk_tool_item_set_homogeneous"     (ref _GtkToolItem,i32)
    clang function "gtk_tool_item_get_homogeneous"     (ref _GtkToolItem)i32
    clang proc     "gtk_tool_item_set_expand"          (ref _GtkToolItem,i32)
    clang function "gtk_tool_item_get_expand"          (ref _GtkToolItem)i32
    clang proc     "gtk_tool_item_set_tooltip_text"    (ref _GtkToolItem,ref i8)
    clang proc     "gtk_tool_item_set_tooltip_markup"  (ref _GtkToolItem,ref i8)
    clang proc     "gtk_tool_item_set_use_drag_window" (ref _GtkToolItem,i32)
    clang function "gtk_tool_item_get_use_drag_window" (ref _GtkToolItem)i32
    clang proc     "gtk_tool_item_set_visible_horizontal" (ref _GtkToolItem,i32)
    clang function "gtk_tool_item_get_visible_horizontal" (ref _GtkToolItem)i32
    clang proc     "gtk_tool_item_set_visible_vertical" (ref _GtkToolItem,i32)
    clang function "gtk_tool_item_get_visible_vertical" (ref _GtkToolItem)i32
    clang function "gtk_tool_item_get_is_important"    (ref _GtkToolItem)i32
    clang proc     "gtk_tool_item_set_is_important"    (ref _GtkToolItem,i32)
    clang function "gtk_tool_item_get_ellipsize_mode"  (ref _GtkToolItem)i32
    clang function "gtk_tool_item_get_icon_size"       (ref _GtkToolItem)i32
    clang function "gtk_tool_item_get_orientation"     (ref _GtkToolItem)i32
    clang function "gtk_tool_item_get_toolbar_style"   (ref _GtkToolItem)i32
    clang function "gtk_tool_item_get_relief_style"    (ref _GtkToolItem)i32
    clang function "gtk_tool_item_get_text_alignment"  (ref _GtkToolItem)r32
    clang function "gtk_tool_item_get_text_orientation" (ref _GtkToolItem)i32
    clang function "gtk_tool_item_get_text_size_group" (ref _GtkToolItem)ref _GtkSizeGroup
    clang function "gtk_tool_item_retrieve_proxy_menu_item" (ref _GtkToolItem)ref _GtkWidget
    clang function "gtk_tool_item_get_proxy_menu_item" (ref _GtkToolItem,ref i8)ref _GtkWidget
    clang proc     "gtk_tool_item_set_proxy_menu_item" (ref _GtkToolItem,ref i8,ref _GtkWidget)
    clang proc     "gtk_tool_item_rebuild_menu"        (ref _GtkToolItem)
    clang proc     "gtk_tool_item_toolbar_reconfigured" (ref _GtkToolItem)
    clang function "_gtk_tool_item_create_menu_proxy"  (ref _GtkToolItem)i32
    record _GtkToolButton =
        var _GtkToolItem parent
        var ref _GtkToolButtonPrivate priv
    end

    record _GtkToolButtonClass =
        var _GtkToolItemClass parent_class
        var u64 button_type
        var ref clang proc(ref _GtkToolButton) clicked
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    record _GtkToolButtonPrivate =
        var int dummy    !empty record
    end

    clang function "gtk_tool_button_get_type"          ()u64
    clang function "gtk_tool_button_new"               (ref _GtkWidget,ref i8)ref _GtkToolItem
    clang function "gtk_tool_button_new_from_stock"    (ref i8)ref _GtkToolItem
    clang proc     "gtk_tool_button_set_label"         (ref _GtkToolButton,ref i8)
    clang function "gtk_tool_button_get_label"         (ref _GtkToolButton)ref i8
    clang proc     "gtk_tool_button_set_use_underline" (ref _GtkToolButton,i32)
    clang function "gtk_tool_button_get_use_underline" (ref _GtkToolButton)i32
    clang proc     "gtk_tool_button_set_stock_id"      (ref _GtkToolButton,ref i8)
    clang function "gtk_tool_button_get_stock_id"      (ref _GtkToolButton)ref i8
    clang proc     "gtk_tool_button_set_icon_name"     (ref _GtkToolButton,ref i8)
    clang function "gtk_tool_button_get_icon_name"     (ref _GtkToolButton)ref i8
    clang proc     "gtk_tool_button_set_icon_widget"   (ref _GtkToolButton,ref _GtkWidget)
    clang function "gtk_tool_button_get_icon_widget"   (ref _GtkToolButton)ref _GtkWidget
    clang proc     "gtk_tool_button_set_label_widget"  (ref _GtkToolButton,ref _GtkWidget)
    clang function "gtk_tool_button_get_label_widget"  (ref _GtkToolButton)ref _GtkWidget
    clang function "_gtk_tool_button_get_button"       (ref _GtkToolButton)ref _GtkWidget
    record _GtkMenuToolButtonClass =
        var _GtkToolButtonClass parent_class
        var ref clang proc(ref _GtkMenuToolButton) show_menu
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    record _GtkMenuToolButton =
        var _GtkToolButton parent
        var ref _GtkMenuToolButtonPrivate priv
    end

    record _GtkMenuToolButtonPrivate =
        var int dummy    !empty record
    end

    clang function "gtk_menu_tool_button_get_type"     ()u64
    clang function "gtk_menu_tool_button_new"          (ref _GtkWidget,ref i8)ref _GtkToolItem
    clang function "gtk_menu_tool_button_new_from_stock" (ref i8)ref _GtkToolItem
    clang proc     "gtk_menu_tool_button_set_menu"     (ref _GtkMenuToolButton,ref _GtkWidget)
    clang function "gtk_menu_tool_button_get_menu"     (ref _GtkMenuToolButton)ref _GtkWidget
    clang proc     "gtk_menu_tool_button_set_arrow_tooltip_text" (ref _GtkMenuToolButton,ref i8)
    clang proc     "gtk_menu_tool_button_set_arrow_tooltip_markup" (ref _GtkMenuToolButton,ref i8)
    record _GtkMessageDialog =
        var _GtkDialog parent_instance
        var ref _GtkMessageDialogPrivate priv
    end

    record _GtkMessageDialogPrivate =
        var int dummy    !empty record
    end

    record _GtkMessageDialogClass =
        var _GtkDialogClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    const GTK_BUTTONS_NONE                   = 0
    const GTK_BUTTONS_OK                     = 1
    const GTK_BUTTONS_CLOSE                  = 2
    const GTK_BUTTONS_CANCEL                 = 3
    const GTK_BUTTONS_YES_NO                 = 4
    const GTK_BUTTONS_OK_CANCEL              = 5
    clang function "gtk_message_dialog_get_type"       ()u64
    clang function "gtk_message_dialog_new"            (ref _GtkWindow,i32,i32,i32,ref i8,...)ref _GtkWidget
    clang function "gtk_message_dialog_new_with_markup" (ref _GtkWindow,i32,i32,i32,ref i8,...)ref _GtkWidget
    clang proc     "gtk_message_dialog_set_image"      (ref _GtkMessageDialog,ref _GtkWidget)
    clang function "gtk_message_dialog_get_image"      (ref _GtkMessageDialog)ref _GtkWidget
    clang proc     "gtk_message_dialog_set_markup"     (ref _GtkMessageDialog,ref i8)
    clang proc     "gtk_message_dialog_format_secondary_text" (ref _GtkMessageDialog,ref i8,...)
    clang proc     "gtk_message_dialog_format_secondary_markup" (ref _GtkMessageDialog,ref i8,...)
    clang function "gtk_message_dialog_get_message_area" (ref _GtkMessageDialog)ref _GtkWidget
    record _GtkMountOperation =
        var _GMountOperation parent_instance
        var ref _GtkMountOperationPrivate priv
    end

    record _GtkMountOperationClass =
        var _GMountOperationClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    record _GtkMountOperationPrivate =
        var int dummy    !empty record
    end

    clang function "gtk_mount_operation_get_type"      ()u64
    clang function "gtk_mount_operation_new"           (ref _GtkWindow)ref _GMountOperation
    clang function "gtk_mount_operation_is_showing"    (ref _GtkMountOperation)i32
    clang proc     "gtk_mount_operation_set_parent"    (ref _GtkMountOperation,ref _GtkWindow)
    clang function "gtk_mount_operation_get_parent"    (ref _GtkMountOperation)ref _GtkWindow
    clang proc     "gtk_mount_operation_set_screen"    (ref _GtkMountOperation,ref _GdkScreen)
    clang function "gtk_mount_operation_get_screen"    (ref _GtkMountOperation)ref _GdkScreen
    const GTK_NOTEBOOK_TAB_FIRST             = 0
    const GTK_NOTEBOOK_TAB_LAST              = 1
    record _GtkNotebook =
        var _GtkContainer container
        var ref _GtkNotebookPrivate priv
    end

    record _GtkNotebookPrivate =
        var int dummy    !empty record
    end

    record _GtkNotebookClass =
        var _GtkContainerClass parent_class
        var ref clang proc(ref _GtkNotebook,ref _GtkWidget,u32) switch_page
        var ref clang function(ref _GtkNotebook,i32)i32 select_page
        var ref clang function(ref _GtkNotebook,i32)i32 focus_tab
        var ref clang function(ref _GtkNotebook,i32)i32 change_current_page
        var ref clang proc(ref _GtkNotebook,i32) move_focus_out
        var ref clang function(ref _GtkNotebook,i32,i32)i32 reorder_tab
        var ref clang function(ref _GtkNotebook,ref _GtkWidget,ref _GtkWidget,ref _GtkWidget,i32)i32 insert_page
        var ref clang function(ref _GtkNotebook,ref _GtkWidget,i32,i32)ref _GtkNotebook create_window
        var ref clang proc(ref _GtkNotebook,ref _GtkWidget,u32) page_reordered
        var ref clang proc(ref _GtkNotebook,ref _GtkWidget,u32) page_removed
        var ref clang proc(ref _GtkNotebook,ref _GtkWidget,u32) page_added
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
        var ref clang proc() _gtk_reserved5
        var ref clang proc() _gtk_reserved6
        var ref clang proc() _gtk_reserved7
        var ref clang proc() _gtk_reserved8
    end

    clang function "gtk_notebook_get_type"             ()u64
    clang function "gtk_notebook_new"                  ()ref _GtkWidget
    clang function "gtk_notebook_append_page"          (ref _GtkNotebook,ref _GtkWidget,ref _GtkWidget)i32
    clang function "gtk_notebook_append_page_menu"     (ref _GtkNotebook,ref _GtkWidget,ref _GtkWidget,ref _GtkWidget)i32
    clang function "gtk_notebook_prepend_page"         (ref _GtkNotebook,ref _GtkWidget,ref _GtkWidget)i32
    clang function "gtk_notebook_prepend_page_menu"    (ref _GtkNotebook,ref _GtkWidget,ref _GtkWidget,ref _GtkWidget)i32
    clang function "gtk_notebook_insert_page"          (ref _GtkNotebook,ref _GtkWidget,ref _GtkWidget,i32)i32
    clang function "gtk_notebook_insert_page_menu"     (ref _GtkNotebook,ref _GtkWidget,ref _GtkWidget,ref _GtkWidget,i32)i32
    clang proc     "gtk_notebook_remove_page"          (ref _GtkNotebook,i32)
    clang proc     "gtk_notebook_set_group_name"       (ref _GtkNotebook,ref i8)
    clang function "gtk_notebook_get_group_name"       (ref _GtkNotebook)ref i8
    clang function "gtk_notebook_get_current_page"     (ref _GtkNotebook)i32
    clang function "gtk_notebook_get_nth_page"         (ref _GtkNotebook,i32)ref _GtkWidget
    clang function "gtk_notebook_get_n_pages"          (ref _GtkNotebook)i32
    clang function "gtk_notebook_page_num"             (ref _GtkNotebook,ref _GtkWidget)i32
    clang proc     "gtk_notebook_set_current_page"     (ref _GtkNotebook,i32)
    clang proc     "gtk_notebook_next_page"            (ref _GtkNotebook)
    clang proc     "gtk_notebook_prev_page"            (ref _GtkNotebook)
    clang proc     "gtk_notebook_set_show_border"      (ref _GtkNotebook,i32)
    clang function "gtk_notebook_get_show_border"      (ref _GtkNotebook)i32
    clang proc     "gtk_notebook_set_show_tabs"        (ref _GtkNotebook,i32)
    clang function "gtk_notebook_get_show_tabs"        (ref _GtkNotebook)i32
    clang proc     "gtk_notebook_set_tab_pos"          (ref _GtkNotebook,i32)
    clang function "gtk_notebook_get_tab_pos"          (ref _GtkNotebook)i32
    clang proc     "gtk_notebook_set_scrollable"       (ref _GtkNotebook,i32)
    clang function "gtk_notebook_get_scrollable"       (ref _GtkNotebook)i32
    clang function "gtk_notebook_get_tab_hborder"      (ref _GtkNotebook)u16
    clang function "gtk_notebook_get_tab_vborder"      (ref _GtkNotebook)u16
    clang proc     "gtk_notebook_popup_enable"         (ref _GtkNotebook)
    clang proc     "gtk_notebook_popup_disable"        (ref _GtkNotebook)
    clang function "gtk_notebook_get_tab_label"        (ref _GtkNotebook,ref _GtkWidget)ref _GtkWidget
    clang proc     "gtk_notebook_set_tab_label"        (ref _GtkNotebook,ref _GtkWidget,ref _GtkWidget)
    clang proc     "gtk_notebook_set_tab_label_text"   (ref _GtkNotebook,ref _GtkWidget,ref i8)
    clang function "gtk_notebook_get_tab_label_text"   (ref _GtkNotebook,ref _GtkWidget)ref i8
    clang function "gtk_notebook_get_menu_label"       (ref _GtkNotebook,ref _GtkWidget)ref _GtkWidget
    clang proc     "gtk_notebook_set_menu_label"       (ref _GtkNotebook,ref _GtkWidget,ref _GtkWidget)
    clang proc     "gtk_notebook_set_menu_label_text"  (ref _GtkNotebook,ref _GtkWidget,ref i8)
    clang function "gtk_notebook_get_menu_label_text"  (ref _GtkNotebook,ref _GtkWidget)ref i8
    clang proc     "gtk_notebook_reorder_child"        (ref _GtkNotebook,ref _GtkWidget,i32)
    clang function "gtk_notebook_get_tab_reorderable"  (ref _GtkNotebook,ref _GtkWidget)i32
    clang proc     "gtk_notebook_set_tab_reorderable"  (ref _GtkNotebook,ref _GtkWidget,i32)
    clang function "gtk_notebook_get_tab_detachable"   (ref _GtkNotebook,ref _GtkWidget)i32
    clang proc     "gtk_notebook_set_tab_detachable"   (ref _GtkNotebook,ref _GtkWidget,i32)
    clang function "gtk_notebook_get_action_widget"    (ref _GtkNotebook,i32)ref _GtkWidget
    clang proc     "gtk_notebook_set_action_widget"    (ref _GtkNotebook,ref _GtkWidget,i32)
    record _GtkNumerableIcon =
        var _GEmblemedIcon parent
        var ref _GtkNumerableIconPrivate priv
    end

    record _GtkNumerableIconClass =
        var _GEmblemedIconClass parent_class
        var [16]ref void padding
    end

    record _GtkNumerableIconPrivate =
        var int dummy    !empty record
    end

    clang function "gtk_numerable_icon_get_type"       ()u64
    clang function "gtk_numerable_icon_new"            (ref _GIcon)ref _GIcon
    clang function "gtk_numerable_icon_new_with_style_context" (ref _GIcon,ref _GtkStyleContext)ref _GIcon
    clang function "gtk_numerable_icon_get_style_context" (ref _GtkNumerableIcon)ref _GtkStyleContext
    clang proc     "gtk_numerable_icon_set_style_context" (ref _GtkNumerableIcon,ref _GtkStyleContext)
    clang function "gtk_numerable_icon_get_count"      (ref _GtkNumerableIcon)i32
    clang proc     "gtk_numerable_icon_set_count"      (ref _GtkNumerableIcon,i32)
    clang function "gtk_numerable_icon_get_label"      (ref _GtkNumerableIcon)ref i8
    clang proc     "gtk_numerable_icon_set_label"      (ref _GtkNumerableIcon,ref i8)
    clang proc     "gtk_numerable_icon_set_background_gicon" (ref _GtkNumerableIcon,ref _GIcon)
    clang function "gtk_numerable_icon_get_background_gicon" (ref _GtkNumerableIcon)ref _GIcon
    clang proc     "gtk_numerable_icon_set_background_icon_name" (ref _GtkNumerableIcon,ref i8)
    clang function "gtk_numerable_icon_get_background_icon_name" (ref _GtkNumerableIcon)ref i8
    record _GtkOffscreenWindow =
        var _GtkWindow parent_object
    end

    record _GtkOffscreenWindowClass =
        var _GtkWindowClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_offscreen_window_get_type"     ()u64
    clang function "gtk_offscreen_window_new"          ()ref _GtkWidget
    clang function "gtk_offscreen_window_get_surface"  (ref _GtkOffscreenWindow)ref _cairo_surface
    clang function "gtk_offscreen_window_get_pixbuf"   (ref _GtkOffscreenWindow)ref _GdkPixbuf
    record _GtkOrientable =
        var int dummy    !empty record
    end

    record _GtkOrientableIface =
        var _GTypeInterface base_iface
    end

    clang function "gtk_orientable_get_type"           ()u64
    clang proc     "gtk_orientable_set_orientation"    (ref _GtkOrientable,i32)
    clang function "gtk_orientable_get_orientation"    (ref _GtkOrientable)i32
    record _GtkOverlay =
        var _GtkBin parent
        var ref _GtkOverlayPrivate priv
    end

    record _GtkOverlayClass =
        var _GtkBinClass parent_class
        var ref clang function(ref _GtkOverlay,ref _GtkWidget,ref _cairo_rectangle_int)i32 get_child_position
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
        var ref clang proc() _gtk_reserved5
        var ref clang proc() _gtk_reserved6
        var ref clang proc() _gtk_reserved7
        var ref clang proc() _gtk_reserved8
    end

    record _GtkOverlayPrivate =
        var int dummy    !empty record
    end

    clang function "gtk_overlay_get_type"              ()u64
    clang function "gtk_overlay_new"                   ()ref _GtkWidget
    clang proc     "gtk_overlay_add_overlay"           (ref _GtkOverlay,ref _GtkWidget)
    record _GtkPaperSize =
        var int dummy    !empty record
    end

    clang function "gtk_paper_size_get_type"           ()u64
    clang function "gtk_paper_size_new"                (ref i8)ref _GtkPaperSize
    clang function "gtk_paper_size_new_from_ppd"       (ref i8,ref i8,r64,r64)ref _GtkPaperSize
    clang function "gtk_paper_size_new_custom"         (ref i8,ref i8,r64,r64,i32)ref _GtkPaperSize
    clang function "gtk_paper_size_copy"               (ref _GtkPaperSize)ref _GtkPaperSize
    clang proc     "gtk_paper_size_free"               (ref _GtkPaperSize)
    clang function "gtk_paper_size_is_equal"           (ref _GtkPaperSize,ref _GtkPaperSize)i32
    clang function "gtk_paper_size_get_paper_sizes"    (i32)ref _GList
    clang function "gtk_paper_size_get_name"           (ref _GtkPaperSize)ref i8
    clang function "gtk_paper_size_get_display_name"   (ref _GtkPaperSize)ref i8
    clang function "gtk_paper_size_get_ppd_name"       (ref _GtkPaperSize)ref i8
    clang function "gtk_paper_size_get_width"          (ref _GtkPaperSize,i32)r64
    clang function "gtk_paper_size_get_height"         (ref _GtkPaperSize,i32)r64
    clang function "gtk_paper_size_is_custom"          (ref _GtkPaperSize)i32
    clang proc     "gtk_paper_size_set_size"           (ref _GtkPaperSize,r64,r64,i32)
    clang function "gtk_paper_size_get_default_top_margin" (ref _GtkPaperSize,i32)r64
    clang function "gtk_paper_size_get_default_bottom_margin" (ref _GtkPaperSize,i32)r64
    clang function "gtk_paper_size_get_default_left_margin" (ref _GtkPaperSize,i32)r64
    clang function "gtk_paper_size_get_default_right_margin" (ref _GtkPaperSize,i32)r64
    clang function "gtk_paper_size_get_default"        ()ref i8
    clang function "gtk_paper_size_new_from_key_file"  (ref _GKeyFile,ref i8,ref ref _GError)ref _GtkPaperSize
    clang proc     "gtk_paper_size_to_key_file"        (ref _GtkPaperSize,ref _GKeyFile,ref i8)
    record _GtkPageSetup =
        var int dummy    !empty record
    end

    clang function "gtk_page_setup_get_type"           ()u64
    clang function "gtk_page_setup_new"                ()ref _GtkPageSetup
    clang function "gtk_page_setup_copy"               (ref _GtkPageSetup)ref _GtkPageSetup
    clang function "gtk_page_setup_get_orientation"    (ref _GtkPageSetup)i32
    clang proc     "gtk_page_setup_set_orientation"    (ref _GtkPageSetup,i32)
    clang function "gtk_page_setup_get_paper_size"     (ref _GtkPageSetup)ref _GtkPaperSize
    clang proc     "gtk_page_setup_set_paper_size"     (ref _GtkPageSetup,ref _GtkPaperSize)
    clang function "gtk_page_setup_get_top_margin"     (ref _GtkPageSetup,i32)r64
    clang proc     "gtk_page_setup_set_top_margin"     (ref _GtkPageSetup,r64,i32)
    clang function "gtk_page_setup_get_bottom_margin"  (ref _GtkPageSetup,i32)r64
    clang proc     "gtk_page_setup_set_bottom_margin"  (ref _GtkPageSetup,r64,i32)
    clang function "gtk_page_setup_get_left_margin"    (ref _GtkPageSetup,i32)r64
    clang proc     "gtk_page_setup_set_left_margin"    (ref _GtkPageSetup,r64,i32)
    clang function "gtk_page_setup_get_right_margin"   (ref _GtkPageSetup,i32)r64
    clang proc     "gtk_page_setup_set_right_margin"   (ref _GtkPageSetup,r64,i32)
    clang proc     "gtk_page_setup_set_paper_size_and_default_margins" (ref _GtkPageSetup,ref _GtkPaperSize)
    clang function "gtk_page_setup_get_paper_width"    (ref _GtkPageSetup,i32)r64
    clang function "gtk_page_setup_get_paper_height"   (ref _GtkPageSetup,i32)r64
    clang function "gtk_page_setup_get_page_width"     (ref _GtkPageSetup,i32)r64
    clang function "gtk_page_setup_get_page_height"    (ref _GtkPageSetup,i32)r64
    clang function "gtk_page_setup_new_from_file"      (ref i8,ref ref _GError)ref _GtkPageSetup
    clang function "gtk_page_setup_load_file"          (ref _GtkPageSetup,ref i8,ref ref _GError)i32
    clang function "gtk_page_setup_to_file"            (ref _GtkPageSetup,ref i8,ref ref _GError)i32
    clang function "gtk_page_setup_new_from_key_file"  (ref _GKeyFile,ref i8,ref ref _GError)ref _GtkPageSetup
    clang function "gtk_page_setup_load_key_file"      (ref _GtkPageSetup,ref _GKeyFile,ref i8,ref ref _GError)i32
    clang proc     "gtk_page_setup_to_key_file"        (ref _GtkPageSetup,ref _GKeyFile,ref i8)
    record _GtkPaned =
        var _GtkContainer container
        var ref _GtkPanedPrivate priv
    end

    record _GtkPanedClass =
        var _GtkContainerClass parent_class
        var ref clang function(ref _GtkPaned,i32)i32 cycle_child_focus
        var ref clang function(ref _GtkPaned)i32 toggle_handle_focus
        var ref clang function(ref _GtkPaned,i32)i32 move_handle
        var ref clang function(ref _GtkPaned,i32)i32 cycle_handle_focus
        var ref clang function(ref _GtkPaned)i32 accept_position
        var ref clang function(ref _GtkPaned)i32 cancel_position
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    record _GtkPanedPrivate =
        var int dummy    !empty record
    end

    clang function "gtk_paned_get_type"                ()u64
    clang function "gtk_paned_new"                     (i32)ref _GtkWidget
    clang proc     "gtk_paned_add1"                    (ref _GtkPaned,ref _GtkWidget)
    clang proc     "gtk_paned_add2"                    (ref _GtkPaned,ref _GtkWidget)
    clang proc     "gtk_paned_pack1"                   (ref _GtkPaned,ref _GtkWidget,i32,i32)
    clang proc     "gtk_paned_pack2"                   (ref _GtkPaned,ref _GtkWidget,i32,i32)
    clang function "gtk_paned_get_position"            (ref _GtkPaned)i32
    clang proc     "gtk_paned_set_position"            (ref _GtkPaned,i32)
    clang function "gtk_paned_get_child1"              (ref _GtkPaned)ref _GtkWidget
    clang function "gtk_paned_get_child2"              (ref _GtkPaned)ref _GtkWidget
    clang function "gtk_paned_get_handle_window"       (ref _GtkPaned)ref _GdkWindow
    record _GtkPrintContext =
        var int dummy    !empty record
    end

    clang function "gtk_print_context_get_type"        ()u64
    clang function "gtk_print_context_get_cairo_context" (ref _GtkPrintContext)ref _cairo
    clang function "gtk_print_context_get_page_setup"  (ref _GtkPrintContext)ref _GtkPageSetup
    clang function "gtk_print_context_get_width"       (ref _GtkPrintContext)r64
    clang function "gtk_print_context_get_height"      (ref _GtkPrintContext)r64
    clang function "gtk_print_context_get_dpi_x"       (ref _GtkPrintContext)r64
    clang function "gtk_print_context_get_dpi_y"       (ref _GtkPrintContext)r64
    clang function "gtk_print_context_get_hard_margins" (ref _GtkPrintContext,ref r64,ref r64,ref r64,ref r64)i32
    clang function "gtk_print_context_get_pango_fontmap" (ref _GtkPrintContext)ref _PangoFontMap
    clang function "gtk_print_context_create_pango_context" (ref _GtkPrintContext)ref _PangoContext
    clang function "gtk_print_context_create_pango_layout" (ref _GtkPrintContext)ref _PangoLayout
    clang proc     "gtk_print_context_set_cairo_context" (ref _GtkPrintContext,ref _cairo,r64,r64)
    record _GtkPrintSettings =
        var int dummy    !empty record
    end

    record _GtkPageRange =
        var i32 start
        var i32 end
    end

    clang function "gtk_print_settings_get_type"       ()u64
    clang function "gtk_print_settings_new"            ()ref _GtkPrintSettings
    clang function "gtk_print_settings_copy"           (ref _GtkPrintSettings)ref _GtkPrintSettings
    clang function "gtk_print_settings_new_from_file"  (ref i8,ref ref _GError)ref _GtkPrintSettings
    clang function "gtk_print_settings_load_file"      (ref _GtkPrintSettings,ref i8,ref ref _GError)i32
    clang function "gtk_print_settings_to_file"        (ref _GtkPrintSettings,ref i8,ref ref _GError)i32
    clang function "gtk_print_settings_new_from_key_file" (ref _GKeyFile,ref i8,ref ref _GError)ref _GtkPrintSettings
    clang function "gtk_print_settings_load_key_file"  (ref _GtkPrintSettings,ref _GKeyFile,ref i8,ref ref _GError)i32
    clang proc     "gtk_print_settings_to_key_file"    (ref _GtkPrintSettings,ref _GKeyFile,ref i8)
    clang function "gtk_print_settings_has_key"        (ref _GtkPrintSettings,ref i8)i32
    clang function "gtk_print_settings_get"            (ref _GtkPrintSettings,ref i8)ref i8
    clang proc     "gtk_print_settings_set"            (ref _GtkPrintSettings,ref i8,ref i8)
    clang proc     "gtk_print_settings_unset"          (ref _GtkPrintSettings,ref i8)
    clang proc     "gtk_print_settings_foreach"        (ref _GtkPrintSettings,ref clang proc(ref i8,ref i8,ref void),ref void)
    clang function "gtk_print_settings_get_bool"       (ref _GtkPrintSettings,ref i8)i32
    clang proc     "gtk_print_settings_set_bool"       (ref _GtkPrintSettings,ref i8,i32)
    clang function "gtk_print_settings_get_double"     (ref _GtkPrintSettings,ref i8)r64
    clang function "gtk_print_settings_get_double_with_default" (ref _GtkPrintSettings,ref i8,r64)r64
    clang proc     "gtk_print_settings_set_double"     (ref _GtkPrintSettings,ref i8,r64)
    clang function "gtk_print_settings_get_length"     (ref _GtkPrintSettings,ref i8,i32)r64
    clang proc     "gtk_print_settings_set_length"     (ref _GtkPrintSettings,ref i8,r64,i32)
    clang function "gtk_print_settings_get_int"        (ref _GtkPrintSettings,ref i8)i32
    clang function "gtk_print_settings_get_int_with_default" (ref _GtkPrintSettings,ref i8,i32)i32
    clang proc     "gtk_print_settings_set_int"        (ref _GtkPrintSettings,ref i8,i32)
    clang function "gtk_print_settings_get_printer"    (ref _GtkPrintSettings)ref i8
    clang proc     "gtk_print_settings_set_printer"    (ref _GtkPrintSettings,ref i8)
    clang function "gtk_print_settings_get_orientation" (ref _GtkPrintSettings)i32
    clang proc     "gtk_print_settings_set_orientation" (ref _GtkPrintSettings,i32)
    clang function "gtk_print_settings_get_paper_size" (ref _GtkPrintSettings)ref _GtkPaperSize
    clang proc     "gtk_print_settings_set_paper_size" (ref _GtkPrintSettings,ref _GtkPaperSize)
    clang function "gtk_print_settings_get_paper_width" (ref _GtkPrintSettings,i32)r64
    clang proc     "gtk_print_settings_set_paper_width" (ref _GtkPrintSettings,r64,i32)
    clang function "gtk_print_settings_get_paper_height" (ref _GtkPrintSettings,i32)r64
    clang proc     "gtk_print_settings_set_paper_height" (ref _GtkPrintSettings,r64,i32)
    clang function "gtk_print_settings_get_use_color"  (ref _GtkPrintSettings)i32
    clang proc     "gtk_print_settings_set_use_color"  (ref _GtkPrintSettings,i32)
    clang function "gtk_print_settings_get_collate"    (ref _GtkPrintSettings)i32
    clang proc     "gtk_print_settings_set_collate"    (ref _GtkPrintSettings,i32)
    clang function "gtk_print_settings_get_reverse"    (ref _GtkPrintSettings)i32
    clang proc     "gtk_print_settings_set_reverse"    (ref _GtkPrintSettings,i32)
    clang function "gtk_print_settings_get_duplex"     (ref _GtkPrintSettings)i32
    clang proc     "gtk_print_settings_set_duplex"     (ref _GtkPrintSettings,i32)
    clang function "gtk_print_settings_get_quality"    (ref _GtkPrintSettings)i32
    clang proc     "gtk_print_settings_set_quality"    (ref _GtkPrintSettings,i32)
    clang function "gtk_print_settings_get_n_copies"   (ref _GtkPrintSettings)i32
    clang proc     "gtk_print_settings_set_n_copies"   (ref _GtkPrintSettings,i32)
    clang function "gtk_print_settings_get_number_up"  (ref _GtkPrintSettings)i32
    clang proc     "gtk_print_settings_set_number_up"  (ref _GtkPrintSettings,i32)
    clang function "gtk_print_settings_get_number_up_layout" (ref _GtkPrintSettings)i32
    clang proc     "gtk_print_settings_set_number_up_layout" (ref _GtkPrintSettings,i32)
    clang function "gtk_print_settings_get_resolution" (ref _GtkPrintSettings)i32
    clang proc     "gtk_print_settings_set_resolution" (ref _GtkPrintSettings,i32)
    clang function "gtk_print_settings_get_resolution_x" (ref _GtkPrintSettings)i32
    clang function "gtk_print_settings_get_resolution_y" (ref _GtkPrintSettings)i32
    clang proc     "gtk_print_settings_set_resolution_xy" (ref _GtkPrintSettings,i32,i32)
    clang function "gtk_print_settings_get_printer_lpi" (ref _GtkPrintSettings)r64
    clang proc     "gtk_print_settings_set_printer_lpi" (ref _GtkPrintSettings,r64)
    clang function "gtk_print_settings_get_scale"      (ref _GtkPrintSettings)r64
    clang proc     "gtk_print_settings_set_scale"      (ref _GtkPrintSettings,r64)
    clang function "gtk_print_settings_get_print_pages" (ref _GtkPrintSettings)i32
    clang proc     "gtk_print_settings_set_print_pages" (ref _GtkPrintSettings,i32)
    clang function "gtk_print_settings_get_page_ranges" (ref _GtkPrintSettings,ref i32)ref _GtkPageRange
    clang proc     "gtk_print_settings_set_page_ranges" (ref _GtkPrintSettings,ref _GtkPageRange,i32)
    clang function "gtk_print_settings_get_page_set"   (ref _GtkPrintSettings)i32
    clang proc     "gtk_print_settings_set_page_set"   (ref _GtkPrintSettings,i32)
    clang function "gtk_print_settings_get_default_source" (ref _GtkPrintSettings)ref i8
    clang proc     "gtk_print_settings_set_default_source" (ref _GtkPrintSettings,ref i8)
    clang function "gtk_print_settings_get_media_type" (ref _GtkPrintSettings)ref i8
    clang proc     "gtk_print_settings_set_media_type" (ref _GtkPrintSettings,ref i8)
    clang function "gtk_print_settings_get_dither"     (ref _GtkPrintSettings)ref i8
    clang proc     "gtk_print_settings_set_dither"     (ref _GtkPrintSettings,ref i8)
    clang function "gtk_print_settings_get_finishings" (ref _GtkPrintSettings)ref i8
    clang proc     "gtk_print_settings_set_finishings" (ref _GtkPrintSettings,ref i8)
    clang function "gtk_print_settings_get_output_bin" (ref _GtkPrintSettings)ref i8
    clang proc     "gtk_print_settings_set_output_bin" (ref _GtkPrintSettings,ref i8)
    record _GtkPrintOperationPreview =
        var int dummy    !empty record
    end

    record _GtkPrintOperationPreviewIface =
        var _GTypeInterface g_iface
        var ref clang proc(ref _GtkPrintOperationPreview,ref _GtkPrintContext) ready
        var ref clang proc(ref _GtkPrintOperationPreview,ref _GtkPrintContext,ref _GtkPageSetup) got_page_size
        var ref clang proc(ref _GtkPrintOperationPreview,i32) render_page
        var ref clang function(ref _GtkPrintOperationPreview,i32)i32 is_selected
        var ref clang proc(ref _GtkPrintOperationPreview) end_preview
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
        var ref clang proc() _gtk_reserved5
        var ref clang proc() _gtk_reserved6
        var ref clang proc() _gtk_reserved7
        var ref clang proc() _gtk_reserved8
    end

    clang function "gtk_print_operation_preview_get_type" ()u64
    clang proc     "gtk_print_operation_preview_render_page" (ref _GtkPrintOperationPreview,i32)
    clang proc     "gtk_print_operation_preview_end_preview" (ref _GtkPrintOperationPreview)
    clang function "gtk_print_operation_preview_is_selected" (ref _GtkPrintOperationPreview,i32)i32
    record _GtkPrintOperationClass =
        var _GObjectClass parent_class
        var ref clang proc(ref _GtkPrintOperation,i32) done
        var ref clang proc(ref _GtkPrintOperation,ref _GtkPrintContext) begin_print
        var ref clang function(ref _GtkPrintOperation,ref _GtkPrintContext)i32 paginate
        var ref clang proc(ref _GtkPrintOperation,ref _GtkPrintContext,i32,ref _GtkPageSetup) request_page_setup
        var ref clang proc(ref _GtkPrintOperation,ref _GtkPrintContext,i32) draw_page
        var ref clang proc(ref _GtkPrintOperation,ref _GtkPrintContext) end_print
        var ref clang proc(ref _GtkPrintOperation) status_changed
        var ref clang function(ref _GtkPrintOperation)ref _GtkWidget create_custom_widget
        var ref clang proc(ref _GtkPrintOperation,ref _GtkWidget) custom_widget_apply
        var ref clang function(ref _GtkPrintOperation,ref _GtkPrintOperationPreview,ref _GtkPrintContext,ref _GtkWindow)i32 preview
        var ref clang proc(ref _GtkPrintOperation,ref _GtkWidget,ref _GtkPageSetup,ref _GtkPrintSettings) update_custom_widget
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
        var ref clang proc() _gtk_reserved5
        var ref clang proc() _gtk_reserved6
        var ref clang proc() _gtk_reserved7
        var ref clang proc() _gtk_reserved8
    end

    record _GtkPrintOperationPrivate =
        var int dummy    !empty record
    end

    record _GtkPrintOperation =
        var _GObject parent_instance
        var ref _GtkPrintOperationPrivate priv
    end

    const GTK_PRINT_STATUS_INITIAL           = 0
    const GTK_PRINT_STATUS_PREPARING         = 1
    const GTK_PRINT_STATUS_GENERATING_DATA   = 2
    const GTK_PRINT_STATUS_SENDING_DATA      = 3
    const GTK_PRINT_STATUS_PENDING           = 4
    const GTK_PRINT_STATUS_PENDING_ISSUE     = 5
    const GTK_PRINT_STATUS_PRINTING          = 6
    const GTK_PRINT_STATUS_FINISHED          = 7
    const GTK_PRINT_STATUS_FINISHED_ABORTED  = 8
    const GTK_PRINT_OPERATION_RESULT_ERROR   = 0
    const GTK_PRINT_OPERATION_RESULT_APPLY   = 1
    const GTK_PRINT_OPERATION_RESULT_CANCEL  = 2
    const GTK_PRINT_OPERATION_RESULT_IN_PROGRESS = 3
    const GTK_PRINT_OPERATION_ACTION_PRINT_DIALOG = 0
    const GTK_PRINT_OPERATION_ACTION_PRINT   = 1
    const GTK_PRINT_OPERATION_ACTION_PREVIEW = 2
    const GTK_PRINT_OPERATION_ACTION_EXPORT  = 3
    const GTK_PRINT_ERROR_GENERAL            = 0
    const GTK_PRINT_ERROR_INTERNAL_ERROR     = 1
    const GTK_PRINT_ERROR_NOMEM              = 2
    const GTK_PRINT_ERROR_INVALID_FILE       = 3
    clang function "gtk_print_error_quark"             ()u32
    clang function "gtk_print_operation_get_type"      ()u64
    clang function "gtk_print_operation_new"           ()ref _GtkPrintOperation
    clang proc     "gtk_print_operation_set_default_page_setup" (ref _GtkPrintOperation,ref _GtkPageSetup)
    clang function "gtk_print_operation_get_default_page_setup" (ref _GtkPrintOperation)ref _GtkPageSetup
    clang proc     "gtk_print_operation_set_print_settings" (ref _GtkPrintOperation,ref _GtkPrintSettings)
    clang function "gtk_print_operation_get_print_settings" (ref _GtkPrintOperation)ref _GtkPrintSettings
    clang proc     "gtk_print_operation_set_job_name"  (ref _GtkPrintOperation,ref i8)
    clang proc     "gtk_print_operation_set_n_pages"   (ref _GtkPrintOperation,i32)
    clang proc     "gtk_print_operation_set_current_page" (ref _GtkPrintOperation,i32)
    clang proc     "gtk_print_operation_set_use_full_page" (ref _GtkPrintOperation,i32)
    clang proc     "gtk_print_operation_set_unit"      (ref _GtkPrintOperation,i32)
    clang proc     "gtk_print_operation_set_export_filename" (ref _GtkPrintOperation,ref i8)
    clang proc     "gtk_print_operation_set_track_print_status" (ref _GtkPrintOperation,i32)
    clang proc     "gtk_print_operation_set_show_progress" (ref _GtkPrintOperation,i32)
    clang proc     "gtk_print_operation_set_allow_async" (ref _GtkPrintOperation,i32)
    clang proc     "gtk_print_operation_set_custom_tab_label" (ref _GtkPrintOperation,ref i8)
    clang function "gtk_print_operation_run"           (ref _GtkPrintOperation,i32,ref _GtkWindow,ref ref _GError)i32
    clang proc     "gtk_print_operation_get_error"     (ref _GtkPrintOperation,ref ref _GError)
    clang function "gtk_print_operation_get_status"    (ref _GtkPrintOperation)i32
    clang function "gtk_print_operation_get_status_string" (ref _GtkPrintOperation)ref i8
    clang function "gtk_print_operation_is_finished"   (ref _GtkPrintOperation)i32
    clang proc     "gtk_print_operation_cancel"        (ref _GtkPrintOperation)
    clang proc     "gtk_print_operation_draw_page_finish" (ref _GtkPrintOperation)
    clang proc     "gtk_print_operation_set_defer_drawing" (ref _GtkPrintOperation)
    clang proc     "gtk_print_operation_set_support_selection" (ref _GtkPrintOperation,i32)
    clang function "gtk_print_operation_get_support_selection" (ref _GtkPrintOperation)i32
    clang proc     "gtk_print_operation_set_has_selection" (ref _GtkPrintOperation,i32)
    clang function "gtk_print_operation_get_has_selection" (ref _GtkPrintOperation)i32
    clang proc     "gtk_print_operation_set_embed_page_setup" (ref _GtkPrintOperation,i32)
    clang function "gtk_print_operation_get_embed_page_setup" (ref _GtkPrintOperation)i32
    clang function "gtk_print_operation_get_n_pages_to_print" (ref _GtkPrintOperation)i32
    clang function "gtk_print_run_page_setup_dialog"   (ref _GtkWindow,ref _GtkPageSetup,ref _GtkPrintSettings)ref _GtkPageSetup
    clang proc     "gtk_print_run_page_setup_dialog_async" (ref _GtkWindow,ref _GtkPageSetup,ref _GtkPrintSettings,ref clang proc(ref _GtkPageSetup,ref void),ref void)
    record _GtkProgressBar =
        var _GtkWidget parent
        var ref _GtkProgressBarPrivate priv
    end

    record _GtkProgressBarPrivate =
        var int dummy    !empty record
    end

    record _GtkProgressBarClass =
        var _GtkWidgetClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_progress_bar_get_type"         ()u64
    clang function "gtk_progress_bar_new"              ()ref _GtkWidget
    clang proc     "gtk_progress_bar_pulse"            (ref _GtkProgressBar)
    clang proc     "gtk_progress_bar_set_text"         (ref _GtkProgressBar,ref i8)
    clang proc     "gtk_progress_bar_set_fraction"     (ref _GtkProgressBar,r64)
    clang proc     "gtk_progress_bar_set_pulse_step"   (ref _GtkProgressBar,r64)
    clang proc     "gtk_progress_bar_set_inverted"     (ref _GtkProgressBar,i32)
    clang function "gtk_progress_bar_get_text"         (ref _GtkProgressBar)ref i8
    clang function "gtk_progress_bar_get_fraction"     (ref _GtkProgressBar)r64
    clang function "gtk_progress_bar_get_pulse_step"   (ref _GtkProgressBar)r64
    clang function "gtk_progress_bar_get_inverted"     (ref _GtkProgressBar)i32
    clang proc     "gtk_progress_bar_set_ellipsize"    (ref _GtkProgressBar,i32)
    clang function "gtk_progress_bar_get_ellipsize"    (ref _GtkProgressBar)i32
    clang proc     "gtk_progress_bar_set_show_text"    (ref _GtkProgressBar,i32)
    clang function "gtk_progress_bar_get_show_text"    (ref _GtkProgressBar)i32
    record _GtkToggleAction =
        var _GtkAction parent
        var ref _GtkToggleActionPrivate private_data
    end

    record _GtkToggleActionPrivate =
        var int dummy    !empty record
    end

    record _GtkToggleActionClass =
        var _GtkActionClass parent_class
        var ref clang proc(ref _GtkToggleAction) toggled
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_toggle_action_get_type"        ()u64
    clang function "gtk_toggle_action_new"             (ref i8,ref i8,ref i8,ref i8)ref _GtkToggleAction
    clang proc     "gtk_toggle_action_toggled"         (ref _GtkToggleAction)
    clang proc     "gtk_toggle_action_set_active"      (ref _GtkToggleAction,i32)
    clang function "gtk_toggle_action_get_active"      (ref _GtkToggleAction)i32
    clang proc     "gtk_toggle_action_set_draw_as_radio" (ref _GtkToggleAction,i32)
    clang function "gtk_toggle_action_get_draw_as_radio" (ref _GtkToggleAction)i32
    clang proc     "_gtk_toggle_action_set_active"     (ref _GtkToggleAction,i32)
    record _GtkRadioAction =
        var _GtkToggleAction parent
        var ref _GtkRadioActionPrivate private_data
    end

    record _GtkRadioActionPrivate =
        var int dummy    !empty record
    end

    record _GtkRadioActionClass =
        var _GtkToggleActionClass parent_class
        var ref clang proc(ref _GtkRadioAction,ref _GtkRadioAction) changed
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_radio_action_get_type"         ()u64
    clang function "gtk_radio_action_new"              (ref i8,ref i8,ref i8,ref i8,i32)ref _GtkRadioAction
    clang function "gtk_radio_action_get_group"        (ref _GtkRadioAction)ref _GSList
    clang proc     "gtk_radio_action_set_group"        (ref _GtkRadioAction,ref _GSList)
    clang proc     "gtk_radio_action_join_group"       (ref _GtkRadioAction,ref _GtkRadioAction)
    clang function "gtk_radio_action_get_current_value" (ref _GtkRadioAction)i32
    clang proc     "gtk_radio_action_set_current_value" (ref _GtkRadioAction,i32)
    record _GtkRadioButton =
        var _GtkCheckButton check_button
        var ref _GtkRadioButtonPrivate priv
    end

    record _GtkRadioButtonPrivate =
        var int dummy    !empty record
    end

    record _GtkRadioButtonClass =
        var _GtkCheckButtonClass parent_class
        var ref clang proc(ref _GtkRadioButton) group_changed
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_radio_button_get_type"         ()u64
    clang function "gtk_radio_button_new"              (ref _GSList)ref _GtkWidget
    clang function "gtk_radio_button_new_from_widget"  (ref _GtkRadioButton)ref _GtkWidget
    clang function "gtk_radio_button_new_with_label"   (ref _GSList,ref i8)ref _GtkWidget
    clang function "gtk_radio_button_new_with_label_from_widget" (ref _GtkRadioButton,ref i8)ref _GtkWidget
    clang function "gtk_radio_button_new_with_mnemonic" (ref _GSList,ref i8)ref _GtkWidget
    clang function "gtk_radio_button_new_with_mnemonic_from_widget" (ref _GtkRadioButton,ref i8)ref _GtkWidget
    clang function "gtk_radio_button_get_group"        (ref _GtkRadioButton)ref _GSList
    clang proc     "gtk_radio_button_set_group"        (ref _GtkRadioButton,ref _GSList)
    clang proc     "gtk_radio_button_join_group"       (ref _GtkRadioButton,ref _GtkRadioButton)
    record _GtkRadioMenuItem =
        var _GtkCheckMenuItem check_menu_item
        var ref _GtkRadioMenuItemPrivate priv
    end

    record _GtkRadioMenuItemPrivate =
        var int dummy    !empty record
    end

    record _GtkRadioMenuItemClass =
        var _GtkCheckMenuItemClass parent_class
        var ref clang proc(ref _GtkRadioMenuItem) group_changed
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_radio_menu_item_get_type"      ()u64
    clang function "gtk_radio_menu_item_new"           (ref _GSList)ref _GtkWidget
    clang function "gtk_radio_menu_item_new_with_label" (ref _GSList,ref i8)ref _GtkWidget
    clang function "gtk_radio_menu_item_new_with_mnemonic" (ref _GSList,ref i8)ref _GtkWidget
    clang function "gtk_radio_menu_item_new_from_widget" (ref _GtkRadioMenuItem)ref _GtkWidget
    clang function "gtk_radio_menu_item_new_with_mnemonic_from_widget" (ref _GtkRadioMenuItem,ref i8)ref _GtkWidget
    clang function "gtk_radio_menu_item_new_with_label_from_widget" (ref _GtkRadioMenuItem,ref i8)ref _GtkWidget
    clang function "gtk_radio_menu_item_get_group"     (ref _GtkRadioMenuItem)ref _GSList
    clang proc     "gtk_radio_menu_item_set_group"     (ref _GtkRadioMenuItem,ref _GSList)
    record _GtkToggleToolButton =
        var _GtkToolButton parent
        var ref _GtkToggleToolButtonPrivate priv
    end

    record _GtkToggleToolButtonClass =
        var _GtkToolButtonClass parent_class
        var ref clang proc(ref _GtkToggleToolButton) toggled
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    record _GtkToggleToolButtonPrivate =
        var int dummy    !empty record
    end

    clang function "gtk_toggle_tool_button_get_type"   ()u64
    clang function "gtk_toggle_tool_button_new"        ()ref _GtkToolItem
    clang function "gtk_toggle_tool_button_new_from_stock" (ref i8)ref _GtkToolItem
    clang proc     "gtk_toggle_tool_button_set_active" (ref _GtkToggleToolButton,i32)
    clang function "gtk_toggle_tool_button_get_active" (ref _GtkToggleToolButton)i32
    record _GtkRadioToolButton =
        var _GtkToggleToolButton parent
    end

    record _GtkRadioToolButtonClass =
        var _GtkToggleToolButtonClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_radio_tool_button_get_type"    ()u64
    clang function "gtk_radio_tool_button_new"         (ref _GSList)ref _GtkToolItem
    clang function "gtk_radio_tool_button_new_from_stock" (ref _GSList,ref i8)ref _GtkToolItem
    clang function "gtk_radio_tool_button_new_from_widget" (ref _GtkRadioToolButton)ref _GtkToolItem
    clang function "gtk_radio_tool_button_new_with_stock_from_widget" (ref _GtkRadioToolButton,ref i8)ref _GtkToolItem
    clang function "gtk_radio_tool_button_get_group"   (ref _GtkRadioToolButton)ref _GSList
    clang proc     "gtk_radio_tool_button_set_group"   (ref _GtkRadioToolButton,ref _GSList)
    record _GtkRange =
        var _GtkWidget widget
        var ref _GtkRangePrivate priv
    end

    record _GtkRangePrivate =
        var int dummy    !empty record
    end

    record _GtkRangeClass =
        var _GtkWidgetClass parent_class
        var ref i8 slider_detail
        var ref i8 stepper_detail
        var ref clang proc(ref _GtkRange) value_changed
        var ref clang proc(ref _GtkRange,r64) adjust_bounds
        var ref clang proc(ref _GtkRange,i32) move_slider
        var ref clang proc(ref _GtkRange,ref _GtkBorder) get_range_border
        var ref clang function(ref _GtkRange,i32,r64)i32 change_value
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_range_get_type"                ()u64
    clang proc     "gtk_range_set_adjustment"          (ref _GtkRange,ref _GtkAdjustment)
    clang function "gtk_range_get_adjustment"          (ref _GtkRange)ref _GtkAdjustment
    clang proc     "gtk_range_set_inverted"            (ref _GtkRange,i32)
    clang function "gtk_range_get_inverted"            (ref _GtkRange)i32
    clang proc     "gtk_range_set_flippable"           (ref _GtkRange,i32)
    clang function "gtk_range_get_flippable"           (ref _GtkRange)i32
    clang proc     "gtk_range_set_slider_size_fixed"   (ref _GtkRange,i32)
    clang function "gtk_range_get_slider_size_fixed"   (ref _GtkRange)i32
    clang proc     "gtk_range_set_min_slider_size"     (ref _GtkRange,i32)
    clang function "gtk_range_get_min_slider_size"     (ref _GtkRange)i32
    clang proc     "gtk_range_get_range_rect"          (ref _GtkRange,ref _cairo_rectangle_int)
    clang proc     "gtk_range_get_slider_range"        (ref _GtkRange,ref i32,ref i32)
    clang proc     "gtk_range_set_lower_stepper_sensitivity" (ref _GtkRange,i32)
    clang function "gtk_range_get_lower_stepper_sensitivity" (ref _GtkRange)i32
    clang proc     "gtk_range_set_upper_stepper_sensitivity" (ref _GtkRange,i32)
    clang function "gtk_range_get_upper_stepper_sensitivity" (ref _GtkRange)i32
    clang proc     "gtk_range_set_increments"          (ref _GtkRange,r64,r64)
    clang proc     "gtk_range_set_range"               (ref _GtkRange,r64,r64)
    clang proc     "gtk_range_set_value"               (ref _GtkRange,r64)
    clang function "gtk_range_get_value"               (ref _GtkRange)r64
    clang proc     "gtk_range_set_show_fill_level"     (ref _GtkRange,i32)
    clang function "gtk_range_get_show_fill_level"     (ref _GtkRange)i32
    clang proc     "gtk_range_set_restrict_to_fill_level" (ref _GtkRange,i32)
    clang function "gtk_range_get_restrict_to_fill_level" (ref _GtkRange)i32
    clang proc     "gtk_range_set_fill_level"          (ref _GtkRange,r64)
    clang function "gtk_range_get_fill_level"          (ref _GtkRange)r64
    clang proc     "gtk_range_set_round_digits"        (ref _GtkRange,i32)
    clang function "gtk_range_get_round_digits"        (ref _GtkRange)i32
    clang function "_gtk_range_get_wheel_delta"        (ref _GtkRange,ref _GdkEventScroll)r64
    clang proc     "_gtk_range_set_has_origin"         (ref _GtkRange,i32)
    clang function "_gtk_range_get_has_origin"         (ref _GtkRange)i32
    clang proc     "_gtk_range_set_stop_values"        (ref _GtkRange,ref r64,i32)
    clang function "_gtk_range_get_stop_positions"     (ref _GtkRange,ref ref i32)i32
    clang proc     "_gtk_range_set_steppers"           (ref _GtkRange,i32,i32,i32,i32)
    record _GtkRecentInfo =
        var int dummy    !empty record
    end

    record _GtkRecentData =
        var ref i8 display_name
        var ref i8 description
        var ref i8 mime_type
        var ref i8 app_name
        var ref i8 app_exec
        var ref ref i8 groups
        var i32 is_private
    end

    record _GtkRecentManager =
        var _GObject parent_instance
        var ref _GtkRecentManagerPrivate priv
    end

    record _GtkRecentManagerClass =
        var _GObjectClass parent_class
        var ref clang proc(ref _GtkRecentManager) changed
        var ref clang proc() _gtk_recent1
        var ref clang proc() _gtk_recent2
        var ref clang proc() _gtk_recent3
        var ref clang proc() _gtk_recent4
    end

    record _GtkRecentManagerPrivate =
        var int dummy    !empty record
    end

    const GTK_RECENT_MANAGER_ERROR_NOT_FOUND = 0
    const GTK_RECENT_MANAGER_ERROR_INVALID_URI = 1
    const GTK_RECENT_MANAGER_ERROR_INVALID_ENCODING = 2
    const GTK_RECENT_MANAGER_ERROR_NOT_REGISTERED = 3
    const GTK_RECENT_MANAGER_ERROR_READ      = 4
    const GTK_RECENT_MANAGER_ERROR_WRITE     = 5
    const GTK_RECENT_MANAGER_ERROR_UNKNOWN   = 6
    clang function "gtk_recent_manager_error_quark"    ()u32
    clang function "gtk_recent_manager_get_type"       ()u64
    clang function "gtk_recent_manager_new"            ()ref _GtkRecentManager
    clang function "gtk_recent_manager_get_default"    ()ref _GtkRecentManager
    clang function "gtk_recent_manager_add_item"       (ref _GtkRecentManager,ref i8)i32
    clang function "gtk_recent_manager_add_full"       (ref _GtkRecentManager,ref i8,ref _GtkRecentData)i32
    clang function "gtk_recent_manager_remove_item"    (ref _GtkRecentManager,ref i8,ref ref _GError)i32
    clang function "gtk_recent_manager_lookup_item"    (ref _GtkRecentManager,ref i8,ref ref _GError)ref _GtkRecentInfo
    clang function "gtk_recent_manager_has_item"       (ref _GtkRecentManager,ref i8)i32
    clang function "gtk_recent_manager_move_item"      (ref _GtkRecentManager,ref i8,ref i8,ref ref _GError)i32
    clang function "gtk_recent_manager_get_items"      (ref _GtkRecentManager)ref _GList
    clang function "gtk_recent_manager_purge_items"    (ref _GtkRecentManager,ref ref _GError)i32
    clang function "gtk_recent_info_get_type"          ()u64
    clang function "gtk_recent_info_ref"               (ref _GtkRecentInfo)ref _GtkRecentInfo
    clang proc     "gtk_recent_info_unref"             (ref _GtkRecentInfo)
    clang function "gtk_recent_info_get_uri"           (ref _GtkRecentInfo)ref i8
    clang function "gtk_recent_info_get_display_name"  (ref _GtkRecentInfo)ref i8
    clang function "gtk_recent_info_get_description"   (ref _GtkRecentInfo)ref i8
    clang function "gtk_recent_info_get_mime_type"     (ref _GtkRecentInfo)ref i8
    clang function "gtk_recent_info_get_added"         (ref _GtkRecentInfo)i64
    clang function "gtk_recent_info_get_modified"      (ref _GtkRecentInfo)i64
    clang function "gtk_recent_info_get_visited"       (ref _GtkRecentInfo)i64
    clang function "gtk_recent_info_get_private_hint"  (ref _GtkRecentInfo)i32
    clang function "gtk_recent_info_get_application_info" (ref _GtkRecentInfo,ref i8,ref ref i8,ref u32,ref i64)i32
    clang function "gtk_recent_info_create_app_info"   (ref _GtkRecentInfo,ref i8,ref ref _GError)ref _GAppInfo
    clang function "gtk_recent_info_get_applications"  (ref _GtkRecentInfo,ref u64)ref ref i8
    clang function "gtk_recent_info_last_application"  (ref _GtkRecentInfo)ref i8
    clang function "gtk_recent_info_has_application"   (ref _GtkRecentInfo,ref i8)i32
    clang function "gtk_recent_info_get_groups"        (ref _GtkRecentInfo,ref u64)ref ref i8
    clang function "gtk_recent_info_has_group"         (ref _GtkRecentInfo,ref i8)i32
    clang function "gtk_recent_info_get_icon"          (ref _GtkRecentInfo,i32)ref _GdkPixbuf
    clang function "gtk_recent_info_get_gicon"         (ref _GtkRecentInfo)ref _GIcon
    clang function "gtk_recent_info_get_short_name"    (ref _GtkRecentInfo)ref i8
    clang function "gtk_recent_info_get_uri_display"   (ref _GtkRecentInfo)ref i8
    clang function "gtk_recent_info_get_age"           (ref _GtkRecentInfo)i32
    clang function "gtk_recent_info_is_local"          (ref _GtkRecentInfo)i32
    clang function "gtk_recent_info_exists"            (ref _GtkRecentInfo)i32
    clang function "gtk_recent_info_match"             (ref _GtkRecentInfo,ref _GtkRecentInfo)i32
    clang proc     "_gtk_recent_manager_sync"          ()
    record _GtkRecentAction =
        var _GtkAction parent_instance
        var ref _GtkRecentActionPrivate priv
    end

    record _GtkRecentActionPrivate =
        var int dummy    !empty record
    end

    record _GtkRecentActionClass =
        var _GtkActionClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_recent_action_get_type"        ()u64
    clang function "gtk_recent_action_new"             (ref i8,ref i8,ref i8,ref i8)ref _GtkAction
    clang function "gtk_recent_action_new_for_manager" (ref i8,ref i8,ref i8,ref i8,ref _GtkRecentManager)ref _GtkAction
    clang function "gtk_recent_action_get_show_numbers" (ref _GtkRecentAction)i32
    clang proc     "gtk_recent_action_set_show_numbers" (ref _GtkRecentAction,i32)
    record _GtkRecentFilter =
        var int dummy    !empty record
    end

    record _GtkRecentFilterInfo =
        var i32 contains
        var ref i8 uri
        var ref i8 display_name
        var ref i8 mime_type
        var ref ref i8 applications
        var ref ref i8 groups
        var i32 age
    end

    const GTK_RECENT_FILTER_URI              = 1
    const GTK_RECENT_FILTER_DISPLAY_NAME     = 2
    const GTK_RECENT_FILTER_MIME_TYPE        = 4
    const GTK_RECENT_FILTER_APPLICATION      = 8
    const GTK_RECENT_FILTER_GROUP            = 16
    const GTK_RECENT_FILTER_AGE              = 32
    clang function "gtk_recent_filter_get_type"        ()u64
    clang function "gtk_recent_filter_new"             ()ref _GtkRecentFilter
    clang proc     "gtk_recent_filter_set_name"        (ref _GtkRecentFilter,ref i8)
    clang function "gtk_recent_filter_get_name"        (ref _GtkRecentFilter)ref i8
    clang proc     "gtk_recent_filter_add_mime_type"   (ref _GtkRecentFilter,ref i8)
    clang proc     "gtk_recent_filter_add_pattern"     (ref _GtkRecentFilter,ref i8)
    clang proc     "gtk_recent_filter_add_pixbuf_formats" (ref _GtkRecentFilter)
    clang proc     "gtk_recent_filter_add_application" (ref _GtkRecentFilter,ref i8)
    clang proc     "gtk_recent_filter_add_group"       (ref _GtkRecentFilter,ref i8)
    clang proc     "gtk_recent_filter_add_age"         (ref _GtkRecentFilter,i32)
    clang proc     "gtk_recent_filter_add_custom"      (ref _GtkRecentFilter,i32,ref clang function(ref _GtkRecentFilterInfo,ref void)i32,ref void,ref clang proc(ref void))
    clang function "gtk_recent_filter_get_needed"      (ref _GtkRecentFilter)i32
    clang function "gtk_recent_filter_filter"          (ref _GtkRecentFilter,ref _GtkRecentFilterInfo)i32
    const GTK_RECENT_SORT_NONE               = 0
    const GTK_RECENT_SORT_MRU                = 1
    const GTK_RECENT_SORT_LRU                = 2
    const GTK_RECENT_SORT_CUSTOM             = 3
    record _GtkRecentChooser =
        var int dummy    !empty record
    end

    record _GtkRecentChooserIface =
        var _GTypeInterface base_iface
        var ref clang function(ref _GtkRecentChooser,ref i8,ref ref _GError)i32 set_current_uri
        var ref clang function(ref _GtkRecentChooser)ref i8 get_current_uri
        var ref clang function(ref _GtkRecentChooser,ref i8,ref ref _GError)i32 select_uri
        var ref clang proc(ref _GtkRecentChooser,ref i8) unselect_uri
        var ref clang proc(ref _GtkRecentChooser) select_all
        var ref clang proc(ref _GtkRecentChooser) unselect_all
        var ref clang function(ref _GtkRecentChooser)ref _GList get_items
        var ref clang function(ref _GtkRecentChooser)ref _GtkRecentManager get_recent_manager
        var ref clang proc(ref _GtkRecentChooser,ref _GtkRecentFilter) add_filter
        var ref clang proc(ref _GtkRecentChooser,ref _GtkRecentFilter) remove_filter
        var ref clang function(ref _GtkRecentChooser)ref _GSList list_filters
        var ref clang proc(ref _GtkRecentChooser,ref clang function(ref _GtkRecentInfo,ref _GtkRecentInfo,ref void)i32,ref void,ref clang proc(ref void)) set_sort_func
        var ref clang proc(ref _GtkRecentChooser) item_activated
        var ref clang proc(ref _GtkRecentChooser) selection_changed
    end

    const GTK_RECENT_CHOOSER_ERROR_NOT_FOUND = 0
    const GTK_RECENT_CHOOSER_ERROR_INVALID_URI = 1
    clang function "gtk_recent_chooser_error_quark"    ()u32
    clang function "gtk_recent_chooser_get_type"       ()u64
    clang proc     "gtk_recent_chooser_set_show_private" (ref _GtkRecentChooser,i32)
    clang function "gtk_recent_chooser_get_show_private" (ref _GtkRecentChooser)i32
    clang proc     "gtk_recent_chooser_set_show_not_found" (ref _GtkRecentChooser,i32)
    clang function "gtk_recent_chooser_get_show_not_found" (ref _GtkRecentChooser)i32
    clang proc     "gtk_recent_chooser_set_select_multiple" (ref _GtkRecentChooser,i32)
    clang function "gtk_recent_chooser_get_select_multiple" (ref _GtkRecentChooser)i32
    clang proc     "gtk_recent_chooser_set_limit"      (ref _GtkRecentChooser,i32)
    clang function "gtk_recent_chooser_get_limit"      (ref _GtkRecentChooser)i32
    clang proc     "gtk_recent_chooser_set_local_only" (ref _GtkRecentChooser,i32)
    clang function "gtk_recent_chooser_get_local_only" (ref _GtkRecentChooser)i32
    clang proc     "gtk_recent_chooser_set_show_tips"  (ref _GtkRecentChooser,i32)
    clang function "gtk_recent_chooser_get_show_tips"  (ref _GtkRecentChooser)i32
    clang proc     "gtk_recent_chooser_set_show_icons" (ref _GtkRecentChooser,i32)
    clang function "gtk_recent_chooser_get_show_icons" (ref _GtkRecentChooser)i32
    clang proc     "gtk_recent_chooser_set_sort_type"  (ref _GtkRecentChooser,i32)
    clang function "gtk_recent_chooser_get_sort_type"  (ref _GtkRecentChooser)i32
    clang proc     "gtk_recent_chooser_set_sort_func"  (ref _GtkRecentChooser,ref clang function(ref _GtkRecentInfo,ref _GtkRecentInfo,ref void)i32,ref void,ref clang proc(ref void))
    clang function "gtk_recent_chooser_set_current_uri" (ref _GtkRecentChooser,ref i8,ref ref _GError)i32
    clang function "gtk_recent_chooser_get_current_uri" (ref _GtkRecentChooser)ref i8
    clang function "gtk_recent_chooser_get_current_item" (ref _GtkRecentChooser)ref _GtkRecentInfo
    clang function "gtk_recent_chooser_select_uri"     (ref _GtkRecentChooser,ref i8,ref ref _GError)i32
    clang proc     "gtk_recent_chooser_unselect_uri"   (ref _GtkRecentChooser,ref i8)
    clang proc     "gtk_recent_chooser_select_all"     (ref _GtkRecentChooser)
    clang proc     "gtk_recent_chooser_unselect_all"   (ref _GtkRecentChooser)
    clang function "gtk_recent_chooser_get_items"      (ref _GtkRecentChooser)ref _GList
    clang function "gtk_recent_chooser_get_uris"       (ref _GtkRecentChooser,ref u64)ref ref i8
    clang proc     "gtk_recent_chooser_add_filter"     (ref _GtkRecentChooser,ref _GtkRecentFilter)
    clang proc     "gtk_recent_chooser_remove_filter"  (ref _GtkRecentChooser,ref _GtkRecentFilter)
    clang function "gtk_recent_chooser_list_filters"   (ref _GtkRecentChooser)ref _GSList
    clang proc     "gtk_recent_chooser_set_filter"     (ref _GtkRecentChooser,ref _GtkRecentFilter)
    clang function "gtk_recent_chooser_get_filter"     (ref _GtkRecentChooser)ref _GtkRecentFilter
    record _GtkRecentChooserDialog =
        var _GtkDialog parent_instance
        var ref _GtkRecentChooserDialogPrivate priv
    end

    record _GtkRecentChooserDialogClass =
        var _GtkDialogClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    record _GtkRecentChooserDialogPrivate =
        var int dummy    !empty record
    end

    clang function "gtk_recent_chooser_dialog_get_type" ()u64
    clang function "gtk_recent_chooser_dialog_new"     (ref i8,ref _GtkWindow,ref i8,...)ref _GtkWidget
    clang function "gtk_recent_chooser_dialog_new_for_manager" (ref i8,ref _GtkWindow,ref _GtkRecentManager,ref i8,...)ref _GtkWidget
    record _GtkRecentChooserMenu =
        var _GtkMenu parent_instance
        var ref _GtkRecentChooserMenuPrivate priv
    end

    record _GtkRecentChooserMenuClass =
        var _GtkMenuClass parent_class
        var ref clang proc() gtk_recent1
        var ref clang proc() gtk_recent2
        var ref clang proc() gtk_recent3
        var ref clang proc() gtk_recent4
    end

    record _GtkRecentChooserMenuPrivate =
        var int dummy    !empty record
    end

    clang function "gtk_recent_chooser_menu_get_type"  ()u64
    clang function "gtk_recent_chooser_menu_new"       ()ref _GtkWidget
    clang function "gtk_recent_chooser_menu_new_for_manager" (ref _GtkRecentManager)ref _GtkWidget
    clang function "gtk_recent_chooser_menu_get_show_numbers" (ref _GtkRecentChooserMenu)i32
    clang proc     "gtk_recent_chooser_menu_set_show_numbers" (ref _GtkRecentChooserMenu,i32)
    record _GtkRecentChooserWidget =
        var _GtkBox parent_instance
        var ref _GtkRecentChooserWidgetPrivate priv
    end

    record _GtkRecentChooserWidgetClass =
        var _GtkBoxClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    record _GtkRecentChooserWidgetPrivate =
        var int dummy    !empty record
    end

    clang function "gtk_recent_chooser_widget_get_type" ()u64
    clang function "gtk_recent_chooser_widget_new"     ()ref _GtkWidget
    clang function "gtk_recent_chooser_widget_new_for_manager" (ref _GtkRecentManager)ref _GtkWidget
    record _GtkScale =
        var _GtkRange range
        var ref _GtkScalePrivate priv
    end

    record _GtkScalePrivate =
        var int dummy    !empty record
    end

    record _GtkScaleClass =
        var _GtkRangeClass parent_class
        var ref clang function(ref _GtkScale,r64)ref i8 format_value
        var ref clang proc(ref _GtkScale) draw_value
        var ref clang proc(ref _GtkScale,ref i32,ref i32) get_layout_offsets
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_scale_get_type"                ()u64
    clang function "gtk_scale_new"                     (i32,ref _GtkAdjustment)ref _GtkWidget
    clang function "gtk_scale_new_with_range"          (i32,r64,r64,r64)ref _GtkWidget
    clang proc     "gtk_scale_set_digits"              (ref _GtkScale,i32)
    clang function "gtk_scale_get_digits"              (ref _GtkScale)i32
    clang proc     "gtk_scale_set_draw_value"          (ref _GtkScale,i32)
    clang function "gtk_scale_get_draw_value"          (ref _GtkScale)i32
    clang proc     "gtk_scale_set_has_origin"          (ref _GtkScale,i32)
    clang function "gtk_scale_get_has_origin"          (ref _GtkScale)i32
    clang proc     "gtk_scale_set_value_pos"           (ref _GtkScale,i32)
    clang function "gtk_scale_get_value_pos"           (ref _GtkScale)i32
    clang function "gtk_scale_get_layout"              (ref _GtkScale)ref _PangoLayout
    clang proc     "gtk_scale_get_layout_offsets"      (ref _GtkScale,ref i32,ref i32)
    clang proc     "gtk_scale_add_mark"                (ref _GtkScale,r64,i32,ref i8)
    clang proc     "gtk_scale_clear_marks"             (ref _GtkScale)
    record _GtkScaleButton =
        var _GtkButton parent
        var ref _GtkScaleButtonPrivate priv
    end

    record _GtkScaleButtonClass =
        var _GtkButtonClass parent_class
        var ref clang proc(ref _GtkScaleButton,r64) value_changed
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    record _GtkScaleButtonPrivate =
        var int dummy    !empty record
    end

    clang function "gtk_scale_button_get_type"         ()u64
    clang function "gtk_scale_button_new"              (i32,r64,r64,r64,ref ref i8)ref _GtkWidget
    clang proc     "gtk_scale_button_set_icons"        (ref _GtkScaleButton,ref ref i8)
    clang function "gtk_scale_button_get_value"        (ref _GtkScaleButton)r64
    clang proc     "gtk_scale_button_set_value"        (ref _GtkScaleButton,r64)
    clang function "gtk_scale_button_get_adjustment"   (ref _GtkScaleButton)ref _GtkAdjustment
    clang proc     "gtk_scale_button_set_adjustment"   (ref _GtkScaleButton,ref _GtkAdjustment)
    clang function "gtk_scale_button_get_plus_button"  (ref _GtkScaleButton)ref _GtkWidget
    clang function "gtk_scale_button_get_minus_button" (ref _GtkScaleButton)ref _GtkWidget
    clang function "gtk_scale_button_get_popup"        (ref _GtkScaleButton)ref _GtkWidget
    record _GtkScrollable =
        var int dummy    !empty record
    end

    record _GtkScrollableInterface =
        var _GTypeInterface base_iface
    end

    clang function "gtk_scrollable_get_type"           ()u64
    clang function "gtk_scrollable_get_hadjustment"    (ref _GtkScrollable)ref _GtkAdjustment
    clang proc     "gtk_scrollable_set_hadjustment"    (ref _GtkScrollable,ref _GtkAdjustment)
    clang function "gtk_scrollable_get_vadjustment"    (ref _GtkScrollable)ref _GtkAdjustment
    clang proc     "gtk_scrollable_set_vadjustment"    (ref _GtkScrollable,ref _GtkAdjustment)
    clang function "gtk_scrollable_get_hscroll_policy" (ref _GtkScrollable)i32
    clang proc     "gtk_scrollable_set_hscroll_policy" (ref _GtkScrollable,i32)
    clang function "gtk_scrollable_get_vscroll_policy" (ref _GtkScrollable)i32
    clang proc     "gtk_scrollable_set_vscroll_policy" (ref _GtkScrollable,i32)
    record _GtkScrollbar =
        var _GtkRange range
    end

    record _GtkScrollbarClass =
        var _GtkRangeClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_scrollbar_get_type"            ()u64
    clang function "gtk_scrollbar_new"                 (i32,ref _GtkAdjustment)ref _GtkWidget
    record _GtkScrolledWindow =
        var _GtkBin container
        var ref _GtkScrolledWindowPrivate priv
    end

    record _GtkScrolledWindowPrivate =
        var int dummy    !empty record
    end

    record _GtkScrolledWindowClass =
        var _GtkBinClass parent_class
        var i32 scrollbar_spacing
        var ref clang function(ref _GtkScrolledWindow,i32,i32)i32 scroll_child
        var ref clang proc(ref _GtkScrolledWindow,i32) move_focus_out
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_scrolled_window_get_type"      ()u64
    clang function "gtk_scrolled_window_new"           (ref _GtkAdjustment,ref _GtkAdjustment)ref _GtkWidget
    clang proc     "gtk_scrolled_window_set_hadjustment" (ref _GtkScrolledWindow,ref _GtkAdjustment)
    clang proc     "gtk_scrolled_window_set_vadjustment" (ref _GtkScrolledWindow,ref _GtkAdjustment)
    clang function "gtk_scrolled_window_get_hadjustment" (ref _GtkScrolledWindow)ref _GtkAdjustment
    clang function "gtk_scrolled_window_get_vadjustment" (ref _GtkScrolledWindow)ref _GtkAdjustment
    clang function "gtk_scrolled_window_get_hscrollbar" (ref _GtkScrolledWindow)ref _GtkWidget
    clang function "gtk_scrolled_window_get_vscrollbar" (ref _GtkScrolledWindow)ref _GtkWidget
    clang proc     "gtk_scrolled_window_set_policy"    (ref _GtkScrolledWindow,i32,i32)
    clang proc     "gtk_scrolled_window_get_policy"    (ref _GtkScrolledWindow,ref i32,ref i32)
    clang proc     "gtk_scrolled_window_set_placement" (ref _GtkScrolledWindow,i32)
    clang proc     "gtk_scrolled_window_unset_placement" (ref _GtkScrolledWindow)
    clang function "gtk_scrolled_window_get_placement" (ref _GtkScrolledWindow)i32
    clang proc     "gtk_scrolled_window_set_shadow_type" (ref _GtkScrolledWindow,i32)
    clang function "gtk_scrolled_window_get_shadow_type" (ref _GtkScrolledWindow)i32
    clang proc     "gtk_scrolled_window_add_with_viewport" (ref _GtkScrolledWindow,ref _GtkWidget)
    clang function "gtk_scrolled_window_get_min_content_width" (ref _GtkScrolledWindow)i32
    clang proc     "gtk_scrolled_window_set_min_content_width" (ref _GtkScrolledWindow,i32)
    clang function "gtk_scrolled_window_get_min_content_height" (ref _GtkScrolledWindow)i32
    clang proc     "gtk_scrolled_window_set_min_content_height" (ref _GtkScrolledWindow,i32)
    clang proc     "gtk_scrolled_window_set_kinetic_scrolling" (ref _GtkScrolledWindow,i32)
    clang function "gtk_scrolled_window_get_kinetic_scrolling" (ref _GtkScrolledWindow)i32
    clang proc     "gtk_scrolled_window_set_capture_button_press" (ref _GtkScrolledWindow,i32)
    clang function "gtk_scrolled_window_get_capture_button_press" (ref _GtkScrolledWindow)i32
    clang function "_gtk_scrolled_window_get_scrollbar_spacing" (ref _GtkScrolledWindow)i32
    record _GtkSearchEntry =
        var _GtkEntry parent
    end

    record _GtkSearchEntryClass =
        var _GtkEntryClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_search_entry_get_type"         ()u64
    clang function "gtk_search_entry_new"              ()ref _GtkWidget
    record _GtkSeparator =
        var _GtkWidget widget
        var ref _GtkSeparatorPrivate priv
    end

    record _GtkSeparatorPrivate =
        var int dummy    !empty record
    end

    record _GtkSeparatorClass =
        var _GtkWidgetClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_separator_get_type"            ()u64
    clang function "gtk_separator_new"                 (i32)ref _GtkWidget
    record _GtkSeparatorMenuItem =
        var _GtkMenuItem menu_item
    end

    record _GtkSeparatorMenuItemClass =
        var _GtkMenuItemClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_separator_menu_item_get_type"  ()u64
    clang function "gtk_separator_menu_item_new"       ()ref _GtkWidget
    record _GtkSeparatorToolItem =
        var _GtkToolItem parent
        var ref _GtkSeparatorToolItemPrivate priv
    end

    record _GtkSeparatorToolItemClass =
        var _GtkToolItemClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    record _GtkSeparatorToolItemPrivate =
        var int dummy    !empty record
    end

    clang function "gtk_separator_tool_item_get_type"  ()u64
    clang function "gtk_separator_tool_item_new"       ()ref _GtkToolItem
    clang function "gtk_separator_tool_item_get_draw"  (ref _GtkSeparatorToolItem)i32
    clang proc     "gtk_separator_tool_item_set_draw"  (ref _GtkSeparatorToolItem,i32)
    record _GtkSettingsPrivate =
        var int dummy    !empty record
    end

    record _GtkSettingsClass =
        var _GObjectClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    record _GtkSettingsValue =
        var ref i8 origin
        var _GValue value
    end

    clang function "gtk_settings_get_type"             ()u64
    clang function "gtk_settings_get_default"          ()ref _GtkSettings
    clang function "gtk_settings_get_for_screen"       (ref _GdkScreen)ref _GtkSettings
    clang proc     "gtk_settings_install_property"     (ref _GParamSpec)
    clang proc     "gtk_settings_install_property_parser" (ref _GParamSpec,ref clang function(ref _GParamSpec,ref _GString,ref _GValue)i32)
    clang function "gtk_rc_property_parse_color"       (ref _GParamSpec,ref _GString,ref _GValue)i32
    clang function "gtk_rc_property_parse_enum"        (ref _GParamSpec,ref _GString,ref _GValue)i32
    clang function "gtk_rc_property_parse_flags"       (ref _GParamSpec,ref _GString,ref _GValue)i32
    clang function "gtk_rc_property_parse_requisition" (ref _GParamSpec,ref _GString,ref _GValue)i32
    clang function "gtk_rc_property_parse_border"      (ref _GParamSpec,ref _GString,ref _GValue)i32
    clang proc     "gtk_settings_set_property_value"   (ref _GtkSettings,ref i8,ref _GtkSettingsValue)
    clang proc     "gtk_settings_set_string_property"  (ref _GtkSettings,ref i8,ref i8,ref i8)
    clang proc     "gtk_settings_set_long_property"    (ref _GtkSettings,ref i8,i32,ref i8)
    clang proc     "gtk_settings_set_double_property"  (ref _GtkSettings,ref i8,r64,ref i8)
    clang function "gtk_show_uri"                      (ref _GdkScreen,ref i8,u32,ref ref _GError)i32
    record _GtkRequestedSize =
        var ref void data
        var i32 minimum_size
        var i32 natural_size
    end

    clang function "gtk_distribute_natural_allocation" (i32,u32,ref _GtkRequestedSize)i32
    const GTK_UPDATE_ALWAYS                  = 0
    const GTK_UPDATE_IF_VALID                = 1
    const GTK_SPIN_STEP_FORWARD              = 0
    const GTK_SPIN_STEP_BACKWARD             = 1
    const GTK_SPIN_PAGE_FORWARD              = 2
    const GTK_SPIN_PAGE_BACKWARD             = 3
    const GTK_SPIN_HOME                      = 4
    const GTK_SPIN_END                       = 5
    const GTK_SPIN_USER_DEFINED              = 6
    record _GtkSpinButton =
        var _GtkEntry entry
        var ref _GtkSpinButtonPrivate priv
    end

    record _GtkSpinButtonPrivate =
        var int dummy    !empty record
    end

    record _GtkSpinButtonClass =
        var _GtkEntryClass parent_class
        var ref clang function(ref _GtkSpinButton,ref r64)i32 input
        var ref clang function(ref _GtkSpinButton)i32 output
        var ref clang proc(ref _GtkSpinButton) value_changed
        var ref clang proc(ref _GtkSpinButton,i32) change_value
        var ref clang proc(ref _GtkSpinButton) wrapped
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_spin_button_get_type"          ()u64
    clang proc     "gtk_spin_button_configure"         (ref _GtkSpinButton,ref _GtkAdjustment,r64,u32)
    clang function "gtk_spin_button_new"               (ref _GtkAdjustment,r64,u32)ref _GtkWidget
    clang function "gtk_spin_button_new_with_range"    (r64,r64,r64)ref _GtkWidget
    clang proc     "gtk_spin_button_set_adjustment"    (ref _GtkSpinButton,ref _GtkAdjustment)
    clang function "gtk_spin_button_get_adjustment"    (ref _GtkSpinButton)ref _GtkAdjustment
    clang proc     "gtk_spin_button_set_digits"        (ref _GtkSpinButton,u32)
    clang function "gtk_spin_button_get_digits"        (ref _GtkSpinButton)u32
    clang proc     "gtk_spin_button_set_increments"    (ref _GtkSpinButton,r64,r64)
    clang proc     "gtk_spin_button_get_increments"    (ref _GtkSpinButton,ref r64,ref r64)
    clang proc     "gtk_spin_button_set_range"         (ref _GtkSpinButton,r64,r64)
    clang proc     "gtk_spin_button_get_range"         (ref _GtkSpinButton,ref r64,ref r64)
    clang function "gtk_spin_button_get_value"         (ref _GtkSpinButton)r64
    clang function "gtk_spin_button_get_value_as_int"  (ref _GtkSpinButton)i32
    clang proc     "gtk_spin_button_set_value"         (ref _GtkSpinButton,r64)
    clang proc     "gtk_spin_button_set_update_policy" (ref _GtkSpinButton,i32)
    clang function "gtk_spin_button_get_update_policy" (ref _GtkSpinButton)i32
    clang proc     "gtk_spin_button_set_numeric"       (ref _GtkSpinButton,i32)
    clang function "gtk_spin_button_get_numeric"       (ref _GtkSpinButton)i32
    clang proc     "gtk_spin_button_spin"              (ref _GtkSpinButton,i32,r64)
    clang proc     "gtk_spin_button_set_wrap"          (ref _GtkSpinButton,i32)
    clang function "gtk_spin_button_get_wrap"          (ref _GtkSpinButton)i32
    clang proc     "gtk_spin_button_set_snap_to_ticks" (ref _GtkSpinButton,i32)
    clang function "gtk_spin_button_get_snap_to_ticks" (ref _GtkSpinButton)i32
    clang proc     "gtk_spin_button_update"            (ref _GtkSpinButton)
    clang proc     "_gtk_spin_button_get_panels"       (ref _GtkSpinButton,ref ref _GdkWindow,ref ref _GdkWindow)
    record _GtkSpinner =
        var _GtkWidget parent
        var ref _GtkSpinnerPrivate priv
    end

    record _GtkSpinnerClass =
        var _GtkWidgetClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    record _GtkSpinnerPrivate =
        var int dummy    !empty record
    end

    clang function "gtk_spinner_get_type"              ()u64
    clang function "gtk_spinner_new"                   ()ref _GtkWidget
    clang proc     "gtk_spinner_start"                 (ref _GtkSpinner)
    clang proc     "gtk_spinner_stop"                  (ref _GtkSpinner)
    record _GtkStatusbar =
        var _GtkBox parent_widget
        var ref _GtkStatusbarPrivate priv
    end

    record _GtkStatusbarPrivate =
        var int dummy    !empty record
    end

    record _GtkStatusbarClass =
        var _GtkBoxClass parent_class
        var ref void reserved
        var ref clang proc(ref _GtkStatusbar,u32,ref i8) text_pushed
        var ref clang proc(ref _GtkStatusbar,u32,ref i8) text_popped
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_statusbar_get_type"            ()u64
    clang function "gtk_statusbar_new"                 ()ref _GtkWidget
    clang function "gtk_statusbar_get_context_id"      (ref _GtkStatusbar,ref i8)u32
    clang function "gtk_statusbar_push"                (ref _GtkStatusbar,u32,ref i8)u32
    clang proc     "gtk_statusbar_pop"                 (ref _GtkStatusbar,u32)
    clang proc     "gtk_statusbar_remove"              (ref _GtkStatusbar,u32,u32)
    clang proc     "gtk_statusbar_remove_all"          (ref _GtkStatusbar,u32)
    clang function "gtk_statusbar_get_message_area"    (ref _GtkStatusbar)ref _GtkWidget
    record _GtkStatusIcon =
        var _GObject parent_instance
        var ref _GtkStatusIconPrivate priv
    end

    record _GtkStatusIconClass =
        var _GObjectClass parent_class
        var ref clang proc(ref _GtkStatusIcon) activate
        var ref clang proc(ref _GtkStatusIcon,u32,u32) popup_menu
        var ref clang function(ref _GtkStatusIcon,i32)i32 size_changed
        var ref clang function(ref _GtkStatusIcon,ref _GdkEventButton)i32 button_press_event
        var ref clang function(ref _GtkStatusIcon,ref _GdkEventButton)i32 button_release_event
        var ref clang function(ref _GtkStatusIcon,ref _GdkEventScroll)i32 scroll_event
        var ref clang function(ref _GtkStatusIcon,i32,i32,i32,ref _GtkTooltip)i32 query_tooltip
        var ref void __gtk_reserved1
        var ref void __gtk_reserved2
        var ref void __gtk_reserved3
        var ref void __gtk_reserved4
    end

    record _GtkStatusIconPrivate =
        var int dummy    !empty record
    end

    clang function "gtk_status_icon_get_type"          ()u64
    clang function "gtk_status_icon_new"               ()ref _GtkStatusIcon
    clang function "gtk_status_icon_new_from_pixbuf"   (ref _GdkPixbuf)ref _GtkStatusIcon
    clang function "gtk_status_icon_new_from_file"     (ref i8)ref _GtkStatusIcon
    clang function "gtk_status_icon_new_from_stock"    (ref i8)ref _GtkStatusIcon
    clang function "gtk_status_icon_new_from_icon_name" (ref i8)ref _GtkStatusIcon
    clang function "gtk_status_icon_new_from_gicon"    (ref _GIcon)ref _GtkStatusIcon
    clang proc     "gtk_status_icon_set_from_pixbuf"   (ref _GtkStatusIcon,ref _GdkPixbuf)
    clang proc     "gtk_status_icon_set_from_file"     (ref _GtkStatusIcon,ref i8)
    clang proc     "gtk_status_icon_set_from_stock"    (ref _GtkStatusIcon,ref i8)
    clang proc     "gtk_status_icon_set_from_icon_name" (ref _GtkStatusIcon,ref i8)
    clang proc     "gtk_status_icon_set_from_gicon"    (ref _GtkStatusIcon,ref _GIcon)
    clang function "gtk_status_icon_get_storage_type"  (ref _GtkStatusIcon)i32
    clang function "gtk_status_icon_get_pixbuf"        (ref _GtkStatusIcon)ref _GdkPixbuf
    clang function "gtk_status_icon_get_stock"         (ref _GtkStatusIcon)ref i8
    clang function "gtk_status_icon_get_icon_name"     (ref _GtkStatusIcon)ref i8
    clang function "gtk_status_icon_get_gicon"         (ref _GtkStatusIcon)ref _GIcon
    clang function "gtk_status_icon_get_size"          (ref _GtkStatusIcon)i32
    clang proc     "gtk_status_icon_set_screen"        (ref _GtkStatusIcon,ref _GdkScreen)
    clang function "gtk_status_icon_get_screen"        (ref _GtkStatusIcon)ref _GdkScreen
    clang proc     "gtk_status_icon_set_has_tooltip"   (ref _GtkStatusIcon,i32)
    clang proc     "gtk_status_icon_set_tooltip_text"  (ref _GtkStatusIcon,ref i8)
    clang proc     "gtk_status_icon_set_tooltip_markup" (ref _GtkStatusIcon,ref i8)
    clang proc     "gtk_status_icon_set_title"         (ref _GtkStatusIcon,ref i8)
    clang function "gtk_status_icon_get_title"         (ref _GtkStatusIcon)ref i8
    clang proc     "gtk_status_icon_set_name"          (ref _GtkStatusIcon,ref i8)
    clang proc     "gtk_status_icon_set_visible"       (ref _GtkStatusIcon,i32)
    clang function "gtk_status_icon_get_visible"       (ref _GtkStatusIcon)i32
    clang function "gtk_status_icon_is_embedded"       (ref _GtkStatusIcon)i32
    clang proc     "gtk_status_icon_position_menu"     (ref _GtkMenu,ref i32,ref i32,ref i32,ref void)
    clang function "gtk_status_icon_get_geometry"      (ref _GtkStatusIcon,ref ref _GdkScreen,ref _cairo_rectangle_int,ref i32)i32
    clang function "gtk_status_icon_get_has_tooltip"   (ref _GtkStatusIcon)i32
    clang function "gtk_status_icon_get_tooltip_text"  (ref _GtkStatusIcon)ref i8
    clang function "gtk_status_icon_get_tooltip_markup" (ref _GtkStatusIcon)ref i8
    clang function "gtk_status_icon_get_x11_window_id" (ref _GtkStatusIcon)u32
    record _GtkTextTagTablePrivate =
        var int dummy    !empty record
    end

    record _GtkTextTagTableClass =
        var _GObjectClass parent_class
        var ref clang proc(ref _GtkTextTagTable,ref _GtkTextTag,i32) tag_changed
        var ref clang proc(ref _GtkTextTagTable,ref _GtkTextTag) tag_added
        var ref clang proc(ref _GtkTextTagTable,ref _GtkTextTag) tag_removed
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_text_tag_table_get_type"       ()u64
    clang function "gtk_text_tag_table_new"            ()ref _GtkTextTagTable
    clang proc     "gtk_text_tag_table_add"            (ref _GtkTextTagTable,ref _GtkTextTag)
    clang proc     "gtk_text_tag_table_remove"         (ref _GtkTextTagTable,ref _GtkTextTag)
    clang function "gtk_text_tag_table_lookup"         (ref _GtkTextTagTable,ref i8)ref _GtkTextTag
    clang proc     "gtk_text_tag_table_foreach"        (ref _GtkTextTagTable,ref clang proc(ref _GtkTextTag,ref void),ref void)
    clang function "gtk_text_tag_table_get_size"       (ref _GtkTextTagTable)i32
    clang proc     "_gtk_text_tag_table_add_buffer"    (ref _GtkTextTagTable,ref void)
    clang proc     "_gtk_text_tag_table_remove_buffer" (ref _GtkTextTagTable,ref void)
    record _GtkTextMark =
        var _GObject parent_instance
        var ref void segment
    end

    record _GtkTextMarkClass =
        var _GObjectClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_text_mark_get_type"            ()u64
    clang function "gtk_text_mark_new"                 (ref i8,i32)ref _GtkTextMark
    clang proc     "gtk_text_mark_set_visible"         (ref _GtkTextMark,i32)
    clang function "gtk_text_mark_get_visible"         (ref _GtkTextMark)i32
    clang function "gtk_text_mark_get_name"            (ref _GtkTextMark)ref i8
    clang function "gtk_text_mark_get_deleted"         (ref _GtkTextMark)i32
    clang function "gtk_text_mark_get_buffer"          (ref _GtkTextMark)ref _GtkTextBuffer
    clang function "gtk_text_mark_get_left_gravity"    (ref _GtkTextMark)i32
    const GTK_TEXT_BUFFER_TARGET_INFO_BUFFER_CONTENTS = -1
    const GTK_TEXT_BUFFER_TARGET_INFO_RICH_TEXT = -2
    const GTK_TEXT_BUFFER_TARGET_INFO_TEXT   = -3
    record _GtkTextBTree =
        var int dummy    !empty record
    end

    record _GtkTextBufferPrivate =
        var int dummy    !empty record
    end

    record _GtkTextBufferClass =
        var _GObjectClass parent_class
        var ref clang proc(ref _GtkTextBuffer,ref _GtkTextIter,ref i8,i32) insert_text
        var ref clang proc(ref _GtkTextBuffer,ref _GtkTextIter,ref _GdkPixbuf) insert_pixbuf
        var ref clang proc(ref _GtkTextBuffer,ref _GtkTextIter,ref _GtkTextChildAnchor) insert_child_anchor
        var ref clang proc(ref _GtkTextBuffer,ref _GtkTextIter,ref _GtkTextIter) delete_range
        var ref clang proc(ref _GtkTextBuffer) changed
        var ref clang proc(ref _GtkTextBuffer) modified_changed
        var ref clang proc(ref _GtkTextBuffer,ref _GtkTextIter,ref _GtkTextMark) mark_set
        var ref clang proc(ref _GtkTextBuffer,ref _GtkTextMark) mark_deleted
        var ref clang proc(ref _GtkTextBuffer,ref _GtkTextTag,ref _GtkTextIter,ref _GtkTextIter) apply_tag
        var ref clang proc(ref _GtkTextBuffer,ref _GtkTextTag,ref _GtkTextIter,ref _GtkTextIter) remove_tag
        var ref clang proc(ref _GtkTextBuffer) begin_user_action
        var ref clang proc(ref _GtkTextBuffer) end_user_action
        var ref clang proc(ref _GtkTextBuffer,ref _GtkClipboard) paste_done
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_text_buffer_get_type"          ()u64
    clang function "gtk_text_buffer_new"               (ref _GtkTextTagTable)ref _GtkTextBuffer
    clang function "gtk_text_buffer_get_line_count"    (ref _GtkTextBuffer)i32
    clang function "gtk_text_buffer_get_char_count"    (ref _GtkTextBuffer)i32
    clang function "gtk_text_buffer_get_tag_table"     (ref _GtkTextBuffer)ref _GtkTextTagTable
    clang proc     "gtk_text_buffer_set_text"          (ref _GtkTextBuffer,ref i8,i32)
    clang proc     "gtk_text_buffer_insert"            (ref _GtkTextBuffer,ref _GtkTextIter,ref i8,i32)
    clang proc     "gtk_text_buffer_insert_at_cursor"  (ref _GtkTextBuffer,ref i8,i32)
    clang function "gtk_text_buffer_insert_interactive" (ref _GtkTextBuffer,ref _GtkTextIter,ref i8,i32,i32)i32
    clang function "gtk_text_buffer_insert_interactive_at_cursor" (ref _GtkTextBuffer,ref i8,i32,i32)i32
    clang proc     "gtk_text_buffer_insert_range"      (ref _GtkTextBuffer,ref _GtkTextIter,ref _GtkTextIter,ref _GtkTextIter)
    clang function "gtk_text_buffer_insert_range_interactive" (ref _GtkTextBuffer,ref _GtkTextIter,ref _GtkTextIter,ref _GtkTextIter,i32)i32
    clang proc     "gtk_text_buffer_insert_with_tags"  (ref _GtkTextBuffer,ref _GtkTextIter,ref i8,i32,ref _GtkTextTag,...)
    clang proc     "gtk_text_buffer_insert_with_tags_by_name" (ref _GtkTextBuffer,ref _GtkTextIter,ref i8,i32,ref i8,...)
    clang proc     "gtk_text_buffer_delete"            (ref _GtkTextBuffer,ref _GtkTextIter,ref _GtkTextIter)
    clang function "gtk_text_buffer_delete_interactive" (ref _GtkTextBuffer,ref _GtkTextIter,ref _GtkTextIter,i32)i32
    clang function "gtk_text_buffer_backspace"         (ref _GtkTextBuffer,ref _GtkTextIter,i32,i32)i32
    clang function "gtk_text_buffer_get_text"          (ref _GtkTextBuffer,ref _GtkTextIter,ref _GtkTextIter,i32)ref i8
    clang function "gtk_text_buffer_get_slice"         (ref _GtkTextBuffer,ref _GtkTextIter,ref _GtkTextIter,i32)ref i8
    clang proc     "gtk_text_buffer_insert_pixbuf"     (ref _GtkTextBuffer,ref _GtkTextIter,ref _GdkPixbuf)
    clang proc     "gtk_text_buffer_insert_child_anchor" (ref _GtkTextBuffer,ref _GtkTextIter,ref _GtkTextChildAnchor)
    clang function "gtk_text_buffer_create_child_anchor" (ref _GtkTextBuffer,ref _GtkTextIter)ref _GtkTextChildAnchor
    clang proc     "gtk_text_buffer_add_mark"          (ref _GtkTextBuffer,ref _GtkTextMark,ref _GtkTextIter)
    clang function "gtk_text_buffer_create_mark"       (ref _GtkTextBuffer,ref i8,ref _GtkTextIter,i32)ref _GtkTextMark
    clang proc     "gtk_text_buffer_move_mark"         (ref _GtkTextBuffer,ref _GtkTextMark,ref _GtkTextIter)
    clang proc     "gtk_text_buffer_delete_mark"       (ref _GtkTextBuffer,ref _GtkTextMark)
    clang function "gtk_text_buffer_get_mark"          (ref _GtkTextBuffer,ref i8)ref _GtkTextMark
    clang proc     "gtk_text_buffer_move_mark_by_name" (ref _GtkTextBuffer,ref i8,ref _GtkTextIter)
    clang proc     "gtk_text_buffer_delete_mark_by_name" (ref _GtkTextBuffer,ref i8)
    clang function "gtk_text_buffer_get_insert"        (ref _GtkTextBuffer)ref _GtkTextMark
    clang function "gtk_text_buffer_get_selection_bound" (ref _GtkTextBuffer)ref _GtkTextMark
    clang proc     "gtk_text_buffer_place_cursor"      (ref _GtkTextBuffer,ref _GtkTextIter)
    clang proc     "gtk_text_buffer_select_range"      (ref _GtkTextBuffer,ref _GtkTextIter,ref _GtkTextIter)
    clang proc     "gtk_text_buffer_apply_tag"         (ref _GtkTextBuffer,ref _GtkTextTag,ref _GtkTextIter,ref _GtkTextIter)
    clang proc     "gtk_text_buffer_remove_tag"        (ref _GtkTextBuffer,ref _GtkTextTag,ref _GtkTextIter,ref _GtkTextIter)
    clang proc     "gtk_text_buffer_apply_tag_by_name" (ref _GtkTextBuffer,ref i8,ref _GtkTextIter,ref _GtkTextIter)
    clang proc     "gtk_text_buffer_remove_tag_by_name" (ref _GtkTextBuffer,ref i8,ref _GtkTextIter,ref _GtkTextIter)
    clang proc     "gtk_text_buffer_remove_all_tags"   (ref _GtkTextBuffer,ref _GtkTextIter,ref _GtkTextIter)
    clang function "gtk_text_buffer_create_tag"        (ref _GtkTextBuffer,ref i8,ref i8,...)ref _GtkTextTag
    clang proc     "gtk_text_buffer_get_iter_at_line_offset" (ref _GtkTextBuffer,ref _GtkTextIter,i32,i32)
    clang proc     "gtk_text_buffer_get_iter_at_line_index" (ref _GtkTextBuffer,ref _GtkTextIter,i32,i32)
    clang proc     "gtk_text_buffer_get_iter_at_offset" (ref _GtkTextBuffer,ref _GtkTextIter,i32)
    clang proc     "gtk_text_buffer_get_iter_at_line"  (ref _GtkTextBuffer,ref _GtkTextIter,i32)
    clang proc     "gtk_text_buffer_get_start_iter"    (ref _GtkTextBuffer,ref _GtkTextIter)
    clang proc     "gtk_text_buffer_get_end_iter"      (ref _GtkTextBuffer,ref _GtkTextIter)
    clang proc     "gtk_text_buffer_get_bounds"        (ref _GtkTextBuffer,ref _GtkTextIter,ref _GtkTextIter)
    clang proc     "gtk_text_buffer_get_iter_at_mark"  (ref _GtkTextBuffer,ref _GtkTextIter,ref _GtkTextMark)
    clang proc     "gtk_text_buffer_get_iter_at_child_anchor" (ref _GtkTextBuffer,ref _GtkTextIter,ref _GtkTextChildAnchor)
    clang function "gtk_text_buffer_get_modified"      (ref _GtkTextBuffer)i32
    clang proc     "gtk_text_buffer_set_modified"      (ref _GtkTextBuffer,i32)
    clang function "gtk_text_buffer_get_has_selection" (ref _GtkTextBuffer)i32
    clang proc     "gtk_text_buffer_add_selection_clipboard" (ref _GtkTextBuffer,ref _GtkClipboard)
    clang proc     "gtk_text_buffer_remove_selection_clipboard" (ref _GtkTextBuffer,ref _GtkClipboard)
    clang proc     "gtk_text_buffer_cut_clipboard"     (ref _GtkTextBuffer,ref _GtkClipboard,i32)
    clang proc     "gtk_text_buffer_copy_clipboard"    (ref _GtkTextBuffer,ref _GtkClipboard)
    clang proc     "gtk_text_buffer_paste_clipboard"   (ref _GtkTextBuffer,ref _GtkClipboard,ref _GtkTextIter,i32)
    clang function "gtk_text_buffer_get_selection_bounds" (ref _GtkTextBuffer,ref _GtkTextIter,ref _GtkTextIter)i32
    clang function "gtk_text_buffer_delete_selection"  (ref _GtkTextBuffer,i32,i32)i32
    clang proc     "gtk_text_buffer_begin_user_action" (ref _GtkTextBuffer)
    clang proc     "gtk_text_buffer_end_user_action"   (ref _GtkTextBuffer)
    clang function "gtk_text_buffer_get_copy_target_list" (ref _GtkTextBuffer)ref _GtkTargetList
    clang function "gtk_text_buffer_get_paste_target_list" (ref _GtkTextBuffer)ref _GtkTargetList
    clang proc     "_gtk_text_buffer_spew"             (ref _GtkTextBuffer)
    clang function "_gtk_text_buffer_get_btree"        (ref _GtkTextBuffer)ref _GtkTextBTree
    clang function "_gtk_text_buffer_get_line_log_attrs" (ref _GtkTextBuffer,ref _GtkTextIter,ref i32)ref _PangoLogAttr
    clang proc     "_gtk_text_buffer_notify_will_remove_tag" (ref _GtkTextBuffer,ref _GtkTextTag)
    clang proc     "_gtk_text_buffer_get_text_before"  (ref _GtkTextBuffer,i32,ref _GtkTextIter,ref _GtkTextIter,ref _GtkTextIter)
    clang proc     "_gtk_text_buffer_get_text_at"      (ref _GtkTextBuffer,i32,ref _GtkTextIter,ref _GtkTextIter,ref _GtkTextIter)
    clang proc     "_gtk_text_buffer_get_text_after"   (ref _GtkTextBuffer,i32,ref _GtkTextIter,ref _GtkTextIter,ref _GtkTextIter)
    clang function "gtk_text_buffer_register_serialize_format" (ref _GtkTextBuffer,ref i8,ref clang function(ref _GtkTextBuffer,ref _GtkTextBuffer,ref _GtkTextIter,ref _GtkTextIter,ref u64,ref void)ref byte,ref void,ref clang proc(ref void))ref _GdkAtom
    clang function "gtk_text_buffer_register_serialize_tagset" (ref _GtkTextBuffer,ref i8)ref _GdkAtom
    clang function "gtk_text_buffer_register_deserialize_format" (ref _GtkTextBuffer,ref i8,ref clang function(ref _GtkTextBuffer,ref _GtkTextBuffer,ref _GtkTextIter,ref byte,u64,i32,ref void,ref ref _GError)i32,ref void,ref clang proc(ref void))ref _GdkAtom
    clang function "gtk_text_buffer_register_deserialize_tagset" (ref _GtkTextBuffer,ref i8)ref _GdkAtom
    clang proc     "gtk_text_buffer_unregister_serialize_format" (ref _GtkTextBuffer,ref _GdkAtom)
    clang proc     "gtk_text_buffer_unregister_deserialize_format" (ref _GtkTextBuffer,ref _GdkAtom)
    clang proc     "gtk_text_buffer_deserialize_set_can_create_tags" (ref _GtkTextBuffer,ref _GdkAtom,i32)
    clang function "gtk_text_buffer_deserialize_get_can_create_tags" (ref _GtkTextBuffer,ref _GdkAtom)i32
    clang function "gtk_text_buffer_get_serialize_formats" (ref _GtkTextBuffer,ref i32)ref ref _GdkAtom
    clang function "gtk_text_buffer_get_deserialize_formats" (ref _GtkTextBuffer,ref i32)ref ref _GdkAtom
    clang function "gtk_text_buffer_serialize"         (ref _GtkTextBuffer,ref _GtkTextBuffer,ref _GdkAtom,ref _GtkTextIter,ref _GtkTextIter,ref u64)ref byte
    clang function "gtk_text_buffer_deserialize"       (ref _GtkTextBuffer,ref _GtkTextBuffer,ref _GdkAtom,ref _GtkTextIter,ref byte,u64,ref ref _GError)i32
    const GTK_TEXT_WINDOW_PRIVATE            = 0
    const GTK_TEXT_WINDOW_WIDGET             = 1
    const GTK_TEXT_WINDOW_TEXT               = 2
    const GTK_TEXT_WINDOW_LEFT               = 3
    const GTK_TEXT_WINDOW_RIGHT              = 4
    const GTK_TEXT_WINDOW_TOP                = 5
    const GTK_TEXT_WINDOW_BOTTOM             = 6
    record _GtkTextView =
        var _GtkContainer parent_instance
        var ref _GtkTextViewPrivate priv
    end

    record _GtkTextViewPrivate =
        var int dummy    !empty record
    end

    record _GtkTextViewClass =
        var _GtkContainerClass parent_class
        var ref clang proc(ref _GtkTextView,ref _GtkMenu) populate_popup
        var ref clang proc(ref _GtkTextView,i32,i32,i32) move_cursor
        var ref clang proc(ref _GtkTextView) set_anchor
        var ref clang proc(ref _GtkTextView,ref i8) insert_at_cursor
        var ref clang proc(ref _GtkTextView,i32,i32) delete_from_cursor
        var ref clang proc(ref _GtkTextView) backspace
        var ref clang proc(ref _GtkTextView) cut_clipboard
        var ref clang proc(ref _GtkTextView) copy_clipboard
        var ref clang proc(ref _GtkTextView) paste_clipboard
        var ref clang proc(ref _GtkTextView) toggle_overwrite
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
        var ref clang proc() _gtk_reserved5
        var ref clang proc() _gtk_reserved6
        var ref clang proc() _gtk_reserved7
        var ref clang proc() _gtk_reserved8
    end

    clang function "gtk_text_view_get_type"            ()u64
    clang function "gtk_text_view_new"                 ()ref _GtkWidget
    clang function "gtk_text_view_new_with_buffer"     (ref _GtkTextBuffer)ref _GtkWidget
    clang proc     "gtk_text_view_set_buffer"          (ref _GtkTextView,ref _GtkTextBuffer)
    clang function "gtk_text_view_get_buffer"          (ref _GtkTextView)ref _GtkTextBuffer
    clang function "gtk_text_view_scroll_to_iter"      (ref _GtkTextView,ref _GtkTextIter,r64,i32,r64,r64)i32
    clang proc     "gtk_text_view_scroll_to_mark"      (ref _GtkTextView,ref _GtkTextMark,r64,i32,r64,r64)
    clang proc     "gtk_text_view_scroll_mark_onscreen" (ref _GtkTextView,ref _GtkTextMark)
    clang function "gtk_text_view_move_mark_onscreen"  (ref _GtkTextView,ref _GtkTextMark)i32
    clang function "gtk_text_view_place_cursor_onscreen" (ref _GtkTextView)i32
    clang proc     "gtk_text_view_get_visible_rect"    (ref _GtkTextView,ref _cairo_rectangle_int)
    clang proc     "gtk_text_view_set_cursor_visible"  (ref _GtkTextView,i32)
    clang function "gtk_text_view_get_cursor_visible"  (ref _GtkTextView)i32
    clang proc     "gtk_text_view_get_cursor_locations" (ref _GtkTextView,ref _GtkTextIter,ref _cairo_rectangle_int,ref _cairo_rectangle_int)
    clang proc     "gtk_text_view_get_iter_location"   (ref _GtkTextView,ref _GtkTextIter,ref _cairo_rectangle_int)
    clang proc     "gtk_text_view_get_iter_at_location" (ref _GtkTextView,ref _GtkTextIter,i32,i32)
    clang proc     "gtk_text_view_get_iter_at_position" (ref _GtkTextView,ref _GtkTextIter,ref i32,i32,i32)
    clang proc     "gtk_text_view_get_line_yrange"     (ref _GtkTextView,ref _GtkTextIter,ref i32,ref i32)
    clang proc     "gtk_text_view_get_line_at_y"       (ref _GtkTextView,ref _GtkTextIter,i32,ref i32)
    clang proc     "gtk_text_view_buffer_to_window_coords" (ref _GtkTextView,i32,i32,i32,ref i32,ref i32)
    clang proc     "gtk_text_view_window_to_buffer_coords" (ref _GtkTextView,i32,i32,i32,ref i32,ref i32)
    clang function "gtk_text_view_get_hadjustment"     (ref _GtkTextView)ref _GtkAdjustment
    clang function "gtk_text_view_get_vadjustment"     (ref _GtkTextView)ref _GtkAdjustment
    clang function "gtk_text_view_get_window"          (ref _GtkTextView,i32)ref _GdkWindow
    clang function "gtk_text_view_get_window_type"     (ref _GtkTextView,ref _GdkWindow)i32
    clang proc     "gtk_text_view_set_border_window_size" (ref _GtkTextView,i32,i32)
    clang function "gtk_text_view_get_border_window_size" (ref _GtkTextView,i32)i32
    clang function "gtk_text_view_forward_display_line" (ref _GtkTextView,ref _GtkTextIter)i32
    clang function "gtk_text_view_backward_display_line" (ref _GtkTextView,ref _GtkTextIter)i32
    clang function "gtk_text_view_forward_display_line_end" (ref _GtkTextView,ref _GtkTextIter)i32
    clang function "gtk_text_view_backward_display_line_start" (ref _GtkTextView,ref _GtkTextIter)i32
    clang function "gtk_text_view_starts_display_line" (ref _GtkTextView,ref _GtkTextIter)i32
    clang function "gtk_text_view_move_visually"       (ref _GtkTextView,ref _GtkTextIter,i32)i32
    clang function "gtk_text_view_im_context_filter_keypress" (ref _GtkTextView,ref _GdkEventKey)i32
    clang proc     "gtk_text_view_reset_im_context"    (ref _GtkTextView)
    clang proc     "gtk_text_view_add_child_at_anchor" (ref _GtkTextView,ref _GtkWidget,ref _GtkTextChildAnchor)
    clang proc     "gtk_text_view_add_child_in_window" (ref _GtkTextView,ref _GtkWidget,i32,i32,i32)
    clang proc     "gtk_text_view_move_child"          (ref _GtkTextView,ref _GtkWidget,i32,i32)
    clang proc     "gtk_text_view_set_wrap_mode"       (ref _GtkTextView,i32)
    clang function "gtk_text_view_get_wrap_mode"       (ref _GtkTextView)i32
    clang proc     "gtk_text_view_set_editable"        (ref _GtkTextView,i32)
    clang function "gtk_text_view_get_editable"        (ref _GtkTextView)i32
    clang proc     "gtk_text_view_set_overwrite"       (ref _GtkTextView,i32)
    clang function "gtk_text_view_get_overwrite"       (ref _GtkTextView)i32
    clang proc     "gtk_text_view_set_accepts_tab"     (ref _GtkTextView,i32)
    clang function "gtk_text_view_get_accepts_tab"     (ref _GtkTextView)i32
    clang proc     "gtk_text_view_set_pixels_above_lines" (ref _GtkTextView,i32)
    clang function "gtk_text_view_get_pixels_above_lines" (ref _GtkTextView)i32
    clang proc     "gtk_text_view_set_pixels_below_lines" (ref _GtkTextView,i32)
    clang function "gtk_text_view_get_pixels_below_lines" (ref _GtkTextView)i32
    clang proc     "gtk_text_view_set_pixels_inside_wrap" (ref _GtkTextView,i32)
    clang function "gtk_text_view_get_pixels_inside_wrap" (ref _GtkTextView)i32
    clang proc     "gtk_text_view_set_justification"   (ref _GtkTextView,i32)
    clang function "gtk_text_view_get_justification"   (ref _GtkTextView)i32
    clang proc     "gtk_text_view_set_left_margin"     (ref _GtkTextView,i32)
    clang function "gtk_text_view_get_left_margin"     (ref _GtkTextView)i32
    clang proc     "gtk_text_view_set_right_margin"    (ref _GtkTextView,i32)
    clang function "gtk_text_view_get_right_margin"    (ref _GtkTextView)i32
    clang proc     "gtk_text_view_set_indent"          (ref _GtkTextView,i32)
    clang function "gtk_text_view_get_indent"          (ref _GtkTextView)i32
    clang proc     "gtk_text_view_set_tabs"            (ref _GtkTextView,ref _PangoTabArray)
    clang function "gtk_text_view_get_tabs"            (ref _GtkTextView)ref _PangoTabArray
    clang function "gtk_text_view_get_default_attributes" (ref _GtkTextView)ref _GtkTextAttributes
    clang proc     "gtk_text_view_set_input_purpose"   (ref _GtkTextView,i32)
    clang function "gtk_text_view_get_input_purpose"   (ref _GtkTextView)i32
    clang proc     "gtk_text_view_set_input_hints"     (ref _GtkTextView,i32)
    clang function "gtk_text_view_get_input_hints"     (ref _GtkTextView)i32
    record _GtkThemingEngine =
        var _GObject parent_object
        var ref GtkThemingEnginePrivate priv
    end

    record GtkThemingEnginePrivate =
        var int dummy    !empty record
    end

    record _GtkThemingEngineClass =
        var _GObjectClass parent_class
        var ref clang proc(ref _GtkThemingEngine,ref _cairo,r64,r64,r64,r64) render_line
        var ref clang proc(ref _GtkThemingEngine,ref _cairo,r64,r64,r64,r64) render_background
        var ref clang proc(ref _GtkThemingEngine,ref _cairo,r64,r64,r64,r64) render_frame
        var ref clang proc(ref _GtkThemingEngine,ref _cairo,r64,r64,r64,r64,i32,r64,r64) render_frame_gap
        var ref clang proc(ref _GtkThemingEngine,ref _cairo,r64,r64,r64,r64,i32) render_extension
        var ref clang proc(ref _GtkThemingEngine,ref _cairo,r64,r64,r64,r64) render_check
        var ref clang proc(ref _GtkThemingEngine,ref _cairo,r64,r64,r64,r64) render_option
        var ref clang proc(ref _GtkThemingEngine,ref _cairo,r64,r64,r64,r64) render_arrow
        var ref clang proc(ref _GtkThemingEngine,ref _cairo,r64,r64,r64,r64) render_expander
        var ref clang proc(ref _GtkThemingEngine,ref _cairo,r64,r64,r64,r64) render_focus
        var ref clang proc(ref _GtkThemingEngine,ref _cairo,r64,r64,ref _PangoLayout) render_layout
        var ref clang proc(ref _GtkThemingEngine,ref _cairo,r64,r64,r64,r64,i32) render_slider
        var ref clang proc(ref _GtkThemingEngine,ref _cairo,r64,r64,r64,r64) render_handle
        var ref clang proc(ref _GtkThemingEngine,ref _cairo,r64,r64,r64,r64) render_activity
        var ref clang function(ref _GtkThemingEngine,ref _GtkIconSource,i32)ref _GdkPixbuf render_icon_pixbuf
        var ref clang proc(ref _GtkThemingEngine,ref _cairo,ref _GdkPixbuf,r64,r64) render_icon
        var [15]ref void padding
    end

    clang function "gtk_theming_engine_get_type"       ()u64
    clang proc     "gtk_theming_engine_register_property" (ref i8,ref clang function(ref i8,ref _GValue,ref ref _GError)i32,ref _GParamSpec)
    clang proc     "gtk_theming_engine_get_property"   (ref _GtkThemingEngine,ref i8,i32,ref _GValue)
    clang proc     "gtk_theming_engine_get_valist"     (ref _GtkThemingEngine,i32,ref i8)
    clang proc     "gtk_theming_engine_get"            (ref _GtkThemingEngine,i32,...)
    clang proc     "gtk_theming_engine_get_style_property" (ref _GtkThemingEngine,ref i8,ref _GValue)
    clang proc     "gtk_theming_engine_get_style_valist" (ref _GtkThemingEngine,ref i8)
    clang proc     "gtk_theming_engine_get_style"      (ref _GtkThemingEngine,...)
    clang function "gtk_theming_engine_lookup_color"   (ref _GtkThemingEngine,ref i8,ref _GdkRGBA)i32
    clang function "gtk_theming_engine_get_path"       (ref _GtkThemingEngine)ref _GtkWidgetPath
    clang function "gtk_theming_engine_has_class"      (ref _GtkThemingEngine,ref i8)i32
    clang function "gtk_theming_engine_has_region"     (ref _GtkThemingEngine,ref i8,ref i32)i32
    clang function "gtk_theming_engine_get_state"      (ref _GtkThemingEngine)i32
    clang function "gtk_theming_engine_state_is_running" (ref _GtkThemingEngine,i32,ref r64)i32
    clang function "gtk_theming_engine_get_direction"  (ref _GtkThemingEngine)i32
    clang function "gtk_theming_engine_get_junction_sides" (ref _GtkThemingEngine)i32
    clang proc     "gtk_theming_engine_get_color"      (ref _GtkThemingEngine,i32,ref _GdkRGBA)
    clang proc     "gtk_theming_engine_get_background_color" (ref _GtkThemingEngine,i32,ref _GdkRGBA)
    clang proc     "gtk_theming_engine_get_border_color" (ref _GtkThemingEngine,i32,ref _GdkRGBA)
    clang proc     "gtk_theming_engine_get_border"     (ref _GtkThemingEngine,i32,ref _GtkBorder)
    clang proc     "gtk_theming_engine_get_padding"    (ref _GtkThemingEngine,i32,ref _GtkBorder)
    clang proc     "gtk_theming_engine_get_margin"     (ref _GtkThemingEngine,i32,ref _GtkBorder)
    clang function "gtk_theming_engine_get_font"       (ref _GtkThemingEngine,i32)ref _PangoFontDescription
    clang function "gtk_theming_engine_load"           (ref i8)ref _GtkThemingEngine
    clang function "gtk_theming_engine_get_screen"     (ref _GtkThemingEngine)ref _GdkScreen
    const GTK_TOOLBAR_SPACE_EMPTY            = 0
    const GTK_TOOLBAR_SPACE_LINE             = 1
    record _GtkToolbar =
        var _GtkContainer container
        var ref _GtkToolbarPrivate priv
    end

    record _GtkToolbarPrivate =
        var int dummy    !empty record
    end

    record _GtkToolbarClass =
        var _GtkContainerClass parent_class
        var ref clang proc(ref _GtkToolbar,i32) orientation_changed
        var ref clang proc(ref _GtkToolbar,i32) style_changed
        var ref clang function(ref _GtkToolbar,i32,i32,i32)i32 popup_context_menu
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_toolbar_get_type"              ()u64
    clang function "gtk_toolbar_new"                   ()ref _GtkWidget
    clang proc     "gtk_toolbar_insert"                (ref _GtkToolbar,ref _GtkToolItem,i32)
    clang function "gtk_toolbar_get_item_index"        (ref _GtkToolbar,ref _GtkToolItem)i32
    clang function "gtk_toolbar_get_n_items"           (ref _GtkToolbar)i32
    clang function "gtk_toolbar_get_nth_item"          (ref _GtkToolbar,i32)ref _GtkToolItem
    clang function "gtk_toolbar_get_show_arrow"        (ref _GtkToolbar)i32
    clang proc     "gtk_toolbar_set_show_arrow"        (ref _GtkToolbar,i32)
    clang function "gtk_toolbar_get_style"             (ref _GtkToolbar)i32
    clang proc     "gtk_toolbar_set_style"             (ref _GtkToolbar,i32)
    clang proc     "gtk_toolbar_unset_style"           (ref _GtkToolbar)
    clang function "gtk_toolbar_get_icon_size"         (ref _GtkToolbar)i32
    clang proc     "gtk_toolbar_set_icon_size"         (ref _GtkToolbar,i32)
    clang proc     "gtk_toolbar_unset_icon_size"       (ref _GtkToolbar)
    clang function "gtk_toolbar_get_relief_style"      (ref _GtkToolbar)i32
    clang function "gtk_toolbar_get_drop_index"        (ref _GtkToolbar,i32,i32)i32
    clang proc     "gtk_toolbar_set_drop_highlight_item" (ref _GtkToolbar,ref _GtkToolItem,i32)
    clang function "_gtk_toolbar_elide_underscores"    (ref i8)ref i8
    clang proc     "_gtk_toolbar_paint_space_line"     (ref _GtkWidget,ref _GtkToolbar,ref _cairo)
    clang function "_gtk_toolbar_get_default_space_size" ()i32
    record _GtkToolItemGroup =
        var _GtkContainer parent_instance
        var ref _GtkToolItemGroupPrivate priv
    end

    record _GtkToolItemGroupClass =
        var _GtkContainerClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    record _GtkToolItemGroupPrivate =
        var int dummy    !empty record
    end

    clang function "gtk_tool_item_group_get_type"      ()u64
    clang function "gtk_tool_item_group_new"           (ref i8)ref _GtkWidget
    clang proc     "gtk_tool_item_group_set_label"     (ref _GtkToolItemGroup,ref i8)
    clang proc     "gtk_tool_item_group_set_label_widget" (ref _GtkToolItemGroup,ref _GtkWidget)
    clang proc     "gtk_tool_item_group_set_collapsed" (ref _GtkToolItemGroup,i32)
    clang proc     "gtk_tool_item_group_set_ellipsize" (ref _GtkToolItemGroup,i32)
    clang proc     "gtk_tool_item_group_set_header_relief" (ref _GtkToolItemGroup,i32)
    clang function "gtk_tool_item_group_get_label"     (ref _GtkToolItemGroup)ref i8
    clang function "gtk_tool_item_group_get_label_widget" (ref _GtkToolItemGroup)ref _GtkWidget
    clang function "gtk_tool_item_group_get_collapsed" (ref _GtkToolItemGroup)i32
    clang function "gtk_tool_item_group_get_ellipsize" (ref _GtkToolItemGroup)i32
    clang function "gtk_tool_item_group_get_header_relief" (ref _GtkToolItemGroup)i32
    clang proc     "gtk_tool_item_group_insert"        (ref _GtkToolItemGroup,ref _GtkToolItem,i32)
    clang proc     "gtk_tool_item_group_set_item_position" (ref _GtkToolItemGroup,ref _GtkToolItem,i32)
    clang function "gtk_tool_item_group_get_item_position" (ref _GtkToolItemGroup,ref _GtkToolItem)i32
    clang function "gtk_tool_item_group_get_n_items"   (ref _GtkToolItemGroup)u32
    clang function "gtk_tool_item_group_get_nth_item"  (ref _GtkToolItemGroup,u32)ref _GtkToolItem
    clang function "gtk_tool_item_group_get_drop_item" (ref _GtkToolItemGroup,i32,i32)ref _GtkToolItem
    record _GtkTreeDragSource =
        var int dummy    !empty record
    end

    record _GtkTreeDragSourceIface =
        var _GTypeInterface g_iface
        var ref clang function(ref _GtkTreeDragSource,ref _GtkTreePath)i32 row_draggable
        var ref clang function(ref _GtkTreeDragSource,ref _GtkTreePath,ref _GtkSelectionData)i32 drag_data_get
        var ref clang function(ref _GtkTreeDragSource,ref _GtkTreePath)i32 drag_data_delete
    end

    clang function "gtk_tree_drag_source_get_type"     ()u64
    clang function "gtk_tree_drag_source_row_draggable" (ref _GtkTreeDragSource,ref _GtkTreePath)i32
    clang function "gtk_tree_drag_source_drag_data_delete" (ref _GtkTreeDragSource,ref _GtkTreePath)i32
    clang function "gtk_tree_drag_source_drag_data_get" (ref _GtkTreeDragSource,ref _GtkTreePath,ref _GtkSelectionData)i32
    record _GtkTreeDragDest =
        var int dummy    !empty record
    end

    record _GtkTreeDragDestIface =
        var _GTypeInterface g_iface
        var ref clang function(ref _GtkTreeDragDest,ref _GtkTreePath,ref _GtkSelectionData)i32 drag_data_received
        var ref clang function(ref _GtkTreeDragDest,ref _GtkTreePath,ref _GtkSelectionData)i32 row_drop_possible
    end

    clang function "gtk_tree_drag_dest_get_type"       ()u64
    clang function "gtk_tree_drag_dest_drag_data_received" (ref _GtkTreeDragDest,ref _GtkTreePath,ref _GtkSelectionData)i32
    clang function "gtk_tree_drag_dest_row_drop_possible" (ref _GtkTreeDragDest,ref _GtkTreePath,ref _GtkSelectionData)i32
    clang function "gtk_tree_set_row_drag_data"        (ref _GtkSelectionData,ref _GtkTreeModel,ref _GtkTreePath)i32
    clang function "gtk_tree_get_row_drag_data"        (ref _GtkSelectionData,ref ref _GtkTreeModel,ref ref _GtkTreePath)i32
    record _GtkTreeSelectionPrivate =
        var int dummy    !empty record
    end

    clang function "gtk_tree_selection_get_type"       ()u64
    clang proc     "gtk_tree_selection_set_mode"       (ref _GtkTreeSelection,i32)
    clang function "gtk_tree_selection_get_mode"       (ref _GtkTreeSelection)i32
    clang proc     "gtk_tree_selection_set_select_function" (ref _GtkTreeSelection,ref clang function(ref _GtkTreeSelection,ref _GtkTreeModel,ref _GtkTreePath,i32,ref void)i32,ref void,ref clang proc(ref void))
    clang function "gtk_tree_selection_get_user_data"  (ref _GtkTreeSelection)ref void
    clang function "gtk_tree_selection_get_tree_view"  (ref _GtkTreeSelection)ref _GtkTreeView
    clang function "gtk_tree_selection_get_select_function" (ref _GtkTreeSelection)ref clang function(ref _GtkTreeSelection,ref _GtkTreeModel,ref _GtkTreePath,i32,ref void)i32
    clang function "gtk_tree_selection_get_selected"   (ref _GtkTreeSelection,ref ref _GtkTreeModel,ref _GtkTreeIter)i32
    clang function "gtk_tree_selection_get_selected_rows" (ref _GtkTreeSelection,ref ref _GtkTreeModel)ref _GList
    clang function "gtk_tree_selection_count_selected_rows" (ref _GtkTreeSelection)i32
    clang proc     "gtk_tree_selection_selected_foreach" (ref _GtkTreeSelection,ref clang proc(ref _GtkTreeModel,ref _GtkTreePath,ref _GtkTreeIter,ref void),ref void)
    clang proc     "gtk_tree_selection_select_path"    (ref _GtkTreeSelection,ref _GtkTreePath)
    clang proc     "gtk_tree_selection_unselect_path"  (ref _GtkTreeSelection,ref _GtkTreePath)
    clang proc     "gtk_tree_selection_select_iter"    (ref _GtkTreeSelection,ref _GtkTreeIter)
    clang proc     "gtk_tree_selection_unselect_iter"  (ref _GtkTreeSelection,ref _GtkTreeIter)
    clang function "gtk_tree_selection_path_is_selected" (ref _GtkTreeSelection,ref _GtkTreePath)i32
    clang function "gtk_tree_selection_iter_is_selected" (ref _GtkTreeSelection,ref _GtkTreeIter)i32
    clang proc     "gtk_tree_selection_select_all"     (ref _GtkTreeSelection)
    clang proc     "gtk_tree_selection_unselect_all"   (ref _GtkTreeSelection)
    clang proc     "gtk_tree_selection_select_range"   (ref _GtkTreeSelection,ref _GtkTreePath,ref _GtkTreePath)
    clang proc     "gtk_tree_selection_unselect_range" (ref _GtkTreeSelection,ref _GtkTreePath,ref _GtkTreePath)
    record _GtkTreeStore =
        var _GObject parent
        var ref _GtkTreeStorePrivate priv
    end

    record _GtkTreeStoreClass =
        var _GObjectClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    record _GtkTreeStorePrivate =
        var int dummy    !empty record
    end

    clang function "gtk_tree_store_get_type"           ()u64
    clang function "gtk_tree_store_new"                (i32,...)ref _GtkTreeStore
    clang function "gtk_tree_store_newv"               (i32,ref u64)ref _GtkTreeStore
    clang proc     "gtk_tree_store_set_column_types"   (ref _GtkTreeStore,i32,ref u64)
    clang proc     "gtk_tree_store_set_value"          (ref _GtkTreeStore,ref _GtkTreeIter,i32,ref _GValue)
    clang proc     "gtk_tree_store_set"                (ref _GtkTreeStore,ref _GtkTreeIter,...)
    clang proc     "gtk_tree_store_set_valuesv"        (ref _GtkTreeStore,ref _GtkTreeIter,ref i32,ref _GValue,i32)
    clang proc     "gtk_tree_store_set_valist"         (ref _GtkTreeStore,ref _GtkTreeIter,ref i8)
    clang function "gtk_tree_store_remove"             (ref _GtkTreeStore,ref _GtkTreeIter)i32
    clang proc     "gtk_tree_store_insert"             (ref _GtkTreeStore,ref _GtkTreeIter,ref _GtkTreeIter,i32)
    clang proc     "gtk_tree_store_insert_before"      (ref _GtkTreeStore,ref _GtkTreeIter,ref _GtkTreeIter,ref _GtkTreeIter)
    clang proc     "gtk_tree_store_insert_after"       (ref _GtkTreeStore,ref _GtkTreeIter,ref _GtkTreeIter,ref _GtkTreeIter)
    clang proc     "gtk_tree_store_insert_with_values" (ref _GtkTreeStore,ref _GtkTreeIter,ref _GtkTreeIter,i32,...)
    clang proc     "gtk_tree_store_insert_with_valuesv" (ref _GtkTreeStore,ref _GtkTreeIter,ref _GtkTreeIter,i32,ref i32,ref _GValue,i32)
    clang proc     "gtk_tree_store_prepend"            (ref _GtkTreeStore,ref _GtkTreeIter,ref _GtkTreeIter)
    clang proc     "gtk_tree_store_append"             (ref _GtkTreeStore,ref _GtkTreeIter,ref _GtkTreeIter)
    clang function "gtk_tree_store_is_ancestor"        (ref _GtkTreeStore,ref _GtkTreeIter,ref _GtkTreeIter)i32
    clang function "gtk_tree_store_iter_depth"         (ref _GtkTreeStore,ref _GtkTreeIter)i32
    clang proc     "gtk_tree_store_clear"              (ref _GtkTreeStore)
    clang function "gtk_tree_store_iter_is_valid"      (ref _GtkTreeStore,ref _GtkTreeIter)i32
    clang proc     "gtk_tree_store_reorder"            (ref _GtkTreeStore,ref _GtkTreeIter,ref i32)
    clang proc     "gtk_tree_store_swap"               (ref _GtkTreeStore,ref _GtkTreeIter,ref _GtkTreeIter)
    clang proc     "gtk_tree_store_move_before"        (ref _GtkTreeStore,ref _GtkTreeIter,ref _GtkTreeIter)
    clang proc     "gtk_tree_store_move_after"         (ref _GtkTreeStore,ref _GtkTreeIter,ref _GtkTreeIter)
    clang function "gtk_license_get_type"              ()u64
    clang function "gtk_accel_flags_get_type"          ()u64
    clang function "gtk_application_inhibit_flags_get_type" ()u64
    clang function "gtk_assistant_page_type_get_type"  ()u64
    clang function "gtk_builder_error_get_type"        ()u64
    clang function "gtk_calendar_display_options_get_type" ()u64
    clang function "gtk_cell_renderer_state_get_type"  ()u64
    clang function "gtk_cell_renderer_mode_get_type"   ()u64
    clang function "gtk_cell_renderer_accel_mode_get_type" ()u64
    clang function "gtk_css_provider_error_get_type"   ()u64
    clang function "gtk_css_section_type_get_type"     ()u64
    clang function "gtk_debug_flag_get_type"           ()u64
    clang function "gtk_dialog_flags_get_type"         ()u64
    clang function "gtk_response_type_get_type"        ()u64
    clang function "gtk_dest_defaults_get_type"        ()u64
    clang function "gtk_target_flags_get_type"         ()u64
    clang function "gtk_entry_icon_position_get_type"  ()u64
    clang function "gtk_align_get_type"                ()u64
    clang function "gtk_arrow_placement_get_type"      ()u64
    clang function "gtk_arrow_type_get_type"           ()u64
    clang function "gtk_attach_options_get_type"       ()u64
    clang function "gtk_button_box_style_get_type"     ()u64
    clang function "gtk_delete_type_get_type"          ()u64
    clang function "gtk_direction_type_get_type"       ()u64
    clang function "gtk_expander_style_get_type"       ()u64
    clang function "gtk_icon_size_get_type"            ()u64
    clang function "gtk_sensitivity_type_get_type"     ()u64
    clang function "gtk_text_direction_get_type"       ()u64
    clang function "gtk_justification_get_type"        ()u64
    clang function "gtk_menu_direction_type_get_type"  ()u64
    clang function "gtk_message_type_get_type"         ()u64
    clang function "gtk_movement_step_get_type"        ()u64
    clang function "gtk_scroll_step_get_type"          ()u64
    clang function "gtk_orientation_get_type"          ()u64
    clang function "gtk_corner_type_get_type"          ()u64
    clang function "gtk_pack_type_get_type"            ()u64
    clang function "gtk_path_priority_type_get_type"   ()u64
    clang function "gtk_path_type_get_type"            ()u64
    clang function "gtk_policy_type_get_type"          ()u64
    clang function "gtk_position_type_get_type"        ()u64
    clang function "gtk_relief_style_get_type"         ()u64
    clang function "gtk_resize_mode_get_type"          ()u64
    clang function "gtk_scroll_type_get_type"          ()u64
    clang function "gtk_selection_mode_get_type"       ()u64
    clang function "gtk_shadow_type_get_type"          ()u64
    clang function "gtk_state_type_get_type"           ()u64
    clang function "gtk_toolbar_style_get_type"        ()u64
    clang function "gtk_window_position_get_type"      ()u64
    clang function "gtk_window_type_get_type"          ()u64
    clang function "gtk_wrap_mode_get_type"            ()u64
    clang function "gtk_sort_type_get_type"            ()u64
    clang function "gtk_im_preedit_style_get_type"     ()u64
    clang function "gtk_im_status_style_get_type"      ()u64
    clang function "gtk_pack_direction_get_type"       ()u64
    clang function "gtk_print_pages_get_type"          ()u64
    clang function "gtk_page_set_get_type"             ()u64
    clang function "gtk_number_up_layout_get_type"     ()u64
    clang function "gtk_page_orientation_get_type"     ()u64
    clang function "gtk_print_quality_get_type"        ()u64
    clang function "gtk_print_duplex_get_type"         ()u64
    clang function "gtk_unit_get_type"                 ()u64
    clang function "gtk_tree_view_grid_lines_get_type" ()u64
    clang function "gtk_drag_result_get_type"          ()u64
    clang function "gtk_size_request_mode_get_type"    ()u64
    clang function "gtk_scrollable_policy_get_type"    ()u64
    clang function "gtk_state_flags_get_type"          ()u64
    clang function "gtk_region_flags_get_type"         ()u64
    clang function "gtk_junction_sides_get_type"       ()u64
    clang function "gtk_border_style_get_type"         ()u64
    clang function "gtk_level_bar_mode_get_type"       ()u64
    clang function "gtk_input_purpose_get_type"        ()u64
    clang function "gtk_input_hints_get_type"          ()u64
    clang function "gtk_file_chooser_action_get_type"  ()u64
    clang function "gtk_file_chooser_confirmation_get_type" ()u64
    clang function "gtk_file_chooser_error_get_type"   ()u64
    clang function "gtk_file_filter_flags_get_type"    ()u64
    clang function "gtk_icon_lookup_flags_get_type"    ()u64
    clang function "gtk_icon_theme_error_get_type"     ()u64
    clang function "gtk_icon_view_drop_position_get_type" ()u64
    clang function "gtk_image_type_get_type"           ()u64
    clang function "gtk_buttons_type_get_type"         ()u64
    clang function "gtk_notebook_tab_get_type"         ()u64
    clang function "gtk_print_status_get_type"         ()u64
    clang function "gtk_print_operation_result_get_type" ()u64
    clang function "gtk_print_operation_action_get_type" ()u64
    clang function "gtk_print_error_get_type"          ()u64
    clang function "gtk_recent_sort_type_get_type"     ()u64
    clang function "gtk_recent_chooser_error_get_type" ()u64
    clang function "gtk_recent_filter_flags_get_type"  ()u64
    clang function "gtk_recent_manager_error_get_type" ()u64
    clang function "gtk_size_group_mode_get_type"      ()u64
    clang function "gtk_spin_button_update_policy_get_type" ()u64
    clang function "gtk_spin_type_get_type"            ()u64
    clang function "gtk_text_buffer_target_info_get_type" ()u64
    clang function "gtk_text_search_flags_get_type"    ()u64
    clang function "gtk_text_window_type_get_type"     ()u64
    clang function "gtk_toolbar_space_style_get_type"  ()u64
    clang function "gtk_tool_palette_drag_targets_get_type" ()u64
    clang function "gtk_tree_model_flags_get_type"     ()u64
    clang function "gtk_tree_view_drop_position_get_type" ()u64
    clang function "gtk_tree_view_column_sizing_get_type" ()u64
    clang function "gtk_ui_manager_item_type_get_type" ()u64
    clang function "gtk_widget_help_type_get_type"     ()u64
    clang function "gtk_rc_flags_get_type"             ()u64
    clang function "gtk_rc_token_type_get_type"        ()u64
    record _GtkUIManager =
        var _GObject parent
        var ref _GtkUIManagerPrivate private_data
    end

    record _GtkUIManagerClass =
        var _GObjectClass parent_class
        var ref clang proc(ref _GtkUIManager,ref _GtkWidget) add_widget
        var ref clang proc(ref _GtkUIManager) actions_changed
        var ref clang proc(ref _GtkUIManager,ref _GtkAction,ref _GtkWidget) connect_proxy
        var ref clang proc(ref _GtkUIManager,ref _GtkAction,ref _GtkWidget) disconnect_proxy
        var ref clang proc(ref _GtkUIManager,ref _GtkAction) pre_activate
        var ref clang proc(ref _GtkUIManager,ref _GtkAction) post_activate
        var ref clang function(ref _GtkUIManager,ref i8)ref _GtkWidget get_widget
        var ref clang function(ref _GtkUIManager,ref i8)ref _GtkAction get_action
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    record _GtkUIManagerPrivate =
        var int dummy    !empty record
    end

    const GTK_UI_MANAGER_AUTO                = 0
    const GTK_UI_MANAGER_MENUBAR             = 1
    const GTK_UI_MANAGER_MENU                = 2
    const GTK_UI_MANAGER_TOOLBAR             = 4
    const GTK_UI_MANAGER_PLACEHOLDER         = 8
    const GTK_UI_MANAGER_POPUP               = 16
    const GTK_UI_MANAGER_MENUITEM            = 32
    const GTK_UI_MANAGER_TOOLITEM            = 64
    const GTK_UI_MANAGER_SEPARATOR           = 128
    const GTK_UI_MANAGER_ACCELERATOR         = 256
    const GTK_UI_MANAGER_POPUP_WITH_ACCELS   = 512
    clang function "gtk_ui_manager_get_type"           ()u64
    clang function "gtk_ui_manager_new"                ()ref _GtkUIManager
    clang proc     "gtk_ui_manager_set_add_tearoffs"   (ref _GtkUIManager,i32)
    clang function "gtk_ui_manager_get_add_tearoffs"   (ref _GtkUIManager)i32
    clang proc     "gtk_ui_manager_insert_action_group" (ref _GtkUIManager,ref _GtkActionGroup,i32)
    clang proc     "gtk_ui_manager_remove_action_group" (ref _GtkUIManager,ref _GtkActionGroup)
    clang function "gtk_ui_manager_get_action_groups"  (ref _GtkUIManager)ref _GList
    clang function "gtk_ui_manager_get_accel_group"    (ref _GtkUIManager)ref _GtkAccelGroup
    clang function "gtk_ui_manager_get_widget"         (ref _GtkUIManager,ref i8)ref _GtkWidget
    clang function "gtk_ui_manager_get_toplevels"      (ref _GtkUIManager,i32)ref _GSList
    clang function "gtk_ui_manager_get_action"         (ref _GtkUIManager,ref i8)ref _GtkAction
    clang function "gtk_ui_manager_add_ui_from_string" (ref _GtkUIManager,ref i8,i64,ref ref _GError)u32
    clang function "gtk_ui_manager_add_ui_from_file"   (ref _GtkUIManager,ref i8,ref ref _GError)u32
    clang function "gtk_ui_manager_add_ui_from_resource" (ref _GtkUIManager,ref i8,ref ref _GError)u32
    clang proc     "gtk_ui_manager_add_ui"             (ref _GtkUIManager,u32,ref i8,ref i8,ref i8,i32,i32)
    clang proc     "gtk_ui_manager_remove_ui"          (ref _GtkUIManager,u32)
    clang function "gtk_ui_manager_get_ui"             (ref _GtkUIManager)ref i8
    clang proc     "gtk_ui_manager_ensure_update"      (ref _GtkUIManager)
    clang function "gtk_ui_manager_new_merge_id"       (ref _GtkUIManager)u32
    record _GtkVolumeButton =
        var _GtkScaleButton parent
    end

    record _GtkVolumeButtonClass =
        var _GtkScaleButtonClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_volume_button_get_type"        ()u64
    clang function "gtk_volume_button_new"             ()ref _GtkWidget
    clang function "gtk_widget_path_get_type"          ()u64
    clang function "gtk_widget_path_new"               ()ref _GtkWidgetPath
    clang function "gtk_widget_path_copy"              (ref _GtkWidgetPath)ref _GtkWidgetPath
    clang function "gtk_widget_path_ref"               (ref _GtkWidgetPath)ref _GtkWidgetPath
    clang proc     "gtk_widget_path_unref"             (ref _GtkWidgetPath)
    clang proc     "gtk_widget_path_free"              (ref _GtkWidgetPath)
    clang function "gtk_widget_path_to_string"         (ref _GtkWidgetPath)ref i8
    clang function "gtk_widget_path_length"            (ref _GtkWidgetPath)i32
    clang function "gtk_widget_path_append_type"       (ref _GtkWidgetPath,u64)i32
    clang proc     "gtk_widget_path_prepend_type"      (ref _GtkWidgetPath,u64)
    clang function "gtk_widget_path_append_with_siblings" (ref _GtkWidgetPath,ref _GtkWidgetPath,u32)i32
    clang function "gtk_widget_path_append_for_widget" (ref _GtkWidgetPath,ref _GtkWidget)i32
    clang function "gtk_widget_path_iter_get_object_type" (ref _GtkWidgetPath,i32)u64
    clang proc     "gtk_widget_path_iter_set_object_type" (ref _GtkWidgetPath,i32,u64)
    clang function "gtk_widget_path_iter_get_siblings" (ref _GtkWidgetPath,i32)ref _GtkWidgetPath
    clang function "gtk_widget_path_iter_get_sibling_index" (ref _GtkWidgetPath,i32)u32
    clang function "gtk_widget_path_iter_get_name"     (ref _GtkWidgetPath,i32)ref i8
    clang proc     "gtk_widget_path_iter_set_name"     (ref _GtkWidgetPath,i32,ref i8)
    clang function "gtk_widget_path_iter_has_name"     (ref _GtkWidgetPath,i32,ref i8)i32
    clang function "gtk_widget_path_iter_has_qname"    (ref _GtkWidgetPath,i32,u32)i32
    clang proc     "gtk_widget_path_iter_add_class"    (ref _GtkWidgetPath,i32,ref i8)
    clang proc     "gtk_widget_path_iter_remove_class" (ref _GtkWidgetPath,i32,ref i8)
    clang proc     "gtk_widget_path_iter_clear_classes" (ref _GtkWidgetPath,i32)
    clang function "gtk_widget_path_iter_list_classes" (ref _GtkWidgetPath,i32)ref _GSList
    clang function "gtk_widget_path_iter_has_class"    (ref _GtkWidgetPath,i32,ref i8)i32
    clang function "gtk_widget_path_iter_has_qclass"   (ref _GtkWidgetPath,i32,u32)i32
    clang proc     "gtk_widget_path_iter_add_region"   (ref _GtkWidgetPath,i32,ref i8,i32)
    clang proc     "gtk_widget_path_iter_remove_region" (ref _GtkWidgetPath,i32,ref i8)
    clang proc     "gtk_widget_path_iter_clear_regions" (ref _GtkWidgetPath,i32)
    clang function "gtk_widget_path_iter_list_regions" (ref _GtkWidgetPath,i32)ref _GSList
    clang function "gtk_widget_path_iter_has_region"   (ref _GtkWidgetPath,i32,ref i8,ref i32)i32
    clang function "gtk_widget_path_iter_has_qregion"  (ref _GtkWidgetPath,i32,u32,ref i32)i32
    clang function "gtk_widget_path_get_object_type"   (ref _GtkWidgetPath)u64
    clang function "gtk_widget_path_is_type"           (ref _GtkWidgetPath,u64)i32
    clang function "gtk_widget_path_has_parent"        (ref _GtkWidgetPath,u64)i32
    record _GtkColorSelectionDialog =
        var _GtkDialog parent_instance
        var ref _GtkColorSelectionDialogPrivate priv
    end

    record _GtkColorSelectionDialogPrivate =
        var int dummy    !empty record
    end

    record _GtkColorSelectionDialogClass =
        var _GtkDialogClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_color_selection_dialog_get_type" ()u64
    clang function "gtk_color_selection_dialog_new"    (ref i8)ref _GtkWidget
    clang function "gtk_color_selection_dialog_get_color_selection" (ref _GtkColorSelectionDialog)ref _GtkWidget
    record _GtkFontSelection =
        var _GtkBox parent_instance
        var ref _GtkFontSelectionPrivate priv
    end

    record _GtkFontSelectionPrivate =
        var int dummy    !empty record
    end

    record _GtkFontSelectionClass =
        var _GtkBoxClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    record _GtkFontSelectionDialog =
        var _GtkDialog parent_instance
        var ref _GtkFontSelectionDialogPrivate priv
    end

    record _GtkFontSelectionDialogPrivate =
        var int dummy    !empty record
    end

    record _GtkFontSelectionDialogClass =
        var _GtkDialogClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_font_selection_get_type"       ()u64
    clang function "gtk_font_selection_new"            ()ref _GtkWidget
    clang function "gtk_font_selection_get_family_list" (ref _GtkFontSelection)ref _GtkWidget
    clang function "gtk_font_selection_get_face_list"  (ref _GtkFontSelection)ref _GtkWidget
    clang function "gtk_font_selection_get_size_entry" (ref _GtkFontSelection)ref _GtkWidget
    clang function "gtk_font_selection_get_size_list"  (ref _GtkFontSelection)ref _GtkWidget
    clang function "gtk_font_selection_get_preview_entry" (ref _GtkFontSelection)ref _GtkWidget
    clang function "gtk_font_selection_get_family"     (ref _GtkFontSelection)ref _PangoFontFamily
    clang function "gtk_font_selection_get_face"       (ref _GtkFontSelection)ref _PangoFontFace
    clang function "gtk_font_selection_get_size"       (ref _GtkFontSelection)i32
    clang function "gtk_font_selection_get_font_name"  (ref _GtkFontSelection)ref i8
    clang function "gtk_font_selection_set_font_name"  (ref _GtkFontSelection,ref i8)i32
    clang function "gtk_font_selection_get_preview_text" (ref _GtkFontSelection)ref i8
    clang proc     "gtk_font_selection_set_preview_text" (ref _GtkFontSelection,ref i8)
    clang function "gtk_font_selection_dialog_get_type" ()u64
    clang function "gtk_font_selection_dialog_new"     (ref i8)ref _GtkWidget
    clang function "gtk_font_selection_dialog_get_ok_button" (ref _GtkFontSelectionDialog)ref _GtkWidget
    clang function "gtk_font_selection_dialog_get_cancel_button" (ref _GtkFontSelectionDialog)ref _GtkWidget
    clang function "gtk_font_selection_dialog_get_font_selection" (ref _GtkFontSelectionDialog)ref _GtkWidget
    clang function "gtk_font_selection_dialog_get_font_name" (ref _GtkFontSelectionDialog)ref i8
    clang function "gtk_font_selection_dialog_set_font_name" (ref _GtkFontSelectionDialog,ref i8)i32
    clang function "gtk_font_selection_dialog_get_preview_text" (ref _GtkFontSelectionDialog)ref i8
    clang proc     "gtk_font_selection_dialog_set_preview_text" (ref _GtkFontSelectionDialog,ref i8)
    record _GtkHandleBox =
        var _GtkBin bin
        var ref _GtkHandleBoxPrivate priv
    end

    record _GtkHandleBoxPrivate =
        var int dummy    !empty record
    end

    record _GtkHandleBoxClass =
        var _GtkBinClass parent_class
        var ref clang proc(ref _GtkHandleBox,ref _GtkWidget) child_attached
        var ref clang proc(ref _GtkHandleBox,ref _GtkWidget) child_detached
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_handle_box_get_type"           ()u64
    clang function "gtk_handle_box_new"                ()ref _GtkWidget
    clang proc     "gtk_handle_box_set_shadow_type"    (ref _GtkHandleBox,i32)
    clang function "gtk_handle_box_get_shadow_type"    (ref _GtkHandleBox)i32
    clang proc     "gtk_handle_box_set_handle_position" (ref _GtkHandleBox,i32)
    clang function "gtk_handle_box_get_handle_position" (ref _GtkHandleBox)i32
    clang proc     "gtk_handle_box_set_snap_edge"      (ref _GtkHandleBox,i32)
    clang function "gtk_handle_box_get_snap_edge"      (ref _GtkHandleBox)i32
    clang function "gtk_handle_box_get_child_detached" (ref _GtkHandleBox)i32
    record _GtkHButtonBox =
        var _GtkButtonBox button_box
    end

    record _GtkHButtonBoxClass =
        var _GtkButtonBoxClass parent_class
    end

    clang function "gtk_hbutton_box_get_type"          ()u64
    clang function "gtk_hbutton_box_new"               ()ref _GtkWidget
    record _GtkHBox =
        var _GtkBox box
    end

    record _GtkHBoxClass =
        var _GtkBoxClass parent_class
    end

    clang function "gtk_hbox_get_type"                 ()u64
    clang function "gtk_hbox_new"                      (i32,i32)ref _GtkWidget
    record _GtkHPaned =
        var _GtkPaned paned
    end

    record _GtkHPanedClass =
        var _GtkPanedClass parent_class
    end

    clang function "gtk_hpaned_get_type"               ()u64
    clang function "gtk_hpaned_new"                    ()ref _GtkWidget
    record _GtkHSV =
        var _GtkWidget parent_instance
        var ref _GtkHSVPrivate priv
    end

    record _GtkHSVPrivate =
        var int dummy    !empty record
    end

    record _GtkHSVClass =
        var _GtkWidgetClass parent_class
        var ref clang proc(ref _GtkHSV) changed
        var ref clang proc(ref _GtkHSV,i32) move
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_hsv_get_type"                  ()u64
    clang function "gtk_hsv_new"                       ()ref _GtkWidget
    clang proc     "gtk_hsv_set_color"                 (ref _GtkHSV,r64,r64,r64)
    clang proc     "gtk_hsv_get_color"                 (ref _GtkHSV,ref r64,ref r64,ref r64)
    clang proc     "gtk_hsv_set_metrics"               (ref _GtkHSV,i32,i32)
    clang proc     "gtk_hsv_get_metrics"               (ref _GtkHSV,ref i32,ref i32)
    clang function "gtk_hsv_is_adjusting"              (ref _GtkHSV)i32
    record _GtkHScale =
        var _GtkScale scale
    end

    record _GtkHScaleClass =
        var _GtkScaleClass parent_class
    end

    clang function "gtk_hscale_get_type"               ()u64
    clang function "gtk_hscale_new"                    (ref _GtkAdjustment)ref _GtkWidget
    clang function "gtk_hscale_new_with_range"         (r64,r64,r64)ref _GtkWidget
    record _GtkHScrollbar =
        var _GtkScrollbar scrollbar
    end

    record _GtkHScrollbarClass =
        var _GtkScrollbarClass parent_class
    end

    clang function "gtk_hscrollbar_get_type"           ()u64
    clang function "gtk_hscrollbar_new"                (ref _GtkAdjustment)ref _GtkWidget
    record _GtkHSeparator =
        var _GtkSeparator separator
    end

    record _GtkHSeparatorClass =
        var _GtkSeparatorClass parent_class
    end

    clang function "gtk_hseparator_get_type"           ()u64
    clang function "gtk_hseparator_new"                ()ref _GtkWidget
    record _GtkRcContext =
        var int dummy    !empty record
    end

    record _GtkRcStyleClass =
        var _GObjectClass parent_class
        var ref clang function(ref _GtkRcStyle)ref _GtkRcStyle create_rc_style
        var ref clang function(ref _GtkRcStyle,ref _GtkSettings,ref _GScanner)u32 parse
        var ref clang proc(ref _GtkRcStyle,ref _GtkRcStyle) merge
        var ref clang function(ref _GtkRcStyle)ref _GtkStyle create_style
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    const GTK_RC_FG                          = 1
    const GTK_RC_BG                          = 2
    const GTK_RC_TEXT                        = 4
    const GTK_RC_BASE                        = 8
    clang function "_gtk_rc_parse_widget_class_path"   (ref i8)ref _GSList
    clang proc     "_gtk_rc_free_widget_class_path"    (ref _GSList)
    clang function "_gtk_rc_match_widget_class"        (ref _GSList,i32,ref i8,ref i8)i32
    clang proc     "gtk_rc_add_default_file"           (ref i8)
    clang proc     "gtk_rc_set_default_files"          (ref ref i8)
    clang function "gtk_rc_get_default_files"          ()ref ref i8
    clang function "gtk_rc_get_style"                  (ref _GtkWidget)ref _GtkStyle
    clang function "gtk_rc_get_style_by_paths"         (ref _GtkSettings,ref i8,ref i8,u64)ref _GtkStyle
    clang function "gtk_rc_reparse_all_for_settings"   (ref _GtkSettings,i32)i32
    clang proc     "gtk_rc_reset_styles"               (ref _GtkSettings)
    clang function "gtk_rc_find_pixmap_in_path"        (ref _GtkSettings,ref _GScanner,ref i8)ref i8
    clang proc     "gtk_rc_parse"                      (ref i8)
    clang proc     "gtk_rc_parse_string"               (ref i8)
    clang function "gtk_rc_reparse_all"                ()i32
    clang function "gtk_rc_style_get_type"             ()u64
    clang function "gtk_rc_style_new"                  ()ref _GtkRcStyle
    clang function "gtk_rc_style_copy"                 (ref _GtkRcStyle)ref _GtkRcStyle
    clang function "gtk_rc_find_module_in_path"        (ref i8)ref i8
    clang function "gtk_rc_get_theme_dir"              ()ref i8
    clang function "gtk_rc_get_module_dir"             ()ref i8
    clang function "gtk_rc_get_im_module_path"         ()ref i8
    clang function "gtk_rc_get_im_module_file"         ()ref i8
    const GTK_RC_TOKEN_INVALID               = 270
    const GTK_RC_TOKEN_INCLUDE               = 271
    const GTK_RC_TOKEN_NORMAL                = 272
    const GTK_RC_TOKEN_ACTIVE                = 273
    const GTK_RC_TOKEN_PRELIGHT              = 274
    const GTK_RC_TOKEN_SELECTED              = 275
    const GTK_RC_TOKEN_INSENSITIVE           = 276
    const GTK_RC_TOKEN_FG                    = 277
    const GTK_RC_TOKEN_BG                    = 278
    const GTK_RC_TOKEN_TEXT                  = 279
    const GTK_RC_TOKEN_BASE                  = 280
    const GTK_RC_TOKEN_XTHICKNESS            = 281
    const GTK_RC_TOKEN_YTHICKNESS            = 282
    const GTK_RC_TOKEN_FONT                  = 283
    const GTK_RC_TOKEN_FONTSET               = 284
    const GTK_RC_TOKEN_FONT_NAME             = 285
    const GTK_RC_TOKEN_BG_PIXMAP             = 286
    const GTK_RC_TOKEN_PIXMAP_PATH           = 287
    const GTK_RC_TOKEN_STYLE                 = 288
    const GTK_RC_TOKEN_BINDING               = 289
    const GTK_RC_TOKEN_BIND                  = 290
    const GTK_RC_TOKEN_WIDGET                = 291
    const GTK_RC_TOKEN_WIDGET_CLASS          = 292
    const GTK_RC_TOKEN_CLASS                 = 293
    const GTK_RC_TOKEN_LOWEST                = 294
    const GTK_RC_TOKEN_GTK                   = 295
    const GTK_RC_TOKEN_APPLICATION           = 296
    const GTK_RC_TOKEN_THEME                 = 297
    const GTK_RC_TOKEN_RC                    = 298
    const GTK_RC_TOKEN_HIGHEST               = 299
    const GTK_RC_TOKEN_ENGINE                = 300
    const GTK_RC_TOKEN_MODULE_PATH           = 301
    const GTK_RC_TOKEN_IM_MODULE_PATH        = 302
    const GTK_RC_TOKEN_IM_MODULE_FILE        = 303
    const GTK_RC_TOKEN_STOCK                 = 304
    const GTK_RC_TOKEN_LTR                   = 305
    const GTK_RC_TOKEN_RTL                   = 306
    const GTK_RC_TOKEN_COLOR                 = 307
    const GTK_RC_TOKEN_UNBIND                = 308
    const GTK_RC_TOKEN_LAST                  = 309
    clang function "gtk_rc_scanner_new"                ()ref _GScanner
    clang function "gtk_rc_parse_color"                (ref _GScanner,ref _GdkColor)u32
    clang function "gtk_rc_parse_color_full"           (ref _GScanner,ref _GtkRcStyle,ref _GdkColor)u32
    clang function "gtk_rc_parse_state"                (ref _GScanner,ref i32)u32
    clang function "gtk_rc_parse_priority"             (ref _GScanner,ref i32)u32
    record _GtkRcProperty =
        var u32 type_name
        var u32 property_name
        var ref i8 origin
        var _GValue value
    end

    record _GtkStyleClass =
        var _GObjectClass parent_class
        var ref clang proc(ref _GtkStyle) realize
        var ref clang proc(ref _GtkStyle) unrealize
        var ref clang proc(ref _GtkStyle,ref _GtkStyle) copy
        var ref clang function(ref _GtkStyle)ref _GtkStyle clone
        var ref clang proc(ref _GtkStyle,ref _GtkRcStyle) init_from_rc
        var ref clang proc(ref _GtkStyle,ref _GdkWindow,i32) set_background
        var ref clang function(ref _GtkStyle,ref _GtkIconSource,i32,i32,i32,ref _GtkWidget,ref i8)ref _GdkPixbuf render_icon
        var ref clang proc(ref _GtkStyle,ref _cairo,i32,ref _GtkWidget,ref i8,i32,i32,i32) draw_hline
        var ref clang proc(ref _GtkStyle,ref _cairo,i32,ref _GtkWidget,ref i8,i32,i32,i32) draw_vline
        var ref clang proc(ref _GtkStyle,ref _cairo,i32,i32,ref _GtkWidget,ref i8,i32,i32,i32,i32) draw_shadow
        var ref clang proc(ref _GtkStyle,ref _cairo,i32,i32,ref _GtkWidget,ref i8,i32,i32,i32,i32,i32,i32) draw_arrow
        var ref clang proc(ref _GtkStyle,ref _cairo,i32,i32,ref _GtkWidget,ref i8,i32,i32,i32,i32) draw_diamond
        var ref clang proc(ref _GtkStyle,ref _cairo,i32,i32,ref _GtkWidget,ref i8,i32,i32,i32,i32) draw_box
        var ref clang proc(ref _GtkStyle,ref _cairo,i32,i32,ref _GtkWidget,ref i8,i32,i32,i32,i32) draw_flat_box
        var ref clang proc(ref _GtkStyle,ref _cairo,i32,i32,ref _GtkWidget,ref i8,i32,i32,i32,i32) draw_check
        var ref clang proc(ref _GtkStyle,ref _cairo,i32,i32,ref _GtkWidget,ref i8,i32,i32,i32,i32) draw_option
        var ref clang proc(ref _GtkStyle,ref _cairo,i32,i32,ref _GtkWidget,ref i8,i32,i32,i32,i32) draw_tab
        var ref clang proc(ref _GtkStyle,ref _cairo,i32,i32,ref _GtkWidget,ref i8,i32,i32,i32,i32,i32,i32,i32) draw_shadow_gap
        var ref clang proc(ref _GtkStyle,ref _cairo,i32,i32,ref _GtkWidget,ref i8,i32,i32,i32,i32,i32,i32,i32) draw_box_gap
        var ref clang proc(ref _GtkStyle,ref _cairo,i32,i32,ref _GtkWidget,ref i8,i32,i32,i32,i32,i32) draw_extension
        var ref clang proc(ref _GtkStyle,ref _cairo,i32,ref _GtkWidget,ref i8,i32,i32,i32,i32) draw_focus
        var ref clang proc(ref _GtkStyle,ref _cairo,i32,i32,ref _GtkWidget,ref i8,i32,i32,i32,i32,i32) draw_slider
        var ref clang proc(ref _GtkStyle,ref _cairo,i32,i32,ref _GtkWidget,ref i8,i32,i32,i32,i32,i32) draw_handle
        var ref clang proc(ref _GtkStyle,ref _cairo,i32,ref _GtkWidget,ref i8,i32,i32,i32) draw_expander
        var ref clang proc(ref _GtkStyle,ref _cairo,i32,i32,ref _GtkWidget,ref i8,i32,i32,ref _PangoLayout) draw_layout
        var ref clang proc(ref _GtkStyle,ref _cairo,i32,ref _GtkWidget,ref i8,i32,i32,i32,i32,i32) draw_resize_grip
        var ref clang proc(ref _GtkStyle,ref _cairo,i32,ref _GtkWidget,ref i8,u32,i32,i32,i32,i32) draw_spinner
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
        var ref clang proc() _gtk_reserved5
        var ref clang proc() _gtk_reserved6
        var ref clang proc() _gtk_reserved7
        var ref clang proc() _gtk_reserved8
        var ref clang proc() _gtk_reserved9
        var ref clang proc() _gtk_reserved10
        var ref clang proc() _gtk_reserved11
    end

    record _GtkThemeEngine =
        var int dummy    !empty record
    end

    clang function "gtk_style_get_type"                ()u64
    clang function "gtk_style_new"                     ()ref _GtkStyle
    clang function "gtk_style_copy"                    (ref _GtkStyle)ref _GtkStyle
    clang function "gtk_style_attach"                  (ref _GtkStyle,ref _GdkWindow)ref _GtkStyle
    clang proc     "gtk_style_detach"                  (ref _GtkStyle)
    clang proc     "gtk_style_set_background"          (ref _GtkStyle,ref _GdkWindow,i32)
    clang proc     "gtk_style_apply_default_background" (ref _GtkStyle,ref _cairo,ref _GdkWindow,i32,i32,i32,i32,i32)
    clang function "gtk_style_lookup_icon_set"         (ref _GtkStyle,ref i8)ref _GtkIconSet
    clang function "gtk_style_lookup_color"            (ref _GtkStyle,ref i8,ref _GdkColor)i32
    clang function "gtk_style_render_icon"             (ref _GtkStyle,ref _GtkIconSource,i32,i32,i32,ref _GtkWidget,ref i8)ref _GdkPixbuf
    clang proc     "gtk_paint_hline"                   (ref _GtkStyle,ref _cairo,i32,ref _GtkWidget,ref i8,i32,i32,i32)
    clang proc     "gtk_paint_vline"                   (ref _GtkStyle,ref _cairo,i32,ref _GtkWidget,ref i8,i32,i32,i32)
    clang proc     "gtk_paint_shadow"                  (ref _GtkStyle,ref _cairo,i32,i32,ref _GtkWidget,ref i8,i32,i32,i32,i32)
    clang proc     "gtk_paint_arrow"                   (ref _GtkStyle,ref _cairo,i32,i32,ref _GtkWidget,ref i8,i32,i32,i32,i32,i32,i32)
    clang proc     "gtk_paint_diamond"                 (ref _GtkStyle,ref _cairo,i32,i32,ref _GtkWidget,ref i8,i32,i32,i32,i32)
    clang proc     "gtk_paint_box"                     (ref _GtkStyle,ref _cairo,i32,i32,ref _GtkWidget,ref i8,i32,i32,i32,i32)
    clang proc     "gtk_paint_flat_box"                (ref _GtkStyle,ref _cairo,i32,i32,ref _GtkWidget,ref i8,i32,i32,i32,i32)
    clang proc     "gtk_paint_check"                   (ref _GtkStyle,ref _cairo,i32,i32,ref _GtkWidget,ref i8,i32,i32,i32,i32)
    clang proc     "gtk_paint_option"                  (ref _GtkStyle,ref _cairo,i32,i32,ref _GtkWidget,ref i8,i32,i32,i32,i32)
    clang proc     "gtk_paint_tab"                     (ref _GtkStyle,ref _cairo,i32,i32,ref _GtkWidget,ref i8,i32,i32,i32,i32)
    clang proc     "gtk_paint_shadow_gap"              (ref _GtkStyle,ref _cairo,i32,i32,ref _GtkWidget,ref i8,i32,i32,i32,i32,i32,i32,i32)
    clang proc     "gtk_paint_box_gap"                 (ref _GtkStyle,ref _cairo,i32,i32,ref _GtkWidget,ref i8,i32,i32,i32,i32,i32,i32,i32)
    clang proc     "gtk_paint_extension"               (ref _GtkStyle,ref _cairo,i32,i32,ref _GtkWidget,ref i8,i32,i32,i32,i32,i32)
    clang proc     "gtk_paint_focus"                   (ref _GtkStyle,ref _cairo,i32,ref _GtkWidget,ref i8,i32,i32,i32,i32)
    clang proc     "gtk_paint_slider"                  (ref _GtkStyle,ref _cairo,i32,i32,ref _GtkWidget,ref i8,i32,i32,i32,i32,i32)
    clang proc     "gtk_paint_handle"                  (ref _GtkStyle,ref _cairo,i32,i32,ref _GtkWidget,ref i8,i32,i32,i32,i32,i32)
    clang proc     "gtk_paint_expander"                (ref _GtkStyle,ref _cairo,i32,ref _GtkWidget,ref i8,i32,i32,i32)
    clang proc     "gtk_paint_layout"                  (ref _GtkStyle,ref _cairo,i32,i32,ref _GtkWidget,ref i8,i32,i32,ref _PangoLayout)
    clang proc     "gtk_paint_resize_grip"             (ref _GtkStyle,ref _cairo,i32,ref _GtkWidget,ref i8,i32,i32,i32,i32,i32)
    clang proc     "gtk_paint_spinner"                 (ref _GtkStyle,ref _cairo,i32,ref _GtkWidget,ref i8,u32,i32,i32,i32,i32)
    clang proc     "gtk_style_get_style_property"      (ref _GtkStyle,u64,ref i8,ref _GValue)
    clang proc     "gtk_style_get_valist"              (ref _GtkStyle,u64,ref i8,ref i8)
    clang proc     "gtk_style_get"                     (ref _GtkStyle,u64,ref i8,...)
    clang function "_gtk_style_new_for_path"           (ref _GdkScreen,ref _GtkWidgetPath)ref _GtkStyle
    clang proc     "_gtk_style_shade"                  (ref _GdkColor,ref _GdkColor,r64)
    clang function "gtk_style_has_context"             (ref _GtkStyle)i32
    clang proc     "gtk_widget_style_attach"           (ref _GtkWidget)
    clang function "gtk_widget_has_rc_style"           (ref _GtkWidget)i32
    clang proc     "gtk_widget_set_style"              (ref _GtkWidget,ref _GtkStyle)
    clang proc     "gtk_widget_ensure_style"           (ref _GtkWidget)
    clang function "gtk_widget_get_style"              (ref _GtkWidget)ref _GtkStyle
    clang proc     "gtk_widget_modify_style"           (ref _GtkWidget,ref _GtkRcStyle)
    clang function "gtk_widget_get_modifier_style"     (ref _GtkWidget)ref _GtkRcStyle
    clang proc     "gtk_widget_modify_fg"              (ref _GtkWidget,i32,ref _GdkColor)
    clang proc     "gtk_widget_modify_bg"              (ref _GtkWidget,i32,ref _GdkColor)
    clang proc     "gtk_widget_modify_text"            (ref _GtkWidget,i32,ref _GdkColor)
    clang proc     "gtk_widget_modify_base"            (ref _GtkWidget,i32,ref _GdkColor)
    clang proc     "gtk_widget_modify_cursor"          (ref _GtkWidget,ref _GdkColor,ref _GdkColor)
    clang proc     "gtk_widget_modify_font"            (ref _GtkWidget,ref _PangoFontDescription)
    clang proc     "gtk_widget_reset_rc_styles"        (ref _GtkWidget)
    clang function "gtk_widget_get_default_style"      ()ref _GtkStyle
    clang proc     "gtk_widget_path"                   (ref _GtkWidget,ref u32,ref ref i8,ref ref i8)
    clang proc     "gtk_widget_class_path"             (ref _GtkWidget,ref u32,ref ref i8,ref ref i8)
    clang function "gtk_widget_render_icon"            (ref _GtkWidget,ref i8,i32,ref i8)ref _GdkPixbuf
    record _GtkTable =
        var _GtkContainer container
        var ref _GtkTablePrivate priv
    end

    record _GtkTablePrivate =
        var int dummy    !empty record
    end

    record _GtkTableClass =
        var _GtkContainerClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    record _GtkTableChild =
        var ref _GtkWidget widget
        var u16 left_attach
        var u16 right_attach
        var u16 top_attach
        var u16 bottom_attach
        var u16 xpadding
        var u16 ypadding
        var u32 xexpand
        var u32 yexpand
        var u32 xshrink
        var u32 yshrink
        var u32 xfill
        var u32 yfill
    end

    record _GtkTableRowCol =
        var u16 requisition
        var u16 allocation
        var u16 spacing
        var u32 need_expand
        var u32 need_shrink
        var u32 expand
        var u32 shrink
        var u32 empty
    end

    clang function "gtk_table_get_type"                ()u64
    clang function "gtk_table_new"                     (u32,u32,i32)ref _GtkWidget
    clang proc     "gtk_table_resize"                  (ref _GtkTable,u32,u32)
    clang proc     "gtk_table_attach"                  (ref _GtkTable,ref _GtkWidget,u32,u32,u32,u32,i32,i32,u32,u32)
    clang proc     "gtk_table_attach_defaults"         (ref _GtkTable,ref _GtkWidget,u32,u32,u32,u32)
    clang proc     "gtk_table_set_row_spacing"         (ref _GtkTable,u32,u32)
    clang function "gtk_table_get_row_spacing"         (ref _GtkTable,u32)u32
    clang proc     "gtk_table_set_col_spacing"         (ref _GtkTable,u32,u32)
    clang function "gtk_table_get_col_spacing"         (ref _GtkTable,u32)u32
    clang proc     "gtk_table_set_row_spacings"        (ref _GtkTable,u32)
    clang function "gtk_table_get_default_row_spacing" (ref _GtkTable)u32
    clang proc     "gtk_table_set_col_spacings"        (ref _GtkTable,u32)
    clang function "gtk_table_get_default_col_spacing" (ref _GtkTable)u32
    clang proc     "gtk_table_set_homogeneous"         (ref _GtkTable,i32)
    clang function "gtk_table_get_homogeneous"         (ref _GtkTable)i32
    clang proc     "gtk_table_get_size"                (ref _GtkTable,ref u32,ref u32)
    record _GtkTearoffMenuItem =
        var _GtkMenuItem menu_item
        var ref _GtkTearoffMenuItemPrivate priv
    end

    record _GtkTearoffMenuItemPrivate =
        var int dummy    !empty record
    end

    record _GtkTearoffMenuItemClass =
        var _GtkMenuItemClass parent_class
        var ref clang proc() _gtk_reserved1
        var ref clang proc() _gtk_reserved2
        var ref clang proc() _gtk_reserved3
        var ref clang proc() _gtk_reserved4
    end

    clang function "gtk_tearoff_menu_item_get_type"    ()u64
    clang function "gtk_tearoff_menu_item_new"         ()ref _GtkWidget
    record _GtkVButtonBox =
        var _GtkButtonBox button_box
    end

    record _GtkVButtonBoxClass =
        var _GtkButtonBoxClass parent_class
    end

    clang function "gtk_vbutton_box_get_type"          ()u64
    clang function "gtk_vbutton_box_new"               ()ref _GtkWidget
    record _GtkVBox =
        var _GtkBox box
    end

    record _GtkVBoxClass =
        var _GtkBoxClass parent_class
    end

    clang function "gtk_vbox_get_type"                 ()u64
    clang function "gtk_vbox_new"                      (i32,i32)ref _GtkWidget
    record _GtkVPaned =
        var _GtkPaned paned
    end

    record _GtkVPanedClass =
        var _GtkPanedClass parent_class
    end

    clang function "gtk_vpaned_get_type"               ()u64
    clang function "gtk_vpaned_new"                    ()ref _GtkWidget
    record _GtkVScale =
        var _GtkScale scale
    end

    record _GtkVScaleClass =
        var _GtkScaleClass parent_class
    end

    clang function "gtk_vscale_get_type"               ()u64
    clang function "gtk_vscale_new"                    (ref _GtkAdjustment)ref _GtkWidget
    clang function "gtk_vscale_new_with_range"         (r64,r64,r64)ref _GtkWidget
    record _GtkVScrollbar =
        var _GtkScrollbar scrollbar
    end

    record _GtkVScrollbarClass =
        var _GtkScrollbarClass parent_class
    end

    clang function "gtk_vscrollbar_get_type"           ()u64
    clang function "gtk_vscrollbar_new"                (ref _GtkAdjustment)ref _GtkWidget
    record _GtkVSeparator =
        var _GtkSeparator separator
    end

    record _GtkVSeparatorClass =
        var _GtkSeparatorClass parent_class
    end

    clang function "gtk_vseparator_get_type"           ()u64
    clang function "gtk_vseparator_new"                ()ref _GtkWidget
    const GTK_STYLE_PROPERTY_MARGIN          = "margin"    ! macro
    const G_TYPE_TLS_ERROR                   = (g_tls_error_get_type())    ! macro
    const GDK_KEY_overbar                    = 0xbc0    ! macro
    const GDK_KEY_Atilde                     =  0x0c3    ! macro
    const GDK_KEY_hebrew_kuf                 =  0xcf7    ! macro
    const cairo_default_matrix               =  cairo_default_matrix_REPLACED_BY_cairo_identity_matrix    ! macro
    const g_try_renew                        =  _G_RENEW(struct_type,mem,n_structs,try_realloc)    ! macro
    const cairo_surface_set_matrix           = cairo_surface_set_matrix_DEPRECATED_BY_cairo_pattern_set_matrix    ! macro
    const GTK_BUTTON_BOX                     = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_BUTTON_BOX,GtkButtonBox))    ! macro
    const ATK_IS_DOCUMENT                    = G_TYPE_CHECK_INSTANCE_TYPE((obj),ATK_TYPE_DOCUMENT)    ! macro
    const GTK_ICON_THEME                     = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_ICON_THEME,GtkIconTheme))    ! macro
    const GDK_KEY_RockerDown                 = 0x1008ff24    ! macro
    const GTK_ORIENTABLE_CLASS               = (G_TYPE_CHECK_CLASS_CAST((vtable),GTK_TYPE_ORIENTABLE,GtkOrientableIface))    ! macro
    const G_CHARSET_CONVERTER                = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_CHARSET_CONVERTER,GCharsetConverter))    ! macro
    const G_ONCE_INIT                        = {G_ONCE_STATUS_NOTCALLED,NULL}    ! macro
    const G_VARIANT_TYPE_MAYBE               = ((const GVariantType*)"m*")    ! macro
    const GDK_KEY_topleftparens              = 0x8ab    ! macro
    const GTK_TYPE_MOUNT_OPERATION           = (gtk_mount_operation_get_type())    ! macro
    const GLIB_VAR                           = extern __declspec(dllimport)    ! macro
    const GDK_KEY_Thai_khokhai               = 0xda2    ! macro
    const cairo_set_target_ps                =  cairo_set_target_ps_DEPRECATED_BY_cairo_ps_surface_create    ! macro
    const G_PARAM_SPEC_PARAM                 = (G_TYPE_CHECK_INSTANCE_CAST((pspec),G_TYPE_PARAM_PARAM,GParamSpecParam))    ! macro
    const GDK_KEY_Abrevebelowdot             = 0x1001eb6    ! macro
    const G_INET_ADDRESS_GET_CLASS           = (G_TYPE_INSTANCE_GET_CLASS((o),G_TYPE_INET_ADDRESS,GInetAddressClass))    ! macro
    const GDK_KEY_Thai_maiek                 = 0xde8    ! macro
    const GTK_IS_TREE_SELECTION_CLASS        = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_TREE_SELECTION))    ! macro
    const GDK_KEY_Cyrillic_YERU              = 0x6f9    ! macro
    const G_IS_TLS_BACKEND                   = (G_TYPE_CHECK_INSTANCE_TYPE((obj),G_TYPE_TLS_BACKEND))    ! macro
    const GTK_TYPE_WIDGET                    = (gtk_widget_get_type())    ! macro
    const GTK_TYPE_TEAROFF_MENU_ITEM         = (gtk_tearoff_menu_item_get_type())    ! macro
    const G_GINT32_FORMAT                    = "i"    ! macro
    const GDK_KEY_Hangul_OE                  = 0xeca    ! macro
    const GTK_PRINT_SETTINGS_QUALITY         = "quality"    ! macro
    const GDK_KEY_RotationPB                 = 0x1008ff75    ! macro
    const GDK_KEY_maltesecross               =  0xaf0    ! macro
    const GDK_KEY_foursubscript              =  0x1002084    ! macro
    const GTK_IS_ICON_FACTORY_CLASS          = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_ICON_FACTORY))    ! macro
    const G_VARIANT_TYPE_STRING_ARRAY        = ((const GVariantType*)"as")    ! macro
    const G_VOLUME_MONITOR                   = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_VOLUME_MONITOR,GVolumeMonitor))    ! macro
    const GDK_KEY_Sinh_ndha                  = 0x1000db3    ! macro
    const cairo_ps_surface_set_dpi           =  cairo_ps_surface_set_dpi_REPLACED_BY_cairo_surface_set_fallback_resolution    ! macro
    const GTK_IS_APP_CHOOSER                 = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_APP_CHOOSER))    ! macro
    const G_VARIANT_TYPE_BYTESTRING_ARRAY    = ((const GVariantType*)"aay")    ! macro
    const G_FILE_ATTRIBUTE_THUMBNAILING_FAILED = "thumbnail::failed"    ! macro
    const G_TYPE_CLASS_GET_PRIVATE           = ((c_type*)g_type_class_get_private((GTypeClass*)(klass),(g_type)))    ! macro
    const GTK_TYPE_APP_CHOOSER_BUTTON        = (gtk_app_chooser_button_get_type())    ! macro
    const g_date_sunday_weeks_in_year        = g_date_get_sunday_weeks_in_year    ! macro
    const GDK_KEY_Ecircumflexgrave           =  0x1001ec0    ! macro
    const GDK_KEY_Forward                    =  0x1008ff27    ! macro
    const GTK_STATUS_ICON_CLASS              = (G_TYPE_CHECK_CLASS_CAST((k),GTK_TYPE_STATUS_ICON,GtkStatusIconClass))    ! macro
    const GTK_RANGE                          = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_RANGE,GtkRange))    ! macro
    const GDK_KEY_Greek_epsilon              = 0x7e5    ! macro
    const GTK_FONT_SELECTION                 = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_FONT_SELECTION,GtkFontSelection))    ! macro
    const GDK_TYPE_INPUT_MODE                = (gdk_input_mode_get_type())    ! macro
    const ATK_TYPE_MISC                      = (atk_misc_get_type())    ! macro
    const GDK_KEY_Aogonek                    = 0x1a1    ! macro
    const GDK_KEY_Thai_nikhahit              =  0xded    ! macro
    const GDK_KEY_Sinh_aa                    =  0x1000d86    ! macro
    const GDK_KEY_abovedot                   =  0x1ff    ! macro
    const GDK_KEY_Greek_upsilondieresis      =  0x7b9    ! macro
    const GDK_IS_WINDOW_CLASS                = (G_TYPE_CHECK_CLASS_TYPE((klass),GDK_TYPE_WINDOW))    ! macro
    const GDK_KEY_soliddiamond               = 0x9e0    ! macro
    const g_hook_append                      =  g_hook_insert_before((hook_list),NULL,(hook))    ! macro
    const GDK_KEY_Sinh_thha                  = 0x1000dae    ! macro
    const GTK_IS_ACTION                      = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_ACTION))    ! macro
    const cairo_matrix_create                = cairo_matrix_create_DEPRECATED_BY_cairo_matrix_t    ! macro
    const GDK_KEY_Sinh_ae                    =  0x1000d87    ! macro
    const GTK_NOTEBOOK_CLASS                 = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_NOTEBOOK,GtkNotebookClass))    ! macro
    const G_IS_TYPE_MODULE                   = (G_TYPE_CHECK_INSTANCE_TYPE((module),G_TYPE_TYPE_MODULE))    ! macro
    const GTK_ASSISTANT                      = (G_TYPE_CHECK_INSTANCE_CAST((o),GTK_TYPE_ASSISTANT,GtkAssistant))    ! macro
    const GTK_CELL_RENDERER_ACCEL_GET_CLASS  = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_CELL_RENDERER_ACCEL,GtkCellRendererAccelClass))    ! macro
    const GTK_TYPE_HSCROLLBAR                = (gtk_hscrollbar_get_type())    ! macro
    const G_FILE_MONITOR_CLASS               = (G_TYPE_CHECK_CLASS_CAST((k),G_TYPE_FILE_MONITOR,GFileMonitorClass))    ! macro
    const GTK_STYLE_CLASS_COMBOBOX_ENTRY     = "combobox-entry"    ! macro
    const GDK_KEY_Greek_OMICRONaccent        = 0x7a7    ! macro
    const GTK_IS_INVISIBLE_CLASS             = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_INVISIBLE))    ! macro
    const G_FILE_ATTRIBUTE_TRASH_ORIG_PATH   = "trash::orig-path"    ! macro
    const GTK_TYPE_FONT_BUTTON               = (gtk_font_button_get_type())    ! macro
    const GDK_KEY_Sinh_ai                    = 0x1000d93    ! macro
    const GTK_PROGRESS_BAR_GET_CLASS         = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_PROGRESS_BAR,GtkProgressBarClass))    ! macro
    const G_IS_TLS_CLIENT_CONNECTION         = (G_TYPE_CHECK_INSTANCE_TYPE((inst),G_TYPE_TLS_CLIENT_CONNECTION))    ! macro
    const G_IS_SOCKET_CLASS                  = (G_TYPE_CHECK_CLASS_TYPE((class),G_TYPE_SOCKET))    ! macro
    const GDK_KEY_Sinh_al                    = 0x1000dca    ! macro
    const GDK_TYPE_GRAB_OWNERSHIP            = (gdk_grab_ownership_get_type())    ! macro
    const GTK_IS_SIZE_GROUP_CLASS            = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_SIZE_GROUP))    ! macro
    const GDK_KEY_KP_Multiply                = 0xffaa    ! macro
    const GDK_KEY_Sinh_e2                    =  0x1000dd9    ! macro
    const ATK_IS_HYPERLINK_CLASS             = (G_TYPE_CHECK_CLASS_TYPE((klass),ATK_TYPE_HYPERLINK))    ! macro
    const GTK_HANDLE_BOX_CLASS               = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_HANDLE_BOX,GtkHandleBoxClass))    ! macro
    const GDK_KEY_Armenian_MEN               = 0x1000544    ! macro
    const GTK_IS_WINDOW                      = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_WINDOW))    ! macro
    const GTK_HSEPARATOR_CLASS               = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_HSEPARATOR,GtkHSeparatorClass))    ! macro
    const GDK_EVENT_PROPAGATE                = (FALSE)    ! macro
    const GDK_KEY_Sinh_ba                    = 0x1000db6    ! macro
    const G_TYPE_DBUS_ERROR                  = (g_dbus_error_get_type())    ! macro
    const GTK_STOCK_GOTO_FIRST               = "gtk-goto-first"    ! macro
    const GDK_KEY_macron                     = 0x0af    ! macro
    const G_INITABLE_GET_IFACE               = (G_TYPE_INSTANCE_GET_INTERFACE((obj),G_TYPE_INITABLE,GInitableIface))    ! macro
    const g_atomic_int_xor                   = (g_atomic_int_xor((guint*)(atomic),(val)))    ! macro
    const GTK_ASPECT_FRAME_GET_CLASS         = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_ASPECT_FRAME,GtkAspectFrameClass))    ! macro
    const G_KEY_FILE_DESKTOP_KEY_STARTUP_WM_CLASS = "StartupWMClass"    ! macro
    const GTK_ENTRY_BUFFER_GET_CLASS         = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_ENTRY_BUFFER,GtkEntryBufferClass))    ! macro
    const GDK_KEY_Agrave                     = 0x0c0    ! macro
    const G_IS_NETWORK_MONITOR               = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_NETWORK_MONITOR))    ! macro
    const GTK_STOCK_DIALOG_AUTHENTICATION    = "gtk-dialog-authentication"    ! macro
    const GDK_KEY_braille_dots_245678        = 0x10028fa    ! macro
    const G_IS_PARAM_SPEC_UINT               = (G_TYPE_CHECK_INSTANCE_TYPE((pspec),G_TYPE_PARAM_UINT))    ! macro
    const GDK_KEY_Sinh_au                    = 0x1000d96    ! macro
    const GDK_KEY_ISO_Release_Margin_Left    =  0xfe29    ! macro
    const G_ACTION_MAP                       = (G_TYPE_CHECK_INSTANCE_CAST((inst),G_TYPE_ACTION_MAP,GActionMap))    ! macro
    const GTK_TYPE_RECENT_SORT_TYPE          = (gtk_recent_sort_type_get_type())    ! macro
    const g_ptr_array_index                  = ((array)->pdata)[index_]    ! macro
    const GTK_FILE_CHOOSER_BUTTON_CLASS      = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_FILE_CHOOSER_BUTTON,GtkFileChooserButtonClass))    ! macro
    const GTK_NOTEBOOK_GET_CLASS             = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_NOTEBOOK,GtkNotebookClass))    ! macro
    const GTK_IS_MOUNT_OPERATION_CLASS       = (G_TYPE_CHECK_CLASS_TYPE((k),GTK_TYPE_MOUNT_OPERATION))    ! macro
    const GTK_TEAROFF_MENU_ITEM_CLASS        = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_TEAROFF_MENU_ITEM,GtkTearoffMenuItemClass))    ! macro
    const GDK_KEY_hebrew_aleph               = 0xce0    ! macro
    const GTK_IS_SEPARATOR_TOOL_ITEM_CLASS   = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_SEPARATOR_TOOL_ITEM))    ! macro
    const GTK_TYPE_HBUTTON_BOX               = (gtk_hbutton_box_get_type())    ! macro
    const G_IS_MENU_MODEL_CLASS              = (G_TYPE_CHECK_CLASS_TYPE((class),G_TYPE_MENU_MODEL))    ! macro
    const G_POLLABLE_OUTPUT_STREAM_GET_INTERFACE = (G_TYPE_INSTANCE_GET_INTERFACE((obj),G_TYPE_POLLABLE_OUTPUT_STREAM,GPollableOutputStreamInterface))    ! macro
    const GTK_APPLICATION_WINDOW_GET_CLASS   = (G_TYPE_INSTANCE_GET_CLASS((inst),GTK_TYPE_APPLICATION_WINDOW,GtkApplicationWindowClass))    ! macro
    const GDK_KEY_Hangul_SunkyeongeumPieub   = 0xef1    ! macro
    const GDK_KEY_Arabic_ghain               =  0x5da    ! macro
    const GTK_CELL_RENDERER_ACCEL_CLASS      = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_CELL_RENDERER_ACCEL,GtkCellRendererAccelClass))    ! macro
    const GTK_IS_BIN                         = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_BIN))    ! macro
    const GTK_STYLE_CLASS_EXPANDER           = "expander"    ! macro
    const GDK_KEY_Sinh_ca                    = 0x1000da0    ! macro
    const G_DBUS_PROXY_GET_CLASS             = (G_TYPE_INSTANCE_GET_CLASS((o),G_TYPE_DBUS_PROXY,GDBusProxyClass))    ! macro
    const GTK_TYPE_REGION_FLAGS              = (gtk_region_flags_get_type())    ! macro
    const GDK_TYPE_PIXBUF_ROTATION           = (gdk_pixbuf_rotation_get_type())    ! macro
    const G_PARAM_SPEC_GET_CLASS             = (G_TYPE_INSTANCE_GET_CLASS((pspec),G_TYPE_PARAM,GParamSpecClass))    ! macro
    const GINT32_TO_BE                       = ((gint32)GUINT32_SWAP_LE_BE(val))    ! macro
    const GDK_KEY_Pointer_DblClick_Dflt      = 0xfeee    ! macro
    const GTK_TYPE_TREE_VIEW                 = (gtk_tree_view_get_type())    ! macro
    const G_KEY_FILE_DESKTOP_KEY_TYPE        = "Type"    ! macro
    const GUINT_TO_LE                        = ((guint)GUINT32_TO_LE(val))    ! macro
    const GDK_KEY_dead_iota                  = 0xfe5d    ! macro
    const GDK_KEY_Red                        =  0x1008ffa3    ! macro
    const ATK_RELATION_SET                   = (G_TYPE_CHECK_INSTANCE_CAST((obj),ATK_TYPE_RELATION_SET,AtkRelationSet))    ! macro
    const GDK_KEY_Hangul_J_NieunJieuj        = 0xed8    ! macro
    const G_MINOFFSET                        =  G_MININT64    ! macro
    const GTK_EVENT_BOX_GET_CLASS            = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_EVENT_BOX,GtkEventBoxClass))    ! macro
    const G_MINFLOAT                         = FLT_MIN    ! macro
    const ATK_IS_OBJECT_FACTORY_CLASS        = (G_TYPE_CHECK_CLASS_TYPE((klass),ATK_TYPE_OBJECT_FACTORY))    ! macro
    const G_FILE_ATTRIBUTE_MOUNTABLE_START_STOP_TYPE = "mountable::start-stop-type"    ! macro
    const G_TYPE_IS_INTERFACE                = (G_TYPE_FUNDAMENTAL(type)==G_TYPE_INTERFACE)    ! macro
    const GDK_KEY_copyright                  = 0x0a9    ! macro
    const GDK_KEY_Utilde                     =  0x3dd    ! macro
    const G_MODULE_IMPORT                    =  extern    ! macro
    const GDK_KEY_Thai_phosamphao            =  0xdc0    ! macro
    const GTK_TYPE_SPIN_TYPE                 = (gtk_spin_type_get_type())    ! macro
    const GTK_STOCK_STOP                     = "gtk-stop"    ! macro
    const cairo_pattern_add_color_stop       = cairo_pattern_add_color_stop_REPLACED_BY_cairo_pattern_add_color_stop_rgba    ! macro
    const GDK_KEY_openrectbullet             =  0xae2    ! macro
    const GDK_KEY_Georgian_ghan              =  0x10010e6    ! macro
    const GTK_STOCK_GO_FORWARD               = "gtk-go-forward"    ! macro
    const GTK_IS_IM_MULTICONTEXT             = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_IM_MULTICONTEXT))    ! macro
    const G_TYPE_BOOLEAN                     = G_TYPE_MAKE_FUNDAMENTAL(5)    ! macro
    const GTK_HSCALE                         = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_HSCALE,GtkHScale))    ! macro
    const GDK_KEY_Georgian_san               = 0x10010e1    ! macro
    const GTK_IS_BUTTON_BOX                  = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_BUTTON_BOX))    ! macro
    const GTK_IS_ICON_THEME                  = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_ICON_THEME))    ! macro
    const G_STRUCT_OFFSET                    = ((glong)((guint8*)&((struct_type*)0)->member))    ! macro
    const G_DBUS_OBJECT_PROXY                = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_DBUS_OBJECT_PROXY,GDBusObjectProxy))    ! macro
    const GDK_KEY_Reply                      = 0x1008ff72    ! macro
    const G_APPLICATION_COMMAND_LINE         = (G_TYPE_CHECK_INSTANCE_CAST((inst),G_TYPE_APPLICATION_COMMAND_LINE,GApplicationCommandLine))    ! macro
    const G_FILE_ATTRIBUTE_STANDARD_FAST_CONTENT_TYPE = "standard::fast-content-type"    ! macro
    const GDK_TYPE_WINDOW_WINDOW_CLASS       = (gdk_window_window_class_get_type())    ! macro
    const ATK_TYPE_EDITABLE_TEXT             = (atk_editable_text_get_type())    ! macro
    const GINT64_TO_BE                       = ((gint64)GUINT64_SWAP_LE_BE(val))    ! macro
    const GTK_MISC                           = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_MISC,GtkMisc))    ! macro
    const GDK_KEY_Greek_DELTA                = 0x7c4    ! macro
    const GDK_KEY_ISO_Prev_Group_Lock        =  0xfe0b    ! macro
    const G_RESOURCE_ERROR                   = (g_resource_error_quark())    ! macro
    const GTK_STYLE_PROPERTY_COLOR           = "color"    ! macro
    const GDK_KEY_Thai_thothong              = 0xdb8    ! macro
    const G_IS_THREADED_SOCKET_SERVICE       = (G_TYPE_CHECK_INSTANCE_TYPE((inst),G_TYPE_THREADED_SOCKET_SERVICE))    ! macro
    const G_FILE_ATTRIBUTE_FILESYSTEM_FREE   = "filesystem::free"    ! macro
    const GTK_TYPE_RECENT_CHOOSER_DIALOG     = (gtk_recent_chooser_dialog_get_type())    ! macro
    const GDK_KEY_Sinh_h2                    = 0x1000d83    ! macro
    const G_PERMISSION                       = (G_TYPE_CHECK_INSTANCE_CAST((inst),G_TYPE_PERMISSION,GPermission))    ! macro
    const G_TYPE_MOUNT_MOUNT_FLAGS           = (g_mount_mount_flags_get_type())    ! macro
    const GTK_TYPE_TARGET_FLAGS              = (gtk_target_flags_get_type())    ! macro
    const GTK_ACCEL_LABEL_CLASS              = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_ACCEL_LABEL,GtkAccelLabelClass))    ! macro
    const GTK_VPANED_GET_CLASS               = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_VPANED,GtkVPanedClass))    ! macro
    const G_TYPE_GTYPE                       = (g_gtype_get_type())    ! macro
    const G_VARIANT_TYPE_ARRAY               = ((const GVariantType*)"a*")    ! macro
    const GTK_TYPE_RECENT_MANAGER_ERROR      = (gtk_recent_manager_error_get_type())    ! macro
    const G_IS_INET_SOCKET_ADDRESS_CLASS     = (G_TYPE_CHECK_CLASS_TYPE((k),G_TYPE_INET_SOCKET_ADDRESS))    ! macro
    const GDK_KEY_ISO_Release_Both_Margins   = 0xfe2b    ! macro
    const G_TCP_CONNECTION                   = (G_TYPE_CHECK_INSTANCE_CAST((inst),G_TYPE_TCP_CONNECTION,GTcpConnection))    ! macro
    const GDK_KEY_leftopentriangle           = 0xacc    ! macro
    const G_SOCKET_ADDRESS_CLASS             = (G_TYPE_CHECK_CLASS_CAST((k),G_TYPE_SOCKET_ADDRESS,GSocketAddressClass))    ! macro
    const GDK_KEY_emacron                    = 0x3ba    ! macro
    const G_IS_DBUS_AUTH_OBSERVER            = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_DBUS_AUTH_OBSERVER))    ! macro
    const GTK_LABEL                          = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_LABEL,GtkLabel))    ! macro
    const GDK_TYPE_DRAG_CONTEXT              = (gdk_drag_context_get_type())    ! macro
    const GDK_KEY_Sinh_ee                    = 0x1000d92    ! macro
    const GDK_KEY_Greek_SIGMA                =  0x7d2    ! macro
    const G_TYPE_BUFFERED_OUTPUT_STREAM      = (g_buffered_output_stream_get_type())    ! macro
    const G_INET_SOCKET_ADDRESS              = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_INET_SOCKET_ADDRESS,GInetSocketAddress))    ! macro
    const G_CSET_LATINC                      = "\192\193\194\195\196\197\198""\199\200\201\202\203\204\205\206\207\208""\209\210\211\212\213\214""\216\217\218\219\220\221\222"    ! macro
    const G_TYPE_CHARSET_CONVERTER           = (g_charset_converter_get_type())    ! macro
    const GDK_KEY_Pointer_Drag1              = 0xfef5    ! macro
    const GDK_KEY_LogWindowTree              =  0x1008fe24    ! macro
    const G_TYPE_EMBLEM_ORIGIN               = (g_emblem_origin_get_type())    ! macro
    const G_MAXUSHORT                        = USHRT_MAX    ! macro
    const GTK_TYPE_ICON_LOOKUP_FLAGS         = (gtk_icon_lookup_flags_get_type())    ! macro
    const GDK_KEY_Cyrillic_softsign          = 0x6d8    ! macro
    const GDK_KEY_Pointer_Drag2              =  0xfef6    ! macro
    const G_IS_CONVERTER                     = (G_TYPE_CHECK_INSTANCE_TYPE((obj),G_TYPE_CONVERTER))    ! macro
    const GDK_KEY_Greek_accentdieresis       = 0x7ae    ! macro
    const G_IS_MEMORY_INPUT_STREAM_CLASS     = (G_TYPE_CHECK_CLASS_TYPE((k),G_TYPE_MEMORY_INPUT_STREAM))    ! macro
    const GDK_KEY_Pointer_Drag3              = 0xfef7    ! macro
    const GDK_KEY_Hangul_AraeA               =  0xef6    ! macro
    const GDK_KEY_Sinh_ddha                  =  0x1000daa    ! macro
    const GDK_KEY_hebrew_finalzade           =  0xcf5    ! macro
    const G_DATA_INPUT_STREAM_CLASS          = (G_TYPE_CHECK_CLASS_CAST((k),G_TYPE_DATA_INPUT_STREAM,GDataInputStreamClass))    ! macro
    const GDK_KEY_Pointer_Drag4              = 0xfef8    ! macro
    const G_MINSSIZE                         =  G_MININT64    ! macro
    const GDK_KEY_Pointer_Drag5              =  0xfefd    ! macro
    const GTK_IS_MENU_BUTTON_CLASS           = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_MENU_BUTTON))    ! macro
    const GTK_IS_THEMING_ENGINE              = (G_TYPE_CHECK_INSTANCE_TYPE((o),GTK_TYPE_THEMING_ENGINE))    ! macro
    const G_MENU_ATTRIBUTE_ITER              = (G_TYPE_CHECK_INSTANCE_CAST((inst),G_TYPE_MENU_ATTRIBUTE_ITER,GMenuAttributeIter))    ! macro
    const GDK_KEY_hebrew_finalzadi           = 0xcf5    ! macro
    const GDK_KEY_Sinh_i2                    =  0x1000dd2    ! macro
    const GDK_KEY_Messenger                  =  0x1008ff8e    ! macro
    const G_TYPE_OBJECT                      =  G_TYPE_MAKE_FUNDAMENTAL(20)    ! macro
    const GDK_KEY_ohornbelowdot              = 0x1001ee3    ! macro
    const GDK_KEY_idotless                   =  0x2b9    ! macro
    const GDK_KEY_Sinh_fa                    =  0x1000dc6    ! macro
    const GDK_KEY_Book                       =  0x1008ff52    ! macro
    const gdk_pixbuf_savev                   =  gdk_pixbuf_savev_utf8    ! macro
    const PANGO_CAIRO_FONT_MAP               = (G_TYPE_CHECK_INSTANCE_CAST((object),PANGO_TYPE_CAIRO_FONT_MAP,PangoCairoFontMap))    ! macro
    const G_FILE_ATTRIBUTE_UNIX_BLOCK_SIZE   = "unix::block-size"    ! macro
    const g_scanner_foreach_symbol           = G_STMT_START{g_scanner_scope_foreach_symbol((scanner),0,(func),(data));}G_STMT_END    ! macro
    const GDK_IS_APP_LAUNCH_CONTEXT          = (G_TYPE_CHECK_INSTANCE_TYPE((o),GDK_TYPE_APP_LAUNCH_CONTEXT))    ! macro
    const GDK_KEY_RockerEnter                = 0x1008ff25    ! macro
    const GTK_TEXT_CHILD_ANCHOR_GET_CLASS    = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_TEXT_CHILD_ANCHOR,GtkTextChildAnchorClass))    ! macro
    const g_string_append_c                  = g_string_append_c_inline(gstr,c)    ! macro
    const GDK_KEY_oslash                     = 0x0f8    ! macro
    const GDK_KEY_Ugrave                     =  0x0d9    ! macro
    const G_TYPE_PARAM_PARAM                 = (g_param_spec_types[15])    ! macro
    const G_ASCII_DTOSTR_BUF_SIZE            = (29+10)    ! macro
    const GDK_KEY_Standby                    = 0x1008ff10    ! macro
    const GDK_KEY_Thai_moma                  =  0xdc1    ! macro
    const G_IS_PARAM_SPEC_STRING             = (G_TYPE_CHECK_INSTANCE_TYPE((pspec),G_TYPE_PARAM_STRING))    ! macro
    const GDK_KEY_Greek_OMICRON              = 0x7cf    ! macro
    const G_TYPE_IO_STREAM_SPLICE_FLAGS      = (g_io_stream_splice_flags_get_type())    ! macro
    const G_IS_SOCKET_ADDRESS                = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_SOCKET_ADDRESS))    ! macro
    const G_STRUCT_MEMBER                    = (*(member_type*)G_STRUCT_MEMBER_P((struct_p),(struct_offset)))    ! macro
    const G_CSET_LATINS                      = "\223\224\225\226\227\228\229\230""\231\232\233\234\235\236\237\238\239\240""\241\242\243\244\245\246""\248\249\250\251\252\253\254\255"    ! macro
    const GTK_IS_RECENT_CHOOSER_DIALOG       = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_RECENT_CHOOSER_DIALOG))    ! macro
    const GTK_TOGGLE_BUTTON_CLASS            = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_TOGGLE_BUTTON,GtkToggleButtonClass))    ! macro
    const GDK_KEY_Sabovedot                  = 0x1001e60    ! macro
    const GTK_STOCK_UNDERLINE                = "gtk-underline"    ! macro
    const GDK_KEY_Hangul_Jamo                = 0xff35    ! macro
    const GTK_STOCK_CANCEL                   = "gtk-cancel"    ! macro
    const GTK_PRINT_SETTINGS_COLLATE         = "collate"    ! macro
    const G_MENU_LINK_ITER_GET_CLASS         = (G_TYPE_INSTANCE_GET_CLASS((inst),G_TYPE_MENU_LINK_ITER,GMenuLinkIterClass))    ! macro
    const GDK_KEY_bracketright               = 0x05d    ! macro
    const GDK_KEY_Thai_sarauee               =  0xdd7    ! macro
    const GDK_KEY_fourthroot                 =  0x100221c    ! macro
    const G_ZLIB_DECOMPRESSOR                = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_ZLIB_DECOMPRESSOR,GZlibDecompressor))    ! macro
    const GTK_TYPE_TOOL_PALETTE_DRAG_TARGETS = (gtk_tool_palette_drag_targets_get_type())    ! macro
    const GTK_PRINT_SETTINGS_WIN32_DRIVER_VERSION = "win32-driver-version"    ! macro
    const GUINT32_SWAP_LE_BE                 = (GUINT32_SWAP_LE_BE_CONSTANT(val))    ! macro
    const GDK_KEY_Greek_rho                  = 0x7f1    ! macro
    const GPOINTER_TO_INT                    = ((gint)(gint64)(p))    ! macro
    const GTK_TYPE_RECENT_MANAGER            = (gtk_recent_manager_get_type())    ! macro
    const GINT16_FROM_BE                     = (GINT16_TO_BE(val))    ! macro
    const GDK_KEY_Greek_finalsmallsigma      = 0x7f3    ! macro
    const GTK_IS_RECENT_CHOOSER              = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_RECENT_CHOOSER))    ! macro
    const GDK_KEY_Sinh_ga                    = 0x1000d9c    ! macro
    const GTK_STOCK_SAVE                     = "gtk-save"    ! macro
    const ATK_RELATION                       = (G_TYPE_CHECK_INSTANCE_CAST((obj),ATK_TYPE_RELATION,AtkRelation))    ! macro
    const GTK_TEAROFF_MENU_ITEM              = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_TEAROFF_MENU_ITEM,GtkTearoffMenuItem))    ! macro
    const GDK_KEY_braille_blank              = 0x1002800    ! macro
    const g_date_sunday_week_of_year         =  g_date_get_sunday_week_of_year    ! macro
    const GDK_KEY_KbdLightOnOff              =  0x1008ff04    ! macro
    const GDK_KEY_tslash                     =  0x3bc    ! macro
    const G_TYPE_INSTANCE_GET_CLASS          = (_G_TYPE_IGC((instance),(g_type),c_type))    ! macro
    const GDK_KEY_Armenian_gim               = 0x1000563    ! macro
    const g_datalist_set_data_full           =  g_datalist_id_set_data_full((dl),g_quark_from_string(k),(d),(f))    ! macro
    const ATK_IS_HYPERLINK_IMPL              = G_TYPE_CHECK_INSTANCE_TYPE((obj),ATK_TYPE_HYPERLINK_IMPL)    ! macro
    const GTK_CSS_PROVIDER_CLASS             = (G_TYPE_CHECK_CLASS_CAST((c),GTK_TYPE_CSS_PROVIDER,GtkCssProviderClass))    ! macro
    const GTK_TYPE_CSS_SECTION               = (gtk_css_section_get_type())    ! macro
    const GDK_VERSION_CUR_STABLE             = (G_ENCODE_VERSION(GDK_MAJOR_VERSION,GDK_MINOR_VERSION))    ! macro
    const GTK_STOCK_PREFERENCES              = "gtk-preferences"    ! macro
    const GTK_TYPE_COMBO_BOX                 = (gtk_combo_box_get_type())    ! macro
    const GTK_TYPE_ADJUSTMENT                = (gtk_adjustment_get_type())    ! macro
    const G_IS_PARAM_SPEC_ENUM               = (G_TYPE_CHECK_INSTANCE_TYPE((pspec),G_TYPE_PARAM_ENUM))    ! macro
    const G_IS_DBUS_PROXY_CLASS              = (G_TYPE_CHECK_CLASS_TYPE((k),G_TYPE_DBUS_PROXY))    ! macro
    const G_TYPE_TLS_PASSWORD_FLAGS          = (g_tls_password_flags_get_type())    ! macro
    const GDK_KEY_braille_dots_3567          = 0x1002874    ! macro
    const GTK_STYLE_PROPERTY_PADDING         = "padding"    ! macro
    const GDK_KEY_braille_dots_3568          = 0x10028b4    ! macro
    const G_VARIANT_TYPE_BOOLEAN             = ((const GVariantType*)"b")    ! macro
    const GDK_KEY_ampersand                  = 0x026    ! macro
    const GTK_TYPE_RECENT_CHOOSER_WIDGET     = (gtk_recent_chooser_widget_get_type())    ! macro
    const GTK_FILE_CHOOSER_BUTTON_GET_CLASS  = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_FILE_CHOOSER_BUTTON,GtkFileChooserButtonClass))    ! macro
    const GTK_GRID_GET_CLASS                 = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_GRID,GtkGridClass))    ! macro
    const GDK_KEY_Hangul_J_Jieuj             = 0xee9    ! macro
    const GTK_SEPARATOR_MENU_ITEM_CLASS      = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_SEPARATOR_MENU_ITEM,GtkSeparatorMenuItemClass))    ! macro
    const G_MENU_LINK_SECTION                = "section"    ! macro
    const GDK_KEY_itilde                     = 0x3b5    ! macro
    const g_array_append_val                 =  g_array_append_vals(a,&(v),1)    ! macro
    const G_MOUNT_OPERATION_GET_CLASS        = (G_TYPE_INSTANCE_GET_CLASS((o),G_TYPE_MOUNT_OPERATION,GMountOperationClass))    ! macro
    const GDK_KEY_Arabic_superscript_alef    = 0x1000670    ! macro
    const cairo_set_target_png               =  cairo_set_target_png_DEPRECATED_BY_cairo_surface_write_to_png    ! macro
    const GDK_KEY_WindowClear                =  0x1008ff55    ! macro
    const GTK_ALIGNMENT_CLASS                = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_ALIGNMENT,GtkAlignmentClass))    ! macro
    const G_FILE_ATTRIBUTE_OWNER_USER        = "owner::user"    ! macro
    const GDK_KEY_Sinh_rii                   = 0x1000d8e    ! macro
    const GTK_IS_CELL_RENDERER_SPIN          = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_CELL_RENDERER_SPIN))    ! macro
    const G_TYPE_IS_ENUM                     = (G_TYPE_FUNDAMENTAL(type)==G_TYPE_ENUM)    ! macro
    const GDK_KEY_Sinh_ha                    = 0x1000dc4    ! macro
    const GDK_KEY_Arabic_beh                 =  0x5c8    ! macro
    const GDK_KEY_braille_dots_12567         =  0x1002873    ! macro
    const G_IS_ICON                          = (G_TYPE_CHECK_INSTANCE_TYPE((obj),G_TYPE_ICON))    ! macro
    const GDK_KEY_braille_dots_12568         = 0x10028b3    ! macro
    const GDK_KEY_Hangul_WA                  =  0xec8    ! macro
    const G_CREDENTIALS_CLASS                = (G_TYPE_CHECK_CLASS_CAST((k),G_TYPE_CREDENTIALS,GCredentialsClass))    ! macro
    const PANGO_DESCENT                      = ((rect).y+(rect).height)    ! macro
    const GDK_KEY_Arabic_hamzaonwaw          = 0x5c4    ! macro
    const G_PI                               =  3.1415926535897932384626433832795028841971693993751    ! macro
    const GDK_KEY_squareroot                 =  0x100221a    ! macro
    const GDK_KEY_downshoe                   =  0xbd6    ! macro
    const G_TYPE_DBUS_SUBTREE_FLAGS          = (g_dbus_subtree_flags_get_type())    ! macro
    const GTK_IS_APP_CHOOSER_DIALOG          = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_APP_CHOOSER_DIALOG))    ! macro
    const G_TYPE_TLS_AUTHENTICATION_MODE     = (g_tls_authentication_mode_get_type())    ! macro
    const G_TYPE_DBUS_PROPERTY_INFO          = (g_dbus_property_info_get_type())    ! macro
    const GDK_KEY_Thai_chochan               = 0xda8    ! macro
    const G_IS_VOLUME                        = (G_TYPE_CHECK_INSTANCE_TYPE((obj),G_TYPE_VOLUME))    ! macro
    const GLIB_UNAVAILABLE                   = G_UNAVAILABLE(maj,min)    ! macro
    const GTK_BIN_CLASS                      = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_BIN,GtkBinClass))    ! macro
    const GTK_IS_CONTAINER_CLASS             = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_CONTAINER))    ! macro
    const GDK_KEY_Hangul_WE                  = 0xece    ! macro
    const GTK_TYPE_TEXT_BUFFER               = (gtk_text_buffer_get_type())    ! macro
    const GDK_KEY_Arabic_tcheh               = 0x1000686    ! macro
    const g_dataset_set_data_full            =  g_dataset_id_set_data_full((l),g_quark_from_string(k),(d),(f))    ! macro
    const G_TYPE_SETTINGS                    = (g_settings_get_type())    ! macro
    const GDK_KEY_uhornacute                 = 0x1001ee9    ! macro
    const GDK_KEY_braille_dots_3578          =  0x10028d4    ! macro
    const G_TLS_SERVER_CONNECTION            = (G_TYPE_CHECK_INSTANCE_CAST((inst),G_TYPE_TLS_SERVER_CONNECTION,GTlsServerConnection))    ! macro
    const GDK_KEY_Gcaron                     = 0x10001e6    ! macro
    const G_IS_DBUS_OBJECT                   = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_DBUS_OBJECT))    ! macro
    const GTK_ARROW_CLASS                    = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_ARROW,GtkArrowClass))    ! macro
    const G_IS_PROXY_ADDRESS_ENUMERATOR      = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_PROXY_ADDRESS_ENUMERATOR))    ! macro
    const PANGO_IS_LAYOUT_CLASS              = (G_TYPE_CHECK_CLASS_TYPE((klass),PANGO_TYPE_LAYOUT))    ! macro
    const GDK_KEY_Ncedilla                   = 0x3d1    ! macro
    const GTK_EVENT_BOX_CLASS                = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_EVENT_BOX,GtkEventBoxClass))    ! macro
    const G_TYPE_FILTER_OUTPUT_STREAM        = (g_filter_output_stream_get_type())    ! macro
    const GDK_KEY_less                       = 0x03c    ! macro
    const GDK_KEY_Hangul_WI                  =  0xecf    ! macro
    const G_TYPE_PARAM_OBJECT                = (g_param_spec_types[19])    ! macro
    const GDK_KEY_Armenian_zhe               = 0x100056a    ! macro
    const GDK_KEY_ntilde                     =  0x0f1    ! macro
    const GDK_KEY_Cyrillic_I_macron          =  0x10004e2    ! macro
    const GDK_KEY_Mabovedot                  =  0x1001e40    ! macro
    const GDK_KEY_Greek_delta                =  0x7e4    ! macro
    const GDK_KEY_ISO_Last_Group_Lock        =  0xfe0f    ! macro
    const GDK_KEY_therefore                  =  0x8c0    ! macro
    const GTK_IS_ASPECT_FRAME                = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_ASPECT_FRAME))    ! macro
    const GDK_KEY_Arabic_seen                = 0x5d3    ! macro
    const GTK_IS_MENU_TOOL_BUTTON            = (G_TYPE_CHECK_INSTANCE_TYPE((o),GTK_TYPE_MENU_TOOL_BUTTON))    ! macro
    const GDK_KEY_braille_dots_12578         = 0x10028d3    ! macro
    const GDK_KEY_Henkan                     =  0xff23    ! macro
    const GTK_IS_RECENT_CHOOSER_WIDGET       = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_RECENT_CHOOSER_WIDGET))    ! macro
    const G_PARAM_SPEC_ULONG                 = (G_TYPE_CHECK_INSTANCE_CAST((pspec),G_TYPE_PARAM_ULONG,GParamSpecULong))    ! macro
    const GDK_KEY_hebrew_qoph                = 0xcf7    ! macro
    const G_IS_OUTPUT_STREAM                 = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_OUTPUT_STREAM))    ! macro
    const GDK_KEY_trademark                  = 0xac9    ! macro
    const PANGO_TYPE_FONT_METRICS            = (pango_font_metrics_get_type())    ! macro
    const G_TYPE_CONVERTER                   = (g_converter_get_type())    ! macro
    const G_STATIC_ASSERT                    = typedef char G_PASTE(_GStaticAssertCompileTimeAssertion_,__LINE__)[(expr)?1:-1]    ! macro
    const G_TYPE_SOCKET_CONNECTABLE          = (g_socket_connectable_get_type())    ! macro
    const GTK_IS_IM_MULTICONTEXT_CLASS       = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_IM_MULTICONTEXT))    ! macro
    const GDK_KEY_threesubscript             = 0x1002083    ! macro
    const GTK_TYPE_ASPECT_FRAME              = (gtk_aspect_frame_get_type())    ! macro
    const GTK_TOGGLE_ACTION_CLASS            = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_TOGGLE_ACTION,GtkToggleActionClass))    ! macro
    const GDK_KEY_Sinh_ii                    = 0x1000d8a    ! macro
    const g_ascii_isprint                    = ((g_ascii_table[(guchar)(c)]&G_ASCII_PRINT)!=0)    ! macro
    const G_MINSHORT                         = SHRT_MIN    ! macro
    const G_NETWORK_ADDRESS                  = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_NETWORK_ADDRESS,GNetworkAddress))    ! macro
    const GDK_KEY_Lcaron                     = 0x1a5    ! macro
    const GTK_IS_BOX                         = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_BOX))    ! macro
    const GDK_KEY_Greek_sigma                = 0x7f2    ! macro
    const GDK_KEY_ISO_Set_Margin_Left        =  0xfe27    ! macro
    const GDK_KEY_Cyrillic_KA_vertstroke     =  0x100049c    ! macro
    const GDK_KEY_braille_dots_235678        =  0x10028f6    ! macro
    const g_datalist_set_data                =  g_datalist_set_data_full((dl),(k),(d),NULL)    ! macro
    const G_TYPE_DBUS_OBJECT_PROXY           = (g_dbus_object_proxy_get_type())    ! macro
    const GDK_KEY_Arabic_alef                = 0x5c7    ! macro
    const GTK_TYPE_ICON_SOURCE               = (gtk_icon_source_get_type())    ! macro
    const GDK_KEY_Hangul_Ieung               = 0xeb7    ! macro
    const GTK_TEXT_MARK_CLASS                = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_TEXT_MARK,GtkTextMarkClass))    ! macro
    const G_IS_MEMORY_OUTPUT_STREAM          = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_MEMORY_OUTPUT_STREAM))    ! macro
    const GDK_KEY_Cyrillic_tse               = 0x6c3    ! macro
    const GTK_TYPE_FILE_CHOOSER_CONFIRMATION = (gtk_file_chooser_confirmation_get_type())    ! macro
    const G_TYPE_IS_OBJECT                   = (G_TYPE_FUNDAMENTAL(type)==G_TYPE_OBJECT)    ! macro
    const GDK_KEY_Sinh_ja                    = 0x1000da2    ! macro
    const G_PROXY_RESOLVER_EXTENSION_POINT_NAME = "gio-proxy-resolver"    ! macro
    const GTK_IS_TREE_VIEW_COLUMN            = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_TREE_VIEW_COLUMN))    ! macro
    const GDK_KEY_uptack                     = 0xbce    ! macro
    const GTK_TYPE_APP_CHOOSER               = (gtk_app_chooser_get_type())    ! macro
    const GTK_CELL_RENDERER_ACCEL            = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_CELL_RENDERER_ACCEL,GtkCellRendererAccel))    ! macro
    const GDK_KEY_Mail                       = 0x1008ff19    ! macro
    const GDK_KEY_Hangul_YA                  =  0xec1    ! macro
    const GDK_KEY_igrave                     =  0x0ec    ! macro
    const GDK_KEY_Thai_bobaimai              =  0xdba    ! macro
    const GDK_KEY_Sinh_ii2                   =  0x1000dd3    ! macro
    const GDK_KEY_Greek_LAMBDA               =  0x7cb    ! macro
    const GTK_ENTRY_COMPLETION_CLASS         = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_ENTRY_COMPLETION,GtkEntryCompletionClass))    ! macro
    const cairo_surface_get_filter           = cairo_surface_get_filter_DEPRECATED_BY_cairo_pattern_get_filter    ! macro
    const GDK_KEY_Armenian_question          =  0x100055e    ! macro
    const GDK_KEY_Hangul_YE                  =  0xec6    ! macro
    const GTK_STOCK_SORT_DESCENDING          = "gtk-sort-descending"    ! macro
    const cairo_matrix_destroy               = cairo_matrix_destroy_DEPRECATED_BY_cairo_matrix_t    ! macro
    const G_SOCKET_CLIENT                    = (G_TYPE_CHECK_INSTANCE_CAST((inst),G_TYPE_SOCKET_CLIENT,GSocketClient))    ! macro
    const G_TYPE_MAIN_CONTEXT                = (g_main_context_get_type())    ! macro
    const G_CONVERTER_OUTPUT_STREAM          = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_CONVERTER_OUTPUT_STREAM,GConverterOutputStream))    ! macro
    const GTK_LINK_BUTTON                    = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_LINK_BUTTON,GtkLinkButton))    ! macro
    const GDK_KEY_Cyrillic_che_vertstroke    = 0x10004b9    ! macro
    const GDK_KEY_Hangul_YI                  =  0xed2    ! macro
    const GTK_IS_CELL_LAYOUT                 = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_CELL_LAYOUT))    ! macro
    const GTK_TYPE_VSCALE                    = (gtk_vscale_get_type())    ! macro
    const GTK_STOCK_FILE                     = "gtk-file"    ! macro
    const GINT_FROM_BE                       = (GINT_TO_BE(val))    ! macro
    const GTK_CELL_RENDERER_SPIN_GET_CLASS   = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_CELL_RENDERER_SPIN,GtkCellRendererTextClass))    ! macro
    const GTK_IMAGE_GET_CLASS                = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_IMAGE,GtkImageClass))    ! macro
    const GTK_CELL_RENDERER_SPIN_CLASS       = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_CELL_RENDERER_SPIN,GtkCellRendererSpinClass))    ! macro
    const GDK_KEY_Sinh_ka                    = 0x1000d9a    ! macro
    const GDK_KEY_Hangul_RieulMieum          =  0xeab    ! macro
    const GDK_KEY_Hangul_YO                  =  0xecb    ! macro
    const GTK_IS_APP_CHOOSER_WIDGET          = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_APP_CHOOSER_WIDGET))    ! macro
    const GTK_TYPE_SCALE                     = (gtk_scale_get_type())    ! macro
    const cairo_current_line_cap             = cairo_current_line_cap_REPLACED_BY_cairo_get_line_cap    ! macro
    const GDK_KEY_Gabovedot                  =  0x2d5    ! macro
    const G_MARKUP_ERROR                     =  g_markup_error_quark()    ! macro
    const G_GOFFSET_CONSTANT                 = G_GINT64_CONSTANT(val)    ! macro
    const GTK_MISC_GET_CLASS                 = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_MISC,GtkMiscClass))    ! macro
    const G_IS_PARAM_SPEC_CHAR               = (G_TYPE_CHECK_INSTANCE_TYPE((pspec),G_TYPE_PARAM_CHAR))    ! macro
    const GTK_IS_OVERLAY                     = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_OVERLAY))    ! macro
    const GDK_KEY_Hangul_YU                  = 0xed0    ! macro
    const G_FILE_OUTPUT_STREAM_CLASS         = (G_TYPE_CHECK_CLASS_CAST((k),G_TYPE_FILE_OUTPUT_STREAM,GFileOutputStreamClass))    ! macro
    const G_IS_INET_SOCKET_ADDRESS           = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_INET_SOCKET_ADDRESS))    ! macro
    const G_IS_FILE_IO_STREAM                = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_FILE_IO_STREAM))    ! macro
    const cairo_svg_surface_set_dpi          = cairo_svg_surface_set_dpi_REPLACED_BY_cairo_surface_set_fallback_resolution    ! macro
    const GTK_TYPE_CELL_AREA_CONTEXT         = (gtk_cell_area_context_get_type())    ! macro
    const GTK_MENU_ITEM_GET_CLASS            = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_MENU_ITEM,GtkMenuItemClass))    ! macro
    const G_PARAM_SPEC_POINTER               = (G_TYPE_CHECK_INSTANCE_CAST((pspec),G_TYPE_PARAM_POINTER,GParamSpecPointer))    ! macro
    const PANGO_LAYOUT_CLASS                 = (G_TYPE_CHECK_CLASS_CAST((klass),PANGO_TYPE_LAYOUT,PangoLayoutClass))    ! macro
    const GUINT16_FROM_BE                    = (GUINT16_TO_BE(val))    ! macro
    const G_VARIANT_TYPE_DICT_ENTRY          = ((const GVariantType*)"{?*}")    ! macro
    const GDK_TARGET_PIXMAP                  = _GDK_MAKE_ATOM(20)    ! macro
    const GDK_KEY_hebrew_beth                = 0xce1    ! macro
    const GDK_KEY_sterling                   =  0x0a3    ! macro
    const GTK_SEARCH_ENTRY_GET_CLASS         = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_SEARCH_ENTRY,GtkSearchEntryClass))    ! macro
    const GLIB_SYSDEF_POLLHUP                = =16    ! macro
    const G_IS_APPLICATION                   = (G_TYPE_CHECK_INSTANCE_TYPE((inst),G_TYPE_APPLICATION))    ! macro
    const G_DBUS_OBJECT_SKELETON_CLASS       = (G_TYPE_CHECK_CLASS_CAST((k),G_TYPE_DBUS_OBJECT_SKELETON,GDBusObjectSkeletonClass))    ! macro
    const G_FILE_INFO                        = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_FILE_INFO,GFileInfo))    ! macro
    const G_LOG_DOMAIN                       = ((gchar*)0)    ! macro
    const GTK_TYPE_ICON_VIEW                 = (gtk_icon_view_get_type())    ! macro
    const GTK_IS_TOOL_ITEM_GROUP             = (G_TYPE_CHECK_INSTANCE_TYPE(obj,GTK_TYPE_TOOL_ITEM_GROUP))    ! macro
    const GDK_KEY_Sinh_o2                    = 0x1000ddc    ! macro
    const GTK_LIST_STORE                     = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_LIST_STORE,GtkListStore))    ! macro
    const GTK_MINOR_VERSION                  = (6)    ! macro
    const GDK_KEY_3270_EraseInput            = 0xfd07    ! macro
    const GDK_KEY_Armenian_E                 =  0x1000537    ! macro
    const G_TYPE_SOCKET_LISTENER             = (g_socket_listener_get_type())    ! macro
    const GDK_KEY_Armenian_yech              = 0x1000565    ! macro
    const GDK_KEY_Sinh_la                    =  0x1000dbd    ! macro
    const G_IS_MENU_ATTRIBUTE_ITER           = (G_TYPE_CHECK_INSTANCE_TYPE((inst),G_TYPE_MENU_ATTRIBUTE_ITER))    ! macro
    const G_TYPE_CONVERTER_INPUT_STREAM      = (g_converter_input_stream_get_type())    ! macro
    const ATK_TYPE_COMPONENT                 = (atk_component_get_type())    ! macro
    const GTK_RECENT_CHOOSER_WIDGET_GET_CLASS = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_RECENT_CHOOSER_WIDGET,GtkRecentChooserWidgetClass))    ! macro
    const GDK_KEY_digitspace                 = 0xaa5    ! macro
    const GDK_KEY_Hangul_switch              =  0xff7e    ! macro
    const GTK_TYPE_UI_MANAGER_ITEM_TYPE      = (gtk_ui_manager_item_type_get_type())    ! macro
    const G_MAXINT8                          = ((gint8)0x7f)    ! macro
    const GDK_KEY_Hangul_Dikeud              = 0xea7    ! macro
    const GDK_KEY_braille_dots_567           =  0x1002870    ! macro
    const PANGO_VERSION_STRING               = "1.30.1"    ! macro
    const GDK_KEY_braille_dots_568           = 0x10028b0    ! macro
    const G_FILE_ATTRIBUTE_FILESYSTEM_USED   = "filesystem::used"    ! macro
    const GTK_IS_RADIO_TOOL_BUTTON           = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_RADIO_TOOL_BUTTON))    ! macro
    const G_TYPE_ZLIB_DECOMPRESSOR           = (g_zlib_decompressor_get_type())    ! macro
    const GDK_TYPE_PIXBUF_ANIMATION          = (gdk_pixbuf_animation_get_type())    ! macro
    const G_PROXY_ADDRESS_CLASS              = (G_TYPE_CHECK_CLASS_CAST((k),G_TYPE_PROXY_ADDRESS,GProxyAddressClass))    ! macro
    const G_IS_CANCELLABLE_CLASS             = (G_TYPE_CHECK_CLASS_TYPE((k),G_TYPE_CANCELLABLE))    ! macro
    const GDK_KEY_dollar                     = 0x024    ! macro
    const G_TYPE_DBUS_OBJECT_SKELETON        = (g_dbus_object_skeleton_get_type())    ! macro
    const ATK_IS_SOCKET                      = (G_TYPE_CHECK_INSTANCE_TYPE((obj),ATK_TYPE_SOCKET))    ! macro
    const G_IS_DBUS_INTERFACE_SKELETON       = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_DBUS_INTERFACE_SKELETON))    ! macro
    const GTK_TYPE_NUMBER_UP_LAYOUT          = (gtk_number_up_layout_get_type())    ! macro
    const GDK_KEY_Armenian_O                 = 0x1000555    ! macro
    const GDK_KEY_Shift_L                    =  0xffe1    ! macro
    const GTK_STOCK_FIND                     = "gtk-find"    ! macro
    const g_ascii_isdigit                    = ((g_ascii_table[(guchar)(c)]&G_ASCII_DIGIT)!=0)    ! macro
    const GDK_KEY_Community                  = 0x1008ff3d    ! macro
    const G_MINLONG                          =  LONG_MIN    ! macro
    const CAIRO_HAS_FC_FONT                  =  1    ! macro
    const GTK_STYLE_CLASS_PULSE              = "pulse"    ! macro
    const G_TYPE_NONE                        = G_TYPE_MAKE_FUNDAMENTAL(1)    ! macro
    const g_assert_cmpstr                    = do{const char*__s1=(s1),*__s2=(s2);if(g_strcmp0(__s1,__s2)cmp 0);else g_assertion_message_cmpstr(G_LOG_DOMAIN,__FILE__,__LINE__,G_STRFUNC,#s1" "#cmp" "#s2,__s1,#cmp,__s2);}while(0)    ! macro
    const G_HAVE___INLINE__                  = 1    ! macro
    const GDK_KEY_Sinh_ma                    =  0x1000db8    ! macro
    const PANGO_PIXELS_CEIL                  = (((int)(d)+1023)>>10)    ! macro
    const GDK_KEY_Thai_phophan               = 0xdbe    ! macro
    const GTK_VSCROLLBAR_CLASS               = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_VSCROLLBAR,GtkVScrollbarClass))    ! macro
    const GDK_KEY_Eogonek                    = 0x1ca    ! macro
    const G_ASYNC_RESULT_GET_IFACE           = (G_TYPE_INSTANCE_GET_INTERFACE((obj),G_TYPE_ASYNC_RESULT,GAsyncResultIface))    ! macro
    const GDK_KEY_Shift_R                    = 0xffe2    ! macro
    const G_TYPE_SOURCE                      = (g_source_get_type())    ! macro
    const GDK_KEY_ISO_Fast_Cursor_Left       = 0xfe2c    ! macro
    const cairo_transform_font               =  cairo_transform_font_REPLACED_BY_cairo_set_font_matrix    ! macro
    const GTK_TEXT_TAG_TABLE_GET_CLASS       = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_TEXT_TAG_TABLE,GtkTextTagTableClass))    ! macro
    const GINT32_TO_LE                       = ((gint32)(val))    ! macro
    const GTK_TYPE_PRINT_ERROR               = (gtk_print_error_get_type())    ! macro
    const GTK_TYPE_TOOL_ITEM                 = (gtk_tool_item_get_type())    ! macro
    const GDK_KEY_TouchpadOn                 = 0x1008ffb0    ! macro
    const G_VALUE_NOCOPY_CONTENTS            = (1<<27)    ! macro
    const G_SEEKABLE_GET_IFACE               = (G_TYPE_INSTANCE_GET_INTERFACE((obj),G_TYPE_SEEKABLE,GSeekableIface))    ! macro
    const GDK_KEY_braille_dots_578           = 0x10028d0    ! macro
    const GDK_KEY_Uhornbelowdot              =  0x1001ef0    ! macro
    const GTK_APPLICATION_GET_CLASS          = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_APPLICATION,GtkApplicationClass))    ! macro
    const GDK_KEY_Sinh_lu                    = 0x1000d8f    ! macro
    const GDK_KEY_Kcedilla                   =  0x3d3    ! macro
    const GDK_KEY_periodcentered             =  0x0b7    ! macro
    const GDK_KEY_Arabic_lam                 =  0x5e4    ! macro
    const G_TYPE_ZLIB_COMPRESSOR_FORMAT      = (g_zlib_compressor_format_get_type())    ! macro
    const G_IS_FILE_MONITOR                  = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_FILE_MONITOR))    ! macro
    const GDK_KEY_Greek_ETA                  = 0x7c7    ! macro
    const GTK_CHECK_MENU_ITEM                = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_CHECK_MENU_ITEM,GtkCheckMenuItem))    ! macro
    const g_test_rand_bit                    = (0!=(g_test_rand_int()&(1<<15)))    ! macro
    const GDK_KEY_Hyper_L                    = 0xffed    ! macro
    const G_FILTER_INPUT_STREAM_CLASS        = (G_TYPE_CHECK_CLASS_CAST((k),G_TYPE_FILTER_INPUT_STREAM,GFilterInputStreamClass))    ! macro
    const GTK_TYPE_SIZE_GROUP_MODE           = (gtk_size_group_mode_get_type())    ! macro
    const GTK_PRINT_SETTINGS_DUPLEX          = "duplex"    ! macro
    const GTK_STOCK_CONNECT                  = "gtk-connect"    ! macro
    const G_VARIANT_TYPE_DICTIONARY          = ((const GVariantType*)"a{?*}")    ! macro
    const ATK_IS_ACTION                      = G_TYPE_CHECK_INSTANCE_TYPE((obj),ATK_TYPE_ACTION)    ! macro
    const GDK_KEY_Greek_iotaaccent           = 0x7b4    ! macro
    const GTK_PANED                          = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_PANED,GtkPaned))    ! macro
    const GTK_ENTRY_BUFFER_CLASS             = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_ENTRY_BUFFER,GtkEntryBufferClass))    ! macro
    const GTK_ASPECT_FRAME                   = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_ASPECT_FRAME,GtkAspectFrame))    ! macro
    const GDK_KEY_Hyper_R                    = 0xffee    ! macro
    const g_slice_free_chain                 =  do{if(1)g_slice_free_chain_with_offset(sizeof(type),(mem_chain),G_STRUCT_OFFSET(type,next));else(void)((type*)0==(mem_chain));}while(0)    ! macro
    const GDK_KEY_phonographcopyright        = 0xafb    ! macro
    const GDK_PRIORITY_REDRAW                = (G_PRIORITY_HIGH_IDLE+20)    ! macro
    const GDK_KEY_Hangul_RieulKiyeog         = 0xeaa    ! macro
    const GDK_KEY_Sinh_na                    =  0x1000db1    ! macro
    const GDK_KEY_Ocircumflexacute           =  0x1001ed0    ! macro
    const GTK_TYPE_MENU_TOOL_BUTTON          = (gtk_menu_tool_button_get_type())    ! macro
    const G_TYPE_APP_INFO                    = (g_app_info_get_type())    ! macro
    const G_FILE_ATTRIBUTE_ID_FILE           = "id::file"    ! macro
    const ATK_MISC                           = G_TYPE_CHECK_INSTANCE_CAST((obj),ATK_TYPE_MISC,AtkMisc)    ! macro
    const GDK_KEY_Armenian_e                 = 0x1000567    ! macro
    const GTK_ACTION_GROUP_GET_CLASS         = (G_TYPE_INSTANCE_GET_CLASS((inst),GTK_TYPE_ACTION_GROUP,GtkActionGroupClass))    ! macro
    const GDK_KEY_Arabic_alefmaksura         = 0x5e9    ! macro
    const GTK_TYPE_STATE_FLAGS               = (gtk_state_flags_get_type())    ! macro
    const GDK_KEY_hebrew_mem                 = 0xcee    ! macro
    const GTK_IS_TREE_SELECTION              = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_TREE_SELECTION))    ! macro
    const GTK_CELL_RENDERER_TEXT             = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_CELL_RENDERER_TEXT,GtkCellRendererText))    ! macro
    const G_IS_PARAM_SPEC_PARAM              = (G_TYPE_CHECK_INSTANCE_TYPE((pspec),G_TYPE_PARAM_PARAM))    ! macro
    const GTK_WIDGET_GET_CLASS               = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_WIDGET,GtkWidgetClass))    ! macro
    const GDK_KEY_Thai_khokhon               = 0xda5    ! macro
    const GDK_KEY_Sinh_ng                    =  0x1000d82    ! macro
    const GTK_TYPE_GRADIENT                  = (gtk_gradient_get_type())    ! macro
    const GTK_STOCK_CDROM                    = "gtk-cdrom"    ! macro
    const ATK_IS_WINDOW                      = G_TYPE_CHECK_INSTANCE_TYPE((obj),ATK_TYPE_WINDOW)    ! macro
    const GINT64_TO_LE                       = ((gint64)(val))    ! macro
    const GDK_KEY_kana_comma                 = 0x4a4    ! macro
    const GDK_KEY_ecaron                     =  0x1ec    ! macro
    const ATK_HYPERLINK                      = (G_TYPE_CHECK_INSTANCE_CAST((obj),ATK_TYPE_HYPERLINK,AtkHyperlink))    ! macro
    const G_KEY_FILE_DESKTOP_KEY_STARTUP_NOTIFY = "StartupNotify"    ! macro
    const GTK_TYPE_SHADOW_TYPE               = (gtk_shadow_type_get_type())    ! macro
    const GDK_KEY_dead_cedilla               = 0xfe5b    ! macro
    const G_TYPE_MEMORY_INPUT_STREAM         = (g_memory_input_stream_get_type())    ! macro
    const GDK_KEY_Armenian_o                 = 0x1000585    ! macro
    const GDK_KEY_parenleft                  =  0x028    ! macro
    const GDK_KEY_Serbian_DJE                =  0x6b1    ! macro
    const GDK_KEY_division                   =  0x0f7    ! macro
    const G_MENU                             = (G_TYPE_CHECK_INSTANCE_CAST((inst),G_TYPE_MENU,GMenu))    ! macro
    const GTK_TYPE_TREE_VIEW_COLUMN          = (gtk_tree_view_column_get_type())    ! macro
    const GLIB_CHECK_VERSION                 = (GLIB_MAJOR_VERSION>(major)||(GLIB_MAJOR_VERSION==(major)&&GLIB_MINOR_VERSION>(minor))||(GLIB_MAJOR_VERSION==(major)&&GLIB_MINOR_VERSION==(minor)&&GLIB_MICRO_VERSION>=(micro)))    ! macro
    const GDK_TYPE_MODIFIER_INTENT           = (gdk_modifier_intent_get_type())    ! macro
    const G_IS_TEST_DBUS                     = (G_TYPE_CHECK_INSTANCE_TYPE((obj),G_TYPE_TEST_DBUS))    ! macro
    const GDK_VERSION_3_0                    = (G_ENCODE_VERSION(3,0))    ! macro
    const GTK_STYLE_CLASS_RAISED             = "raised"    ! macro
    const g_main_set_poll_func               = g_main_context_set_poll_func(NULL,func)    ! macro
    const G_MEMORY_OUTPUT_STREAM_GET_CLASS   = (G_TYPE_INSTANCE_GET_CLASS((o),G_TYPE_MEMORY_OUTPUT_STREAM,GMemoryOutputStreamClass))    ! macro
    const GTK_TYPE_SORT_TYPE                 = (gtk_sort_type_get_type())    ! macro
    const G_TLS_CLIENT_CONNECTION            = (G_TYPE_CHECK_INSTANCE_CAST((inst),G_TYPE_TLS_CLIENT_CONNECTION,GTlsClientConnection))    ! macro
    const GTK_TYPE_CALENDAR_DISPLAY_OPTIONS  = (gtk_calendar_display_options_get_type())    ! macro
    const GTK_IS_STATUS_ICON                 = (G_TYPE_CHECK_INSTANCE_TYPE((o),GTK_TYPE_STATUS_ICON))    ! macro
    const GDK_VERSION_3_2                    = (G_ENCODE_VERSION(3,2))    ! macro
    const PANGO_TYPE_VARIANT                 = (pango_variant_get_type())    ! macro
    const GDK_KEY_Send                       = 0x1008ff7b    ! macro
    const GDK_VERSION_3_4                    = (G_ENCODE_VERSION(3,4))    ! macro
    const G_IS_DBUS_MESSAGE                  = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_DBUS_MESSAGE))    ! macro
    const G_FILE_ENUMERATOR                  = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_FILE_ENUMERATOR,GFileEnumerator))    ! macro
    const G_TYPE_PARAM_ULONG                 = (g_param_spec_types[6])    ! macro
    const GDK_VERSION_3_6                    = (G_ENCODE_VERSION(3,6))    ! macro
    const g_once_init_leave                  = (g_once_init_leave((location),(gsize)(result)))    ! macro
    const GTK_CELL_RENDERER_PIXBUF           = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_CELL_RENDERER_PIXBUF,GtkCellRendererPixbuf))    ! macro
    const G_IS_DBUS_METHOD_INVOCATION        = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_DBUS_METHOD_INVOCATION))    ! macro
    const GDK_KEY_includedin                 = 0x8da    ! macro
    const GDK_KEY_eng                        =  0x3bf    ! macro
    const GDK_KEY_EuroSign                   =  0x20ac    ! macro
    const g_list_next                        = ((list)?(((GList*)(list))->next):NULL)    ! macro
    const GTK_IS_COLOR_CHOOSER_DIALOG_CLASS  = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_COLOR_CHOOSER_DIALOG))    ! macro
    const GDK_KEY_gcedilla                   = 0x3bb    ! macro
    const GDK_KEY_KP_Insert                  =  0xff9e    ! macro
    const GDK_KEY_Ukrainian_yi               =  0x6a7    ! macro
    const GTK_CELL_RENDERER_SPINNER_GET_CLASS = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_CELL_RENDERER_SPINNER,GtkCellRendererSpinnerClass))    ! macro
    const GDK_KEY_StickyKeys_Enable          = 0xfe75    ! macro
    const GTK_IS_ACCEL_MAP_CLASS             = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_ACCEL_MAP))    ! macro
    const GTK_TYPE_APPLICATION_INHIBIT_FLAGS = (gtk_application_inhibit_flags_get_type())    ! macro
    const G_KEY_FILE_DESKTOP_KEY_PATH        = "Path"    ! macro
    const GDK_KEY_Sinh_oo                    = 0x1000d95    ! macro
    const g_string_sprintf                   =  g_string_printf    ! macro
    const GDK_KEY_Sinh_pa                    =  0x1000db4    ! macro
    const GDK_KEY_Iacute                     =  0x0cd    ! macro
    const GTK_IS_RECENT_ACTION               = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_RECENT_ACTION))    ! macro
    const GTK_APP_CHOOSER_WIDGET_GET_CLASS   = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_APP_CHOOSER_WIDGET,GtkAppChooserWidgetClass))    ! macro
    const GDK_KEY_Greek_upsilonaccentdieresis = 0x7ba    ! macro
    const GTK_IS_LIST_STORE                  = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_LIST_STORE))    ! macro
    const G_FILE_ATTRIBUTE_STANDARD_IS_HIDDEN = "standard::is-hidden"    ! macro
    const GDK_KEY_Sinh_ru2                   = 0x1000dd8    ! macro
    const GDK_KEY_ApplicationLeft            =  0x1008ff50    ! macro
    const GDK_KEY_Pointer_Drag_Dflt          =  0xfef4    ! macro
    const ATK_MISC_CLASS                     = (G_TYPE_CHECK_CLASS_CAST((klass),ATK_TYPE_MISC,AtkMiscClass))    ! macro
    const GTK_TYPE_ICON_VIEW_DROP_POSITION   = (gtk_icon_view_drop_position_get_type())    ! macro
    const ATK_TYPE_RELATION_SET              = (atk_relation_set_get_type())    ! macro
    const GDK_KEY_Thai_sosala                = 0xdc8    ! macro
    const GDK_TYPE_VISIBILITY_STATE          = (gdk_visibility_state_get_type())    ! macro
    const GTK_IS_CELL_AREA                   = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_CELL_AREA))    ! macro
    const G_TLS_PASSWORD                     = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_TLS_PASSWORD,GTlsPassword))    ! macro
    const GTK_IS_MESSAGE_DIALOG              = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_MESSAGE_DIALOG))    ! macro
    const GTK_STYLE_PROPERTY_BACKGROUND_COLOR = "background-color"    ! macro
    const GTK_BUILDER_WARN_INVALID_CHILD_TYPE = g_warning("\'%s\' is not a valid child type of \'%s\'",type,g_type_name(G_OBJECT_TYPE(object)))    ! macro
    const G_KEY_FILE_DESKTOP_KEY_ICON        = "Icon"    ! macro
    const GDK_KEY_ocaron                     = 0x10001d2    ! macro
    const GDK_KEY_Paste                      =  0x1008ff6d    ! macro
    const GTK_RECENT_ACTION_CLASS            = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_RECENT_ACTION,GtkRecentActionClass))    ! macro
    const G_IS_DBUS_OBJECT_PROXY_CLASS       = (G_TYPE_CHECK_CLASS_TYPE((k),G_TYPE_DBUS_OBJECT_PROXY))    ! macro
    const GTK_RADIO_MENU_ITEM                = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_RADIO_MENU_ITEM,GtkRadioMenuItem))    ! macro
    const G_KEY_FILE_DESKTOP_KEY_URL         = "URL"    ! macro
    const G_IS_PROXY_RESOLVER                = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_PROXY_RESOLVER))    ! macro
    const GDK_KEY_abrevetilde                = 0x1001eb5    ! macro
    const GDK_KEY_Cyrillic_SHORTI            =  0x6ea    ! macro
    const GLIB_SYSDEF_MSG_OOB                =  1    ! macro
    const G_UNLOCK                           =  g_mutex_unlock(&G_LOCK_NAME(name))    ! macro
    const GDK_KEY_Hangul_Cieuc               = 0xeba    ! macro
    const GDK_KEY_AudioLowerVolume           =  0x1008ff11    ! macro
    const G_IS_MOUNT_OPERATION               = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_MOUNT_OPERATION))    ! macro
    const ATK_SOCKET_CLASS                   = (G_TYPE_CHECK_CLASS_CAST((klass),ATK_TYPE_SOCKET,AtkSocketClass))    ! macro
    const GINT16_FROM_LE                     = (GINT16_TO_LE(val))    ! macro
    const G_DATE_BAD_DAY                     = 0U    ! macro
    const G_TLS_BACKEND                      = (G_TYPE_CHECK_INSTANCE_CAST((obj),G_TYPE_TLS_BACKEND,GTlsBackend))    ! macro
    const GDK_KEY_Dstroke                    = 0x1d0    ! macro
    const GDK_KEY_Thai_maihanakat_maitho     =  0xdde    ! macro
    const g_dirname                          =  g_path_get_dirname    ! macro
    const GDK_KEY_Nacute                     =  0x1d1    ! macro
    const GDK_KEY_braceright                 =  0x07d    ! macro
    const GTK_SPIN_BUTTON_GET_CLASS          = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_SPIN_BUTTON,GtkSpinButtonClass))    ! macro
    const GTK_SEARCH_ENTRY_CLASS             = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_SEARCH_ENTRY,GtkSearchEntryClass))    ! macro
    const ATK_TYPE_HYPERLINK_IMPL            = (atk_hyperlink_impl_get_type())    ! macro
    const G_CREDENTIALS_GET_CLASS            = (G_TYPE_INSTANCE_GET_CLASS((o),G_TYPE_CREDENTIALS,GCredentialsClass))    ! macro
    const GDK_KEY_TouchpadToggle             = 0x1008ffa9    ! macro
    const G_PARAM_SPEC_UNICHAR               = (G_TYPE_CHECK_INSTANCE_CAST((pspec),G_TYPE_PARAM_UNICHAR,GParamSpecUnichar))    ! macro
    const GDK_KEY_numbersign                 = 0x023    ! macro
    const G_DATA_INPUT_STREAM                = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_DATA_INPUT_STREAM,GDataInputStream))    ! macro
    const G_TYPE_DBUS_OBJECT_MANAGER_CLIENT  = (g_dbus_object_manager_client_get_type())    ! macro
    const G_SIMPLE_ASYNC_RESULT              = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_SIMPLE_ASYNC_RESULT,GSimpleAsyncResult))    ! macro
    const GDK_KEY_imacron                    = 0x3ef    ! macro
    const GTK_SCROLLED_WINDOW                = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_SCROLLED_WINDOW,GtkScrolledWindow))    ! macro
    const GDK_KEY_Lbelowdot                  = 0x1001e36    ! macro
    const GDK_KEY_uogonek                    =  0x3f9    ! macro
    const G_VALUE_HOLDS_OBJECT               = (G_TYPE_CHECK_VALUE_TYPE((value),G_TYPE_OBJECT))    ! macro
    const GDK_KEY_Time                       = 0x1008ff9f    ! macro
    const GDK_KEY_Thai_totao                 =  0xdb5    ! macro
    const G_DATA_OUTPUT_STREAM               = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_DATA_OUTPUT_STREAM,GDataOutputStream))    ! macro
    const G_FILE_ATTRIBUTE_UNIX_RDEV         = "unix::rdev"    ! macro
    const ATK_IS_UTIL_CLASS                  = (G_TYPE_CHECK_CLASS_TYPE((klass),ATK_TYPE_UTIL))    ! macro
    const ATK_MISC_GET_CLASS                 = (G_TYPE_INSTANCE_GET_CLASS((obj),ATK_TYPE_MISC,AtkMiscClass))    ! macro
    const PANGO_TYPE_GRAVITY_HINT            = (pango_gravity_hint_get_type())    ! macro
    const ATK_NO_OP_OBJECT_CLASS             = (G_TYPE_CHECK_CLASS_CAST((klass),ATK_TYPE_NO_OP_OBJECT,AtkNoOpObjectClass))    ! macro
    const GTK_IS_IMAGE_MENU_ITEM_CLASS       = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_IMAGE_MENU_ITEM))    ! macro
    const G_SOCKET_SERVICE                   = (G_TYPE_CHECK_INSTANCE_CAST((inst),G_TYPE_SOCKET_SERVICE,GSocketService))    ! macro
    const GDK_KEY_tcaron                     = 0x1bb    ! macro
    const GDK_KEY_prescription               =  0xad4    ! macro
    const G_TYPE_IS_INSTANTIATABLE           = (g_type_test_flags((type),G_TYPE_FLAG_INSTANTIATABLE))    ! macro
    const ATK_OBJECT_FACTORY                 = (G_TYPE_CHECK_INSTANCE_CAST((obj),ATK_TYPE_OBJECT_FACTORY,AtkObjectFactory))    ! macro
    const GTK_TYPE_PRINT_OPERATION_RESULT    = (gtk_print_operation_result_get_type())    ! macro
    const GTK_IS_FIXED_CLASS                 = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_FIXED))    ! macro
    const G_TYPE_NATIVE_VOLUME_MONITOR       = (g_native_volume_monitor_get_type())    ! macro
    const GTK_IS_COMBO_BOX_CLASS             = (G_TYPE_CHECK_CLASS_TYPE((vtable),GTK_TYPE_COMBO_BOX))    ! macro
    const GDK_KEY_Sinh_u2                    = 0x1000dd4    ! macro
    const GTK_TREE_STORE_CLASS               = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_TREE_STORE,GtkTreeStoreClass))    ! macro
    const G_PARAM_SPEC_UINT64                = (G_TYPE_CHECK_INSTANCE_CAST((pspec),G_TYPE_PARAM_UINT64,GParamSpecUInt64))    ! macro
    const GTK_TYPE_PRINT_PAGES               = (gtk_print_pages_get_type())    ! macro
    const GDK_KEY_Georgian_jil               = 0x10010eb    ! macro
    const GDK_KEY_Sinh_ra                    =  0x1000dbb    ! macro
    const GDK_KEY_Music                      =  0x1008ff92    ! macro
    const GDK_KEY_Sacute                     =  0x1a6    ! macro
    const G_TYPE_MODULE                      = (G_TYPE_CHECK_INSTANCE_CAST((module),G_TYPE_TYPE_MODULE,GTypeModule))    ! macro
    const GDK_KEY_notelementof               = 0x1002209    ! macro
    const GTK_IS_FILE_CHOOSER_DIALOG_CLASS   = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_FILE_CHOOSER_DIALOG))    ! macro
    const GTK_TYPE_BUTTON                    = (gtk_button_get_type())    ! macro
    const ATK_PLUG_GET_CLASS                 = (G_TYPE_INSTANCE_GET_CLASS((obj),ATK_TYPE_PLUG,AtkPlugClass))    ! macro
    const ATK_DEFINE_ABSTRACT_TYPE_WITH_CODE = _ATK_DEFINE_TYPE_EXTENDED_BEGIN(TN,t_n,T_P,G_TYPE_FLAG_ABSTRACT){_C_;}_ATK_DEFINE_TYPE_EXTENDED_END()    ! macro
    const GTK_IS_TREE_MODEL_FILTER           = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_TREE_MODEL_FILTER))    ! macro
    const GTK_LIST_STORE_CLASS               = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_LIST_STORE,GtkListStoreClass))    ! macro
    const GTK_TYPE_FONT_SELECTION            = (gtk_font_selection_get_type())    ! macro
    const G_IS_INET_ADDRESS_MASK_CLASS       = (G_TYPE_CHECK_CLASS_TYPE((k),G_TYPE_INET_ADDRESS_MASK))    ! macro
    const GTK_CELL_AREA_CONTEXT              = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_CELL_AREA_CONTEXT,GtkCellAreaContext))    ! macro
    const GDK_KEY_Hangul_J_NieunHieuh        = 0xed9    ! macro
    const GDK_KEY_Shift_Lock                 =  0xffe6    ! macro
    const GDK_KEY_Hangul_Codeinput           =  0xff37    ! macro
    const g_return_val_if_reached            =  G_STMT_START{g_log(G_LOG_DOMAIN,G_LOG_LEVEL_CRITICAL,"file %s: line %d: should not be reached",__FILE__,__LINE__);return(val);}G_STMT_END    ! macro
    const GTK_STOCK_FLOPPY                   = "gtk-floppy"    ! macro
    const G_IS_NATIVE_VOLUME_MONITOR_CLASS   = (G_TYPE_CHECK_CLASS_TYPE((k),G_TYPE_NATIVE_VOLUME_MONITOR))    ! macro
    const G_DEFINE_TYPE                      = G_DEFINE_TYPE_EXTENDED(TN,t_n,T_P,0,{})    ! macro
    const GTK_IS_MENU_ITEM_CLASS             = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_MENU_ITEM))    ! macro
    const GDK_KEY_Hangul_J_RieulPieub        = 0xede    ! macro
    const ATK_TYPE_OBJECT                    = (atk_object_get_type())    ! macro
    const ATK_TYPE_PLUG                      = (atk_plug_get_type())    ! macro
    const GDK_KEY_Sinh_ri                    = 0x1000d8d    ! macro
    const GTK_OFFSCREEN_WINDOW_GET_CLASS     = (G_TYPE_INSTANCE_GET_CLASS((o),GTK_TYPE_OFFSCREEN_WINDOW,GtkOffscreenWindowClass))    ! macro
    const G_IS_PROXY_ADDRESS_CLASS           = (G_TYPE_CHECK_CLASS_TYPE((k),G_TYPE_PROXY_ADDRESS))    ! macro
    const GDK_KEY_grave                      = 0x060    ! macro
    const GDK_KEY_pabovedot                  =  0x1001e57    ! macro
    const GTK_CHECK_MENU_ITEM_GET_CLASS      = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_CHECK_MENU_ITEM,GtkCheckMenuItemClass))    ! macro
    const G_DBUS_OBJECT_PROXY_GET_CLASS      = (G_TYPE_INSTANCE_GET_CLASS((o),G_TYPE_DBUS_OBJECT_PROXY,GDBusObjectProxyClass))    ! macro
    const GTK_TYPE_CELL_RENDERER_MODE        = (gtk_cell_renderer_mode_get_type())    ! macro
    const GTK_STYLE_CLASS_SLIDER             = "slider"    ! macro
    const GDK_KEY_idiaeresis                 = 0x0ef    ! macro
    const GTK_IS_RECENT_FILTER               = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_RECENT_FILTER))    ! macro
    const GDK_KEY_rightsinglequotemark       = 0xad1    ! macro
    const g_scanner_add_symbol               =  G_STMT_START{g_scanner_scope_add_symbol((scanner),0,(symbol),(value));}G_STMT_END    ! macro
    const g_test_slow                        = (!g_test_config_vars->test_quick)    ! macro
    const GTK_TYPE_TEXT_MARK                 = (gtk_text_mark_get_type())    ! macro
    const PANGO_PIXELS_FLOOR                 = (((int)(d))>>10)    ! macro
    const GDK_KEY_hebrew_finalnun            = 0xcef    ! macro
    const G_TYPE_TEST_DBUS                   = (g_test_dbus_get_type())    ! macro
    const GDK_KEY_ISO_Level3_Shift           = 0xfe03    ! macro
    const GDK_KEY_Hangul_J_SsangKiyeog       =  0xed5    ! macro
    const GDK_KEY_Bluetooth                  =  0x1008ff94    ! macro
    const GTK_TREE_DRAG_DEST_GET_IFACE       = (G_TYPE_INSTANCE_GET_INTERFACE((obj),GTK_TYPE_TREE_DRAG_DEST,GtkTreeDragDestIface))    ! macro
    const G_TYPE_BOXED                       = G_TYPE_MAKE_FUNDAMENTAL(18)    ! macro
    const GDK_KEY_dead_belowtilde            = 0xfe6a    ! macro
    const GDK_KEY_Sinh_sa                    =  0x1000dc3    ! macro
    const PANGO_ANALYSIS_FLAG_CENTERED_BASELINE = (1<<0)    ! macro
    const GDK_KEY_enspace                    = 0xaa2    ! macro
    const G_ALLOCATOR_NODE                   =  3    ! macro
    const GDK_SCREEN                         = (G_TYPE_CHECK_INSTANCE_CAST((object),GDK_TYPE_SCREEN,GdkScreen))    ! macro
    const g_atomic_int_get                   = (g_atomic_int_get((gint*)(atomic)))    ! macro
    const GDK_KEY_cedilla                    = 0x0b8    ! macro
    const GTK_BOX_GET_CLASS                  = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_BOX,GtkBoxClass))    ! macro
    const G_TLS_PASSWORD_GET_CLASS           = (G_TYPE_INSTANCE_GET_CLASS((o),G_TYPE_TLS_PASSWORD,GTlsPasswordClass))    ! macro
    const GDK_POINTER_TO_ATOM                = ((GdkAtom)(ptr))    ! macro
    const GDK_KEY_Georgian_tan               = 0x10010d7    ! macro
    const GDK_KEY_abrevegrave                =  0x1001eb1    ! macro
    const GDK_KEY_ScrollDown                 =  0x1008ff79    ! macro
    const GTK_SEPARATOR_MENU_ITEM            = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_SEPARATOR_MENU_ITEM,GtkSeparatorMenuItem))    ! macro
    const GDK_KEY_LogGrabInfo                = 0x1008fe25    ! macro
    const GTK_COLOR_CHOOSER_GET_IFACE        = (G_TYPE_INSTANCE_GET_INTERFACE((inst),GTK_TYPE_COLOR_CHOOSER,GtkColorChooserInterface))    ! macro
    const GTK_STYLE_CLASS_RADIO              = "radio"    ! macro
    const G_OBJECT_WARN_INVALID_PSPEC        = G_STMT_START{GObject*_object=(GObject*)(object);GParamSpec*_pspec=(GParamSpec*)(pspec);guint _property_id=(property_id);g_warning("%s: invalid %s id %u for \"%s\" of type `%s\' in `%s\'",G_STRLOC,(pname),_property_id,_pspec->name,g_type_name(G_PARAM_SPEC_TYPE(_pspec)),G_OBJECT_TYPE_NAME(_object));}G_STMT_END    ! macro
    const GTK_STOCK_APPLY                    = "gtk-apply"    ! macro
    const G_GNUC_PRETTY_FUNCTION             = ""    ! macro
    const g_test_assert_expected_messages    = g_test_assert_expected_messages_internal(G_LOG_DOMAIN,__FILE__,__LINE__,G_STRFUNC)    ! macro
    const GDK_KEY_Georgian_tar               = 0x10010e2    ! macro
    const GDK_KEY_enopensquarebullet         =  0xae1    ! macro
    const G_GINT64_FORMAT                    = "I64i"    ! macro
    const GDK_SELECTION_PRIMARY              = _GDK_MAKE_ATOM(1)    ! macro
    const ATK_REGISTRY_GET_CLASS             = (G_TYPE_INSTANCE_GET_CLASS((obj),ATK_TYPE_REGISTRY,AtkRegistryClass))    ! macro
    const GTK_IS_MESSAGE_DIALOG_CLASS        = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_MESSAGE_DIALOG))    ! macro
    const ATK_OBJECT                         = (G_TYPE_CHECK_INSTANCE_CAST((obj),ATK_TYPE_OBJECT,AtkObject))    ! macro
    const GDK_KEY_Xfer                       = 0x1008ff8a    ! macro
    const GTK_LABEL_CLASS                    = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_LABEL,GtkLabelClass))    ! macro
    const GTK_TEXT_TAG_TABLE                 = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_TEXT_TAG_TABLE,GtkTextTagTable))    ! macro
    const g_static_mutex_unlock              = g_mutex_unlock(g_static_mutex_get_mutex(mutex))    ! macro
    const GTK_TYPE_MENU_SHELL                = (gtk_menu_shell_get_type())    ! macro
    const G_IS_BUFFERED_OUTPUT_STREAM_CLASS  = (G_TYPE_CHECK_CLASS_TYPE((k),G_TYPE_BUFFERED_OUTPUT_STREAM))    ! macro
    const GTK_SEPARATOR_TOOL_ITEM_CLASS      = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_SEPARATOR_TOOL_ITEM,GtkSeparatorToolItemClass))    ! macro
    const GTK_IS_IM_CONTEXT_SIMPLE_CLASS     = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_IM_CONTEXT_SIMPLE))    ! macro
    const G_TYPE_DBUS_MENU_MODEL             = (g_dbus_menu_model_get_type())    ! macro
    const GTK_ACCEL_GROUP                    = (G_TYPE_CHECK_INSTANCE_CAST((object),GTK_TYPE_ACCEL_GROUP,GtkAccelGroup))    ! macro
    const g_get_system_data_dirs             = _g_win32_get_system_data_dirs    ! macro
    const GDK_KEY_hebrew_waw                 =  0xce5    ! macro
    const GDK_KEY_Ohorntilde                 =  0x1001ee0    ! macro
    const G_PROXY_ADDRESS_ENUMERATOR_CLASS   = (G_TYPE_CHECK_CLASS_CAST((k),G_TYPE_PROXY_ADDRESS_ENUMERATOR,GProxyAddressEnumeratorClass))    ! macro
    const GTK_IS_TREE_VIEW_COLUMN_CLASS      = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_TREE_VIEW_COLUMN))    ! macro
    const G_TYPE_PROXY_ADDRESS               = (g_proxy_address_get_type())    ! macro
    const g_test_trap_assert_stderr          = g_test_trap_assertions(G_LOG_DOMAIN,__FILE__,__LINE__,G_STRFUNC,4,serrpattern)    ! macro
    const GTK_TYPE_ACCEL_MAP                 = (gtk_accel_map_get_type())    ! macro
    const GTK_ENTRY_COMPLETION_GET_CLASS     = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_ENTRY_COMPLETION,GtkEntryCompletionClass))    ! macro
    const GTK_TYPE_CELL_LAYOUT               = (gtk_cell_layout_get_type())    ! macro
    const G_UNICODE_COMBINING_MARK           = G_UNICODE_SPACING_MARK    ! macro
    const G_IS_SIMPLE_ASYNC_RESULT_CLASS     = (G_TYPE_CHECK_CLASS_TYPE((k),G_TYPE_SIMPLE_ASYNC_RESULT))    ! macro
    const GDK_KEY_braille_dots_34567         = 0x100287c    ! macro
    const GTK_STOCK_OPEN                     = "gtk-open"    ! macro
    const GTK_IS_IMAGE_CLASS                 = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_IMAGE))    ! macro
    const GTK_IS_SCROLLBAR_CLASS             = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_SCROLLBAR))    ! macro
    const GDK_KEY_3270_AltCursor             = 0xfd10    ! macro
    const GDK_KEY_braille_dots_34568         =  0x10028bc    ! macro
    const GTK_STYLE_CLASS_INLINE_TOOLBAR     = "inline-toolbar"    ! macro
    const G_BREAKPOINT                       = G_STMT_START{raise(SIGTRAP);}G_STMT_END    ! macro
    const GDK_KEY_MyComputer                 =  0x1008ff33    ! macro
    const G_TYPE_DBUS_NODE_INFO              = (g_dbus_node_info_get_type())    ! macro
    const GDK_KEY_Green                      = 0x1008ffa4    ! macro
    const PANGO_TYPE_GLYPH_STRING            = (pango_glyph_string_get_type())    ! macro
    const GDK_KEY_Acircumflextilde           = 0x1001eaa    ! macro
    const GTK_STOCK_ORIENTATION_PORTRAIT     = "gtk-orientation-portrait"    ! macro
    const G_TYPE_PARAM_UINT                  = (g_param_spec_types[4])    ! macro
    const GTK_TYPE_PRINT_OPERATION_ACTION    = (gtk_print_operation_action_get_type())    ! macro
    const GDK_KEY_Armenian_yentamna          = 0x100058a    ! macro
    const PANGO_TYPE_LAYOUT                  = (pango_layout_get_type())    ! macro
    const GDK_KEY_marker                     = 0xabf    ! macro
    const GTK_TOGGLE_TOOL_BUTTON_CLASS       = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_TOGGLE_TOOL_BUTTON,GtkToggleToolButtonClass))    ! macro
    const GINT_FROM_LE                       = (GINT_TO_LE(val))    ! macro
    const G_MAXDOUBLE                        = DBL_MAX    ! macro
    const GDK_KEY_Hangul_YAE                 =  0xec2    ! macro
    const GDK_KEY_kana_openingbracket        =  0x4a2    ! macro
    const GTK_STOCK_UNDELETE                 = "gtk-undelete"    ! macro
    const G_BYTE_ORDER                       = G_LITTLE_ENDIAN    ! macro
    const GTK_TYPE_DEBUG_FLAG                = (gtk_debug_flag_get_type())    ! macro
    const G_TYPE_IS_VALUE_ABSTRACT           = (g_type_test_flags((type),G_TYPE_FLAG_VALUE_ABSTRACT))    ! macro
    const GTK_ALIGNMENT_GET_CLASS            = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_ALIGNMENT,GtkAlignmentClass))    ! macro
    const GTK_TYPE_REQUISITION               = (gtk_requisition_get_type())    ! macro
    const G_TYPE_RESOURCE_FLAGS              = (g_resource_flags_get_type())    ! macro
    const GTK_VPANED                         = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_VPANED,GtkVPaned))    ! macro
    const GDK_KEY_notsign                    = 0x0ac    ! macro
    const GTK_TYPE_BIN                       = (gtk_bin_get_type())    ! macro
    const GTK_ACTION_GROUP_CLASS             = (G_TYPE_CHECK_CLASS_CAST((vtable),GTK_TYPE_ACTION_GROUP,GtkActionGroupClass))    ! macro
    const PANGO_IS_CAIRO_FONT_MAP            = (G_TYPE_CHECK_INSTANCE_TYPE((object),PANGO_TYPE_CAIRO_FONT_MAP))    ! macro
    const GDK_KEY_Abrevetilde                = 0x1001eb4    ! macro
    const G_TLS_INTERACTION                  = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_TLS_INTERACTION,GTlsInteraction))    ! macro
    const GDK_KEY_Byelorussian_shortu        = 0x6ae    ! macro
    const GDK_KEY_braille_dots_34578         =  0x10028dc    ! macro
    const GTK_MOUNT_OPERATION                = (G_TYPE_CHECK_INSTANCE_CAST((o),GTK_TYPE_MOUNT_OPERATION,GtkMountOperation))    ! macro
    const GLIB_DEPRECATED_IN_2_34_FOR        = GLIB_DEPRECATED_FOR(f)    ! macro
    const PANGO_MATRIX_INIT                  = {1.,0.,0.,1.,0.,0.}    ! macro
    const GDK_KEY_Sinh_sha                   = 0x1000dc1    ! macro
    const GDK_KEY_dead_breve                 =  0xfe55    ! macro
    const GDK_KEY_hebrew_samech              =  0xcf1    ! macro
    const GDK_KEY_Thai_rorua                 =  0xdc3    ! macro
    const GDK_KEY_abreve                     =  0x1e3    ! macro
    const GDK_DISPLAY                        = (G_TYPE_CHECK_INSTANCE_CAST((object),GDK_TYPE_DISPLAY,GdkDisplay))    ! macro
    const GDK_KEY_Hangul_SsangDikeud         = 0xea8    ! macro
    const GTK_STYLE_PROVIDER_PRIORITY_USER   =  800    ! macro
    const GTK_IS_LOCK_BUTTON                 = (G_TYPE_CHECK_INSTANCE_TYPE((o),GTK_TYPE_LOCK_BUTTON))    ! macro
    const G_TYPE_FLOAT                       = G_TYPE_MAKE_FUNDAMENTAL(14)    ! macro
    const G_PROXY_ADDRESS_ENUMERATOR         = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_PROXY_ADDRESS_ENUMERATOR,GProxyAddressEnumerator))    ! macro
    const GUINT16_FROM_LE                    = (GUINT16_TO_LE(val))    ! macro
    const G_RESOLVER_ERROR                   = (g_resolver_error_quark())    ! macro
    const GDK_KEY_eth                        = 0x0f0    ! macro
    const G_TYPE_TLS_BACKEND                 = (g_tls_backend_get_type())    ! macro
    const GDK_KEY_Thai_chochoe               = 0xdac    ! macro
    const g_filename_from_uri                =  g_filename_from_uri_utf8    ! macro
    const G_FILE_ATTRIBUTE_OWNER_GROUP       = "owner::group"    ! macro
    const GDK_KEY_BackSpace                  = 0xff08    ! macro
    const G_MAXULONG                         =  ULONG_MAX    ! macro
    const GDK_KEY_Cyrillic_lje               =  0x6a9    ! macro
    const GTK_ORIENTABLE                     = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_ORIENTABLE,GtkOrientable))    ! macro
    const GDK_KEY_Sinh_va                    = 0x1000dc0    ! macro
    const GTK_IS_INFO_BAR_CLASS              = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_INFO_BAR))    ! macro
    const GTK_IS_LOCK_BUTTON_CLASS           = (G_TYPE_CHECK_CLASS_TYPE((k),GTK_TYPE_LOCK_BUTTON))    ! macro
    const G_IS_SOCKET_CONNECTABLE            = (G_TYPE_CHECK_INSTANCE_TYPE((obj),G_TYPE_SOCKET_CONNECTABLE))    ! macro
    const GTK_STYLE_PROVIDER                 = (G_TYPE_CHECK_INSTANCE_CAST((o),GTK_TYPE_STYLE_PROVIDER,GtkStyleProvider))    ! macro
    const GDK_KEY_braille_dots_134567        = 0x100287d    ! macro
    const GTK_IS_STATUSBAR                   = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_STATUSBAR))    ! macro
    const GTK_MENU_BAR                       = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_MENU_BAR,GtkMenuBar))    ! macro
    const ATK_NO_OP_OBJECT_FACTORY           = (G_TYPE_CHECK_INSTANCE_CAST((obj),ATK_TYPE_NO_OP_OBJECT_FACTORY,AtkNoOpObjectFactory))    ! macro
    const GTK_HSEPARATOR                     = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_HSEPARATOR,GtkHSeparator))    ! macro
    const G_IS_PARAM_SPEC_INT                = (G_TYPE_CHECK_INSTANCE_TYPE((pspec),G_TYPE_PARAM_INT))    ! macro
    const GDK_KEY_braille_dots_134568        = 0x10028bd    ! macro
    const GDK_KEY_ISO_First_Group_Lock       =  0xfe0d    ! macro
    const G_TYPE_CHECK_INSTANCE_TYPE         = (_G_TYPE_CIT((instance),(g_type)))    ! macro
    const G_IO_MODULE_GET_CLASS              = (G_TYPE_INSTANCE_GET_CLASS((o),G_IO_TYPE_MODULE,GIOModuleClass))    ! macro
    const GDK_KEY_Print                      = 0xff61    ! macro
    const GTK_TYPE_UNIT                      = (gtk_unit_get_type())    ! macro
    const cairo_current_matrix               = cairo_current_matrix_REPLACED_BY_cairo_get_matrix    ! macro
    const GDK_KEY_Sinh_uu                    =  0x1000d8c    ! macro
    const G_NETWORK_ADDRESS_GET_CLASS        = (G_TYPE_INSTANCE_GET_CLASS((o),G_TYPE_NETWORK_ADDRESS,GNetworkAddressClass))    ! macro
    const GTK_STOCK_DELETE                   = "gtk-delete"    ! macro
    const G_TYPE_STRING                      = G_TYPE_MAKE_FUNDAMENTAL(16)    ! macro
    const G_FILE_ATTRIBUTE_ACCESS_CAN_RENAME = "access::can-rename"    ! macro
    const GDK_KEY_Ohorngrave                 = 0x1001edc    ! macro
    const GTK_IS_VSEPARATOR_CLASS            = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_VSEPARATOR))    ! macro
    const GDK_KEY_acircumflexhook            = 0x1001ea9    ! macro
    const G_MENU_ATTRIBUTE_TARGET            = "target"    ! macro
    const GTK_STOCK_JUSTIFY_FILL             = "gtk-justify-fill"    ! macro
    const GDK_KEY_dead_semivoiced_sound      = 0xfe5f    ! macro
    const GDK_KEY_Hangul_J_Hieuh             =  0xeee    ! macro
    const GTK_IS_BUILDABLE                   = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_BUILDABLE))    ! macro
    const G_TYPE_DATA_INPUT_STREAM           = (g_data_input_stream_get_type())    ! macro
    const GTK_TYPE_LEVEL_BAR                 = (gtk_level_bar_get_type())    ! macro
    const GDK_KEY_ISO_Next_Group             = 0xfe08    ! macro
    const G_TYPE_TYPE_MODULE                 = (g_type_module_get_type())    ! macro
    const GDK_KEY_Acircumflexgrave           = 0x1001ea6    ! macro
    const GTK_IS_CELL_RENDERER_TOGGLE        = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_CELL_RENDERER_TOGGLE))    ! macro
    const GTK_IS_RECENT_CHOOSER_WIDGET_CLASS = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_RECENT_CHOOSER_WIDGET))    ! macro
    const GDK_KEY_Serbian_TSHE               = 0x6bb    ! macro
    const g_test_trap_assert_failed          =  g_test_trap_assertions(G_LOG_DOMAIN,__FILE__,__LINE__,G_STRFUNC,1,0)    ! macro
    const GDK_KEY_lacute                     = 0x1e5    ! macro
    const GTK_IS_APPLICATION_CLASS           = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_APPLICATION))    ! macro
    const G_FILE_ATTRIBUTE_STANDARD_SORT_ORDER = "standard::sort-order"    ! macro
    const GTK_TYPE_TREE_STORE                = (gtk_tree_store_get_type())    ! macro
    const G_MEMORY_OUTPUT_STREAM_CLASS       = (G_TYPE_CHECK_CLASS_CAST((k),G_TYPE_MEMORY_OUTPUT_STREAM,GMemoryOutputStreamClass))    ! macro
    const GDK_KEY_Prior                      = 0xff55    ! macro
    const GDK_KEY_3270_Record                =  0xfd18    ! macro
    const GDK_KEY_braille_dots_134578        =  0x10028dd    ! macro
    const GDK_KEY_Sinh_aa2                   =  0x1000dcf    ! macro
    const G_IS_FILE_ENUMERATOR_CLASS         = (G_TYPE_CHECK_CLASS_TYPE((k),G_TYPE_FILE_ENUMERATOR))    ! macro
    const cairo_show_surface                 = cairo_show_surface_DEPRECATED_BY_cairo_set_source_surface_AND_cairo_paint    ! macro
    const G_USEC_PER_SEC                     =  1000000    ! macro
    const ATK_IS_TABLE                       =  G_TYPE_CHECK_INSTANCE_TYPE((obj),ATK_TYPE_TABLE)    ! macro
    const GDK_KEY_Thai_thophuthao            = 0xdb2    ! macro
    const GDK_KEY_space                      =  0x020    ! macro
    const GDK_KEY_dabovedot                  =  0x1001e0b    ! macro
    const GDK_KEY_Finance                    =  0x1008ff3c    ! macro
    const GTK_TYPE_RECENT_ACTION             = (gtk_recent_action_get_type())    ! macro
    const G_TIME_SPAN_SECOND                 = (G_GINT64_CONSTANT(1000000))    ! macro
    const G_IS_SIMPLE_ASYNC_RESULT           = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_SIMPLE_ASYNC_RESULT))    ! macro
    const G_IS_PARAM_SPEC_ULONG              = (G_TYPE_CHECK_INSTANCE_TYPE((pspec),G_TYPE_PARAM_ULONG))    ! macro
    const GTK_COMBO_BOX_TEXT_GET_CLASS       = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_COMBO_BOX_TEXT,GtkComboBoxTextClass))    ! macro
    const GTK_CELL_RENDERER_COMBO            = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_CELL_RENDERER_COMBO,GtkCellRendererCombo))    ! macro
    const GDK_KEY_braille_dots_3678          = 0x10028e4    ! macro
    const GDK_KEY_Thai_khokhuat              =  0xda3    ! macro
    const GTK_TEXT_BUFFER_CLASS              = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_TEXT_BUFFER,GtkTextBufferClass))    ! macro
    const GTK_IM_CONTEXT_GET_CLASS           = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_IM_CONTEXT,GtkIMContextClass))    ! macro
    const GDK_KEY_leftmiddlecurlybrace       = 0x8af    ! macro
    const GDK_KEY_ISO_Emphasize              =  0xfe32    ! macro
    const G_VARIANT_TYPE_DOUBLE              = ((const GVariantType*)"d")    ! macro
    const g_file_get_contents                = g_file_get_contents_utf8    ! macro
    const G_IS_MENU_ITEM                     = (G_TYPE_CHECK_INSTANCE_TYPE((inst),G_TYPE_MENU_ITEM))    ! macro
    const GDK_KEY_Abrevegrave                = 0x1001eb0    ! macro
    const GDK_CURRENT_TIME                   =  0L    ! macro
    const GDK_KEY_ISO_Partial_Space_Right    =  0xfe26    ! macro
    const G_HOOK_FLAG_USER_SHIFT             = (4)    ! macro
    const GDK_KEY_bott                       = 0x9f6    ! macro
    const G_GINT32_MODIFIER                  = ""    ! macro
    const G_TYPE_RESOURCE_LOOKUP_FLAGS       = (g_resource_lookup_flags_get_type())    ! macro
    const GDK_KEY_elementof                  = 0x1002208    ! macro
    const GDK_KEY_Serbian_NJE                =  0x6ba    ! macro
    const GDK_KEY_Cyrillic_SCHWA             =  0x10004d8    ! macro
    const GTK_TYPE_TOOLTIP                   = (gtk_tooltip_get_type())    ! macro
    const GDK_BUTTON_PRIMARY                 = (1)    ! macro
    const GLIB_VERSION_MIN_REQUIRED          = (GLIB_VERSION_CUR_STABLE)    ! macro
    const GTK_IS_HSV_CLASS                   = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_HSV))    ! macro
    const GTK_MENU_BAR_CLASS                 = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_MENU_BAR,GtkMenuBarClass))    ! macro
    const GDK_KEY_dead_A                     = 0xfe81    ! macro
    const G_TYPE_TCP_WRAPPER_CONNECTION      = (g_tcp_wrapper_connection_get_type())    ! macro
    const GTK_STYLE_CLASS                    = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_STYLE,GtkStyleClass))    ! macro
    const _G_TYPE_CCC                        = ((ct*)g_type_check_class_cast((GTypeClass*)cp,gt))    ! macro
    const GDK_KEY_braille_dots_12678         = 0x10028e3    ! macro
    const G_FILE_ATTRIBUTE_OWNER_USER_REAL   = "owner::user-real"    ! macro
    const GDK_KEY_script_switch              = 0xff7e    ! macro
    const GDK_KEY_3270_Reset                 =  0xfd08    ! macro
    const GTK_TYPE_HBOX                      = (gtk_hbox_get_type())    ! macro
    const PANGO_TYPE_GLYPH_ITEM              = (pango_glyph_item_get_type())    ! macro
    const GDK_KEY_3270_Play                  = 0xfd16    ! macro
    const GDK_KEY_dead_E                     =  0xfe83    ! macro
    const GTK_STYLE_CLASS_CHECK              = "check"    ! macro
    const GTK_IS_RANGE                       = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_RANGE))    ! macro
    const GTK_IS_VBUTTON_BOX_CLASS           = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_VBUTTON_BOX))    ! macro
    const GTK_TYPE_STATUS_ICON               = (gtk_status_icon_get_type())    ! macro
    const G_VALUE_HOLDS_GTYPE                = (G_TYPE_CHECK_VALUE_TYPE((value),G_TYPE_GTYPE))    ! macro
    const GDK_KEY_UserPB                     = 0x1008ff84    ! macro
    const ATK_IS_SELECTION                   =  G_TYPE_CHECK_INSTANCE_TYPE((obj),ATK_TYPE_SELECTION)    ! macro
    const G_VARIANT_TYPE_VARDICT             = ((const GVariantType*)"a{sv}")    ! macro
    const GDK_TYPE_EVENT                     = (gdk_event_get_type())    ! macro
    const G_APPLICATION_CLASS                = (G_TYPE_CHECK_CLASS_CAST((class),G_TYPE_APPLICATION,GApplicationClass))    ! macro
    const GDK_KEY_dead_I                     = 0xfe85    ! macro
    const GTK_RECENT_CHOOSER_MENU_GET_CLASS  = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_RECENT_CHOOSER_MENU,GtkRecentChooserMenuClass))    ! macro
    const GDK_KEY_crossinglines              = 0x9ee    ! macro
    const G_FILE_ATTRIBUTE_TRASH_ITEM_COUNT  = "trash::item-count"    ! macro
    const GDK_KEY_ubelowdot                  = 0x1001ee5    ! macro
    const gdk_pixbuf_new_from_file           =  gdk_pixbuf_new_from_file_utf8    ! macro
    const g_date_weekday                     =  g_date_get_weekday    ! macro
    const GDK_KEY_ISO_Level5_Shift           =  0xfe11    ! macro
    const G_TYPE_DBUS_PROXY                  = (g_dbus_proxy_get_type())    ! macro
    const GDK_KEY_hebrew_gimmel              = 0xce2    ! macro
    const GDK_KEY_Sinh_ya                    =  0x1000dba    ! macro
    const GDK_KEY_dead_O                     =  0xfe87    ! macro
    const GTK_ENTRY                          = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_ENTRY,GtkEntry))    ! macro
    const GDK_KEY_asciicircum                = 0x05e    ! macro
    const G_TYPE_IS_PARAM                    = (G_TYPE_FUNDAMENTAL(type)==G_TYPE_PARAM)    ! macro
    const GDK_KEY_CycleAngle                 = 0x1008ff9c    ! macro
    const GDK_KEY_Georgian_kan               =  0x10010d9    ! macro
    const GTK_TYPE_MENU_BAR                  = (gtk_menu_bar_get_type())    ! macro
    const GDK_KEY_Iogonek                    = 0x3c7    ! macro
    const G_TYPE_PARAM_STRING                = (g_param_spec_types[14])    ! macro
    const GDK_KEY_AudioRecord                = 0x1008ff1c    ! macro
    const GDK_KEY_botvertsummationconnector  =  0x8b4    ! macro
    const GTK_IS_TOOL_ITEM_GROUP_CLASS       = (G_TYPE_CHECK_CLASS_TYPE(obj,GTK_TYPE_TOOL_ITEM_GROUP))    ! macro
    const G_DBUS_OBJECT                      = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_DBUS_OBJECT,GDBusObject))    ! macro
    const GDK_KEY_hebrew_finalkaph           = 0xcea    ! macro
    const GTK_RECENT_CHOOSER_WIDGET_CLASS    = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_RECENT_CHOOSER_WIDGET,GtkRecentChooserWidgetClass))    ! macro
    const _G_TYPE_CCT                        = (g_type_check_class_is_a((GTypeClass*)cp,gt))    ! macro
    const GDK_KEY_yen                        = 0x0a5    ! macro
    const GTK_BUILDER                        = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_BUILDER,GtkBuilder))    ! macro
    const G_IO_MODULE                        = (G_TYPE_CHECK_INSTANCE_CAST((o),G_IO_TYPE_MODULE,GIOModule))    ! macro
    const GLIB_SYSDEF_AF_INET6               = 23    ! macro
    const GTK_STOCK_SPELL_CHECK              = "gtk-spell-check"    ! macro
    const GDK_KEY_dead_U                     = 0xfe89    ! macro
    const G_GSIZE_MODIFIER                   = "I64"    ! macro
    const G_KEY_FILE_DESKTOP_KEY_MIME_TYPE   = "MimeType"    ! macro
    const GDK_KEY_Hangul_YEO                 = 0xec5    ! macro
    const GDK_KEY_openstar                   =  0xae5    ! macro
    const GTK_TYPE_FILE_CHOOSER_ERROR        = (gtk_file_chooser_error_get_type())    ! macro
    const G_TYPE_PARAM_ENUM                  = (g_param_spec_types[10])    ! macro
    const GTK_ACCESSIBLE                     = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_ACCESSIBLE,GtkAccessible))    ! macro
    const GDK_KEY_ubreve                     = 0x2fd    ! macro
    const GTK_TOOL_ITEM_GET_CLASS            = (G_TYPE_INSTANCE_GET_CLASS((o),GTK_TYPE_TOOL_ITEM,GtkToolItemClass))    ! macro
    const GDK_KEY_uring                      = 0x1f9    ! macro
    const GDK_IS_SCREEN                      = (G_TYPE_CHECK_INSTANCE_TYPE((object),GDK_TYPE_SCREEN))    ! macro
    const GDK_KEY_upstile                    = 0xbd3    ! macro
    const GLIB_MICRO_VERSION                 =  3    ! macro
    const GDK_KEY_3270_Left2                 =  0xfd04    ! macro
    const GTK_IS_WIDGET_CLASS                = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_WIDGET))    ! macro
    const GTK_DRAWING_AREA_GET_CLASS         = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_DRAWING_AREA,GtkDrawingAreaClass))    ! macro
    const G_FILE_ATTRIBUTE_TIME_CREATED_USEC = "time::created-usec"    ! macro
    const G_REMOTE_ACTION_GROUP_GET_IFACE    = (G_TYPE_INSTANCE_GET_INTERFACE((inst),G_TYPE_REMOTE_ACTION_GROUP,GRemoteActionGroupInterface))    ! macro
    const GDK_KEY_ucircumflex                = 0x0fb    ! macro
    const GDK_KEY_Cyrillic_che               =  0x6de    ! macro
    const GDK_KEY_Ohornbelowdot              =  0x1001ee2    ! macro
    const g_node_append                      =  g_node_insert_before((parent),NULL,(node))    ! macro
    const GTK_TYPE_RECENT_FILTER             = (gtk_recent_filter_get_type())    ! macro
    const GDK_KEY_Arabic_hamza               = 0x5c1    ! macro
    const G_ENUM_CLASS_TYPE                  = (G_TYPE_FROM_CLASS(class))    ! macro
    const GDK_KEY_ohook                      = 0x1001ecf    ! macro
    const g_dataset_remove_no_notify         =  g_dataset_id_remove_no_notify((l),g_quark_try_string(k))    ! macro
    const G_SOCKET_CONNECTABLE_GET_IFACE     = (G_TYPE_INSTANCE_GET_INTERFACE((obj),G_TYPE_SOCKET_CONNECTABLE,GSocketConnectableIface))    ! macro
    const GDK_KEY_botrightsummation          = 0x8b6    ! macro
    const GDK_KEY_sevensuperior              =  0x1002077    ! macro
    const GTK_IS_TREE_DRAG_SOURCE            = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_TREE_DRAG_SOURCE))    ! macro
    const GDK_KEY_Greek_PHI                  = 0x7d6    ! macro
    const GDK_TARGET_STRING                  =  _GDK_MAKE_ATOM(31)    ! macro
    const GDK_KEY_Hangul_SunkyeongeumMieum   = 0xef0    ! macro
    const GDK_KEY_Greek_UPSILON              =  0x7d5    ! macro
    const GUINT16_SWAP_LE_BE                 = (GUINT16_SWAP_LE_BE_CONSTANT(val))    ! macro
    const GDK_KEY_Arabic_veh                 = 0x10006a4    ! macro
    const G_IS_SOCKET_CONTROL_MESSAGE        = (G_TYPE_CHECK_INSTANCE_TYPE((inst),G_TYPE_SOCKET_CONTROL_MESSAGE))    ! macro
    const G_FILE_ATTRIBUTE_DOS_IS_ARCHIVE    = "dos::is-archive"    ! macro
    const GDK_KEY_dead_a                     = 0xfe80    ! macro
    const G_DEFINE_INTERFACE                 =  G_DEFINE_INTERFACE_WITH_CODE(TN,t_n,T_P,;)    ! macro
    const GTK_IS_RADIO_TOOL_BUTTON_CLASS     = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_RADIO_TOOL_BUTTON))    ! macro
    const ATK_IS_VALUE                       = G_TYPE_CHECK_INSTANCE_TYPE((obj),ATK_TYPE_VALUE)    ! macro
    const GTK_IS_ORIENTABLE                  = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_ORIENTABLE))    ! macro
    const G_TYPE_TLS_CERTIFICATE_FLAGS       = (g_tls_certificate_flags_get_type())    ! macro
    const GDK_KEY_registered                 = 0x0ae    ! macro
    const GTK_TYPE_SPIN_BUTTON_UPDATE_POLICY = (gtk_spin_button_update_policy_get_type())    ! macro
    const G_PRIORITY_LOW                     = 300    ! macro
    const GDK_KEY_Thai_saraaa                =  0xdd2    ! macro
    const GTK_IS_TOOL_BUTTON_CLASS           = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_TOOL_BUTTON))    ! macro
    const GDK_KEY_rightanglebracket          = 0xabe    ! macro
    const GDK_KEY_dead_e                     =  0xfe82    ! macro
    const GTK_IS_HSEPARATOR                  = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_HSEPARATOR))    ! macro
    const GTK_IS_FONT_SELECTION_CLASS        = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_FONT_SELECTION))    ! macro
    const GDK_KEY_Arabic_percent             = 0x100066a    ! macro
    const GTK_IS_CELL_AREA_BOX_CLASS         = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_CELL_AREA_BOX))    ! macro
    const G_FILTER_OUTPUT_STREAM_CLASS       = (G_TYPE_CHECK_CLASS_CAST((k),G_TYPE_FILTER_OUTPUT_STREAM,GFilterOutputStreamClass))    ! macro
    const G_OBJECT_TYPE                      = (G_TYPE_FROM_INSTANCE(object))    ! macro
    const GDK_KEY_trademarkincircle          = 0xacb    ! macro
    const GDK_KEY_Thai_saraae                =  0xde1    ! macro
    const G_TYPE_EMBLEMED_ICON               = (g_emblemed_icon_get_type())    ! macro
    const GTK_IS_VBUTTON_BOX                 = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_VBUTTON_BOX))    ! macro
    const GDK_KEY_question                   = 0x03f    ! macro
    const GDK_KEY_Armenian_TCHE              =  0x1000543    ! macro
    const GDK_KEY_dead_i                     =  0xfe84    ! macro
    const G_HOOK                             = ((GHook*)(hook))    ! macro
    const G_CONVERT_ERROR                    = g_convert_error_quark()    ! macro
    const GDK_KEY_Last_Virtual_Screen        = 0xfed4    ! macro
    const G_TYPE_UNIX_SOCKET_ADDRESS_TYPE    = (g_unix_socket_address_type_get_type())    ! macro
    const G_TYPE_INET_ADDRESS                = (g_inet_address_get_type())    ! macro
    const g_get_real_name                    = g_get_real_name_utf8    ! macro
    const G_TYPE_VFS                         = (g_vfs_get_type())    ! macro
    const GTK_STOCK_INDEX                    = "gtk-index"    ! macro
    const G_IS_DBUS_CONNECTION               = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_DBUS_CONNECTION))    ! macro
    const G_TYPE_IS_VALUE_TYPE               = (g_type_check_is_value_type(type))    ! macro
    const GDK_KEY_obelowdot                  = 0x1001ecd    ! macro
    const GDK_KEY_Macedonia_GJE              =  0x6b2    ! macro
    const GDK_KEY_Escape                     =  0xff1b    ! macro
    const GDK_KEY_Undo                       =  0xff65    ! macro
    const GDK_KEY_dead_o                     =  0xfe86    ! macro
    const GDK_KEY_Sinh_ae2                   =  0x1000dd0    ! macro
    const GDK_KEY_Thai_saraam                =  0xdd3    ! macro
    const G_TCP_WRAPPER_CONNECTION_GET_CLASS = (G_TYPE_INSTANCE_GET_CLASS((inst),G_TYPE_TCP_WRAPPER_CONNECTION,GTcpWrapperConnectionClass))    ! macro
    const GLIB_DEPRECATED_IN_2_26            = GLIB_DEPRECATED    ! macro
    const G_IS_TCP_WRAPPER_CONNECTION_CLASS  = (G_TYPE_CHECK_CLASS_TYPE((class),G_TYPE_TCP_WRAPPER_CONNECTION))    ! macro
    const GDK_KEY_Sinh_jha                   = 0x1000da3    ! macro
    const G_KEY_FILE_DESKTOP_KEY_ONLY_SHOW_IN = "OnlyShowIn"    ! macro
    const GTK_TYPE_SCROLL_TYPE               = (gtk_scroll_type_get_type())    ! macro
    const GDK_KEY_permille                   = 0xad5    ! macro
    const GLIB_DEPRECATED_IN_2_28            =  GLIB_DEPRECATED    ! macro
    const GTK_IS_ABOUT_DIALOG                = (G_TYPE_CHECK_INSTANCE_TYPE((object),GTK_TYPE_ABOUT_DIALOG))    ! macro
    const G_TYPE_MENU_ITEM                   = (g_menu_item_get_type())    ! macro
    const PANGO_CONTEXT_CLASS                = (G_TYPE_CHECK_CLASS_CAST((klass),PANGO_TYPE_CONTEXT,PangoContextClass))    ! macro
    const GDK_KEY_dead_u                     = 0xfe88    ! macro
    const GDK_KEY_AudioNext                  =  0x1008ff17    ! macro
    const GTK_IS_STYLE_CONTEXT_CLASS         = (G_TYPE_CHECK_CLASS_TYPE((c),GTK_TYPE_STYLE_CONTEXT))    ! macro
    const GTK_TYPE_SPINNER                   = (gtk_spinner_get_type())    ! macro
    const GTK_IS_STYLE_CONTEXT               = (G_TYPE_CHECK_INSTANCE_TYPE((o),GTK_TYPE_STYLE_CONTEXT))    ! macro
    const ATK_HYPERLINK_GET_CLASS            = (G_TYPE_INSTANCE_GET_CLASS((obj),ATK_TYPE_HYPERLINK,AtkHyperlinkClass))    ! macro
    const GDK_KEY_threesuperior              = 0x0b3    ! macro
    const G_IS_MOUNT_OPERATION_CLASS         = (G_TYPE_CHECK_CLASS_TYPE((k),G_TYPE_MOUNT_OPERATION))    ! macro
    const GTK_RANGE_GET_CLASS                = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_RANGE,GtkRangeClass))    ! macro
    const GDK_KEY_News                       = 0x1008ff69    ! macro
    const GDK_KEY_BrightnessAdjust           =  0x1008ff3b    ! macro
    const G_VARIANT_PARSE_ERROR              = (g_variant_parser_get_error_quark())    ! macro
    const GDK_KEY_Arabic_madda_above         = 0x1000653    ! macro
    const GDK_KEY_ezh                        =  0x1000292    ! macro
    const GDK_KEY_braille_dots_24567         =  0x100287a    ! macro
    const GTK_SPINNER_CLASS                  = (G_TYPE_CHECK_CLASS_CAST((obj),GTK_TYPE_SPINNER,GtkSpinnerClass))    ! macro
    const GDK_KEY_braille_dots_24568         = 0x10028ba    ! macro
    const GTK_TYPE_BOX                       = (gtk_box_get_type())    ! macro
    const GDK_KEY_Overlay1_Enable            = 0xfe78    ! macro
    const G_TYPE_DBUS_ANNOTATION_INFO        = (g_dbus_annotation_info_get_type())    ! macro
    const GTK_TEXT_TAG_TABLE_CLASS           = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_TEXT_TAG_TABLE,GtkTextTagTableClass))    ! macro
    const GLIB_DEPRECATED_IN_2_30            = GLIB_DEPRECATED    ! macro
    const GTK_TYPE_TOOLBAR                   = (gtk_toolbar_get_type())    ! macro
    const GDK_SELECTION_TYPE_ATOM            = _GDK_MAKE_ATOM(4)    ! macro
    const GDK_KEY_AudioPause                 = 0x1008ff31    ! macro
    const GDK_KEY_Armenian_DZA               =  0x1000541    ! macro
    const GTK_TYPE_ABOUT_DIALOG              = (gtk_about_dialog_get_type())    ! macro
    const G_CSET_a_2_z                       = "abcdefghijklmnopqrstuvwxyz"    ! macro
    const GDK_TYPE_COLORSPACE                = (gdk_colorspace_get_type())    ! macro
    const GDK_KEY_Xabovedot                  = 0x1001e8a    ! macro
    const g_atomic_int_compare_and_exchange  = (g_atomic_int_compare_and_exchange((gint*)(atomic),(oldval),(newval)))    ! macro
    const G_FILE_ATTRIBUTE_TIME_MODIFIED_USEC = "time::modified-usec"    ! macro
    const GLIB_DEPRECATED_IN_2_32            = GLIB_DEPRECATED    ! macro
    const GDK_KEY_ecircumflex                =  0x0ea    ! macro
    const GDK_TYPE_PIXBUF_SIMPLE_ANIM        = (gdk_pixbuf_simple_anim_get_type())    ! macro
    const GTK_TYPE_ACTIONABLE                = (gtk_actionable_get_type())    ! macro
    const G_BIG_ENDIAN                       = 4321    ! macro
    const GLIB_DEPRECATED_IN_2_34            =  GLIB_DEPRECATED    ! macro
    const GDK_KEY_Cyrillic_schwa             =  0x10004d9    ! macro
    const PANGO_IS_FONT                      = (G_TYPE_CHECK_INSTANCE_TYPE((object),PANGO_TYPE_FONT))    ! macro
    const GDK_KEY_braille_dots_678           = 0x10028e0    ! macro
    const GDK_KEY_onethird                   =  0xab0    ! macro
    const GTK_SCALE_BUTTON_CLASS             = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_SCALE_BUTTON,GtkScaleButtonClass))    ! macro
    const GTK_IS_RADIO_MENU_ITEM_CLASS       = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_RADIO_MENU_ITEM))    ! macro
    const G_TYPE_SOCKET_CLIENT_EVENT         = (g_socket_client_event_get_type())    ! macro
    const G_APPLICATION                      = (G_TYPE_CHECK_INSTANCE_CAST((inst),G_TYPE_APPLICATION,GApplication))    ! macro
    const GDK_KEY_ISO_Set_Margin_Right       = 0xfe28    ! macro
    const GTK_FONT_CHOOSER_DIALOG_GET_CLASS  = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_FONT_CHOOSER_DIALOG,GtkFontChooserDialogClass))    ! macro
    const GDK_KEY_onequarter                 = 0x0bc    ! macro
    const GTK_SEPARATOR_CLASS                = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_SEPARATOR,GtkSeparatorClass))    ! macro
    const PANGO_TYPE_STYLE                   = (pango_style_get_type())    ! macro
    const GLIB_VERSION_PREV_STABLE           = (G_ENCODE_VERSION(GLIB_MAJOR_VERSION,GLIB_MINOR_VERSION-2))    ! macro
    const G_TYPE_ERROR                       = (g_error_get_type())    ! macro
    const GDK_KEY_Thai_lu                    = 0xdc6    ! macro
    const G_TYPE_SIMPLE_ACTION               = (g_simple_action_get_type())    ! macro
    const G_TYPE_INPUT_STREAM                = (g_input_stream_get_type())    ! macro
    const GTK_PRINT_SETTINGS_SCALE           = "scale"    ! macro
    const PANGO_FONT_FACE                    = (G_TYPE_CHECK_INSTANCE_CAST((object),PANGO_TYPE_FONT_FACE,PangoFontFace))    ! macro
    const PANGO_TYPE_FONT_FACE               = (pango_font_face_get_type())    ! macro
    const GDK_KEY_Next                       = 0xff56    ! macro
    const GTK_STYLE_CLASS_LEFT               = "left"    ! macro
    const GTK_RC_STYLE_CLASS                 = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_RC_STYLE,GtkRcStyleClass))    ! macro
    const GDK_KEY_braille_dots_24578         = 0x10028da    ! macro
    const GDK_WINDOW                         = (G_TYPE_CHECK_INSTANCE_CAST((object),GDK_TYPE_WINDOW,GdkWindow))    ! macro
    const GTK_IS_APP_CHOOSER_BUTTON          = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_APP_CHOOSER_BUTTON))    ! macro
    const GDK_KEY_Arabic_shadda              = 0x5f1    ! macro
    const GDK_KEY_Away                       =  0x1008ff8d    ! macro
    const PANGO_TYPE_LAYOUT_LINE             = (pango_layout_line_get_type())    ! macro
    const GTK_IS_LABEL                       = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_LABEL))    ! macro
    const G_INITIALLY_UNOWNED                = (G_TYPE_CHECK_INSTANCE_CAST((object),G_TYPE_INITIALLY_UNOWNED,GInitiallyUnowned))    ! macro
    const G_TYPE_SOCKET_ADDRESS              = (g_socket_address_get_type())    ! macro
    const G_FILE_ATTRIBUTE_TIME_CREATED      = "time::created"    ! macro
    const GTK_PRINT_SETTINGS_PRINTER         = "printer"    ! macro
    const GDK_TYPE_DISPLAY_MANAGER           = (gdk_display_manager_get_type())    ! macro
    const GDK_KEY_Thai_sosua                 = 0xdca    ! macro
    const GTK_IS_FONT_SELECTION_DIALOG_CLASS = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_FONT_SELECTION_DIALOG))    ! macro
    const GDK_KEY_MouseKeys_Accel_Enable     = 0xfe77    ! macro
    const GDK_KEY_3270_FieldMark             =  0xfd02    ! macro
    const GDK_KEY_Hstroke                    =  0x2a1    ! macro
    const GDK_KEY_Arabic_noon_ghunna         =  0x10006ba    ! macro
    const GTK_IS_MENU_BAR                    = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_MENU_BAR))    ! macro
    const G_SOCKET_ADDRESS_ENUMERATOR        = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_SOCKET_ADDRESS_ENUMERATOR,GSocketAddressEnumerator))    ! macro
    const GTK_STOCK_HARDDISK                 = "gtk-harddisk"    ! macro
    const cairo_copy                         = cairo_copy_DEPRECATED_BY_cairo_create_AND_MANY_INDIVIDUAL_FUNCTIONS    ! macro
    const G_SIGNAL_TYPE_STATIC_SCOPE         = (G_TYPE_FLAG_RESERVED_ID_BIT)    ! macro
    const GTK_BOX_CLASS                      = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_BOX,GtkBoxClass))    ! macro
    const GDK_KEY_plus                       = 0x02b    ! macro
    const GDK_KEY_Ocircumflexhook            =  0x1001ed4    ! macro
    const GDK_KEY_3270_Attn                  =  0xfd0e    ! macro
    const GDK_KEY_ohorn                      =  0x10001a1    ! macro
    const GDK_KEY_Tab                        =  0xff09    ! macro
    const GTK_CONTAINER                      = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_CONTAINER,GtkContainer))    ! macro
    const GDK_KEY_Ihook                      = 0x1001ec8    ! macro
    const G_FILE_ATTRIBUTE_FILESYSTEM_TYPE   = "filesystem::type"    ! macro
    const GDK_KEY_telephone                  = 0xaf9    ! macro
    const GDK_KEY_Greek_omicron              =  0x7ef    ! macro
    const GDK_KEY_OpenURL                    =  0x1008ff38    ! macro
    const GDK_KEY_Ooblique                   =  0x0d8    ! macro
    const G_NETWORK_MONITOR                  = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_NETWORK_MONITOR,GNetworkMonitor))    ! macro
    const GDK_KEY_ISO_Enter                  = 0xfe34    ! macro
    const GTK_IS_APPLICATION_WINDOW_CLASS    = (G_TYPE_CHECK_CLASS_TYPE((class),GTK_TYPE_APPLICATION_WINDOW))    ! macro
    const GDK_SELECTION_TYPE_WINDOW          = _GDK_MAKE_ATOM(33)    ! macro
    const GDK_KEY_ibelowdot                  = 0x1001ecb    ! macro
    const GDK_KEY_hebrew_samekh              =  0xcf1    ! macro
    const GDK_TYPE_SCREEN                    = (gdk_screen_get_type())    ! macro
    const GDK_KEY_hebrew_zayin               = 0xce6    ! macro
    const _G_TYPE_CHI                        = (g_type_check_instance((GTypeInstance*)ip))    ! macro
    const GDK_KEY_Odoubleacute               = 0x1d5    ! macro
    const G_PARAM_SPEC_UINT                  = (G_TYPE_CHECK_INSTANCE_CAST((pspec),G_TYPE_PARAM_UINT,GParamSpecUInt))    ! macro
    const ATK_STATE_SET_CLASS                = (G_TYPE_CHECK_CLASS_CAST((klass),ATK_TYPE_STATE_SET,AtkStateSetClass))    ! macro
    const PANGO_TYPE_FONTSET                 = (pango_fontset_get_type())    ! macro
    const G_TYPE_PARAM_CHAR                  = (g_param_spec_types[0])    ! macro
    const GDK_KEY_braille_dots_124567        = 0x100287b    ! macro
    const GTK_IS_SEARCH_ENTRY                = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_SEARCH_ENTRY))    ! macro
    const G_FILE_ERROR                       = g_file_error_quark()    ! macro
    const GDK_KEY_braille_dots_124568        = 0x10028bb    ! macro
    const G_LOADABLE_ICON                    = (G_TYPE_CHECK_INSTANCE_CAST((obj),G_TYPE_LOADABLE_ICON,GLoadableIcon))    ! macro
    const G_IO_IS_MODULE_CLASS               = (G_TYPE_CHECK_CLASS_TYPE((k),G_IO_TYPE_MODULE))    ! macro
    const G_TYPE_ASK_PASSWORD_FLAGS          = (g_ask_password_flags_get_type())    ! macro
    const GDK_SELECTION_TYPE_INTEGER         = _GDK_MAKE_ATOM(19)    ! macro
    const GTK_IS_ACCESSIBLE                  = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_ACCESSIBLE))    ! macro
    const GDK_KEY_braille_dots_1245678       = 0x10028fb    ! macro
    const GDK_BUTTON_MIDDLE                  = (2)    ! macro
    const PANGO_TYPE_LANGUAGE                = (pango_language_get_type())    ! macro
    const GTK_TREE_DRAG_DEST                 = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_TREE_DRAG_DEST,GtkTreeDragDest))    ! macro
    const G_TYPE_DBUS_OBJECT                 = (g_dbus_object_get_type())    ! macro
    const GDK_KEY_Greek_LAMDA                = 0x7cb    ! macro
    const GDK_KEY_3270_CursorBlink           =  0xfd0f    ! macro
    const GTK_TYPE_SEARCH_ENTRY              = (gtk_search_entry_get_type())    ! macro
    const _G_TYPE_CIC                        = ((ct*)g_type_check_instance_cast((GTypeInstance*)ip,gt))    ! macro
    const GTK_RC_STYLE                       = (G_TYPE_CHECK_INSTANCE_CAST((object),GTK_TYPE_RC_STYLE,GtkRcStyle))    ! macro
    const GTK_STOCK_ORIENTATION_REVERSE_LANDSCAPE = "gtk-orientation-reverse-landscape"    ! macro
    const G_ACTION_MAP_GET_IFACE             = (G_TYPE_INSTANCE_GET_INTERFACE((inst),G_TYPE_ACTION_MAP,GActionMapInterface))    ! macro
    const GTK_STOCK_MEDIA_PLAY               = "gtk-media-play"    ! macro
    const GTK_SPIN_BUTTON                    = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_SPIN_BUTTON,GtkSpinButton))    ! macro
    const GDK_KEY_Greek_tau                  = 0x7f4    ! macro
    const GTK_IS_ENTRY_COMPLETION            = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_ENTRY_COMPLETION))    ! macro
    const GDK_KEY_Ucircumflex                = 0x0db    ! macro
    const GDK_KEY_LogOff                     =  0x1008ff61    ! macro
    const GTK_IS_TOOL_ITEM_CLASS             = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_TOOL_ITEM))    ! macro
    const GTK_IS_DRAWING_AREA_CLASS          = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_DRAWING_AREA))    ! macro
    const GDK_KEY_rightcaret                 = 0xba6    ! macro
    const _G_TYPE_CHV                        = (g_type_check_value((GValue*)vl))    ! macro
    const G_IS_PARAM_SPEC                    = (G_TYPE_CHECK_INSTANCE_TYPE((pspec),G_TYPE_PARAM))    ! macro
    const G_IS_FILE_INPUT_STREAM_CLASS       = (G_TYPE_CHECK_CLASS_TYPE((k),G_TYPE_FILE_INPUT_STREAM))    ! macro
    const GTK_WIDGET_CLASS                   = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_WIDGET,GtkWidgetClass))    ! macro
    const GTK_IS_IM_CONTEXT_SIMPLE           = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_IM_CONTEXT_SIMPLE))    ! macro
    const GDK_KEY_braille_dots_345678        = 0x10028fc    ! macro
    const GDK_KEY_Sinh_aee                   =  0x1000d88    ! macro
    const GDK_KEY_Odiaeresis                 =  0x0d6    ! macro
    const GDK_KEY_Arabic_noon                =  0x5e6    ! macro
    const GTK_IS_CELL_RENDERER_PROGRESS_CLASS = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_CELL_RENDERER_PROGRESS))    ! macro
    const GDK_KEY_braille_dots_124578        = 0x10028db    ! macro
    const ATK_REGISTRY                       = (G_TYPE_CHECK_INSTANCE_CAST((obj),ATK_TYPE_REGISTRY,AtkRegistry))    ! macro
    const ATK_IMPLEMENTOR                    = G_TYPE_CHECK_INSTANCE_CAST((obj),ATK_TYPE_IMPLEMENTOR,AtkImplementor)    ! macro
    const G_INITABLE                         = (G_TYPE_CHECK_INSTANCE_CAST((obj),G_TYPE_INITABLE,GInitable))    ! macro
    const G_PARAM_MASK                       = (0x000000ff)    ! macro
    const GDK_KEY_Serbian_DZE                = 0x6bf    ! macro
    const PANGO_SCALE                        =  1024    ! macro
    const G_FILE_ATTRIBUTE_MOUNTABLE_CAN_START_DEGRADED = "mountable::can-start-degraded"    ! macro
    const ATK_DEFINE_TYPE                    = ATK_DEFINE_TYPE_EXTENDED(TN,t_n,T_P,0,{})    ! macro
    const GDK_KEY_Obarred                    = 0x100019f    ! macro
    const GTK_TYPE_TREE_DRAG_SOURCE          = (gtk_tree_drag_source_get_type())    ! macro
    const GTK_TYPE_DRAG_RESULT               = (gtk_drag_result_get_type())    ! macro
    const GTK_STYLE_CLASS_DND                = "dnd"    ! macro
    const GTK_TYPE_LOCK_BUTTON               = (gtk_lock_button_get_type())    ! macro
    const GDK_KEY_Georgian_ban               = 0x10010d1    ! macro
    const G_FILE_ATTRIBUTE_TIME_CHANGED_USEC = "time::changed-usec"    ! macro
    const GDK_KEY_kana_middledot             = 0x4a5    ! macro
    const G_IS_ASYNC_RESULT                  = (G_TYPE_CHECK_INSTANCE_TYPE((obj),G_TYPE_ASYNC_RESULT))    ! macro
    const GDK_KEY_Sinh_ai2                   = 0x1000ddb    ! macro
    const GTK_FONT_SELECTION_DIALOG_CLASS    = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_FONT_SELECTION_DIALOG,GtkFontSelectionDialogClass))    ! macro
    const _G_TYPE_CIT                        = (g_type_check_instance_is_a((GTypeInstance*)ip,gt))    ! macro
    const G_INET_SOCKET_ADDRESS_GET_CLASS    = (G_TYPE_INSTANCE_GET_CLASS((o),G_TYPE_INET_SOCKET_ADDRESS,GInetSocketAddressClass))    ! macro
    const G_TYPE_POLLABLE_INPUT_STREAM       = (g_pollable_input_stream_get_type())    ! macro
    const G_FILE_ATTRIBUTE_MOUNTABLE_CAN_UNMOUNT = "mountable::can-unmount"    ! macro
    const GTK_SIZE_GROUP_GET_CLASS           = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_SIZE_GROUP,GtkSizeGroupClass))    ! macro
    const GTK_CELL_RENDERER_CLASS            = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_CELL_RENDERER,GtkCellRendererClass))    ! macro
    const GTK_IS_CSS_PROVIDER                = (G_TYPE_CHECK_INSTANCE_TYPE((o),GTK_TYPE_CSS_PROVIDER))    ! macro
    const GDK_KEY_Hangul_Tieut               = 0xebc    ! macro
    const GTK_IS_TEXT_VIEW_CLASS             = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_TEXT_VIEW))    ! macro
    const GDK_KEY_Arabic_tatweel             = 0x5e0    ! macro
    const g_slice_new0                       = ((type*)g_slice_alloc0(sizeof(type)))    ! macro
    const GTK_STYLE_CLASS_RIGHT              = "right"    ! macro
    const g_atomic_pointer_or                = (g_atomic_pointer_or((atomic),(gsize)(val)))    ! macro
    const ATK_PLUG                           = (G_TYPE_CHECK_INSTANCE_CAST((obj),ATK_TYPE_PLUG,AtkPlug))    ! macro
    const GDK_KEY_vertbar                    = 0x9f8    ! macro
    const GDK_KEY_Greek_THETA                =  0x7c8    ! macro
    const GUINT64_SWAP_LE_BE                 = (GUINT64_SWAP_LE_BE_CONSTANT(val))    ! macro
    const G_HOOK_IS_VALID                    = (G_HOOK(hook)->hook_id!=0&&(G_HOOK_FLAGS(hook)&G_HOOK_FLAG_ACTIVE))    ! macro
    const GTK_IS_PROGRESS_BAR                = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_PROGRESS_BAR))    ! macro
    const GTK_TYPE_ALIGN                     = (gtk_align_get_type())    ! macro
    const GDK_KEY_ISO_Group_Lock             = 0xfe07    ! macro
    const GTK_TYPE_GRID                      = (gtk_grid_get_type())    ! macro
    const GDK_KEY_dead_belowring             = 0xfe67    ! macro
    const G_TYPE_SETTINGS_BIND_FLAGS         = (g_settings_bind_flags_get_type())    ! macro
    const GTK_TYPE_CSS_PROVIDER              = (gtk_css_provider_get_type())    ! macro
    const GDK_KEY_Uhornhook                  = 0x1001eec    ! macro
    const GDK_KEY_Greek_iota                 =  0x7e9    ! macro
    const G_IS_BUFFERED_INPUT_STREAM_CLASS   = (G_TYPE_CHECK_CLASS_TYPE((k),G_TYPE_BUFFERED_INPUT_STREAM))    ! macro
    const G_IS_TLS_FILE_DATABASE             = (G_TYPE_CHECK_INSTANCE_TYPE((inst),G_TYPE_TLS_FILE_DATABASE))    ! macro
    const GDK_KEY_Arabic_semicolon           = 0x5bb    ! macro
    const GDK_KEY_UWB                        =  0x1008ff96    ! macro
    const GTK_FILE_CHOOSER_DIALOG            = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_FILE_CHOOSER_DIALOG,GtkFileChooserDialog))    ! macro
    const G_SETTINGS_GET_CLASS               = (G_TYPE_INSTANCE_GET_CLASS((inst),G_TYPE_SETTINGS,GSettingsClass))    ! macro
    const GDK_KEY_Hangul_J_YeorinHieuh       = 0xefa    ! macro
    const G_PROXY_ADDRESS_GET_CLASS          = (G_TYPE_INSTANCE_GET_CLASS((o),G_TYPE_PROXY_ADDRESS,GProxyAddressClass))    ! macro
    const CAIRO_MIME_TYPE_JPEG               = "image/jpeg"    ! macro
    const GDK_KEY_Pointer_Left               = 0xfee0    ! macro
    const GTK_TYPE_CELL_RENDERER_TOGGLE      = (gtk_cell_renderer_toggle_get_type())    ! macro
    const GDK_KEY_braille_dots_2345          = 0x100281e    ! macro
    const GDK_KEY_kana_A                     =  0x4b1    ! macro
    const GTK_TYPE_PROGRESS_BAR              = (gtk_progress_bar_get_type())    ! macro
    const GDK_TYPE_INPUT_SOURCE              = (gdk_input_source_get_type())    ! macro
    const G_NODE_IS_LEAF                     = (((GNode*)(node))->children==NULL)    ! macro
    const g_test_trap_assert_stdout          = g_test_trap_assertions(G_LOG_DOMAIN,__FILE__,__LINE__,G_STRFUNC,2,soutpattern)    ! macro
    const GDK_KEY_braille_dots_2346          = 0x100282e    ! macro
    const G_KEY_FILE_DESKTOP_GROUP           = "Desktop Entry"    ! macro
    const GTK_ABOUT_DIALOG                   = (G_TYPE_CHECK_INSTANCE_CAST((object),GTK_TYPE_ABOUT_DIALOG,GtkAboutDialog))    ! macro
    const G_TYPE_SIMPLE_ACTION_GROUP         = (g_simple_action_group_get_type())    ! macro
    const GDK_KEY_Hangul_RieulYeorinHieuh    = 0xeef    ! macro
    const GDK_KEY_braille_dots_2347          =  0x100284e    ! macro
    const GDK_KEY_Switch_VT_1                =  0x1008fe01    ! macro
    const GDK_KEY_braille_dots_2348          =  0x100288e    ! macro
    const G_IS_MENU_MODEL                    = (G_TYPE_CHECK_INSTANCE_TYPE((inst),G_TYPE_MENU_MODEL))    ! macro
    const GDK_KEY_Switch_VT_2                = 0x1008fe02    ! macro
    const G_MININT8                          = ((gint8)0x80)    ! macro
    const GDK_KEY_kana_E                     = 0x4b4    ! macro
    const GDK_KEY_Switch_VT_3                =  0x1008fe03    ! macro
    const GTK_IS_HBOX                        = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_HBOX))    ! macro
    const GDK_KEY_Ecircumflex                = 0x0ca    ! macro
    const GDK_KEY_Switch_VT_4                =  0x1008fe04    ! macro
    const GTK_IS_CELL_VIEW_CLASS             = (G_TYPE_CHECK_CLASS_TYPE((vtable),GTK_TYPE_CELL_VIEW))    ! macro
    const GDK_KEY_Switch_VT_5                = 0x1008fe05    ! macro
    const GTK_COLOR_CHOOSER_DIALOG           = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_COLOR_CHOOSER_DIALOG,GtkColorChooserDialog))    ! macro
    const GDK_KEY_Hangul_SsangPieub          = 0xeb3    ! macro
    const GDK_KEY_Switch_VT_6                =  0x1008fe06    ! macro
    const GDK_KEY_Cyrillic_u_macron          =  0x10004ef    ! macro
    const GTK_IS_APP_CHOOSER_BUTTON_CLASS    = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_APP_CHOOSER_BUTTON))    ! macro
    const GDK_KEY_kana_I                     = 0x4b2    ! macro
    const GDK_KEY_Switch_VT_7                =  0x1008fe07    ! macro
    const GDK_KEY_Switch_VT_8                =  0x1008fe08    ! macro
    const GTK_CELL_EDITABLE                  = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_CELL_EDITABLE,GtkCellEditable))    ! macro
    const G_TLS_CONNECTION                   = (G_TYPE_CHECK_INSTANCE_CAST((inst),G_TYPE_TLS_CONNECTION,GTlsConnection))    ! macro
    const GDK_KEY_Switch_VT_9                = 0x1008fe09    ! macro
    const GTK_VOLUME_BUTTON_GET_CLASS        = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_VOLUME_BUTTON,GtkVolumeButtonClass))    ! macro
    const GTK_COLOR_CHOOSER_WIDGET_GET_CLASS = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_COLOR_CHOOSER_WIDGET,GtkColorChooserWidgetClass))    ! macro
    const GTK_STOCK_REVERT_TO_SAVED          = "gtk-revert-to-saved"    ! macro
    const GDK_KEY_Kana_Lock                  = 0xff2d    ! macro
    const GTK_TYPE_ENTRY_ICON_POSITION       = (gtk_entry_icon_position_get_type())    ! macro
    const GTK_EXPANDER_CLASS                 = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_EXPANDER,GtkExpanderClass))    ! macro
    const g_node_first_child                 = ((node)?((GNode*)(node))->children:NULL)    ! macro
    const G_CCLOSURE_SWAP_DATA               = (((GClosure*)(cclosure))->derivative_flag)    ! macro
    const GDK_KEY_Travel                     = 0x1008ff82    ! macro
    const GDK_KEY_kana_N                     =  0x4dd    ! macro
    const GDK_KEY_ecircumflexacute           =  0x1001ebf    ! macro
    const GDK_KEY_kana_O                     =  0x4b5    ! macro
    const GTK_TYPE_RC_STYLE                  = (gtk_rc_style_get_type())    ! macro
    const GTK_TABLE_CLASS                    = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_TABLE,GtkTableClass))    ! macro
    const G_PROXY_GET_IFACE                  = (G_TYPE_INSTANCE_GET_INTERFACE((obj),G_TYPE_PROXY,GProxyInterface))    ! macro
    const GTK_CHECK_BUTTON_CLASS             = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_CHECK_BUTTON,GtkCheckButtonClass))    ! macro
    const GDK_KEY_leftcaret                  = 0xba3    ! macro
    const GTK_MENU_CLASS                     = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_MENU,GtkMenuClass))    ! macro
    const GTK_ACCEL_LABEL                    = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_ACCEL_LABEL,GtkAccelLabel))    ! macro
    const GDK_KEY_braille_dots_2356          = 0x1002836    ! macro
    const GDK_KEY_dead_belowdiaeresis        =  0xfe6c    ! macro
    const G_IS_ZLIB_COMPRESSOR_CLASS         = (G_TYPE_CHECK_CLASS_TYPE((k),G_TYPE_ZLIB_COMPRESSOR))    ! macro
    const G_TYPE_APPLICATION                 = (g_application_get_type())    ! macro
    const GDK_KEY_Cyrillic_SHA               = 0x6fb    ! macro
    const GDK_KEY_braille_dots_2357          =  0x1002856    ! macro
    const GTK_STOCK_CUT                      = "gtk-cut"    ! macro
    const GDK_KEY_braille_dots_2358          = 0x1002896    ! macro
    const G_TYPE_FILE_COPY_FLAGS             = (g_file_copy_flags_get_type())    ! macro
    const G_N_ELEMENTS                       = (sizeof(arr)/sizeof((arr)[0]))    ! macro
    const GDK_TYPE_RECTANGLE                 = (gdk_rectangle_get_type())    ! macro
    const GDK_KEY_filledrighttribullet       = 0xadd    ! macro
    const GDK_KEY_kana_U                     =  0x4b3    ! macro
    const GDK_KEY_Thai_lekhok                =  0xdf6    ! macro
    const GDK_KEY_Thai_leksong               =  0xdf2    ! macro
    const GTK_TYPE_BUILDER_ERROR             = (gtk_builder_error_get_type())    ! macro
    const GTK_PRINT_SETTINGS_WIN32_DRIVER_EXTRA = "win32-driver-extra"    ! macro
    const GDK_KEY_onefifth                   = 0xab2    ! macro
    const G_VALUE_HOLDS_STRING               = (G_TYPE_CHECK_VALUE_TYPE((value),G_TYPE_STRING))    ! macro
    const G_IS_DATA_OUTPUT_STREAM_CLASS      = (G_TYPE_CHECK_CLASS_TYPE((k),G_TYPE_DATA_OUTPUT_STREAM))    ! macro
    const GDK_KEY_Arabic_dad                 = 0x5d6    ! macro
    const GDK_KEY_Cyrillic_o_bar             =  0x10004e9    ! macro
    const G_GUINT16_FORMAT                   = "hu"    ! macro
    const ATK_IS_STATE_SET                   = (G_TYPE_CHECK_INSTANCE_TYPE((obj),ATK_TYPE_STATE_SET))    ! macro
    const G_TYPE_UCHAR                       = G_TYPE_MAKE_FUNDAMENTAL(4)    ! macro
    const G_RESOLVER_GET_CLASS               = (G_TYPE_INSTANCE_GET_CLASS((o),G_TYPE_RESOLVER,GResolverClass))    ! macro
    const g_node_prepend_data                = g_node_prepend((parent),g_node_new(data))    ! macro
    const GTK_RECENT_CHOOSER_ERROR           = (gtk_recent_chooser_error_quark())    ! macro
    const GTK_TYPE_TREE_MODEL                = (gtk_tree_model_get_type())    ! macro
    const GTK_ABOUT_DIALOG_CLASS             = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_ABOUT_DIALOG,GtkAboutDialogClass))    ! macro
    const GDK_KEY_SelectButton               = 0x1008ffa0    ! macro
    const GTK_HSCROLLBAR                     = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_HSCROLLBAR,GtkHScrollbar))    ! macro
    const G_TYPE_FILE_IO_STREAM              = (g_file_io_stream_get_type())    ! macro
    const GDK_KEY_Georgian_shin              = 0x10010e8    ! macro
    const GDK_KEY_Hankaku                    =  0xff29    ! macro
    const gtk_micro_version                  =  gtk_get_micro_version()    ! macro
    const ATK_DEFINE_TYPE_EXTENDED           = _ATK_DEFINE_TYPE_EXTENDED_BEGIN(TN,t_n,T_P,_f_){_C_;}_ATK_DEFINE_TYPE_EXTENDED_END()    ! macro
    const GDK_KEY_Ohornhook                  = 0x1001ede    ! macro
    const G_TYPE_IS_FUNDAMENTAL              = ((type)<=G_TYPE_FUNDAMENTAL_MAX)    ! macro
    const G_VALUE_HOLDS_BOOLEAN              = (G_TYPE_CHECK_VALUE_TYPE((value),G_TYPE_BOOLEAN))    ! macro
    const GDK_KEY_Armenian_PYUR              = 0x1000553    ! macro
    const GDK_KEY_braille_dots_2367          =  0x1002866    ! macro
    const GTK_APP_CHOOSER_WIDGET_CLASS       = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_APP_CHOOSER_WIDGET,GtkAppChooserWidgetClass))    ! macro
    const GDK_KEY_Arabic_dal                 = 0x5cf    ! macro
    const GDK_KEY_kana_a                     =  0x4a7    ! macro
    const G_LN10                             =  2.3025850929940456840179914546843642076011014886288    ! macro
    const GDK_KEY_VendorHome                 =  0x1008ff34    ! macro
    const G_TYPE_INITIALLY_UNOWNED           = (g_initially_unowned_get_type())    ! macro
    const GDK_KEY_Greek_lamda                = 0x7eb    ! macro
    const GDK_KEY_braille_dots_2368          =  0x10028a6    ! macro
    const g_signal_handlers_block_by_func    =  g_signal_handlers_block_matched((instance),(GSignalMatchType)(G_SIGNAL_MATCH_FUNC|G_SIGNAL_MATCH_DATA),0,0,NULL,(func),(data))    ! macro
    const GDK_PARENT_RELATIVE                = 1L    ! macro
    const GTK_SEARCH_ENTRY                   = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_SEARCH_ENTRY,GtkSearchEntry))    ! macro
    const G_PARAM_SPEC_ENUM                  = (G_TYPE_CHECK_INSTANCE_CAST((pspec),G_TYPE_PARAM_ENUM,GParamSpecEnum))    ! macro
    const GTK_TOGGLE_TOOL_BUTTON_GET_CLASS   = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_TOGGLE_TOOL_BUTTON,GtkToggleToolButtonClass))    ! macro
    const GDK_KEY_ClearGrab                  = 0x1008fe21    ! macro
    const GDK_KEY_kana_e                     =  0x4aa    ! macro
    const GDK_KEY_Thai_ru                    =  0xdc4    ! macro
    const GTK_COLOR_BUTTON_CLASS             = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_COLOR_BUTTON,GtkColorButtonClass))    ! macro
    const GDK_KEY_aring                      = 0x0e5    ! macro
    const GTK_TYPE_STYLE_CONTEXT             = (gtk_style_context_get_type())    ! macro
    const GTK_FILE_CHOOSER_WIDGET            = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_FILE_CHOOSER_WIDGET,GtkFileChooserWidget))    ! macro
    const GDK_KEY_kana_i                     = 0x4a8    ! macro
    const GDK_KEY_Thai_maichattawa           =  0xdeb    ! macro
    const G_IS_DBUS_OBJECT_SKELETON_CLASS    = (G_TYPE_CHECK_CLASS_TYPE((k),G_TYPE_DBUS_OBJECT_SKELETON))    ! macro
    const GDK_KEY_Thai_saraii                = 0xdd5    ! macro
    const GDK_KEY_Sys_Req                    =  0xff15    ! macro
    const G_SIMPLE_ACTION_GROUP_GET_CLASS    = (G_TYPE_INSTANCE_GET_CLASS((inst),G_TYPE_SIMPLE_ACTION_GROUP,GSimpleActionGroupClass))    ! macro
    const GTK_FILE_CHOOSER_DIALOG_CLASS      = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_FILE_CHOOSER_DIALOG,GtkFileChooserDialogClass))    ! macro
    const PANGO_CAIRO_FONT                   = (G_TYPE_CHECK_INSTANCE_CAST((object),PANGO_TYPE_CAIRO_FONT,PangoCairoFont))    ! macro
    const GDK_KEY_notequal                   = 0x8bd    ! macro
    const PANGO_TYPE_CAIRO_FONT              = (pango_cairo_font_get_type())    ! macro
    const GDK_KEY_Fabovedot                  = 0x1001e1e    ! macro
    const G_FILE_ATTRIBUTE_DOS_IS_SYSTEM     = "dos::is-system"    ! macro
    const cairo_init_clip                    = cairo_init_clip_REPLACED_BY_cairo_reset_clip    ! macro
    const GDK_THREADS_ENTER                  =  gdk_threads_enter()    ! macro
    const GDK_KEY_etilde                     = 0x1001ebd    ! macro
    const G_IS_TCP_CONNECTION_CLASS          = (G_TYPE_CHECK_CLASS_TYPE((class),G_TYPE_TCP_CONNECTION))    ! macro
    const ATK_IS_STATE_SET_CLASS             = (G_TYPE_CHECK_CLASS_TYPE((klass),ATK_TYPE_STATE_SET))    ! macro
    const G_IS_SIMPLE_ACTION_GROUP_CLASS     = (G_TYPE_CHECK_CLASS_TYPE((class),G_TYPE_SIMPLE_ACTION_GROUP))    ! macro
    const G_VFS_EXTENSION_POINT_NAME         = "gio-vfs"    ! macro
    const GTK_TYPE_ENTRY_COMPLETION          = (gtk_entry_completion_get_type())    ! macro
    const G_KEY_FILE_DESKTOP_TYPE_APPLICATION = "Application"    ! macro
    const G_TYPE_BUFFERED_INPUT_STREAM       = (g_buffered_input_stream_get_type())    ! macro
    const GDK_KEY_braille_dots_14567         = 0x1002879    ! macro
    const GDK_KEY_Armenian_verjaket          =  0x1000589    ! macro
    const GDK_KEY_kana_o                     =  0x4ab    ! macro
    const G_PARAM_SPEC_INT64                 = (G_TYPE_CHECK_INSTANCE_CAST((pspec),G_TYPE_PARAM_INT64,GParamSpecInt64))    ! macro
    const GTK_COLOR_BUTTON_GET_CLASS         = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_COLOR_BUTTON,GtkColorButtonClass))    ! macro
    const G_PARAM_SPEC_OVERRIDE              = (G_TYPE_CHECK_INSTANCE_CAST((pspec),G_TYPE_PARAM_OVERRIDE,GParamSpecOverride))    ! macro
    const GDK_KEY_braille_dots_14568         = 0x10028b9    ! macro
    const GTK_TYPE_CELL_RENDERER_ACCEL_MODE  = (gtk_cell_renderer_accel_mode_get_type())    ! macro
    const CAIRO_VERSION_STRINGIZE            = CAIRO_VERSION_STRINGIZE_(major,minor,micro)    ! macro
    const GTK_STOCK_GOTO_TOP                 = "gtk-goto-top"    ! macro
    const GDK_KEY_braille_dots_2378          = 0x10028c6    ! macro
    const GTK_COLOR_CHOOSER_WIDGET           = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_COLOR_CHOOSER_WIDGET,GtkColorChooserWidget))    ! macro
    const GDK_KEY_dead_belowcircumflex       = 0xfe69    ! macro
    const GDK_KEY_omacron                    =  0x3f2    ! macro
    const GDK_IS_WINDOW                      = (G_TYPE_CHECK_INSTANCE_TYPE((object),GDK_TYPE_WINDOW))    ! macro
    const G_IS_TLS_CONNECTION_CLASS          = (G_TYPE_CHECK_CLASS_TYPE((class),G_TYPE_TLS_CONNECTION))    ! macro
    const GTK_HBUTTON_BOX_GET_CLASS          = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_HBUTTON_BOX,GtkHButtonBoxClass))    ! macro
    const G_TYPE_DBUS_SIGNAL_FLAGS           = (g_dbus_signal_flags_get_type())    ! macro
    const GDK_KEY_Greek_BETA                 = 0x7c2    ! macro
    const GDK_KEY_botleftsqbracket           =  0x8a8    ! macro
    const g_get_home_dir                     =  g_get_home_dir_utf8    ! macro
    const GTK_TABLE_GET_CLASS                = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_TABLE,GtkTableClass))    ! macro
    const GDK_KEY_kana_u                     = 0x4a9    ! macro
    const GTK_MAX_COMPOSE_LEN                =  7    ! macro
    const GDK_KEY_PowerDown                  =  0x1008ff21    ! macro
    const G_GINT16_MODIFIER                  = "h"    ! macro
    const GDK_KEY_Arabic_tteh                = 0x1000679    ! macro
    const GDK_KEY_Insert                     =  0xff63    ! macro
    const GTK_VBOX_CLASS                     = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_VBOX,GtkVBoxClass))    ! macro
    const GDK_KEY_Ccaron                     = 0x1c8    ! macro
    const GDK_KEY_Cyrillic_KA_descender      =  0x100049a    ! macro
    const G_GOFFSET_MODIFIER                 =  G_GINT64_MODIFIER    ! macro
    const GTK_RADIO_TOOL_BUTTON_GET_CLASS    = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_RADIO_TOOL_BUTTON,GtkRadioToolButtonClass))    ! macro
    const GDK_KEY_Greek_theta                = 0x7e8    ! macro
    const GDK_KEY_MonBrightnessUp            =  0x1008ff02    ! macro
    const GDK_KEY_Acircumflexbelowdot        =  0x1001eac    ! macro
    const GTK_PRINT_SETTINGS_NUMBER_UP_LAYOUT = "number-up-layout"    ! macro
    const GTK_TYPE_VBUTTON_BOX               = (gtk_vbutton_box_get_type())    ! macro
    const GTK_TYPE_HSCALE                    = (gtk_hscale_get_type())    ! macro
    const G_DBUS_OBJECT_MANAGER_SERVER       = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_DBUS_OBJECT_MANAGER_SERVER,GDBusObjectManagerServer))    ! macro
    const G_SOCKET_CLIENT_CLASS              = (G_TYPE_CHECK_CLASS_CAST((class),G_TYPE_SOCKET_CLIENT,GSocketClientClass))    ! macro
    const GTK_CSS_PROVIDER                   = (G_TYPE_CHECK_INSTANCE_CAST((o),GTK_TYPE_CSS_PROVIDER,GtkCssProvider))    ! macro
    const GTK_STOCK_PAGE_SETUP               = "gtk-page-setup"    ! macro
    const GTK_MENU_SHELL_GET_CLASS           = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_MENU_SHELL,GtkMenuShellClass))    ! macro
    const G_IS_CONVERTER_OUTPUT_STREAM_CLASS = (G_TYPE_CHECK_CLASS_TYPE((k),G_TYPE_CONVERTER_OUTPUT_STREAM))    ! macro
    const GDK_KEY_braille_dots_34678         = 0x10028ec    ! macro
    const GDK_KEY_braille_dots_14578         =  0x10028d9    ! macro
    const GDK_KEY_Caps_Lock                  =  0xffe5    ! macro
    const GLIB_DEPRECATED_IN_2_32_FOR        =  GLIB_DEPRECATED_FOR(f)    ! macro
    const G_KEY_FILE_DESKTOP_KEY_TRY_EXEC    = "TryExec"    ! macro
    const g_main_run                         = g_main_loop_run(loop)    ! macro
    const GDK_KEY_Sinh_tha                   = 0x1000dad    ! macro
    const GTK_IMAGE                          = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_IMAGE,GtkImage))    ! macro
    const GTK_PROGRESS_BAR                   = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_PROGRESS_BAR,GtkProgressBar))    ! macro
    const G_TIME_SPAN_HOUR                   = (G_GINT64_CONSTANT(3600000000))    ! macro
    const GTK_STOCK_LEAVE_FULLSCREEN         = "gtk-leave-fullscreen"    ! macro
    const G_WIN32_DLLMAIN_FOR_DLL_NAME       = static char*dll_name;BOOL WINAPI DllMain(HINSTANCE hinstDLL,DWORD fdwReason,LPVOID lpvReserved){wchar_t wcbfr[1000];char*tem;switch(fdwReason){case DLL_PROCESS_ATTACH:GetModuleFileNameW((HMODULE)hinstDLL,wcbfr,G_N_ELEMENTS(wcbfr));tem=g_utf16_to_utf8(wcbfr,-1,NULL,NULL,NULL);dll_name=g_path_get_basename(tem);g_free(tem);break;}return TRUE;}    ! macro
    const GDK_KEY_fivesubscript              = 0x1002085    ! macro
    const ATK_RELATION_SET_CLASS             = (G_TYPE_CHECK_CLASS_CAST((klass),ATK_TYPE_RELATION_SET,AtkRelationSetClass))    ! macro
    const G_IS_SETTINGS_CLASS                = (G_TYPE_CHECK_CLASS_TYPE((class),G_TYPE_SETTINGS))    ! macro
    const G_FILE_ENUMERATOR_CLASS            = (G_TYPE_CHECK_CLASS_CAST((k),G_TYPE_FILE_ENUMERATOR,GFileEnumeratorClass))    ! macro
    const G_NETWORK_MONITOR_EXTENSION_POINT_NAME = "gio-network-monitor"    ! macro
    const GDK_KEY_filledtribulletdown        = 0xae9    ! macro
    const GTK_PRINT_SETTINGS                 = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_PRINT_SETTINGS,GtkPrintSettings))    ! macro
    const GTK_IS_SEPARATOR                   = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_SEPARATOR))    ! macro
    const GTK_TYPE_ICON_SET                  = (gtk_icon_set_get_type())    ! macro
    const GDK_KEY_Hangul_SunkyeongeumPhieuf  = 0xef4    ! macro
    const G_E                                =  2.7182818284590452353602874713526624977572470937000    ! macro
    const G_TYPE_FUNDAMENTAL_SHIFT           = (2)    ! macro
    const g_io_channel_new_file              = g_io_channel_new_file_utf8    ! macro
    const GDK_TYPE_DISPLAY                   = (gdk_display_get_type())    ! macro
    const GTK_IS_PRINT_OPERATION_CLASS       = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_PRINT_OPERATION))    ! macro
    const GDK_KEY_ISO_Partial_Line_Down      = 0xfe24    ! macro
    const G_IS_INITABLE                      = (G_TYPE_CHECK_INSTANCE_TYPE((obj),G_TYPE_INITABLE))    ! macro
    const GTK_TYPE_TEXT_TAG_TABLE            = (gtk_text_tag_table_get_type())    ! macro
    const ATK_RELATION_SET_GET_CLASS         = (G_TYPE_INSTANCE_GET_CLASS((obj),ATK_TYPE_RELATION_SET,AtkRelationSetClass))    ! macro
    const CLAMP                              = (((x)>(high))?(high):(((x)<(low))?(low):(x)))    ! macro
    const GTK_IS_RC_STYLE                    = (G_TYPE_CHECK_INSTANCE_TYPE((object),GTK_TYPE_RC_STYLE))    ! macro
    const GDK_KEY_Greek_PSI                  = 0x7d8    ! macro
    const GTK_CELL_RENDERER_PROGRESS         = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_CELL_RENDERER_PROGRESS,GtkCellRendererProgress))    ! macro
    const GDK_KEY_otilde                     = 0x0f5    ! macro
    const GDK_KEY_Amacron                    =  0x3c0    ! macro
    const GTK_LINK_BUTTON_CLASS              = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_LINK_BUTTON,GtkLinkButtonClass))    ! macro
    const GTK_IS_LEVEL_BAR_CLASS             = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_LEVEL_BAR))    ! macro
    const GDK_KEY_Thai_wowaen                = 0xdc7    ! macro
    const G_FILE_ATTRIBUTE_MOUNTABLE_CAN_START = "mountable::can-start"    ! macro
    const GDK_IS_PIXBUF_ANIMATION_ITER       = (G_TYPE_CHECK_INSTANCE_TYPE((object),GDK_TYPE_PIXBUF_ANIMATION_ITER))    ! macro
    const G_VARIANT_TYPE                     = (g_variant_type_checked_((type_string)))    ! macro
    const G_STRINGIFY_ARG                    = #contents    ! macro
    const GTK_IS_PANED                       = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_PANED))    ! macro
    const GDK_KEY_SCHWA                      = 0x100018f    ! macro
    const GTK_MENU_BAR_GET_CLASS             = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_MENU_BAR,GtkMenuBarClass))    ! macro
    const GDK_KEY_braille_dots_1235678       = 0x10028f7    ! macro
    const GTK_ACCESSIBLE_CLASS               = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_ACCESSIBLE,GtkAccessibleClass))    ! macro
    const GTK_TYPE_TEXT_VIEW                 = (gtk_text_view_get_type())    ! macro
    const GDK_KEY_Macedonia_kje              = 0x6ac    ! macro
    const GDK_KEY_egrave                     =  0x0e8    ! macro
    const GDK_KEY_AudioMute                  =  0x1008ff12    ! macro
    const GTK_IS_MENU_CLASS                  = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_MENU))    ! macro
    const ATK_IS_RELATION_CLASS              = (G_TYPE_CHECK_CLASS_TYPE((klass),ATK_TYPE_RELATION))    ! macro
    const GDK_KEY_View                       = 0x1008ffa1    ! macro
    const GTK_COMBO_BOX_TEXT_CLASS           = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_COMBO_BOX_TEXT,GtkComboBoxTextClass))    ! macro
    const ATK_TYPE_RELATION                  = (atk_relation_get_type())    ! macro
    const CAIRO_MIME_TYPE_JP2                = "image/jp2"    ! macro
    const GDK_KEY_ocircumflexbelowdot        = 0x1001ed9    ! macro
    const GTK_IS_MENU_ITEM                   = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_MENU_ITEM))    ! macro
    const GDK_KEY_Sinh_ruu2                  = 0x1000df2    ! macro
    const G_IS_INITIALLY_UNOWNED_CLASS       = (G_TYPE_CHECK_CLASS_TYPE((class),G_TYPE_INITIALLY_UNOWNED))    ! macro
    const GDK_KEY_Katakana                   = 0xff26    ! macro
    const GDK_KEY_similarequal               =  0x8c9    ! macro
    const CAIRO_FONT_TYPE_ATSUI              =  CAIRO_FONT_TYPE_QUARTZ    ! macro
    const GDK_KEY_telephonerecorder          =  0xafa    ! macro
    const G_DEFINE_BOXED_TYPE_WITH_CODE      =  _G_DEFINE_BOXED_TYPE_BEGIN(TypeName,type_name,copy_func,free_func){_C_;}_G_DEFINE_TYPE_EXTENDED_END()    ! macro
    const GTK_LEVEL_BAR_OFFSET_LOW           = "low"    ! macro
    const GDK_KEY_cuberoot                   = 0x100221b    ! macro
    const GDK_KEY_braille_dots_134678        =  0x10028ed    ! macro
    const GDK_KEY_Arabic_waw                 =  0x5e8    ! macro
    const GDK_KEY_leftdoublequotemark        =  0xad2    ! macro
    const GTK_TOOLBAR_GET_CLASS              = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_TOOLBAR,GtkToolbarClass))    ! macro
    const GTK_STYLE_CLASS_PANE_SEPARATOR     = "pane-separator"    ! macro
    const GTK_IS_HSCROLLBAR                  = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_HSCROLLBAR))    ! macro
    const G_VALUE_HOLDS_BOXED                = (G_TYPE_CHECK_VALUE_TYPE((value),G_TYPE_BOXED))    ! macro
    const GDK_KEY_sixsubscript               = 0x1002086    ! macro
    const GDK_KEY_nobreakspace               =  0x0a0    ! macro
    const ATK_DOCUMENT                       =  G_TYPE_CHECK_INSTANCE_CAST((obj),ATK_TYPE_DOCUMENT,AtkDocument)    ! macro
    const ATK_TYPE_TABLE                     = (atk_table_get_type())    ! macro
    const G_PARAM_SPEC_CHAR                  = (G_TYPE_CHECK_INSTANCE_CAST((pspec),G_TYPE_PARAM_CHAR,GParamSpecChar))    ! macro
    const GUINT32_SWAP_BE_PDP                = ((guint32)((((guint32)(val)&(guint32)0x00ff00ffU)<<8)|(((guint32)(val)&(guint32)0xff00ff00U)>>8)))    ! macro
    const GTK_STOCK_JUSTIFY_LEFT             = "gtk-justify-left"    ! macro
    const GDK_KEY_Hangul_Romaja              = 0xff36    ! macro
    const GTK_ENTRY_GET_CLASS                = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_ENTRY,GtkEntryClass))    ! macro
    const G_TYPE_FUNDAMENTAL_MAX             = (255<<G_TYPE_FUNDAMENTAL_SHIFT)    ! macro
    const ATK_IMAGE                          = G_TYPE_CHECK_INSTANCE_CAST((obj),ATK_TYPE_IMAGE,AtkImage)    ! macro
    const GTK_APPLICATION                    = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_APPLICATION,GtkApplication))    ! macro
    const GDK_KEY_seconds                    = 0xad7    ! macro
    const GDK_KEY_kana_tsu                   =  0x4af    ! macro
    const G_FILE_ATTRIBUTE_UNIX_BLOCKS       = "unix::blocks"    ! macro
    const GTK_IS_FONT_CHOOSER                = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_FONT_CHOOSER))    ! macro
    const G_IS_FILTER_OUTPUT_STREAM          = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_FILTER_OUTPUT_STREAM))    ! macro
    const G_DEFINE_TYPE_WITH_CODE            = _G_DEFINE_TYPE_EXTENDED_BEGIN(TN,t_n,T_P,0){_C_;}_G_DEFINE_TYPE_EXTENDED_END()    ! macro
    const GDK_KEY_hebrew_finalpe             = 0xcf3    ! macro
    const GTK_IS_DIALOG                      = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_DIALOG))    ! macro
    const ATK_IS_GOBJECT_ACCESSIBLE_CLASS    = (G_TYPE_CHECK_CLASS_TYPE((klass),ATK_TYPE_GOBJECT_ACCESSIBLE))    ! macro
    const GDK_KEY_Rcaron                     = 0x1d8    ! macro
    const GTK_TYPE_WIDGET_HELP_TYPE          = (gtk_widget_help_type_get_type())    ! macro
    const GPOINTER_TO_SIZE                   = ((gsize)(p))    ! macro
    const GDK_TYPE_NOTIFY_TYPE               = (gdk_notify_type_get_type())    ! macro
    const GTK_CHECK_VERSION                  = (GTK_MAJOR_VERSION>(major)||(GTK_MAJOR_VERSION==(major)&&GTK_MINOR_VERSION>(minor))||(GTK_MAJOR_VERSION==(major)&&GTK_MINOR_VERSION==(minor)&&GTK_MICRO_VERSION>=(micro)))    ! macro
    const G_TYPE_NETWORK_ADDRESS             = (g_network_address_get_type())    ! macro
    const PANGO_UNITS_ROUND                  = (((d)+(PANGO_SCALE>>1))&~(PANGO_SCALE-1))    ! macro
    const GTK_TYPE_CELL_VIEW                 = (gtk_cell_view_get_type())    ! macro
    const GTK_STOCK_JUSTIFY_RIGHT            = "gtk-justify-right"    ! macro
    const G_TYPE_FILE_OUTPUT_STREAM          = (g_file_output_stream_get_type())    ! macro
    const GDK_KEY_ytilde                     = 0x1001ef9    ! macro
    const GTK_OVERLAY                        = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_OVERLAY,GtkOverlay))    ! macro
    const GDK_TYPE_WINDOW                    = (gdk_window_get_type())    ! macro
    const ATK_IS_OBJECT_CLASS                = (G_TYPE_CHECK_CLASS_TYPE((klass),ATK_TYPE_OBJECT))    ! macro
    const GTK_IS_OVERLAY_CLASS               = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_OVERLAY))    ! macro
    const G_TYPE_PROXY_RESOLVER              = (g_proxy_resolver_get_type())    ! macro
    const g_spawn_async_with_pipes           = g_spawn_async_with_pipes_utf8    ! macro
    const GTK_PRINT_SETTINGS_PAGE_RANGES     = "page-ranges"    ! macro
    const GDK_KEY_zstroke                    = 0x10001b6    ! macro
    const GTK_TYPE_FONT_CHOOSER              = (gtk_font_chooser_get_type())    ! macro
    const g_ntohl                            = (GUINT32_FROM_BE(val))    ! macro
    const ATK_UTIL_GET_CLASS                 = (G_TYPE_INSTANCE_GET_CLASS((obj),ATK_TYPE_UTIL,AtkUtilClass))    ! macro
    const GTK_TYPE_STYLE_PROVIDER            = (gtk_style_provider_get_type())    ! macro
    const G_STRFUNC                          = ((const char*)("???"))    ! macro
    const GTK_IS_RECENT_MANAGER              = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_RECENT_MANAGER))    ! macro
    const GTK_STOCK_SELECT_COLOR             = "gtk-select-color"    ! macro
    const GDK_KEY_Hangul_Banja               = 0xff39    ! macro
    const GTK_TYPE_ASSISTANT_PAGE_TYPE       = (gtk_assistant_page_type_get_type())    ! macro
    const G_IS_PARAM_SPEC_LONG               = (G_TYPE_CHECK_INSTANCE_TYPE((pspec),G_TYPE_PARAM_LONG))    ! macro
    const G_FILE_ATTRIBUTE_UNIX_NLINK        = "unix::nlink"    ! macro
    const GDK_KEY_ograve                     = 0x0f2    ! macro
    const GDK_KEY_DongSign                   =  0x10020ab    ! macro
    const GTK_FRAME_CLASS                    = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_FRAME,GtkFrameClass))    ! macro
    const GDK_KEY_Greek_UPSILONdieresis      = 0x7a9    ! macro
    const G_IO_CHANNEL_ERROR                 =  g_io_channel_error_quark()    ! macro
    const G_OBJECT_WARN_INVALID_PROPERTY_ID  = G_OBJECT_WARN_INVALID_PSPEC((object),"property",(property_id),(pspec))    ! macro
    const GDK_KEY_Hangul_Sios                = 0xeb5    ! macro
    const cairo_transform_distance           =  cairo_transform_distance_REPLACED_BY_cairo_user_to_device_distance    ! macro
    const GTK_ADJUSTMENT                     = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_ADJUSTMENT,GtkAdjustment))    ! macro
    const g_spawn_sync                       = g_spawn_sync_utf8    ! macro
    const g_ntohs                            = (GUINT16_FROM_BE(val))    ! macro
    const GDK_KEY_Search                     = 0x1008ff1b    ! macro
    const GTK_VOLUME_BUTTON                  = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_VOLUME_BUTTON,GtkVolumeButton))    ! macro
    const GTK_STOCK_CAPS_LOCK_WARNING        = "gtk-caps-lock-warning"    ! macro
    const GTK_ACCEL_MAP_GET_CLASS            = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_ACCEL_MAP,GtkAccelMapClass))    ! macro
    const GDK_KEY_Arabic_sukun               = 0x5f2    ! macro
    const GDK_KEY_topvertsummationconnector  =  0x8b3    ! macro
    const GTK_IS_GRID                        = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_GRID))    ! macro
    const GDK_KEY_Sinh_ttha                  = 0x1000da8    ! macro
    const ATK_NO_OP_OBJECT_FACTORY_GET_CLASS = (G_TYPE_INSTANCE_GET_CLASS((obj),ATK_TYPE_NO_OP_OBJECT_FACTORY,AtkNoOpObjectFactoryClass))    ! macro
    const GTK_IS_VBOX_CLASS                  = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_VBOX))    ! macro
    const GTK_STOCK_DND                      = "gtk-dnd"    ! macro
    const GTK_COLOR_CHOOSER_WIDGET_CLASS     = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_COLOR_CHOOSER_WIDGET,GtkColorChooserWidgetClass))    ! macro
    const GTK_HBOX                           = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_HBOX,GtkHBox))    ! macro
    const GTK_IS_VPANED_CLASS                = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_VPANED))    ! macro
    const GDK_KEY_Pointer_Up                 = 0xfee2    ! macro
    const GDK_KEY_downarrow                  =  0x8fe    ! macro
    const GUINT16_TO_BE                      = (GUINT16_SWAP_LE_BE(val))    ! macro
    const GDK_KEY_Georgian_las               = 0x10010da    ! macro
    const G_THREAD_ERROR                     =  g_thread_error_quark()    ! macro
    const GTK_TYPE_RANGE                     = (gtk_range_get_type())    ! macro
    const GDK_TYPE_WM_FUNCTION               = (gdk_wm_function_get_type())    ! macro
    const GTK_LABEL_GET_CLASS                = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_LABEL,GtkLabelClass))    ! macro
    const gtk_init                           = gtk_init_abi_check(argc,argv,2,sizeof(GtkWindow),sizeof(GtkBox))    ! macro
    const g_date_year                        = g_date_get_year    ! macro
    const GDK_PIXBUF_LOADER_GET_CLASS        = (G_TYPE_INSTANCE_GET_CLASS((obj),GDK_TYPE_PIXBUF_LOADER,GdkPixbufLoaderClass))    ! macro
    const G_VARIANT_TYPE_BYTE                = ((const GVariantType*)"y")    ! macro
    const GDK_KEY_Num_Lock                   = 0xff7f    ! macro
    const GUINT32_SWAP_LE_PDP                = ((guint32)((((guint32)(val)&(guint32)0x0000ffffU)<<16)|(((guint32)(val)&(guint32)0xffff0000U)>>16)))    ! macro
    const G_FILE_ATTRIBUTE_TRASH_DELETION_DATE = "trash::deletion-date"    ! macro
    const g_ascii_isupper                    = ((g_ascii_table[(guchar)(c)]&G_ASCII_UPPER)!=0)    ! macro
    const GDK_KEY_Cyrillic_BE                = 0x6e2    ! macro
    const GDK_KEY_iTouch                     =  0x1008ff60    ! macro
    const GDK_KEY_Massyo                     =  0xff2c    ! macro
    const GDK_KEY_leftpointer                =  0xaea    ! macro
    const G_PARAM_SPEC                       = (G_TYPE_CHECK_INSTANCE_CAST((pspec),G_TYPE_PARAM,GParamSpec))    ! macro
    const GTK_RADIO_MENU_ITEM_GET_CLASS      = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_RADIO_MENU_ITEM,GtkRadioMenuItemClass))    ! macro
    const GTK_STOCK_SELECT_ALL               = "gtk-select-all"    ! macro
    const cairo_get_status                   = cairo_get_status_REPLACED_BY_cairo_status    ! macro
    const G_SOCKET_LISTENER_GET_CLASS        = (G_TYPE_INSTANCE_GET_CLASS((inst),G_TYPE_SOCKET_LISTENER,GSocketListenerClass))    ! macro
    const GTK_LEVEL_BAR_GET_CLASS            = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_LEVEL_BAR,GtkLevelBarClass))    ! macro
    const GDK_KEY_checkmark                  = 0xaf3    ! macro
    const GTK_IS_CLIPBOARD                   = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_CLIPBOARD))    ! macro
    const G_MOUNT_OPERATION_CLASS            = (G_TYPE_CHECK_CLASS_CAST((k),G_TYPE_MOUNT_OPERATION,GMountOperationClass))    ! macro
    const G_DATA_OUTPUT_STREAM_GET_CLASS     = (G_TYPE_INSTANCE_GET_CLASS((o),G_TYPE_DATA_OUTPUT_STREAM,GDataOutputStreamClass))    ! macro
    const GTK_TYPE_PRINT_QUALITY             = (gtk_print_quality_get_type())    ! macro
    const GTK_PRINT_SETTINGS_NUMBER_UP       = "number-up"    ! macro
    const PANGO_IS_LAYOUT                    = (G_TYPE_CHECK_INSTANCE_TYPE((object),PANGO_TYPE_LAYOUT))    ! macro
    const ATK_SELECTION                      = G_TYPE_CHECK_INSTANCE_CAST((obj),ATK_TYPE_SELECTION,AtkSelection)    ! macro
    const GDK_KEY_Lstroke                    = 0x1a3    ! macro
    const G_VALUE_HOLDS_FLOAT                = (G_TYPE_CHECK_VALUE_TYPE((value),G_TYPE_FLOAT))    ! macro
    const GDK_KEY_doublelowquotemark         = 0xafe    ! macro
    const g_try_new                          =  _G_NEW(struct_type,n_structs,try_malloc)    ! macro
    const G_FILE_ATTRIBUTE_ACCESS_CAN_WRITE  = "access::can-write"    ! macro
    const GDK_KEY_Arabic_hamzaonyeh          = 0x5c6    ! macro
    const PANGO_SCALE_X_LARGE                = ((double)1.4399999999999)    ! macro
    const ATK_RELATION_GET_CLASS             = (G_TYPE_INSTANCE_GET_CLASS((obj),ATK_TYPE_RELATION,AtkRelationClass))    ! macro
    const PANGO_IS_FONT_FACE                 = (G_TYPE_CHECK_INSTANCE_TYPE((object),PANGO_TYPE_FONT_FACE))    ! macro
    const GTK_TYPE_INPUT_HINTS               = (gtk_input_hints_get_type())    ! macro
    const G_IS_MENU_ATTRIBUTE_ITER_CLASS     = (G_TYPE_CHECK_CLASS_TYPE((class),G_TYPE_MENU_ATTRIBUTE_ITER))    ! macro
    const G_TCP_CONNECTION_GET_CLASS         = (G_TYPE_INSTANCE_GET_CLASS((inst),G_TYPE_TCP_CONNECTION,GTcpConnectionClass))    ! macro
    const G_TYPE_PARAM_INT64                 = (g_param_spec_types[7])    ! macro
    const G_DEFINE_QUARK                     = GQuark q_n##_quark(void){static GQuark q;if G_UNLIKELY(q==0)q=g_quark_from_static_string(#QN);return q;}    ! macro
    const G_IS_TLS_CERTIFICATE               = (G_TYPE_CHECK_INSTANCE_TYPE((inst),G_TYPE_TLS_CERTIFICATE))    ! macro
    const g_dataset_id_set_data              = g_dataset_id_set_data_full((l),(k),(d),NULL)    ! macro
    const g_node_next_sibling                = ((node)?((GNode*)(node))->next:NULL)    ! macro
    const GDK_KEY_Down                       = 0xff54    ! macro
    const GDK_KEY_MultipleCandidate          =  0xff3d    ! macro
    const CAIRO_HAS_WIN32_FONT               =  1    ! macro
    const G_IS_PARAM_SPEC_VALUE_ARRAY        = (G_TYPE_CHECK_INSTANCE_TYPE((pspec),G_TYPE_PARAM_VALUE_ARRAY))    ! macro
    const GDK_KEY_emptyset                   = 0x1002205    ! macro
    const G_TYPE_FILE_CREATE_FLAGS           = (g_file_create_flags_get_type())    ! macro
    const G_IS_PARAM_SPEC_OVERRIDE           = (G_TYPE_CHECK_INSTANCE_TYPE((pspec),G_TYPE_PARAM_OVERRIDE))    ! macro
    const G_MAXUINT8                         = ((guint8)0xff)    ! macro
    const GDK_KEY_ygrave                     = 0x1001ef3    ! macro
    const GTK_IS_TREE_VIEW_CLASS             = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_TREE_VIEW))    ! macro
    const ATK_TYPE_VALUE                     = (atk_value_get_type())    ! macro
    const GTK_STOCK_NEW                      = "gtk-new"    ! macro
    const G_TYPE_INSTANCE_GET_INTERFACE      = (_G_TYPE_IGI((instance),(g_type),c_type))    ! macro
    const G_TYPE_RESERVED_GLIB_LAST          = (31)    ! macro
    const GTK_IS_WIDGET                      = (G_TYPE_CHECK_INSTANCE_TYPE((widget),GTK_TYPE_WIDGET))    ! macro
    const GDK_KEY_Hangul_J_RieulMieum        = 0xedd    ! macro
    const GDK_KEY_schwa                      =  0x1000259    ! macro
    const G_TYPE_IS_INITABLE                 = (g_type_is_a((type),G_TYPE_INITABLE))    ! macro
    const GTK_FONT_SELECTION_GET_CLASS       = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_FONT_SELECTION,GtkFontSelectionClass))    ! macro
    const G_CSET_DIGITS                      = "0123456789"    ! macro
    const GDK_KEY_Cyrillic_ZHE_descender     = 0x1000496    ! macro
    const GDK_KEY_Thai_thonangmontho         =  0xdb1    ! macro
    const G_FILE_ATTRIBUTE_UNIX_MODE         = "unix::mode"    ! macro
    const G_OBJECT                           = (G_TYPE_CHECK_INSTANCE_CAST((object),G_TYPE_OBJECT,GObject))    ! macro
    const GDK_KEY_Armenian_ini               = 0x100056b    ! macro
    const GTK_CELL_AREA_CLASS                = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_CELL_AREA,GtkCellAreaClass))    ! macro
    const GDK_KEY_dead_caron                 = 0xfe5a    ! macro
    const G_BUFFERED_OUTPUT_STREAM_CLASS     = (G_TYPE_CHECK_CLASS_CAST((k),G_TYPE_BUFFERED_OUTPUT_STREAM,GBufferedOutputStreamClass))    ! macro
    const GDK_KEY_tcedilla                   = 0x1fe    ! macro
    const GTK_IS_MENU_TOOL_BUTTON_CLASS      = (G_TYPE_CHECK_CLASS_TYPE((k),GTK_TYPE_MENU_TOOL_BUTTON))    ! macro
    const GDK_KEY_Thai_dodek                 = 0xdb4    ! macro
    const GDK_KEY_degree                     =  0x0b0    ! macro
    const GDK_KEY_ediaeresis                 =  0x0eb    ! macro
    const GDK_KEY_KbdBrightnessUp            =  0x1008ff05    ! macro
    const G_ASYNC_INITABLE                   = (G_TYPE_CHECK_INSTANCE_CAST((obj),G_TYPE_ASYNC_INITABLE,GAsyncInitable))    ! macro
    const G_VFS_GET_CLASS                    = (G_TYPE_INSTANCE_GET_CLASS((o),G_TYPE_VFS,GVfsClass))    ! macro
    const GDK_KEY_Sinh_kha                   = 0x1000d9b    ! macro
    const G_IS_SOCKET_CLIENT_CLASS           = (G_TYPE_CHECK_CLASS_TYPE((class),G_TYPE_SOCKET_CLIENT))    ! macro
    const G_TYPE_MOUNT                       = (g_mount_get_type())    ! macro
    const G_IS_DBUS_SERVER                   = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_DBUS_SERVER))    ! macro
    const g_dataset_remove_data              = g_dataset_id_set_data((l),g_quark_try_string(k),NULL)    ! macro
    const GDK_KEY_KP_Home                    = 0xff95    ! macro
    const GTK_IS_TOOLBAR_CLASS               = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_TOOLBAR))    ! macro
    const GDK_KEY_Greek_zeta                 = 0x7e6    ! macro
    const GDK_KEY_upshoe                     =  0xbc3    ! macro
    const GDK_KEY_dead_dasia                 =  0xfe65    ! macro
    const GDK_KEY_Arabic_fullstop            =  0x10006d4    ! macro
    const g_datalist_id_remove_data          =  g_datalist_id_set_data((dl),(q),NULL)    ! macro
    const GTK_TYPE_TEXT_WINDOW_TYPE          = (gtk_text_window_type_get_type())    ! macro
    const GDK_KEY_heart                      = 0xaee    ! macro
    const GTK_IS_VSCALE_CLASS                = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_VSCALE))    ! macro
    const GDK_KEY_Cyrillic_DE                = 0x6e4    ! macro
    const GTK_CSS_PROVIDER_ERROR             = (gtk_css_provider_error_quark())    ! macro
    const GTK_HSCALE_GET_CLASS               = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_HSCALE,GtkHScaleClass))    ! macro
    const G_IS_DBUS_OBJECT_SKELETON          = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_DBUS_OBJECT_SKELETON))    ! macro
    const G_MENU_MODEL                       = (G_TYPE_CHECK_INSTANCE_CAST((inst),G_TYPE_MENU_MODEL,GMenuModel))    ! macro
    const PANGO_TYPE_UNDERLINE               = (pango_underline_get_type())    ! macro
    const GTK_CELL_RENDERER_PROGRESS_GET_CLASS = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_CELL_RENDERER_PROGRESS,GtkCellRendererProgressClass))    ! macro
    const G_FILE_ATTRIBUTE_UNIX_INODE        = "unix::inode"    ! macro
    const GDK_KEY_Arabic_damma               = 0x5ef    ! macro
    const GDK_KEY_Cyrillic_CHE_descender     =  0x10004b6    ! macro
    const GTK_ACTIVATABLE_GET_IFACE          = (G_TYPE_INSTANCE_GET_INTERFACE((obj),GTK_TYPE_ACTIVATABLE,GtkActivatableIface))    ! macro
    const G_IS_FILE_ICON_CLASS               = (G_TYPE_CHECK_CLASS_TYPE((k),G_TYPE_FILE_ICON))    ! macro
    const G_MAXINT16                         = ((gint16)0x7fff)    ! macro
    const GTK_HSEPARATOR_GET_CLASS           = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_HSEPARATOR,GtkHSeparatorClass))    ! macro
    const GTK_IS_MENU_SHELL_CLASS            = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_MENU_SHELL))    ! macro
    const GTK_IS_FILE_FILTER                 = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_FILE_FILTER))    ! macro
    const GDK_KEY_Sinh_au2                   = 0x1000dde    ! macro
    const G_VARIANT_TYPE_INT16               = ((const GVariantType*)"n")    ! macro
    const GTK_IS_UI_MANAGER_CLASS            = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_UI_MANAGER))    ! macro
    const PANGO_SCALE_X_SMALL                = ((double)0.6444444444444)    ! macro
    const GTK_IS_RADIO_ACTION                = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_RADIO_ACTION))    ! macro
    const GDK_KEY_Reload                     = 0x1008ff73    ! macro
    const GDK_KEY_Eacute                     =  0x0c9    ! macro
    const GTK_IS_RANGE_CLASS                 = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_RANGE))    ! macro
    const GTK_GRID_CLASS                     = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_GRID,GtkGridClass))    ! macro
    const GDK_KEY_abrevehook                 = 0x1001eb3    ! macro
    const g_critical                         =  g_log(G_LOG_DOMAIN,G_LOG_LEVEL_CRITICAL,__VA_ARGS__)    ! macro
    const _G_TYPE_CVH                        = (g_type_check_value_holds((GValue*)vl,gt))    ! macro
    const GTK_IS_SPIN_BUTTON_CLASS           = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_SPIN_BUTTON))    ! macro
    const GDK_KEY_Hangul_PreHanja            = 0xff3a    ! macro
    const G_TLS_ERROR                        = (g_tls_error_quark())    ! macro
    const G_TYPE_IO_CONDITION                = (g_io_condition_get_type())    ! macro
    const GDK_KEY_Ebelowdot                  = 0x1001eb8    ! macro
    const GDK_KEY_Armenian_paruyk            =  0x100055e    ! macro
    const GTK_FONT_CHOOSER                   = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_FONT_CHOOSER,GtkFontChooser))    ! macro
    const GDK_KEY_Thai_leksam                = 0xdf3    ! macro
    const GTK_TYPE_RADIO_ACTION              = (gtk_radio_action_get_type())    ! macro
    const G_TYPE_DBUS_MESSAGE_FLAGS          = (g_dbus_message_flags_get_type())    ! macro
    const GDK_KEY_ohornacute                 = 0x1001edb    ! macro
    const GDK_TYPE_FILTER_RETURN             = (gdk_filter_return_get_type())    ! macro
    const GDK_KEY_braille_dots_24678         = 0x10028ea    ! macro
    const G_FILE_ATTRIBUTE_MOUNTABLE_CAN_STOP = "mountable::can-stop"    ! macro
    const g_ascii_ispunct                    = ((g_ascii_table[(guchar)(c)]&G_ASCII_PUNCT)!=0)    ! macro
    const GDK_KEY_Cyrillic_EF                = 0x6e6    ! macro
    const GDK_KEY_function                   =  0x8f6    ! macro
    const GDK_KEY_3270_PrintScreen           =  0xfd1d    ! macro
    const G_BOOKMARK_FILE_ERROR              = (g_bookmark_file_error_quark())    ! macro
    const GDK_KEY_dead_belowmacron           = 0xfe68    ! macro
    const G_IS_PARAM_SPEC_BOOLEAN            = (G_TYPE_CHECK_INSTANCE_TYPE((pspec),G_TYPE_PARAM_BOOLEAN))    ! macro
    const GDK_KEY_Sinh_aee2                  = 0x1000dd1    ! macro
    const g_cclosure_marshal_BOOL__BOXED_BOXED =  g_cclosure_marshal_BOOLEAN__BOXED_BOXED    ! macro
    const GTK_TEAROFF_MENU_ITEM_GET_CLASS    = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_TEAROFF_MENU_ITEM,GtkTearoffMenuItemClass))    ! macro
    const G_TYPE_IS_CLASSED                  = (g_type_test_flags((type),G_TYPE_FLAG_CLASSED))    ! macro
    const GTK_PRINT_SETTINGS_MEDIA_TYPE      = "media-type"    ! macro
    const GTK_TYPE_FILE_CHOOSER_ACTION       = (gtk_file_chooser_action_get_type())    ! macro
    const GDK_KEY_ISO_Last_Group             = 0xfe0e    ! macro
    const G_MOUNT_OPERATION                  = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_MOUNT_OPERATION,GMountOperation))    ! macro
    const GTK_IS_ADJUSTMENT                  = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_ADJUSTMENT))    ! macro
    const GDK_KEY_Cyrillic_EL                = 0x6ec    ! macro
    const GDK_KEY_Greek_switch               =  0xff7e    ! macro
    const GDK_KEY_Cyrillic_EM                =  0x6ed    ! macro
    const GDK_KEY_Cyrillic_EN                =  0x6ee    ! macro
    const GDK_KEY_Armenian_sha               =  0x1000577    ! macro
    const G_IS_CHARSET_CONVERTER_CLASS       = (G_TYPE_CHECK_CLASS_TYPE((k),G_TYPE_CHARSET_CONVERTER))    ! macro
    const GDK_KEY_Terminal                   = 0x1008ff80    ! macro
    const G_FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE_FILE = "mountable::unix-device-file"    ! macro
    const GDK_KEY_Cyrillic_ER                = 0x6f2    ! macro
    const g_dir_read_name                    =  g_dir_read_name_utf8    ! macro
    const GTK_SIZE_GROUP_CLASS               = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_SIZE_GROUP,GtkSizeGroupClass))    ! macro
    const GDK_KEY_Greek_ALPHAaccent          = 0x7a1    ! macro
    const GDK_KEY_Cyrillic_ES                =  0x6f3    ! macro
    const G_MAXINT32                         = ((gint32)0x7fffffff)    ! macro
    const GDK_PIXBUF_LOADER                  = (G_TYPE_CHECK_INSTANCE_CAST((obj),GDK_TYPE_PIXBUF_LOADER,GdkPixbufLoader))    ! macro
    const G_TYPE_FILE_ENUMERATOR             = (g_file_enumerator_get_type())    ! macro
    const G_MOUNT                            = (G_TYPE_CHECK_INSTANCE_CAST((obj),G_TYPE_MOUNT,GMount))    ! macro
    const GTK_TYPE_PAPER_SIZE                = (gtk_paper_size_get_type())    ! macro
    const GDK_KEY_Armenian_AT                = 0x1000538    ! macro
    const G_TYPE_FILTER_INPUT_STREAM         = (g_filter_input_stream_get_type())    ! macro
    const G_IS_PARAM_SPEC_DOUBLE             = (G_TYPE_CHECK_INSTANCE_TYPE((pspec),G_TYPE_PARAM_DOUBLE))    ! macro
    const GDK_KEY_Ibreve                     = 0x100012c    ! macro
    const GTK_TYPE_LABEL                     = (gtk_label_get_type())    ! macro
    const G_VARIANT_TYPE_INT32               = ((const GVariantType*)"i")    ! macro
    const GTK_STOCK_MEDIA_RECORD             = "gtk-media-record"    ! macro
    const G_SPAWN_ERROR                      = g_spawn_error_quark()    ! macro
    const G_WIN32_MSG_HANDLE                 = 19981206    ! macro
    const G_TYPE_ARRAY                       = (g_array_get_type())    ! macro
    const G_NATIVE_VOLUME_MONITOR_EXTENSION_POINT_NAME = "gio-native-volume-monitor"    ! macro
    const GTK_TREE_SELECTION_GET_CLASS       = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_TREE_SELECTION,GtkTreeSelectionClass))    ! macro
    const GTK_VPANED_CLASS                   = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_VPANED,GtkVPanedClass))    ! macro
    const GDK_KEY_Greek_etaaccent            = 0x7b3    ! macro
    const GDK_KEY_hebrew_nun                 =  0xcf0    ! macro
    const GDK_KEY_kana_conjunctive           =  0x4a5    ! macro
    const GLIB_SYSDEF_MSG_DONTROUTE          =  4    ! macro
    const GDK_KEY_Oacute                     =  0x0d3    ! macro
    const G_PARAM_SPEC_TYPE                  = (G_TYPE_FROM_INSTANCE(pspec))    ! macro
    const G_NETWORK_MONITOR_GET_INTERFACE    = (G_TYPE_INSTANCE_GET_INTERFACE((o),G_TYPE_NETWORK_MONITOR,GNetworkMonitorInterface))    ! macro
    const ATK_ACTION_GET_IFACE               = (G_TYPE_INSTANCE_GET_INTERFACE((obj),ATK_TYPE_ACTION,AtkActionIface))    ! macro
    const GDK_KEY_Pause                      = 0xff13    ! macro
    const GDK_KEY_braille_dots_124678        =  0x10028eb    ! macro
    const G_ZLIB_DECOMPRESSOR_GET_CLASS      = (G_TYPE_INSTANCE_GET_CLASS((o),G_TYPE_ZLIB_DECOMPRESSOR,GZlibDecompressorClass))    ! macro
    const GTK_STOCK_REFRESH                  = "gtk-refresh"    ! macro
    const G_CONVERTER_INPUT_STREAM_GET_CLASS = (G_TYPE_INSTANCE_GET_CLASS((o),G_TYPE_CONVERTER_INPUT_STREAM,GConverterInputStreamClass))    ! macro
    const G_KEY_FILE_DESKTOP_KEY_CATEGORIES  = "Categories"    ! macro
    const GDK_KEY_Hangul_Rieul               = 0xea9    ! macro
    const GDK_KEY_KP_Space                   =  0xff80    ! macro
    const cairo_set_pattern                  =  cairo_set_pattern_REPLACED_BY_cairo_set_source    ! macro
    const GUINT16_SWAP_BE_PDP                = (GUINT16_SWAP_LE_BE(val))    ! macro
    const G_VOLUME_IDENTIFIER_KIND_HAL_UDI   = "hal-udi"    ! macro
    const GDK_KEY_Georgian_can               = 0x10010ea    ! macro
    const GDK_KEY_AE                         =  0x0c6    ! macro
    const GDK_KEY_dead_abovecomma            =  0xfe64    ! macro
    const GDK_KEY_Next_VMode                 =  0x1008fe22    ! macro
    const G_TYPE_DBUS_CAPABILITY_FLAGS       = (g_dbus_capability_flags_get_type())    ! macro
    const G_IS_MEMORY_OUTPUT_STREAM_CLASS    = (G_TYPE_CHECK_CLASS_TYPE((k),G_TYPE_MEMORY_OUTPUT_STREAM))    ! macro
    const GTK_TYPE_ASSISTANT                 = (gtk_assistant_get_type())    ! macro
    const G_TYPE_PARAM_BOOLEAN               = (g_param_spec_types[2])    ! macro
    const G_TLS_CLIENT_CONNECTION_GET_INTERFACE = (G_TYPE_INSTANCE_GET_INTERFACE((inst),G_TYPE_TLS_CLIENT_CONNECTION,GTlsClientConnectionInterface))    ! macro
    const G_DBUS_INTERFACE_SKELETON_CLASS    = (G_TYPE_CHECK_CLASS_CAST((k),G_TYPE_DBUS_INTERFACE_SKELETON,GDBusInterfaceSkeletonClass))    ! macro
    const GTK_STOCK_BOLD                     = "gtk-bold"    ! macro
    const g_main_quit                        = g_main_loop_quit(loop)    ! macro
    const GDK_KEY_MailForward                = 0x1008ff90    ! macro
    const GTK_TYPE_IM_CONTEXT                = (gtk_im_context_get_type())    ! macro
    const GDK_KEY_Greek_EPSILONaccent        = 0x7a2    ! macro
    const cairo_matrix_set_identity          =  cairo_matrix_set_identity_REPLACED_BY_cairo_matrix_init_identity    ! macro
    const GTK_HPANED                         = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_HPANED,GtkHPaned))    ! macro
    const GDK_KEY_Cyrillic_HA                = 0x6e8    ! macro
    const G_PARAM_SPEC_FLAGS                 = (G_TYPE_CHECK_INSTANCE_CAST((pspec),G_TYPE_PARAM_FLAGS,GParamSpecFlags))    ! macro
    const GDK_KEY_Armenian_DA                = 0x1000534    ! macro
    const GDK_KEY_Thai_saraue                =  0xdd6    ! macro
    const GDK_KEY_kappa                      =  0x3a2    ! macro
    const G_ZLIB_COMPRESSOR_CLASS            = (G_TYPE_CHECK_CLASS_CAST((k),G_TYPE_ZLIB_COMPRESSOR,GZlibCompressorClass))    ! macro
    const PANGO_ATTR_INDEX_FROM_TEXT_BEGINNING = 0    ! macro
    const GDK_KEY_TaskPane                   =  0x1008ff7f    ! macro
    const G_DATA_OUTPUT_STREAM_CLASS         = (G_TYPE_CHECK_CLASS_CAST((k),G_TYPE_DATA_OUTPUT_STREAM,GDataOutputStreamClass))    ! macro
    const G_TYPE_MODULE_CLASS                = (G_TYPE_CHECK_CLASS_CAST((class),G_TYPE_TYPE_MODULE,GTypeModuleClass))    ! macro
    const GDK_KEY_Hebrew_switch              = 0xff7e    ! macro
    const GDK_KEY_integral                   =  0x8bf    ! macro
    const G_VOLUME_MONITOR_GET_CLASS         = (G_TYPE_INSTANCE_GET_CLASS((o),G_TYPE_VOLUME_MONITOR,GVolumeMonitorClass))    ! macro
    const G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME = "standard::display-name"    ! macro
    const GDK_KEY_zcaron                     = 0x1be    ! macro
    const GDK_KEY_Pictures                   =  0x1008ff91    ! macro
    const GTK_STYLE_PROVIDER_PRIORITY_FALLBACK =  1    ! macro
    const G_INITIALLY_UNOWNED_GET_CLASS      = (G_TYPE_INSTANCE_GET_CLASS((object),G_TYPE_INITIALLY_UNOWNED,GInitiallyUnownedClass))    ! macro
    const G_FILE                             = (G_TYPE_CHECK_INSTANCE_CAST((obj),G_TYPE_FILE,GFile))    ! macro
    const GDK_KEY_masculine                  = 0x0ba    ! macro
    const GTK_STYLE_ATTACHED                 = (GTK_STYLE(style)->attach_count>0)    ! macro
    const GDK_KEY_cabovedot                  = 0x2e5    ! macro
    const G_OUTPUT_STREAM_GET_CLASS          = (G_TYPE_INSTANCE_GET_CLASS((o),G_TYPE_OUTPUT_STREAM,GOutputStreamClass))    ! macro
    const cairo_set_alpha                    = cairo_set_alpha_DEPRECATED_BY_cairo_set_source_rgba_OR_cairo_paint_with_alpha    ! macro
    const GDK_KEY_ISO_Level5_Lock            =  0xfe13    ! macro
    const g_atomic_pointer_compare_and_exchange = (g_atomic_pointer_compare_and_exchange((atomic),(gpointer)(oldval),(gpointer)(newval)))    ! macro
    const GTK_STOCK_PRINT_REPORT             = "gtk-print-report"    ! macro
    const GDK_MAJOR_VERSION                  = (3)    ! macro
    const GTK_TYPE_TREE_DRAG_DEST            = (gtk_tree_drag_dest_get_type())    ! macro
    const GDK_KEY_Yacute                     = 0x0dd    ! macro
    const GDK_KEY_3270_Setup                 =  0xfd17    ! macro
    const GTK_MENU_BUTTON                    = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_MENU_BUTTON,GtkMenuButton))    ! macro
    const GDK_KEY_3270_Enter                 = 0xfd1e    ! macro
    const GTK_VSCALE_CLASS                   = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_VSCALE,GtkVScaleClass))    ! macro
    const GDK_KEY_ScrollUp                   = 0x1008ff78    ! macro
    const GTK_CONTAINER_GET_CLASS            = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_CONTAINER,GtkContainerClass))    ! macro
    const G_LOCK_DEFINE                      = GMutex G_LOCK_NAME(name)    ! macro
    const GDK_KEY_ocircumflextilde           = 0x1001ed7    ! macro
    const GTK_IS_HSCROLLBAR_CLASS            = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_HSCROLLBAR))    ! macro
    const GDK_KEY_Thai_sarauu                = 0xdd9    ! macro
    const G_OBJECT_GET_CLASS                 = (G_TYPE_INSTANCE_GET_CLASS((object),G_TYPE_OBJECT,GObjectClass))    ! macro
    const GTK_TYPE_PAGE_SET                  = (gtk_page_set_get_type())    ! macro
    const GDK_KEY_Cyrillic_IE                = 0x6e5    ! macro
    const GTK_IS_GRID_CLASS                  = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_GRID))    ! macro
    const GDK_KEY_eightsubscript             = 0x1002088    ! macro
    const G_IO_ERROR                         =  g_io_error_quark()    ! macro
    const G_MAXINT64                         = G_GINT64_CONSTANT(0x7fffffffffffffff)    ! macro
    const GDK_KEY_Refresh                    = 0x1008ff29    ! macro
    const GUINT16_SWAP_LE_PDP                = ((guint16)(val))    ! macro
    const GTK_GRID                           = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_GRID,GtkGrid))    ! macro
    const g_array_prepend_val                = g_array_prepend_vals(a,&(v),1)    ! macro
    const GDK_KEY_CD                         = 0x1008ff53    ! macro
    const GTK_RADIO_ACTION                   = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_RADIO_ACTION,GtkRadioAction))    ! macro
    const G_VARIANT_TYPE_INT64               = ((const GVariantType*)"x")    ! macro
    const PANGO_TYPE_TAB_ALIGN               = (pango_tab_align_get_type())    ! macro
    const GTK_TYPE_VSEPARATOR                = (gtk_vseparator_get_type())    ! macro
    const G_TYPE_DRIVE                       = (g_drive_get_type())    ! macro
    const G_TYPE_BUS_NAME_WATCHER_FLAGS      = (g_bus_name_watcher_flags_get_type())    ! macro
    const GDK_KEY_Hangul_RieulHieuh          = 0xeb0    ! macro
    const GDK_KEY_braille_dots_2456          =  0x100283a    ! macro
    const GDK_KEY_fivesuperior               =  0x1002075    ! macro
    const GDK_KEY_CH                         =  0xfea2    ! macro
    const GDK_KEY_Sinh_bha                   =  0x1000db7    ! macro
    const GDK_KEY_braille_dots_2457          =  0x100285a    ! macro
    const G_TYPE_OUTPUT_STREAM               = (g_output_stream_get_type())    ! macro
    const GDK_KEY_braille_dots_2458          = 0x100289a    ! macro
    const GDK_KEY_Greek_upsilonaccent        =  0x7b8    ! macro
    const GDK_KEY_Sinh_tta                   =  0x1000da7    ! macro
    const GDK_KEY_botrightparens             =  0x8ae    ! macro
    const GDK_KEY_Cyrillic_IO                =  0x6b3    ! macro
    const GTK_IS_SCROLLBAR                   = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_SCROLLBAR))    ! macro
    const GDK_TYPE_WINDOW_EDGE               = (gdk_window_edge_get_type())    ! macro
    const G_THREADED_SOCKET_SERVICE_CLASS    = (G_TYPE_CHECK_CLASS_CAST((class),G_TYPE_THREADED_SOCKET_SERVICE,GThreadedSocketServiceClass))    ! macro
    const GTK_CELL_RENDERER                  = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_CELL_RENDERER,GtkCellRenderer))    ! macro
    const G_TYPE_FILE_MONITOR_FLAGS          = (g_file_monitor_flags_get_type())    ! macro
    const GTK_IS_VOLUME_BUTTON_CLASS         = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_VOLUME_BUTTON))    ! macro
    const GTK_IS_ENTRY                       = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_ENTRY))    ! macro
    const GTK_TYPE_PATH_PRIORITY_TYPE        = (gtk_path_priority_type_get_type())    ! macro
    const G_IS_TLS_PASSWORD                  = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_TLS_PASSWORD))    ! macro
    const GDK_KEY_Cyrillic_JE                = 0x6b8    ! macro
    const G_IS_DBUS_INTERFACE                = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_DBUS_INTERFACE))    ! macro
    const GTK_IS_STYLE_PROPERTIES            = (G_TYPE_CHECK_INSTANCE_TYPE((o),GTK_TYPE_STYLE_PROPERTIES))    ! macro
    const GDK_KEY_Armenian_FE                = 0x1000556    ! macro
    const GTK_TYPE_MENU_DIRECTION_TYPE       = (gtk_menu_direction_type_get_type())    ! macro
    const G_TYPE_PTR_ARRAY                   = (g_ptr_array_get_type())    ! macro
    const GTK_ARROW_GET_CLASS                = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_ARROW,GtkArrowClass))    ! macro
    const cairo_get_path_flat                = cairo_get_path_flat_DEPRECATED_BY_cairo_get_path_flat    ! macro
    const GDK_KEY_dagger                     =  0xaf1    ! macro
    const GTK_IS_CELL_RENDERER_PIXBUF        = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_CELL_RENDERER_PIXBUF))    ! macro
    const GDK_KEY_hyphen                     = 0x0ad    ! macro
    const ATK_IS_MISC_CLASS                  = (G_TYPE_CHECK_CLASS_TYPE((klass),ATK_TYPE_MISC))    ! macro
    const G_IS_NATIVE_VOLUME_MONITOR         = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_NATIVE_VOLUME_MONITOR))    ! macro
    const GDK_KEY_ContrastAdjust             = 0x1008ff22    ! macro
    const GDK_KEY_Greek_upsilon              =  0x7f5    ! macro
    const GDK_KEY_Rcedilla                   =  0x3a3    ! macro
    const GDK_KEY_hebrew_doublelowline       =  0xcdf    ! macro
    const GDK_KEY_Emacron                    =  0x3aa    ! macro
    const GDK_KEY_greaterthanequal           =  0x8be    ! macro
    const GDK_KEY_braille_dots_2467          =  0x100286a    ! macro
    const G_TYPE_PLUGIN_GET_CLASS            = (G_TYPE_INSTANCE_GET_INTERFACE((inst),G_TYPE_TYPE_PLUGIN,GTypePluginClass))    ! macro
    const G_MOUNT_GET_IFACE                  = (G_TYPE_INSTANCE_GET_INTERFACE((obj),G_TYPE_MOUNT,GMountIface))    ! macro
    const ATK_TEXT_GET_IFACE                 = (G_TYPE_INSTANCE_GET_INTERFACE((obj),ATK_TYPE_TEXT,AtkTextIface))    ! macro
    const GDK_KEY_braille_dots_2468          = 0x10028aa    ! macro
    const GDK_KEY_Armenian_YECH              =  0x1000535    ! macro
    const G_TLS_INTERACTION_GET_CLASS        = (G_TYPE_INSTANCE_GET_CLASS((o),G_TYPE_TLS_INTERACTION,GTlsInteractionClass))    ! macro
    const GDK_KEY_cacute                     = 0x1e6    ! macro
    const g_once                             = (((once)->status==G_ONCE_STATUS_READY)?(once)->retval:g_once_impl((once),(func),(arg)))    ! macro
    const G_TYPE_RESOURCE                    = (g_resource_get_type())    ! macro
    const G_IS_PARAM_SPEC_INT64              = (G_TYPE_CHECK_INSTANCE_TYPE((pspec),G_TYPE_PARAM_INT64))    ! macro
    const g_getenv                           = g_getenv_utf8    ! macro
    const GDK_KEY_Cyrillic_KA                =  0x6eb    ! macro
    const GLIB_VERSION_2_26                  = (G_ENCODE_VERSION(2,26))    ! macro
    const G_TCP_WRAPPER_CONNECTION_CLASS     = (G_TYPE_CHECK_CLASS_CAST((class),G_TYPE_TCP_WRAPPER_CONNECTION,GTcpWrapperConnectionClass))    ! macro
    const GLIB_VERSION_2_28                  = (G_ENCODE_VERSION(2,28))    ! macro
    const GDK_KEY_Henkan_Mode                = 0xff23    ! macro
    const G_IS_FILTER_OUTPUT_STREAM_CLASS    = (G_TYPE_CHECK_CLASS_TYPE((k),G_TYPE_FILTER_OUTPUT_STREAM))    ! macro
    const GDK_KEY_ecircumflexbelowdot        = 0x1001ec7    ! macro
    const G_TYPE_ACTION_MAP                  = (g_action_map_get_type())    ! macro
    const GDK_KEY_F1                         = 0xffbe    ! macro
    const GDK_KEY_Hangul_End                 =  0xff33    ! macro
    const GDK_KEY_F10                        =  0xffc7    ! macro
    const GDK_KEY_F2                         =  0xffbf    ! macro
    const GTK_MICRO_VERSION                  = (4)    ! macro
    const GDK_KEY_F11                        = 0xffc8    ! macro
    const GTK_NUMERABLE_ICON                 = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_NUMERABLE_ICON,GtkNumerableIcon))    ! macro
    const GDK_KEY_F3                         = 0xffc0    ! macro
    const GDK_KEY_F12                        =  0xffc9    ! macro
    const G_SOCKET_CLIENT_GET_CLASS          = (G_TYPE_INSTANCE_GET_CLASS((inst),G_TYPE_SOCKET_CLIENT,GSocketClientClass))    ! macro
    const GDK_KEY_F4                         = 0xffc1    ! macro
    const GLONG_FROM_BE                      = (GLONG_TO_BE(val))    ! macro
    const GDK_KEY_F13                        = 0xffca    ! macro
    const GDK_KEY_Option                     =  0x1008ff6c    ! macro
    const GDK_KEY_F5                         =  0xffc2    ! macro
    const GDK_KEY_ocircumflexgrave           =  0x1001ed3    ! macro
    const GTK_STYLE_CLASS_ENTRY              = "entry"    ! macro
    const GTK_STYLE_PROPERTY_BORDER_COLOR    = "border-color"    ! macro
    const GDK_KEY_F14                        = 0xffcb    ! macro
    const GDK_KEY_F6                         =  0xffc3    ! macro
    const GDK_KEY_KP_Begin                   =  0xff9d    ! macro
    const G_IS_RESOLVER_CLASS                = (G_TYPE_CHECK_CLASS_TYPE((k),G_TYPE_RESOLVER))    ! macro
    const GDK_KEY_F15                        = 0xffcc    ! macro
    const GLIB_VERSION_2_30                  = (G_ENCODE_VERSION(2,30))    ! macro
    const GDK_KEY_Arabic_yeh_baree           = 0x10006d2    ! macro
    const GDK_KEY_Yhook                      =  0x1001ef6    ! macro
    const GTK_STYLE_CLASS_DEFAULT            = "default"    ! macro
    const GTK_STYLE_GET_CLASS                = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_STYLE,GtkStyleClass))    ! macro
    const GDK_KEY_F7                         = 0xffc4    ! macro
    const GDK_KEY_F16                        =  0xffcd    ! macro
    const GUINT32_SWAP_LE_BE_CONSTANT        = ((guint32)((((guint32)(val)&(guint32)0x000000ffU)<<24)|(((guint32)(val)&(guint32)0x0000ff00U)<<8)|(((guint32)(val)&(guint32)0x00ff0000U)>>8)|(((guint32)(val)&(guint32)0xff000000U)>>24)))    ! macro
    const GDK_KEY_F8                         = 0xffc5    ! macro
    const GDK_KEY_F17                        =  0xffce    ! macro
    const GLIB_VERSION_2_32                  = (G_ENCODE_VERSION(2,32))    ! macro
    const GTK_SEPARATOR_MENU_ITEM_GET_CLASS  = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_SEPARATOR_MENU_ITEM,GtkSeparatorMenuItemClass))    ! macro
    const GDK_KEY_F9                         = 0xffc6    ! macro
    const GTK_TYPE_RECENT_FILTER_FLAGS       = (gtk_recent_filter_flags_get_type())    ! macro
    const G_IS_IO_STREAM                     = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_IO_STREAM))    ! macro
    const GDK_KEY_F18                        = 0xffcf    ! macro
    const _G_DEFINE_TYPE_EXTENDED_END        = }g_once_init_leave(&g_define_type_id__volatile,g_define_type_id);}return g_define_type_id__volatile;}    ! macro
    const GDK_TYPE_CROSSING_MODE             = (gdk_crossing_mode_get_type())    ! macro
    const GDK_KEY_F19                        = 0xffd0    ! macro
    const G_FILE_ATTRIBUTE_UNIX_UID          = "unix::uid"    ! macro
    const GLIB_VERSION_2_34                  = (G_ENCODE_VERSION(2,34))    ! macro
    const GDK_KEY_braille_dots_2478          = 0x10028ca    ! macro
    const GDK_KEY_Ch                         =  0xfea1    ! macro
    const GUINT16_TO_LE                      = ((guint16)(val))    ! macro
    const G_TYPE_IS_VALUE                    = (g_type_check_is_value_type(type))    ! macro
    const G_TYPE_VARIANT                     = G_TYPE_MAKE_FUNDAMENTAL(21)    ! macro
    const GDK_KEY_braille_dots_234567        = 0x100287e    ! macro
    const ATK_STATE_SET                      = (G_TYPE_CHECK_INSTANCE_CAST((obj),ATK_TYPE_STATE_SET,AtkStateSet))    ! macro
    const g_test_add                         = G_STMT_START{void(*add_vtable)(const char*,gsize,gconstpointer,void(*)(Fixture*,gconstpointer),void(*)(Fixture*,gconstpointer),void(*)(Fixture*,gconstpointer))=(void(*)(const gchar*,gsize,gconstpointer,void(*)(Fixture*,gconstpointer),void(*)(Fixture*,gconstpointer),void(*)(Fixture*,gconstpointer)))g_test_add_vtable;add_vtable(testpath,sizeof(Fixture),tdata,fsetup,ftest,fteardown);}G_STMT_END    ! macro
    const PANGO_GLYPH_INVALID_INPUT          = ((PangoGlyph)0xFFFFFFFF)    ! macro
    const GDK_KEY_braille_dots_234568        = 0x10028be    ! macro
    const G_DRIVE                            = (G_TYPE_CHECK_INSTANCE_CAST((obj),G_TYPE_DRIVE,GDrive))    ! macro
    const GTK_APPLICATION_WINDOW             = (G_TYPE_CHECK_INSTANCE_CAST((inst),GTK_TYPE_APPLICATION_WINDOW,GtkApplicationWindow))    ! macro
    const GTK_CELL_RENDERER_TEXT_CLASS       = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_CELL_RENDERER_TEXT,GtkCellRendererTextClass))    ! macro
    const G_IS_SOCKET_CONTROL_MESSAGE_CLASS  = (G_TYPE_CHECK_CLASS_TYPE((class),G_TYPE_SOCKET_CONTROL_MESSAGE))    ! macro
    const GTK_STYLE_CLASS_VERTICAL           = "vertical"    ! macro
    const cairo_status_string                = cairo_status_string_DEPRECATED_BY_cairo_status_AND_cairo_status_to_string    ! macro
    const g_dir_open                         =  g_dir_open_utf8    ! macro
    const GDK_KEY_braille_dots_5678          =  0x10028f0    ! macro
    const GTK_STOCK_INFO                     = "gtk-info"    ! macro
    const GDK_KEY_quoteright                 = 0x027    ! macro
    const GTK_IS_FONT_SELECTION              = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_FONT_SELECTION))    ! macro
    const ATK_IS_EDITABLE_TEXT               = G_TYPE_CHECK_INSTANCE_TYPE((obj),ATK_TYPE_EDITABLE_TEXT)    ! macro
    const GDK_KEY_dead_psili                 = 0xfe64    ! macro
    const GDK_KEY_F20                        =  0xffd1    ! macro
    const G_TYPE_TLS_INTERACTION             = (g_tls_interaction_get_type())    ! macro
    const G_PDP_ENDIAN                       = 3412    ! macro
    const GDK_KEY_F21                        =  0xffd2    ! macro
    const G_DBUS_ACTION_GROUP_CLASS          = (G_TYPE_CHECK_CLASS_CAST((class),G_TYPE_DBUS_ACTION_GROUP,GDBusActionGroupClass))    ! macro
    const GDK_KEY_Hangul_J_RieulKiyeog       = 0xedc    ! macro
    const GDK_KEY_F22                        =  0xffd3    ! macro
    const GDK_SELECTION_SECONDARY            =  _GDK_MAKE_ATOM(2)    ! macro
    const GDK_KEY_gbreve                     = 0x2bb    ! macro
    const GDK_KEY_Spell                      =  0x1008ff7c    ! macro
    const GDK_KEY_F23                        =  0xffd4    ! macro
    const GDK_KEY_Armenian_tyun              =  0x100057f    ! macro
    const GDK_KEY_F24                        =  0xffd5    ! macro
    const GDK_KEY_Georgian_zhar              =  0x10010df    ! macro
    const GDK_KEY_Armenian_HI                =  0x1000545    ! macro
    const GDK_KEY_F25                        =  0xffd6    ! macro
    const GDK_KEY_3270_ExSelect              =  0xfd1b    ! macro
    const GDK_KEY_Hangul_Khieuq              =  0xebb    ! macro
    const G_FILE_ATTRIBUTE_TIME_ACCESS_USEC  = "time::access-usec"    ! macro
    const GDK_KEY_F26                        = 0xffd7    ! macro
    const GTK_IS_NOTEBOOK_CLASS              = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_NOTEBOOK))    ! macro
    const GTK_IS_EVENT_BOX                   = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_EVENT_BOX))    ! macro
    const GDK_KEY_F27                        = 0xffd8    ! macro
    const g_get_current_dir                  =  g_get_current_dir_utf8    ! macro
    const GTK_TOGGLE_BUTTON                  = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_TOGGLE_BUTTON,GtkToggleButton))    ! macro
    const GDK_KEY_F28                        = 0xffd9    ! macro
    const GDK_KEY_braille_dots_14678         =  0x10028e9    ! macro
    const GLIB_DEPRECATED_IN_2_30_FOR        =  GLIB_DEPRECATED_FOR(f)    ! macro
    const GDK_KEY_F29                        = 0xffda    ! macro
    const GDK_KEY_Hangul_Phieuf              =  0xebd    ! macro
    const G_FILE_ATTRIBUTE_MOUNTABLE_CAN_EJECT = "mountable::can-eject"    ! macro
    const G_DBUS_OBJECT_MANAGER_SERVER_CLASS = (G_TYPE_CHECK_CLASS_CAST((k),G_TYPE_DBUS_OBJECT_MANAGER_SERVER,GDBusObjectManagerServerClass))    ! macro
    const G_TYPE_PROXY                       = (g_proxy_get_type())    ! macro
    const GDK_KEY_Armenian_HO                = 0x1000540    ! macro
    const GDK_KEY_braille_dots_234578        =  0x10028de    ! macro
    const GDK_KEY_ncedilla                   =  0x3f1    ! macro
    const GDK_KEY_Mae_Koho                   =  0xff3e    ! macro
    const cairo_matrix_get_affine            =  cairo_matrix_get_affine_DEPRECATED_BY_cairo_matrix_t    ! macro
    const GDK_KEY_Hangul_MultipleCandidate   =  0xff3d    ! macro
    const G_DBUS_ACTION_GROUP_GET_CLASS      = (G_TYPE_INSTANCE_GET_CLASS((inst),G_TYPE_DBUS_ACTION_GROUP,GDBusActionGroupClass))    ! macro
    const GDK_KEY_Cyrillic_dzhe              = 0x6af    ! macro
    const G_DBUS_AUTH_OBSERVER               = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_DBUS_AUTH_OBSERVER,GDBusAuthObserver))    ! macro
    const G_TYPE_MAKE_FUNDAMENTAL            = ((GType)((x)<<G_TYPE_FUNDAMENTAL_SHIFT))    ! macro
    const _GDK_MAKE_ATOM                     = ((GdkAtom)GUINT_TO_POINTER(val))    ! macro
    const GDK_KEY_F30                        = 0xffdb    ! macro
    const GTK_CELL_RENDERER_GET_CLASS        = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_CELL_RENDERER,GtkCellRendererClass))    ! macro
    const GDK_KEY_Cyrillic_i_macron          = 0x10004e3    ! macro
    const G_IS_FILE_OUTPUT_STREAM            = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_FILE_OUTPUT_STREAM))    ! macro
    const GDK_KEY_twothirds                  = 0xab1    ! macro
    const GDK_KEY_F31                        =  0xffdc    ! macro
    const G_ALLOC_ONLY                       =  1    ! macro
    const GDK_KEY_Start                      =  0x1008ff1a    ! macro
    const GTK_IS_INVISIBLE                   = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_INVISIBLE))    ! macro
    const GDK_KEY_F32                        = 0xffdd    ! macro
    const GDK_KEY_Cyrillic_nje               =  0x6aa    ! macro
    const GDK_KEY_percent                    =  0x025    ! macro
    const G_IS_SIMPLE_PERMISSION             = (G_TYPE_CHECK_INSTANCE_TYPE((inst),G_TYPE_SIMPLE_PERMISSION))    ! macro
    const GDK_KEY_F33                        = 0xffde    ! macro
    const G_VARIANT_TYPE_OBJECT_PATH_ARRAY   = ((const GVariantType*)"ao")    ! macro
    const GTK_MENU_TOOL_BUTTON               = (G_TYPE_CHECK_INSTANCE_CAST((o),GTK_TYPE_MENU_TOOL_BUTTON,GtkMenuToolButton))    ! macro
    const GDK_KEY_F34                        = 0xffdf    ! macro
    const GTK_IS_ALIGNMENT_CLASS             = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_ALIGNMENT))    ! macro
    const GDK_KEY_Hangul_J_Kiyeog            = 0xed4    ! macro
    const GTK_IS_VSCALE                      = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_VSCALE))    ! macro
    const GDK_KEY_F35                        = 0xffe0    ! macro
    const GDK_KEY_DOS                        =  0x1008ff5a    ! macro
    const G_FILE_ATTRIBUTE_ETAG_VALUE        = "etag::value"    ! macro
    const GTK_IMAGE_MENU_ITEM_GET_CLASS      = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_IMAGE_MENU_ITEM,GtkImageMenuItemClass))    ! macro
    const G_TYPE_PERMISSION                  = (g_permission_get_type())    ! macro
    const GTK_STYLE_CLASS_INFO               = "info"    ! macro
    const GTK_MENU_SHELL                     = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_MENU_SHELL,GtkMenuShell))    ! macro
    const g_file_open_tmp                    = g_file_open_tmp_utf8    ! macro
    const GDK_KEY_C_H                        =  0xfea5    ! macro
    const GTK_STYLE_PROPERTY_BACKGROUND_IMAGE = "background-image"    ! macro
    const GDK_KEY_racute                     = 0x1e0    ! macro
    const GTK_STOCK_ORIENTATION_LANDSCAPE    = "gtk-orientation-landscape"    ! macro
    const GTK_TYPE_DIRECTION_TYPE            = (gtk_direction_type_get_type())    ! macro
    const GTK_CALENDAR                       = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_CALENDAR,GtkCalendar))    ! macro
    const GTK_TYPE_FILE_FILTER               = (gtk_file_filter_get_type())    ! macro
    const G_TYPE_PARAM_FLAGS                 = (g_param_spec_types[11])    ! macro
    const GTK_FILE_CHOOSER_BUTTON            = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_FILE_CHOOSER_BUTTON,GtkFileChooserButton))    ! macro
    const g_return_val_if_fail               = G_STMT_START{if(expr){}else{g_log(G_LOG_DOMAIN,G_LOG_LEVEL_CRITICAL,"file %s: line %d: assertion `%s\' failed",__FILE__,__LINE__,#expr);return(val);};}G_STMT_END    ! macro
    const G_DEFINE_BOXED_TYPE                =  G_DEFINE_BOXED_TYPE_WITH_CODE(TypeName,type_name,copy_func,free_func,{})    ! macro
    const GTK_RECENT_CHOOSER_MENU            = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_RECENT_CHOOSER_MENU,GtkRecentChooserMenu))    ! macro
    const GDK_KEY_ISO_Continuous_Underline   = 0xfe30    ! macro
    const GTK_IS_CHECK_BUTTON                = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_CHECK_BUTTON))    ! macro
    const GTK_TYPE_DEST_DEFAULTS             = (gtk_dest_defaults_get_type())    ! macro
    const GDK_KEY_Hangul_J_Ieung             = 0xee8    ! macro
    const G_TYPE_IS_DERIVED                  = ((type)>G_TYPE_FUNDAMENTAL_MAX)    ! macro
    const GTK_IS_EVENT_BOX_CLASS             = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_EVENT_BOX))    ! macro
    const GDK_KEY_Thai_khokhwai              = 0xda4    ! macro
    const GTK_TYPE_PAGE_ORIENTATION          = (gtk_page_orientation_get_type())    ! macro
    const GDK_KEY_Armenian_JE                = 0x100054b    ! macro
    const GTK_CELL_AREA_BOX                  = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_CELL_AREA_BOX,GtkCellAreaBox))    ! macro
    const GTK_TREE_VIEW_COLUMN               = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_TREE_VIEW_COLUMN,GtkTreeViewColumn))    ! macro
    const G_TYPE_PARAM                       = G_TYPE_MAKE_FUNDAMENTAL(19)    ! macro
    const ATK_TYPE_HYPERLINK                 = (atk_hyperlink_get_type())    ! macro
    const GLIB_VERSION_MAX_ALLOWED           = (GLIB_VERSION_CUR_STABLE)    ! macro
    const GTK_IS_RADIO_BUTTON_CLASS          = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_RADIO_BUTTON))    ! macro
    const G_TYPE_CHECK_INSTANCE              = (_G_TYPE_CHI((GTypeInstance*)(instance)))    ! macro
    const GTK_TYPE_VPANED                    = (gtk_vpaned_get_type())    ! macro
    const G_CONVERTER                        = (G_TYPE_CHECK_INSTANCE_CAST((obj),G_TYPE_CONVERTER,GConverter))    ! macro
    const GTK_CELL_VIEW_GET_CLASS            = (G_TYPE_INSTANCE_GET_CLASS((inst),GTK_TYPE_CELL_VIEW,GtkCellViewClass))    ! macro
    const GTK_TYPE_CHECK_BUTTON              = (gtk_check_button_get_type())    ! macro
    const G_IS_BUFFERED_OUTPUT_STREAM        = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_BUFFERED_OUTPUT_STREAM))    ! macro
    const GTK_TEXT_MARK_GET_CLASS            = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_TEXT_MARK,GtkTextMarkClass))    ! macro
    const G_IS_MENU_LINK_ITER                = (G_TYPE_CHECK_INSTANCE_TYPE((inst),G_TYPE_MENU_LINK_ITER))    ! macro
    const GDK_KEY_Thai_fofan                 = 0xdbf    ! macro
    const G_TYPE_APP_LAUNCH_CONTEXT          = (g_app_launch_context_get_type())    ! macro
    const GDK_KEY_braille_dot_10             = 0xfffa    ! macro
    const G_INPUT_STREAM_GET_CLASS           = (G_TYPE_INSTANCE_GET_CLASS((o),G_TYPE_INPUT_STREAM,GInputStreamClass))    ! macro
    const G_VARIANT_TYPE_UNIT                = ((const GVariantType*)"()")    ! macro
    const GDK_DEPRECATED                     = G_DEPRECATED    ! macro
    const GTK_TYPE_PANED                     = (gtk_paned_get_type())    ! macro
    const GDK_KEY_wacute                     = 0x1001e83    ! macro
    const G_VALUE_HOLDS_UCHAR                = (G_TYPE_CHECK_VALUE_TYPE((value),G_TYPE_UCHAR))    ! macro
    const GTK_SEPARATOR_TOOL_ITEM            = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_SEPARATOR_TOOL_ITEM,GtkSeparatorToolItem))    ! macro
    const GDK_WINDOW_GET_CLASS               = (G_TYPE_INSTANCE_GET_CLASS((obj),GDK_TYPE_WINDOW,GdkWindowClass))    ! macro
    const GDK_KEY_umacron                    = 0x3fe    ! macro
    const G_FILTER_OUTPUT_STREAM_GET_CLASS   = (G_TYPE_INSTANCE_GET_CLASS((o),G_TYPE_FILTER_OUTPUT_STREAM,GFilterOutputStreamClass))    ! macro
    const GDK_KEY_Armenian_apostrophe        = 0x100055a    ! macro
    const GDK_KEY_Thai_thanthakhat           =  0xdec    ! macro
    const GDK_KEY_Greek_OMEGA                =  0x7d9    ! macro
    const G_HAVE_INLINE                      =  1    ! macro
    const G_TYPE_FILE_MONITOR                = (g_file_monitor_get_type())    ! macro
    const GTK_TYPE_STYLE_PROPERTIES          = (gtk_style_properties_get_type())    ! macro
    const GDK_KEY_Break                      = 0xff6b    ! macro
    const GUINT64_SWAP_LE_BE_CONSTANT        = ((guint64)((((guint64)(val)&(guint64)G_GINT64_CONSTANT(0x00000000000000ffU))<<56)|(((guint64)(val)&(guint64)G_GINT64_CONSTANT(0x000000000000ff00U))<<40)|(((guint64)(val)&(guint64)G_GINT64_CONSTANT(0x0000000000ff0000U))<<24)|(((guint64)(val)&(guint64)G_GINT64_CONSTANT(0x00000000ff000000U))<<8)|(((guint64)(val)&(guint64)G_GINT64_CONSTANT(0x000000ff00000000U))>>8)|(((guint64)(val)&(guint64)G_GINT64_CONSTANT(0x0000ff0000000000U))>>24)|(((guint64)(val)&(guint64)G_GINT64_CONSTANT(0x00ff000000000000U))>>40)|(((guint64)(val)&(guint64)G_GINT64_CONSTANT(0xff00000000000000U))>>56)))    ! macro
    const GDK_KEY_MillSign                   = 0x10020a5    ! macro
    const ATK_HYPERLINK_IMPL                 =  G_TYPE_CHECK_INSTANCE_CAST((obj),ATK_TYPE_HYPERLINK_IMPL,AtkHyperlinkImpl)    ! macro
    const GTK_CELL_AREA                      = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_CELL_AREA,GtkCellArea))    ! macro
    const G_IS_OBJECT                        = (G_TYPE_CHECK_INSTANCE_TYPE((object),G_TYPE_OBJECT))    ! macro
    const GDK_KEY_Armenian_KE                = 0x1000554    ! macro
    const GDK_KEY_Thai_dochada               =  0xdae    ! macro
    const G_PROXY                            = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_PROXY,GProxy))    ! macro
    const G_IS_VOLUME_MONITOR_CLASS          = (G_TYPE_CHECK_CLASS_TYPE((k),G_TYPE_VOLUME_MONITOR))    ! macro
    const GDK_KEY_ballotcross                = 0xaf4    ! macro
    const GTK_IS_TEXT_CHILD_ANCHOR           = (G_TYPE_CHECK_INSTANCE_TYPE((object),GTK_TYPE_TEXT_CHILD_ANCHOR))    ! macro
    const g_hash_table_thaw                  = ((void)0)    ! macro
    const GDK_KEY_Georgian_cil               = 0x10010ec    ! macro
    const GTK_STOCK_PRINT_PREVIEW            = "gtk-print-preview"    ! macro
    const GTK_STYLE_PROVIDER_PRIORITY_SETTINGS = 400    ! macro
    const g_atexit                           =  atexit(func)    ! macro
    const GTK_TYPE_PRINT_SETTINGS            = (gtk_print_settings_get_type())    ! macro
    const GTK_IS_TEXT_MARK_CLASS             = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_TEXT_MARK))    ! macro
    const G_VARIANT_TYPE_VARIANT             = ((const GVariantType*)"v")    ! macro
    const PANGO_TYPE_ATTR_TYPE               = (pango_attr_type_get_type())    ! macro
    const G_TYPE_IO_STREAM                   = (g_io_stream_get_type())    ! macro
    const ATK_WINDOW_GET_IFACE               = (G_TYPE_INSTANCE_GET_INTERFACE((obj),ATK_TYPE_WINDOW,AtkWindowIface))    ! macro
    const GTK_PRINT_SETTINGS_USE_COLOR       = "use-color"    ! macro
    const G_IS_SOCKET_ADDRESS_ENUMERATOR_CLASS = (G_TYPE_CHECK_CLASS_TYPE((k),G_TYPE_SOCKET_ADDRESS_ENUMERATOR))    ! macro
    const GTK_TOOL_BUTTON_GET_CLASS          = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_TOOL_BUTTON,GtkToolButtonClass))    ! macro
    const G_DBUS_CONNECTION                  = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_DBUS_CONNECTION,GDBusConnection))    ! macro
    const PANGO_ASCENT                       = (-(rect).y)    ! macro
    const g_thread_supported                 = (1)    ! macro
    const GDK_KEY_topintegral                = 0x8a4    ! macro
    const cairo_transform_point              =  cairo_transform_point_REPLACED_BY_cairo_user_to_device    ! macro
    const GDK_KEY_Arabic_hamza_above         =  0x1000654    ! macro
    const G_TYPE_DBUS_SIGNAL_INFO            = (g_dbus_signal_info_get_type())    ! macro
    const GDK_KEY_C_h                        = 0xfea4    ! macro
    const G_IS_TLS_PASSWORD_CLASS            = (G_TYPE_CHECK_CLASS_TYPE((k),G_TYPE_TLS_PASSWORD))    ! macro
    const GDK_KEY_KP_Tab                     = 0xff89    ! macro
    const GDK_KEY_KP_Add                     =  0xffab    ! macro
    const g_chunk_free                       = (g_mem_chunk_free(mem_chunk,mem))    ! macro
    const GDK_KEY_Thai_yoyak                 = 0xdc2    ! macro
    const GDK_KEY_onehalf                    =  0x0bd    ! macro
    const g_chunk_new                        = ((type*)g_mem_chunk_alloc(chunk))    ! macro
    const GDK_KEY_Cyrillic_PE                = 0x6f0    ! macro
    const GDK_KEY_notidentical               =  0x1002262    ! macro
    const G_POLLABLE_OUTPUT_STREAM           = (G_TYPE_CHECK_INSTANCE_CAST((obj),G_TYPE_POLLABLE_OUTPUT_STREAM,GPollableOutputStream))    ! macro
    const GDK_KEY_Go                         = 0x1008ff5f    ! macro
    const GTK_TEXT_TAG                       = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_TEXT_TAG,GtkTextTag))    ! macro
    const g_atomic_pointer_xor               = (g_atomic_pointer_xor((atomic),(gsize)(val)))    ! macro
    const GDK_KEY_period                     = 0x02e    ! macro
    const GDK_KEY_Hangul_Start               =  0xff32    ! macro
    const G_SHELL_ERROR                      =  g_shell_error_quark()    ! macro
    const GTK_IS_ALIGNMENT                   = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_ALIGNMENT))    ! macro
    const GTK_MOUNT_OPERATION_GET_CLASS      = (G_TYPE_INSTANCE_GET_CLASS((o),GTK_TYPE_MOUNT_OPERATION,GtkMountOperationClass))    ! macro
    const GDK_KEY_Georgian_man               = 0x10010db    ! macro
    const GTK_IS_CELL_AREA_CONTEXT_CLASS     = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_CELL_AREA_CONTEXT))    ! macro
    const GDK_KEY_bracketleft                = 0x05b    ! macro
    const GDK_KEY_dead_currency              =  0xfe6f    ! macro
    const GDK_KEY_braille_dots_12345678      =  0x10028ff    ! macro
    const GPOINTER_TO_UINT                   = ((guint)(guint64)(p))    ! macro
    const GTK_TYPE_CELL_RENDERER_TEXT        = (gtk_cell_renderer_text_get_type())    ! macro
    const G_TRYLOCK                          = g_mutex_trylock(&G_LOCK_NAME(name))    ! macro
    const GDK_KEY_3270_Rule                  = 0xfd14    ! macro
    const GDK_KEY_Thai_khorakhang            =  0xda6    ! macro
    const GDK_KEY_SlowKeys_Enable            =  0xfe73    ! macro
    const GDK_KEY_acircumflexacute           =  0x1001ea5    ! macro
    const G_KEY_FILE_DESKTOP_KEY_NOT_SHOW_IN = "NotShowIn"    ! macro
    const PANGO_IS_FONTSET                   = (G_TYPE_CHECK_INSTANCE_TYPE((object),PANGO_TYPE_FONTSET))    ! macro
    const GDK_KEY_partialderivative          = 0x8ef    ! macro
    const GDK_KEY_Korean_Won                 =  0xeff    ! macro
    const GTK_STOCK_CLEAR                    = "gtk-clear"    ! macro
    const GTK_STYLE_PROVIDER_GET_IFACE       = (G_TYPE_INSTANCE_GET_INTERFACE((o),GTK_TYPE_STYLE_PROVIDER,GtkStyleProviderIface))    ! macro
    const G_TYPE_DBUS_MESSAGE                = (g_dbus_message_get_type())    ! macro
    const GTK_IS_WINDOW_GROUP_CLASS          = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_WINDOW_GROUP))    ! macro
    const GTK_ENTRY_CLASS                    = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_ENTRY,GtkEntryClass))    ! macro
    const GTK_TYPE_CALENDAR                  = (gtk_calendar_get_type())    ! macro
    const g_message                          = g_log(G_LOG_DOMAIN,G_LOG_LEVEL_MESSAGE,__VA_ARGS__)    ! macro
    const GDK_KEY_udoubleacute               = 0x1fb    ! macro
    const GDK_KEY_signifblank                =  0xaac    ! macro
    const GTK_IS_FONT_CHOOSER_DIALOG_CLASS   = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_FONT_CHOOSER_DIALOG))    ! macro
    const GTK_IS_TOGGLE_BUTTON_CLASS         = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_TOGGLE_BUTTON))    ! macro
    const GTK_TREE_STORE                     = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_TREE_STORE,GtkTreeStore))    ! macro
    const GTK_STYLE_CLASS_SCALE_HAS_MARKS_ABOVE = "scale-has-marks-above"    ! macro
    const GDK_KEY_L1                         = 0xffc8    ! macro
    const GTK_IS_ICON_THEME_CLASS            = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_ICON_THEME))    ! macro
    const GDK_KEY_Uhornacute                 = 0x1001ee8    ! macro
    const GDK_KEY_L2                         =  0xffc9    ! macro
    const GDK_KEY_Cyrillic_shha              =  0x10004bb    ! macro
    const GDK_KEY_dead_hook                  =  0xfe61    ! macro
    const GDK_KEY_L3                         =  0xffca    ! macro
    const GTK_COLOR_SELECTION_DIALOG         = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_COLOR_SELECTION_DIALOG,GtkColorSelectionDialog))    ! macro
    const gdk_pixbuf_save                    = gdk_pixbuf_save_utf8    ! macro
    const GDK_KEY_L4                         =  0xffcb    ! macro
    const GDK_KEY_3270_ChangeScreen          =  0xfd19    ! macro
    const GDK_KEY_Hangul_J_PanSios           =  0xef8    ! macro
    const GDK_KEY_L5                         =  0xffcc    ! macro
    const GDK_KEY_Georgian_phar              =  0x10010e4    ! macro
    const GDK_KEY_L6                         =  0xffcd    ! macro
    const cairo_xlib_surface_create_for_window_with_visual =  cairo_xlib_surface_create_for_window_with_visual_REPLACED_BY_cairo_xlib_surface_create    ! macro
    const GTK_IS_RADIO_ACTION_CLASS          = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_RADIO_ACTION))    ! macro
    const GDK_KEY_L7                         = 0xffce    ! macro
    const G_TYPE_FILE_ATTRIBUTE_STATUS       = (g_file_attribute_status_get_type())    ! macro
    const GTK_ICON_FACTORY_GET_CLASS         = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_ICON_FACTORY,GtkIconFactoryClass))    ! macro
    const GDK_KEY_L8                         = 0xffcf    ! macro
    const GDK_KEY_L9                         =  0xffd0    ! macro
    const GDK_KEY_Thai_loling                =  0xdc5    ! macro
    const g_warn_if_reached                  =  do{g_warn_message(G_LOG_DOMAIN,__FILE__,__LINE__,G_STRFUNC,NULL);}while(0)    ! macro
    const GTK_STYLE_CLASS_NOTEBOOK           = "notebook"    ! macro
    const GTK_IS_LAYOUT_CLASS                = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_LAYOUT))    ! macro
    const GDK_KEY_kcedilla                   = 0x3f3    ! macro
    const GDK_KEY_Greek_RHO                  =  0x7d1    ! macro
    const G_FILE_ATTRIBUTE_STANDARD_ALLOCATED_SIZE = "standard::allocated-size"    ! macro
    const ATK_GOBJECT_ACCESSIBLE_GET_CLASS   = (G_TYPE_INSTANCE_GET_CLASS((obj),ATK_TYPE_GOBJECT_ACCESSIBLE,AtkGObjectAccessibleClass))    ! macro
    const GTK_IS_MENU_SHELL                  = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_MENU_SHELL))    ! macro
    const GDK_KEY_Greek_IOTAdiaeresis        = 0x7a5    ! macro
    const G_IO_TYPE_MODULE                   = (g_io_module_get_type())    ! macro
    const G_VOLUME_IDENTIFIER_KIND_UUID      = "uuid"    ! macro
    const G_ACTION_GROUP                     = (G_TYPE_CHECK_INSTANCE_CAST((inst),G_TYPE_ACTION_GROUP,GActionGroup))    ! macro
    const GDK_KEY_Armenian_GIM               = 0x1000533    ! macro
    const GTK_OFFSCREEN_WINDOW_CLASS         = (G_TYPE_CHECK_CLASS_CAST((k),GTK_TYPE_OFFSCREEN_WINDOW,GtkOffscreenWindowClass))    ! macro
    const GDK_TYPE_SCROLL_DIRECTION          = (gdk_scroll_direction_get_type())    ! macro
    const g_atomic_int_inc                   = (g_atomic_int_inc((gint*)(atomic)))    ! macro
    const GTK_TREE_VIEW_COLUMN_GET_CLASS     = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_TREE_VIEW_COLUMN,GtkTreeViewColumnClass))    ! macro
    const GTK_BUILDER_GET_CLASS              = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_BUILDER,GtkBuilderClass))    ! macro
    const g_date_month                       = g_date_get_month    ! macro
    const GDK_KEY_apostrophe                 =  0x027    ! macro
    const GTK_HSV                            = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_HSV,GtkHSV))    ! macro
    const G_TLS_DATABASE                     = (G_TYPE_CHECK_INSTANCE_CAST((inst),G_TYPE_TLS_DATABASE,GTlsDatabase))    ! macro
    const ATK_IS_RELATION_SET                = (G_TYPE_CHECK_INSTANCE_TYPE((obj),ATK_TYPE_RELATION_SET))    ! macro
    const GDK_KEY_because                    = 0x1002235    ! macro
    const g_main_destroy                     =  g_main_loop_unref(loop)    ! macro
    const GDK_KEY_voicedsound                = 0x4de    ! macro
    const GDK_KEY_Georgian_vin               =  0x10010d5    ! macro
    const GTK_TYPE_IMAGE_MENU_ITEM           = (gtk_image_menu_item_get_type())    ! macro
    const G_IS_TYPE_PLUGIN                   = (G_TYPE_CHECK_INSTANCE_TYPE((inst),G_TYPE_TYPE_PLUGIN))    ! macro
    const GDK_KEY_MySites                    = 0x1008ff67    ! macro
    const ATK_IS_HYPERTEXT                   =  G_TYPE_CHECK_INSTANCE_TYPE((obj),ATK_TYPE_HYPERTEXT)    ! macro
    const G_SIGNAL_MATCH_MASK                = 0x3f    ! macro
    const GDK_KEY_toprightsqbracket          =  0x8a9    ! macro
    const G_MEMORY_INPUT_STREAM              = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_MEMORY_INPUT_STREAM,GMemoryInputStream))    ! macro
    const GTK_CHECK_BUTTON                   = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_CHECK_BUTTON,GtkCheckButton))    ! macro
    const GTK_TYPE_ATTACH_OPTIONS            = (gtk_attach_options_get_type())    ! macro
    const G_IS_NETWORK_SERVICE               = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_NETWORK_SERVICE))    ! macro
    const GTK_IS_CHECK_MENU_ITEM             = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_CHECK_MENU_ITEM))    ! macro
    const GTK_ACCEL_GROUP_GET_CLASS          = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_ACCEL_GROUP,GtkAccelGroupClass))    ! macro
    const GDK_KEY_BackForward                = 0x1008ff3f    ! macro
    const GDK_KEY_emopenrectangle            =  0xacf    ! macro
    const GTK_CELL_RENDERER_SPINNER          = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_CELL_RENDERER_SPINNER,GtkCellRendererSpinner))    ! macro
    const G_MEMORY_OUTPUT_STREAM             = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_MEMORY_OUTPUT_STREAM,GMemoryOutputStream))    ! macro
    const G_TYPE_PARAM_LONG                  = (g_param_spec_types[5])    ! macro
    const GTK_TYPE_TEXT_TAG                  = (gtk_text_tag_get_type())    ! macro
    const GDK_KEY_Armenian_NU                = 0x1000546    ! macro
    const GTK_IS_PRINT_CONTEXT               = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_PRINT_CONTEXT))    ! macro
    const G_MININT                           = INT_MIN    ! macro
    const GDK_KEY_Greek_omega                =  0x7f9    ! macro
    const G_DEFINE_ABSTRACT_TYPE             =  G_DEFINE_TYPE_EXTENDED(TN,t_n,T_P,G_TYPE_FLAG_ABSTRACT,{})    ! macro
    const GTK_STYLE_CLASS_TROUGH             = "trough"    ! macro
    const GTK_PRINT_OPERATION_PREVIEW        = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_PRINT_OPERATION_PREVIEW,GtkPrintOperationPreview))    ! macro
    const GDK_KEY_brokenbar                  = 0x0a6    ! macro
    const g_main_pending                     =  g_main_context_pending(NULL)    ! macro
    const g_atomic_int_set                   = (g_atomic_int_set((gint*)(atomic),(gint)(newval)))    ! macro
    const g_date_monday_weeks_in_year        = g_date_get_monday_weeks_in_year    ! macro
    const GDK_SELECTION_TYPE_BITMAP          =  _GDK_MAKE_ATOM(5)    ! macro
    const GDK_KEY_Page_Down                  = 0xff56    ! macro
    const GDK_KEY_SingleCandidate            =  0xff3c    ! macro
    const GTK_TYPE_CELL_RENDERER_PIXBUF      = (gtk_cell_renderer_pixbuf_get_type())    ! macro
    const GTK_PRINT_SETTINGS_OUTPUT_FILE_FORMAT = "output-file-format"    ! macro
    const GDK_KEY_braille_dots_1345678       = 0x10028fd    ! macro
    const GDK_KEY_Armenian_ZHE               =  0x100053a    ! macro
    const GLIB_SYSDEF_MSG_PEEK               =  2    ! macro
    const GTK_TYPE_RECENT_INFO               = (gtk_recent_info_get_type())    ! macro
    const GDK_KEY_Georgian_khar              = 0x10010e5    ! macro
    const g_test_undefined                   = (g_test_config_vars->test_undefined)    ! macro
    const G_KEY_FILE_DESKTOP_KEY_COMMENT     = "Comment"    ! macro
    const GDK_KEY_KP_Delete                  = 0xff9f    ! macro
    const GDK_KEY_KP_Decimal                 =  0xffae    ! macro
    const cairo_xlib_surface_create_for_pixmap_with_visual =  cairo_xlib_surface_create_for_pixmap_with_visual_REPLACED_BY_cairo_xlib_surface_create    ! macro
    const G_FLAGS_CLASS_TYPE                 = (G_TYPE_FROM_CLASS(class))    ! macro
    const GDK_KEY_AudioRandomPlay            = 0x1008ff99    ! macro
    const GTK_FONT_CHOOSER_DIALOG            = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_FONT_CHOOSER_DIALOG,GtkFontChooserDialog))    ! macro
    const G_PARAM_SPEC_OBJECT                = (G_TYPE_CHECK_INSTANCE_CAST((pspec),G_TYPE_PARAM_OBJECT,GParamSpecObject))    ! macro
    const GDK_KEYMAP                         = (G_TYPE_CHECK_INSTANCE_CAST((object),GDK_TYPE_KEYMAP,GdkKeymap))    ! macro
    const GTK_IS_TOGGLE_ACTION_CLASS         = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_TOGGLE_ACTION))    ! macro
    const GTK_TYPE_BORDER_STYLE              = (gtk_border_style_get_type())    ! macro
    const G_SOURCE_REMOVE                    = FALSE    ! macro
    const GDK_KEY_underscore                 =  0x05f    ! macro
    const GDK_KEY_Lcedilla                   =  0x3a6    ! macro
    const GDK_KEY_Cyrillic_ha_descender      =  0x10004b3    ! macro
    const GDK_KEY_Cyrillic_TE                =  0x6f4    ! macro
    const G_IS_SOCKET_CONNECTION             = (G_TYPE_CHECK_INSTANCE_TYPE((inst),G_TYPE_SOCKET_CONNECTION))    ! macro
    const G_ALLOCATOR_LIST                   = 1    ! macro
    const GDK_KEY_Armenian_PE                =  0x100054a    ! macro
    const G_TYPE_NETWORK_MONITOR             = (g_network_monitor_get_type())    ! macro
    const G_FILE_OUTPUT_STREAM_GET_CLASS     = (G_TYPE_INSTANCE_GET_CLASS((o),G_TYPE_FILE_OUTPUT_STREAM,GFileOutputStreamClass))    ! macro
    const GDK_KEY_Eabovedot                  = 0x3cc    ! macro
    const GDK_KEY_Armenian_full_stop         =  0x1000589    ! macro
    const G_DBUS_OBJECT_MANAGER_CLIENT_CLASS = (G_TYPE_CHECK_CLASS_CAST((k),G_TYPE_DBUS_OBJECT_MANAGER_CLIENT,GDBusObjectManagerClientClass))    ! macro
    const G_DBUS_SERVER                      = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_DBUS_SERVER,GDBusServer))    ! macro
    const GDK_KEY_dead_horn                  = 0xfe62    ! macro
    const GDK_KEY_Thai_saraaimaimuan         =  0xde3    ! macro
    const GDK_KEY_opentribulletup            =  0xae3    ! macro
    const GDK_BUTTON_SECONDARY               = (3)    ! macro
    const G_IS_DBUS_OBJECT_MANAGER_SERVER    = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_DBUS_OBJECT_MANAGER_SERVER))    ! macro
    const GDK_KEY_Ehook                      = 0x1001eba    ! macro
    const GTK_IS_CELL_RENDERER_ACCEL         = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_CELL_RENDERER_ACCEL))    ! macro
    const GTK_STATUSBAR                      = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_STATUSBAR,GtkStatusbar))    ! macro
    const G_VA_COPY                          = va_copy    ! macro
    const GTK_STYLE_CONTEXT_GET_CLASS        = (G_TYPE_INSTANCE_GET_CLASS((o),GTK_TYPE_STYLE_CONTEXT,GtkStyleContextClass))    ! macro
    const GTK_IS_BUTTON                      = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_BUTTON))    ! macro
    const GTK_IS_CALENDAR                    = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_CALENDAR))    ! macro
    const G_TIME_SPAN_DAY                    = (G_GINT64_CONSTANT(86400000000))    ! macro
    const G_IS_INET_ADDRESS_MASK             = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_INET_ADDRESS_MASK))    ! macro
    const GDK_KEY_Cyrillic_TSE               = 0x6e3    ! macro
    const GTK_TYPE_ORIENTATION               = (gtk_orientation_get_type())    ! macro
    const PANGO_TYPE_STRETCH                 = (pango_stretch_get_type())    ! macro
    const ABS                                = (((a)<0)?-(a):(a))    ! macro
    const GDK_KEY_First_Virtual_Screen       = 0xfed0    ! macro
    const GDK_KEY_Alt_L                      =  0xffe9    ! macro
    const GDK_DRAG_CONTEXT                   = (G_TYPE_CHECK_INSTANCE_CAST((object),GDK_TYPE_DRAG_CONTEXT,GdkDragContext))    ! macro
    const GDK_KEY_Arabic_0                   = 0x1000660    ! macro
    const G_TYPE_IO_ERROR_ENUM               = (g_io_error_enum_get_type())    ! macro
    const GDK_KEY_Hangul_J_Cieuc             = 0xeea    ! macro
    const G_TYPE_IO_MODULE_SCOPE_FLAGS       = (g_io_module_scope_flags_get_type())    ! macro
    const GDK_KEY_Arabic_1                   = 0x1000661    ! macro
    const G_PI_2                             =  1.5707963267948966192313216916397514420985846996876    ! macro
    const GTK_IS_HBUTTON_BOX_CLASS           = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_HBUTTON_BOX))    ! macro
    const GTK_TYPE_CELL_RENDERER_ACCEL       = (gtk_cell_renderer_accel_get_type())    ! macro
    const G_INET_SOCKET_ADDRESS_CLASS        = (G_TYPE_CHECK_CLASS_CAST((k),G_TYPE_INET_SOCKET_ADDRESS,GInetSocketAddressClass))    ! macro
    const GDK_KEY_Arabic_2                   = 0x1000662    ! macro
    const G_IS_CONVERTER_INPUT_STREAM        = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_CONVERTER_INPUT_STREAM))    ! macro
    const GTK_BUILDABLE                      = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_BUILDABLE,GtkBuildable))    ! macro
    const GLONG_FROM_LE                      = (GLONG_TO_LE(val))    ! macro
    const GDK_KEY_RepeatKeys_Enable          = 0xfe72    ! macro
    const GDK_KEY_Arabic_3                   =  0x1000663    ! macro
    const G_PI_4                             =  0.78539816339744830961566084581987572104929234984378    ! macro
    const GTK_STOCK_GOTO_BOTTOM              = "gtk-goto-bottom"    ! macro
    const GTK_TYPE_TEXT_BUFFER_TARGET_INFO   = (gtk_text_buffer_target_info_get_type())    ! macro
    const GDK_KEY_multiply                   = 0x0d7    ! macro
    const GTK_IS_TREE_STORE                  = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_TREE_STORE))    ! macro
    const GTK_TYPE_VSCROLLBAR                = (gtk_vscrollbar_get_type())    ! macro
    const GDK_KEY_Arabic_4                   = 0x1000664    ! macro
    const GDK_KEY_Alt_R                      =  0xffea    ! macro
    const GTK_STYLE_CLASS_OSD                = "osd"    ! macro
    const G_TYPE_EMBLEM                      = (g_emblem_get_type())    ! macro
    const GDK_KEY_OE                         = 0x13bc    ! macro
    const GDK_KEY_Arabic_5                   =  0x1000665    ! macro
    const GTK_IS_RECENT_CHOOSER_MENU_CLASS   = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_RECENT_CHOOSER_MENU))    ! macro
    const GTK_IS_IMAGE                       = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_IMAGE))    ! macro
    const GDK_KEY_Control_L                  = 0xffe3    ! macro
    const GDK_KEY_Arabic_6                   =  0x1000666    ! macro
    const GTK_IS_WINDOW_GROUP                = (G_TYPE_CHECK_INSTANCE_TYPE((object),GTK_TYPE_WINDOW_GROUP))    ! macro
    const G_FILE_INPUT_STREAM                = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_FILE_INPUT_STREAM,GFileInputStream))    ! macro
    const PANGO_TYPE_RENDER_PART             = (pango_render_part_get_type())    ! macro
    const GDK_KEY_Arabic_7                   = 0x1000667    ! macro
    const GDK_KEY_Hangul_Pieub               =  0xeb2    ! macro
    const GDK_KEY_partdifferential           =  0x1002202    ! macro
    const GDK_KEY_Arabic_8                   =  0x1000668    ! macro
    const g_date_day                         =  g_date_get_day    ! macro
    const GDK_KEY_Right                      =  0xff53    ! macro
    const G_MEMORY_INPUT_STREAM_CLASS        = (G_TYPE_CHECK_CLASS_CAST((k),G_TYPE_MEMORY_INPUT_STREAM,GMemoryInputStreamClass))    ! macro
    const GDK_KEY_includes                   = 0x8db    ! macro
    const g_scanner_remove_symbol            =  G_STMT_START{g_scanner_scope_remove_symbol((scanner),0,(symbol));}G_STMT_END    ! macro
    const GDK_KEY_Arabic_9                   =  0x1000669    ! macro
    const GTK_TYPE_MOVEMENT_STEP             = (gtk_movement_step_get_type())    ! macro
    const G_TYPE_RESOLVER                    = (g_resolver_get_type())    ! macro
    const gtk_binary_age                     = gtk_get_binary_age()    ! macro
    const GTK_STOCK_FIND_AND_REPLACE         = "gtk-find-and-replace"    ! macro
    const PANGO_IS_FONT_FAMILY               = (G_TYPE_CHECK_INSTANCE_TYPE((object),PANGO_TYPE_FONT_FAMILY))    ! macro
    const G_HAVE_GINT64                      = 1    ! macro
    const GDK_KEY_Control_R                  =  0xffe4    ! macro
    const GDK_KEY_Armenian_RA                =  0x100054c    ! macro
    const GTK_VBOX_GET_CLASS                 = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_VBOX,GtkVBoxClass))    ! macro
    const GDK_KEY_identical                  = 0x8cf    ! macro
    const GTK_PANED_CLASS                    = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_PANED,GtkPanedClass))    ! macro
    const GTK_IS_SCROLLED_WINDOW_CLASS       = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_SCROLLED_WINDOW))    ! macro
    const GTK_TYPE_WINDOW_GROUP              = (gtk_window_group_get_type())    ! macro
    const GTK_ACTIONABLE                     = (G_TYPE_CHECK_INSTANCE_CAST((inst),GTK_TYPE_ACTIONABLE,GtkActionable))    ! macro
    const PANGO_FONT_FAMILY                  = (G_TYPE_CHECK_INSTANCE_CAST((object),PANGO_TYPE_FONT_FAMILY,PangoFontFamily))    ! macro
    const G_TYPE_PLUGIN_CLASS                = (G_TYPE_CHECK_CLASS_CAST((vtable),G_TYPE_TYPE_PLUGIN,GTypePluginClass))    ! macro
    const G_IS_PARAM_SPEC_FLAGS              = (G_TYPE_CHECK_INSTANCE_TYPE((pspec),G_TYPE_PARAM_FLAGS))    ! macro
    const GDK_KEY_Cyrillic_VE                = 0x6f7    ! macro
    const GTK_IS_RADIO_MENU_ITEM             = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_RADIO_MENU_ITEM))    ! macro
    const GDK_KEY_dead_belowdot              = 0xfe60    ! macro
    const GTK_UI_MANAGER_GET_CLASS           = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_UI_MANAGER,GtkUIManagerClass))    ! macro
    const GDK_KEY_Armenian_RE                = 0x1000550    ! macro
    const GDK_KEY_enfilledcircbullet         =  0xae6    ! macro
    const GDK_KEY_ISO_Release_Margin_Right   =  0xfe2a    ! macro
    const GDK_KEY_hebrew_he                  =  0xce4    ! macro
    const GTK_STOCK_MEDIA_PREVIOUS           = "gtk-media-previous"    ! macro
    const GTK_TYPE_MESSAGE_TYPE              = (gtk_message_type_get_type())    ! macro
    const g_get_tmp_dir                      = g_get_tmp_dir_utf8    ! macro
    const GDK_APP_LAUNCH_CONTEXT             = (G_TYPE_CHECK_INSTANCE_CAST((o),GDK_TYPE_APP_LAUNCH_CONTEXT,GdkAppLaunchContext))    ! macro
    const G_TYPE_PARAM_INT                   = (g_param_spec_types[3])    ! macro
    const G_TYPE_DOUBLE                      = G_TYPE_MAKE_FUNDAMENTAL(15)    ! macro
    const GDK_KEY_lowleftcorner              = 0x9ed    ! macro
    const GDK_KEY_BounceKeys_Enable          =  0xfe74    ! macro
    const G_FILE_ATTRIBUTE_UNIX_IS_MOUNTPOINT = "unix::is-mountpoint"    ! macro
    const GTK_TYPE_JUNCTION_SIDES            = (gtk_junction_sides_get_type())    ! macro
    const G_MAXUINT16                        = ((guint16)0xffff)    ! macro
    const GTK_IS_TOOL_BUTTON                 = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_TOOL_BUTTON))    ! macro
    const G_TYPE_VARIANT_BUILDER             = (g_variant_builder_get_type())    ! macro
    const GTK_LAYOUT_CLASS                   = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_LAYOUT,GtkLayoutClass))    ! macro
    const G_FILE_ATTRIBUTE_STANDARD_EDIT_NAME = "standard::edit-name"    ! macro
    const GDK_KEY_Zenkaku                    = 0xff28    ! macro
    const PANGO_TYPE_FONT_FAMILY             = (pango_font_family_get_type())    ! macro
    const G_PROXY_ADDRESS                    = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_PROXY_ADDRESS,GProxyAddress))    ! macro
    const GDK_KEY_TouchpadOff                = 0x1008ffb1    ! macro
    const GDK_KEY_dead_doubleacute           =  0xfe59    ! macro
    const GDK_KEY_Sinh_uu2                   =  0x1000dd6    ! macro
    const GTK_HSV_CLASS                      = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_HSV,GtkHSVClass))    ! macro
    const GDK_KEY_topleftsqbracket           = 0x8a7    ! macro
    const GTK_TYPE_SCROLLABLE                = (gtk_scrollable_get_type())    ! macro
    const GTK_TYPE_ICON_SIZE                 = (gtk_icon_size_get_type())    ! macro
    const GDK_KEY_scircumflex                = 0x2fe    ! macro
    const GTK_IS_TEXT_TAG_TABLE_CLASS        = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_TEXT_TAG_TABLE))    ! macro
    const GDK_KEY_braille_dots_2345678       = 0x10028fe    ! macro
    const GDK_KEY_Sinh_lla                   =  0x1000dc5    ! macro
    const GTK_ACTIVATABLE                    = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_ACTIVATABLE,GtkActivatable))    ! macro
    const GDK_KEY_Imacron                    = 0x3cf    ! macro
    const G_FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET = "standard::symlink-target"    ! macro
    const GTK_IS_SCROLLED_WINDOW             = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_SCROLLED_WINDOW))    ! macro
    const ATK_TYPE_REGISTRY                  = (atk_registry_get_type())    ! macro
    const GTK_FONT_CHOOSER_WIDGET            = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_FONT_CHOOSER_WIDGET,GtkFontChooserWidget))    ! macro
    const GTK_STYLE_CLASS_IMAGE              = "image"    ! macro
    const GDK_KEY_Uogonek                    = 0x3d9    ! macro
    const GDK_PIXBUF_SIMPLE_ANIM_GET_CLASS   = (G_TYPE_INSTANCE_GET_CLASS((obj),GDK_TYPE_PIXBUF_SIMPLE_ANIM,GdkPixbufSimpleAnimClass))    ! macro
    const G_IS_CANCELLABLE                   = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_CANCELLABLE))    ! macro
    const GTK_STOCK_MEDIA_NEXT               = "gtk-media-next"    ! macro
    const GDK_KEY_zabovedot                  = 0x1bf    ! macro
    const GDK_KEY_Pointer_Accelerate         =  0xfefa    ! macro
    const GTK_TYPE_TREE_ITER                 = (gtk_tree_iter_get_type())    ! macro
    const GDK_KEY_kana_SHI                   = 0x4bc    ! macro
    const G_TYPE_MENU                        = (g_menu_get_type())    ! macro
    const GTK_IS_STATUS_ICON_CLASS           = (G_TYPE_CHECK_CLASS_TYPE((k),GTK_TYPE_STATUS_ICON))    ! macro
    const GDK_KEY_R1                         = 0xffd2    ! macro
    const GTK_IS_TEXT_TAG                    = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_TEXT_TAG))    ! macro
    const GDK_KEY_R2                         = 0xffd3    ! macro
    const GDK_KEY_Armenian_SE                =  0x100054d    ! macro
    const GTK_TYPE_SYMBOLIC_COLOR            = (gtk_symbolic_color_get_type())    ! macro
    const G_STATIC_RW_LOCK_INIT              = {G_STATIC_MUTEX_INIT,NULL,NULL,0,FALSE,0,0}    ! macro
    const GDK_KEY_R3                         = 0xffd4    ! macro
    const GDK_KEY_R4                         =  0xffd5    ! macro
    const GDK_KEY_FrameForward               =  0x1008ff9e    ! macro
    const GDK_KEY_Shop                       =  0x1008ff36    ! macro
    const G_TYPE_CLOSURE                     = (g_closure_get_type())    ! macro
    const GTK_STYLE_CLASS_MENUITEM           = "menuitem"    ! macro
    const GDK_KEY_R5                         = 0xffd6    ! macro
    const GDK_KEY_exclam                     =  0x021    ! macro
    const G_THREADED_SOCKET_SERVICE          = (G_TYPE_CHECK_INSTANCE_CAST((inst),G_TYPE_THREADED_SOCKET_SERVICE,GThreadedSocketService))    ! macro
    const G_MENU_ATTRIBUTE_ITER_GET_CLASS    = (G_TYPE_INSTANCE_GET_CLASS((inst),G_TYPE_MENU_ATTRIBUTE_ITER,GMenuAttributeIterClass))    ! macro
    const GTK_IS_TOGGLE_ACTION               = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_TOGGLE_ACTION))    ! macro
    const GDK_KEY_R6                         = 0xffd7    ! macro
    const GTK_IS_TREE_VIEW                   = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_TREE_VIEW))    ! macro
    const G_TYPE_ULONG                       = G_TYPE_MAKE_FUNDAMENTAL(9)    ! macro
    const GDK_KEY_AudioRewind                = 0x1008ff3e    ! macro
    const GDK_KEY_R7                         =  0xffd8    ! macro
    const GDK_KEY_User1KB                    =  0x1008ff85    ! macro
    const GDK_KEY_R8                         =  0xffd9    ! macro
    const g_dataset_id_remove_data           =  g_dataset_id_set_data((l),(k),NULL)    ! macro
    const GDK_KEY_R9                         = 0xffda    ! macro
    const GDK_KEY_fiveeighths                =  0xac5    ! macro
    const GTK_FRAME                          = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_FRAME,GtkFrame))    ! macro
    const PANGO_LAYOUT_GET_CLASS             = (G_TYPE_INSTANCE_GET_CLASS((obj),PANGO_TYPE_LAYOUT,PangoLayoutClass))    ! macro
    const GDK_KEY_dead_tilde                 = 0xfe53    ! macro
    const G_HAVE_GNUC_VARARGS                =  1    ! macro
    const GDK_KEY_atilde                     =  0x0e3    ! macro
    const GTK_TEXT_TAG_GET_CLASS             = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_TEXT_TAG,GtkTextTagClass))    ! macro
    const G_NATIVE_VOLUME_MONITOR            = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_NATIVE_VOLUME_MONITOR,GNativeVolumeMonitor))    ! macro
    const G_BINDING                          = (G_TYPE_CHECK_INSTANCE_CAST((obj),G_TYPE_BINDING,GBinding))    ! macro
    const GTK_TYPE_SELECTION_MODE            = (gtk_selection_mode_get_type())    ! macro
    const G_TEST_DBUS                        = (G_TYPE_CHECK_INSTANCE_CAST((obj),G_TYPE_TEST_DBUS,GTestDBus))    ! macro
    const GTK_BUILDER_CLASS                  = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_BUILDER,GtkBuilderClass))    ! macro
    const GTK_COLOR_CHOOSER                  = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_COLOR_CHOOSER,GtkColorChooser))    ! macro
    const GDK_KEY_hebrew_yod                 = 0xce9    ! macro
    const GDK_KEY_club                       =  0xaec    ! macro
    const G_IS_POLLABLE_INPUT_STREAM         = (G_TYPE_CHECK_INSTANCE_TYPE((obj),G_TYPE_POLLABLE_INPUT_STREAM))    ! macro
    const GDK_KEY_Redo                       = 0xff66    ! macro
    const G_MAXUINT32                        = ((guint32)0xffffffff)    ! macro
    const GTK_TYPE_CORNER_TYPE               = (gtk_corner_type_get_type())    ! macro
    const GDK_KEY_lefttack                   = 0xbdc    ! macro
    const G_IS_VFS_CLASS                     = (G_TYPE_CHECK_CLASS_TYPE((k),G_TYPE_VFS))    ! macro
    const GDK_KEY_Wgrave                     = 0x1001e80    ! macro
    const g_try_new0                         =  _G_NEW(struct_type,n_structs,try_malloc0)    ! macro
    const GDK_KEY_Cancel                     = 0xff69    ! macro
    const GTK_SCALE_CLASS                    = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_SCALE,GtkScaleClass))    ! macro
    const CAIRO_VERSION_STRING               = CAIRO_VERSION_STRINGIZE(CAIRO_VERSION_MAJOR,CAIRO_VERSION_MINOR,CAIRO_VERSION_MICRO)    ! macro
    const g_return_if_fail                   = G_STMT_START{if(expr){}else{g_log(G_LOG_DOMAIN,G_LOG_LEVEL_CRITICAL,"file %s: line %d: assertion `%s\' failed",__FILE__,__LINE__,#expr);return;};}G_STMT_END    ! macro
    const GTK_TYPE_TREE_VIEW_GRID_LINES      = (gtk_tree_view_grid_lines_get_type())    ! macro
    const GDK_KEY_Armenian_ken               = 0x100056f    ! macro
    const GTK_STOCK_DIALOG_WARNING           = "gtk-dialog-warning"    ! macro
    const GDK_KEY_Cyrillic_en_descender      = 0x10004a3    ! macro
    const G_SOCKET_ADDRESS_ENUMERATOR_GET_CLASS = (G_TYPE_INSTANCE_GET_CLASS((o),G_TYPE_SOCKET_ADDRESS_ENUMERATOR,GSocketAddressEnumeratorClass))    ! macro
    const GDK_KEY_Sinh_cha                   = 0x1000da1    ! macro
    const GTK_ASSISTANT_GET_CLASS            = (G_TYPE_INSTANCE_GET_CLASS((o),GTK_TYPE_ASSISTANT,GtkAssistantClass))    ! macro
    const G_TYPE_DBUS_CONNECTION_FLAGS       = (g_dbus_connection_flags_get_type())    ! macro
    const GDK_TYPE_EVENT_TYPE                = (gdk_event_type_get_type())    ! macro
    const GDK_KEY_Greek_chi                  = 0x7f7    ! macro
    const GTK_PRINT_SETTINGS_REVERSE         = "reverse"    ! macro
    const PANGO_PIXELS                       = (((int)(d)+512)>>10)    ! macro
    const GDK_KEY_Armenian_TO                = 0x1000539    ! macro
    const GDK_KEY_WWW                        =  0x1008ff2e    ! macro
    const GDK_KEY_Cyrillic_YA                =  0x6f1    ! macro
    const _G_DEFINE_INTERFACE_EXTENDED_BEGIN =  static void type_name##_default_init(TypeName##Interface*klass);GType type_name##_get_type(void){static volatile gsize g_define_type_id__volatile=0;if(g_once_init_enter(&g_define_type_id__volatile)){GType g_define_type_id=g_type_register_static_simple(G_TYPE_INTERFACE,g_intern_static_string(#TypeName),sizeof(TypeName##Interface),(GClassInitFunc)type_name##_default_init,0,(GInstanceInitFunc)NULL,(GTypeFlags)0);if(TYPE_PREREQ)g_type_interface_add_prerequisite(g_define_type_id,TYPE_PREREQ);{    ! macro
    const GDK_KEY_ccircumflex                = 0x2e6    ! macro
    const GDK_KEY_Cyrillic_ka_vertstroke     =  0x100049d    ! macro
    const GDK_KEY_Zen_Koho                   =  0xff3d    ! macro
    const ATK_NO_OP_OBJECT                   = (G_TYPE_CHECK_INSTANCE_CAST((obj),ATK_TYPE_NO_OP_OBJECT,AtkNoOpObject))    ! macro
    const G_IS_MEMORY_INPUT_STREAM           = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_MEMORY_INPUT_STREAM))    ! macro
    const GDK_KEY_Hangul_KiyeogSios          = 0xea3    ! macro
    const G_TYPE_PARAM_DOUBLE                = (g_param_spec_types[13])    ! macro
    const G_TYPE_RESOLVER_RECORD_TYPE        = (g_resolver_record_type_get_type())    ! macro
    const g_test_trap_assert_stdout_unmatched = g_test_trap_assertions(G_LOG_DOMAIN,__FILE__,__LINE__,G_STRFUNC,3,soutpattern)    ! macro
    const GDK_KEY_Thai_leksun                = 0xdf0    ! macro
    const G_VARIANT_TYPE_UINT16              = ((const GVariantType*)"q")    ! macro
    const GDK_KEY_ISO_Level2_Latch           = 0xfe02    ! macro
    const G_TYPE_IS_ABSTRACT                 = (g_type_test_flags((type),G_TYPE_FLAG_ABSTRACT))    ! macro
    const G_TYPE_DBUS_SERVER                 = (g_dbus_server_get_type())    ! macro
    const GTK_CALENDAR_CLASS                 = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_CALENDAR,GtkCalendarClass))    ! macro
    const GTK_STOCK_PRINT_PAUSED             = "gtk-print-paused"    ! macro
    const GTK_SCROLLABLE_GET_IFACE           = (G_TYPE_INSTANCE_GET_INTERFACE((inst),GTK_TYPE_SCROLLABLE,GtkScrollableInterface))    ! macro
    const GDK_KEY_tabovedot                  = 0x1001e6b    ! macro
    const GDK_KEY_Subtitle                   =  0x1008ff9a    ! macro
    const G_TYPE_DBUS_MESSAGE_TYPE           = (g_dbus_message_type_get_type())    ! macro
    const g_signal_handlers_disconnect_by_data = g_signal_handlers_disconnect_matched((instance),G_SIGNAL_MATCH_DATA,0,0,NULL,NULL,(data))    ! macro
    const GTK_TYPE_TOOLBAR_SPACE_STYLE       = (gtk_toolbar_space_style_get_type())    ! macro
    const GTK_IS_PROGRESS_BAR_CLASS          = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_PROGRESS_BAR))    ! macro
    const GTK_STYLE_CLASS_MARK               = "mark"    ! macro
    const GDK_KEY_ocircumflexhook            = 0x1001ed5    ! macro
    const G_GSIZE_FORMAT                     = "I64u"    ! macro
    const GTK_MOUNT_OPERATION_CLASS          = (G_TYPE_CHECK_CLASS_CAST((k),GTK_TYPE_MOUNT_OPERATION,GtkMountOperationClass))    ! macro
    const GDK_KEY_ifonlyif                   = 0x8cd    ! macro
    const GDK_KEY_braille_dots_2567          =  0x1002872    ! macro
    const GDK_KEY_Dcaron                     =  0x1cf    ! macro
    const GTK_SEPARATOR_TOOL_ITEM_GET_CLASS  = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_SEPARATOR_TOOL_ITEM,GtkSeparatorToolItemClass))    ! macro
    const GDK_KEY_braille_dots_2568          = 0x10028b2    ! macro
    const PANGO_TYPE_DIRECTION               = (pango_direction_get_type())    ! macro
    const G_DBUS_ACTION_GROUP                = (G_TYPE_CHECK_INSTANCE_CAST((inst),G_TYPE_DBUS_ACTION_GROUP,GDBusActionGroup))    ! macro
    const g_assert_cmpuint                   = do{guint64 __n1=(n1),__n2=(n2);if(__n1 cmp __n2);else g_assertion_message_cmpnum(G_LOG_DOMAIN,__FILE__,__LINE__,G_STRFUNC,#n1" "#cmp" "#n2,__n1,#cmp,__n2,'i');}while(0)    ! macro
    const G_IS_FILE_IO_STREAM_CLASS          = (G_TYPE_CHECK_CLASS_TYPE((k),G_TYPE_FILE_IO_STREAM))    ! macro
    const G_IS_VOLUME_MONITOR                = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_VOLUME_MONITOR))    ! macro
    const GTK_TYPE_PRINT_OPERATION_PREVIEW   = (gtk_print_operation_preview_get_type())    ! macro
    const GDK_KEY_Armenian_shesht            = 0x100055b    ! macro
    const GDK_KEY_Armenian_accent            =  0x100055b    ! macro
    const GTK_CELL_RENDERER_PROGRESS_CLASS   = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_CELL_RENDERER_PROGRESS,GtkCellRendererProgressClass))    ! macro
    const GTK_PRINT_SETTINGS_PRINT_PAGES     = "print-pages"    ! macro
    const G_FILE_ATTRIBUTE_STANDARD_SIZE     = "standard::size"    ! macro
    const GTK_TYPE_ENTRY                     = (gtk_entry_get_type())    ! macro
    const GDK_KEY_Cyrillic_ZE                = 0x6fa    ! macro
    const GDK_KEY_ssharp                     =  0x0df    ! macro
    const GDK_KEY_Thai_lekkao                =  0xdf9    ! macro
    const GDK_KEY_Cyrillic_YU                =  0x6e0    ! macro
    const GDK_KEY_ToDoList                   =  0x1008ff1f    ! macro
    const GDK_KEY_dead_grave                 =  0xfe50    ! macro
    const G_TYPE_FILE_ATTRIBUTE_MATCHER      = (g_file_attribute_matcher_get_type())    ! macro
    const GDK_KEY_agrave                     = 0x0e0    ! macro
    const GTK_WINDOW_GROUP                   = (G_TYPE_CHECK_INSTANCE_CAST((object),GTK_TYPE_WINDOW_GROUP,GtkWindowGroup))    ! macro
    const GTK_IS_TREE_MODEL_FILTER_CLASS     = (G_TYPE_CHECK_CLASS_TYPE((vtable),GTK_TYPE_TREE_MODEL_FILTER))    ! macro
    const gdk_pixbuf_animation_new_from_file = gdk_pixbuf_animation_new_from_file_utf8    ! macro
    const G_LITTLE_ENDIAN                    =  1234    ! macro
    const GTK_IS_ACTIONABLE                  = (G_TYPE_CHECK_INSTANCE_TYPE((inst),GTK_TYPE_ACTIONABLE))    ! macro
    const GTK_IS_TEXT_CHILD_ANCHOR_CLASS     = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_TEXT_CHILD_ANCHOR))    ! macro
    const GTK_SETTINGS_CLASS                 = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_SETTINGS,GtkSettingsClass))    ! macro
    const G_DEFINE_DYNAMIC_TYPE              = G_DEFINE_DYNAMIC_TYPE_EXTENDED(TN,t_n,T_P,0,{})    ! macro
    const GDK_KEY_asciitilde                 = 0x07e    ! macro
    const GTK_TYPE_PRINT_CONTEXT             = (gtk_print_context_get_type())    ! macro
    const _G_DEFINE_BOXED_TYPE_BEGIN         = GType type_name##_get_type(void){static volatile gsize g_define_type_id__volatile=0;if(g_once_init_enter(&g_define_type_id__volatile)){GType g_define_type_id=g_boxed_type_register_static(g_intern_static_string(#TypeName),(GBoxedCopyFunc)copy_func,(GBoxedFreeFunc)free_func);{    ! macro
    const TRUE                               = (!FALSE)    ! macro
    const ATK_EDITABLE_TEXT_GET_IFACE        = (G_TYPE_INSTANCE_GET_INTERFACE((obj),ATK_TYPE_EDITABLE_TEXT,AtkEditableTextIface))    ! macro
    const GTK_IS_APP_CHOOSER_DIALOG_CLASS    = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_APP_CHOOSER_DIALOG))    ! macro
    const G_MININT16                         = ((gint16)0x8000)    ! macro
    const G_THEMED_ICON_CLASS                = (G_TYPE_CHECK_CLASS_CAST((k),G_TYPE_THEMED_ICON,GThemedIconClass))    ! macro
    const GDK_KEY_onesixth                   = 0xab6    ! macro
    const GDK_KEY_ENG                        =  0x3bd    ! macro
    const GDK_KEY_leftanglebracket           =  0xabc    ! macro
    const GDK_IS_DRAG_CONTEXT                = (G_TYPE_CHECK_INSTANCE_TYPE((object),GDK_TYPE_DRAG_CONTEXT))    ! macro
    const GDK_IS_KEYMAP                      = (G_TYPE_CHECK_INSTANCE_TYPE((object),GDK_TYPE_KEYMAP))    ! macro
    const GTK_VSEPARATOR_CLASS               = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_VSEPARATOR,GtkVSeparatorClass))    ! macro
    const GDK_KEY_braille_dots_2578          = 0x10028d2    ! macro
    const CAIRO_MIME_TYPE_URI                = "text/x-uri"    ! macro
    const GTK_STOCK_YES                      = "gtk-yes"    ! macro
    const GDK_KEY_enfilledsqbullet           = 0xae7    ! macro
    const GTK_IS_MOUNT_OPERATION             = (G_TYPE_CHECK_INSTANCE_TYPE((o),GTK_TYPE_MOUNT_OPERATION))    ! macro
    const GINT16_TO_BE                       = ((gint16)GUINT16_SWAP_LE_BE(val))    ! macro
    const GDK_KEY_Cyrillic_hardsign          = 0x6df    ! macro
    const GDK_KEY_ydiaeresis                 =  0x0ff    ! macro
    const GDK_KEY_Armenian_VO                =  0x1000548    ! macro
    const GTK_TYPE_MENU                      = (gtk_menu_get_type())    ! macro
    const GDK_KEY_Sinh_dhha                  = 0x1000db0    ! macro
    const GTK_TOGGLE_TOOL_BUTTON             = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_TOGGLE_TOOL_BUTTON,GtkToggleToolButton))    ! macro
    const G_VARIANT_TYPE_UINT32              = ((const GVariantType*)"u")    ! macro
    const GDK_KEY_Armenian_khe               = 0x100056d    ! macro
    const GTK_TYPE_SIZE_GROUP                = (gtk_size_group_get_type())    ! macro
    const GTK_FIXED                          = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_FIXED,GtkFixed))    ! macro
    const GDK_KEY_ISO_Center_Object          = 0xfe33    ! macro
    const G_TYPE_FILE_INPUT_STREAM           = (g_file_input_stream_get_type())    ! macro
    const G_CALLBACK                         = ((GCallback)(f))    ! macro
    const GDK_KEY_adiaeresis                 = 0x0e4    ! macro
    const GTK_NUMERABLE_ICON_GET_CLASS       = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_NUMERABLE_ICON,GtkNumerableIconClass))    ! macro
    const G_GINTPTR_FORMAT                   = "I64i"    ! macro
    const GDK_KEY_Select                     = 0xff60    ! macro
    const GDK_KEY_hebrew_shin                =  0xcf9    ! macro
    const GTK_IM_CONTEXT_SIMPLE_GET_CLASS    = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_IM_CONTEXT_SIMPLE,GtkIMContextSimpleClass))    ! macro
    const GDK_KEY_Scircumflex                = 0x2de    ! macro
    const GTK_TYPE_PAGE_SETUP                = (gtk_page_setup_get_type())    ! macro
    const GTK_IS_RECENT_ACTION_CLASS         = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_RECENT_ACTION))    ! macro
    const GTK_IS_ACCEL_LABEL_CLASS           = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_ACCEL_LABEL))    ! macro
    const GDK_KEY_Back                       = 0x1008ff26    ! macro
    const GDK_KEY_Idiaeresis                 =  0x0cf    ! macro
    const GTK_IS_TREE_SORTABLE               = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_TREE_SORTABLE))    ! macro
    const G_MAXUINT64                        = G_GINT64_CONSTANT(0xffffffffffffffffU)    ! macro
    const G_TYPE_POINTER                     = G_TYPE_MAKE_FUNDAMENTAL(17)    ! macro
    const G_TYPE_HASH_TABLE                  = (g_hash_table_get_type())    ! macro
    const GDK_KEY_Eject                      = 0x1008ff2c    ! macro
    const G_IS_APP_LAUNCH_CONTEXT            = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_APP_LAUNCH_CONTEXT))    ! macro
    const G_HAVE_GROWING_STACK               = 0    ! macro
    const G_EMBLEMED_ICON_GET_CLASS          = (G_TYPE_INSTANCE_GET_CLASS((o),G_TYPE_EMBLEMED_ICON,GEmblemedIconClass))    ! macro
    const G_PRIVATE_INIT                     = {NULL,(notify),{NULL,NULL}}    ! macro
    const GTK_IS_COMBO_BOX                   = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_COMBO_BOX))    ! macro
    const GTK_IS_COLOR_CHOOSER_DIALOG        = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_COLOR_CHOOSER_DIALOG))    ! macro
    const GTK_TYPE_FONT_SELECTION_DIALOG     = (gtk_font_selection_dialog_get_type())    ! macro
    const GTK_IS_ACTION_GROUP                = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_ACTION_GROUP))    ! macro
    const GTK_STYLE_CLASS_SEPARATOR          = "separator"    ! macro
    const GDK_KEY_Ncaron                     = 0x1d2    ! macro
    const GDK_KEY_Sinh_mba                   =  0x1000db9    ! macro
    const GTK_STYLE_CLASS_DOCK               = "dock"    ! macro
    const GTK_PAPER_NAME_LEGAL               = "na_legal"    ! macro
    const GDK_KEY_dead_diaeresis             = 0xfe57    ! macro
    const GINT_TO_POINTER                    = ((gpointer)(gint64)(i))    ! macro
    const G_LOADABLE_ICON_GET_IFACE          = (G_TYPE_INSTANCE_GET_INTERFACE((obj),G_TYPE_LOADABLE_ICON,GLoadableIconIface))    ! macro
    const GDK_KEY_diaeresis                  = 0x0a8    ! macro
    const ATK_IS_GOBJECT_ACCESSIBLE          = (G_TYPE_CHECK_INSTANCE_TYPE((obj),ATK_TYPE_GOBJECT_ACCESSIBLE))    ! macro
    const GTK_STOCK_ITALIC                   = "gtk-italic"    ! macro
    const GDK_KEY_braille_dots_234678        = 0x10028ee    ! macro
    const GDK_KEY_utilde                     =  0x3fd    ! macro
    const GTK_TREE_MODEL                     = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_TREE_MODEL,GtkTreeModel))    ! macro
    const G_IS_BUFFERED_INPUT_STREAM         = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_BUFFERED_INPUT_STREAM))    ! macro
    const G_FILE_ATTRIBUTE_STANDARD_COPY_NAME = "standard::copy-name"    ! macro
    const GTK_TYPE_ACTION_GROUP              = (gtk_action_group_get_type())    ! macro
    const GTK_CELL_AREA_CONTEXT_GET_CLASS    = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_CELL_AREA_CONTEXT,GtkCellAreaContextClass))    ! macro
    const G_TYPE_APPLICATION_COMMAND_LINE    = (g_application_command_line_get_type())    ! macro
    const GTK_PRINT_SETTINGS_N_COPIES        = "n-copies"    ! macro
    const G_PARAM_SPEC_LONG                  = (G_TYPE_CHECK_INSTANCE_CAST((pspec),G_TYPE_PARAM_LONG,GParamSpecLong))    ! macro
    const GDK_KEY_SplitScreen                = 0x1008ff7d    ! macro
    const G_SOURCE_CONTINUE                  =  TRUE    ! macro
    const GDK_KEY_ISO_Level3_Latch           =  0xfe04    ! macro
    const G_MININT32                         = ((gint32)0x80000000)    ! macro
    const GTK_IS_SCALE_BUTTON                = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_SCALE_BUTTON))    ! macro
    const GTK_LAYOUT                         = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_LAYOUT,GtkLayout))    ! macro
    const CAIRO_HAS_SVG_SURFACE              = 1    ! macro
    const GTK_TYPE_NUMERABLE_ICON            = (gtk_numerable_icon_get_type())    ! macro
    const GDK_KEY_Sinh_lu2                   = 0x1000ddf    ! macro
    const GTK_TREE_MODEL_GET_IFACE           = (G_TYPE_INSTANCE_GET_INTERFACE((obj),GTK_TYPE_TREE_MODEL,GtkTreeModelIface))    ! macro
    const GDK_KEY_Scaron                     = 0x1a9    ! macro
    const G_IS_SOCKET_SERVICE_CLASS          = (G_TYPE_CHECK_CLASS_TYPE((class),G_TYPE_SOCKET_SERVICE))    ! macro
    const GTK_TYPE_SCALE_BUTTON              = (gtk_scale_button_get_type())    ! macro
    const GTK_FONT_BUTTON                    = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_FONT_BUTTON,GtkFontButton))    ! macro
    const GTK_CELL_RENDERER_COMBO_GET_CLASS  = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_CELL_RENDERER_COMBO,GtkCellRendererTextClass))    ! macro
    const G_TLS_DATABASE_PURPOSE_AUTHENTICATE_SERVER = "1.3.6.1.5.5.7.3.1"    ! macro
    const G_ENUM_CLASS_TYPE_NAME             = (g_type_name(G_ENUM_CLASS_TYPE(class)))    ! macro
    const GDK_KEY_KP_Divide                  = 0xffaf    ! macro
    const GTK_RECENT_MANAGER_CLASS           = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_RECENT_MANAGER,GtkRecentManagerClass))    ! macro
    const G_IO_STREAM_GET_CLASS              = (G_TYPE_INSTANCE_GET_CLASS((o),G_TYPE_IO_STREAM,GIOStreamClass))    ! macro
    const GDK_KEY_Thai_honokhuk              = 0xdce    ! macro
    const GDK_KEY_Muhenkan                   =  0xff22    ! macro
    const GTK_IS_FONT_SELECTION_DIALOG       = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_FONT_SELECTION_DIALOG))    ! macro
    const G_EMBLEM_GET_CLASS                 = (G_TYPE_INSTANCE_GET_CLASS((o),G_TYPE_EMBLEM,GEmblemClass))    ! macro
    const G_GINTPTR_MODIFIER                 = "I64"    ! macro
    const ATK_OBJECT_FACTORY_GET_CLASS       = (G_TYPE_INSTANCE_GET_CLASS((obj),ATK_TYPE_OBJECT_FACTORY,AtkObjectFactoryClass))    ! macro
    const G_SETTINGS                         = (G_TYPE_CHECK_INSTANCE_CAST((inst),G_TYPE_SETTINGS,GSettings))    ! macro
    const G_EMBLEMED_ICON                    = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_EMBLEMED_ICON,GEmblemedIcon))    ! macro
    const GDK_KEY_RotateWindows              = 0x1008ff74    ! macro
    const GTK_PRINT_OPERATION_GET_CLASS      = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_PRINT_OPERATION,GtkPrintOperationClass))    ! macro
    const GDK_KEY_horizlinescan1             = 0x9ef    ! macro
    const GDK_KEY_ninesubscript              =  0x1002089    ! macro
    const g_atomic_int_add                   = (g_atomic_int_add((gint*)(atomic),(val)))    ! macro
    const g_mem_chunk_create                 = (g_mem_chunk_new(NULL,sizeof(type),0,0))    ! macro
    const GINT_TO_BE                         = ((gint)GINT32_TO_BE(val))    ! macro
    const GDK_PIXBUF_VERSION                 = "2.26.5"    ! macro
    const GTK_IS_TEAROFF_MENU_ITEM           = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_TEAROFF_MENU_ITEM))    ! macro
    const G_TYPE_FILESYSTEM_PREVIEW_TYPE     = (g_filesystem_preview_type_get_type())    ! macro
    const GDK_KEY_horizlinescan3             = 0x9f0    ! macro
    const GDK_KEY_Ccircumflex                =  0x2c6    ! macro
    const GDK_KEY_Arabic_feh                 =  0x5e1    ! macro
    const GTK_TYPE_BORDER                    = (gtk_border_get_type())    ! macro
    const GTK_RECENT_CHOOSER_DIALOG          = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_RECENT_CHOOSER_DIALOG,GtkRecentChooserDialog))    ! macro
    const GDK_KEY_horizlinescan5             = 0x9f1    ! macro
    const GDK_VERSION_MIN_REQUIRED           = (GDK_VERSION_CUR_STABLE)    ! macro
    const GDK_KEY_horizlinescan7             = 0x9f2    ! macro
    const G_LOCK_EXTERN                      =  extern GMutex G_LOCK_NAME(name)    ! macro
    const GTK_IS_COLOR_CHOOSER_WIDGET_CLASS  = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_COLOR_CHOOSER_WIDGET))    ! macro
    const GDK_KEY_Arabic_meem                = 0x5e5    ! macro
    const G_IS_NETWORK_SERVICE_CLASS         = (G_TYPE_CHECK_CLASS_TYPE((k),G_TYPE_NETWORK_SERVICE))    ! macro
    const GDK_KEY_horizlinescan9             = 0x9f3    ! macro
    const GTK_IS_SEPARATOR_MENU_ITEM         = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_SEPARATOR_MENU_ITEM))    ! macro
    const g_get_user_name                    = g_get_user_name_utf8    ! macro
    const GDK_KEY_Armenian_ZA                =  0x1000536    ! macro
    const GDK_KEY_braille_dots_23456         =  0x100283e    ! macro
    const G_TLS_CERTIFICATE                  = (G_TYPE_CHECK_INSTANCE_CAST((inst),G_TYPE_TLS_CERTIFICATE,GTlsCertificate))    ! macro
    const GDK_KEY_braille_dots_23457         = 0x100285e    ! macro
    const G_SOCKET_CONNECTABLE               = (G_TYPE_CHECK_INSTANCE_CAST((obj),G_TYPE_SOCKET_CONNECTABLE,GSocketConnectable))    ! macro
    const ATK_IMPLEMENTOR_GET_IFACE          = (G_TYPE_INSTANCE_GET_INTERFACE((obj),ATK_TYPE_IMPLEMENTOR,AtkImplementorIface))    ! macro
    const GTK_ASPECT_FRAME_CLASS             = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_ASPECT_FRAME,GtkAspectFrameClass))    ! macro
    const GDK_KEY_braille_dots_23458         = 0x100289e    ! macro
    const _G_DEFINE_POINTER_TYPE_BEGIN       =  GType type_name##_get_type(void){static volatile gsize g_define_type_id__volatile=0;if(g_once_init_enter(&g_define_type_id__volatile)){GType g_define_type_id=g_pointer_type_register_static(g_intern_static_string(#TypeName));{    ! macro
    const G_VARIANT_TYPE_UINT64              = ((const GVariantType*)"t")    ! macro
    const GTK_FILE_CHOOSER_WIDGET_GET_CLASS  = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_FILE_CHOOSER_WIDGET,GtkFileChooserWidgetClass))    ! macro
    const GTK_ACTION                         = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_ACTION,GtkAction))    ! macro
    const G_DBUS_OBJECT_MANAGER_GET_IFACE    = (G_TYPE_INSTANCE_GET_INTERFACE((o),G_TYPE_DBUS_OBJECT_MANAGER,GDBusObjectManagerIface))    ! macro
    const GDK_SELECTION_TYPE_COLORMAP        = _GDK_MAKE_ATOM(7)    ! macro
    const GTK_HBUTTON_BOX                    = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_HBUTTON_BOX,GtkHButtonBox))    ! macro
    const GTK_IS_COLOR_CHOOSER_WIDGET        = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_COLOR_CHOOSER_WIDGET))    ! macro
    const GDK_KEY_hebrew_pe                  = 0xcf4    ! macro
    const GDK_KEY_Up                         =  0xff52    ! macro
    const GDK_KEY_ugrave                     =  0x0f9    ! macro
    const GDK_TARGET_DRAWABLE                =  _GDK_MAKE_ATOM(17)    ! macro
    const GTK_TREE_DRAG_SOURCE               = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_TREE_DRAG_SOURCE,GtkTreeDragSource))    ! macro
    const G_STRUCT_MEMBER_P                  = ((gpointer)((guint8*)(struct_p)+(glong)(struct_offset)))    ! macro
    const G_PARAM_STATIC_STRINGS             = (G_PARAM_STATIC_NAME|G_PARAM_STATIC_NICK|G_PARAM_STATIC_BLURB)    ! macro
    const GTK_STYLE_REGION_COLUMN            = "column"    ! macro
    const G_IS_TCP_CONNECTION                = (G_TYPE_CHECK_INSTANCE_TYPE((inst),G_TYPE_TCP_CONNECTION))    ! macro
    const G_KEY_FILE_DESKTOP_KEY_HIDDEN      = "Hidden"    ! macro
    const GTK_CELL_AREA_BOX_GET_CLASS        = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_CELL_AREA_BOX,GtkCellAreaBoxClass))    ! macro
    const GTK_TYPE_SEPARATOR_MENU_ITEM       = (gtk_separator_menu_item_get_type())    ! macro
    const GDK_TYPE_KEYMAP                    = (gdk_keymap_get_type())    ! macro
    const G_TYPE_RESERVED_GLIB_FIRST         = (22)    ! macro
    const ATK_TYPE_IMPLEMENTOR               = (atk_implementor_get_type())    ! macro
    const G_LOCK                             = g_mutex_lock(&G_LOCK_NAME(name))    ! macro
    const GDK_KEY_Armenian_ben               = 0x1000562    ! macro
    const GTK_ACCEL_GROUP_CLASS              = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_ACCEL_GROUP,GtkAccelGroupClass))    ! macro
    const GTK_STYLE_CLASS_ACCELERATOR        = "accelerator"    ! macro
    const GDK_KEY_AudibleBell_Enable         = 0xfe7a    ! macro
    const GDK_KEY_dintegral                  =  0x100222c    ! macro
    const GTK_STYLE                          = (G_TYPE_CHECK_INSTANCE_CAST((object),GTK_TYPE_STYLE,GtkStyle))    ! macro
    const GDK_DEPRECATED_IN_3_6_FOR          = GDK_DEPRECATED_FOR(f)    ! macro
    const GDK_KEY_twosuperior                = 0x0b2    ! macro
    const GDK_KEY_Farsi_0                    =  0x10006f0    ! macro
    const GDK_TYPE_GRAVITY                   = (gdk_gravity_get_type())    ! macro
    const ATK_TYPE_DOCUMENT                  = (atk_document_get_type())    ! macro
    const GTK_TYPE_TOGGLE_ACTION             = (gtk_toggle_action_get_type())    ! macro
    const GDK_KEY_Farsi_1                    = 0x10006f1    ! macro
    const GDK_KEY_Greek_IOTA                 =  0x7c9    ! macro
    const GTK_PAPER_NAME_A3                  = "iso_a3"    ! macro
    const GTK_SCALE_GET_CLASS                = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_SCALE,GtkScaleClass))    ! macro
    const GDK_KEY_Ecircumflexacute           = 0x1001ebe    ! macro
    const G_TYPE_CHECK_INSTANCE_CAST         = (_G_TYPE_CIC((instance),(g_type),c_type))    ! macro
    const GDK_KEY_Pointer_DfltBtnNext        = 0xfefb    ! macro
    const GDK_KEY_Farsi_2                    =  0x10006f2    ! macro
    const GTK_CELL_RENDERER_PIXBUF_GET_CLASS = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_CELL_RENDERER_PIXBUF,GtkCellRendererPixbufClass))    ! macro
    const GTK_PAPER_NAME_A4                  = "iso_a4"    ! macro
    const GDK_KEY_Farsi_3                    = 0x10006f3    ! macro
    const ATK_STATE_SET_GET_CLASS            = (G_TYPE_INSTANCE_GET_CLASS((obj),ATK_TYPE_STATE_SET,AtkStateSetClass))    ! macro
    const G_TYPE_CONVERTER_RESULT            = (g_converter_result_get_type())    ! macro
    const GTK_PAPER_NAME_A5                  = "iso_a5"    ! macro
    const GDK_KEY_Sinh_kunddaliya            = 0x1000df4    ! macro
    const GDK_KEY_Farsi_4                    =  0x10006f4    ! macro
    const GTK_WINDOW                         = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_WINDOW,GtkWindow))    ! macro
    const GTK_IS_TEXT_TAG_TABLE              = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_TEXT_TAG_TABLE))    ! macro
    const GDK_KEY_Farsi_5                    = 0x10006f5    ! macro
    const GTK_ASSISTANT_CLASS                = (G_TYPE_CHECK_CLASS_CAST((c),GTK_TYPE_ASSISTANT,GtkAssistantClass))    ! macro
    const G_SOCKET_CONNECTION_GET_CLASS      = (G_TYPE_INSTANCE_GET_CLASS((inst),G_TYPE_SOCKET_CONNECTION,GSocketConnectionClass))    ! macro
    const GDK_KEY_braille_dots_23467         = 0x100286e    ! macro
    const GDK_KEY_Farsi_6                    =  0x10006f6    ! macro
    const GTK_CELL_RENDERER_TOGGLE_GET_CLASS = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_CELL_RENDERER_TOGGLE,GtkCellRendererToggleClass))    ! macro
    const GDK_KEY_braille_dots_23468         = 0x10028ae    ! macro
    const GDK_KEY_Farsi_7                    =  0x10006f7    ! macro
    const GDK_KEY_twosubscript               =  0x1002082    ! macro
    const G_WIN32_HAVE_WIDECHAR_API          =  TRUE    ! macro
    const GDK_KEY_Farsi_8                    =  0x10006f8    ! macro
    const G_DBUS_INTERFACE_SKELETON          = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_DBUS_INTERFACE_SKELETON,GDBusInterfaceSkeleton))    ! macro
    const G_DIR_SEPARATOR                    = '\\'    ! macro
    const PANGO_TYPE_FONT_MASK               = (pango_font_mask_get_type())    ! macro
    const G_TYPE_DBUS_ACTION_GROUP           = (g_dbus_action_group_get_type())    ! macro
    const G_SIMPLE_ACTION                    = (G_TYPE_CHECK_INSTANCE_CAST((inst),G_TYPE_SIMPLE_ACTION,GSimpleAction))    ! macro
    const GDK_KEY_Farsi_9                    = 0x10006f9    ! macro
    const GDK_KEY_onesubscript               =  0x1002081    ! macro
    const GTK_CELL_LAYOUT_GET_IFACE          = (G_TYPE_INSTANCE_GET_INTERFACE((obj),GTK_TYPE_CELL_LAYOUT,GtkCellLayoutIface))    ! macro
    const GTK_TYPE_CELL_RENDERER_STATE       = (gtk_cell_renderer_state_get_type())    ! macro
    const G_IEEE754_DOUBLE_BIAS              = (1023)    ! macro
    const GDK_KEY_History                    = 0x1008ff37    ! macro
    const G_TLS_SERVER_CONNECTION_GET_INTERFACE = (G_TYPE_INSTANCE_GET_INTERFACE((inst),G_TYPE_TLS_SERVER_CONNECTION,GTlsServerConnectionInterface))    ! macro
    const G_MININT64                         = ((gint64)G_GINT64_CONSTANT(0x8000000000000000))    ! macro
    const ATK_IS_STREAMABLE_CONTENT          = G_TYPE_CHECK_INSTANCE_TYPE((obj),ATK_TYPE_STREAMABLE_CONTENT)    ! macro
    const GTK_RECENT_CHOOSER_DIALOG_GET_CLASS = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_RECENT_CHOOSER_DIALOG,GtkRecentChooserDialogClass))    ! macro
    const GDK_PIXBUF_SIMPLE_ANIM_CLASS       = (G_TYPE_CHECK_CLASS_CAST((klass),GDK_TYPE_PIXBUF_SIMPLE_ANIM,GdkPixbufSimpleAnimClass))    ! macro
    const GDK_KEY_ybelowdot                  = 0x1001ef5    ! macro
    const ATK_IS_OBJECT                      = (G_TYPE_CHECK_INSTANCE_TYPE((obj),ATK_TYPE_OBJECT))    ! macro
    const G_TYPE_SEEKABLE                    = (g_seekable_get_type())    ! macro
    const GTK_STYLE_CLASS_HIGHLIGHT          = "highlight"    ! macro
    const G_FILE_ICON_CLASS                  = (G_TYPE_CHECK_CLASS_CAST((k),G_TYPE_FILE_ICON,GFileIconClass))    ! macro
    const G_FILE_MONITOR_GET_CLASS           = (G_TYPE_INSTANCE_GET_CLASS((o),G_TYPE_FILE_MONITOR,GFileMonitorClass))    ! macro
    const cairo_surface_get_matrix           = cairo_surface_get_matrix_DEPRECATED_BY_cairo_pattern_get_matrix    ! macro
    const GDK_KEY_fourfifths                 =  0xab5    ! macro
    const GDK_KEY_Georgian_nar               =  0x10010dc    ! macro
    const GTK_TYPE_RC_TOKEN_TYPE             = (gtk_rc_token_type_get_type())    ! macro
    const GDK_KEY_Armenian_tsa               = 0x100056e    ! macro
    const GDK_KEY_braille_dots_123456        =  0x100283f    ! macro
    const g_file_test                        =  g_file_test_utf8    ! macro
    const GDK_KEY_braille_dots_123457        =  0x100285f    ! macro
    const GDK_KEY_emopencircle               =  0xace    ! macro
    const GTK_STOCK_DIALOG_QUESTION          = "gtk-dialog-question"    ! macro
    const GTK_PAPER_NAME_B5                  = "iso_b5"    ! macro
    const GDK_KEY_braille_dots_123458        = 0x100289f    ! macro
    const GDK_KEY_Switch_VT_10               =  0x1008fe0a    ! macro
    const ATK_IS_SOCKET_CLASS                = (G_TYPE_CHECK_CLASS_TYPE((klass),ATK_TYPE_SOCKET))    ! macro
    const GTK_TYPE_TOOL_BUTTON               = (gtk_tool_button_get_type())    ! macro
    const G_IS_CONVERTER_INPUT_STREAM_CLASS  = (G_TYPE_CHECK_CLASS_TYPE((k),G_TYPE_CONVERTER_INPUT_STREAM))    ! macro
    const GDK_KEY_Switch_VT_11               = 0x1008fe0b    ! macro
    const GTK_IS_FILE_CHOOSER_WIDGET_CLASS   = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_FILE_CHOOSER_WIDGET))    ! macro
    const GDK_KEY_Switch_VT_12               = 0x1008fe0c    ! macro
    const GTK_IS_ICON_VIEW                   = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_ICON_VIEW))    ! macro
    const GDK_TYPE_WINDOW_STATE              = (gdk_window_state_get_type())    ! macro
    const GDK_KEY_braille_dots_23478         = 0x10028ce    ! macro
    const GDK_KEY_Aacute                     =  0x0c1    ! macro
    const GDK_KEY_NairaSign                  =  0x10020a6    ! macro
    const G_SOCKET_GET_CLASS                 = (G_TYPE_INSTANCE_GET_CLASS((inst),G_TYPE_SOCKET,GSocketClass))    ! macro
    const GTK_RECENT_CHOOSER_WIDGET          = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_RECENT_CHOOSER_WIDGET,GtkRecentChooserWidget))    ! macro
    const GTK_TYPE_PRINT_OPERATION           = (gtk_print_operation_get_type())    ! macro
    const GDK_KEY_WLAN                       = 0x1008ff95    ! macro
    const GTK_PRINT_SETTINGS_OUTPUT_BIN      = "output-bin"    ! macro
    const GTK_STOCK_UNDO                     = "gtk-undo"    ! macro
    const GTK_STYLE_CLASS_ERROR              = "error"    ! macro
    const GTK_IS_TREE_MODEL                  = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_TREE_MODEL))    ! macro
    const GTK_ACTION_GROUP                   = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_ACTION_GROUP,GtkActionGroup))    ! macro
    const GTK_BUILDABLE_GET_IFACE            = (G_TYPE_INSTANCE_GET_INTERFACE((obj),GTK_TYPE_BUILDABLE,GtkBuildableIface))    ! macro
    const GDK_KEY_ISO_Fast_Cursor_Down       = 0xfe2f    ! macro
    const G_TYPE_RESERVED_BSE_FIRST          = (32)    ! macro
    const GDK_KEY_ihook                      = 0x1001ec9    ! macro
    const GDK_KEY_babovedot                  =  0x1001e03    ! macro
    const g_assert_cmpfloat                  =  do{long double __n1=(n1),__n2=(n2);if(__n1 cmp __n2);else g_assertion_message_cmpnum(G_LOG_DOMAIN,__FILE__,__LINE__,G_STRFUNC,#n1" "#cmp" "#n2,__n1,#cmp,__n2,'f');}while(0)    ! macro
    const GTK_IM_MULTICONTEXT_CLASS          = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_IM_MULTICONTEXT,GtkIMMulticontextClass))    ! macro
    const G_IS_SOCKET_CLIENT                 = (G_TYPE_CHECK_INSTANCE_TYPE((inst),G_TYPE_SOCKET_CLIENT))    ! macro
    const GDK_KEY_Arabic_yeh                 = 0x5ea    ! macro
    const GTK_TYPE_HANDLE_BOX                = (gtk_handle_box_get_type())    ! macro
    const GTK_IS_COMBO_BOX_TEXT_CLASS        = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_COMBO_BOX_TEXT))    ! macro
    const G_MENU_ITEM                        = (G_TYPE_CHECK_INSTANCE_CAST((inst),G_TYPE_MENU_ITEM,GMenuItem))    ! macro
    const GDK_KEY_Armenian_tso               = 0x1000581    ! macro
    const G_TYPE_ASYNC_RESULT                = (g_async_result_get_type())    ! macro
    const GDK_KEY_ETH                        = 0x0d0    ! macro
    const G_TYPE_DBUS_INTERFACE              = (g_dbus_interface_get_type())    ! macro
    const G_TYPE_HAS_VALUE_TABLE             = (g_type_value_table_peek(type)!=NULL)    ! macro
    const GDK_KEY_gcaron                     = 0x10001e7    ! macro
    const GDK_KEY_Yellow                     =  0x1008ffa5    ! macro
    const GTK_IS_CHECK_MENU_ITEM_CLASS       = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_CHECK_MENU_ITEM))    ! macro
    const GDK_KEY_Thai_ngongu                = 0xda7    ! macro
    const GDK_KEY_braille_dots_123467        =  0x100286f    ! macro
    const G_TYPE_IS_FLAGS                    = (G_TYPE_FUNDAMENTAL(type)==G_TYPE_FLAGS)    ! macro
    const MAXPATHLEN                         = 1024    ! macro
    const GDK_UNAVAILABLE                    =  G_UNAVAILABLE(maj,min)    ! macro
    const GDK_KEY_Cyrillic_LJE               = 0x6b9    ! macro
    const GDK_KEY_braille_dots_123468        =  0x10028af    ! macro
    const GTK_TREE_VIEW_GET_CLASS            = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_TREE_VIEW,GtkTreeViewClass))    ! macro
    const GDK_KEY_WheelButton                = 0x1008ff88    ! macro
    const G_PARAM_SPEC_VALUE_TYPE            = (G_PARAM_SPEC(pspec)->value_type)    ! macro
    const GTK_STOCK_ZOOM_100                 = "gtk-zoom-100"    ! macro
    const GDK_KEY_Sinh_luu                   = 0x1000d90    ! macro
    const G_MINDOUBLE                        =  DBL_MIN    ! macro
    const GDK_KEY_Serbian_JE                 =  0x6b8    ! macro
    const G_TYPE_DBUS_MESSAGE_BYTE_ORDER     = (g_dbus_message_byte_order_get_type())    ! macro
    const GTK_SCALE_BUTTON                   = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_SCALE_BUTTON,GtkScaleButton))    ! macro
    const G_DEFINE_INTERFACE_WITH_CODE       = _G_DEFINE_INTERFACE_EXTENDED_BEGIN(TN,t_n,T_P){_C_;}_G_DEFINE_INTERFACE_EXTENDED_END()    ! macro
    const G_APPLICATION_COMMAND_LINE_CLASS   = (G_TYPE_CHECK_CLASS_CAST((class),G_TYPE_APPLICATION_COMMAND_LINE,GApplicationCommandLineClass))    ! macro
    const G_URI_RESERVED_CHARS_GENERIC_DELIMITERS = ":/?#[]@"    ! macro
    const G_VALUE_HOLDS_UINT                 = (G_TYPE_CHECK_VALUE_TYPE((value),G_TYPE_UINT))    ! macro
    const g_atomic_pointer_get               = (g_atomic_pointer_get(atomic))    ! macro
    const G_ICON                             = (G_TYPE_CHECK_INSTANCE_CAST((obj),G_TYPE_ICON,GIcon))    ! macro
    const G_IS_CHARSET_CONVERTER             = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_CHARSET_CONVERTER))    ! macro
    const GTK_TYPE_IM_STATUS_STYLE           = (gtk_im_status_style_get_type())    ! macro
    const G_IS_TCP_WRAPPER_CONNECTION        = (G_TYPE_CHECK_INSTANCE_TYPE((inst),G_TYPE_TCP_WRAPPER_CONNECTION))    ! macro
    const GTK_IS_STYLE_PROVIDER              = (G_TYPE_CHECK_INSTANCE_TYPE((o),GTK_TYPE_STYLE_PROVIDER))    ! macro
    const GTK_IS_TOOL_ITEM                   = (G_TYPE_CHECK_INSTANCE_TYPE((o),GTK_TYPE_TOOL_ITEM))    ! macro
    const GTK_IS_ENTRY_COMPLETION_CLASS      = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_ENTRY_COMPLETION))    ! macro
    const GDK_KEY_Ukranian_JE                = 0x6b4    ! macro
    const GDK_KEY_Cyrillic_u_straight        =  0x10004af    ! macro
    const GTK_STYLE_CLASS_SPINBUTTON         = "spinbutton"    ! macro
    const G_FILE_ATTRIBUTE_STANDARD_IS_VIRTUAL = "standard::is-virtual"    ! macro
    const G_IS_ZLIB_DECOMPRESSOR_CLASS       = (G_TYPE_CHECK_CLASS_TYPE((k),G_TYPE_ZLIB_DECOMPRESSOR))    ! macro
    const GDK_KEY_3270_Duplicate             = 0xfd01    ! macro
    const GDK_KEY_Cyrillic_SHCHA             =  0x6fd    ! macro
    const GTK_BUTTON_BOX_GET_CLASS           = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_BUTTON_BOX,GtkButtonBoxClass))    ! macro
    const GTK_STYLE_PROPERTIES_CLASS         = (G_TYPE_CHECK_CLASS_CAST((c),GTK_TYPE_STYLE_PROPERTIES,GtkStylePropertiesClass))    ! macro
    const GDK_KEY_Armenian_separation_mark   = 0x100055d    ! macro
    const G_TYPE_SRV_TARGET                  = (g_srv_target_get_type())    ! macro
    const GDK_KEY_ooblique                   = 0x0f8    ! macro
    const G_VALUE_HOLDS_DOUBLE               = (G_TYPE_CHECK_VALUE_TYPE((value),G_TYPE_DOUBLE))    ! macro
    const GDK_KEY_doubleacute                = 0x1bd    ! macro
    const GTK_ICON_FACTORY_CLASS             = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_ICON_FACTORY,GtkIconFactoryClass))    ! macro
    const GTK_DIALOG_GET_CLASS               = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_DIALOG,GtkDialogClass))    ! macro
    const GDK_KEY_lcaron                     = 0x1b5    ! macro
    const GTK_FONT_CHOOSER_DIALOG_CLASS      = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_FONT_CHOOSER_DIALOG,GtkFontChooserDialogClass))    ! macro
    const cairo_xcb_surface_create_for_window_with_visual = cairo_xcb_surface_create_for_window_with_visual_REPLACED_BY_cairo_xcb_surface_create    ! macro
    const G_VALUE_HOLDS_PARAM                = (G_TYPE_CHECK_VALUE_TYPE((value),G_TYPE_PARAM))    ! macro
    const GDK_KEY_braille_dots_123478        = 0x10028cf    ! macro
    const GDK_KEY_Multi_key                  =  0xff20    ! macro
    const G_CONVERTER_OUTPUT_STREAM_GET_CLASS = (G_TYPE_INSTANCE_GET_CLASS((o),G_TYPE_CONVERTER_OUTPUT_STREAM,GConverterOutputStreamClass))    ! macro
    const G_FILE_ICON_GET_CLASS              = (G_TYPE_INSTANCE_GET_CLASS((o),G_TYPE_FILE_ICON,GFileIconClass))    ! macro
    const CAIRO_HAS_FT_FONT                  = 1    ! macro
    const GTK_IS_SEPARATOR_CLASS             = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_SEPARATOR))    ! macro
    const G_FILE_ATTRIBUTE_ID_FILESYSTEM     = "id::filesystem"    ! macro
    const GDK_KEY_LightBulb                  = 0x1008ff35    ! macro
    const GTK_IS_CELL_RENDERER_COMBO         = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_CELL_RENDERER_COMBO))    ! macro
    const GTK_TYPE_PRINT_DUPLEX              = (gtk_print_duplex_get_type())    ! macro
    const PANGO_TYPE_BIDI_TYPE               = (pango_bidi_type_get_type())    ! macro
    const GTK_STOCK_GO_DOWN                  = "gtk-go-down"    ! macro
    const GDK_CURSOR                         = (G_TYPE_CHECK_INSTANCE_CAST((object),GDK_TYPE_CURSOR,GdkCursor))    ! macro
    const GTK_IS_BUTTON_BOX_CLASS            = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_BUTTON_BOX))    ! macro
    const G_SOCKET_CONTROL_MESSAGE_CLASS     = (G_TYPE_CHECK_CLASS_CAST((class),G_TYPE_SOCKET_CONTROL_MESSAGE,GSocketControlMessageClass))    ! macro
    const GTK_STYLE_CLASS_HEADER             = "header"    ! macro
    const G_TYPE_VALUE_ARRAY                 = (g_value_array_get_type())    ! macro
    const GDK_KEY_ISO_Level5_Latch           = 0xfe12    ! macro
    const GDK_KEY_braille_dots_1234          =  0x100280f    ! macro
    const GDK_KEY_Game                       =  0x1008ff5e    ! macro
    const G_TYPE_REGEX                       = (g_regex_get_type())    ! macro
    const G_IS_TLS_INTERACTION_CLASS         = (G_TYPE_CHECK_CLASS_TYPE((k),G_TYPE_TLS_INTERACTION))    ! macro
    const GDK_KEY_braille_dots_1235          = 0x1002817    ! macro
    const G_SIGNAL_FLAGS_MASK                =  0x1ff    ! macro
    const GDK_KEY_Ccedilla                   =  0x0c7    ! macro
    const GDK_KEY_braille_dots_1236          =  0x1002827    ! macro
    const GTK_TYPE_TREE_SORTABLE             = (gtk_tree_sortable_get_type())    ! macro
    const GDK_KEY_braille_dots_1237          = 0x1002847    ! macro
    const GTK_WINDOW_GROUP_GET_CLASS         = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_WINDOW_GROUP,GtkWindowGroupClass))    ! macro
    const GTK_ENTRY_COMPLETION               = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_ENTRY_COMPLETION,GtkEntryCompletion))    ! macro
    const GDK_KEY_Overlay2_Enable            = 0xfe79    ! macro
    const GDK_TYPE_PIXBUF_LOADER             = (gdk_pixbuf_loader_get_type())    ! macro
    const GDK_KEY_Greek_alphaaccent          = 0x7b1    ! macro
    const GDK_KEY_braille_dots_1238          =  0x1002887    ! macro
    const G_GNUC_DEPRECATED_FOR              =  G_GNUC_DEPRECATED    ! macro
    const GDK_KEY_ISO_Move_Line_Down         =  0xfe22    ! macro
    const G_APP_INFO                         = (G_TYPE_CHECK_INSTANCE_CAST((obj),G_TYPE_APP_INFO,GAppInfo))    ! macro
    const GTK_TYPE_CELL_RENDERER_COMBO       = (gtk_cell_renderer_combo_get_type())    ! macro
    const GDK_PIXBUF_LOADER_CLASS            = (G_TYPE_CHECK_CLASS_CAST((klass),GDK_TYPE_PIXBUF_LOADER,GdkPixbufLoaderClass))    ! macro
    const GDK_KEY_Armenian_ayb               = 0x1000561    ! macro
    const GTK_TYPE_IM_PREEDIT_STYLE          = (gtk_im_preedit_style_get_type())    ! macro
    const GDK_KEY_Kanji_Bangou               = 0xff37    ! macro
    const GDK_KEY_zerosuperior               =  0x1002070    ! macro
    const GDK_PIXBUF_MAJOR                   = (2)    ! macro
    const GDK_KEY_containsas                 = 0x100220b    ! macro
    const G_TYPE_APP_INFO_CREATE_FLAGS       = (g_app_info_create_flags_get_type())    ! macro
    const GTK_TYPE_VBOX                      = (gtk_vbox_get_type())    ! macro
    const GTK_RECENT_CHOOSER_GET_IFACE       = (G_TYPE_INSTANCE_GET_INTERFACE((inst),GTK_TYPE_RECENT_CHOOSER,GtkRecentChooserIface))    ! macro
    const GDK_TYPE_DEVICE_TYPE               = (gdk_device_type_get_type())    ! macro
    const G_TYPE_MOUNT_OPERATION             = (g_mount_operation_get_type())    ! macro
    const GTK_ICON_VIEW_CLASS                = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_ICON_VIEW,GtkIconViewClass))    ! macro
    const G_SOCKET_CONTROL_MESSAGE_GET_CLASS = (G_TYPE_INSTANCE_GET_CLASS((inst),G_TYPE_SOCKET_CONTROL_MESSAGE,GSocketControlMessageClass))    ! macro
    const GTK_SCROLLED_WINDOW_GET_CLASS      = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_SCROLLED_WINDOW,GtkScrolledWindowClass))    ! macro
    const G_IS_MOUNT                         = (G_TYPE_CHECK_INSTANCE_TYPE((obj),G_TYPE_MOUNT))    ! macro
    const GTK_STOCK_FULLSCREEN               = "gtk-fullscreen"    ! macro
    const GDK_KEY_endash                     = 0xaaa    ! macro
    const GTK_IS_MENU                        = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_MENU))    ! macro
    const G_DBUS_OBJECT_PROXY_CLASS          = (G_TYPE_CHECK_CLASS_CAST((k),G_TYPE_DBUS_OBJECT_PROXY,GDBusObjectProxyClass))    ! macro
    const GTK_SEPARATOR                      = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_SEPARATOR,GtkSeparator))    ! macro
    const G_TYPE_PLUGIN                      = (G_TYPE_CHECK_INSTANCE_CAST((inst),G_TYPE_TYPE_PLUGIN,GTypePlugin))    ! macro
    const ATK_HYPERTEXT                      = G_TYPE_CHECK_INSTANCE_CAST((obj),ATK_TYPE_HYPERTEXT,AtkHypertext)    ! macro
    const G_IS_SETTINGS                      = (G_TYPE_CHECK_INSTANCE_TYPE((inst),G_TYPE_SETTINGS))    ! macro
    const GTK_IS_MENU_BAR_CLASS              = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_MENU_BAR))    ! macro
    const GTK_ORIENTABLE_GET_IFACE           = (G_TYPE_INSTANCE_GET_INTERFACE((inst),GTK_TYPE_ORIENTABLE,GtkOrientableIface))    ! macro
    const g_slist_free1                      = g_slist_free_1    ! macro
    const GTK_IS_ARROW_CLASS                 = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_ARROW))    ! macro
    const GTK_TYPE_CONTAINER                 = (gtk_container_get_type())    ! macro
    const ATK_IS_TEXT                        = G_TYPE_CHECK_INSTANCE_TYPE((obj),ATK_TYPE_TEXT)    ! macro
    const GDK_KEY_braille_dots_1245          = 0x100281b    ! macro
    const G_IS_TLS_DATABASE_CLASS            = (G_TYPE_CHECK_CLASS_TYPE((class),G_TYPE_TLS_DATABASE))    ! macro
    const GDK_KEY_braille_dots_1246          = 0x100282b    ! macro
    const GDK_KEY_Super_L                    =  0xffeb    ! macro
    const GDK_KEY_braille_dots_1247          =  0x100284b    ! macro
    const CAIRO_HAS_GOBJECT_FUNCTIONS        =  1    ! macro
    const G_NETWORK_SERVICE_GET_CLASS        = (G_TYPE_INSTANCE_GET_CLASS((o),G_TYPE_NETWORK_SERVICE,GNetworkServiceClass))    ! macro
    const GTK_APP_CHOOSER_DIALOG_GET_CLASS   = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_APP_CHOOSER_DIALOG,GtkAppChooserDialogClass))    ! macro
    const GDK_KEY_braille_dots_1248          = 0x100288b    ! macro
    const GDK_KEY_Memo                       =  0x1008ff1e    ! macro
    const GDK_KEY_Hangul_J_Tieut             =  0xeec    ! macro
    const GDK_KEY_Sinh_dda                   =  0x1000da9    ! macro
    const GTK_TYPE_CSS_SECTION_TYPE          = (gtk_css_section_type_get_type())    ! macro
    const G_TYPE_PARAM_OVERRIDE              = (g_param_spec_types[20])    ! macro
    const GDK_KEY_Thai_saraaimaimalai        = 0xde4    ! macro
    const GTK_LAYOUT_GET_CLASS               = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_LAYOUT,GtkLayoutClass))    ! macro
    const PANGO_CONTEXT                      = (G_TYPE_CHECK_INSTANCE_CAST((object),PANGO_TYPE_CONTEXT,PangoContext))    ! macro
    const GDK_TYPE_WINDOW_ATTRIBUTES_TYPE    = (gdk_window_attributes_type_get_type())    ! macro
    const PANGO_TYPE_LAYOUT_ITER             = (pango_layout_iter_get_type())    ! macro
    const GTK_TEXT_BUFFER                    = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_TEXT_BUFFER,GtkTextBuffer))    ! macro
    const G_IS_THEMED_ICON                   = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_THEMED_ICON))    ! macro
    const GDK_KEY_Super_R                    = 0xffec    ! macro
    const G_TYPE_INSTANCE_GET_PRIVATE        = ((c_type*)g_type_instance_get_private((GTypeInstance*)(instance),(g_type)))    ! macro
    const GDK_KEY_Uacute                     = 0x0da    ! macro
    const G_ENCODE_VERSION                   = ((major)<<16|(minor)<<8)    ! macro
    const G_IS_IO_STREAM_CLASS               = (G_TYPE_CHECK_CLASS_TYPE((k),G_TYPE_IO_STREAM))    ! macro
    const GDK_KEY_Cyrillic_be                = 0x6c2    ! macro
    const G_SIMPLE_ASYNC_RESULT_CLASS        = (G_TYPE_CHECK_CLASS_CAST((k),G_TYPE_SIMPLE_ASYNC_RESULT,GSimpleAsyncResultClass))    ! macro
    const GLONG_TO_BE                        = ((glong)GINT32_TO_BE(val))    ! macro
    const GDK_KEY_Georgian_don               = 0x10010d3    ! macro
    const cairo_xcb_surface_create_for_pixmap_with_visual =  cairo_xcb_surface_create_for_pixmap_with_visual_REPLACED_BY_cairo_xcb_surface_create    ! macro
    const G_SIMPLE_ACTION_GROUP              = (G_TYPE_CHECK_INSTANCE_CAST((inst),G_TYPE_SIMPLE_ACTION_GROUP,GSimpleActionGroup))    ! macro
    const G_GINT64_CONSTANT                  = (G_GNUC_EXTENSION(val##LL))    ! macro
    const G_PARAM_SPEC_STRING                = (G_TYPE_CHECK_INSTANCE_CAST((pspec),G_TYPE_PARAM_STRING,GParamSpecString))    ! macro
    const GDK_KEY_braille_dots_1256          = 0x1002833    ! macro
    const GTK_MENU_ITEM                      = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_MENU_ITEM,GtkMenuItem))    ! macro
    const GTK_TYPE_CELL_RENDERER_PROGRESS    = (gtk_cell_renderer_progress_get_type())    ! macro
    const G_FILE_ATTRIBUTE_STANDARD_NAME     = "standard::name"    ! macro
    const GDK_KEY_downstile                  = 0xbc4    ! macro
    const GDK_KEY_braille_dots_1257          =  0x1002853    ! macro
    const GTK_RC_STYLE_GET_CLASS             = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_RC_STYLE,GtkRcStyleClass))    ! macro
    const GTK_STOCK_NETWORK                  = "gtk-network"    ! macro
    const GDK_KEY_ISO_Group_Shift            = 0xff7e    ! macro
    const GDK_KEY_braille_dots_1258          =  0x1002893    ! macro
    const GDK_KEY_rightarrow                 =  0x8fd    ! macro
    const GTK_STYLE_CLASS_PRIMARY_TOOLBAR    = "primary-toolbar"    ! macro
    const GTK_STYLE_REGION_COLUMN_HEADER     = "column-header"    ! macro
    const GTK_STOCK_ORIENTATION_REVERSE_PORTRAIT = "gtk-orientation-reverse-portrait"    ! macro
    const GTK_TYPE_COLOR_CHOOSER_DIALOG      = (gtk_color_chooser_dialog_get_type())    ! macro
    const GINT16_TO_LE                       = ((gint16)(val))    ! macro
    const GDK_KEY_Cyrillic_CHE               = 0x6fe    ! macro
    const G_INET_ADDRESS_MASK_CLASS          = (G_TYPE_CHECK_CLASS_CAST((k),G_TYPE_INET_ADDRESS_MASK,GInetAddressMaskClass))    ! macro
    const ATK_IS_NO_OP_OBJECT_FACTORY        = (G_TYPE_CHECK_INSTANCE_TYPE((obj),ATK_TYPE_NO_OP_OBJECT_FACTORY))    ! macro
    const GLIB_MAJOR_VERSION                 = 2    ! macro
    const GDK_KEY_Menu                       =  0xff67    ! macro
    const GDK_KEY_AudioCycleTrack            =  0x1008ff9b    ! macro
    const GDK_KEY_Zacute                     =  0x1ac    ! macro
    const G_BUFFERED_INPUT_STREAM_GET_CLASS  = (G_TYPE_INSTANCE_GET_CLASS((o),G_TYPE_BUFFERED_INPUT_STREAM,GBufferedInputStreamClass))    ! macro
    const G_DBUS_METHOD_INVOCATION           = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_DBUS_METHOD_INVOCATION,GDBusMethodInvocation))    ! macro
    const GDK_KEY_Help                       = 0xff6a    ! macro
    const GTK_CELL_RENDERER_PIXBUF_CLASS     = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_CELL_RENDERER_PIXBUF,GtkCellRendererPixbufClass))    ! macro
    const GDK_KEY_kana_FU                    = 0x4cc    ! macro
    const GTK_BINARY_AGE                     = (604)    ! macro
    const G_TYPE_MENU_LINK_ITER              = (g_menu_link_iter_get_type())    ! macro
    const GTK_IS_ICON_FACTORY                = (G_TYPE_CHECK_INSTANCE_TYPE((object),GTK_TYPE_ICON_FACTORY))    ! macro
    const GTK_HANDLE_BOX_GET_CLASS           = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_HANDLE_BOX,GtkHandleBoxClass))    ! macro
    const GTK_VSEPARATOR_GET_CLASS           = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_VSEPARATOR,GtkVSeparatorClass))    ! macro
    const G_IS_VFS                           = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_VFS))    ! macro
    const GDK_KEY_Hangul_Nieun               = 0xea4    ! macro
    const GTK_IS_LINK_BUTTON                 = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_LINK_BUTTON))    ! macro
    const GDK_KEY_braille_dots_13456         = 0x100283d    ! macro
    const G_TYPE_INTERFACE                   =  G_TYPE_MAKE_FUNDAMENTAL(2)    ! macro
    const G_POLLABLE_INPUT_STREAM            = (G_TYPE_CHECK_INSTANCE_CAST((obj),G_TYPE_POLLABLE_INPUT_STREAM,GPollableInputStream))    ! macro
    const GDK_KEY_hebrew_ayin                = 0xcf2    ! macro
    const GTK_APP_CHOOSER                    = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_APP_CHOOSER,GtkAppChooser))    ! macro
    const GDK_KEY_braille_dots_13457         = 0x100285d    ! macro
    const GTK_TYPE_IMAGE                     = (gtk_image_get_type())    ! macro
    const GDK_KEY_dead_abovedot              = 0xfe56    ! macro
    const GDK_KEY_braille_dots_1267          =  0x1002863    ! macro
    const GDK_KEY_braille_dots_13458         =  0x100289d    ! macro
    const GDK_KEY_Calculator                 =  0x1008ff1d    ! macro
    const GDK_KEY_Arabic_dammatan            =  0x5ec    ! macro
    const GTK_IS_CSS_PROVIDER_CLASS          = (G_TYPE_CHECK_CLASS_TYPE((c),GTK_TYPE_CSS_PROVIDER))    ! macro
    const GTK_COMBO_BOX_TEXT                 = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_COMBO_BOX_TEXT,GtkComboBoxText))    ! macro
    const GDK_KEY_braille_dots_1268          = 0x10028a3    ! macro
    const GDK_KEY_Georgian_an                =  0x10010d0    ! macro
    const GTK_ARROW                          = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_ARROW,GtkArrow))    ! macro
    const G_IS_DBUS_OBJECT_PROXY             = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_DBUS_OBJECT_PROXY))    ! macro
    const G_SEARCHPATH_SEPARATOR_S           = ";"    ! macro
    const GTK_TYPE_ICON_FACTORY              = (gtk_icon_factory_get_type())    ! macro
    const GDK_KEY_Thai_hohip                 = 0xdcb    ! macro
    const G_STRINGIFY                        =  G_STRINGIFY_ARG(macro_or_string)    ! macro
    const GDK_KEY_kana_HA                    = 0x4ca    ! macro
    const GDK_KEY_Greek_GAMMA                =  0x7c3    ! macro
    const GTK_HBOX_GET_CLASS                 = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_HBOX,GtkHBoxClass))    ! macro
    const GDK_KEY_Cyrillic_shcha             = 0x6dd    ! macro
    const G_TYPE_TLS_DATABASE_LOOKUP_FLAGS   = (g_tls_database_lookup_flags_get_type())    ! macro
    const ATK_TYPE_NO_OP_OBJECT              = (atk_no_op_object_get_type())    ! macro
    const GDK_KEY_3270_PA1                   = 0xfd0a    ! macro
    const GTK_TYPE_RECENT_CHOOSER_ERROR      = (gtk_recent_chooser_error_get_type())    ! macro
    const GDK_KEY_3270_PA2                   = 0xfd0b    ! macro
    const GDK_KEY_kana_HE                    =  0x4cd    ! macro
    const GDK_KEY_3270_PA3                   =  0xfd0c    ! macro
    const G_IMPLEMENT_INTERFACE_DYNAMIC      = {const GInterfaceInfo g_implement_interface_info={(GInterfaceInitFunc)iface_init,NULL,NULL};g_type_module_add_interface(type_module,g_define_type_id,TYPE_IFACE,&g_implement_interface_info);}    ! macro
    const GDK_KEY_Terminate_Server           = 0xfed5    ! macro
    const GLIB_SIZEOF_SIZE_T                 =  8    ! macro
    const GDK_KEY_Cyrillic_de                =  0x6c4    ! macro
    const G_VALUE_HOLDS_ENUM                 = (G_TYPE_CHECK_VALUE_TYPE((value),G_TYPE_ENUM))    ! macro
    const GTK_STYLE_CLASS_BACKGROUND         = "background"    ! macro
    const G_LN2                              = 0.69314718055994530941723212145817656807550013436026    ! macro
    const GTK_RECENT_CHOOSER_MENU_CLASS      = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_RECENT_CHOOSER_MENU,GtkRecentChooserMenuClass))    ! macro
    const GDK_KEY_kana_HI                    = 0x4cb    ! macro
    const GDK_KEY_doubbaselinedot            =  0xaaf    ! macro
    const GDK_KEY_Arabic_peh                 =  0x100067e    ! macro
    const GDK_KEY_braille_dots_13467         =  0x100286d    ! macro
    const GDK_KEY_Cyrillic_A                 =  0x6e1    ! macro
    const GDK_KEY_braille_dots_13468         =  0x10028ad    ! macro
    const GDK_KEY_User2KB                    =  0x1008ff86    ! macro
    const GDK_KEY_wdiaeresis                 =  0x1001e85    ! macro
    const GDK_KEY_braille_dots_1278          =  0x10028c3    ! macro
    const G_DBUS_OBJECT_MANAGER_CLIENT       = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_DBUS_OBJECT_MANAGER_CLIENT,GDBusObjectManagerClient))    ! macro
    const GDK_KEY_Cut                        = 0x1008ff58    ! macro
    const GTK_CONTAINER_WARN_INVALID_CHILD_PROPERTY_ID =  G_OBJECT_WARN_INVALID_PSPEC((object),"child property id",(property_id),(pspec))    ! macro
    const GDK_KEY_Thai_phinthu               = 0xdda    ! macro
    const GDK_KEY_EZH                        =  0x10001b7    ! macro
    const GTK_RECENT_MANAGER_GET_CLASS       = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_RECENT_MANAGER,GtkRecentManagerClass))    ! macro
    const GDK_KEY_Greek_lambda               = 0x7eb    ! macro
    const GTK_SETTINGS                       = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_SETTINGS,GtkSettings))    ! macro
    const GDK_KEY_Cyrillic_E                 = 0x6fc    ! macro
    const GTK_IS_HSCALE                      = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_HSCALE))    ! macro
    const GDK_KEY_kana_HO                    = 0x4ce    ! macro
    const GDK_KEY_AudioRaiseVolume           =  0x1008ff13    ! macro
    const G_VOLUME_IDENTIFIER_KIND_NFS_MOUNT = "nfs-mount"    ! macro
    const GTK_IS_TEXT_MARK                   = (G_TYPE_CHECK_INSTANCE_TYPE((object),GTK_TYPE_TEXT_MARK))    ! macro
    const GDK_KEY_hairspace                  = 0xaa8    ! macro
    const G_TYPE_REMOTE_ACTION_GROUP         = (g_remote_action_group_get_type())    ! macro
    const GDK_KEY_Cyrillic_I                 = 0x6e9    ! macro
    const GTK_IS_CELL_RENDERER_COMBO_CLASS   = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_CELL_RENDERER_COMBO))    ! macro
    const G_KEY_FILE_DESKTOP_KEY_VERSION     = "Version"    ! macro
    const GDK_KEY_dead_invertedbreve         = 0xfe6d    ! macro
    const GDK_TYPE_PIXBUF_ERROR              = (gdk_pixbuf_error_get_type())    ! macro
    const GDK_KEY_Hiragana_Katakana          = 0xff27    ! macro
    const GDK_KEY_kana_HU                    =  0x4cc    ! macro
    const GTK_HSCROLLBAR_GET_CLASS           = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_HSCROLLBAR,GtkHScrollbarClass))    ! macro
    const g_atomic_int_and                   = (g_atomic_int_and((guint*)(atomic),(val)))    ! macro
    const GDK_KEY_Cyrillic_ef                = 0x6c6    ! macro
    const GINT_TO_LE                         = ((gint)GINT32_TO_LE(val))    ! macro
    const GDK_KEY_Greek_OMEGAaccent          = 0x7ab    ! macro
    const GTK_TYPE_WINDOW_POSITION           = (gtk_window_position_get_type())    ! macro
    const GTK_COLOR_SELECTION_DIALOG_GET_CLASS = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_COLOR_SELECTION_DIALOG,GtkColorSelectionDialogClass))    ! macro
    const PANGO_SCALE_MEDIUM                 = ((double)1.0)    ! macro
    const GDK_KEY_leftarrow                  = 0x8fb    ! macro
    const GDK_KEY_Pabovedot                  =  0x1001e56    ! macro
    const GDK_KEY_Cyrillic_O                 =  0x6ef    ! macro
    const GDK_KEY_leftsinglequotemark        =  0xad0    ! macro
    const G_PRIORITY_DEFAULT_IDLE            =  200    ! macro
    const cairo_inverse_transform_point      =  cairo_inverse_transform_point_REPLACED_BY_cairo_device_to_user    ! macro
    const GTK_STYLE_CLASS_SCROLLBAR          = "scrollbar"    ! macro
    const GDK_KEY_Armenian_vyun              = 0x1000582    ! macro
    const GTK_TYPE_COLOR_CHOOSER_WIDGET      = (gtk_color_chooser_widget_get_type())    ! macro
    const G_CANCELLABLE                      = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_CANCELLABLE,GCancellable))    ! macro
    const GDK_KEY_braille_dots_13478         = 0x10028cd    ! macro
    const ATK_GOBJECT_ACCESSIBLE_CLASS       = (G_TYPE_CHECK_CLASS_CAST((klass),ATK_TYPE_GOBJECT_ACCESSIBLE,AtkGObjectAccessibleClass))    ! macro
    const GTK_MENU_TOOL_BUTTON_GET_CLASS     = (G_TYPE_INSTANCE_GET_CLASS((o),GTK_TYPE_MENU_TOOL_BUTTON,GtkMenuToolButtonClass))    ! macro
    const GDK_KEY_Hangul_SsangJieuj          = 0xeb9    ! macro
    const GTK_TEXT_TAG_CLASS                 = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_TEXT_TAG,GtkTextTagClass))    ! macro
    const GDK_KEY_braille_dots_1234567       = 0x100287f    ! macro
    const GDK_KEY_Sinh_dha                   =  0x1000daf    ! macro
    const GTK_CLIPBOARD                      = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_CLIPBOARD,GtkClipboard))    ! macro
    const GDK_KEY_braille_dots_1234568       = 0x10028bf    ! macro
    const GTK_CELL_EDITABLE_GET_IFACE        = (G_TYPE_INSTANCE_GET_INTERFACE((obj),GTK_TYPE_CELL_EDITABLE,GtkCellEditableIface))    ! macro
    const G_TYPE_VALUE                       = (g_value_get_type())    ! macro
    const GDK_KEY_uhorntilde                 = 0x1001eef    ! macro
    const GDK_KEY_Cyrillic_el                =  0x6cc    ! macro
    const GTK_TYPE_HPANED                    = (gtk_hpaned_get_type())    ! macro
    const GDK_KEY_Meta_L                     = 0xffe7    ! macro
    const GDK_KEY_Cyrillic_em                =  0x6cd    ! macro
    const GTK_TYPE_TEXT_DIRECTION            = (gtk_text_direction_get_type())    ! macro
    const GDK_KEY_Cyrillic_en                = 0x6ce    ! macro
    const GDK_VERSION_PREV_STABLE            = (G_ENCODE_VERSION(GDK_MAJOR_VERSION,GDK_MINOR_VERSION-2))    ! macro
    const GDK_KEY_Cyrillic_U                 = 0x6f5    ! macro
    const G_STATIC_REC_MUTEX_INIT            = {G_STATIC_MUTEX_INIT}    ! macro
    const GDK_KEY_ninesuperior               = 0x1002079    ! macro
    const GDK_KEY_horizconnector             =  0x8a3    ! macro
    const GTK_IMAGE_MENU_ITEM                = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_IMAGE_MENU_ITEM,GtkImageMenuItem))    ! macro
    const G_IS_SOCKET_CONNECTION_CLASS       = (G_TYPE_CHECK_CLASS_TYPE((class),G_TYPE_SOCKET_CONNECTION))    ! macro
    const G_TYPE_CREDENTIALS_TYPE            = (g_credentials_type_get_type())    ! macro
    const GTK_EXPANDER                       = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_EXPANDER,GtkExpander))    ! macro
    const GTK_IS_RC_STYLE_CLASS              = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_RC_STYLE))    ! macro
    const G_ICON_GET_IFACE                   = (G_TYPE_INSTANCE_GET_INTERFACE((obj),G_TYPE_ICON,GIconIface))    ! macro
    const GDK_KEY_Delete                     = 0xffff    ! macro
    const GTK_IS_WINDOW_CLASS                = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_WINDOW))    ! macro
    const GTK_TYPE_ACCEL_FLAGS               = (gtk_accel_flags_get_type())    ! macro
    const G_TYPE_TYPE_PLUGIN                 = (g_type_plugin_get_type())    ! macro
    const GTK_TYPE_DELETE_TYPE               = (gtk_delete_type_get_type())    ! macro
    const GDK_KEY_Cyrillic_er                = 0x6d2    ! macro
    const G_VALUE_TYPE                       = (((GValue*)(value))->g_type)    ! macro
    const G_URI_RESERVED_CHARS_ALLOWED_IN_PATH = G_URI_RESERVED_CHARS_ALLOWED_IN_PATH_ELEMENT"/"    ! macro
    const GDK_KEY_iacute                     = 0x0ed    ! macro
    const GDK_KEY_Meta_R                     =  0xffe8    ! macro
    const GDK_KEY_Cyrillic_es                =  0x6d3    ! macro
    const GDK_KEY_careof                     =  0xab8    ! macro
    const G_IS_ZLIB_DECOMPRESSOR             = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_ZLIB_DECOMPRESSOR))    ! macro
    const GDK_KEY_Hangul_J_RieulHieuh        = 0xee2    ! macro
    const GTK_IM_CONTEXT                     = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_IM_CONTEXT,GtkIMContext))    ! macro
    const GDK_KEY_Arabic_gaf                 = 0x10006af    ! macro
    const GTK_IS_ACCEL_MAP                   = (G_TYPE_CHECK_INSTANCE_TYPE((accel_map),GTK_TYPE_ACCEL_MAP))    ! macro
    const GDK_KEY_Armenian_at                = 0x1000568    ! macro
    const GDK_KEY_Thai_thothahan             =  0xdb7    ! macro
    const GTK_ICON_VIEW_GET_CLASS            = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_ICON_VIEW,GtkIconViewClass))    ! macro
    const GTK_COMBO_BOX_GET_CLASS            = (G_TYPE_INSTANCE_GET_CLASS((inst),GTK_TYPE_COMBO_BOX,GtkComboBoxClass))    ! macro
    const G_OBJECT_CLASS                     = (G_TYPE_CHECK_CLASS_CAST((class),G_TYPE_OBJECT,GObjectClass))    ! macro
    const GTK_STYLE_CLASS_BUTTON             = "button"    ! macro
    const GDK_KEY_Georgian_xan               = 0x10010ee    ! macro
    const GDK_KEY_guillemotleft              =  0x0ab    ! macro
    const GTK_IS_CELL_AREA_CONTEXT           = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_CELL_AREA_CONTEXT))    ! macro
    const GTK_IMAGE_MENU_ITEM_CLASS          = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_IMAGE_MENU_ITEM,GtkImageMenuItemClass))    ! macro
    const GTK_PRINT_ERROR                    = gtk_print_error_quark()    ! macro
    const GDK_KEY_Cyrillic_a                 = 0x6c1    ! macro
    const GTK_FONT_BUTTON_CLASS              = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_FONT_BUTTON,GtkFontButtonClass))    ! macro
    const GDK_KEY_braille_dots_1234578       = 0x10028df    ! macro
    const GTK_MESSAGE_DIALOG_GET_CLASS       = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_MESSAGE_DIALOG,GtkMessageDialogClass))    ! macro
    const GTK_TYPE_IM_MULTICONTEXT           = (gtk_im_multicontext_get_type())    ! macro
    const GDK_KEY_3270_EraseEOF              = 0xfd06    ! macro
    const GDK_IS_CURSOR                      = (G_TYPE_CHECK_INSTANCE_TYPE((object),GDK_TYPE_CURSOR))    ! macro
    const GDK_KEY_Thai_thothan               = 0xdb0    ! macro
    const G_TYPE_FILENAME_COMPLETER          = (g_filename_completer_get_type())    ! macro
    const G_IS_FILE_INFO_CLASS               = (G_TYPE_CHECK_CLASS_TYPE((k),G_TYPE_FILE_INFO))    ! macro
    const ATK_TYPE_SELECTION                 = (atk_selection_get_type())    ! macro
    const G_IS_APP_INFO                      = (G_TYPE_CHECK_INSTANCE_TYPE((obj),G_TYPE_APP_INFO))    ! macro
    const GDK_KEY_Omacron                    = 0x3d2    ! macro
    const G_IS_DRIVE                         = (G_TYPE_CHECK_INSTANCE_TYPE((obj),G_TYPE_DRIVE))    ! macro
    const GDK_KEY_kana_KA                    = 0x4b6    ! macro
    const GDK_KEY_abelowdot                  =  0x1001ea1    ! macro
    const GDK_KEY_Cyrillic_e                 =  0x6dc    ! macro
    const G_SOCKET_ADDRESS_GET_CLASS         = (G_TYPE_INSTANCE_GET_CLASS((o),G_TYPE_SOCKET_ADDRESS,GSocketAddressClass))    ! macro
    const G_UNLIKELY                         = (expr)    ! macro
    const G_IS_SOCKET_LISTENER_CLASS         = (G_TYPE_CHECK_CLASS_TYPE((class),G_TYPE_SOCKET_LISTENER))    ! macro
    const GDK_KEY_Ecircumflexhook            = 0x1001ec2    ! macro
    const GDK_KEY_kana_KE                    =  0x4b9    ! macro
    const GDK_KEY_nacute                     =  0x1f1    ! macro
    const CAIRO_VERSION_ENCODE               = (((major)*10000)+((minor)*100)+((micro)*1))    ! macro
    const GDK_KEY_Cyrillic_i                 = 0x6c9    ! macro
    const GTK_CELL_RENDERER_SPIN             = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_CELL_RENDERER_SPIN,GtkCellRendererSpin))    ! macro
    const GDK_KEY_Cyrillic_GHE_bar           = 0x1000492    ! macro
    const GDK_KEY_Greek_TAU                  =  0x7d4    ! macro
    const GTK_CALENDAR_GET_CLASS             = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_CALENDAR,GtkCalendarClass))    ! macro
    const GTK_IS_TREE_DRAG_DEST              = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_TREE_DRAG_DEST))    ! macro
    const G_MAXSIZE                          = G_MAXUINT64    ! macro
    const GDK_KEY_Greek_ZETA                 =  0x7c6    ! macro
    const GTK_IM_CONTEXT_SIMPLE_CLASS        = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_IM_CONTEXT_SIMPLE,GtkIMContextSimpleClass))    ! macro
    const G_BUFFERED_INPUT_STREAM            = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_BUFFERED_INPUT_STREAM,GBufferedInputStream))    ! macro
    const PANGO_SCALE_LARGE                  = ((double)1.2)    ! macro
    const GDK_PIXBUF_MICRO                   = (5)    ! macro
    const G_FILE_INFO_GET_CLASS              = (G_TYPE_INSTANCE_GET_CLASS((o),G_TYPE_FILE_INFO,GFileInfoClass))    ! macro
    const GDK_KEY_kana_KI                    = 0x4b7    ! macro
    const GTK_TYPE_DIALOG_FLAGS              = (gtk_dialog_flags_get_type())    ! macro
    const GDK_KEY_Uhook                      = 0x1001ee6    ! macro
    const GTK_APP_CHOOSER_DIALOG             = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_APP_CHOOSER_DIALOG,GtkAppChooserDialog))    ! macro
    const GDK_KEY_ae                         = 0x0e6    ! macro
    const g_ascii_iscntrl                    = ((g_ascii_table[(guchar)(c)]&G_ASCII_CNTRL)!=0)    ! macro
    const GDK_KEY_jcircumflex                = 0x2bc    ! macro
    const G_VFS                              = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_VFS,GVfs))    ! macro
    const G_IS_CREDENTIALS_CLASS             = (G_TYPE_CHECK_CLASS_TYPE((k),G_TYPE_CREDENTIALS))    ! macro
    const GDK_KEY_Cyrillic_o                 = 0x6cf    ! macro
    const GDK_KEY_Georgian_en                =  0x10010d4    ! macro
    const GDK_KEY_semivoicedsound            =  0x4df    ! macro
    const GDK_KEY_Cyrillic_SOFTSIGN          =  0x6f8    ! macro
    const G_VARIANT_TYPE_BYTESTRING          = ((const GVariantType*)"ay")    ! macro
    const GDK_KEY_braille_dots_2678          = 0x10028e2    ! macro
    const GTK_CHECK_BUTTON_GET_CLASS         = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_CHECK_BUTTON,GtkCheckButtonClass))    ! macro
    const GTK_TYPE_SETTINGS                  = (gtk_settings_get_type())    ! macro
    const G_TYPE_CONVERTER_OUTPUT_STREAM     = (g_converter_output_stream_get_type())    ! macro
    const G_TYPE_FILE_TYPE                   = (g_file_type_get_type())    ! macro
    const GDK_KEY_kana_KO                    = 0x4ba    ! macro
    const GDK_KEY_braille_dots_12            =  0x1002803    ! macro
    const GTK_IS_TOOLTIP                     = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_TOOLTIP))    ! macro
    const g_debug                            = g_log(G_LOG_DOMAIN,G_LOG_LEVEL_DEBUG,__VA_ARGS__)    ! macro
    const GDK_KEY_hebrew_het                 = 0xce7    ! macro
    const GTK_IS_CELL_RENDERER_CLASS         = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_CELL_RENDERER))    ! macro
    const GDK_KEY_braille_dots_13            = 0x1002805    ! macro
    const GTK_SETTINGS_GET_CLASS             = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_SETTINGS,GtkSettingsClass))    ! macro
    const GDK_KEY_Cyrillic_ha                = 0x6c8    ! macro
    const GDK_KEY_Cyrillic_u                 =  0x6d5    ! macro
    const g_filename_from_utf8               =  g_filename_from_utf8_utf8    ! macro
    const GDK_KEY_braille_dots_14            =  0x1002809    ! macro
    const GTK_BUILDABLE_CLASS                = (G_TYPE_CHECK_CLASS_CAST((obj),GTK_TYPE_BUILDABLE,GtkBuildableIface))    ! macro
    const GTK_TYPE_RC_FLAGS                  = (gtk_rc_flags_get_type())    ! macro
    const GDK_KEY_Armenian_da                = 0x1000564    ! macro
    const GTK_ICON_FACTORY                   = (G_TYPE_CHECK_INSTANCE_CAST((object),GTK_TYPE_ICON_FACTORY,GtkIconFactory))    ! macro
    const cairo_surface_set_filter           = cairo_surface_set_filter_DEPRECATED_BY_cairo_pattern_set_filter    ! macro
    const GDK_KEY_braille_dots_15            =  0x1002811    ! macro
    const G_VALUE_HOLDS_VARIANT              = (G_TYPE_CHECK_VALUE_TYPE((value),G_TYPE_VARIANT))    ! macro
    const GTK_VSEPARATOR                     = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_VSEPARATOR,GtkVSeparator))    ! macro
    const GDK_KEY_uhorngrave                 = 0x1001eeb    ! macro
    const GDK_KEY_braille_dots_16            =  0x1002821    ! macro
    const GDK_KEY_sacute                     =  0x1b6    ! macro
    const GDK_KEY_braille_dots_17            =  0x1002841    ! macro
    const GTK_PRINT_SETTINGS_OUTPUT_BASENAME = "output-basename"    ! macro
    const GDK_KEY_kana_KU                    = 0x4b8    ! macro
    const GDK_KEY_Greek_gamma                =  0x7e3    ! macro
    const GDK_KEY_braille_dots_18            =  0x1002881    ! macro
    const GDK_KEY_Georgian_fi                =  0x10010f6    ! macro
    const GTK_TYPE_STATE_TYPE                = (gtk_state_type_get_type())    ! macro
    const G_VALUE_HOLDS_CHAR                 = (G_TYPE_CHECK_VALUE_TYPE((value),G_TYPE_CHAR))    ! macro
    const G_PARAM_SPEC_CLASS                 = (G_TYPE_CHECK_CLASS_CAST((pclass),G_TYPE_PARAM,GParamSpecClass))    ! macro
    const G_FLAGS_CLASS_TYPE_NAME            = (g_type_name(G_FLAGS_CLASS_TYPE(class)))    ! macro
    const G_TLS_BACKEND_GET_INTERFACE        = (G_TYPE_INSTANCE_GET_INTERFACE((obj),G_TYPE_TLS_BACKEND,GTlsBackendInterface))    ! macro
    const G_URI_RESERVED_CHARS_ALLOWED_IN_USERINFO = G_URI_RESERVED_CHARS_SUBCOMPONENT_DELIMITERS":"    ! macro
    const GUINT16_SWAP_LE_BE_CONSTANT        = ((guint16)((guint16)((guint16)(val)>>8)|(guint16)((guint16)(val)<<8)))    ! macro
    const GDK_KEY_at                         = 0x040    ! macro
    const G_CANCELLABLE_CLASS                = (G_TYPE_CHECK_CLASS_CAST((k),G_TYPE_CANCELLABLE,GCancellableClass))    ! macro
    const G_IS_SIMPLE_ACTION_GROUP           = (G_TYPE_CHECK_INSTANCE_TYPE((inst),G_TYPE_SIMPLE_ACTION_GROUP))    ! macro
    const GDK_KEY_emdash                     = 0xaa9    ! macro
    const GTK_IS_FILE_CHOOSER_DIALOG         = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_FILE_CHOOSER_DIALOG))    ! macro
    const GDK_KEY_ISO_Fast_Cursor_Right      = 0xfe2d    ! macro
    const GDK_KEY_quotedbl                   =  0x022    ! macro
    const GTK_IS_LEVEL_BAR                   = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_LEVEL_BAR))    ! macro
    const GSIZE_TO_BE                        = ((gsize)GUINT64_TO_BE(val))    ! macro
    const GDK_KEY_kana_MA                    = 0x4cf    ! macro
    const GDK_IS_PIXBUF_SIMPLE_ANIM          = (G_TYPE_CHECK_INSTANCE_TYPE((object),GDK_TYPE_PIXBUF_SIMPLE_ANIM))    ! macro
    const GTK_STOCK_SAVE_AS                  = "gtk-save-as"    ! macro
    const G_IS_SOCKET_SERVICE                = (G_TYPE_CHECK_INSTANCE_TYPE((inst),G_TYPE_SOCKET_SERVICE))    ! macro
    const GDK_KEY_braille_dots_23            = 0x1002806    ! macro
    const GDK_KEY_Explorer                   =  0x1008ff5d    ! macro
    const GTK_TYPE_EXPANDER                  = (gtk_expander_get_type())    ! macro
    const G_TYPE_DRIVE_START_STOP_TYPE       = (g_drive_start_stop_type_get_type())    ! macro
    const GTK_MENU                           = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_MENU,GtkMenu))    ! macro
    const GTK_IS_BUTTON_CLASS                = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_BUTTON))    ! macro
    const GTK_STOCK_CLOSE                    = "gtk-close"    ! macro
    const GTK_TYPE_TEXT_SEARCH_FLAGS         = (gtk_text_search_flags_get_type())    ! macro
    const GDK_KEY_braille_dots_24            = 0x100280a    ! macro
    const G_VALUE_HOLDS_ULONG                = (G_TYPE_CHECK_VALUE_TYPE((value),G_TYPE_ULONG))    ! macro
    const GTK_CELL_RENDERER_TEXT_GET_CLASS   = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_CELL_RENDERER_TEXT,GtkCellRendererTextClass))    ! macro
    const GDK_KEY_braille_dots_25            = 0x1002812    ! macro
    const g_filename_to_uri                  =  g_filename_to_uri_utf8    ! macro
    const GDK_KEY_braille_dots_26            =  0x1002822    ! macro
    const G_NETWORK_SERVICE_CLASS            = (G_TYPE_CHECK_CLASS_CAST((k),G_TYPE_NETWORK_SERVICE,GNetworkServiceClass))    ! macro
    const GDK_KEY_KP_Left                    = 0xff96    ! macro
    const GDK_KEY_kana_ME                    =  0x4d2    ! macro
    const GDK_PIXBUF                         = (G_TYPE_CHECK_INSTANCE_CAST((object),GDK_TYPE_PIXBUF,GdkPixbuf))    ! macro
    const GDK_KEY_braille_dots_27            = 0x1002842    ! macro
    const GDK_KEY_Arabic_khah                =  0x5ce    ! macro
    const GTK_TYPE_BUILDER                   = (gtk_builder_get_type())    ! macro
    const GTK_STOCK_MEDIA_REWIND             = "gtk-media-rewind"    ! macro
    const GDK_PIXBUF_VAR                     = extern __declspec(dllimport)    ! macro
    const GTK_IS_VBOX                        = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_VBOX))    ! macro
    const GDK_KEY_Cyrillic_ie                = 0x6c5    ! macro
    const GTK_TYPE_FILE_CHOOSER_DIALOG       = (gtk_file_chooser_dialog_get_type())    ! macro
    const GDK_KEY_braille_dots_28            = 0x1002882    ! macro
    const GTK_TYPE_POLICY_TYPE               = (gtk_policy_type_get_type())    ! macro
    const GDK_KEY_Thai_lakkhangyao           = 0xde5    ! macro
    const PANGO_IS_CAIRO_FONT                = (G_TYPE_CHECK_INSTANCE_TYPE((object),PANGO_TYPE_CAIRO_FONT))    ! macro
    const G_FILTER_INPUT_STREAM_GET_CLASS    = (G_TYPE_INSTANCE_GET_CLASS((o),G_TYPE_FILTER_INPUT_STREAM,GFilterInputStreamClass))    ! macro
    const PANGO_SCALE_SMALL                  = ((double)0.8333333333333)    ! macro
    const GTK_STYLE_PROVIDER_PRIORITY_APPLICATION = 600    ! macro
    const GDK_KEY_Sinh_ssha                  =  0x1000dc2    ! macro
    const GDK_KEY_kana_MI                    =  0x4d0    ! macro
    const GLIB_SIZEOF_VOID_P                 =  8    ! macro
    const GDK_KEY_3270_Right2                =  0xfd03    ! macro
    const GDK_KEY_Arabic_zah                 =  0x5d8    ! macro
    const GDK_KEY_Eisu_Shift                 =  0xff2f    ! macro
    const GDK_KEY_RupeeSign                  =  0x10020a8    ! macro
    const g_spawn_command_line_async         =  g_spawn_command_line_async_utf8    ! macro
    const GTK_TYPE_RELIEF_STYLE              = (gtk_relief_style_get_type())    ! macro
    const G_IS_PROXY_ADDRESS_ENUMERATOR_CLASS = (G_TYPE_CHECK_CLASS_TYPE((k),G_TYPE_PROXY_ADDRESS_ENUMERATOR))    ! macro
    const GTK_ACTION_GET_CLASS               = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_ACTION,GtkActionClass))    ! macro
    const GDK_KEY_ch                         = 0xfea0    ! macro
    const GDK_KEY_Macedonia_dse              =  0x6a5    ! macro
    const GDK_KEY_Arabic_tehmarbuta          =  0x5c9    ! macro
    const GDK_KEY_kana_MO                    =  0x4d3    ! macro
    const GTK_HPANED_GET_CLASS               = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_HPANED,GtkHPanedClass))    ! macro
    const GDK_KEY_Display                    = 0x1008ff59    ! macro
    const G_IS_ZLIB_COMPRESSOR               = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_ZLIB_COMPRESSOR))    ! macro
    const GDK_KEY_kana_NA                    = 0x4c5    ! macro
    const GDK_KEY_Cyrillic_io                =  0x6a3    ! macro
    const g_strstrip                         =  g_strchomp(g_strchug(string))    ! macro
    const GDK_KEY_Word                       = 0x1008ff89    ! macro
    const G_TYPE_FROM_INTERFACE              = (((GTypeInterface*)(g_iface))->g_type)    ! macro
    const GDK_KEY_braille_dots_34            = 0x100280c    ! macro
    const GDK_KEY_Georgian_he                =  0x10010f1    ! macro
    const GTK_PRINT_SETTINGS_OUTPUT_URI      = "output-uri"    ! macro
    const GDK_KEY_braille_dots_35            = 0x1002814    ! macro
    const GULONG_TO_BE                       = ((gulong)GUINT32_TO_BE(val))    ! macro
    const GTK_STOCK_JUMP_TO                  = "gtk-jump-to"    ! macro
    const GDK_KEY_braille_dots_36            = 0x1002824    ! macro
    const GDK_KEY_Dabovedot                  =  0x1001e0a    ! macro
    const GDK_KEY_kana_NE                    =  0x4c8    ! macro
    const GTK_IS_ENTRY_BUFFER_CLASS          = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_ENTRY_BUFFER))    ! macro
    const G_IS_PROXY                         = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_PROXY))    ! macro
    const GDK_KEY_braille_dots_37            = 0x1002844    ! macro
    const cairo_concat_matrix                =  cairo_concat_matrix_REPLACED_BY_cairo_transform    ! macro
    const GTK_IS_EXPANDER_CLASS              = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_EXPANDER))    ! macro
    const GDK_KEY_kana_MU                    = 0x4d1    ! macro
    const ATK_IS_REGISTRY_CLASS              = (G_TYPE_CHECK_CLASS_TYPE((klass),ATK_TYPE_REGISTRY))    ! macro
    const GDK_KEY_Cyrillic_je                = 0x6a8    ! macro
    const GDK_KEY_braille_dots_38            =  0x1002884    ! macro
    const GDK_KEY_Armenian_fe                =  0x1000586    ! macro
    const GTK_STYLE_CLASS_VIEW               = "view"    ! macro
    const GTK_APP_CHOOSER_WIDGET             = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_APP_CHOOSER_WIDGET,GtkAppChooserWidget))    ! macro
    const G_TYPE_CANCELLABLE                 = (g_cancellable_get_type())    ! macro
    const G_TCP_CONNECTION_CLASS             = (G_TYPE_CHECK_CLASS_CAST((class),G_TYPE_TCP_CONNECTION,GTcpConnectionClass))    ! macro
    const GDK_KEY_kana_NI                    = 0x4c6    ! macro
    const GDK_KEY_cr                         =  0x9e4    ! macro
    const GDK_TYPE_GRAB_STATUS               = (gdk_grab_status_get_type())    ! macro
    const GDK_TYPE_WINDOW_TYPE               = (gdk_window_type_get_type())    ! macro
    const GDK_KEY_Armenian_lyun              = 0x100056c    ! macro
    const G_FILE_ATTRIBUTE_FILESYSTEM_READONLY = "filesystem::readonly"    ! macro
    const G_PARAM_SPEC_TYPE_NAME             = (g_type_name(G_PARAM_SPEC_TYPE(pspec)))    ! macro
    const GDK_KEY_Sinh_ng2                   = 0x1000d9e    ! macro
    const GTK_TYPE_TARGET_LIST               = (gtk_target_list_get_type())    ! macro
    const GDK_TYPE_CURSOR                    = (gdk_cursor_get_type())    ! macro
    const GTK_IS_IM_CONTEXT                  = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_IM_CONTEXT))    ! macro
    const GDK_KEY_minutes                    = 0xad6    ! macro
    const G_SOCKET_ADDRESS                   = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_SOCKET_ADDRESS,GSocketAddress))    ! macro
    const GDK_KEY_Uhorn                      = 0x10001af    ! macro
    const GTK_IS_CELL_RENDERER_TEXT          = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_CELL_RENDERER_TEXT))    ! macro
    const GTK_IS_TEAROFF_MENU_ITEM_CLASS     = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_TEAROFF_MENU_ITEM))    ! macro
    const G_TLS_CONNECTION_CLASS             = (G_TYPE_CHECK_CLASS_CAST((class),G_TYPE_TLS_CONNECTION,GTlsConnectionClass))    ! macro
    const G_TYPE_DBUS_MESSAGE_HEADER_FIELD   = (g_dbus_message_header_field_get_type())    ! macro
    const GDK_KEY_Hangul_Mieum               = 0xeb1    ! macro
    const ATK_NO_OP_OBJECT_FACTORY_CLASS     = (G_TYPE_CHECK_CLASS_CAST((klass),ATK_TYPE_NO_OP_OBJECT_FACTORY,AtkNoOpObjectFactoryClass))    ! macro
    const GDK_KEY_kana_NO                    = 0x4c9    ! macro
    const G_TYPE_DBUS_OBJECT_MANAGER         = (g_dbus_object_manager_get_type())    ! macro
    const GDK_KEY_Zstroke                    = 0x10001b5    ! macro
    const GTK_WINDOW_CLASS                   = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_WINDOW,GtkWindowClass))    ! macro
    const G_CANCELLABLE_GET_CLASS            = (G_TYPE_INSTANCE_GET_CLASS((o),G_TYPE_CANCELLABLE,GCancellableClass))    ! macro
    const G_IS_INPUT_STREAM_CLASS            = (G_TYPE_CHECK_CLASS_TYPE((k),G_TYPE_INPUT_STREAM))    ! macro
    const GDK_TYPE_PIXBUF_ALPHA_MODE         = (gdk_pixbuf_alpha_mode_get_type())    ! macro
    const GDK_TYPE_AXIS_USE                  = (gdk_axis_use_get_type())    ! macro
    const GDK_KEY_Cyrillic_ka                = 0x6cb    ! macro
    const GTK_STATUSBAR_CLASS                = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_STATUSBAR,GtkStatusbarClass))    ! macro
    const GTK_TYPE_CSS_PROVIDER_ERROR        = (gtk_css_provider_error_get_type())    ! macro
    const G_TYPE_BINDING_FLAGS               = (g_binding_flags_get_type())    ! macro
    const GDK_KEY_braille_dots_45            = 0x1002818    ! macro
    const GDK_KEY_Armenian_amanak            =  0x100055c    ! macro
    const G_TYPE_DBUS_CONNECTION             = (g_dbus_connection_get_type())    ! macro
    const GDK_KEY_braille_dots_46            = 0x1002828    ! macro
    const g_clear_pointer                    =  G_STMT_START{G_STATIC_ASSERT(sizeof*(pp)==sizeof(gpointer));gpointer*_pp=(gpointer*)(pp);gpointer _p;GDestroyNotify _destroy=(GDestroyNotify)(destroy);(void)(0?(gpointer)*(pp):0);do _p=g_atomic_pointer_get(_pp);while G_UNLIKELY(!g_atomic_pointer_compare_and_exchange(_pp,_p,NULL));if(_p)_destroy(_p);}G_STMT_END    ! macro
    const GDK_KEY_asterisk                   =  0x02a    ! macro
    const cairo_set_target_quartz            =  cairo_set_target_quartz_DEPRECATED_BY_cairo_quartz_surface_create    ! macro
    const GDK_KEY_braille_dots_47            =  0x1002848    ! macro
    const GDK_KEY_Ocircumflextilde           =  0x1001ed6    ! macro
    const G_FILE_ATTRIBUTE_ACCESS_CAN_TRASH  = "access::can-trash"    ! macro
    const GDK_KEY_kana_NU                    = 0x4c7    ! macro
    const GTK_IM_MULTICONTEXT_GET_CLASS      = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_IM_MULTICONTEXT,GtkIMMulticontextClass))    ! macro
    const GDK_KEY_braille_dots_48            = 0x1002888    ! macro
    const PANGO_GLYPH_UNKNOWN_FLAG           = ((PangoGlyph)0x10000000)    ! macro
    const GDK_KEY_Cyrillic_shorti            = 0x6ca    ! macro
    const G_FILE_ATTRIBUTE_STANDARD_IS_BACKUP = "standard::is-backup"    ! macro
    const GDK_KEY_Greek_omicronaccent        = 0x7b7    ! macro
    const G_TYPE_PROXY_ADDRESS_ENUMERATOR    = (g_proxy_address_enumerator_get_type())    ! macro
    const GTK_IS_FILE_CHOOSER_WIDGET         = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_FILE_CHOOSER_WIDGET))    ! macro
    const gtk_major_version                  = gtk_get_major_version()    ! macro
    const PANGO_SCALE_XX_LARGE               = ((double)1.728)    ! macro
    const GDK_KEY_Thai_phophung              = 0xdbc    ! macro
    const ATK_RELATION_CLASS                 = (G_TYPE_CHECK_CLASS_CAST((klass),ATK_TYPE_RELATION,AtkRelationClass))    ! macro
    const GTK_STOCK_GOTO_LAST                = "gtk-goto-last"    ! macro
    const G_OUTPUT_STREAM_CLASS              = (G_TYPE_CHECK_CLASS_CAST((k),G_TYPE_OUTPUT_STREAM,GOutputStreamClass))    ! macro
    const GDK_KEY_Oslash                     = 0x0d8    ! macro
    const G_THEMED_ICON_GET_CLASS            = (G_TYPE_INSTANCE_GET_CLASS((o),G_TYPE_THEMED_ICON,GThemedIconClass))    ! macro
    const GTK_IS_SPINNER                     = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_SPINNER))    ! macro
    const GDK_DEPRECATED_IN_3_4_FOR          = GDK_DEPRECATED_FOR(f)    ! macro
    const GTK_IS_CELL_RENDERER_SPINNER_CLASS = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_CELL_RENDERER_SPINNER))    ! macro
    const GDK_KEY_Ubelowdot                  = 0x1001ee4    ! macro
    const GDK_KEY_Georgian_in                =  0x10010d8    ! macro
    const GDK_KEY_emfilledrect               =  0xadf    ! macro
    const GTK_IS_SETTINGS                    = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_SETTINGS))    ! macro
    const G_STMT_END                         = while(0)    ! macro
    const GTK_IS_TEXT_BUFFER_CLASS           = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_TEXT_BUFFER))    ! macro
    const GTK_IS_TOOLBAR                     = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_TOOLBAR))    ! macro
    const GDK_KEY_braille_dots_23567         = 0x1002876    ! macro
    const PANGO_TYPE_SCRIPT                  = (pango_script_get_type())    ! macro
    const GDK_THREADS_LEAVE                  = gdk_threads_leave()    ! macro
    const GTK_TYPE_FILE_CHOOSER_WIDGET       = (gtk_file_chooser_widget_get_type())    ! macro
    const GDK_KEY_braille_dots_23568         = 0x10028b6    ! macro
    const GTK_IS_ACTION_CLASS                = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_ACTION))    ! macro
    const GDK_KEY_Jcircumflex                = 0x2ac    ! macro
    const PANGO_TYPE_MATRIX                  = (pango_matrix_get_type())    ! macro
    const GDK_KEY_braille_dots_56            = 0x1002830    ! macro
    const G_NETWORK_SERVICE                  = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_NETWORK_SERVICE,GNetworkService))    ! macro
    const GDK_KEY_Pointer_Right              = 0xfee1    ! macro
    const GDK_KEY_braille_dots_57            =  0x1002850    ! macro
    const GTK_STYLE_CLASS_LINKED             = "linked"    ! macro
    const GDK_KEY_braille_dots_58            = 0x1002890    ! macro
    const CAIRO_HAS_IMAGE_SURFACE            =  1    ! macro
    const GDK_KEY_lessthanequal              =  0x8bc    ! macro
    const GLONG_TO_LE                        = ((glong)GINT32_TO_LE(val))    ! macro
    const GTK_IS_LABEL_CLASS                 = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_LABEL))    ! macro
    const GTK_IS_VSEPARATOR                  = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_VSEPARATOR))    ! macro
    const G_IS_MENU_LINK_ITER_CLASS          = (G_TYPE_CHECK_CLASS_TYPE((class),G_TYPE_MENU_LINK_ITER))    ! macro
    const GDK_KEY_Serbian_lje                = 0x6a9    ! macro
    const GDK_KEY_Home                       =  0xff50    ! macro
    const GDK_KEY_Armenian_hi                =  0x1000575    ! macro
    const GDK_KEY_Tslash                     =  0x3ac    ! macro
    const GTK_OVERLAY_GET_CLASS              = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_OVERLAY,GtkOverlayClass))    ! macro
    const GTK_IS_ACCEL_GROUP                 = (G_TYPE_CHECK_INSTANCE_TYPE((object),GTK_TYPE_ACCEL_GROUP))    ! macro
    const GDK_TYPE_INTERP_TYPE               = (gdk_interp_type_get_type())    ! macro
    const GDK_KEY_ff                         = 0x9e3    ! macro
    const GDK_KEY_Greek_iotadieresis         =  0x7b5    ! macro
    const GDK_KEY_Arabic_kasra               =  0x5f0    ! macro
    const GDK_KEY_questiondown               =  0x0bf    ! macro
    const GTK_PRINT_SETTINGS_RESOLUTION      = "resolution"    ! macro
    const G_TYPE_SOCKET_MSG_FLAGS            = (g_socket_msg_flags_get_type())    ! macro
    const GTK_TYPE_PRINT_STATUS              = (gtk_print_status_get_type())    ! macro
    const G_TYPE_FILE_ATTRIBUTE_TYPE         = (g_file_attribute_type_get_type())    ! macro
    const GTK_TYPE_LINK_BUTTON               = (gtk_link_button_get_type())    ! macro
    const GTK_IS_EXPANDER                    = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_EXPANDER))    ! macro
    const GTK_TYPE_NOTEBOOK_TAB              = (gtk_notebook_tab_get_type())    ! macro
    const GDK_KEY_Armenian_but               = 0x100055d    ! macro
    const GDK_KEY_Thai_saraa                 =  0xdd0    ! macro
    const GTK_TYPE_RADIO_TOOL_BUTTON         = (gtk_radio_tool_button_get_type())    ! macro
    const GDK_KEY_New                        = 0x1008ff68    ! macro
    const GDK_KEY_guillemotright             =  0x0bb    ! macro
    const GDK_KEY_Armenian_ho                =  0x1000570    ! macro
    const GTK_MENU_BUTTON_CLASS              = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_MENU_BUTTON,GtkMenuButtonClass))    ! macro
    const GDK_KEY_braille_dots_23578         = 0x10028d6    ! macro
    const PANGO_TYPE_ELLIPSIZE_MODE          = (pango_ellipsize_mode_get_type())    ! macro
    const ATK_IS_UTIL                        = G_TYPE_CHECK_INSTANCE_TYPE((obj),ATK_TYPE_UTIL)    ! macro
    const G_STMT_START                       = do    ! macro
    const GTK_STYLE_CLASS_DIM_LABEL          = "dim-label"    ! macro
    const GTK_SCROLLBAR                      = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_SCROLLBAR,GtkScrollbar))    ! macro
    const GTK_UNIT_PIXEL                     = GTK_UNIT_NONE    ! macro
    const GDK_KEY_Thai_sarae                 =  0xde0    ! macro
    const GDK_KEY_ISO_Partial_Line_Up        =  0xfe23    ! macro
    const GDK_KEY_Cyrillic_ghe               =  0x6c7    ! macro
    const GDK_KEY_braille_dots_67            =  0x1002860    ! macro
    const GDK_KEY_Itilde                     =  0x3a5    ! macro
    const GDK_KEY_braille_dots_68            =  0x10028a0    ! macro
    const GTK_IS_CELL_AREA_CLASS             = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_CELL_AREA))    ! macro
    const GTK_MENU_SHELL_CLASS               = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_MENU_SHELL,GtkMenuShellClass))    ! macro
    const GDK_KEY_Thai_sarai                 = 0xdd4    ! macro
    const PANGO_SCALE_XX_SMALL               = ((double)0.5787037037037)    ! macro
    const cairo_current_path_flat            = cairo_current_path_flat_DEPRECATED_BY_cairo_copy_path_flat    ! macro
    const GTK_UI_MANAGER_CLASS               = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_UI_MANAGER,GtkUIManagerClass))    ! macro
    const GTK_IS_FRAME                       = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_FRAME))    ! macro
    const GTK_IS_SEARCH_ENTRY_CLASS          = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_SEARCH_ENTRY))    ! macro
    const G_ACTION_GROUP_GET_IFACE           = (G_TYPE_INSTANCE_GET_INTERFACE((inst),G_TYPE_ACTION_GROUP,GActionGroupInterface))    ! macro
    const GDK_KEY_femalesymbol               = 0xaf8    ! macro
    const GTK_CELL_LAYOUT                    = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_CELL_LAYOUT,GtkCellLayout))    ! macro
    const g_test_perf                        = (g_test_config_vars->test_perf)    ! macro
    const GDK_KEY_quad                       = 0xbcc    ! macro
    const GDK_KEY_Touroku                    =  0xff2b    ! macro
    const GDK_KEY_Armenian_cha               =  0x1000579    ! macro
    const GDK_KEY_Ocircumflexgrave           =  0x1001ed2    ! macro
    const GDK_KEY_Sinh_nga                   =  0x1000d9f    ! macro
    const G_TYPE_KEY_FILE                    = (g_key_file_get_type())    ! macro
    const G_SOCKET_CONTROL_MESSAGE           = (G_TYPE_CHECK_INSTANCE_CAST((inst),G_TYPE_SOCKET_CONTROL_MESSAGE,GSocketControlMessage))    ! macro
    const G_TLS_INTERACTION_CLASS            = (G_TYPE_CHECK_CLASS_CAST((k),G_TYPE_TLS_INTERACTION,GTlsInteractionClass))    ! macro
    const GTK_BUTTON_CLASS                   = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_BUTTON,GtkButtonClass))    ! macro
    const G_GUINT32_FORMAT                   = "u"    ! macro
    const GTK_RADIO_TOOL_BUTTON_CLASS        = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_RADIO_TOOL_BUTTON,GtkRadioToolButtonClass))    ! macro
    const GTK_TYPE_LEVEL_BAR_MODE            = (gtk_level_bar_mode_get_type())    ! macro
    const GDK_KEY_braille_dots_123567        = 0x1002877    ! macro
    const GDK_KEY_Thai_sarao                 =  0xde2    ! macro
    const GTK_CELL_RENDERER_SPINNER_CLASS    = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_CELL_RENDERER_SPINNER,GtkCellRendererSpinnerClass))    ! macro
    const GTK_IS_PRINT_SETTINGS              = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_PRINT_SETTINGS))    ! macro
    const GDK_KEY_braille_dots_123568        = 0x10028b7    ! macro
    const GDK_KEY_kana_RA                    =  0x4d7    ! macro
    const G_TLS_CONNECTION_GET_CLASS         = (G_TYPE_INSTANCE_GET_CLASS((inst),G_TYPE_TLS_CONNECTION,GTlsConnectionClass))    ! macro
    const g_assert_not_reached               = do{g_assertion_message(G_LOG_DOMAIN,__FILE__,__LINE__,G_STRFUNC,NULL);}while(0)    ! macro
    const GTK_PRINT_SETTINGS_PRINTER_LPI     = "printer-lpi"    ! macro
    const GDK_KEY_Obelowdot                  = 0x1001ecc    ! macro
    const GTK_EDITABLE_GET_IFACE             = (G_TYPE_INSTANCE_GET_INTERFACE((inst),GTK_TYPE_EDITABLE,GtkEditableInterface))    ! macro
    const G_FILTER_OUTPUT_STREAM             = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_FILTER_OUTPUT_STREAM,GFilterOutputStream))    ! macro
    const G_TYPE_BINDING                     = (g_binding_get_type())    ! macro
    const GDK_KEY_kana_RE                    = 0x4da    ! macro
    const GDK_KEY_Excel                      =  0x1008ff5c    ! macro
    const GTK_TOOL_ITEM_GROUP_CLASS          = (G_TYPE_CHECK_CLASS_CAST(cls,GTK_TYPE_TOOL_ITEM_GROUP,GtkToolItemGroupClass))    ! macro
    const GDK_KEY_enopencircbullet           = 0xae0    ! macro
    const GDK_KEY_Ntilde                     =  0x0d1    ! macro
    const GDK_KEY_Thai_sarau                 =  0xdd8    ! macro
    const G_DBUS_INTERFACE_GET_IFACE         = (G_TYPE_INSTANCE_GET_INTERFACE((o),G_TYPE_DBUS_INTERFACE,GDBusInterfaceIface))    ! macro
    const GTK_APPLICATION_WINDOW_CLASS       = (G_TYPE_CHECK_CLASS_CAST((class),GTK_TYPE_APPLICATION_WINDOW,GtkApplicationWindowClass))    ! macro
    const GDK_KEY_braille_dots_78            = 0x10028c0    ! macro
    const GDK_KEY_Armenian_je                =  0x100057b    ! macro
    const GDK_KEY_upcaret                    =  0xba9    ! macro
    const GDK_KEY_Hangul_J_SsangSios         =  0xee7    ! macro
    const G_LOG_LEVEL_USER_SHIFT             = (8)    ! macro
    const G_TYPE_VOLUME_MONITOR              = (g_volume_monitor_get_type())    ! macro
    const GDK_KEY_kana_RI                    = 0x4d8    ! macro
    const GDK_KEY_Macedonia_KJE              =  0x6bc    ! macro
    const GDK_KEY_Sinh_ee2                   =  0x1000dda    ! macro
    const GDK_SELECTION_TYPE_PIXMAP          =  _GDK_MAKE_ATOM(20)    ! macro
    const G_DEPRECATED_FOR                   = G_DEPRECATED    ! macro
    const GDK_KEY_acute                      =  0x0b4    ! macro
    const GDK_KEY_hebrew_resh                =  0xcf8    ! macro
    const GTK_TYPE_TOOL_ITEM_GROUP           = (gtk_tool_item_group_get_type())    ! macro
    const GDK_KEY_Ukranian_YI                = 0x6b7    ! macro
    const GDK_KEY_musicalsharp               =  0xaf5    ! macro
    const GTK_STYLE_CLASS_FRAME              = "frame"    ! macro
    const GDK_KEY_kana_RO                    = 0x4db    ! macro
    const GDK_KEY_radical                    =  0x8d6    ! macro
    const G_FILE_ATTRIBUTE_ACCESS_CAN_DELETE = "access::can-delete"    ! macro
    const GDK_KEY_braille_dots_123578        = 0x10028d7    ! macro
    const GDK_KEY_kana_SA                    =  0x4bb    ! macro
    const GDK_KEY_KP_Prior                   =  0xff9a    ! macro
    const GDK_KEY_braille_dot_1              =  0xfff1    ! macro
    const GTK_CELL_AREA_WARN_INVALID_CELL_PROPERTY_ID =  G_OBJECT_WARN_INVALID_PSPEC((object),"cell property id",(property_id),(pspec))    ! macro
    const GTK_FILE_CHOOSER_WIDGET_CLASS      = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_FILE_CHOOSER_WIDGET,GtkFileChooserWidgetClass))    ! macro
    const G_FILTER_INPUT_STREAM              = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_FILTER_INPUT_STREAM,GFilterInputStream))    ! macro
    const GDK_KEY_braille_dot_2              = 0xfff2    ! macro
    const GDK_KEY_braille_dot_3              =  0xfff3    ! macro
    const G_TYPE_SOCKET_PROTOCOL             = (g_socket_protocol_get_type())    ! macro
    const G_TYPE_POLLABLE_OUTPUT_STREAM      = (g_pollable_output_stream_get_type())    ! macro
    const G_FILE_INPUT_STREAM_CLASS          = (G_TYPE_CHECK_CLASS_CAST((k),G_TYPE_FILE_INPUT_STREAM,GFileInputStreamClass))    ! macro
    const g_signal_handlers_unblock_by_func  = g_signal_handlers_unblock_matched((instance),(GSignalMatchType)(G_SIGNAL_MATCH_FUNC|G_SIGNAL_MATCH_DATA),0,0,NULL,(func),(data))    ! macro
    const GDK_KEY_braille_dot_4              = 0xfff4    ! macro
    const GDK_KEY_Armenian_vev               =  0x100057e    ! macro
    const GDK_KEY_kana_SE                    =  0x4be    ! macro
    const GDK_KEY_abreveacute                =  0x1001eaf    ! macro
    const GDK_KEY_braille_dot_5              =  0xfff5    ! macro
    const GDK_KEY_sabovedot                  =  0x1001e61    ! macro
    const GDK_KEY_kana_RU                    =  0x4d9    ! macro
    const GDK_KEY_braille_dot_6              =  0xfff6    ! macro
    const GDK_KEY_Armenian_ke                =  0x1000584    ! macro
    const G_PARAM_READWRITE                  = (G_PARAM_READABLE|G_PARAM_WRITABLE)    ! macro
    const GDK_KEY_braille_dot_7              = 0xfff7    ! macro
    const GTK_RECENT_ACTION                  = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_RECENT_ACTION,GtkRecentAction))    ! macro
    const GDK_KEY_Arabic_qaf                 = 0x5e2    ! macro
    const GDK_KEY_equal                      =  0x03d    ! macro
    const GDK_KEY_braille_dot_8              =  0xfff8    ! macro
    const GTK_STYLE_CLASS_GRIP               = "grip"    ! macro
    const GDK_KEY_braille_dot_9              = 0xfff9    ! macro
    const G_TYPE_INT64                       =  G_TYPE_MAKE_FUNDAMENTAL(10)    ! macro
    const GDK_KEY_ht                         = 0x9e2    ! macro
    const GDK_KEY_Igrave                     =  0x0cc    ! macro
    const G_FILE_ATTRIBUTE_ACCESS_CAN_EXECUTE = "access::can-execute"    ! macro
    const cairo_pdf_surface_set_dpi          = cairo_pdf_surface_set_dpi_REPLACED_BY_cairo_surface_set_fallback_resolution    ! macro
    const G_GUINTPTR_FORMAT                  = "I64u"    ! macro
    const GDK_KEY_Armenian_TYUN              = 0x100054f    ! macro
    const GDK_KEY_threequarters              =  0x0be    ! macro
    const g_slist_next                       = ((slist)?(((GSList*)(slist))->next):NULL)    ! macro
    const GDK_IS_PIXBUF                      = (G_TYPE_CHECK_INSTANCE_TYPE((object),GDK_TYPE_PIXBUF))    ! macro
    const G_IS_FILENAME_COMPLETER_CLASS      = (G_TYPE_CHECK_CLASS_TYPE((k),G_TYPE_FILENAME_COMPLETER))    ! macro
    const GDK_KEY_kana_SO                    = 0x4bf    ! macro
    const GDK_KEY_kana_TSU                   =  0x4c2    ! macro
    const G_FILE_IO_STREAM                   = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_FILE_IO_STREAM,GFileIOStream))    ! macro
    const GTK_EVENT_BOX                      = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_EVENT_BOX,GtkEventBox))    ! macro
    const G_CONVERTER_OUTPUT_STREAM_CLASS    = (G_TYPE_CHECK_CLASS_CAST((k),G_TYPE_CONVERTER_OUTPUT_STREAM,GConverterOutputStreamClass))    ! macro
    const G_TYPE_FROM_INSTANCE               = (G_TYPE_FROM_CLASS(((GTypeInstance*)(instance))->g_class))    ! macro
    const GDK_KEY_3270_Ident                 = 0xfd13    ! macro
    const GDK_KEY_kana_TA                    =  0x4c0    ! macro
    const GDK_KEY_VoidSymbol                 =  0xffffff    ! macro
    const G_GINT16_FORMAT                    = "hi"    ! macro
    const GDK_KEY_Hangul_J_Rieul             = 0xedb    ! macro
    const PANGO_TYPE_CAIRO_FONT_MAP          = (pango_cairo_font_map_get_type())    ! macro
    const GDK_KEY_kana_TE                    = 0x4c3    ! macro
    const GDK_KEY_R10                        =  0xffdb    ! macro
    const GDK_KEY_Pointer_UpRight            =  0xfee5    ! macro
    const G_PASTE                            =  G_PASTE_ARGS(identifier1,identifier2)    ! macro
    const GDK_KEY_braille_dots_123           = 0x1002807    ! macro
    const G_MODULE_SUFFIX                    = "dll"    ! macro
    const GDK_KEY_kana_SU                    = 0x4bd    ! macro
    const ATK_TYPE_STATE_SET                 = (atk_state_set_get_type())    ! macro
    const GDK_KEY_R11                        = 0xffdc    ! macro
    const GDK_KEY_Cyrillic_pe                =  0x6d0    ! macro
    const GDK_KEY_braille_dots_124           =  0x100280b    ! macro
    const G_TYPE_TLS_PASSWORD                = (g_tls_password_get_type())    ! macro
    const GDK_ATOM_TO_POINTER                = (atom)    ! macro
    const GDK_KEY_R12                        = 0xffdd    ! macro
    const GDK_KEY_Cyrillic_zhe               =  0x6d6    ! macro
    const GDK_KEY_Ibelowdot                  =  0x1001eca    ! macro
    const G_IS_ACTION_GROUP                  = (G_TYPE_CHECK_INSTANCE_TYPE((inst),G_TYPE_ACTION_GROUP))    ! macro
    const GDK_KEY_braille_dots_125           = 0x1002813    ! macro
    const GDK_KEY_udiaeresis                 =  0x0fc    ! macro
    const GDK_KEY_R13                        =  0xffde    ! macro
    const GDK_KEY_upleftcorner               =  0x9ec    ! macro
    const GDK_KEY_braille_dots_1345          =  0x100281d    ! macro
    const g_atomic_int_dec_and_test          = (g_atomic_int_dec_and_test((gint*)(atomic)))    ! macro
    const GDK_KEY_braille_dots_126           = 0x1002823    ! macro
    const GDK_KEY_kana_TI                    =  0x4c1    ! macro
    const GDK_KEY_R14                        =  0xffdf    ! macro
    const GDK_KEY_braille_dots_1346          =  0x100282d    ! macro
    const GDK_KEY_braille_dots_127           =  0x1002843    ! macro
    const GDK_KEY_R15                        =  0xffe0    ! macro
    const GDK_KEY_3270_Jump                  =  0xfd12    ! macro
    const GTK_INVISIBLE                      = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_INVISIBLE,GtkInvisible))    ! macro
    const GDK_KEY_Cyrillic_DZHE              = 0x6bf    ! macro
    const GDK_KEY_braille_dots_1347          =  0x100284d    ! macro
    const GDK_KEY_braille_dots_128           =  0x1002883    ! macro
    const G_IS_DATA_INPUT_STREAM_CLASS       = (G_TYPE_CHECK_CLASS_TYPE((k),G_TYPE_DATA_INPUT_STREAM))    ! macro
    const G_TYPE_SOCKET                      = (g_socket_get_type())    ! macro
    const G_IS_TLS_DATABASE                  = (G_TYPE_CHECK_INSTANCE_TYPE((inst),G_TYPE_TLS_DATABASE))    ! macro
    const G_HAVE_ISO_VARARGS                 = 1    ! macro
    const GDK_KEY_braille_dots_1348          =  0x100288d    ! macro
    const GDK_KEY_Ahook                      =  0x1001ea2    ! macro
    const G_IO_IS_MODULE                     = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_IO_TYPE_MODULE))    ! macro
    const G_IS_DATA_INPUT_STREAM             = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_DATA_INPUT_STREAM))    ! macro
    const GTK_IS_FIXED                       = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_FIXED))    ! macro
    const GTK_FRAME_GET_CLASS                = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_FRAME,GtkFrameClass))    ! macro
    const GDK_KEY_Sinh_nja                   = 0x1000da6    ! macro
    const G_TYPE_UINT                        =  G_TYPE_MAKE_FUNDAMENTAL(7)    ! macro
    const GDK_KEY_Ediaeresis                 = 0x0cb    ! macro
    const GTK_TYPE_SENSITIVITY_TYPE          = (gtk_sensitivity_type_get_type())    ! macro
    const GDK_KEY_kana_TO                    = 0x4c4    ! macro
    const GTK_ACTION_CLASS                   = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_ACTION,GtkActionClass))    ! macro
    const G_MODULE_EXPORT                    = __declspec(dllexport)    ! macro
    const GTK_IS_STYLE_CLASS                 = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_STYLE))    ! macro
    const G_OUTPUT_STREAM                    = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_OUTPUT_STREAM,GOutputStream))    ! macro
    const G_TYPE_CHECK_CLASS_TYPE            = (_G_TYPE_CCT((g_class),(g_type)))    ! macro
    const GTK_IS_COLOR_SELECTION_DIALOG_CLASS = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_COLOR_SELECTION_DIALOG))    ! macro
    const ATK_VAR                            = extern __declspec(dllimport)    ! macro
    const GDK_KEY_KP_Subtract                = 0xffad    ! macro
    const GTK_VBOX                           = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_VBOX,GtkVBox))    ! macro
    const GDK_KEY_leftt                      = 0x9f4    ! macro
    const GDK_KEY_kana_TU                    =  0x4c2    ! macro
    const g_ascii_isxdigit                   = ((g_ascii_table[(guchar)(c)]&G_ASCII_XDIGIT)!=0)    ! macro
    const GDK_KEY_braille_dots_134           = 0x100280d    ! macro
    const GDK_KEY_AudioPrev                  =  0x1008ff16    ! macro
    const G_IS_FILE_ICON                     = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_FILE_ICON))    ! macro
    const G_IS_PARAM_SPEC_UINT64             = (G_TYPE_CHECK_INSTANCE_TYPE((pspec),G_TYPE_PARAM_UINT64))    ! macro
    const GDK_KEY_braille_dots_135           = 0x1002815    ! macro
    const GDK_KEY_Pointer_Down               =  0xfee3    ! macro
    const G_SIMPLE_ACTION_GROUP_CLASS        = (G_TYPE_CHECK_CLASS_CAST((class),G_TYPE_SIMPLE_ACTION_GROUP,GSimpleActionGroupClass))    ! macro
    const GDK_KEY_braille_dots_136           = 0x1002825    ! macro
    const GTK_RADIO_MENU_ITEM_CLASS          = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_RADIO_MENU_ITEM,GtkRadioMenuItemClass))    ! macro
    const G_APPLICATION_COMMAND_LINE_GET_CLASS = (G_TYPE_INSTANCE_GET_CLASS((inst),G_TYPE_APPLICATION_COMMAND_LINE,GApplicationCommandLineClass))    ! macro
    const GDK_KEY_Battery                    = 0x1008ff93    ! macro
    const GDK_KEY_braille_dots_1356          =  0x1002835    ! macro
    const GDK_KEY_braille_dots_137           =  0x1002845    ! macro
    const G_TYPE_MENU_MODEL                  = (g_menu_model_get_type())    ! macro
    const GDK_KEY_braille_dots_1357          = 0x1002855    ! macro
    const GDK_KEY_braille_dots_138           =  0x1002885    ! macro
    const GTK_APP_CHOOSER_BUTTON_CLASS       = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_APP_CHOOSER_BUTTON,GtkAppChooserButtonClass))    ! macro
    const GDK_KEY_Prev_Virtual_Screen        = 0xfed1    ! macro
    const GDK_KEY_mabovedot                  =  0x1001e41    ! macro
    const GDK_TYPE_WINDOW_TYPE_HINT          = (gdk_window_type_hint_get_type())    ! macro
    const GDK_KEY_braille_dots_1358          = 0x1002895    ! macro
    const GTK_IS_ACTION_GROUP_CLASS          = (G_TYPE_CHECK_CLASS_TYPE((vtable),GTK_TYPE_ACTION_GROUP))    ! macro
    const GTK_PRINT_SETTINGS_RESOLUTION_X    = "resolution-x"    ! macro
    const GDK_KEY_Georgian_on                = 0x10010dd    ! macro
    const GTK_PRINT_SETTINGS_RESOLUTION_Y    = "resolution-y"    ! macro
    const g_test_verbose                     = (g_test_config_vars->test_verbose)    ! macro
    const G_CONVERTER_GET_IFACE              = (G_TYPE_INSTANCE_GET_INTERFACE((obj),G_TYPE_CONVERTER,GConverterIface))    ! macro
    const G_TYPE_ACTION                      = (g_action_get_type())    ! macro
    const G_IS_OUTPUT_STREAM_CLASS           = (G_TYPE_CHECK_CLASS_TYPE((k),G_TYPE_OUTPUT_STREAM))    ! macro
    const g_htonl                            = (GUINT32_TO_BE(val))    ! macro
    const GTK_IS_OFFSCREEN_WINDOW            = (G_TYPE_CHECK_INSTANCE_TYPE((o),GTK_TYPE_OFFSCREEN_WINDOW))    ! macro
    const G_TYPE_STRV                        = (g_strv_get_type())    ! macro
    const G_IS_LOADABLE_ICON                 = (G_TYPE_CHECK_INSTANCE_TYPE((obj),G_TYPE_LOADABLE_ICON))    ! macro
    const g_hash_table_freeze                = ((void)0)    ! macro
    const GDK_KEY_Thai_kokai                 = 0xda1    ! macro
    const GTK_RECENT_FILTER                  = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_RECENT_FILTER,GtkRecentFilter))    ! macro
    const G_IS_PARAM_SPEC_VARIANT            = (G_TYPE_CHECK_INSTANCE_TYPE((pspec),G_TYPE_PARAM_VARIANT))    ! macro
    const GTK_HSCROLLBAR_CLASS               = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_HSCROLLBAR,GtkHScrollbarClass))    ! macro
    const GTK_STATUS_ICON                    = (G_TYPE_CHECK_INSTANCE_CAST((o),GTK_TYPE_STATUS_ICON,GtkStatusIcon))    ! macro
    const GDK_KEY_ColonSign                  = 0x10020a1    ! macro
    const G_TYPE_FLAG_RESERVED_ID_BIT        = ((GType)(1<<0))    ! macro
    const _G_DEFINE_TYPE_EXTENDED_BEGIN      = static void type_name##_init(TypeName*self);static void type_name##_class_init(TypeName##Class*klass);static gpointer type_name##_parent_class=NULL;static void type_name##_class_intern_init(gpointer klass){type_name##_parent_class=g_type_class_peek_parent(klass);type_name##_class_init((TypeName##Class*)klass);}GType type_name##_get_type(void){static volatile gsize g_define_type_id__volatile=0;if(g_once_init_enter(&g_define_type_id__volatile)){GType g_define_type_id=g_type_register_static_simple(TYPE_PARENT,g_intern_static_string(#TypeName),sizeof(TypeName##Class),(GClassInitFunc)type_name##_class_intern_init,sizeof(TypeName),(GInstanceInitFunc)type_name##_init,(GTypeFlags)flags);{    ! macro
    const G_PARAM_SPEC_BOOLEAN               = (G_TYPE_CHECK_INSTANCE_CAST((pspec),G_TYPE_PARAM_BOOLEAN,GParamSpecBoolean))    ! macro
    const G_TYPE_IS_DEEP_DERIVABLE           = (g_type_test_flags((type),G_TYPE_FLAG_DEEP_DERIVABLE))    ! macro
    const G_DBUS_OBJECT_SKELETON             = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_DBUS_OBJECT_SKELETON,GDBusObjectSkeleton))    ! macro
    const GINT32_FROM_BE                     = (GINT32_TO_BE(val))    ! macro
    const G_TYPE_DBUS_INTERFACE_INFO         = (g_dbus_interface_info_get_type())    ! macro
    const GDK_KEY_Abrevehook                 = 0x1001eb2    ! macro
    const GDK_KEY_Georgian_char              =  0x10010ed    ! macro
    const GDK_KEY_MouseKeys_Enable           =  0xfe76    ! macro
    const GDK_KEY_hebrew_lamed               =  0xcec    ! macro
    const GDK_KEY_Thorn                      =  0x0de    ! macro
    const GTK_TYPE_UI_MANAGER                = (gtk_ui_manager_get_type())    ! macro
    const GTK_NUMERABLE_ICON_CLASS           = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_NUMERABLE_ICON,GtkNumerableIconClass))    ! macro
    const g_htons                            = (GUINT16_TO_BE(val))    ! macro
    const GTK_WINDOW_GET_CLASS               = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_WINDOW,GtkWindowClass))    ! macro
    const GTK_COLOR_CHOOSER_DIALOG_GET_CLASS = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_COLOR_CHOOSER_DIALOG,GtkColorChooserDialogClass))    ! macro
    const GDK_KEY_braille_dots_145           = 0x1002819    ! macro
    const GDK_KEY_Ohornacute                 =  0x1001eda    ! macro
    const GDK_KEY_braille_dots_146           =  0x1002829    ! macro
    const G_ALLOC_AND_FREE                   =  2    ! macro
    const ATK_SELECTION_GET_IFACE            = (G_TYPE_INSTANCE_GET_INTERFACE((obj),ATK_TYPE_SELECTION,AtkSelectionIface))    ! macro
    const GDK_KEY_braille_dots_147           = 0x1002849    ! macro
    const ATK_OBJECT_FACTORY_CLASS           = (G_TYPE_CHECK_CLASS_CAST((klass),ATK_TYPE_OBJECT_FACTORY,AtkObjectFactoryClass))    ! macro
    const G_THEMED_ICON                      = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_THEMED_ICON,GThemedIcon))    ! macro
    const GDK_KEY_braille_dots_1367          = 0x1002865    ! macro
    const GDK_KEY_braille_dots_148           =  0x1002889    ! macro
    const G_TYPE_RESOURCE_ERROR              = (g_resource_error_get_type())    ! macro
    const G_IS_ENUM_CLASS                    = (G_TYPE_CHECK_CLASS_TYPE((class),G_TYPE_ENUM))    ! macro
    const GDK_KEY_braille_dots_1368          = 0x10028a5    ! macro
    const GTK_TEXT_VIEW_GET_CLASS            = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_TEXT_VIEW,GtkTextViewClass))    ! macro
    const GDK_KEY_lf                         = 0x9e5    ! macro
    const PANGO_VERSION_MAJOR                =  1    ! macro
    const GDK_KEY_kana_fullstop              =  0x4a1    ! macro
    const GDK_KEY_Cyrillic_zhe_descender     =  0x1000497    ! macro
    const G_FILE_ATTRIBUTE_GVFS_BACKEND      = "gvfs::backend"    ! macro
    const G_FILE_ATTRIBUTE_MOUNTABLE_IS_MEDIA_CHECK_AUTOMATIC = "mountable::is-media-check-automatic"    ! macro
    const GTK_TYPE_TREE_MODEL_FILTER         = (gtk_tree_model_filter_get_type())    ! macro
    const PANGO_TYPE_FONT                    = (pango_font_get_type())    ! macro
    const ATK_EDITABLE_TEXT                  = G_TYPE_CHECK_INSTANCE_CAST((obj),ATK_TYPE_EDITABLE_TEXT,AtkEditableText)    ! macro
    const GDK_KEY_Kana_Shift                 = 0xff2e    ! macro
    const GTK_TYPE_APPLICATION_WINDOW        = (gtk_application_window_get_type())    ! macro
    const GDK_KEY_Armenian_INI               = 0x100053b    ! macro
    const GDK_KEY_braille_dots_4567          =  0x1002878    ! macro
    const G_IS_INET_ADDRESS_CLASS            = (G_TYPE_CHECK_CLASS_TYPE((k),G_TYPE_INET_ADDRESS))    ! macro
    const GDK_KEY_Acircumflexacute           = 0x1001ea4    ! macro
    const GSIZE_TO_LE                        = ((gsize)GUINT64_TO_LE(val))    ! macro
    const GDK_KEY_kana_WA                    = 0x4dc    ! macro
    const GDK_KEY_braille_dots_4568          =  0x10028b8    ! macro
    const G_TYPE_TCP_CONNECTION              = (g_tcp_connection_get_type())    ! macro
    const GDK_KEY_Hangul_J_Dikeud            = 0xeda    ! macro
    const G_DATE_BAD_JULIAN                  =  0U    ! macro
    const GTK_STYLE_PROPERTIES               = (G_TYPE_CHECK_INSTANCE_CAST((o),GTK_TYPE_STYLE_PROPERTIES,GtkStyleProperties))    ! macro
    const G_FILE_INPUT_STREAM_GET_CLASS      = (G_TYPE_INSTANCE_GET_CLASS((o),G_TYPE_FILE_INPUT_STREAM,GFileInputStreamClass))    ! macro
    const GDK_KEY_approximate                = 0x8c8    ! macro
    const GDK_KEY_yhook                      =  0x1001ef7    ! macro
    const G_IS_MENU                          = (G_TYPE_CHECK_INSTANCE_TYPE((inst),G_TYPE_MENU))    ! macro
    const GDK_KEY_Copy                       = 0x1008ff57    ! macro
    const GDK_KEY_Armenian_nu                =  0x1000576    ! macro
    const GDK_KEY_nabla                      =  0x8c5    ! macro
    const CAIRO_HAS_PNG_FUNCTIONS            =  1    ! macro
    const GDK_KEY_braille_dots_156           =  0x1002831    ! macro
    const GTK_STOCK_REMOVE                   = "gtk-remove"    ! macro
    const GTK_INFO_BAR_GET_CLASS             = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_INFO_BAR,GtkInfoBarClass))    ! macro
    const GDK_KEY_braille_dots_157           = 0x1002851    ! macro
    const GDK_KEY_braille_dots_13567         =  0x1002875    ! macro
    const G_VOLUME_GET_IFACE                 = (G_TYPE_INSTANCE_GET_INTERFACE((obj),G_TYPE_VOLUME,GVolumeIface))    ! macro
    const G_IS_TLS_CERTIFICATE_CLASS         = (G_TYPE_CHECK_CLASS_TYPE((class),G_TYPE_TLS_CERTIFICATE))    ! macro
    const G_IS_FILENAME_COMPLETER            = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_FILENAME_COMPLETER))    ! macro
    const GTK_PRINT_OPERATION                = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_PRINT_OPERATION,GtkPrintOperation))    ! macro
    const GDK_KEY_braille_dots_13568         = 0x10028b5    ! macro
    const GDK_KEY_braille_dots_158           =  0x1002891    ! macro
    const GDK_KEY_rcedilla                   =  0x3b3    ! macro
    const GTK_RADIO_TOOL_BUTTON              = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_RADIO_TOOL_BUTTON,GtkRadioToolButton))    ! macro
    const GDK_TYPE_PIXBUF                    = (gdk_pixbuf_get_type())    ! macro
    const GDK_KEY_braille_dots_1378          = 0x10028c5    ! macro
    const GTK_MENU_GET_CLASS                 = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_MENU,GtkMenuClass))    ! macro
    const GDK_KEY_Hangul_AraeAE              = 0xef7    ! macro
    const GTK_ALIGNMENT                      = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_ALIGNMENT,GtkAlignment))    ! macro
    const GDK_KEY_Abreveacute                = 0x1001eae    ! macro
    const GDK_KEY_hebrew_daleth              =  0xce3    ! macro
    const GTK_SPINNER_GET_CLASS              = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_SPINNER,GtkSpinnerClass))    ! macro
    const GTK_TREE_DRAG_SOURCE_GET_IFACE     = (G_TYPE_INSTANCE_GET_INTERFACE((obj),GTK_TYPE_TREE_DRAG_SOURCE,GtkTreeDragSourceIface))    ! macro
    const G_DRIVE_GET_IFACE                  = (G_TYPE_INSTANCE_GET_INTERFACE((obj),G_TYPE_DRIVE,GDriveIface))    ! macro
    const GDK_KEY_Cyrillic_che_descender     = 0x10004b7    ! macro
    const GDK_KEY_kana_WO                    =  0x4a6    ! macro
    const GTK_SEPARATOR_GET_CLASS            = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_SEPARATOR,GtkSeparatorClass))    ! macro
    const GDK_KEY_jot                        = 0xbca    ! macro
    const GDK_KEY_braille_dots_4578          =  0x10028d8    ! macro
    const GDK_KEY_gabovedot                  =  0x2f5    ! macro
    const g_new                              =  _G_NEW(struct_type,n_structs,malloc)    ! macro
    const GTK_VSCROLLBAR                     = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_VSCROLLBAR,GtkVScrollbar))    ! macro
    const G_DATE_BAD_YEAR                    = 0U    ! macro
    const GTK_IS_FILE_CHOOSER                = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_FILE_CHOOSER))    ! macro
    const GDK_KEY_Thai_nonu                  = 0xdb9    ! macro
    const GTK_TABLE                          = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_TABLE,GtkTable))    ! macro
    const GTK_TYPE_ARROW_TYPE                = (gtk_arrow_type_get_type())    ! macro
    const G_TYPE_PARAM_VARIANT               = (g_param_spec_types[22])    ! macro
    const GDK_KEY_Ecaron                     = 0x1cc    ! macro
    const GULONG_TO_LE                       = ((gulong)GUINT32_TO_LE(val))    ! macro
    const GDK_KEY_cent                       = 0x0a2    ! macro
    const GDK_KEY_infinity                   =  0x8c2    ! macro
    const G_LOCK_NAME                        =  g__##name##_lock    ! macro
    const GDK_KEY_Hangul_RieulPhieuf         =  0xeaf    ! macro
    const GDK_PIXBUF_ANIMATION_ITER          = (G_TYPE_CHECK_INSTANCE_CAST((object),GDK_TYPE_PIXBUF_ANIMATION_ITER,GdkPixbufAnimationIter))    ! macro
    const G_CONVERTER_INPUT_STREAM_CLASS     = (G_TYPE_CHECK_CLASS_CAST((k),G_TYPE_CONVERTER_INPUT_STREAM,GConverterInputStreamClass))    ! macro
    const GTK_IS_STYLE                       = (G_TYPE_CHECK_INSTANCE_TYPE((object),GTK_TYPE_STYLE))    ! macro
    const GDK_KEY_Cyrillic_te                = 0x6d4    ! macro
    const GDK_KEY_Greek_MU                   =  0x7cc    ! macro
    const GDK_KEY_Armenian_pe                =  0x100057a    ! macro
    const GDK_KEY_Armenian_ghat              =  0x1000572    ! macro
    const G_PARAM_SPEC_GTYPE                 = (G_TYPE_CHECK_INSTANCE_CAST((pspec),G_TYPE_PARAM_GTYPE,GParamSpecGType))    ! macro
    const GTK_TYPE_FILE_CHOOSER              = (gtk_file_chooser_get_type())    ! macro
    const GTK_TYPE_PACK_DIRECTION            = (gtk_pack_direction_get_type())    ! macro
    const GDK_KEY_braille_dots_167           = 0x1002861    ! macro
    const G_SOCKET_LISTENER_CLASS            = (G_TYPE_CHECK_CLASS_CAST((class),G_TYPE_SOCKET_LISTENER,GSocketListenerClass))    ! macro
    const GTK_TYPE_SCROLLABLE_POLICY         = (gtk_scrollable_policy_get_type())    ! macro
    const GDK_KEY_braille_dots_13578         = 0x10028d5    ! macro
    const GDK_KEY_braille_dots_168           =  0x10028a1    ! macro
    const GDK_KEY_Armenian_men               =  0x1000574    ! macro
    const GTK_FIXED_CLASS                    = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_FIXED,GtkFixedClass))    ! macro
    const GDK_KEY_Suspend                    = 0x1008ffa7    ! macro
    const GDK_KEY_mu                         =  0x0b5    ! macro
    const GDK_KEY_Cyrillic_SHHA              =  0x10004ba    ! macro
    const GTK_IS_RESIZE_CONTAINER            = (GTK_IS_CONTAINER(widget)&&(gtk_container_get_resize_mode(GTK_CONTAINER(widget))!=GTK_RESIZE_PARENT))    ! macro
    const PANGO_TYPE_WEIGHT                  = (pango_weight_get_type())    ! macro
    const GDK_KEY_Sinh_nna                   = 0x1000dab    ! macro
    const G_MAXOFFSET                        =  G_MAXINT64    ! macro
    const GTK_IS_ADJUSTMENT_CLASS            = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_ADJUSTMENT))    ! macro
    const GDK_KEY_braceleft                  = 0x07b    ! macro
    const GDK_KEY_filledrectbullet           =  0xadb    ! macro
    const GDK_TYPE_APP_LAUNCH_CONTEXT        = (gdk_app_launch_context_get_type())    ! macro
    const GDK_KEY_kana_YA                    = 0x4d4    ! macro
    const GTK_TYPE_COMBO_BOX_TEXT            = (gtk_combo_box_text_get_type())    ! macro
    const GDK_KEY_nl                         = 0x9e8    ! macro
    const GDK_KEY_Next_Virtual_Screen        =  0xfed2    ! macro
    const G_PROXY_RESOLVER                   = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_PROXY_RESOLVER,GProxyResolver))    ! macro
    const GTK_IS_IM_CONTEXT_CLASS            = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_IM_CONTEXT))    ! macro
    const GTK_CELL_RENDERER_TOGGLE_CLASS     = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_CELL_RENDERER_TOGGLE,GtkCellRendererToggleClass))    ! macro
    const GDK_KEY_implies                    = 0x8ce    ! macro
    const G_IS_FILTER_INPUT_STREAM           = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_FILTER_INPUT_STREAM))    ! macro
    const G_TYPE_FILE_ICON                   = (g_file_icon_get_type())    ! macro
    const GTK_STYLE_CLASS_TOOLTIP            = "tooltip"    ! macro
    const G_HAVE___INLINE                    = 1    ! macro
    const GTK_TYPE_FILE_FILTER_FLAGS         = (gtk_file_filter_flags_get_type())    ! macro
    const GTK_TYPE_COLOR_SELECTION_DIALOG    = (gtk_color_selection_dialog_get_type())    ! macro
    const GDK_KEY_Greek_NU                   = 0x7cd    ! macro
    const GTK_SCROLLABLE                     = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_SCROLLABLE,GtkScrollable))    ! macro
    const G_TYPE_FILE                        = (g_file_get_type())    ! macro
    const ATK_OBJECT_GET_CLASS               = (G_TYPE_INSTANCE_GET_CLASS((obj),ATK_TYPE_OBJECT,AtkObjectClass))    ! macro
    const GDK_KEY_Armenian_SHA               = 0x1000547    ! macro
    const GDK_KEY_Hangul_J_PieubSios         =  0xee5    ! macro
    const GDK_KEY_Arabic_hah                 =  0x5cd    ! macro
    const GDK_KEY_ISO_Fast_Cursor_Up         =  0xfe2e    ! macro
    const GTK_BUTTON_GET_CLASS               = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_BUTTON,GtkButtonClass))    ! macro
    const CAIRO_VERSION                      = CAIRO_VERSION_ENCODE(CAIRO_VERSION_MAJOR,CAIRO_VERSION_MINOR,CAIRO_VERSION_MICRO)    ! macro
    const GDK_KEY_braille_dots_178           = 0x10028c1    ! macro
    const GDK_KEY_oe                         =  0x13bd    ! macro
    const gdk_pixbuf_new_from_file_at_size   =  gdk_pixbuf_new_from_file_at_size_utf8    ! macro
    const G_IS_CONVERTER_OUTPUT_STREAM       = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_CONVERTER_OUTPUT_STREAM))    ! macro
    const GTK_STOCK_PROPERTIES               = "gtk-properties"    ! macro
    const G_VARIANT_TYPE_TUPLE               = ((const GVariantType*)"r")    ! macro
    const GDK_KEY_braille_dots_1234678       = 0x10028ef    ! macro
    const GDK_KEY_Hangul_SsangSios           =  0xeb6    ! macro
    const GTK_IS_CELL_RENDERER_SPIN_CLASS    = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_CELL_RENDERER_SPIN))    ! macro
    const GDK_KEY_Hangul_J_KiyeogSios        = 0xed6    ! macro
    const GDK_KEY_Farsi_yeh                  =  0x10006cc    ! macro
    const G_FILE_ENUMERATOR_GET_CLASS        = (G_TYPE_INSTANCE_GET_CLASS((o),G_TYPE_FILE_ENUMERATOR,GFileEnumeratorClass))    ! macro
    const G_TYPE_ENUM                        = G_TYPE_MAKE_FUNDAMENTAL(12)    ! macro
    const GTK_IS_VPANED                      = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_VPANED))    ! macro
    const GDK_KEY_Thai_lekha                 = 0xdf5    ! macro
    const GDK_KEY_kana_YO                    =  0x4d6    ! macro
    const G_FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE = "standard::content-type"    ! macro
    const GDK_KEY_Greek_KAPPA                = 0x7ca    ! macro
    const GTK_LOCK_BUTTON_GET_CLASS          = (G_TYPE_INSTANCE_GET_CLASS((o),GTK_TYPE_LOCK_BUTTON,GtkLockButtonClass))    ! macro
    const GDK_KEY_Scedilla                   = 0x1aa    ! macro
    const GTK_STATUS_ICON_GET_CLASS          = (G_TYPE_INSTANCE_GET_CLASS((o),GTK_TYPE_STATUS_ICON,GtkStatusIconClass))    ! macro
    const GDK_KEY_WebCam                     = 0x1008ff8f    ! macro
    const GTK_CELL_RENDERER_COMBO_CLASS      = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_CELL_RENDERER_COMBO,GtkCellRendererComboClass))    ! macro
    const GDK_KEY_AccessX_Feedback_Enable    = 0xfe71    ! macro
    const GDK_KEY_Armenian_ra                =  0x100057c    ! macro
    const GDK_EVENT_STOP                     = (TRUE)    ! macro
    const GTK_TYPE_ACCEL_GROUP               = (gtk_accel_group_get_type())    ! macro
    const GDK_KEY_Thai_soso                  = 0xdab    ! macro
    const GDK_KEY_Ocaron                     =  0x10001d1    ! macro
    const GDK_KEY_Thai_thothung              =  0xdb6    ! macro
    const GDK_KEY_OfficeHome                 =  0x1008ff6a    ! macro
    const GDK_KEY_botrightsqbracket          =  0x8aa    ! macro
    const g_mkstemp                          =  g_mkstemp_utf8    ! macro
    const G_TYPE_DBUS_OBJECT_MANAGER_CLIENT_FLAGS = (g_dbus_object_manager_client_flags_get_type())    ! macro
    const GDK_KEY_kana_YU                    = 0x4d5    ! macro
    const GDK_KEY_Cyrillic_ve                =  0x6d7    ! macro
    const GDK_KEY_Armenian_re                =  0x1000580    ! macro
    const G_NATIVE_VOLUME_MONITOR_CLASS      = (G_TYPE_CHECK_CLASS_CAST((k),G_TYPE_NATIVE_VOLUME_MONITOR,GNativeVolumeMonitorClass))    ! macro
    const GDK_KEY_Codeinput                  = 0xff37    ! macro
    const ATK_TABLE                          =  G_TYPE_CHECK_INSTANCE_CAST((obj),ATK_TYPE_TABLE,AtkTable)    ! macro
    const G_TYPE_IO_CHANNEL                  = (g_io_channel_get_type())    ! macro
    const GLIB_SYSDEF_AF_INET                = 2    ! macro
    const GDK_KEY_ISO_Left_Tab               =  0xfe20    ! macro
    const GDK_KEY_Byelorussian_SHORTU        =  0x6be    ! macro
    const G_TYPE_PARAM_VALUE_ARRAY           = (g_param_spec_types[18])    ! macro
    const GDK_KEY_Greek_PI                   = 0x7d0    ! macro
    const G_INITIALLY_UNOWNED_CLASS          = (G_TYPE_CHECK_CLASS_CAST((class),G_TYPE_INITIALLY_UNOWNED,GInitiallyUnownedClass))    ! macro
    const G_IS_PARAM_SPEC_CLASS              = (G_TYPE_CHECK_CLASS_TYPE((pclass),G_TYPE_PARAM))    ! macro
    const GTK_TYPE_OFFSCREEN_WINDOW          = (gtk_offscreen_window_get_type())    ! macro
    const GDK_KEY_leftshoe                   = 0xbda    ! macro
    const GDK_KEY_sixsuperior                =  0x1002076    ! macro
    const GDK_KEY_punctspace                 =  0xaa6    ! macro
    const GUINT32_FROM_BE                    = (GUINT32_TO_BE(val))    ! macro
    const G_INET_ADDRESS                     = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_INET_ADDRESS,GInetAddress))    ! macro
    const GDK_IS_PIXBUF_LOADER_CLASS         = (G_TYPE_CHECK_CLASS_TYPE((klass),GDK_TYPE_PIXBUF_LOADER))    ! macro
    const G_DBUS_ERROR                       = g_dbus_error_quark()    ! macro
    const G_TYPE_DATE                        = (g_date_get_type())    ! macro
    const GTK_IS_SPIN_BUTTON                 = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_SPIN_BUTTON))    ! macro
    const G_ALLOCATOR_SLIST                  = 2    ! macro
    const GTK_INPUT_ERROR                    = -1    ! macro
    const GDK_KEY_Tcaron                     =  0x1ab    ! macro
    const GINT64_FROM_BE                     = (GINT64_TO_BE(val))    ! macro
    const GDK_KEY_ycircumflex                = 0x1000177    ! macro
    const GTK_TYPE_OVERLAY                   = (gtk_overlay_get_type())    ! macro
    const GTK_IMAGE_CLASS                    = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_IMAGE,GtkImageClass))    ! macro
    const G_TYPE_DBUS_CALL_FLAGS             = (g_dbus_call_flags_get_type())    ! macro
    const G_IS_FILE_MONITOR_CLASS            = (G_TYPE_CHECK_CLASS_TYPE((k),G_TYPE_FILE_MONITOR))    ! macro
    const G_TYPE_BYTES                       = (g_bytes_get_type())    ! macro
    const GTK_TYPE_LICENSE                   = (gtk_license_get_type())    ! macro
    const GTK_TYPE_TEXT_ITER                 = (gtk_text_iter_get_type())    ! macro
    const GDK_KEY_colon                      = 0x03a    ! macro
    const GDK_KEY_Armenian_se                =  0x100057d    ! macro
    const G_TYPE_DATA_STREAM_NEWLINE_TYPE    = (g_data_stream_newline_type_get_type())    ! macro
    const GDK_KEY_kana_closingbracket        = 0x4a3    ! macro
    const G_TYPE_THEMED_ICON                 = (g_themed_icon_get_type())    ! macro
    const GTK_APP_CHOOSER_BUTTON_GET_CLASS   = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_APP_CHOOSER_BUTTON,GtkAppChooserButtonClass))    ! macro
    const G_EMBLEM                           = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_EMBLEM,GEmblem))    ! macro
    const GDK_PIXBUF_ANIMATION               = (G_TYPE_CHECK_INSTANCE_CAST((object),GDK_TYPE_PIXBUF_ANIMATION,GdkPixbufAnimation))    ! macro
    const G_MAXUINT                          = UINT_MAX    ! macro
    const G_MENU_ATTRIBUTE_ITER_CLASS        = (G_TYPE_CHECK_CLASS_CAST((class),G_TYPE_MENU_ATTRIBUTE_ITER,GMenuAttributeIterClass))    ! macro
    const GLIB_DEPRECATED                    = G_DEPRECATED    ! macro
    const G_IS_SOCKET_LISTENER               = (G_TYPE_CHECK_INSTANCE_TYPE((inst),G_TYPE_SOCKET_LISTENER))    ! macro
    const G_VALUE_HOLDS_POINTER              = (G_TYPE_CHECK_VALUE_TYPE((value),G_TYPE_POINTER))    ! macro
    const GTK_TYPE_ICON_THEME_ERROR          = (gtk_icon_theme_error_get_type())    ! macro
    const GDK_KEY_Georgian_un                = 0x10010e3    ! macro
    const GTK_IS_TEXT_VIEW                   = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_TEXT_VIEW))    ! macro
    const ATK_TYPE_NO_OP_OBJECT_FACTORY      = (atk_no_op_object_factory_get_type())    ! macro
    const GDK_KEY_hebrew_gimel               = 0xce2    ! macro
    const G_IS_APPLICATION_CLASS             = (G_TYPE_CHECK_CLASS_TYPE((class),G_TYPE_APPLICATION))    ! macro
    const GTK_CELL_AREA_GET_CLASS            = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_CELL_AREA,GtkCellAreaClass))    ! macro
    const GDK_KEY_Hiragana                   = 0xff25    ! macro
    const GDK_KEY_MonBrightnessDown          =  0x1008ff03    ! macro
    const GTK_THEMING_ENGINE                 = (G_TYPE_CHECK_INSTANCE_CAST((o),GTK_TYPE_THEMING_ENGINE,GtkThemingEngine))    ! macro
    const PANGO_GET_UNKNOWN_GLYPH            = ((PangoGlyph)(wc)|PANGO_GLYPH_UNKNOWN_FLAG)    ! macro
    const G_IS_TLS_CONNECTION                = (G_TYPE_CHECK_INSTANCE_TYPE((inst),G_TYPE_TLS_CONNECTION))    ! macro
    const G_TYPE_OUTPUT_STREAM_SPLICE_FLAGS  = (g_output_stream_splice_flags_get_type())    ! macro
    const GTK_IS_SPINNER_CLASS               = (G_TYPE_CHECK_CLASS_TYPE((obj),GTK_TYPE_SPINNER))    ! macro
    const GTK_STOCK_EXECUTE                  = "gtk-execute"    ! macro
    const g_scanner_thaw_symbol_table        = ((void)0)    ! macro
    const g_node_insert_data                 = g_node_insert((parent),(position),g_node_new(data))    ! macro
    const G_FILE_ATTRIBUTE_STANDARD_TYPE     = "standard::type"    ! macro
    const cairo_current_line_width           = cairo_current_line_width_REPLACED_BY_cairo_get_line_width    ! macro
    const G_STATIC_MUTEX_INIT                = {NULL}    ! macro
    const GTK_IS_VSCROLLBAR                  = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_VSCROLLBAR))    ! macro
    const GDK_KEY_dead_ogonek                = 0xfe5c    ! macro
    const GTK_STYLE_CLASS_RUBBERBAND         = "rubberband"    ! macro
    const GTK_LOCK_BUTTON                    = (G_TYPE_CHECK_INSTANCE_CAST((o),GTK_TYPE_LOCK_BUTTON,GtkLockButton))    ! macro
    const GDK_KEY_Thai_maitho                = 0xde9    ! macro
    const G_INPUT_STREAM                     = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_INPUT_STREAM,GInputStream))    ! macro
    const GDK_KEY_opentribulletdown          = 0xae4    ! macro
    const GDK_KEY_Sinh_luu2                  =  0x1000df3    ! macro
    const GULONG_FROM_BE                     = (GULONG_TO_BE(val))    ! macro
    const GDK_VISUAL                         = (G_TYPE_CHECK_INSTANCE_CAST((object),GDK_TYPE_VISUAL,GdkVisual))    ! macro
    const GTK_STOCK_GO_BACK                  = "gtk-go-back"    ! macro
    const G_OPTION_ERROR                     = (g_option_error_quark())    ! macro
    const G_TLS_BACKEND_EXTENSION_POINT_NAME = "gio-tls-backend"    ! macro
    const GTK_IS_SCALE_BUTTON_CLASS          = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_SCALE_BUTTON))    ! macro
    const GTK_FILE_CHOOSER                   = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_FILE_CHOOSER,GtkFileChooser))    ! macro
    const GTK_BIN                            = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_BIN,GtkBin))    ! macro
    const GDK_KEY_Armenian_ligature_ew       = 0x1000587    ! macro
    const GDK_KEY_onesuperior                =  0x0b9    ! macro
    const GDK_KEY_Arabic_maddaonalef         =  0x5c2    ! macro
    const GTK_STYLE_CLASS_SPINNER            = "spinner"    ! macro
    const GTK_TYPE_TREE_PATH                 = (gtk_tree_path_get_type())    ! macro
    const g_dataset_set_data                 = g_dataset_set_data_full((l),(k),(d),NULL)    ! macro
    const GDK_KEY_Armenian_to                = 0x1000569    ! macro
    const GDK_KEY_decimalpoint               =  0xabd    ! macro
    const GDK_KEY_Cyrillic_ya                =  0x6d1    ! macro
    const GTK_PRINT_SETTINGS_DITHER          = "dither"    ! macro
    const G_POLLFD_FORMAT                    = "%#I64x"    ! macro
    const GDK_KEY_Georgian_we                = 0x10010f3    ! macro
    const GDK_KEY_logicalor                  =  0x8df    ! macro
    const GDK_KEY_Umacron                    =  0x3de    ! macro
    const GDK_KEY_aogonek                    =  0x1b1    ! macro
    const GTK_STYLE_CLASS_TOOLBAR            = "toolbar"    ! macro
    const PANGO_VERSION_MICRO                = 1    ! macro
    const CAIRO_HAS_RECORDING_SURFACE        =  1    ! macro
    const G_TYPE_BYTE_ARRAY                  = (g_byte_array_get_type())    ! macro
    const GTK_IS_ORIENTABLE_CLASS            = (G_TYPE_CHECK_CLASS_TYPE((vtable),GTK_TYPE_ORIENTABLE))    ! macro
    const GTK_IS_CELL_VIEW                   = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_CELL_VIEW))    ! macro
    const G_IO_STREAM                        = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_IO_STREAM,GIOStream))    ! macro
    const GDK_KEY_icircumflex                = 0x0ee    ! macro
    const ATK_IS_COMPONENT                   =  G_TYPE_CHECK_INSTANCE_TYPE((obj),ATK_TYPE_COMPONENT)    ! macro
    const G_LOG_2_BASE_10                    = (0.30102999566398119521)    ! macro
    const GTK_RECENT_CHOOSER                 = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_RECENT_CHOOSER,GtkRecentChooser))    ! macro
    const GTK_TYPE_INPUT_PURPOSE             = (gtk_input_purpose_get_type())    ! macro
    const MAX                                = (((a)>(b))?(a):(b))    ! macro
    const ATK_VALUE                          = G_TYPE_CHECK_INSTANCE_CAST((obj),ATK_TYPE_VALUE,AtkValue)    ! macro
    const GDK_KEY_Arabic_heh                 = 0x5e7    ! macro
    const G_TYPE_TLS_CERTIFICATE             = (g_tls_certificate_get_type())    ! macro
    const GDK_KEY_Arabic_jeem                = 0x5cc    ! macro
    const GDK_KEY_KP_Page_Up                 =  0xff9a    ! macro
    const GTK_TREE_MODEL_FILTER              = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_TREE_MODEL_FILTER,GtkTreeModelFilter))    ! macro
    const GTK_IS_LINK_BUTTON_CLASS           = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_LINK_BUTTON))    ! macro
    const G_TYPE_CONVERTER_FLAGS             = (g_converter_flags_get_type())    ! macro
    const GTK_BUILDER_ERROR                  = (gtk_builder_error_quark())    ! macro
    const GTK_SIZE_GROUP                     = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_SIZE_GROUP,GtkSizeGroup))    ! macro
    const G_IS_SOCKET_ADDRESS_CLASS          = (G_TYPE_CHECK_CLASS_TYPE((k),G_TYPE_SOCKET_ADDRESS))    ! macro
    const ATEXIT                             = g_ATEXIT(proc)    ! macro
    const GTK_IS_SCROLLABLE                  = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_SCROLLABLE))    ! macro
    const GTK_INVISIBLE_CLASS                = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_INVISIBLE,GtkInvisibleClass))    ! macro
    const GTK_TYPE_SELECTION_DATA            = (gtk_selection_data_get_type())    ! macro
    const GTK_PRINT_SETTINGS_PAPER_HEIGHT    = "paper-height"    ! macro
    const G_FILE_OUTPUT_STREAM               = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_FILE_OUTPUT_STREAM,GFileOutputStream))    ! macro
    const GTK_PAGE_SETUP                     = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_PAGE_SETUP,GtkPageSetup))    ! macro
    const GDK_KEY_Arabic_heh_goal            = 0x10006c1    ! macro
    const GDK_KEY_Georgian_chin              =  0x10010e9    ! macro
    const G_TYPE_CHAR                        =  G_TYPE_MAKE_FUNDAMENTAL(3)    ! macro
    const GTK_PRINT_OPERATION_CLASS          = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_PRINT_OPERATION,GtkPrintOperationClass))    ! macro
    const GTK_TYPE_CELL_AREA                 = (gtk_cell_area_get_type())    ! macro
    const GTK_IS_TABLE_CLASS                 = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_TABLE))    ! macro
    const g_static_mutex_trylock             = g_mutex_trylock(g_static_mutex_get_mutex(mutex))    ! macro
    const gtk_init_check                     = gtk_init_check_abi_check(argc,argv,2,sizeof(GtkWindow),sizeof(GtkBox))    ! macro
    const G_MENU_ATTRIBUTE_ACTION            = "action"    ! macro
    const GTK_ICON_THEME_CLASS               = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_ICON_THEME,GtkIconThemeClass))    ! macro
    const GTK_IS_ACCEL_LABEL                 = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_ACCEL_LABEL))    ! macro
    const GDK_KEY_lbelowdot                  = 0x1001e37    ! macro
    const GDK_KEY_ccaron                     =  0x1e8    ! macro
    const G_VALUE_HOLDS                      = (G_TYPE_CHECK_VALUE_TYPE((value),(type)))    ! macro
    const GTK_TYPE_RESIZE_MODE               = (gtk_resize_mode_get_type())    ! macro
    const GTK_STOCK_PRINT_WARNING            = "gtk-print-warning"    ! macro
    const GDK_KEY_Greek_kappa                = 0x7ea    ! macro
    const GDK_KEY_Cyrillic_ze                =  0x6da    ! macro
    const GTK_IS_CELL_RENDERER_PROGRESS      = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_CELL_RENDERER_PROGRESS))    ! macro
    const cairo_current_fill_rule            = cairo_current_fill_rule_REPLACED_BY_cairo_get_fill_rule    ! macro
    const GDK_KEY_Thai_sorusi                =  0xdc9    ! macro
    const G_FILE_ATTRIBUTE_MOUNTABLE_CAN_MOUNT = "mountable::can-mount"    ! macro
    const GDK_KEY_Cyrillic_yu                = 0x6c0    ! macro
    const GDK_KEY_Market                     =  0x1008ff62    ! macro
    const g_unsetenv                         =  g_unsetenv_utf8    ! macro
    const GDK_KEY_Execute                    =  0xff62    ! macro
    const GDK_KEY_checkerboard               =  0x9e1    ! macro
    const G_FILE_ATTRIBUTE_PREVIEW_ICON      = "preview::icon"    ! macro
    const GTK_TYPE_LAYOUT                    = (gtk_layout_get_type())    ! macro
    const GDK_KEY_acircumflex                = 0x0e2    ! macro
    const G_TYPE_PARAM_GTYPE                 = (g_param_spec_types[21])    ! macro
    const GDK_KEY_Armenian_hyphen            = 0x100058a    ! macro
    const G_TYPE_DATA_OUTPUT_STREAM          = (g_data_output_stream_get_type())    ! macro
    const G_PARAM_SPEC_INT                   = (G_TYPE_CHECK_INSTANCE_CAST((pspec),G_TYPE_PARAM_INT,GParamSpecInt))    ! macro
    const G_IS_NETWORK_ADDRESS_CLASS         = (G_TYPE_CHECK_CLASS_TYPE((k),G_TYPE_NETWORK_ADDRESS))    ! macro
    const g_ascii_isgraph                    = ((g_ascii_table[(guchar)(c)]&G_ASCII_GRAPH)!=0)    ! macro
    const GTK_TREE_VIEW_COLUMN_CLASS         = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_TREE_VIEW_COLUMN,GtkTreeViewColumnClass))    ! macro
    const G_FILE_ATTRIBUTE_TIME_ACCESS       = "time::access"    ! macro
    const GDK_KEY_End                        = 0xff57    ! macro
    const GDK_KEY_Ukrainian_ghe_with_upturn  =  0x6ad    ! macro
    const GDK_DEPRECATED_IN_3_2_FOR          =  GDK_DEPRECATED_FOR(f)    ! macro
    const g_list_previous                    = ((list)?(((GList*)(list))->prev):NULL)    ! macro
    const GDK_DEPRECATED_FOR                 = G_DEPRECATED_FOR(f)    ! macro
    const CAIRO_HAS_WIN32_SURFACE            = 1    ! macro
    const GDK_KEY_bar                        =  0x07c    ! macro
    const GDK_KEY_ModeLock                   =  0x1008ff01    ! macro
    const GTK_TREE_VIEW                      = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_TREE_VIEW,GtkTreeView))    ! macro
    const G_TYPE_FLAGS                       = G_TYPE_MAKE_FUNDAMENTAL(13)    ! macro
    const GTK_STYLE_CONTEXT                  = (G_TYPE_CHECK_INSTANCE_CAST((o),GTK_TYPE_STYLE_CONTEXT,GtkStyleContext))    ! macro
    const ATK_STREAMABLE_CONTENT_GET_IFACE   = (G_TYPE_INSTANCE_GET_INTERFACE((obj),ATK_TYPE_STREAMABLE_CONTENT,AtkStreamableContentIface))    ! macro
    const G_TYPE_SETTINGS_SCHEMA             = (g_settings_schema_get_type())    ! macro
    const GDK_KEY_dead_small_schwa           = 0xfe8a    ! macro
    const GDK_KEY_Armenian_vo                =  0x1000578    ! macro
    const GDK_KEY_Abreve                     =  0x1c3    ! macro
    const G_IS_FILTER_INPUT_STREAM_CLASS     = (G_TYPE_CHECK_CLASS_TYPE((k),G_TYPE_FILTER_INPUT_STREAM))    ! macro
    const G_HOOK_FLAGS                       = (G_HOOK(hook)->flags)    ! macro
    const GTK_MAJOR_VERSION                  = (3)    ! macro
    const GDK_KEY_Greek_ALPHA                = 0x7c1    ! macro
    const G_GINT64_MODIFIER                  = "I64"    ! macro
    const GTK_IS_NUMERABLE_ICON              = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_NUMERABLE_ICON))    ! macro
    const GDK_KEY_Arabic_comma               = 0x5ac    ! macro
    const cairo_current_path                 =  cairo_current_path_DEPRECATED_BY_cairo_copy_path    ! macro
    const G_VOLUME_IDENTIFIER_KIND_UNIX_DEVICE = "unix-device"    ! macro
    const GTK_TOOL_ITEM_GROUP_GET_CLASS      = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_TOOL_ITEM_GROUP,GtkToolItemGroupClass))    ! macro
    const G_IS_FLAGS_CLASS                   = (G_TYPE_CHECK_CLASS_TYPE((class),G_TYPE_FLAGS))    ! macro
    const GDK_KEY_AudioStop                  = 0x1008ff15    ! macro
    const GTK_IS_HANDLE_BOX_CLASS            = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_HANDLE_BOX))    ! macro
    const GTK_PRINT_SETTINGS_FINISHINGS      = "finishings"    ! macro
    const GDK_KEY_Hangul_RieulTieut          = 0xeae    ! macro
    const GTK_IS_HSEPARATOR_CLASS            = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_HSEPARATOR))    ! macro
    const GTK_IS_ARROW                       = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_ARROW))    ! macro
    const ATK_IMAGE_GET_IFACE                = (G_TYPE_INSTANCE_GET_INTERFACE((obj),ATK_TYPE_IMAGE,AtkImageIface))    ! macro
    const GTK_ENTRY_BUFFER_MAX_SIZE          = G_MAXUSHORT    ! macro
    const ATK_IS_IMPLEMENTOR                 =  G_TYPE_CHECK_INSTANCE_TYPE((obj),ATK_TYPE_IMPLEMENTOR)    ! macro
    const g_array_index                      = (((t*)(void*)(a)->data)[(i)])    ! macro
    const cairo_current_font_extents         = cairo_current_font_extents_REPLACED_BY_cairo_font_extents    ! macro
    const GDK_KEY_Ycircumflex                =  0x1000176    ! macro
    const GDK_KEY_righttack                  =  0xbfc    ! macro
    const GLIB_DEPRECATED_FOR                =  G_DEPRECATED_FOR(f)    ! macro
    const GDK_KEY_Arabic_farsi_yeh           = 0x10006cc    ! macro
    const GDK_DISPLAY_MANAGER                = (G_TYPE_CHECK_INSTANCE_CAST((object),GDK_TYPE_DISPLAY_MANAGER,GdkDisplayManager))    ! macro
    const GTK_TYPE_POSITION_TYPE             = (gtk_position_type_get_type())    ! macro
    const G_APP_INFO_GET_IFACE               = (G_TYPE_INSTANCE_GET_INTERFACE((obj),G_TYPE_APP_INFO,GAppInfoIface))    ! macro
    const G_IS_DBUS_OBJECT_MANAGER_CLIENT    = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_DBUS_OBJECT_MANAGER_CLIENT))    ! macro
    const GDK_KEY_ellipsis                   = 0xaae    ! macro
    const GDK_KEY_Georgian_par               =  0x10010de    ! macro
    const ATK_PLUG_CLASS                     = (G_TYPE_CHECK_CLASS_CAST((klass),ATK_TYPE_PLUG,AtkPlugClass))    ! macro
    const GDK_KEY_EcuSign                    = 0x10020a0    ! macro
    const GDK_KEY_Pointer_DownLeft           =  0xfee6    ! macro
    const G_TYPE_IS_DERIVABLE                = (g_type_test_flags((type),G_TYPE_FLAG_DERIVABLE))    ! macro
    const GDK_MINOR_VERSION                  = (6)    ! macro
    const GUINT64_FROM_BE                    = (GUINT64_TO_BE(val))    ! macro
    const G_IS_BINDING                       = (G_TYPE_CHECK_INSTANCE_TYPE((obj),G_TYPE_BINDING))    ! macro
    const GINT32_FROM_LE                     = (GINT32_TO_LE(val))    ! macro
    const GDK_KEY_braille_dots_23678         = 0x10028e6    ! macro
    const GTK_TYPE_ACTION                    = (gtk_action_get_type())    ! macro
    const GTK_APP_CHOOSER_BUTTON             = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_APP_CHOOSER_BUTTON,GtkAppChooserButton))    ! macro
    const g_assert_no_error                  = do{if(err)g_assertion_message_error(G_LOG_DOMAIN,__FILE__,__LINE__,G_STRFUNC,#err,err,0,0);}while(0)    ! macro
    const GTK_IM_MULTICONTEXT                = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_IM_MULTICONTEXT,GtkIMMulticontext))    ! macro
    const G_EMBLEM_CLASS                     = (G_TYPE_CHECK_CLASS_CAST((k),G_TYPE_EMBLEM,GEmblemClass))    ! macro
    const PANGO_TYPE_COLOR                   = pango_color_get_type()    ! macro
    const G_TLS_FILE_DATABASE                = (G_TYPE_CHECK_INSTANCE_CAST((inst),G_TYPE_TLS_FILE_DATABASE,GTlsFileDatabase))    ! macro
    const G_THREADED_SOCKET_SERVICE_GET_CLASS = (G_TYPE_INSTANCE_GET_CLASS((inst),G_TYPE_THREADED_SOCKET_SERVICE,GThreadedSocketServiceClass))    ! macro
    const G_IS_INITIALLY_UNOWNED             = (G_TYPE_CHECK_INSTANCE_TYPE((object),G_TYPE_INITIALLY_UNOWNED))    ! macro
    const GDK_KEY_ehook                      = 0x1001ebb    ! macro
    const GDK_KEY_Stop                       =  0x1008ff28    ! macro
    const GTK_IS_RECENT_MANAGER_CLASS        = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_RECENT_MANAGER))    ! macro
    const G_TLS_PASSWORD_CLASS               = (G_TYPE_CHECK_CLASS_CAST((k),G_TYPE_TLS_PASSWORD,GTlsPasswordClass))    ! macro
    const G_HOOK_ACTIVE                      = ((G_HOOK_FLAGS(hook)&G_HOOK_FLAG_ACTIVE)!=0)    ! macro
    const GDK_KEY_Lacute                     = 0x1c5    ! macro
    const PANGO_TYPE_COVERAGE_LEVEL          = (pango_coverage_level_get_type())    ! macro
    const GTK_PRINT_SETTINGS_OUTPUT_DIR      = "output-dir"    ! macro
    const G_DEFINE_POINTER_TYPE_WITH_CODE    = _G_DEFINE_POINTER_TYPE_BEGIN(TypeName,type_name){_C_;}_G_DEFINE_TYPE_EXTENDED_END()    ! macro
    const GTK_STYLE_CLASS_ARROW              = "arrow"    ! macro
    const GDK_PIXBUF_MINOR                   = (26)    ! macro
    const G_TYPE_MAIN_LOOP                   = (g_main_loop_get_type())    ! macro
    const GSIZE_FROM_BE                      = (GSIZE_TO_BE(val))    ! macro
    const G_TYPE_DBUS_SEND_MESSAGE_FLAGS     = (g_dbus_send_message_flags_get_type())    ! macro
    const GDK_KEY_Hangul_PieubSios           = 0xeb4    ! macro
    const G_TYPE_VOLUME                      = (g_volume_get_type())    ! macro
    const GTK_PRINT_SETTINGS_PAPER_FORMAT    = "paper-format"    ! macro
    const GTK_TYPE_WINDOW                    = (gtk_window_get_type())    ! macro
    const CAIRO_HAS_PS_SURFACE               = 1    ! macro
    const G_STATIC_PRIVATE_INIT              = {0}    ! macro
    const G_FILENAME_COMPLETER_CLASS         = (G_TYPE_CHECK_CLASS_CAST((k),G_TYPE_FILENAME_COMPLETER,GFilenameCompleterClass))    ! macro
    const G_TYPE_TIME_ZONE                   = (g_time_zone_get_type())    ! macro
    const GDK_KEY_Cyrillic_NJE               = 0x6ba    ! macro
    const GDK_KEY_Ukrainian_GHE_WITH_UPTURN  =  0x6bd    ! macro
    const G_WIN32_IS_NT_BASED                =  TRUE    ! macro
    const GDK_SELECTION_TYPE_STRING          =  _GDK_MAKE_ATOM(31)    ! macro
    const GTK_IS_RADIO_BUTTON                = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_RADIO_BUTTON))    ! macro
    const g_return_if_reached                = G_STMT_START{g_log(G_LOG_DOMAIN,G_LOG_LEVEL_CRITICAL,"file %s: line %d: should not be reached",__FILE__,__LINE__);return;}G_STMT_END    ! macro
    const G_PARAM_SPEC_VALUE_ARRAY           = (G_TYPE_CHECK_INSTANCE_CAST((pspec),G_TYPE_PARAM_VALUE_ARRAY,GParamSpecValueArray))    ! macro
    const GTK_INTERFACE_AGE                  = (4)    ! macro
    const G_CHARSET_CONVERTER_CLASS          = (G_TYPE_CHECK_CLASS_CAST((k),G_TYPE_CHARSET_CONVERTER,GCharsetConverterClass))    ! macro
    const G_VOLUME_MONITOR_CLASS             = (G_TYPE_CHECK_CLASS_CAST((k),G_TYPE_VOLUME_MONITOR,GVolumeMonitorClass))    ! macro
    const G_ENUM_CLASS                       = (G_TYPE_CHECK_CLASS_CAST((class),G_TYPE_ENUM,GEnumClass))    ! macro
    const GDK_KEY_lcedilla                   = 0x3b6    ! macro
    const GDK_KEY_PreviousCandidate          =  0xff3e    ! macro
    const GTK_PRINT_SETTINGS_PAPER_WIDTH     = "paper-width"    ! macro
    const GDK_KEY_rcaron                     = 0x1f8    ! macro
    const ATK_TYPE_SOCKET                    = (atk_socket_get_type())    ! macro
    const GTK_IS_FILE_CHOOSER_BUTTON         = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_FILE_CHOOSER_BUTTON))    ! macro
    const ATK_VALUE_GET_IFACE                = (G_TYPE_INSTANCE_GET_INTERFACE((obj),ATK_TYPE_VALUE,AtkValueIface))    ! macro
    const G_BUFFERED_OUTPUT_STREAM_GET_CLASS = (G_TYPE_INSTANCE_GET_CLASS((o),G_TYPE_BUFFERED_OUTPUT_STREAM,GBufferedOutputStreamClass))    ! macro
    const GDK_KEY_Linefeed                   = 0xff0a    ! macro
    const GTK_IS_RECENT_CHOOSER_MENU         = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_RECENT_CHOOSER_MENU))    ! macro
    const G_OPTION_REMAINING                 = ""    ! macro
    const g_main_new                         = g_main_loop_new(NULL,is_running)    ! macro
    const G_IS_CREDENTIALS                   = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_CREDENTIALS))    ! macro
    const GOBJECT_VAR                        = extern __declspec(dllimport)    ! macro
    const GTK_IS_CELL_EDITABLE               = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_CELL_EDITABLE))    ! macro
    const GTK_LOCK_BUTTON_CLASS              = (G_TYPE_CHECK_CLASS_CAST((k),GTK_LOCK_BUTTON,GtkLockButtonClass))    ! macro
    const G_IO_STREAM_CLASS                  = (G_TYPE_CHECK_CLASS_CAST((k),G_TYPE_IO_STREAM,GIOStreamClass))    ! macro
    const GTK_TYPE_RADIO_BUTTON              = (gtk_radio_button_get_type())    ! macro
    const GTK_VBUTTON_BOX                    = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_VBUTTON_BOX,GtkVButtonBox))    ! macro
    const GTK_TYPE_FRAME                     = (gtk_frame_get_type())    ! macro
    const GDK_KEY_Thai_paiyannoi             = 0xdcf    ! macro
    const GTK_IS_CHECK_BUTTON_CLASS          = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_CHECK_BUTTON))    ! macro
    const G_ASYNC_INITABLE_GET_IFACE         = (G_TYPE_INSTANCE_GET_INTERFACE((obj),G_TYPE_ASYNC_INITABLE,GAsyncInitableIface))    ! macro
    const GDK_KEY_vt                         = 0x9e9    ! macro
    const GTK_RECENT_ACTION_GET_CLASS        = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_RECENT_ACTION,GtkRecentActionClass))    ! macro
    const GTK_DRAWING_AREA_CLASS             = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_DRAWING_AREA,GtkDrawingAreaClass))    ! macro
    const g_assert_error                     = do{if(!err||(err)->domain!=dom||(err)->code!=c)g_assertion_message_error(G_LOG_DOMAIN,__FILE__,__LINE__,G_STRFUNC,#err,err,dom,c);}while(0)    ! macro
    const G_FILE_ATTRIBUTE_MOUNTABLE_HAL_UDI = "mountable::hal-udi"    ! macro
    const G_MENU_LINK_SUBMENU                = "submenu"    ! macro
    const GTK_TYPE_FILE_CHOOSER_BUTTON       = (gtk_file_chooser_button_get_type())    ! macro
    const GDK_KEY_Icircumflex                = 0x0ce    ! macro
    const GDK_KEY_rightmiddlesummation       =  0x8b7    ! macro
    const GTK_TYPE_RECENT_CHOOSER_MENU       = (gtk_recent_chooser_menu_get_type())    ! macro
    const GDK_KEY_braille_dots_123678        = 0x10028e7    ! macro
    const GTK_IS_SIZE_GROUP                  = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_SIZE_GROUP))    ! macro
    const GTK_STYLE_CLASS_CURSOR_HANDLE      = "cursor-handle"    ! macro
    const GDK_KEY_Sinh_a                     = 0x1000d85    ! macro
    const GDK_KEY_Armenian_za                =  0x1000566    ! macro
    const GTK_LIST_STORE_GET_CLASS           = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_LIST_STORE,GtkListStoreClass))    ! macro
    const GTK_IS_SEPARATOR_TOOL_ITEM         = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_SEPARATOR_TOOL_ITEM))    ! macro
    const G_MEM_ALIGN                        = GLIB_SIZEOF_VOID_P    ! macro
    const GTK_IS_PAGE_SETUP                  = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_PAGE_SETUP))    ! macro
    const GDK_TYPE_OWNER_CHANGE              = (gdk_owner_change_get_type())    ! macro
    const G_SIMPLE_ASYNC_RESULT_GET_CLASS    = (G_TYPE_INSTANCE_GET_CLASS((o),G_TYPE_SIMPLE_ASYNC_RESULT,GSimpleAsyncResultClass))    ! macro
    const ATK_SOCKET                         = (G_TYPE_CHECK_INSTANCE_CAST((obj),ATK_TYPE_SOCKET,AtkSocket))    ! macro
    const GDK_KEY_Sinh_e                     = 0x1000d91    ! macro
    const GDK_VERSION_MAX_ALLOWED            =  GDK_VERSION_MIN_REQUIRED    ! macro
    const ATK_TYPE_ACTION                    = (atk_action_get_type())    ! macro
    const GDK_KEY_Hangul_KkogjiDalrinIeung   = 0xef3    ! macro
    const GDK_KEY_KP_Separator               =  0xffac    ! macro
    const GDK_KEY_ecircumflextilde           =  0x1001ec5    ! macro
    const GTK_APPLICATION_CLASS              = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_APPLICATION,GtkApplicationClass))    ! macro
    const GTK_IS_ABOUT_DIALOG_CLASS          = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_ABOUT_DIALOG))    ! macro
    const g_memmove                          = G_STMT_START{memmove((dest),(src),(len));}G_STMT_END    ! macro
    const GDK_TYPE_SETTING_ACTION            = (gdk_setting_action_get_type())    ! macro
    const GDK_KEY_Greek_XI                   = 0x7ce    ! macro
    const GDK_KEY_Hangul_J_Pieub             =  0xee4    ! macro
    const GTK_TYPE_PATH_TYPE                 = (gtk_path_type_get_type())    ! macro
    const GDK_KEY_Arabic_keheh               = 0x10006a9    ! macro
    const GDK_KEY_Sinh_i                     =  0x1000d89    ! macro
    const GTK_RECENT_MANAGER_ERROR           = (gtk_recent_manager_error_quark())    ! macro
    const ATK_IS_MISC                        = G_TYPE_CHECK_INSTANCE_TYPE((obj),ATK_TYPE_MISC)    ! macro
    const GDK_KEY_ISO_Partial_Space_Left     = 0xfe25    ! macro
    const g_slice_free                       =  do{if(1)g_slice_free1(sizeof(type),(mem));else(void)((type*)0==(mem));}while(0)    ! macro
    const GTK_TYPE_SEPARATOR_TOOL_ITEM       = (gtk_separator_tool_item_get_type())    ! macro
    const GTK_COMBO_BOX                      = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_COMBO_BOX,GtkComboBox))    ! macro
    const GDK_KEY_odoubleacute               = 0x1f5    ! macro
    const G_DIR_SEPARATOR_S                  = "\\"    ! macro
    const G_TYPE_INET_SOCKET_ADDRESS         = (g_inet_socket_address_get_type())    ! macro
    const GTK_IS_HSV                         = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_HSV))    ! macro
    const GTK_BIN_GET_CLASS                  = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_BIN,GtkBinClass))    ! macro
    const GDK_KEY_kana_CHI                   = 0x4c1    ! macro
    const GDK_KEY_Acircumflex                =  0x0c2    ! macro
    const GDK_KEY_Sinh_o                     =  0x1000d94    ! macro
    const g_signal_handlers_disconnect_by_func =  g_signal_handlers_disconnect_matched((instance),(GSignalMatchType)(G_SIGNAL_MATCH_FUNC|G_SIGNAL_MATCH_DATA),0,0,NULL,(func),(data))    ! macro
    const GDK_KEY_Ubreve                     = 0x2dd    ! macro
    const GDK_KEY_KbdBrightnessDown          =  0x1008ff06    ! macro
    const GTK_LINK_BUTTON_GET_CLASS          = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_LINK_BUTTON,GtkLinkButtonClass))    ! macro
    const ATK_TYPE_WINDOW                    = (atk_window_get_type())    ! macro
    const G_URI_RESERVED_CHARS_SUBCOMPONENT_DELIMITERS = "!$&\'()*+,;="    ! macro
    const GDK_KEY_Cyrillic_yeru              = 0x6d9    ! macro
    const GTK_IS_COLOR_BUTTON_CLASS          = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_COLOR_BUTTON))    ! macro
    const GTK_HANDLE_BOX                     = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_HANDLE_BOX,GtkHandleBox))    ! macro
    const GTK_TYPE_IM_CONTEXT_SIMPLE         = (gtk_im_context_simple_get_type())    ! macro
    const GLIB_DEPRECATED_IN_2_28_FOR        = GLIB_DEPRECATED_FOR(f)    ! macro
    const GDK_IS_VISUAL                      = (G_TYPE_CHECK_INSTANCE_TYPE((object),GDK_TYPE_VISUAL))    ! macro
    const GTK_IS_CELL_RENDERER_PIXBUF_CLASS  = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_CELL_RENDERER_PIXBUF))    ! macro
    const GDK_KEY_Arabic_kasratan            = 0x5ed    ! macro
    const G_TYPE_MENU_ATTRIBUTE_ITER         = (g_menu_attribute_iter_get_type())    ! macro
    const g_find_program_in_path             = g_find_program_in_path_utf8    ! macro
    const GDK_KEY_dead_stroke                =  0xfe63    ! macro
    const GDK_KEY_Ocircumflexbelowdot        =  0x1001ed8    ! macro
    const GLIB_SYSDEF_POLLIN                 = =1    ! macro
    const GDK_KEY_Sinh_u                     =  0x1000d8b    ! macro
    const G_IS_DBUS_MENU_MODEL               = (G_TYPE_CHECK_INSTANCE_TYPE((inst),G_TYPE_DBUS_MENU_MODEL))    ! macro
    const GDK_KEY_Greek_alpha                = 0x7e1    ! macro
    const ATK_ACTION                         =  G_TYPE_CHECK_INSTANCE_CAST((obj),ATK_TYPE_ACTION,AtkAction)    ! macro
    const G_STRLOC                           = __FILE__":"G_STRINGIFY(__LINE__)    ! macro
    const GDK_KEY_Hangul_SingleCandidate     = 0xff3c    ! macro
    const GTK_BOX                            = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_BOX,GtkBox))    ! macro
    const G_DEFINE_POINTER_TYPE              = G_DEFINE_POINTER_TYPE_WITH_CODE(TypeName,type_name,{})    ! macro
    const PANGO_TYPE_FONT_DESCRIPTION        = (pango_font_description_get_type())    ! macro
    const G_PRIORITY_HIGH                    = -100    ! macro
    const GTK_HSV_GET_CLASS                  = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_HSV,GtkHSVClass))    ! macro
    const GDK_KEY_AccessX_Enable             = 0xfe70    ! macro
    const G_TYPE_SOCKET_SERVICE              = (g_socket_service_get_type())    ! macro
    const GDK_KEY_Thai_lochula               = 0xdcc    ! macro
    const GDK_KEY_Save                       =  0x1008ff77    ! macro
    const GTK_IS_TOGGLE_TOOL_BUTTON_CLASS    = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_TOGGLE_TOOL_BUTTON))    ! macro
    const GTK_TYPE_STATUSBAR                 = (gtk_statusbar_get_type())    ! macro
    const GTK_IS_APPLICATION                 = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_APPLICATION))    ! macro
    const GDK_KEY_latincross                 = 0xad9    ! macro
    const GDK_KEY_Iabovedot                  =  0x2a9    ! macro
    const GDK_KEY_Sinh_nya                   =  0x1000da4    ! macro
    const G_PROXY_ADDRESS_ENUMERATOR_GET_CLASS = (G_TYPE_INSTANCE_GET_CLASS((o),G_TYPE_PROXY_ADDRESS_ENUMERATOR,GProxyAddressEnumeratorClass))    ! macro
    const GTK_VBUTTON_BOX_CLASS              = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_VBUTTON_BOX,GtkVButtonBoxClass))    ! macro
    const GTK_STOCK_ABOUT                    = "gtk-about"    ! macro
    const G_TYPE_TLS_SERVER_CONNECTION       = (g_tls_server_connection_get_type())    ! macro
    const GDK_KEY_ZoomOut                    = 0x1008ff8c    ! macro
    const GDK_KEY_approxeq                   =  0x1002248    ! macro
    const GTK_TYPE_BUILDABLE                 = (gtk_buildable_get_type())    ! macro
    const GDK_TYPE_PROPERTY_STATE            = (gdk_property_state_get_type())    ! macro
    const ATK_WINDOW                         = G_TYPE_CHECK_INSTANCE_CAST((obj),ATK_TYPE_WINDOW,AtkWindow)    ! macro
    const GDK_KEY_Greek_eta                  = 0x7e7    ! macro
    const GLIB_SYSDEF_POLLERR                = =8    ! macro
    const g_date_monday_week_of_year         =  g_date_get_monday_week_of_year    ! macro
    const GDK_TYPE_EVENT_MASK                = (gdk_event_mask_get_type())    ! macro
    const GDK_KEY_braille_dots_234           = 0x100280e    ! macro
    const GTK_IS_HPANED_CLASS                = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_HPANED))    ! macro
    const GTK_ACTIVATABLE_CLASS              = (G_TYPE_CHECK_CLASS_CAST((obj),GTK_TYPE_ACTIVATABLE,GtkActivatableIface))    ! macro
    const GDK_KEY_braille_dots_235           = 0x1002816    ! macro
    const GTK_IS_ASSISTANT                   = (G_TYPE_CHECK_INSTANCE_TYPE((o),GTK_TYPE_ASSISTANT))    ! macro
    const GDK_KEY_braille_dots_236           = 0x1002826    ! macro
    const GTK_IS_FRAME_CLASS                 = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_FRAME))    ! macro
    const GDK_KEY_figdash                    = 0xabb    ! macro
    const G_IS_FILE_INFO                     = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_FILE_INFO))    ! macro
    const GTK_TYPE_SPIN_BUTTON               = (gtk_spin_button_get_type())    ! macro
    const GDK_KEY_braille_dots_1456          = 0x1002839    ! macro
    const GDK_KEY_braille_dots_237           =  0x1002846    ! macro
    const GDK_KEY_braille_dots_1457          =  0x1002859    ! macro
    const GDK_KEY_braille_dots_238           =  0x1002886    ! macro
    const GTK_STYLE_CLASS_SCROLLBARS_JUNCTION = "scrollbars-junction"    ! macro
    const GTK_TREE_SELECTION                 = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_TREE_SELECTION,GtkTreeSelection))    ! macro
    const GTK_CONTAINER_CLASS                = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_CONTAINER,GtkContainerClass))    ! macro
    const GDK_KEY_braille_dots_1458          = 0x1002899    ! macro
    const GDK_KEY_Cyrillic_ka_descender      =  0x100049b    ! macro
    const MIN                                = (((a)<(b))?(a):(b))    ! macro
    const GTK_TYPE_FIXED                     = (gtk_fixed_get_type())    ! macro
    const GDK_KEY_parenright                 = 0x029    ! macro
    const GDK_KEY_eightsuperior              =  0x1002078    ! macro
    const GDK_KEY_ecircumflexgrave           =  0x1001ec1    ! macro
    const GTK_STOCK_ZOOM_IN                  = "gtk-zoom-in"    ! macro
    const GUINT32_FROM_LE                    = (GUINT32_TO_LE(val))    ! macro
    const GDK_KEY_3270_DeleteWord            = 0xfd1a    ! macro
    const GDK_KEY_Eth                        =  0x0d0    ! macro
    const GTK_CELL_EDITABLE_CLASS            = (G_TYPE_CHECK_CLASS_CAST((obj),GTK_TYPE_CELL_EDITABLE,GtkCellEditableIface))    ! macro
    const GTK_VBUTTON_BOX_GET_CLASS          = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_VBUTTON_BOX,GtkVButtonBoxClass))    ! macro
    const G_TLS_CERTIFICATE_CLASS            = (G_TYPE_CHECK_CLASS_CAST((class),G_TYPE_TLS_CERTIFICATE,GTlsCertificateClass))    ! macro
    const G_GUINT64_FORMAT                   = "I64u"    ! macro
    const GDK_KEY_exclamdown                 = 0x0a1    ! macro
    const GINT64_FROM_LE                     = (GINT64_TO_LE(val))    ! macro
    const FALSE                              = (0)    ! macro
    const GDK_KEY_Greek_ETAaccent            = 0x7a3    ! macro
    const GDK_KEY_Hangul_Jieuj               =  0xeb8    ! macro
    const GSSIZE_FROM_BE                     = (GSSIZE_TO_BE(val))    ! macro
    const GDK_KEY_Serbian_je                 = 0x6a8    ! macro
    const GTK_STOCK_DND_MULTIPLE             = "gtk-dnd-multiple"    ! macro
    const G_TYPE_MOUNT_UNMOUNT_FLAGS         = (g_mount_unmount_flags_get_type())    ! macro
    const GDK_KEY_signaturemark              = 0xaca    ! macro
    const GDK_KEY_Thai_leksi                 =  0xdf4    ! macro
    const GDK_KEY_braille_dots_245           =  0x100281a    ! macro
    const G_IS_PARAM_SPEC_POINTER            = (G_TYPE_CHECK_INSTANCE_TYPE((pspec),G_TYPE_PARAM_POINTER))    ! macro
    const GDK_KEY_Clear                      = 0xff0b    ! macro
    const GDK_KEY_Georgian_gan               =  0x10010d2    ! macro
    const GDK_KEY_braille_dots_246           =  0x100282a    ! macro
    const G_TYPE_UINT64                      =  G_TYPE_MAKE_FUNDAMENTAL(11)    ! macro
    const ATK_NO_OP_OBJECT_GET_CLASS         = (G_TYPE_INSTANCE_GET_CLASS((obj),ATK_TYPE_NO_OP_OBJECT,AtkNoOpObjectClass))    ! macro
    const GDK_KEY_Serbian_dje                = 0x6a1    ! macro
    const GTK_STOCK_SELECT_FONT              = "gtk-select-font"    ! macro
    const GDK_KEY_braille_dots_247           = 0x100284a    ! macro
    const GDK_KEY_braille_dots_1467          =  0x1002869    ! macro
    const GDK_KEY_braille_dots_248           =  0x100288a    ! macro
    const GTK_VSCALE_GET_CLASS               = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_VSCALE,GtkVScaleClass))    ! macro
    const GDK_KEY_eacute                     = 0x0e9    ! macro
    const G_SOCKET_ADDRESS_ENUMERATOR_CLASS  = (G_TYPE_CHECK_CLASS_CAST((k),G_TYPE_SOCKET_ADDRESS_ENUMERATOR,GSocketAddressEnumeratorClass))    ! macro
    const GDK_KEY_Sinh_oo2                   = 0x1000ddd    ! macro
    const GDK_KEY_Ukranian_je                =  0x6a4    ! macro
    const GDK_KEY_braille_dots_1468          =  0x10028a9    ! macro
    const G_IS_ASYNC_INITABLE                = (G_TYPE_CHECK_INSTANCE_TYPE((obj),G_TYPE_ASYNC_INITABLE))    ! macro
    const GDK_KEY_Ukrainian_IE               = 0x6b4    ! macro
    const G_VOLUME_MONITOR_EXTENSION_POINT_NAME = "gio-volume-monitor"    ! macro
    const G_TYPE_TLS_FILE_DATABASE           = (g_tls_file_database_get_type())    ! macro
    const G_IS_APP_LAUNCH_CONTEXT_CLASS      = (G_TYPE_CHECK_CLASS_TYPE((k),G_TYPE_APP_LAUNCH_CONTEXT))    ! macro
    const GTK_TOOL_BUTTON_CLASS              = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_TOOL_BUTTON,GtkToolButtonClass))    ! macro
    const GDK_TYPE_CURSOR_TYPE               = (gdk_cursor_type_get_type())    ! macro
    const GDK_KEY_em3space                   = 0xaa3    ! macro
    const GTK_PRINT_SETTINGS_ORIENTATION     = "orientation"    ! macro
    const GTK_RADIO_BUTTON                   = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_RADIO_BUTTON,GtkRadioButton))    ! macro
    const GTK_TYPE_TOGGLE_TOOL_BUTTON        = (gtk_toggle_tool_button_get_type())    ! macro
    const GDK_KEY_AudioRepeat                = 0x1008ff98    ! macro
    const GTK_STOCK_DISCARD                  = "gtk-discard"    ! macro
    const GTK_STOCK_REDO                     = "gtk-redo"    ! macro
    const GDK_KEY_Greek_omegaaccent          = 0x7bb    ! macro
    const GTK_DIALOG                         = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_DIALOG,GtkDialog))    ! macro
    const G_FILE_ATTRIBUTE_TIME_MODIFIED     = "time::modified"    ! macro
    const G_VARIANT_TYPE_HANDLE              = ((const GVariantType*)"h")    ! macro
    const GDK_IS_PIXBUF_SIMPLE_ANIM_CLASS    = (G_TYPE_CHECK_CLASS_TYPE((klass),GDK_TYPE_PIXBUF_SIMPLE_ANIM))    ! macro
    const GDK_KEY_Cabovedot                  = 0x2c5    ! macro
    const GDK_KEY_Thai_oang                  =  0xdcd    ! macro
    const GDK_KEY_Thai_maitri                =  0xdea    ! macro
    const GDK_KEY_ogonek                     =  0x1b2    ! macro
    const G_FILE_INFO_CLASS                  = (G_TYPE_CHECK_CLASS_CAST((k),G_TYPE_FILE_INFO,GFileInfoClass))    ! macro
    const G_FILE_ATTRIBUTE_STANDARD_DESCRIPTION = "standard::description"    ! macro
    const GTK_TYPE_ARROW_PLACEMENT           = (gtk_arrow_placement_get_type())    ! macro
    const GDK_KEY_backslash                  = 0x05c    ! macro
    const GDK_KEY_Greek_UPSILONaccent        =  0x7a8    ! macro
    const g_once_init_enter                  = (g_once_init_enter((location)))    ! macro
    const ATK_HYPERTEXT_GET_IFACE            = (G_TYPE_INSTANCE_GET_INTERFACE((obj),ATK_TYPE_HYPERTEXT,AtkHypertextIface))    ! macro
    const G_TLS_DATABASE_GET_CLASS           = (G_TYPE_INSTANCE_GET_CLASS((inst),G_TYPE_TLS_DATABASE,GTlsDatabaseClass))    ! macro
    const GTK_STOCK_PASTE                    = "gtk-paste"    ! macro
    const GTK_THEMING_ENGINE_CLASS           = (G_TYPE_CHECK_CLASS_CAST((c),GTK_TYPE_THEMING_ENGINE,GtkThemingEngineClass))    ! macro
    const G_PARAM_SPEC_BOXED                 = (G_TYPE_CHECK_INSTANCE_CAST((pspec),G_TYPE_PARAM_BOXED,GParamSpecBoxed))    ! macro
    const GDK_KEY_braille_dots_256           = 0x1002832    ! macro
    const GDK_KEY_braille_dots_257           =  0x1002852    ! macro
    const cairo_get_status_string            =  cairo_get_status_string_DEPRECATED_BY_cairo_status_AND_cairo_status_to_string    ! macro
    const GDK_KEY_braille_dots_258           =  0x1002892    ! macro
    const GLIB_VERSION_CUR_STABLE            = (G_ENCODE_VERSION(GLIB_MAJOR_VERSION,GLIB_MINOR_VERSION))    ! macro
    const GDK_KEY_ISO_Next_Group_Lock        = 0xfe09    ! macro
    const GDK_KEY_rightopentriangle          =  0xacd    ! macro
    const G_IS_PARAM_SPEC_GTYPE              = (G_TYPE_CHECK_INSTANCE_TYPE((pspec),G_TYPE_PARAM_GTYPE))    ! macro
    const GULONG_FROM_LE                     = (GULONG_TO_LE(val))    ! macro
    const GDK_KEY_braille_dots_1478          = 0x10028c9    ! macro
    const GTK_IS_HSCALE_CLASS                = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_HSCALE))    ! macro
    const ATK_TYPE_GOBJECT_ACCESSIBLE        = (atk_gobject_accessible_get_type())    ! macro
    const GDK_KEY_Hibernate                  = 0x1008ffa8    ! macro
    const GDK_KEY_Arabic_hamza_below         =  0x1000655    ! macro
    const GDK_KEY_botleftparens              =  0x8ac    ! macro
    const G_PRIORITY_DEFAULT                 =  0    ! macro
    const GTK_MESSAGE_DIALOG                 = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_MESSAGE_DIALOG,GtkMessageDialog))    ! macro
    const GDK_KEY_Blue                       = 0x1008ffa6    ! macro
    const G_OBJECT_CLASS_NAME                = (g_type_name(G_OBJECT_CLASS_TYPE(class)))    ! macro
    const GDK_KEY_braille_dots_4678          = 0x10028e8    ! macro
    const G_TYPE_RESERVED_BSE_LAST           = (48)    ! macro
    const GDK_KEY_semicolon                  = 0x03b    ! macro
    const GDK_TYPE_VISUAL                    = (gdk_visual_get_type())    ! macro
    const G_VALUE_HOLDS_INT64                = (G_TYPE_CHECK_VALUE_TYPE((value),G_TYPE_INT64))    ! macro
    const GDK_KEY_ibreve                     = 0x100012d    ! macro
    const GTK_TREE_SELECTION_CLASS           = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_TREE_SELECTION,GtkTreeSelectionClass))    ! macro
    const GDK_KEY_botleftsummation           = 0x8b2    ! macro
    const PANGO_TYPE_GRAVITY                 = (pango_gravity_get_type())    ! macro
    const GDK_KEY_KP_F1                      = 0xff91    ! macro
    const GDK_KEY_vertconnector              =  0x8a6    ! macro
    const G_GNUC_FUNCTION                    = ""    ! macro
    const GDK_KEY_blank                      = 0x9df    ! macro
    const GTK_IS_FONT_CHOOSER_DIALOG         = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_FONT_CHOOSER_DIALOG))    ! macro
    const GDK_KEY_KP_F2                      = 0xff92    ! macro
    const GTK_PAPER_NAME_EXECUTIVE           = "na_executive"    ! macro
    const ATK_IS_IMAGE                       = G_TYPE_CHECK_INSTANCE_TYPE((obj),ATK_TYPE_IMAGE)    ! macro
    const G_VARIANT_TYPE_ANY                 = ((const GVariantType*)"*")    ! macro
    const GDK_KEY_KP_F3                      = 0xff93    ! macro
    const GTK_ICON_VIEW                      = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_ICON_VIEW,GtkIconView))    ! macro
    const G_IS_EMBLEM                        = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_EMBLEM))    ! macro
    const G_IS_DBUS_PROXY                    = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_DBUS_PROXY))    ! macro
    const GDK_KEY_KP_F4                      = 0xff94    ! macro
    const G_TYPE_MATCH_INFO                  = (g_match_info_get_type())    ! macro
    const GDK_KEY_comma                      = 0x02c    ! macro
    const GDK_KEY_TopMenu                    =  0x1008ffa2    ! macro
    const GTK_TYPE_ACCEL_LABEL               = (gtk_accel_label_get_type())    ! macro
    const GDK_KEY_braille_dots_267           = 0x1002862    ! macro
    const GTK_IS_HANDLE_BOX                  = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_HANDLE_BOX))    ! macro
    const GTK_TYPE_BUTTON_BOX                = (gtk_button_box_get_type())    ! macro
    const G_PERMISSION_CLASS                 = (G_TYPE_CHECK_CLASS_CAST((class),G_TYPE_PERMISSION,GPermissionClass))    ! macro
    const GTK_IS_FONT_CHOOSER_WIDGET_CLASS   = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_FONT_CHOOSER_WIDGET))    ! macro
    const GTK_TYPE_ICON_THEME                = (gtk_icon_theme_get_type())    ! macro
    const GDK_KEY_braille_dots_13678         = 0x10028e5    ! macro
    const GDK_KEY_braille_dots_268           =  0x10028a2    ! macro
    const G_TYPE_PARAM_POINTER               = (g_param_spec_types[17])    ! macro
    const GDK_KEY_oacute                     = 0x0f3    ! macro
    const GTK_THEMING_ENGINE_GET_CLASS       = (G_TYPE_INSTANCE_GET_CLASS((o),GTK_TYPE_THEMING_ENGINE,GtkThemingEngineClass))    ! macro
    const GTK_TOOLTIP                        = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_TOOLTIP,GtkTooltip))    ! macro
    const G_TYPE_RESOLVER_ERROR              = (g_resolver_error_get_type())    ! macro
    const GDK_KEY_dead_greek                 = 0xfe8c    ! macro
    const g_setenv                           =  g_setenv_utf8    ! macro
    const G_TYPE_GSTRING                     = (g_gstring_get_type())    ! macro
    const GTK_SCALE_BUTTON_GET_CLASS         = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_SCALE_BUTTON,GtkScaleButtonClass))    ! macro
    const GDK_KEY_Ungrab                     = 0x1008fe20    ! macro
    const GDK_KEY_doubledagger               =  0xaf2    ! macro
    const GTK_IS_ENTRY_BUFFER                = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_ENTRY_BUFFER))    ! macro
    const GTK_TYPE_FONT_CHOOSER_DIALOG       = (gtk_font_chooser_dialog_get_type())    ! macro
    const GTK_INFO_BAR                       = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_INFO_BAR,GtkInfoBar))    ! macro
    const G_BUFFERED_INPUT_STREAM_CLASS      = (G_TYPE_CHECK_CLASS_CAST((k),G_TYPE_BUFFERED_INPUT_STREAM,GBufferedInputStreamClass))    ! macro
    const GTK_TYPE_TOOLBAR_STYLE             = (gtk_toolbar_style_get_type())    ! macro
    const GTK_STYLE_CLASS_SCALE_HAS_MARKS_BELOW = "scale-has-marks-below"    ! macro
    const GTK_TOOL_ITEM_GROUP                = (G_TYPE_CHECK_INSTANCE_CAST(obj,GTK_TYPE_TOOL_ITEM_GROUP,GtkToolItemGroup))    ! macro
    const G_TYPE_DBUS_METHOD_INVOCATION      = (g_dbus_method_invocation_get_type())    ! macro
    const G_TLS_DATABASE_PURPOSE_AUTHENTICATE_CLIENT = "1.3.6.1.5.5.7.3.2"    ! macro
    const GDK_TYPE_BYTE_ORDER                = (gdk_byte_order_get_type())    ! macro
    const G_TYPE_SOCKET_FAMILY               = (g_socket_family_get_type())    ! macro
    const GTK_FONT_BUTTON_GET_CLASS          = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_FONT_BUTTON,GtkFontButtonClass))    ! macro
    const GDK_KEY_Hangul_Jeonja              = 0xff38    ! macro
    const G_DEFINE_DYNAMIC_TYPE_EXTENDED     =  static void type_name##_init(TypeName*self);static void type_name##_class_init(TypeName##Class*klass);static void type_name##_class_finalize(TypeName##Class*klass);static gpointer type_name##_parent_class=NULL;static GType type_name##_type_id=0;static void type_name##_class_intern_init(gpointer klass){type_name##_parent_class=g_type_class_peek_parent(klass);type_name##_class_init((TypeName##Class*)klass);}GType type_name##_get_type(void){return type_name##_type_id;}static void type_name##_register_type(GTypeModule*type_module){GType g_define_type_id G_GNUC_UNUSED;const GTypeInfo g_define_type_info={sizeof(TypeName##Class),(GBaseInitFunc)NULL,(GBaseFinalizeFunc)NULL,(GClassInitFunc)type_name##_class_intern_init,(GClassFinalizeFunc)type_name##_class_finalize,NULL,sizeof(TypeName),0,(GInstanceInitFunc)type_name##_init,NULL};type_name##_type_id=g_type_module_register_type(type_module,TYPE_PARENT,#TypeName,&g_define_type_info,(GTypeFlags)flags);g_define_type_id=type_name##_type_id;{CODE;}}    ! macro
    const GDK_KEY_Thai_yoying                = 0xdad    ! macro
    const GDK_KEY_Cyrillic_u_straight_bar    =  0x10004b1    ! macro
    const G_TYPE_PARAM_UINT64                = (g_param_spec_types[8])    ! macro
    const GDK_KEY_3270_KeyClick              = 0xfd11    ! macro
    const GTK_TYPE_STYLE                     = (gtk_style_get_type())    ! macro
    const G_TYPE_FILE_INFO                   = (g_file_info_get_type())    ! macro
    const GTK_TYPE_ENTRY_BUFFER              = (gtk_entry_buffer_get_type())    ! macro
    const g_test_quick                       = (g_test_config_vars->test_quick)    ! macro
    const cairo_inverse_transform_distance   = cairo_inverse_transform_distance_REPLACED_BY_cairo_device_to_user_distance    ! macro
    const GTK_PANED_GET_CLASS                = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_PANED,GtkPanedClass))    ! macro
    const GTK_STOCK_STRIKETHROUGH            = "gtk-strikethrough"    ! macro
    const G_TYPE_PASSWORD_SAVE               = (g_password_save_get_type())    ! macro
    const G_FILE_ATTRIBUTE_TIME_CHANGED      = "time::changed"    ! macro
    const G_TYPE_FILE_ATTRIBUTE_INFO_LIST    = (g_file_attribute_info_list_get_type())    ! macro
    const GTK_IS_VOLUME_BUTTON               = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_VOLUME_BUTTON))    ! macro
    const GTK_TYPE_CELL_EDITABLE             = (gtk_cell_editable_get_type())    ! macro
    const GDK_KEY_braille_dots_278           = 0x10028c2    ! macro
    const G_VALUE_HOLDS_LONG                 = (G_TYPE_CHECK_VALUE_TYPE((value),G_TYPE_LONG))    ! macro
    const GDK_TYPE_DRAG_PROTOCOL             = (gdk_drag_protocol_get_type())    ! macro
    const GTK_TYPE_EXPANDER_STYLE            = (gtk_expander_style_get_type())    ! macro
    const CAIRO_HAS_PDF_SURFACE              = 1    ! macro
    const GDK_KEY_Thai_maiyamok              =  0xde6    ! macro
    const ATK_IS_RELATION                    = (G_TYPE_CHECK_INSTANCE_TYPE((obj),ATK_TYPE_RELATION))    ! macro
    const GDK_KEY_kra                        = 0x3a2    ! macro
    const G_TYPE_RESERVED_USER_FIRST         = (49)    ! macro
    const GTK_WIDGET                         = (G_TYPE_CHECK_INSTANCE_CAST((widget),GTK_TYPE_WIDGET,GtkWidget))    ! macro
    const GTK_TOOL_ITEM                      = (G_TYPE_CHECK_INSTANCE_CAST((o),GTK_TYPE_TOOL_ITEM,GtkToolItem))    ! macro
    const g_warning                          = g_log(G_LOG_DOMAIN,G_LOG_LEVEL_WARNING,__VA_ARGS__)    ! macro
    const GDK_KEY_xabovedot                  = 0x1001e8b    ! macro
    const GDK_KEY_PowerOff                   =  0x1008ff2a    ! macro
    const GTK_STOCK_JUSTIFY_CENTER           = "gtk-justify-center"    ! macro
    const GTK_STYLE_PROPERTY_BORDER_RADIUS   = "border-radius"    ! macro
    const GTK_ACCEL_LABEL_GET_CLASS          = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_ACCEL_LABEL,GtkAccelLabelClass))    ! macro
    const G_PARAM_SPEC_FLOAT                 = (G_TYPE_CHECK_INSTANCE_CAST((pspec),G_TYPE_PARAM_FLOAT,GParamSpecFloat))    ! macro
    const g_ascii_isspace                    = ((g_ascii_table[(guchar)(c)]&G_ASCII_SPACE)!=0)    ! macro
    const GTK_HPANED_CLASS                   = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_HPANED,GtkHPanedClass))    ! macro
    const G_IS_VALUE                         = (G_TYPE_CHECK_VALUE(value))    ! macro
    const G_ZLIB_COMPRESSOR                  = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_ZLIB_COMPRESSOR,GZlibCompressor))    ! macro
    const GDK_KEY_Arabic_sheen               = 0x5d4    ! macro
    const G_TYPE_VARIANT_TYPE                = (g_variant_type_get_gtype())    ! macro
    const GDK_KEY_eogonek                    = 0x1ea    ! macro
    const GDK_KEY_Find                       =  0xff68    ! macro
    const GDK_KEY_Tools                      =  0x1008ff81    ! macro
    const GDK_KEY_tintegral                  =  0x100222d    ! macro
    const G_TYPE_TEST_DBUS_FLAGS             = (g_test_dbus_flags_get_type())    ! macro
    const G_TYPE_DATE_TIME                   = (g_date_time_get_type())    ! macro
    const GDK_KEY_3270_Quit                  = 0xfd09    ! macro
    const GTK_TYPE_SIZE_REQUEST_MODE         = (gtk_size_request_mode_get_type())    ! macro
    const g_string_sprintfa                  = g_string_append_printf    ! macro
    const G_TYPE_FUNDAMENTAL                 = (g_type_fundamental(type))    ! macro
    const GTK_MISC_CLASS                     = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_MISC,GtkMiscClass))    ! macro
    const G_TYPE_SOCKET_CLIENT               = (g_socket_client_get_type())    ! macro
    const GDK_KEY_yacute                     = 0x0fd    ! macro
    const G_FILE_ATTRIBUTE_STANDARD_ICON     = "standard::icon"    ! macro
    const g_clear_object                     = g_clear_pointer((object_ptr),g_object_unref)    ! macro
    const GDK_KEY_Kanji                      = 0xff21    ! macro
    const ATK_COMPONENT_GET_IFACE            = (G_TYPE_INSTANCE_GET_INTERFACE((obj),ATK_TYPE_COMPONENT,AtkComponentIface))    ! macro
    const G_SOCKET_CLASS                     = (G_TYPE_CHECK_CLASS_CAST((class),G_TYPE_SOCKET,GSocketClass))    ! macro
    const GTK_EDITABLE                       = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_EDITABLE,GtkEditable))    ! macro
    const G_SPAWN_EXIT_ERROR                 = g_spawn_exit_error_quark()    ! macro
    const GDK_KEY_AudioForward               = 0x1008ff97    ! macro
    const GUINT64_FROM_LE                    = (GUINT64_TO_LE(val))    ! macro
    const GTK_IM_CONTEXT_SIMPLE              = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_IM_CONTEXT_SIMPLE,GtkIMContextSimple))    ! macro
    const G_KEY_FILE_ERROR                   = g_key_file_error_quark()    ! macro
    const GTK_INVISIBLE_GET_CLASS            = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_INVISIBLE,GtkInvisibleClass))    ! macro
    const G_MENU_ATTRIBUTE_LABEL             = "label"    ! macro
    const G_VALUE_INIT                       = {0,{{0}}}    ! macro
    const G_VFS_CLASS                        = (G_TYPE_CHECK_CLASS_CAST((k),G_TYPE_VFS,GVfsClass))    ! macro
    const G_FILE_ATTRIBUTE_ACCESS_CAN_READ   = "access::can-read"    ! macro
    const GTK_IS_FONT_CHOOSER_WIDGET         = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_FONT_CHOOSER_WIDGET))    ! macro
    const GDK_KEY_KP_Equal                   = 0xffbd    ! macro
    const G_FILE_ATTRIBUTE_FILESYSTEM_USE_PREVIEW = "filesystem::use-preview"    ! macro
    const GTK_VSCROLLBAR_GET_CLASS           = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_VSCROLLBAR,GtkVScrollbarClass))    ! macro
    const GDK_KEY_dead_circumflex            = 0xfe52    ! macro
    const G_DBUS_OBJECT_SKELETON_GET_CLASS   = (G_TYPE_INSTANCE_GET_CLASS((o),G_TYPE_DBUS_OBJECT_SKELETON,GDBusObjectSkeletonClass))    ! macro
    const GDK_KEY_acircumflexbelowdot        = 0x1001ead    ! macro
    const GDK_KEY_dead_belowcomma            =  0xfe6e    ! macro
    const g_list_free1                       =  g_list_free_1    ! macro
    const ATK_TYPE_STREAMABLE_CONTENT        = (atk_streamable_content_get_type())    ! macro
    const GTK_TYPE_WIDGET_PATH               = (gtk_widget_path_get_type())    ! macro
    const GDK_KEY_WakeUp                     = 0x1008ff2b    ! macro
    const g_atomic_pointer_set               = (g_atomic_pointer_set((atomic),(gpointer)(newval)))    ! macro
    const GTK_IS_VSCROLLBAR_CLASS            = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_VSCROLLBAR))    ! macro
    const GTK_ABOUT_DIALOG_GET_CLASS         = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_ABOUT_DIALOG,GtkAboutDialogClass))    ! macro
    const GTK_OVERLAY_CLASS                  = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_OVERLAY,GtkOverlayClass))    ! macro
    const G_TYPE_TLS_CLIENT_CONNECTION       = (g_tls_client_connection_get_type())    ! macro
    const GTK_STYLE_CLASS_LEVEL_BAR          = "level-bar"    ! macro
    const G_TYPE_FILE_ATTRIBUTE_INFO_FLAGS   = (g_file_attribute_info_flags_get_type())    ! macro
    const GDK_KEY_Hangul_A                   = 0xebf    ! macro
    const GTK_TYPE_FONT_CHOOSER_WIDGET       = (gtk_font_chooser_widget_get_type())    ! macro
    const GTK_IS_RECENT_CHOOSER_DIALOG_CLASS = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_RECENT_CHOOSER_DIALOG))    ! macro
    const g_node_insert_data_after           = g_node_insert_after((parent),(sibling),g_node_new(data))    ! macro
    const GTK_FONT_CHOOSER_WIDGET_GET_CLASS  = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_FONT_CHOOSER_WIDGET,GtkFontChooserWidgetClass))    ! macro
    const G_IS_OBJECT_CLASS                  = (G_TYPE_CHECK_CLASS_TYPE((class),G_TYPE_OBJECT))    ! macro
    const PANGO_TYPE_CONTEXT                 = (pango_context_get_type())    ! macro
    const GSIZE_FROM_LE                      = (GSIZE_TO_LE(val))    ! macro
    const GDK_KEY_Hangul_E                   = 0xec4    ! macro
    const GTK_ACTIONABLE_GET_IFACE           = (G_TYPE_INSTANCE_GET_INTERFACE((inst),GTK_TYPE_ACTIONABLE,GtkActionableInterface))    ! macro
    const GTK_FONT_SELECTION_DIALOG_GET_CLASS = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_FONT_SELECTION_DIALOG,GtkFontSelectionDialogClass))    ! macro
    const GDK_KEY_Greek_horizbar             = 0x7af    ! macro
    const GTK_TYPE_INFO_BAR                  = (gtk_info_bar_get_type())    ! macro
    const G_IS_PARAM_SPEC_UNICHAR            = (G_TYPE_CHECK_INSTANCE_TYPE((pspec),G_TYPE_PARAM_UNICHAR))    ! macro
    const g_test_quiet                       = (g_test_config_vars->test_quiet)    ! macro
    const GDK_KEY_c_h                        = 0xfea3    ! macro
    const G_TYPE_IS_ASYNC_INITABLE           = (g_type_is_a((type),G_TYPE_ASYNC_INITABLE))    ! macro
    const GDK_KEY_Hangul_I                   = 0xed3    ! macro
    const ATK_DEFINE_ABSTRACT_TYPE           =  ATK_DEFINE_TYPE_EXTENDED(TN,t_n,T_P,G_TYPE_FLAG_ABSTRACT,{})    ! macro
    const ATK_IS_NO_OP_OBJECT_CLASS          = (G_TYPE_CHECK_CLASS_TYPE((klass),ATK_TYPE_NO_OP_OBJECT))    ! macro
    const cairo_current_operator             = cairo_current_operator_REPLACED_BY_cairo_get_operator    ! macro
    const G_IS_DATA_OUTPUT_STREAM            = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_DATA_OUTPUT_STREAM))    ! macro
    const G_CHARSET_CONVERTER_GET_CLASS      = (G_TYPE_INSTANCE_GET_CLASS((o),G_TYPE_CHARSET_CONVERTER,GCharsetConverterClass))    ! macro
    const GTK_SPINNER                        = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_SPINNER,GtkSpinner))    ! macro
    const GTK_IS_BIN_CLASS                   = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_BIN))    ! macro
    const GDK_KEY_Hangul_PreviousCandidate   = 0xff3e    ! macro
    const ATK_IS_OBJECT_FACTORY              = (G_TYPE_CHECK_INSTANCE_TYPE((obj),ATK_TYPE_OBJECT_FACTORY))    ! macro
    const GDK_KEY_Armenian_exclam            = 0x100055c    ! macro
    const cairo_set_target_win32             =  cairo_set_target_win32_DEPRECATED_BY_cairo_win32_surface_create    ! macro
    const PANGO_LAYOUT                       = (G_TYPE_CHECK_INSTANCE_CAST((object),PANGO_TYPE_LAYOUT,PangoLayout))    ! macro
    const PANGO_GRAVITY_IS_VERTICAL          = ((gravity)==PANGO_GRAVITY_EAST||(gravity)==PANGO_GRAVITY_WEST)    ! macro
    const GTK_HSCALE_CLASS                   = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_HSCALE,GtkHScaleClass))    ! macro
    const GDK_KEY_Hangul_O                   = 0xec7    ! macro
    const GDK_KEY_rightpointer               =  0xaeb    ! macro
    const g_warn_if_fail                     =  do{if G_LIKELY(expr);else g_warn_message(G_LOG_DOMAIN,__FILE__,__LINE__,G_STRFUNC,#expr);}while(0)    ! macro
    const GDK_KEY_Hangul_J_RieulSios         = 0xedf    ! macro
    const G_TLS_CERTIFICATE_GET_CLASS        = (G_TYPE_INSTANCE_GET_CLASS((inst),G_TYPE_TLS_CERTIFICATE,GTlsCertificateClass))    ! macro
    const GTK_TOOLBAR                        = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_TOOLBAR,GtkToolbar))    ! macro
    const G_FILE_IO_STREAM_CLASS             = (G_TYPE_CHECK_CLASS_CAST((k),G_TYPE_FILE_IO_STREAM,GFileIOStreamClass))    ! macro
    const ATK_TYPE_HYPERTEXT                 = (atk_hypertext_get_type())    ! macro
    const GTK_SCALE                          = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_SCALE,GtkScale))    ! macro
    const G_TYPE_INITABLE                    = (g_initable_get_type())    ! macro
    const GDK_KEY_ZoomIn                     = 0x1008ff8b    ! macro
    const GDK_KEY_3270_BackTab               =  0xfd05    ! macro
    const GDK_KEY_Hangul_U                   =  0xecc    ! macro
    const G_APP_LAUNCH_CONTEXT               = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_APP_LAUNCH_CONTEXT,GAppLaunchContext))    ! macro
    const G_NETWORK_ADDRESS_CLASS            = (G_TYPE_CHECK_CLASS_CAST((k),G_TYPE_NETWORK_ADDRESS,GNetworkAddressClass))    ! macro
    const GTK_STOCK_PRINT                    = "gtk-print"    ! macro
    const g_atomic_int_or                    = (g_atomic_int_or((guint*)(atomic),(val)))    ! macro
    const ATK_TYPE_TEXT                      = (atk_text_get_type())    ! macro
    const GTK_ACCEL_MAP_CLASS                = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_ACCEL_MAP,GtkAccelMapClass))    ! macro
    const G_TYPE_TLS_INTERACTION_RESULT      = (g_tls_interaction_result_get_type())    ! macro
    const GDK_KEY_ISO_Prev_Group             = 0xfe0a    ! macro
    const GDK_KEY_Ydiaeresis                 =  0x13be    ! macro
    const GDK_KEY_KP_Page_Down               =  0xff9b    ! macro
    const GDK_DEVICE                         = (G_TYPE_CHECK_INSTANCE_CAST((o),GDK_TYPE_DEVICE,GdkDevice))    ! macro
    const cairo_set_target_surface           = cairo_set_target_surface_DEPRECATED_BY_cairo_create    ! macro
    const GDK_KEY_Armenian_KEN               =  0x100053f    ! macro
    const GDK_KEY_braille_dots_45678         =  0x10028f8    ! macro
    const GTK_IS_MENU_BUTTON                 = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_MENU_BUTTON))    ! macro
    const GDK_KEY_section                    = 0x0a7    ! macro
    const G_MAXINT                           =  INT_MAX    ! macro
    const GDK_KEY_Greek_CHI                  =  0x7d7    ! macro
    const G_FILE_ATTRIBUTE_UNIX_DEVICE       = "unix::device"    ! macro
    const GDK_KEY_Adiaeresis                 = 0x0c4    ! macro
    const GTK_INFO_BAR_CLASS                 = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_INFO_BAR,GtkInfoBarClass))    ! macro
    const G_TYPE_PARAM_BOXED                 = (g_param_spec_types[16])    ! macro
    const GDK_KEY_Arabic_hamzaunderalef      = 0x5c5    ! macro
    const G_IMPLEMENT_INTERFACE              = {const GInterfaceInfo g_implement_interface_info={(GInterfaceInitFunc)iface_init,NULL,NULL};g_type_add_interface_static(g_define_type_id,TYPE_IFACE,&g_implement_interface_info);}    ! macro
    const GDK_KEY_Sinh_jnya                  = 0x1000da5    ! macro
    const GDK_KEY_kana_switch                =  0xff7e    ! macro
    const GDK_KEY_Georgian_zen               =  0x10010d6    ! macro
    const GDK_TYPE_RGBA                      = (gdk_rgba_get_type())    ! macro
    const GDK_KEY_Etilde                     = 0x1001ebc    ! macro
    const GTK_ENTRY_BUFFER                   = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_ENTRY_BUFFER,GtkEntryBuffer))    ! macro
    const ATK_GOBJECT_ACCESSIBLE             = (G_TYPE_CHECK_INSTANCE_CAST((obj),ATK_TYPE_GOBJECT_ACCESSIBLE,AtkGObjectAccessible))    ! macro
    const GTK_STYLE_CLASS_WARNING            = "warning"    ! macro
    const GTK_STOCK_DIALOG_ERROR             = "gtk-dialog-error"    ! macro
    const GDK_KEY_uhornhook                  = 0x1001eed    ! macro
    const G_PRIORITY_HIGH_IDLE               =  100    ! macro
    const G_BUFFERED_OUTPUT_STREAM           = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_BUFFERED_OUTPUT_STREAM,GBufferedOutputStream))    ! macro
    const G_KEY_FILE_DESKTOP_KEY_NO_DISPLAY  = "NoDisplay"    ! macro
    const GTK_TYPE_EDITABLE                  = (gtk_editable_get_type())    ! macro
    const GDK_KEY_Hangul_Kiyeog              = 0xea1    ! macro
    const G_SETTINGS_CLASS                   = (G_TYPE_CHECK_CLASS_CAST((class),G_TYPE_SETTINGS,GSettingsClass))    ! macro
    const G_REGEX_ERROR                      = g_regex_error_quark()    ! macro
    const GTK_RECENT_CHOOSER_DIALOG_CLASS    = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_RECENT_CHOOSER_DIALOG,GtkRecentChooserDialogClass))    ! macro
    const g_signal_connect_after             = g_signal_connect_data((instance),(detailed_signal),(c_handler),(data),NULL,G_CONNECT_AFTER)    ! macro
    const GDK_KEY_ohorntilde                 = 0x1001ee1    ! macro
    const GDK_KEY_union                      =  0x8dd    ! macro
    const GDK_KEY_Hangul_NieunJieuj          =  0xea5    ! macro
    const GTK_TYPE_APPLICATION               = (gtk_application_get_type())    ! macro
    const GDK_KEY_Gcedilla                   = 0x3ab    ! macro
    const G_PARAM_SPEC_DOUBLE                = (G_TYPE_CHECK_INSTANCE_CAST((pspec),G_TYPE_PARAM_DOUBLE,GParamSpecDouble))    ! macro
    const GTK_IS_ASSISTANT_CLASS             = (G_TYPE_CHECK_CLASS_TYPE((c),GTK_TYPE_ASSISTANT))    ! macro
    const GDK_KEY_dstroke                    = 0x1f0    ! macro
    const G_TYPE_PARAM_UNICHAR               = (g_param_spec_types[9])    ! macro
    const GTK_IS_CALENDAR_CLASS              = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_CALENDAR))    ! macro
    const GTK_PRIORITY_RESIZE                = (G_PRIORITY_HIGH_IDLE+10)    ! macro
    const cairo_set_target_drawable          = cairo_set_target_drawable_DEPRECATED_BY_cairo_xlib_surface_create    ! macro
    const GDK_TYPE_PIXBUF_ANIMATION_ITER     = (gdk_pixbuf_animation_iter_get_type())    ! macro
    const GTK_STOCK_MEDIA_PAUSE              = "gtk-media-pause"    ! macro
    const GDK_KEY_Cyrillic_CHE_vertstroke    = 0x10004b8    ! macro
    const GTK_IS_DIALOG_CLASS                = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_DIALOG))    ! macro
    const G_POLLABLE_INPUT_STREAM_GET_INTERFACE = (G_TYPE_INSTANCE_GET_INTERFACE((obj),G_TYPE_POLLABLE_INPUT_STREAM,GPollableInputStreamInterface))    ! macro
    const GTK_TYPE_THEMING_ENGINE            = (gtk_theming_engine_get_type())    ! macro
    const GDK_DEPRECATED_IN_3_0_FOR          = GDK_DEPRECATED_FOR(f)    ! macro
    const GDK_DISPLAY_OBJECT                 = GDK_DISPLAY(object)    ! macro
    const G_TYPE_NETWORK_SERVICE             = (g_network_service_get_type())    ! macro
    const g_slice_new                        = ((type*)g_slice_alloc(sizeof(type)))    ! macro
    const GTK_TOOLBAR_CLASS                  = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_TOOLBAR,GtkToolbarClass))    ! macro
    const g_node_append_data                 = g_node_insert_before((parent),NULL,g_node_new(data))    ! macro
    const GDK_KEY_quoteleft                  = 0x060    ! macro
    const GTK_IS_MISC_CLASS                  = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_MISC))    ! macro
    const ATK_COMPONENT                      = G_TYPE_CHECK_INSTANCE_CAST((obj),ATK_TYPE_COMPONENT,AtkComponent)    ! macro
    const GTK_COMBO_BOX_CLASS                = (G_TYPE_CHECK_CLASS_CAST((vtable),GTK_TYPE_COMBO_BOX,GtkComboBoxClass))    ! macro
    const GDK_KEY_hebrew_taf                 = 0xcfa    ! macro
    const GDK_KEY_braille_dots_145678        =  0x10028f9    ! macro
    const PANGO_CONTEXT_GET_CLASS            = (G_TYPE_INSTANCE_GET_CLASS((obj),PANGO_TYPE_CONTEXT,PangoContextClass))    ! macro
    const GDK_KEY_singlelowquotemark         = 0xafd    ! macro
    const GTK_TEXT_MARK                      = (G_TYPE_CHECK_INSTANCE_CAST((object),GTK_TYPE_TEXT_MARK,GtkTextMark))    ! macro
    const GDK_KEY_ISO_First_Group            = 0xfe0c    ! macro
    const g_date_julian                      =  g_date_get_julian    ! macro
    const GDK_KEY_ecircumflexhook            =  0x1001ec3    ! macro
    const G_MENU_MODEL_GET_CLASS             = (G_TYPE_INSTANCE_GET_CLASS((inst),G_TYPE_MENU_MODEL,GMenuModelClass))    ! macro
    const GTK_IS_SETTINGS_CLASS              = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_SETTINGS))    ! macro
    const GDK_TYPE_PROP_MODE                 = (gdk_prop_mode_get_type())    ! macro
    const G_INLINE_FUNC                      = static inline    ! macro
    const cairo_set_rgb_color                =  cairo_set_rgb_color_REPLACED_BY_cairo_set_source_rgb    ! macro
    const G_IS_SOCKET_ADDRESS_ENUMERATOR     = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_SOCKET_ADDRESS_ENUMERATOR))    ! macro
    const GDK_KEY_Serbian_nje                = 0x6aa    ! macro
    const GDK_KEY_Georgian_jhan              =  0x10010ef    ! macro
    const g_assert_cmphex                    =  do{guint64 __n1=(n1),__n2=(n2);if(__n1 cmp __n2);else g_assertion_message_cmpnum(G_LOG_DOMAIN,__FILE__,__LINE__,G_STRFUNC,#n1" "#cmp" "#n2,__n1,#cmp,__n2,'x');}while(0)    ! macro
    const GTK_MENU_ITEM_CLASS                = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_MENU_ITEM,GtkMenuItemClass))    ! macro
    const GDK_KEY_Armenian_KHE               = 0x100053d    ! macro
    const GDK_KEY_Otilde                     =  0x0d5    ! macro
    const G_SOCKET_SERVICE_CLASS             = (G_TYPE_CHECK_CLASS_CAST((class),G_TYPE_SOCKET_SERVICE,GSocketServiceClass))    ! macro
    const GTK_CELL_AREA_CONTEXT_CLASS        = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_CELL_AREA_CONTEXT,GtkCellAreaContextClass))    ! macro
    const GTK_TYPE_RECENT_CHOOSER            = (gtk_recent_chooser_get_type())    ! macro
    const GDK_KEY_Georgian_qar               = 0x10010e7    ! macro
    const G_TYPE_SIMPLE_ASYNC_RESULT         = (g_simple_async_result_get_type())    ! macro
    const GDK_KEY_hebrew_teth                = 0xce8    ! macro
    const GTK_IS_INFO_BAR                    = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_INFO_BAR))    ! macro
    const GTK_STOCK_NO                       = "gtk-no"    ! macro
    const GDK_KEY_Thai_fofa                  = 0xdbd    ! macro
    const G_VALUE_TYPE_NAME                  = (g_type_name(G_VALUE_TYPE(value)))    ! macro
    const GDK_KEY_Armenian_VYUN              = 0x1000552    ! macro
    const GDK_KEY_ohornhook                  =  0x1001edf    ! macro
    const GDK_KEY_Egrave                     =  0x0c8    ! macro
    const G_GOFFSET_FORMAT                   =  G_GINT64_FORMAT    ! macro
    const GSIZE_TO_POINTER                   = ((gpointer)(gsize)(s))    ! macro
    const GDK_KEY_hcircumflex                = 0x2b6    ! macro
    const GTK_TREE_MODEL_FILTER_GET_CLASS    = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_TREE_MODEL_FILTER,GtkTreeModelFilterClass))    ! macro
    const G_TYPE_PARAM_FLOAT                 = (g_param_spec_types[12])    ! macro
    const GTK_BUTTON_BOX_CLASS               = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_BUTTON_BOX,GtkButtonBoxClass))    ! macro
    const GTK_STYLE_PROVIDER_PRIORITY_THEME  = 200    ! macro
    const GDK_KEY_Ecircumflexbelowdot        =  0x1001ec6    ! macro
    const GDK_KEY_hebrew_taw                 =  0xcfa    ! macro
    const GSSIZE_FROM_LE                     = (GSSIZE_TO_LE(val))    ! macro
    const GTK_IS_TREE_STORE_CLASS            = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_TREE_STORE))    ! macro
    const GTK_TYPE_ARROW                     = (gtk_arrow_get_type())    ! macro
    const GTK_PRINT_SETTINGS_PAGE_SET        = "page-set"    ! macro
    const cairo_get_path                     = cairo_get_path_DEPRECATED_BY_cairo_copy_path    ! macro
    const GDK_KEY_breve                      =  0x1a2    ! macro
    const GDK_KEY_ohorngrave                 =  0x1001edd    ! macro
    const GDK_KEY_ccedilla                   =  0x0e7    ! macro
    const G_DBUS_OBJECT_MANAGER_CLIENT_GET_CLASS = (G_TYPE_INSTANCE_GET_CLASS((o),G_TYPE_DBUS_OBJECT_MANAGER_CLIENT,GDBusObjectManagerClientClass))    ! macro
    const GTK_IS_LIST_STORE_CLASS            = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_LIST_STORE))    ! macro
    const G_KEY_FILE_DESKTOP_KEY_TERMINAL    = "Terminal"    ! macro
    const GTK_STOCK_OK                       = "gtk-ok"    ! macro
    const GDK_KEY_greater                    = 0x03e    ! macro
    const GTK_ACCEL_MAP                      = (G_TYPE_CHECK_INSTANCE_CAST((accel_map),GTK_TYPE_ACCEL_MAP,GtkAccelMap))    ! macro
    const GDK_KEY_Phone                      = 0x1008ff6e    ! macro
    const GTK_IS_TABLE                       = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_TABLE))    ! macro
    const GDK_KEY_Thai_choching              = 0xda9    ! macro
    const GTK_TYPE_VOLUME_BUTTON             = (gtk_volume_button_get_type())    ! macro
    const GDK_KEY_fabovedot                  = 0x1001e1f    ! macro
    const cairo_set_target_xcb               =  cairo_set_target_xcb_DEPRECATED_BY_cairo_xcb_surface_create    ! macro
    const G_FLAGS_CLASS                      = (G_TYPE_CHECK_CLASS_CAST((class),G_TYPE_FLAGS,GFlagsClass))    ! macro
    const g_module_name                      = g_module_name_utf8    ! macro
    const GTK_STYLE_CLASS_QUESTION           = "question"    ! macro
    const GDK_TYPE_VISUAL_TYPE               = (gdk_visual_type_get_type())    ! macro
    const GDK_KEY_minus                      = 0x02d    ! macro
    const G_PARAM_USER_SHIFT                 = (8)    ! macro
    const GDK_KEY_downtack                   = 0xbc2    ! macro
    const g_dataset_get_data                 = (g_dataset_id_get_data((l),g_quark_try_string(k)))    ! macro
    const g_assert                           = do{if G_LIKELY(expr);else g_assertion_message_expr(G_LOG_DOMAIN,__FILE__,__LINE__,G_STRFUNC,#expr);}while(0)    ! macro
    const ATK_STREAMABLE_CONTENT             = G_TYPE_CHECK_INSTANCE_CAST((obj),ATK_TYPE_STREAMABLE_CONTENT,AtkStreamableContent)    ! macro
    const GDK_KEY_HomePage                   = 0x1008ff18    ! macro
    const G_IS_DBUS_OBJECT_MANAGER_SERVER_CLASS = (G_TYPE_CHECK_CLASS_TYPE((k),G_TYPE_DBUS_OBJECT_MANAGER_SERVER))    ! macro
    const GDK_KEY_braille_dots_12345         = 0x100281f    ! macro
    const GTK_TEXT_BUFFER_GET_CLASS          = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_TEXT_BUFFER,GtkTextBufferClass))    ! macro
    const gtk_interface_age                  = gtk_get_interface_age()    ! macro
    const GDK_KEY_braille_dots_12346         = 0x100282f    ! macro
    const g_node_prev_sibling                = ((node)?((GNode*)(node))->prev:NULL)    ! macro
    const ATK_SOCKET_GET_CLASS               = (G_TYPE_INSTANCE_GET_CLASS((obj),ATK_TYPE_SOCKET,AtkSocketClass))    ! macro
    const GDK_KEY_Pointer_UpLeft             = 0xfee4    ! macro
    const GDK_KEY_braille_dots_12347         =  0x100284f    ! macro
    const GLIB_SYSDEF_POLLOUT                = =4    ! macro
    const G_TYPE_DBUS_OBJECT_MANAGER_SERVER  = (g_dbus_object_manager_server_get_type())    ! macro
    const GDK_KEY_braille_dots_12348         = 0x100288f    ! macro
    const G_TYPE_MODULE_GET_CLASS            = (G_TYPE_INSTANCE_GET_CLASS((module),G_TYPE_TYPE_MODULE,GTypeModuleClass))    ! macro
    const GTK_SCROLLBAR_CLASS                = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_SCROLLBAR,GtkScrollbarClass))    ! macro
    const GDK_KEY_ScrollClick                = 0x1008ff7a    ! macro
    const GDK_KEY_Ytilde                     =  0x1001ef8    ! macro
    const GDK_KEY_Thai_nonen                 =  0xdb3    ! macro
    const ATK_IS_NO_OP_OBJECT                = (G_TYPE_CHECK_INSTANCE_TYPE((obj),ATK_TYPE_NO_OP_OBJECT))    ! macro
    const GDK_KEY_Sinh_pha                   = 0x1000db5    ! macro
    const GTK_IS_EDITABLE                    = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_EDITABLE))    ! macro
    const GDK_KEY_Greek_phi                  = 0x7f6    ! macro
    const GDK_KEY_Open                       =  0x1008ff6b    ! macro
    const G_VALUE_HOLDS_UINT64               = (G_TYPE_CHECK_VALUE_TYPE((value),G_TYPE_UINT64))    ! macro
    const GDK_KEY_braille_dots_1             = 0x1002801    ! macro
    const GDK_KEY_braille_dots_2             =  0x1002802    ! macro
    const GTK_IS_COLOR_SELECTION_DIALOG      = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_COLOR_SELECTION_DIALOG))    ! macro
    const GDK_KEY_Ograve                     = 0x0d2    ! macro
    const GDK_KEY_braille_dots_3             =  0x1002804    ! macro
    const GTK_IS_CELL_RENDERER               = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_CELL_RENDERER))    ! macro
    const GDK_KEY_braille_dots_4             = 0x1002808    ! macro
    const GTK_IS_APP_CHOOSER_WIDGET_CLASS    = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_APP_CHOOSER_WIDGET))    ! macro
    const GDK_KEY_underbar                   = 0xbc6    ! macro
    const GTK_STYLE_CLASS_CALENDAR           = "calendar"    ! macro
    const GDK_KEY_braille_dots_5             = 0x1002810    ! macro
    const GTK_IS_ICON_VIEW_CLASS             = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_ICON_VIEW))    ! macro
    const GDK_KEY_Arabic_sad                 = 0x5d5    ! macro
    const GDK_KEY_Page_Up                    =  0xff55    ! macro
    const GDK_KEY_braille_dots_6             =  0x1002820    ! macro
    const GDK_KEY_braille_dots_12356         =  0x1002837    ! macro
    const GDK_KEY_overline                   =  0x47e    ! macro
    const GDK_KEY_braille_dots_7             =  0x1002840    ! macro
    const GDK_KEY_hexagram                   =  0xada    ! macro
    const GDK_KEY_braille_dots_12357         =  0x1002857    ! macro
    const GDK_KEY_braille_dots_8             =  0x1002880    ! macro
    const GDK_KEY_braille_dots_12358         =  0x1002897    ! macro
    const G_TYPE_SOCKET_TYPE                 = (g_socket_type_get_type())    ! macro
    const _G_TYPE_IGC                        = ((ct*)(((GTypeInstance*)ip)->g_class))    ! macro
    const G_DBUS_OBJECT_GET_IFACE            = (G_TYPE_INSTANCE_GET_INTERFACE((o),G_TYPE_DBUS_OBJECT,GDBusObjectIface))    ! macro
    const G_TYPE_FILE_MONITOR_EVENT          = (g_file_monitor_event_get_type())    ! macro
    const GDK_KEY_Arabic_ha                  = 0x5e7    ! macro
    const GTK_HBOX_CLASS                     = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_HBOX,GtkHBoxClass))    ! macro
    const GTK_CELL_AREA_BOX_CLASS            = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_CELL_AREA_BOX,GtkCellAreaBoxClass))    ! macro
    const GDK_KEY_rightmiddlecurlybrace      = 0x8b0    ! macro
    const GTK_ACCESSIBLE_GET_CLASS           = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_ACCESSIBLE,GtkAccessibleClass))    ! macro
    const GDK_KEY_Macedonia_gje              = 0x6a2    ! macro
    const PANGO_TYPE_TAB_ARRAY               = (pango_tab_array_get_type())    ! macro
    const G_TYPE_INVALID                     = G_TYPE_MAKE_FUNDAMENTAL(0)    ! macro
    const GDK_KEY_dead_abovereversedcomma    = 0xfe65    ! macro
    const G_DBUS_PROXY                       = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_DBUS_PROXY,GDBusProxy))    ! macro
    const GTK_IS_OFFSCREEN_WINDOW_CLASS      = (G_TYPE_CHECK_CLASS_TYPE((k),GTK_TYPE_OFFSCREEN_WINDOW))    ! macro
    const _G_TYPE_IGI                        = ((ct*)g_type_interface_peek(((GTypeInstance*)ip)->g_class,gt))    ! macro
    const G_CREDENTIALS                      = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_CREDENTIALS,GCredentials))    ! macro
    const GDK_KEY_prolongedsound             = 0x4b0    ! macro
    const GTK_STYLE_PROPERTY_BORDER_STYLE    = "border-style"    ! macro
    const GDK_KEY_musicalflat                = 0xaf6    ! macro
    const GTK_FILE_FILTER                    = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_FILE_FILTER,GtkFileFilter))    ! macro
    const G_TYPE_DBUS_PROXY_FLAGS            = (g_dbus_proxy_flags_get_type())    ! macro
    const GDK_KEY_ocircumflexacute           = 0x1001ed1    ! macro
    const GDK_KEY_Greek_EPSILON              =  0x7c5    ! macro
    const GDK_KEY_Arabic_zain                =  0x5d2    ! macro
    const GTK_TYPE_SEPARATOR                 = (gtk_separator_get_type())    ! macro
    const CAIRO_VERSION_STRINGIZE_           = #major"."#minor"."#micro    ! macro
    const GDK_KEY_Armenian_BEN               =  0x1000532    ! macro
    const GDK_KEY_Pointer_Button1            =  0xfee9    ! macro
    const G_TYPE_ICON                        = (g_icon_get_type())    ! macro
    const GDK_KEY_diamond                    = 0xaed    ! macro
    const GDK_KEY_intersection               =  0x8dc    ! macro
    const GTK_LEVEL_BAR                      = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_LEVEL_BAR,GtkLevelBar))    ! macro
    const GDK_KEY_Return                     = 0xff0d    ! macro
    const GDK_KEY_Pointer_Button2            =  0xfeea    ! macro
    const G_STATIC_ASSERT_EXPR               = ((void)sizeof(char[(expr)?1:-1]))    ! macro
    const GDK_KEY_dead_belowbreve            = 0xfe6b    ! macro
    const GLIB_DEPRECATED_IN_2_26_FOR        =  GLIB_DEPRECATED_FOR(f)    ! macro
    const GDK_KEY_Zenkaku_Hankaku            = 0xff2a    ! macro
    const GTK_RANGE_CLASS                    = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_RANGE,GtkRangeClass))    ! macro
    const GTK_DIALOG_CLASS                   = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_DIALOG,GtkDialogClass))    ! macro
    const GDK_KEY_Pointer_Button3            = 0xfeeb    ! macro
    const GDK_KEY_Hangul_J_Nieun             =  0xed7    ! macro
    const G_IS_TYPE_MODULE_CLASS             = (G_TYPE_CHECK_CLASS_TYPE((class),G_TYPE_TYPE_MODULE))    ! macro
    const G_VALUE_HOLDS_FLAGS                = (G_TYPE_CHECK_VALUE_TYPE((value),G_TYPE_FLAGS))    ! macro
    const GDK_KEY_variation                  = 0x8c1    ! macro
    const GDK_KEY_Pointer_Button4            =  0xfeec    ! macro
    const GDK_KEY_braille_dots_12367         =  0x1002867    ! macro
    const G_TYPE_SOCKET_ADDRESS_ENUMERATOR   = (g_socket_address_enumerator_get_type())    ! macro
    const GDK_KEY_3270_Copy                  = 0xfd15    ! macro
    const GDK_KEY_Pointer_Button5            =  0xfeed    ! macro
    const GDK_KEY_ISO_Discontinuous_Underline =  0xfe31    ! macro
    const GDK_KEY_braille_dots_12368         =  0x10028a7    ! macro
    const GUINT32_TO_BE                      = (GUINT32_SWAP_LE_BE(val))    ! macro
    const pango_language_to_string           = ((const char*)language)    ! macro
    const PANGO_VERSION_MINOR                = 30    ! macro
    const GTK_IS_DRAWING_AREA                = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_DRAWING_AREA))    ! macro
    const G_TLS_FILE_DATABASE_GET_INTERFACE  = (G_TYPE_INSTANCE_GET_INTERFACE((inst),G_TYPE_TLS_FILE_DATABASE,GTlsFileDatabaseInterface))    ! macro
    const G_TYPE_SOCKET_CONTROL_MESSAGE      = (g_socket_control_message_get_type())    ! macro
    const GDK_KEY_Armenian_dza               = 0x1000571    ! macro
    const GTK_STYLE_CONTEXT_CLASS            = (G_TYPE_CHECK_CLASS_CAST((c),GTK_TYPE_STYLE_CONTEXT,GtkStyleContextClass))    ! macro
    const GDK_SELECTION_CLIPBOARD            = _GDK_MAKE_ATOM(69)    ! macro
    const GDK_TYPE_WM_DECORATION             = (gdk_wm_decoration_get_type())    ! macro
    const G_TYPE_TLS_CONNECTION              = (g_tls_connection_get_type())    ! macro
    const G_APP_LAUNCH_CONTEXT_CLASS         = (G_TYPE_CHECK_CLASS_CAST((k),G_TYPE_APP_LAUNCH_CONTEXT,GAppLaunchContextClass))    ! macro
    const GDK_IS_DEVICE                      = (G_TYPE_CHECK_INSTANCE_TYPE((o),GDK_TYPE_DEVICE))    ! macro
    const GDK_KEY_Cyrillic_U_straight        = 0x10004ae    ! macro
    const GDK_KEY_Hangul_RieulSios           =  0xead    ! macro
    const GTK_STOCK_HELP                     = "gtk-help"    ! macro
    const _G_NEW                             = ((struct_type*)g_##func##_n((n_structs),sizeof(struct_type)))    ! macro
    const GDK_KEY_Arabic_rreh                = 0x1000691    ! macro
    const GTK_IS_APPLICATION_WINDOW          = (G_TYPE_CHECK_INSTANCE_TYPE((inst),GTK_TYPE_APPLICATION_WINDOW))    ! macro
    const GTK_TYPE_DRAWING_AREA              = (gtk_drawing_area_get_type())    ! macro
    const GDK_KEY_hebrew_tet                 = 0xce8    ! macro
    const GDK_KEY_Ygrave                     =  0x1001ef2    ! macro
    const GTK_VSCALE                         = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_VSCALE,GtkVScale))    ! macro
    const GDK_KEY_rightdoublequotemark       = 0xad3    ! macro
    const G_RESOLVER                         = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_RESOLVER,GResolver))    ! macro
    const GTK_IS_HPANED                      = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_HPANED))    ! macro
    const G_QUEUE_INIT                       = {NULL,NULL,0}    ! macro
    const GTK_TYPE_MENU_ITEM                 = (gtk_menu_item_get_type())    ! macro
    const ATK_TYPE_RECTANGLE                 = (atk_rectangle_get_type())    ! macro
    const G_STR_DELIMITERS                   = "_-|> <."    ! macro
    const GDK_KEY_Armenian_TSA               = 0x100053e    ! macro
    const GTK_TREE_STORE_GET_CLASS           = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_TREE_STORE,GtkTreeStoreClass))    ! macro
    const GDK_KEY_ScreenSaver                = 0x1008ff2d    ! macro
    const GDK_KEY_braille_dots_12378         =  0x10028c7    ! macro
    const G_CONVERTER_INPUT_STREAM           = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_CONVERTER_INPUT_STREAM,GConverterInputStream))    ! macro
    const GTK_TYPE_RESPONSE_TYPE             = (gtk_response_type_get_type())    ! macro
    const PANGO_RBEARING                     = ((rect).x+(rect).width)    ! macro
    const G_ZLIB_COMPRESSOR_GET_CLASS        = (G_TYPE_INSTANCE_GET_CLASS((o),G_TYPE_ZLIB_COMPRESSOR,GZlibCompressorClass))    ! macro
    const GDK_KEY_Hcircumflex                = 0x2a6    ! macro
    const GTK_TYPE_LIST_STORE                = (gtk_list_store_get_type())    ! macro
    const GDK_KEY_LiraSign                   = 0x10020a4    ! macro
    const GUINT64_TO_BE                      = (GUINT64_SWAP_LE_BE(val))    ! macro
    const GDK_KEY_braille_dots_35678         = 0x10028f4    ! macro
    const GTK_IS_TOGGLE_BUTTON               = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_TOGGLE_BUTTON))    ! macro
    const GDK_KEY_Georgian_hae               = 0x10010f0    ! macro
    const G_DBUS_INTERFACE_SKELETON_GET_CLASS = (G_TYPE_INSTANCE_GET_CLASS((o),G_TYPE_DBUS_INTERFACE_SKELETON,GDBusInterfaceSkeletonClass))    ! macro
    const G_REMOTE_ACTION_GROUP              = (G_TYPE_CHECK_INSTANCE_CAST((inst),G_TYPE_REMOTE_ACTION_GROUP,GRemoteActionGroup))    ! macro
    const g_static_mutex_get_mutex           = g_static_mutex_get_mutex_impl    ! macro
    const G_TYPE_MEMORY_OUTPUT_STREAM        = (g_memory_output_stream_get_type())    ! macro
    const GTK_STOCK_MISSING_IMAGE            = "gtk-missing-image"    ! macro
    const GTK_TYPE_WINDOW_TYPE               = (gtk_window_type_get_type())    ! macro
    const GDK_KEY_Armenian_LYUN              = 0x100053c    ! macro
    const g_test_trap_assert_stderr_unmatched =  g_test_trap_assertions(G_LOG_DOMAIN,__FILE__,__LINE__,G_STRFUNC,5,serrpattern)    ! macro
    const GDK_KEY_Hangul_Hieuh               = 0xebe    ! macro
    const G_TLS_DATABASE_CLASS               = (G_TYPE_CHECK_CLASS_CAST((class),G_TYPE_TLS_DATABASE,GTlsDatabaseClass))    ! macro
    const GTK_STATUSBAR_GET_CLASS            = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_STATUSBAR,GtkStatusbarClass))    ! macro
    const GTK_TYPE_CELL_RENDERER_SPIN        = (gtk_cell_renderer_spin_get_type())    ! macro
    const GTK_STOCK_DIALOG_INFO              = "gtk-dialog-info"    ! macro
    const g_slice_dup                        = (1?(type*)g_slice_copy(sizeof(type),(mem)):((void)((type*)0==(mem)),(type*)0))    ! macro
    const ATK_IS_PLUG                        = (G_TYPE_CHECK_INSTANCE_TYPE((obj),ATK_TYPE_PLUG))    ! macro
    const GDK_KEY_hebrew_zade                = 0xcf6    ! macro
    const G_SIMPLE_PERMISSION                = (G_TYPE_CHECK_INSTANCE_CAST((inst),G_TYPE_SIMPLE_PERMISSION,GSimplePermission))    ! macro
    const g_atomic_pointer_add               = (g_atomic_pointer_add((atomic),(gssize)(val)))    ! macro
    const G_PERMISSION_GET_CLASS             = (G_TYPE_INSTANCE_GET_CLASS((inst),G_TYPE_PERMISSION,GPermissionClass))    ! macro
    const GTK_STYLE_CLASS_MENU               = "menu"    ! macro
    const GDK_KEY_currency                   = 0x0a4    ! macro
    const g_spawn_command_line_sync          =  g_spawn_command_line_sync_utf8    ! macro
    const GDK_KEY_Armenian_TSO               =  0x1000551    ! macro
    const GDK_KEY_AddFavorite                =  0x1008ff39    ! macro
    const GTK_IS_ENTRY_CLASS                 = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_ENTRY))    ! macro
    const GDK_KEY_braille_dots_345           = 0x100281c    ! macro
    const G_TYPE_DBUS_SERVER_FLAGS           = (g_dbus_server_flags_get_type())    ! macro
    const GDK_IS_DISPLAY                     = (G_TYPE_CHECK_INSTANCE_TYPE((object),GDK_TYPE_DISPLAY))    ! macro
    const GDK_KEY_braille_dots_346           = 0x100282c    ! macro
    const GDK_KEY_hebrew_zadi                =  0xcf6    ! macro
    const GDK_KEY_plusminus                  =  0x0b1    ! macro
    const GTK_TYPE_APP_CHOOSER_DIALOG        = (gtk_app_chooser_dialog_get_type())    ! macro
    const GDK_KEY_braille_dots_347           = 0x100284c    ! macro
    const GDK_KEY_Zabovedot                  =  0x1af    ! macro
    const GDK_KEY_braille_dots_1567          =  0x1002871    ! macro
    const G_IS_PARAM_SPEC_BOXED              = (G_TYPE_CHECK_INSTANCE_TYPE((pspec),G_TYPE_PARAM_BOXED))    ! macro
    const GDK_KEY_braille_dots_348           = 0x100288c    ! macro
    const GDK_KEY_braille_dots_1568          =  0x10028b1    ! macro
    const GTK_MENU_TOOL_BUTTON_CLASS         = (G_TYPE_CHECK_CLASS_CAST((k),GTK_TYPE_MENU_TOOL_BUTTON,GtkMenuToolButtonClass))    ! macro
    const G_TYPE_DBUS_ARG_INFO               = (g_dbus_arg_info_get_type())    ! macro
    const GDK_KEY_Georgian_har               = 0x10010f4    ! macro
    const GTK_TEXT_VIEW_PRIORITY_VALIDATE    = (GDK_PRIORITY_REDRAW+5)    ! macro
    const GDK_KEY_Arabic_fathatan            = 0x5eb    ! macro
    const GDK_KEY_3270_CursorSelect          =  0xfd1c    ! macro
    const G_DEFINE_TYPE_EXTENDED             =  _G_DEFINE_TYPE_EXTENDED_BEGIN(TN,t_n,T_P,_f_){_C_;}_G_DEFINE_TYPE_EXTENDED_END()    ! macro
    const GDK_KEY_AudioMedia                 = 0x1008ff32    ! macro
    const GDK_KEY_dead_abovering             =  0xfe58    ! macro
    const GDK_KEY_Ukranian_yi                =  0x6a7    ! macro
    const GLIB_SYSDEF_AF_UNIX                =  1    ! macro
    const GTK_TYPE_TREE_VIEW_DROP_POSITION   = (gtk_tree_view_drop_position_get_type())    ! macro
    const GTK_STYLE_REGION_ROW               = "row"    ! macro
    const g_datalist_id_set_data             = g_datalist_id_set_data_full((dl),(q),(d),NULL)    ! macro
    const G_FILE_ATTRIBUTE_SELINUX_CONTEXT   = "selinux::context"    ! macro
    const G_FILE_ATTRIBUTE_STANDARD_TARGET_URI = "standard::target-uri"    ! macro
    const G_EMBLEMED_ICON_CLASS              = (G_TYPE_CHECK_CLASS_CAST((k),G_TYPE_EMBLEMED_ICON,GEmblemedIconClass))    ! macro
    const GDK_KEY_Greek_IOTAaccent           = 0x7a4    ! macro
    const GTK_TYPE_HSV                       = (gtk_hsv_get_type())    ! macro
    const G_TYPE_DBUS_METHOD_INFO            = (g_dbus_method_info_get_type())    ! macro
    const GTK_STOCK_DIRECTORY                = "gtk-directory"    ! macro
    const GDK_KEY_Thai_topatak               = 0xdaf    ! macro
    const GTK_IS_CELL_RENDERER_TOGGLE_CLASS  = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_CELL_RENDERER_TOGGLE))    ! macro
    const G_IS_PROXY_ADDRESS                 = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_PROXY_ADDRESS))    ! macro
    const GDK_IS_DISPLAY_MANAGER             = (G_TYPE_CHECK_INSTANCE_TYPE((object),GDK_TYPE_DISPLAY_MANAGER))    ! macro
    const GDK_KEY_uhook                      = 0x1001ee7    ! macro
    const G_TYPE_INT                         =  G_TYPE_MAKE_FUNDAMENTAL(6)    ! macro
    const GDK_KEY_iogonek                    = 0x3e7    ! macro
    const GTK_IS_CELL_AREA_BOX               = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_CELL_AREA_BOX))    ! macro
    const G_PARAM_SPEC_UCHAR                 = (G_TYPE_CHECK_INSTANCE_CAST((pspec),G_TYPE_PARAM_UCHAR,GParamSpecUChar))    ! macro
    const GTK_TYPE_ICON_INFO                 = (gtk_icon_info_get_type())    ! macro
    const ATK_TYPE_OBJECT_FACTORY            = (atk_object_factory_get_type())    ! macro
    const cairo_matrix_set_affine            = cairo_matrix_set_affine_REPLACED_BY_cairo_matrix_init    ! macro
    const g_ascii_isalnum                    = ((g_ascii_table[(guchar)(c)]&G_ASCII_ALNUM)!=0)    ! macro
    const g_rand_boolean                     = ((g_rand_int(rand_)&(1<<15))!=0)    ! macro
    const GDK_KEY_braille_dots_356           = 0x1002834    ! macro
    const PANGO_ATTR_INDEX_TO_TEXT_END       =  G_MAXUINT    ! macro
    const GDK_KEY_Serbian_dze                =  0x6af    ! macro
    const G_KEY_FILE_DESKTOP_TYPE_DIRECTORY  = "Directory"    ! macro
    const GDK_KEY_braille_dots_357           = 0x1002854    ! macro
    const ATK_DOCUMENT_GET_IFACE             = (G_TYPE_INSTANCE_GET_INTERFACE((obj),ATK_TYPE_DOCUMENT,AtkDocumentIface))    ! macro
    const GDK_DEPRECATED_IN_3_0              = GDK_DEPRECATED    ! macro
    const GDK_KEY_braille_dots_358           =  0x1002894    ! macro
    const G_FILE_MONITOR                     = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_FILE_MONITOR,GFileMonitor))    ! macro
    const GTK_TYPE_TREE_VIEW_COLUMN_SIZING   = (gtk_tree_view_column_sizing_get_type())    ! macro
    const GDK_KEY_braille_dots_135678        = 0x10028f5    ! macro
    const G_FILE_ATTRIBUTE_UNIX_GID          = "unix::gid"    ! macro
    const GDK_KEY_braille_dots_1578          = 0x10028d1    ! macro
    const G_MAXFLOAT                         =  FLT_MAX    ! macro
    const GTK_TYPE_MENU_BUTTON               = (gtk_menu_button_get_type())    ! macro
    const GTK_SCROLLED_WINDOW_CLASS          = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_SCROLLED_WINDOW,GtkScrolledWindowClass))    ! macro
    const GDK_DEPRECATED_IN_3_2              = GDK_DEPRECATED    ! macro
    const G_IS_PERMISSION_CLASS              = (G_TYPE_CHECK_CLASS_TYPE((class),G_TYPE_PERMISSION))    ! macro
    const GDK_KEY_Meeting                    = 0x1008ff63    ! macro
    const GTK_PAPER_NAME_LETTER              = "na_letter"    ! macro
    const G_KEY_FILE_DESKTOP_KEY_NAME        = "Name"    ! macro
    const GDK_DEPRECATED_IN_3_4              = GDK_DEPRECATED    ! macro
    const GDK_KEY_FFrancSign                 =  0x10020a3    ! macro
    const PANGO_IS_CONTEXT_CLASS             = (G_TYPE_CHECK_CLASS_TYPE((klass),PANGO_TYPE_CONTEXT))    ! macro
    const GTK_STOCK_UNINDENT                 = "gtk-unindent"    ! macro
    const GDK_KEY_Ukrainian_YI               = 0x6b7    ! macro
    const GTK_TYPE_TREE_SELECTION            = (gtk_tree_selection_get_type())    ! macro
    const GDK_DEPRECATED_IN_3_6              = GDK_DEPRECATED    ! macro
    const g_datalist_remove_data             =  g_datalist_id_set_data((dl),g_quark_try_string(k),NULL)    ! macro
    const GTK_IS_HBOX_CLASS                  = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_HBOX))    ! macro
    const GDK_KEY_Udoubleacute               = 0x1db    ! macro
    const GTK_IS_IMAGE_MENU_ITEM             = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_IMAGE_MENU_ITEM))    ! macro
    const GTK_APP_CHOOSER_DIALOG_CLASS       = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_APP_CHOOSER_DIALOG,GtkAppChooserDialogClass))    ! macro
    const GDK_KEY_Pointer_DownRight          = 0xfee7    ! macro
    const GTK_STOCK_MEDIA_FORWARD            = "gtk-media-forward"    ! macro
    const GDK_KEY_Greek_IOTAdieresis         = 0x7a5    ! macro
    const CAIRO_HAS_USER_FONT                =  1    ! macro
    const G_PROXY_RESOLVER_GET_IFACE         = (G_TYPE_INSTANCE_GET_INTERFACE((o),G_TYPE_PROXY_RESOLVER,GProxyResolverInterface))    ! macro
    const GDK_KEY_Video                      = 0x1008ff87    ! macro
    const GDK_KEY_Hangul_SsangKiyeog         =  0xea2    ! macro
    const G_HOOK_IN_CALL                     = ((G_HOOK_FLAGS(hook)&G_HOOK_FLAG_IN_CALL)!=0)    ! macro
    const GDK_KEY_Armenian_AYB               = 0x1000531    ! macro
    const GTK_FIXED_GET_CLASS                = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_FIXED,GtkFixedClass))    ! macro
    const _G_RENEW                           = ((struct_type*)g_##func##_n(mem,(n_structs),sizeof(struct_type)))    ! macro
    const g_datalist_remove_no_notify        = g_datalist_id_remove_no_notify((dl),g_quark_try_string(k))    ! macro
    const GDK_KEY_notapproxeq                = 0x1002247    ! macro
    const GDK_KEY_braille_dots_367           =  0x1002864    ! macro
    const GTK_TYPE_CLIPBOARD                 = (gtk_clipboard_get_type())    ! macro
    const G_TYPE_CHECK_VALUE                 = (_G_TYPE_CHV((value)))    ! macro
    const _ATK_DEFINE_TYPE_EXTENDED_END      = }g_once_init_leave(&g_define_type_id__volatile,g_define_type_id);}return g_define_type_id__volatile;}    ! macro
    const GDK_KEY_braille_dots_368           = 0x10028a4    ! macro
    const GDK_TYPE_DEVICE                    = (gdk_device_get_type())    ! macro
    const G_IS_NETWORK_ADDRESS               = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_NETWORK_ADDRESS))    ! macro
    const GTK_STYLE_CLASS_SIDEBAR            = "sidebar"    ! macro
    const ATK_TYPE_IMAGE                     = (atk_image_get_type())    ! macro
    const GTK_STYLE_CLASS_CELL               = "cell"    ! macro
    const GDK_KEY_Sinh_gha                   = 0x1000d9d    ! macro
    const GDK_KEY_ISO_Group_Latch            =  0xfe06    ! macro
    const g_date_days_in_month               =  g_date_get_days_in_month    ! macro
    const g_scanner_freeze_symbol_table      = ((void)0)    ! macro
    const G_TYPE_CREDENTIALS                 = (g_credentials_get_type())    ! macro
    const g_signal_connect                   = g_signal_connect_data((instance),(detailed_signal),(c_handler),(data),NULL,(GConnectFlags)0)    ! macro
    const g_random_boolean                   = ((g_random_int()&(1<<15))!=0)    ! macro
    const GDK_KEY_Pointer_Button_Dflt        = 0xfee8    ! macro
    const G_SOCKET_LISTENER                  = (G_TYPE_CHECK_INSTANCE_CAST((inst),G_TYPE_SOCKET_LISTENER,GSocketListener))    ! macro
    const GTK_SPIN_BUTTON_CLASS              = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_SPIN_BUTTON,GtkSpinButtonClass))    ! macro
    const GTK_UI_MANAGER                     = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_UI_MANAGER,GtkUIManager))    ! macro
    const GDK_KEY_Tabovedot                  = 0x1001e6a    ! macro
    const GDK_KEY_topt                       =  0x9f7    ! macro
    const GDK_TYPE_STATUS                    = (gdk_status_get_type())    ! macro
    const GDK_KEY_Arabic_switch              = 0xff7e    ! macro
    const PANGO_TYPE_WRAP_MODE               = (pango_wrap_mode_get_type())    ! macro
    const GTK_TOGGLE_ACTION_GET_CLASS        = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_TOGGLE_ACTION,GtkToggleActionClass))    ! macro
    const GDK_TARGET_BITMAP                  = _GDK_MAKE_ATOM(5)    ! macro
    const GTK_COLOR_SELECTION_DIALOG_CLASS   = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_COLOR_SELECTION_DIALOG,GtkColorSelectionDialogClass))    ! macro
    const GTK_STOCK_GO_UP                    = "gtk-go-up"    ! macro
    const g_chunk_new0                       = ((type*)g_mem_chunk_alloc0(chunk))    ! macro
    const GDK_KEY_oneeighth                  = 0xac3    ! macro
    const GTK_TYPE_APP_CHOOSER_WIDGET        = (gtk_app_chooser_widget_get_type())    ! macro
    const G_IS_PARAM_SPEC_FLOAT              = (G_TYPE_CHECK_INSTANCE_TYPE((pspec),G_TYPE_PARAM_FLOAT))    ! macro
    const GDK_PRIORITY_EVENTS                = (G_PRIORITY_DEFAULT)    ! macro
    const GTK_DRAWING_AREA                   = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_DRAWING_AREA,GtkDrawingArea))    ! macro
    const GTK_STOCK_INDENT                   = "gtk-indent"    ! macro
    const G_DBUS_MESSAGE                     = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_DBUS_MESSAGE,GDBusMessage))    ! macro
    const GDK_KEY_kana_tu                    = 0x4af    ! macro
    const GTK_STYLE_CLASS_BOTTOM             = "bottom"    ! macro
    const g_static_mutex_lock                = g_mutex_lock(g_static_mutex_get_mutex(mutex))    ! macro
    const GDK_KEY_Thai_maitaikhu             = 0xde7    ! macro
    const GDK_KEY_Arabic_hamzaonalef         =  0x5c3    ! macro
    const GDK_KEY_braille_dots_378           =  0x10028c4    ! macro
    const G_IS_FILE                          = (G_TYPE_CHECK_INSTANCE_TYPE((obj),G_TYPE_FILE))    ! macro
    const G_FILE_ATTRIBUTE_STANDARD_SYMBOLIC_ICON = "standard::symbolic-icon"    ! macro
    const _ATK_DEFINE_TYPE_EXTENDED_BEGIN    = static void type_name##_init(TypeName*self);static void type_name##_class_init(TypeName##Class*klass);static gpointer type_name##_parent_class=NULL;static void type_name##_class_intern_init(gpointer klass){type_name##_parent_class=g_type_class_peek_parent(klass);type_name##_class_init((TypeName##Class*)klass);}GType type_name##_get_type(void){static volatile gsize g_define_type_id__volatile=0;if(g_once_init_enter(&g_define_type_id__volatile)){AtkObjectFactory*factory;GType derived_type;GTypeQuery query;GType derived_atk_type;GType g_define_type_id;derived_type=g_type_parent(TYPE);factory=atk_registry_get_factory(atk_get_default_registry(),derived_type);derived_atk_type=atk_object_factory_get_accessible_type(factory);g_type_query(derived_atk_type,&query);g_define_type_id=g_type_register_static_simple(derived_atk_type,g_intern_static_string(#TypeName),query.class_size,(GClassInitFunc)type_name##_class_intern_init,query.instance_size,(GInstanceInitFunc)type_name##_init,(GTypeFlags)flags);{    ! macro
    const GDK_KEY_odiaeresis                 = 0x0f6    ! macro
    const ATK_TYPE_UTIL                      = (atk_util_get_type())    ! macro
    const G_MAXSSIZE                         = G_MAXINT64    ! macro
    const GTK_IS_NUMERABLE_ICON_CLASS        = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_NUMERABLE_ICON))    ! macro
    const GTK_STYLE_CLASS_PROGRESSBAR        = "progressbar"    ! macro
    const G_IS_DBUS_OBJECT_MANAGER_CLIENT_CLASS = (G_TYPE_CHECK_CLASS_TYPE((k),G_TYPE_DBUS_OBJECT_MANAGER_CLIENT))    ! macro
    const PANGO_TYPE_GLYPH_ITEM_ITER         = (pango_glyph_item_iter_get_type())    ! macro
    const GDK_KEY_Left                       = 0xff51    ! macro
    const GDK_KEY_Wdiaeresis                 =  0x1001e84    ! macro
    const cairo_matrix_copy                  =  cairo_matrix_copy_DEPRECATED_BY_cairo_matrix_t    ! macro
    const GDK_KEY_KP_End                     =  0xff9c    ! macro
    const G_KEY_FILE_DESKTOP_TYPE_LINK       = "Link"    ! macro
    const GDK_KEY_abrevebelowdot             = 0x1001eb7    ! macro
    const GDK_KEY_Cyrillic_sha               =  0x6db    ! macro
    const ATK_TABLE_GET_IFACE                = (G_TYPE_INSTANCE_GET_INTERFACE((obj),ATK_TYPE_TABLE,AtkTableIface))    ! macro
    const GDK_KEY_KP_Right                   = 0xff98    ! macro
    const GSSIZE_TO_BE                       = ((gssize)GINT64_TO_BE(val))    ! macro
    const GDK_KEY_Uring                      = 0x1d9    ! macro
    const GTK_TYPE_MESSAGE_DIALOG            = (gtk_message_dialog_get_type())    ! macro
    const GTK_RADIO_BUTTON_CLASS             = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_RADIO_BUTTON,GtkRadioButtonClass))    ! macro
    const GDK_KEY_ebelowdot                  = 0x1001eb9    ! macro
    const GTK_TYPE_CELL_RENDERER             = (gtk_cell_renderer_get_type())    ! macro
    const G_CSET_A_2_Z                       = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"    ! macro
    const g_test_trap_assert_passed          = g_test_trap_assertions(G_LOG_DOMAIN,__FILE__,__LINE__,G_STRFUNC,0,0)    ! macro
    const GTK_FONT_CHOOSER_WIDGET_CLASS      = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_FONT_CHOOSER_WIDGET,GtkFontChooserWidgetClass))    ! macro
    const G_DBUS_OBJECT_MANAGER_SERVER_GET_CLASS = (G_TYPE_INSTANCE_GET_CLASS((o),G_TYPE_DBUS_OBJECT_MANAGER_SERVER,GDBusObjectManagerServerClass))    ! macro
    const GDK_KEY_uhorn                      = 0x10001b0    ! macro
    const GDK_KEY_acircumflextilde           =  0x1001eab    ! macro
    const GDK_KEY_Zcaron                     =  0x1ae    ! macro
    const GDK_KEY_Ohook                      =  0x1001ece    ! macro
    const GDK_KEY_Arabic_heh_doachashmee     =  0x10006be    ! macro
    const G_SOCKET                           = (G_TYPE_CHECK_INSTANCE_CAST((inst),G_TYPE_SOCKET,GSocket))    ! macro
    const GTK_TREE_MODEL_FILTER_CLASS        = (G_TYPE_CHECK_CLASS_CAST((vtable),GTK_TYPE_TREE_MODEL_FILTER,GtkTreeModelFilterClass))    ! macro
    const GTK_TEXT_CHILD_ANCHOR_CLASS        = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_TEXT_CHILD_ANCHOR,GtkTextChildAnchorClass))    ! macro
    const GDK_KEY_Cyrillic_U_straight_bar    = 0x10004b0    ! macro
    const g_date_day_of_year                 =  g_date_get_day_of_year    ! macro
    const GDK_NONE                           =  _GDK_MAKE_ATOM(0)    ! macro
    const GDK_KEY_WonSign                    = 0x10020a9    ! macro
    const GDK_KEY_paragraph                  =  0x0b6    ! macro
    const GTK_FILE_CHOOSER_ERROR             = (gtk_file_chooser_error_quark())    ! macro
    const GTK_STYLE_PROPERTY_BORDER_WIDTH    = "border-width"    ! macro
    const cairo_current_line_join            = cairo_current_line_join_REPLACED_BY_cairo_get_line_join    ! macro
    const ATK_UTIL_CLASS                     = (G_TYPE_CHECK_CLASS_CAST((klass),ATK_TYPE_UTIL,AtkUtilClass))    ! macro
    const G_KEY_FILE_DESKTOP_KEY_EXEC        = "Exec"    ! macro
    const GDK_KEY_Uhorntilde                 = 0x1001eee    ! macro
    const cairo_current_tolerance            =  cairo_current_tolerance_REPLACED_BY_cairo_get_tolerance    ! macro
    const g_test_thorough                    = (!g_test_config_vars->test_quick)    ! macro
    const GDK_KEY_wgrave                     = 0x1001e81    ! macro
    const GDK_KEY_Thai_lekchet               =  0xdf7    ! macro
    const G_DBUS_INTERFACE                   = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_DBUS_INTERFACE,GDBusInterface))    ! macro
    const ATK_TEXT                           = G_TYPE_CHECK_INSTANCE_CAST((obj),ATK_TYPE_TEXT,AtkText)    ! macro
    const GDK_KEY_Scroll_Lock                = 0xff14    ! macro
    const g_signal_connect_swapped           =  g_signal_connect_data((instance),(detailed_signal),(c_handler),(data),NULL,G_CONNECT_SWAPPED)    ! macro
    const GDK_KEY_hstroke                    = 0x2b1    ! macro
    const GDK_KEY_CruzeiroSign               =  0x10020a2    ! macro
    const GDK_KEY_Calendar                   =  0x1008ff20    ! macro
    const G_VARIANT_TYPE_STRING              = ((const GVariantType*)"s")    ! macro
    const G_IS_RESOLVER                      = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_RESOLVER))    ! macro
    const GDK_KEY_slash                      = 0x02f    ! macro
    const GTK_IS_PANED_CLASS                 = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_PANED))    ! macro
    const GDK_KEY_Thai_leknung               = 0xdf1    ! macro
    const GTK_IS_COMBO_BOX_TEXT              = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_COMBO_BOX_TEXT))    ! macro
    const GTK_STOCK_ADD                      = "gtk-add"    ! macro
    const G_TYPE_SIMPLE_PERMISSION           = (g_simple_permission_get_type())    ! macro
    const PANGO_FONT                         = (G_TYPE_CHECK_INSTANCE_CAST((object),PANGO_TYPE_FONT,PangoFont))    ! macro
    const G_DBUS_OBJECT_MANAGER              = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_DBUS_OBJECT_MANAGER,GDBusObjectManager))    ! macro
    const G_ACTION                           = (G_TYPE_CHECK_INSTANCE_CAST((inst),G_TYPE_ACTION,GAction))    ! macro
    const GDK_KEY_Hangul_J_Mieum             = 0xee3    ! macro
    const G_MEMORY_INPUT_STREAM_GET_CLASS    = (G_TYPE_INSTANCE_GET_CLASS((o),G_TYPE_MEMORY_INPUT_STREAM,GMemoryInputStreamClass))    ! macro
    const GDK_KEY_hebrew_zain                = 0xce6    ! macro
    const GDK_KEY_Serbian_tshe               =  0x6ab    ! macro
    const ATK_OBJECT_CLASS                   = (G_TYPE_CHECK_CLASS_CAST((klass),ATK_TYPE_OBJECT,AtkObjectClass))    ! macro
    const GTK_IS_FILE_CHOOSER_BUTTON_CLASS   = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_FILE_CHOOSER_BUTTON))    ! macro
    const GTK_TREE_SORTABLE_GET_IFACE        = (G_TYPE_INSTANCE_GET_INTERFACE((obj),GTK_TYPE_TREE_SORTABLE,GtkTreeSortableIface))    ! macro
    const GDK_KEY_hebrew_chet                = 0xce7    ! macro
    const GDK_KEY_Begin                      =  0xff58    ! macro
    const G_SQRT2                            =  1.4142135623730950488016887242096980785696718753769    ! macro
    const GDK_TYPE_MODIFIER_TYPE             = (gdk_modifier_type_get_type())    ! macro
    const GUINT_FROM_BE                      = (GUINT_TO_BE(val))    ! macro
    const GTK_TYPE_IMAGE_TYPE                = (gtk_image_type_get_type())    ! macro
    const GDK_KEY_sevensubscript             = 0x1002087    ! macro
    const G_TYPE_LONG                        =  G_TYPE_MAKE_FUNDAMENTAL(8)    ! macro
    const G_IS_REMOTE_ACTION_GROUP           = (G_TYPE_CHECK_INSTANCE_TYPE((inst),G_TYPE_REMOTE_ACTION_GROUP))    ! macro
    const GDK_KEY_circle                     = 0xbcf    ! macro
    const GTK_TYPE_WRAP_MODE                 = (gtk_wrap_mode_get_type())    ! macro
    const GTK_FILE_CHOOSER_DIALOG_GET_CLASS  = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_FILE_CHOOSER_DIALOG,GtkFileChooserDialogClass))    ! macro
    const GDK_KEY_HotLinks                   = 0x1008ff3a    ! macro
    const GTK_IS_ACTIVATABLE                 = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_ACTIVATABLE))    ! macro
    const GDK_KEY_toprightparens             = 0x8ad    ! macro
    const GTK_STOCK_QUIT                     = "gtk-quit"    ! macro
    const GTK_IS_CELL_RENDERER_ACCEL_CLASS   = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_CELL_RENDERER_ACCEL))    ! macro
    const GDK_KEY_caret                      = 0xafc    ! macro
    const GDK_KEY_KP_Next                    =  0xff9b    ! macro
    const GDK_KEY_KP_Up                      =  0xff97    ! macro
    const GDK_KEY_Thai_lekpaet               =  0xdf8    ! macro
    const GTK_MESSAGE_DIALOG_CLASS           = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_MESSAGE_DIALOG,GtkMessageDialogClass))    ! macro
    const GDK_KEY_Greek_mu                   = 0x7ec    ! macro
    const GLIB_SYSDEF_POLLNVAL               = =32    ! macro
    const G_RESOLVER_CLASS                   = (G_TYPE_CHECK_CLASS_CAST((k),G_TYPE_RESOLVER,GResolverClass))    ! macro
    const GTK_BUTTON                         = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_BUTTON,GtkButton))    ! macro
    const G_INET_ADDRESS_MASK_GET_CLASS      = (G_TYPE_INSTANCE_GET_CLASS((o),G_TYPE_INET_ADDRESS_MASK,GInetAddressMaskClass))    ! macro
    const GDK_KEY_Greek_iotaaccentdieresis   = 0x7b6    ! macro
    const GDK_KEY_dcaron                     =  0x1ef    ! macro
    const G_URI_RESERVED_CHARS_ALLOWED_IN_PATH_ELEMENT =  G_URI_RESERVED_CHARS_SUBCOMPONENT_DELIMITERS":@"    ! macro
    const GTK_TYPE_TEXT_CHILD_ANCHOR         = (gtk_text_child_anchor_get_type())    ! macro
    const GTK_TOOL_ITEM_CLASS                = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_TOOL_ITEM,GtkToolItemClass))    ! macro
    const CAIRO_MIME_TYPE_PNG                = "image/png"    ! macro
    const GDK_KEY_Hangul_J_Sios              = 0xee6    ! macro
    const g_cclosure_marshal_BOOL__FLAGS     =  g_cclosure_marshal_BOOLEAN__FLAGS    ! macro
    const GDK_KEY_Hangul_J_KkogjiDalrinIeung =  0xef9    ! macro
    const g_node_insert_data_before          =  g_node_insert_before((parent),(sibling),g_node_new(data))    ! macro
    const PANGO_TYPE_ITEM                    = (pango_item_get_type())    ! macro
    const G_TYPE_DBUS_PROPERTY_INFO_FLAGS    = (g_dbus_property_info_flags_get_type())    ! macro
    const GTK_SCROLLBAR_GET_CLASS            = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_SCROLLBAR,GtkScrollbarClass))    ! macro
    const GDK_KEY_Launch0                    = 0x1008ff40    ! macro
    const GDK_KEY_Hangul_AE                  =  0xec0    ! macro
    const GDK_KEY_Launch1                    =  0x1008ff41    ! macro
    const GTK_WINDOW_GROUP_CLASS             = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_WINDOW_GROUP,GtkWindowGroupClass))    ! macro
    const GDK_KEY_Pointer_EnableKeys         = 0xfef9    ! macro
    const GDK_KEY_Launch2                    =  0x1008ff42    ! macro
    const GDK_KEY_Documents                  =  0x1008ff5b    ! macro
    const GTK_TYPE_TREE_MODEL_FLAGS          = (gtk_tree_model_flags_get_type())    ! macro
    const GDK_KEY_emfilledcircle             = 0xade    ! macro
    const GDK_KEY_Cacute                     =  0x1c6    ! macro
    const GDK_KEY_Launch3                    =  0x1008ff43    ! macro
    const GDK_KEY_acircumflexgrave           =  0x1001ea7    ! macro
    const GDK_KEY_ISO_Lock                   =  0xfe01    ! macro
    const GDK_KEY_Launch4                    =  0x1008ff44    ! macro
    const GTK_TYPE_TOGGLE_BUTTON             = (gtk_toggle_button_get_type())    ! macro
    const G_SOCKET_CONNECTION                = (G_TYPE_CHECK_INSTANCE_CAST((inst),G_TYPE_SOCKET_CONNECTION,GSocketConnection))    ! macro
    const GDK_KEY_Launch5                    = 0x1008ff45    ! macro
    const G_TYPE_FROM_CLASS                  = (((GTypeClass*)(g_class))->g_type)    ! macro
    const GDK_KEY_kana_ya                    = 0x4ac    ! macro
    const G_FILENAME_COMPLETER_GET_CLASS     = (G_TYPE_INSTANCE_GET_CLASS((o),G_TYPE_FILENAME_COMPLETER,GFilenameCompleterClass))    ! macro
    const G_IS_INET_ADDRESS                  = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_INET_ADDRESS))    ! macro
    const GDK_KEY_Launch6                    = 0x1008ff46    ! macro
    const g_ATEXIT                           = (atexit(proc))    ! macro
    const GTK_STYLE_CLASS_HORIZONTAL         = "horizontal"    ! macro
    const GTK_IS_STATUSBAR_CLASS             = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_STATUSBAR))    ! macro
    const GDK_KEY_obarred                    = 0x1000275    ! macro
    const G_OBJECT_TYPE_NAME                 = (g_type_name(G_OBJECT_TYPE(object)))    ! macro
    const GDK_KEY_Launch7                    = 0x1008ff47    ! macro
    const G_IS_EMBLEMED_ICON_CLASS           = (G_TYPE_CHECK_CLASS_TYPE((k),G_TYPE_EMBLEMED_ICON))    ! macro
    const GTK_IS_UI_MANAGER                  = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_UI_MANAGER))    ! macro
    const GTK_TYPE_TEXT_ATTRIBUTES           = (gtk_text_attributes_get_type())    ! macro
    const GDK_KEY_Launch8                    = 0x1008ff48    ! macro
    const GDK_KEY_braille_dots_25678         =  0x10028f2    ! macro
    const G_PASTE_ARGS                       =  identifier1##identifier2    ! macro
    const GDK_KEY_Arabic_fatha               =  0x5ee    ! macro
    const GDK_KEY_Launch9                    =  0x1008ff49    ! macro
    const G_APP_LAUNCH_CONTEXT_GET_CLASS     = (G_TYPE_INSTANCE_GET_CLASS((o),G_TYPE_APP_LAUNCH_CONTEXT,GAppLaunchContextClass))    ! macro
    const GTK_RADIO_ACTION_CLASS             = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_RADIO_ACTION,GtkRadioActionClass))    ! macro
    const GTK_RADIO_ACTION_GET_CLASS         = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_RADIO_ACTION,GtkRadioActionClass))    ! macro
    const G_TYPE_DRIVE_START_FLAGS           = (g_drive_start_flags_get_type())    ! macro
    const GDK_KEY_Favorites                  = 0x1008ff30    ! macro
    const GDK_KEY_Greek_nu                   =  0x7ed    ! macro
    const G_TYPE_PARAM_UCHAR                 = (g_param_spec_types[1])    ! macro
    const GDK_KEY_Arabic_jeh                 = 0x1000698    ! macro
    const GDK_KEY_Uhorngrave                 =  0x1001eea    ! macro
    const PANGO_GLYPH_EMPTY                  = ((PangoGlyph)0x0FFFFFFF)    ! macro
    const G_IO_FLAG_IS_WRITEABLE             = (G_IO_FLAG_IS_WRITABLE)    ! macro
    const GTK_IS_TEXT_TAG_CLASS              = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_TEXT_TAG))    ! macro
    const GDK_KEY_Arabic_ra                  = 0x5d1    ! macro
    const GDK_KEY_Acircumflexhook            =  0x1001ea8    ! macro
    const GTK_TEXT_VIEW_CLASS                = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_TEXT_VIEW,GtkTextViewClass))    ! macro
    const GDK_KEY_THORN                      = 0x0de    ! macro
    const GLIB_SYSDEF_POLLPRI                = =2    ! macro
    const G_MAXSHORT                         =  SHRT_MAX    ! macro
    const GDK_KEY_Ohorn                      =  0x10001a0    ! macro
    const GTK_PRINT_OPERATION_PREVIEW_GET_IFACE = (G_TYPE_INSTANCE_GET_INTERFACE((obj),GTK_TYPE_PRINT_OPERATION_PREVIEW,GtkPrintOperationPreviewIface))    ! macro
    const G_FILE_ATTRIBUTE_THUMBNAIL_PATH    = "thumbnail::path"    ! macro
    const GDK_KEY_Greek_psi                  = 0x7f8    ! macro
    const G_INET_ADDRESS_MASK                = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_INET_ADDRESS_MASK,GInetAddressMask))    ! macro
    const GDK_KEY_Georgian_hie               = 0x10010f2    ! macro
    const GTK_IS_SCALE_CLASS                 = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_SCALE))    ! macro
    const GDK_KEY_LaunchA                    = 0x1008ff4a    ! macro
    const G_IS_EMBLEMED_ICON                 = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_EMBLEMED_ICON))    ! macro
    const GDK_KEY_LaunchB                    = 0x1008ff4b    ! macro
    const GDK_KEY_Hangul_NieunHieuh          =  0xea6    ! macro
    const GDK_KEY_LaunchC                    =  0x1008ff4c    ! macro
    const GDK_KEY_kana_yo                    =  0x4ae    ! macro
    const GDK_KEY_hebrew_finalmem            =  0xced    ! macro
    const GTK_STOCK_DISCONNECT               = "gtk-disconnect"    ! macro
    const GTK_COLOR_CHOOSER_DIALOG_CLASS     = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_COLOR_CHOOSER_DIALOG,GtkColorChooserDialogClass))    ! macro
    const GDK_KEY_LaunchD                    = 0x1008ff4d    ! macro
    const g_new0                             =  _G_NEW(struct_type,n_structs,malloc0)    ! macro
    const GDK_KEY_LaunchE                    = 0x1008ff4e    ! macro
    const GLIB_MINOR_VERSION                 =  34    ! macro
    const GDK_KEY_Hangul_RieulPieub          =  0xeac    ! macro
    const GDK_KEY_fivesixths                 =  0xab7    ! macro
    const GDK_IS_PIXBUF_LOADER               = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GDK_TYPE_PIXBUF_LOADER))    ! macro
    const GDK_KEY_LaunchF                    = 0x1008ff4f    ! macro
    const GDK_KEY_Greek_epsilonaccent        =  0x7b2    ! macro
    const G_TYPE_ASYNC_INITABLE              = (g_async_initable_get_type())    ! macro
    const GDK_KEY_ApplicationRight           = 0x1008ff51    ! macro
    const GTK_STOCK_HOME                     = "gtk-home"    ! macro
    const G_IS_FILE_ENUMERATOR               = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_FILE_ENUMERATOR))    ! macro
    const GDK_KEY_kana_yu                    = 0x4ad    ! macro
    const GDK_KEY_Gbreve                     =  0x2ab    ! macro
    const GUINT32_TO_LE                      = ((guint32)(val))    ! macro
    const g_ascii_islower                    = ((g_ascii_table[(guchar)(c)]&G_ASCII_LOWER)!=0)    ! macro
    const GDK_TYPE_WINDOW_HINTS              = (gdk_window_hints_get_type())    ! macro
    const GDK_KEY_ncaron                     = 0x1f2    ! macro
    const G_TYPE_ACTION_GROUP                = (g_action_group_get_type())    ! macro
    const GTK_TYPE_CELL_AREA_BOX             = (gtk_cell_area_box_get_type())    ! macro
    const G_TYPE_TLS_REHANDSHAKE_MODE        = (g_tls_rehandshake_mode_get_type())    ! macro
    const GDK_KEY_Greek_pi                   = 0x7f0    ! macro
    const GTK_TYPE_MISC                      = (gtk_misc_get_type())    ! macro
    const G_OBJECT_CLASS_TYPE                = (G_TYPE_FROM_CLASS(class))    ! macro
    const GTK_FONT_SELECTION_DIALOG          = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_FONT_SELECTION_DIALOG,GtkFontSelectionDialog))    ! macro
    const GTK_CELL_VIEW_CLASS                = (G_TYPE_CHECK_CLASS_CAST((vtable),GTK_TYPE_CELL_VIEW,GtkCellViewClass))    ! macro
    const G_IS_INPUT_STREAM                  = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_INPUT_STREAM))    ! macro
    const G_TYPE_TLS_DATABASE                = (g_tls_database_get_type())    ! macro
    const G_ZLIB_DECOMPRESSOR_CLASS          = (G_TYPE_CHECK_CLASS_CAST((k),G_TYPE_ZLIB_DECOMPRESSOR,GZlibDecompressorClass))    ! macro
    const G_SEEKABLE                         = (G_TYPE_CHECK_INSTANCE_CAST((obj),G_TYPE_SEEKABLE,GSeekable))    ! macro
    const ATK_REGISTRY_CLASS                 = (G_TYPE_CHECK_CLASS_CAST((klass),ATK_TYPE_REGISTRY,AtkRegistryClass))    ! macro
    const GDK_KEY_Georgian_rae               = 0x10010e0    ! macro
    const G_TYPE_LOADABLE_ICON               = (g_loadable_icon_get_type())    ! macro
    const G_MENU_MODEL_CLASS                 = (G_TYPE_CHECK_CLASS_CAST((class),G_TYPE_MENU_MODEL,GMenuModelClass))    ! macro
    const GTK_PRINT_SETTINGS_DEFAULT_SOURCE  = "default-source"    ! macro
    const GDK_KEY_FrameBack                  = 0x1008ff9d    ! macro
    const GDK_KEY_toprightsummation          =  0x8b5    ! macro
    const GTK_ICON_THEME_GET_CLASS           = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_ICON_THEME,GtkIconThemeClass))    ! macro
    const GDK_KEY_Ybelowdot                  = 0x1001ef4    ! macro
    const GDK_KEY_Hangul_J_RieulPhieuf       =  0xee1    ! macro
    const PANGO_LBEARING                     = ((rect).x)    ! macro
    const GDK_KEY_braille_dots_125678        = 0x10028f3    ! macro
    const GTK_PRINT_CONTEXT                  = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_PRINT_CONTEXT,GtkPrintContext))    ! macro
    const GTK_IS_COLOR_BUTTON                = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_COLOR_BUTTON))    ! macro
    const GDK_KEY_KP_Enter                   = 0xff8d    ! macro
    const gdk_pixbuf_new_from_file_at_scale  =  gdk_pixbuf_new_from_file_at_scale_utf8    ! macro
    const G_VOLUME_IDENTIFIER_KIND_LABEL     = "label"    ! macro
    const GDK_KEY_Support                    = 0x1008ff7e    ! macro
    const GDK_KEY_PesetaSign                 =  0x10020a7    ! macro
    const cairo_current_miter_limit          =  cairo_current_miter_limit_REPLACED_BY_cairo_get_miter_limit    ! macro
    const GTK_IS_ACCEL_GROUP_CLASS           = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_ACCEL_GROUP))    ! macro
    const G_INPUT_STREAM_CLASS               = (G_TYPE_CHECK_CLASS_CAST((k),G_TYPE_INPUT_STREAM,GInputStreamClass))    ! macro
    const GDK_KEY_scaron                     = 0x1b9    ! macro
    const GDK_KEY_Armenian_tche              =  0x1000573    ! macro
    const GTK_TYPE_ORIENTABLE                = (gtk_orientable_get_type())    ! macro
    const GTK_TYPE_COLOR_BUTTON              = (gtk_color_button_get_type())    ! macro
    const GDK_KEY_stricteq                   = 0x1002263    ! macro
    const G_MENU_LINK_ITER                   = (G_TYPE_CHECK_INSTANCE_CAST((inst),G_TYPE_MENU_LINK_ITER,GMenuLinkIter))    ! macro
    const GDK_KEY_Cyrillic_HA_descender      = 0x10004b2    ! macro
    const GTK_CELL_RENDERER_TOGGLE           = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_CELL_RENDERER_TOGGLE,GtkCellRendererToggle))    ! macro
    const GUINT64_TO_LE                      = ((guint64)(val))    ! macro
    const GDK_KEY_Armenian_GHAT              = 0x1000542    ! macro
    const GDK_KEY_foursuperior               =  0x1002074    ! macro
    const G_IS_DIR_SEPARATOR                 = ((c)==G_DIR_SEPARATOR||(c)=='/')    ! macro
    const GTK_RECENT_MANAGER                 = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_RECENT_MANAGER,GtkRecentManager))    ! macro
    const G_IS_SIMPLE_ACTION                 = (G_TYPE_CHECK_INSTANCE_TYPE((inst),G_TYPE_SIMPLE_ACTION))    ! macro
    const GTK_TYPE_HSEPARATOR                = (gtk_hseparator_get_type())    ! macro
    const G_IEEE754_FLOAT_BIAS               = (127)    ! macro
    const GDK_KEY_Racute                     = 0x1c0    ! macro
    const GDK_KEY_Babovedot                  =  0x1001e02    ! macro
    const GDK_KEY_Hangul_J_RieulTieut        =  0xee0    ! macro
    const GTK_TYPE_SCROLLBAR                 = (gtk_scrollbar_get_type())    ! macro
    const GDK_KEY_Cyrillic_U_macron          = 0x10004ee    ! macro
    const GTK_TREE_SORTABLE_CLASS            = (G_TYPE_CHECK_CLASS_CAST((obj),GTK_TYPE_TREE_SORTABLE,GtkTreeSortableIface))    ! macro
    const GDK_KEY_Hangul_J_Khieuq            = 0xeeb    ! macro
    const G_IS_PARAM_SPEC_OBJECT             = (G_TYPE_CHECK_INSTANCE_TYPE((pspec),G_TYPE_PARAM_OBJECT))    ! macro
    const ATK_IS_RELATION_SET_CLASS          = (G_TYPE_CHECK_CLASS_TYPE((klass),ATK_TYPE_RELATION_SET))    ! macro
    const GDK_KEY_RockerUp                   = 0x1008ff23    ! macro
    const GDK_KEY_Sleep                      =  0x1008ff2f    ! macro
    const g_atomic_pointer_and               = (g_atomic_pointer_and((atomic),(gsize)(val)))    ! macro
    const GDK_KEY_Hangul_J_Phieuf            = 0xeed    ! macro
    const G_APPLICATION_GET_CLASS            = (G_TYPE_INSTANCE_GET_CLASS((inst),G_TYPE_APPLICATION,GApplicationClass))    ! macro
    const GDK_KEY_ahook                      = 0x1001ea3    ! macro
    const G_TYPE_BUS_TYPE                    = (g_bus_type_get_type())    ! macro
    const G_DBUS_MENU_MODEL                  = (G_TYPE_CHECK_INSTANCE_CAST((inst),G_TYPE_DBUS_MENU_MODEL,GDBusMenuModel))    ! macro
    const GDK_KEY_wcircumflex                = 0x1000175    ! macro
    const GDK_KEY_ISO_Level3_Lock            =  0xfe05    ! macro
    const G_CAN_INLINE                       =  1    ! macro
    const GDK_KEY_hebrew_bet                 =  0xce1    ! macro
    const GTK_STOCK_EDIT                     = "gtk-edit"    ! macro
    const G_DATALIST_FLAGS_MASK              = 0x3    ! macro
    const G_SOCKET_SERVICE_GET_CLASS         = (G_TYPE_INSTANCE_GET_CLASS((inst),G_TYPE_SOCKET_SERVICE,GSocketServiceClass))    ! macro
    const GDK_KEY_Wacute                     = 0x1001e82    ! macro
    const GDK_KEY_emspace                    =  0xaa1    ! macro
    const cairo_current_point                =  cairo_current_point_REPLACED_BY_cairo_get_current_point    ! macro
    const GTK_IS_BUILDER_CLASS               = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_BUILDER))    ! macro
    const GTK_IS_COLOR_CHOOSER               = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_COLOR_CHOOSER))    ! macro
    const GDK_KEY_ISO_Move_Line_Up           = 0xfe21    ! macro
    const GTK_IS_SEPARATOR_MENU_ITEM_CLASS   = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_SEPARATOR_MENU_ITEM))    ! macro
    const GDK_KEY_Hangul_WAE                 = 0xec9    ! macro
    const GDK_KEY_Pointer_DfltBtnPrev        =  0xfefc    ! macro
    const cairo_atsui_font_face_create_for_atsu_font_id =  cairo_atsui_font_face_create_for_atsu_font_id_REPLACED_BY_cairo_quartz_font_face_create_for_atsu_font_id    ! macro
    const GDK_KEY_Hangul_PanSios             =  0xef2    ! macro
    const GDK_KEY_uparrow                    =  0x8fc    ! macro
    const GTK_STYLE_CLASS_TOP                = "top"    ! macro
    const cairo_set_target_image             = cairo_set_target_image_DEPRECATED_BY_cairo_image_surface_create_for_data    ! macro
    const G_TYPE_IS_BOXED                    = (G_TYPE_FUNDAMENTAL(type)==G_TYPE_BOXED)    ! macro
    const G_TYPE_THREADED_SOCKET_SERVICE     = (g_threaded_socket_service_get_type())    ! macro
    const GTK_STYLE_PROPERTY_FONT            = "font"    ! macro
    const g_newa                             = ((struct_type*)g_alloca(sizeof(struct_type)*(gsize)(n_structs)))    ! macro
    const GDK_KEY_Hangul_EO                  = 0xec3    ! macro
    const GTK_NOTEBOOK                       = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_NOTEBOOK,GtkNotebook))    ! macro
    const GDK_KEY_Macedonia_DSE              = 0x6b5    ! macro
    const G_TIME_SPAN_MILLISECOND            = (G_GINT64_CONSTANT(1000))    ! macro
    const G_IO_MODULE_CLASS                  = (G_TYPE_CHECK_CLASS_CAST((k),G_IO_TYPE_MODULE,GIOModuleClass))    ! macro
    const g_error                            = G_STMT_START{g_log(G_LOG_DOMAIN,G_LOG_LEVEL_ERROR,__VA_ARGS__);for(;;);}G_STMT_END    ! macro
    const G_VARIANT_TYPE_SIGNATURE           = ((const GVariantType*)"g")    ! macro
    const G_TCP_WRAPPER_CONNECTION           = (G_TYPE_CHECK_INSTANCE_CAST((inst),G_TYPE_TCP_WRAPPER_CONNECTION,GTcpWrapperConnection))    ! macro
    const PANGO_TYPE_ATTR_LIST               = pango_attr_list_get_type()    ! macro
    const GTK_STOCK_ZOOM_FIT                 = "gtk-zoom-fit"    ! macro
    const GDK_KEY_Close                      = 0x1008ff56    ! macro
    const G_IS_APPLICATION_COMMAND_LINE      = (G_TYPE_CHECK_INSTANCE_TYPE((inst),G_TYPE_APPLICATION_COMMAND_LINE))    ! macro
    const GDK_PIXBUF_ERROR                   = gdk_pixbuf_error_quark()    ! macro
    const G_IS_FILE_INPUT_STREAM             = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_FILE_INPUT_STREAM))    ! macro
    const GDK_KEY_3270_Test                  = 0xfd0d    ! macro
    const GDK_KEY_braille_dots_3456          =  0x100283c    ! macro
    const GTK_TYPE_TABLE                     = (gtk_table_get_type())    ! macro
    const GDK_KEY_ocircumflex                = 0x0f4    ! macro
    const GDK_KEY_braille_dots_3457          =  0x100285c    ! macro
    const G_CONST_RETURN                     =  const    ! macro
    const GDK_KEY_Hangul_EU                  =  0xed1    ! macro
    const GDK_KEY_braille_dots_3458          =  0x100289c    ! macro
    const G_IS_DBUS_OBJECT_MANAGER           = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_DBUS_OBJECT_MANAGER))    ! macro
    const G_FILE_GET_IFACE                   = (G_TYPE_INSTANCE_GET_INTERFACE((obj),G_TYPE_FILE,GFileIface))    ! macro
    const GDK_KEY_thorn                      = 0x0fe    ! macro
    const GDK_KEY_Hangul_Special             =  0xff3f    ! macro
    const G_UNICHAR_MAX_DECOMPOSITION_LENGTH =  18    ! macro
    const GTK_MENU_BUTTON_GET_CLASS          = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_MENU_BUTTON,GtkMenuButtonClass))    ! macro
    const GTK_IS_BOX_CLASS                   = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_BOX))    ! macro
    const GDK_KEY_rightshoe                  = 0xbd8    ! macro
    const G_IS_TYPE_PLUGIN_CLASS             = (G_TYPE_CHECK_CLASS_TYPE((vtable),G_TYPE_TYPE_PLUGIN))    ! macro
    const GDK_KEY_zerosubscript              = 0x1002080    ! macro
    const G_IS_ACTION_MAP                    = (G_TYPE_CHECK_INSTANCE_TYPE((inst),G_TYPE_ACTION_MAP))    ! macro
    const GDK_KEY_0                          = 0x030    ! macro
    const GTK_IS_CONTAINER                   = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_CONTAINER))    ! macro
    const GTK_STOCK_PRINT_ERROR              = "gtk-print-error"    ! macro
    const G_PROXY_EXTENSION_POINT_NAME       = "gio-proxy"    ! macro
    const GDK_KEY_1                          = 0x031    ! macro
    const ATK_IS_REGISTRY                    = (G_TYPE_CHECK_INSTANCE_TYPE((obj),ATK_TYPE_REGISTRY))    ! macro
    const G_GSSIZE_FORMAT                    = "I64i"    ! macro
    const GDK_KEY_braille_dots_12456         = 0x100283b    ! macro
    const GDK_KEY_2                          =  0x032    ! macro
    const GTK_IS_FONT_BUTTON                 = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_FONT_BUTTON))    ! macro
    const GDK_KEY_braille_dots_12457         = 0x100285b    ! macro
    const G_MENU_LINK_ITER_CLASS             = (G_TYPE_CHECK_CLASS_CAST((class),G_TYPE_MENU_LINK_ITER,GMenuLinkIterClass))    ! macro
    const GDK_KEY_3                          = 0x033    ! macro
    const GDK_KEY_Cyrillic_O_bar             =  0x10004e8    ! macro
    const G_FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE = "mountable::unix-device"    ! macro
    const GDK_KEY_dead_perispomeni           = 0xfe53    ! macro
    const GDK_KEY_braille_dots_12458         =  0x100289b    ! macro
    const GTK_CHECK_MENU_ITEM_CLASS          = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_CHECK_MENU_ITEM,GtkCheckMenuItemClass))    ! macro
    const GDK_KEY_4                          = 0x034    ! macro
    const G_IS_EMBLEM_CLASS                  = (G_TYPE_CHECK_CLASS_TYPE((k),G_TYPE_EMBLEM))    ! macro
    const G_TYPE_SOCKET_CONNECTION           = (g_socket_connection_get_type())    ! macro
    const GDK_KEY_Arabic_tah                 = 0x5d7    ! macro
    const GTK_TYPE_CHECK_MENU_ITEM           = (gtk_check_menu_item_get_type())    ! macro
    const G_LOCK_DEFINE_STATIC               = static G_LOCK_DEFINE(name)    ! macro
    const GDK_KEY_5                          = 0x035    ! macro
    const ATK_IS_PLUG_CLASS                  = (G_TYPE_CHECK_CLASS_TYPE((klass),ATK_TYPE_PLUG))    ! macro
    const GDK_KEY_6                          = 0x036    ! macro
    const GDK_KEY_dead_macron                =  0xfe54    ! macro
    const GDK_KEY_7                          =  0x037    ! macro
    const GTK_TYPE_EVENT_BOX                 = (gtk_event_box_get_type())    ! macro
    const GTK_OFFSCREEN_WINDOW               = (G_TYPE_CHECK_INSTANCE_CAST((o),GTK_TYPE_OFFSCREEN_WINDOW,GtkOffscreenWindow))    ! macro
    const ATK_IS_NO_OP_OBJECT_FACTORY_CLASS  = (G_TYPE_CHECK_CLASS_TYPE((klass),ATK_TYPE_NO_OP_OBJECT_FACTORY))    ! macro
    const GDK_KEY_8                          = 0x038    ! macro
    const GDK_KEY_twofifths                  =  0xab3    ! macro
    const GDK_KEY_braille_dots_3467          =  0x100286c    ! macro
    const G_MAXLONG                          =  LONG_MAX    ! macro
    const GDK_KEY_9                          =  0x039    ! macro
    const GDK_KEY_filledtribulletup          =  0xae8    ! macro
    const GDK_KEY_braille_dots_3468          =  0x10028ac    ! macro
    const GTK_TYPE_JUSTIFICATION             = (gtk_justification_get_type())    ! macro
    const GDK_KEY_topleftsummation           = 0x8b1    ! macro
    const G_TYPE_DBUS_AUTH_OBSERVER          = (g_dbus_auth_observer_get_type())    ! macro
    const GDK_KEY_gcircumflex                = 0x2f8    ! macro
    const GDK_KEY_filledlefttribullet        =  0xadc    ! macro
    const GDK_KEY_dead_acute                 =  0xfe51    ! macro
    const PANGO_FONTSET                      = (G_TYPE_CHECK_INSTANCE_CAST((object),PANGO_TYPE_FONTSET,PangoFontset))    ! macro
    const GDK_KEY_dead_doublegrave           = 0xfe66    ! macro
    const GDK_KEY_ordfeminine                =  0x0aa    ! macro
    const G_GUINT64_CONSTANT                 = (G_GNUC_EXTENSION(val##ULL))    ! macro
    const GDK_KEY_aacute                     = 0x0e1    ! macro
    const GDK_KEY_Romaji                     =  0xff24    ! macro
    const GTK_TEXT_VIEW                      = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_TEXT_VIEW,GtkTextView))    ! macro
    const GTK_TEXT_CHILD_ANCHOR              = (G_TYPE_CHECK_INSTANCE_CAST((object),GTK_TYPE_TEXT_CHILD_ANCHOR,GtkTextChildAnchor))    ! macro
    const GTK_TYPE_ACCESSIBLE                = (gtk_accessible_get_type())    ! macro
    const G_TYPE_INET_ADDRESS_MASK           = (g_inet_address_mask_get_type())    ! macro
    const GTK_TOGGLE_ACTION                  = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_TOGGLE_ACTION,GtkToggleAction))    ! macro
    const PANGO_TYPE_ALIGNMENT               = (pango_alignment_get_type())    ! macro
    const GTK_STOCK_MEDIA_STOP               = "gtk-media-stop"    ! macro
    const GDK_KEY_Aring                      = 0x0c5    ! macro
    const GDK_KEY_A                          =  0x041    ! macro
    const GTK_TYPE_INVISIBLE                 = (gtk_invisible_get_type())    ! macro
    const GTK_FONT_SELECTION_CLASS           = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_FONT_SELECTION,GtkFontSelectionClass))    ! macro
    const GDK_KEY_amacron                    = 0x3e0    ! macro
    const GDK_KEY_Arabic_thal                =  0x5d0    ! macro
    const GDK_KEY_braille_dots_12467         =  0x100286b    ! macro
    const GTK_STYLE_CLASS_MENUBAR            = "menubar"    ! macro
    const G_DBUS_PROXY_CLASS                 = (G_TYPE_CHECK_CLASS_CAST((k),G_TYPE_DBUS_PROXY,GDBusProxyClass))    ! macro
    const GTK_IS_CELL_RENDERER_TEXT_CLASS    = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_CELL_RENDERER_TEXT))    ! macro
    const GDK_KEY_B                          = 0x042    ! macro
    const GTK_LEVEL_BAR_CLASS                = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_LEVEL_BAR,GtkLevelBarClass))    ! macro
    const GDK_KEY_braille_dots_12468         = 0x10028ab    ! macro
    const GTK_IS_STYLE_PROPERTIES_CLASS      = (G_TYPE_CHECK_CLASS_TYPE((c),GTK_TYPE_STYLE_PROPERTIES))    ! macro
    const GDK_KEY_C                          = 0x043    ! macro
    const GDK_KEY_D                          =  0x044    ! macro
    const g_spawn_async                      =  g_spawn_async_utf8    ! macro
    const G_IS_APPLICATION_COMMAND_LINE_CLASS = (G_TYPE_CHECK_CLASS_TYPE((class),G_TYPE_APPLICATION_COMMAND_LINE))    ! macro
    const GDK_KEY_E                          = 0x045    ! macro
    const GUINT_TO_BE                        = ((guint)GUINT32_TO_BE(val))    ! macro
    const GTK_ICON_THEME_ERROR               = gtk_icon_theme_error_quark()    ! macro
    const GDK_KEY_F                          = 0x046    ! macro
    const GTK_IS_HBUTTON_BOX                 = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_HBUTTON_BOX))    ! macro
    const GDK_KEY_uhornbelowdot              = 0x1001ef1    ! macro
    const g_main_is_running                  =  g_main_loop_is_running(loop)    ! macro
    const GDK_KEY_G                          = 0x047    ! macro
    const GLIB_SIZEOF_LONG                   =  4    ! macro
    const GDK_KEY_H                          =  0x048    ! macro
    const GDK_KEY_braille_dots_3478          =  0x10028cc    ! macro
    const GDK_KEY_Georgian_hoe               =  0x10010f5    ! macro
    const ATK_HYPERLINK_IMPL_GET_IFACE       =  G_TYPE_INSTANCE_GET_INTERFACE((obj),ATK_TYPE_HYPERLINK_IMPL,AtkHyperlinkImplIface)    ! macro
    const GDK_KEY_I                          = 0x049    ! macro
    const G_IS_DBUS_ACTION_GROUP_CLASS       = (G_TYPE_CHECK_CLASS_TYPE((class),G_TYPE_DBUS_ACTION_GROUP))    ! macro
    const GTK_STOCK_COLOR_PICKER             = "gtk-color-picker"    ! macro
    const GTK_COLOR_BUTTON                   = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_COLOR_BUTTON,GtkColorButton))    ! macro
    const GDK_KEY_J                          = 0x04a    ! macro
    const GTK_IS_TOGGLE_TOOL_BUTTON          = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_TOGGLE_TOOL_BUTTON))    ! macro
    const GDK_KEY_K                          = 0x04b    ! macro
    const GDK_KEY_rightt                     =  0x9f5    ! macro
    const G_KEY_FILE_DESKTOP_KEY_GENERIC_NAME = "GenericName"    ! macro
    const cairo_current_target_surface       = cairo_current_target_surface_REPLACED_BY_cairo_get_target    ! macro
    const GDK_KEY_L                          =  0x04c    ! macro
    const GDK_KEY_leftradical                =  0x8a1    ! macro
    const GDK_KEY_topleftradical             =  0x8a2    ! macro
    const GDK_KEY_M                          =  0x04d    ! macro
    const GSSIZE_TO_LE                       = ((gssize)GINT64_TO_LE(val))    ! macro
    const GDK_KEY_Serbian_LJE                = 0x6b9    ! macro
    const GDK_KEY_em4space                   =  0xaa4    ! macro
    const GDK_KEY_dead_capital_schwa         =  0xfe8b    ! macro
    const GDK_KEY_Cyrillic_EN_descender      =  0x10004a2    ! macro
    const GDK_KEY_N                          =  0x04e    ! macro
    const GDK_KEY_O                          =  0x04f    ! macro
    const GTK_EXPANDER_GET_CLASS             = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_EXPANDER,GtkExpanderClass))    ! macro
    const GDK_KEY_P                          = 0x050    ! macro
    const G_IS_DBUS_INTERFACE_SKELETON_CLASS = (G_TYPE_CHECK_CLASS_TYPE((k),G_TYPE_DBUS_INTERFACE_SKELETON))    ! macro
    const G_IS_TLS_INTERACTION               = (G_TYPE_CHECK_INSTANCE_TYPE((o),G_TYPE_TLS_INTERACTION))    ! macro
    const GTK_TYPE_NOTEBOOK                  = (gtk_notebook_get_type())    ! macro
    const G_VOLUME_IDENTIFIER_KIND_CLASS     = "class"    ! macro
    const GDK_KEY_Q                          = 0x051    ! macro
    const GDK_KEY_braille_dots_12478         =  0x10028cb    ! macro
    const GDK_KEY_R                          =  0x052    ! macro
    const g_filename_to_utf8                 =  g_filename_to_utf8_utf8    ! macro
    const GTK_FONT_CHOOSER_GET_IFACE         = (G_TYPE_INSTANCE_GET_INTERFACE((inst),GTK_TYPE_FONT_CHOOSER,GtkFontChooserIface))    ! macro
    const GDK_KEY_S                          = 0x053    ! macro
    const G_TYPE_BUS_NAME_OWNER_FLAGS        = (g_bus_name_owner_flags_get_type())    ! macro
    const GDK_KEY_T                          = 0x054    ! macro
    const GTK_CELL_VIEW                      = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_CELL_VIEW,GtkCellView))    ! macro
    const GDK_KEY_MenuKB                     = 0x1008ff65    ! macro
    const G_IS_PERMISSION                    = (G_TYPE_CHECK_INSTANCE_TYPE((inst),G_TYPE_PERMISSION))    ! macro
    const GDK_KEY_U                          = 0x055    ! macro
    const GTK_TYPE_CELL_RENDERER_SPINNER     = (gtk_cell_renderer_spinner_get_type())    ! macro
    const GDK_KEY_V                          = 0x056    ! macro
    const GDK_KEY_braille_dots_15678         =  0x10028f1    ! macro
    const GDK_KEY_logicaland                 =  0x8de    ! macro
    const GTK_TOGGLE_BUTTON_GET_CLASS        = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_TOGGLE_BUTTON,GtkToggleButtonClass))    ! macro
    const _G_DEFINE_INTERFACE_EXTENDED_END   = }g_once_init_leave(&g_define_type_id__volatile,g_define_type_id);}return g_define_type_id__volatile;}    ! macro
    const GDK_KEY_Hangul_Hanja               = 0xff34    ! macro
    const GDK_KEY_W                          =  0x057    ! macro
    const GDK_KEY_Cyrillic_GHE               =  0x6e7    ! macro
    const GTK_IS_ACCESSIBLE_CLASS            = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_ACCESSIBLE))    ! macro
    const cairo_surface_create_for_image     = cairo_surface_create_for_image_REPLACED_BY_cairo_image_surface_create_for_data    ! macro
    const GDK_KEY_X                          =  0x058    ! macro
    const GDK_KEY_Y                          =  0x059    ! macro
    const G_IS_POLLABLE_OUTPUT_STREAM        = (G_TYPE_CHECK_INSTANCE_TYPE((obj),G_TYPE_POLLABLE_OUTPUT_STREAM))    ! macro
    const GDK_KEY_Z                          = 0x05a    ! macro
    const GDK_KEY_Ukranian_I                 =  0x6b6    ! macro
    const G_IS_SEEKABLE                      = (G_TYPE_CHECK_INSTANCE_TYPE((obj),G_TYPE_SEEKABLE))    ! macro
    const GDK_KEY_Wcircumflex                = 0x1000174    ! macro
    const GTK_STOCK_COPY                     = "gtk-copy"    ! macro
    const GDK_KEY_Eisu_toggle                = 0xff30    ! macro
    const G_SOCKET_CONNECTION_CLASS          = (G_TYPE_CHECK_CLASS_CAST((class),G_TYPE_SOCKET_CONNECTION,GSocketConnectionClass))    ! macro
    const G_FILE_IO_STREAM_GET_CLASS         = (G_TYPE_INSTANCE_GET_CLASS((o),G_TYPE_FILE_IO_STREAM,GFileIOStreamClass))    ! macro
    const GDK_KEY_Armenian_CHA               = 0x1000549    ! macro
    const G_DEFINE_ABSTRACT_TYPE_WITH_CODE   =  _G_DEFINE_TYPE_EXTENDED_BEGIN(TN,t_n,T_P,G_TYPE_FLAG_ABSTRACT){_C_;}_G_DEFINE_TYPE_EXTENDED_END()    ! macro
    const cairo_surface_set_repeat           = cairo_surface_set_repeat_DEPRECATED_BY_cairo_pattern_set_extend    ! macro
    const GDK_KEY_seveneighths               =  0xac6    ! macro
    const GDK_KEY_numerosign                 =  0x6b0    ! macro
    const GTK_IS_SCALE                       = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_SCALE))    ! macro
    const GTK_PROGRESS_BAR_CLASS             = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_PROGRESS_BAR,GtkProgressBarClass))    ! macro
    const G_IS_TLS_SERVER_CONNECTION         = (G_TYPE_CHECK_INSTANCE_TYPE((inst),G_TYPE_TLS_SERVER_CONNECTION))    ! macro
    const GDK_KEY_Prev_VMode                 = 0x1008fe23    ! macro
    const GDK_KEY_threeeighths               =  0xac4    ! macro
    const GDK_KEY_a                          =  0x061    ! macro
    const GDK_KEY_Hangul_YeorinHieuh         =  0xef5    ! macro
    const GTK_STYLE_REGION_TAB               = "tab"    ! macro
    const GDK_KEY_b                          = 0x062    ! macro
    const GDK_KEY_thinspace                  =  0xaa7    ! macro
    const G_LOG_FATAL_MASK                   = (G_LOG_FLAG_RECURSION|G_LOG_LEVEL_ERROR)    ! macro
    const G_TYPE_SETTINGS_SCHEMA_SOURCE      = (g_settings_schema_source_get_type())    ! macro
    const G_FILE_ATTRIBUTE_MOUNTABLE_CAN_POLL = "mountable::can-poll"    ! macro
    const G_IS_PARAM_SPEC_UCHAR              = (G_TYPE_CHECK_INSTANCE_TYPE((pspec),G_TYPE_PARAM_UCHAR))    ! macro
    const GDK_KEY_Pointer_DblClick1          = 0xfeef    ! macro
    const GDK_KEY_c                          =  0x063    ! macro
    const GDK_KEY_Thai_baht                  =  0xddf    ! macro
    const GTK_TYPE_ACTIVATABLE               = (gtk_activatable_get_type())    ! macro
    const GDK_KEY_Pointer_DblClick2          = 0xfef0    ! macro
    const GDK_KEY_Udiaeresis                 =  0x0dc    ! macro
    const GTK_TYPE_RADIO_MENU_ITEM           = (gtk_radio_menu_item_get_type())    ! macro
    const g_test_queue_unref                 = g_test_queue_destroy(g_object_unref,gobject)    ! macro
    const g_module_open                      = g_module_open_utf8    ! macro
    const GDK_KEY_d                          =  0x064    ! macro
    const GTK_IS_PRINT_OPERATION             = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_PRINT_OPERATION))    ! macro
    const GTK_ADJUSTMENT_CLASS               = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_ADJUSTMENT,GtkAdjustmentClass))    ! macro
    const GDK_KEY_Pointer_DblClick3          = 0xfef1    ! macro
    const GDK_KEY_RotationKB                 =  0x1008ff76    ! macro
    const GDK_KEY_e                          =  0x065    ! macro
    const GDK_WINDOW_CLASS                   = (G_TYPE_CHECK_CLASS_CAST((klass),GDK_TYPE_WINDOW,GdkWindowClass))    ! macro
    const GDK_KEY_Pointer_DblClick4          = 0xfef2    ! macro
    const GDK_KEY_downcaret                  =  0xba8    ! macro
    const GTK_CSS_PROVIDER_GET_CLASS         = (G_TYPE_INSTANCE_GET_CLASS((o),GTK_TYPE_CSS_PROVIDER,GtkCssProviderClass))    ! macro
    const GDK_KEY_Hangul_WEO                 = 0xecd    ! macro
    const GDK_KEY_f                          =  0x066    ! macro
    const GDK_PIXBUF_SIMPLE_ANIM             = (G_TYPE_CHECK_INSTANCE_CAST((object),GDK_TYPE_PIXBUF_SIMPLE_ANIM,GdkPixbufSimpleAnim))    ! macro
    const G_IS_DBUS_ACTION_GROUP             = (G_TYPE_CHECK_INSTANCE_TYPE((inst),G_TYPE_DBUS_ACTION_GROUP))    ! macro
    const cairo_select_font                  = cairo_select_font_REPLACED_BY_cairo_select_font_face    ! macro
    const GDK_KEY_Pointer_DblClick5          =  0xfef3    ! macro
    const GTK_TYPE_TREE_ROW_REFERENCE        = (gtk_tree_row_reference_get_type())    ! macro
    const G_TYPE_APPLICATION_FLAGS           = (g_application_flags_get_type())    ! macro
    const GDK_KEY_g                          = 0x067    ! macro
    const GDK_KEY_caron                      =  0x1b7    ! macro
    const GDK_KEY_h                          =  0x068    ! macro
    const GDK_KEY_i                          =  0x069    ! macro
    const GTK_TOOL_BUTTON                    = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_TOOL_BUTTON,GtkToolButton))    ! macro
    const GDK_KEY_uprightcorner              = 0x9eb    ! macro
    const GTK_TYPE_BUTTON_BOX_STYLE          = (gtk_button_box_style_get_type())    ! macro
    const GUINT_FROM_LE                      = (GUINT_TO_LE(val))    ! macro
    const GTK_IM_CONTEXT_CLASS               = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_IM_CONTEXT,GtkIMContextClass))    ! macro
    const GDK_KEY_j                          = 0x06a    ! macro
    const GDK_KEY_KP_0                       =  0xffb0    ! macro
    const G_TYPE_CHECK_CLASS_CAST            = (_G_TYPE_CCC((g_class),(g_type),c_type))    ! macro
    const GDK_KEY_k                          = 0x06b    ! macro
    const GDK_KEY_KP_1                       =  0xffb1    ! macro
    const g_utf8_next_char                   = (char*)((p)+g_utf8_skip[*(const guchar*)(p)])    ! macro
    const GDK_KEY_l                          = 0x06c    ! macro
    const GDK_KEY_KP_2                       =  0xffb2    ! macro
    const GDK_KEY_Ocircumflex                =  0x0d4    ! macro
    const GDK_KEY_hebrew_dalet               =  0xce3    ! macro
    const GTK_TYPE_SCROLLED_WINDOW           = (gtk_scrolled_window_get_type())    ! macro
    const GDK_KEY_m                          = 0x06d    ! macro
    const GTK_TYPE_PACK_TYPE                 = (gtk_pack_type_get_type())    ! macro
    const GDK_KEY_KP_3                       = 0xffb3    ! macro
    const GTK_IS_CELL_RENDERER_SPINNER       = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_CELL_RENDERER_SPINNER))    ! macro
    const GDK_KEY_n                          = 0x06e    ! macro
    const GDK_KEY_KP_4                       =  0xffb4    ! macro
    const G_TYPE_CHECK_VALUE_TYPE            = (_G_TYPE_CVH((value),(g_type)))    ! macro
    const GDK_KEY_o                          = 0x06f    ! macro
    const GDK_KEY_KP_5                       =  0xffb5    ! macro
    const G_TYPE_MOUNT_OPERATION_RESULT      = (g_mount_operation_result_get_type())    ! macro
    const GDK_KEY_braille_dots_456           = 0x1002838    ! macro
    const G_PARAM_SPEC_VARIANT               = (G_TYPE_CHECK_INSTANCE_CAST((pspec),G_TYPE_PARAM_VARIANT,GParamSpecVariant))    ! macro
    const cairo_get_font_extents             = cairo_get_font_extents_REPLACED_BY_cairo_font_extents    ! macro
    const GDK_KEY_AudioPlay                  =  0x1008ff14    ! macro
    const PANGO_IS_CONTEXT                   = (G_TYPE_CHECK_INSTANCE_TYPE((object),PANGO_TYPE_CONTEXT))    ! macro
    const GDK_KEY_p                          = 0x070    ! macro
    const GTK_TYPE_ALIGNMENT                 = (gtk_alignment_get_type())    ! macro
    const GDK_KEY_KP_6                       = 0xffb6    ! macro
    const GTK_TYPE_BUTTONS_TYPE              = (gtk_buttons_type_get_type())    ! macro
    const GDK_KEY_Arabic_teh                 = 0x5ca    ! macro
    const GDK_KEY_braille_dots_457           =  0x1002858    ! macro
    const G_IS_SOCKET                        = (G_TYPE_CHECK_INSTANCE_TYPE((inst),G_TYPE_SOCKET))    ! macro
    const GDK_KEY_q                          = 0x071    ! macro
    const GDK_KEY_KP_7                       =  0xffb7    ! macro
    const ATK_HYPERLINK_CLASS                = (G_TYPE_CHECK_CLASS_CAST((klass),ATK_TYPE_HYPERLINK,AtkHyperlinkClass))    ! macro
    const GDK_KEY_Hangul_PostHanja           = 0xff3b    ! macro
    const GDK_KEY_braille_dots_458           =  0x1002898    ! macro
    const gtk_minor_version                  =  gtk_get_minor_version()    ! macro
    const GDK_KEY_r                          = 0x072    ! macro
    const GDK_KEY_Greek_xi                   =  0x7ee    ! macro
    const GDK_KEY_KP_8                       =  0xffb8    ! macro
    const GDK_KEY_braille_dots_1678          =  0x10028e1    ! macro
    const GDK_KEY_Thai_chochang              =  0xdaa    ! macro
    const G_IS_THEMED_ICON_CLASS             = (G_TYPE_CHECK_CLASS_TYPE((k),G_TYPE_THEMED_ICON))    ! macro
    const GDK_KEY_s                          = 0x073    ! macro
    const GDK_KEY_KP_9                       =  0xffb9    ! macro
    const GDK_TYPE_DRAG_ACTION               = (gdk_drag_action_get_type())    ! macro
    const GTK_STYLE_CLASS_SCALE              = "scale"    ! macro
    const G_IS_THREADED_SOCKET_SERVICE_CLASS = (G_TYPE_CHECK_CLASS_TYPE((class),G_TYPE_THREADED_SOCKET_SERVICE))    ! macro
    const GDK_KEY_malesymbol                 = 0xaf7    ! macro
    const g_alloca                           =  alloca(size)    ! macro
    const G_VOLUME                           = (G_TYPE_CHECK_INSTANCE_CAST((obj),G_TYPE_VOLUME,GVolume))    ! macro
    const GDK_KEY_t                          = 0x074    ! macro
    const GTK_STOCK_CONVERT                  = "gtk-convert"    ! macro
    const GDK_KEY_Armenian_VEV               = 0x100054e    ! macro
    const GDK_KEY_u                          =  0x075    ! macro
    const GDK_KEY_Sinh_ndda                  =  0x1000dac    ! macro
    const ATK_UTIL                           =  G_TYPE_CHECK_INSTANCE_CAST((obj),ATK_TYPE_UTIL,AtkUtil)    ! macro
    const GDK_KEY_v                          = 0x076    ! macro
    const GDK_KEY_botintegral                =  0x8a5    ! macro
    const G_TYPE_FILE_QUERY_INFO_FLAGS       = (g_file_query_info_flags_get_type())    ! macro
    const G_DATA_INPUT_STREAM_GET_CLASS      = (G_TYPE_INSTANCE_GET_CLASS((o),G_TYPE_DATA_INPUT_STREAM,GDataInputStreamClass))    ! macro
    const GDK_KEY_w                          = 0x077    ! macro
    const GDK_KEY_dead_voiced_sound          =  0xfe5e    ! macro
    const GDK_KEY_scedilla                   =  0x1ba    ! macro
    const G_CLOSURE_NEEDS_MARSHAL            = (((GClosure*)(closure))->marshal==NULL)    ! macro
    const GDK_KEY_uacute                     = 0x0fa    ! macro
    const GTK_IS_MISC                        = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_MISC))    ! macro
    const GDK_KEY_x                          = 0x078    ! macro
    const G_FILE_ICON                        = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_FILE_ICON,GFileIcon))    ! macro
    const G_HOOK_IS_UNLINKED                 = (G_HOOK(hook)->next==NULL&&G_HOOK(hook)->prev==NULL&&G_HOOK(hook)->hook_id==0&&G_HOOK(hook)->ref_count==0)    ! macro
    const GDK_KEY_y                          = 0x079    ! macro
    const GTK_IS_ASPECT_FRAME_CLASS          = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_ASPECT_FRAME))    ! macro
    const GDK_KEY_Arabic_theh                = 0x5cb    ! macro
    const GDK_MAX_TIMECOORD_AXES             =  128    ! macro
    const GDK_KEY_NewSheqelSign              =  0x10020aa    ! macro
    const GDK_KEY_z                          =  0x07a    ! macro
    const GDK_KEY_Ukranian_i                 =  0x6a6    ! macro
    const GTK_TREE_SORTABLE                  = (G_TYPE_CHECK_INSTANCE_CAST((obj),GTK_TYPE_TREE_SORTABLE,GtkTreeSortable))    ! macro
    const G_NODE_IS_ROOT                     = (((GNode*)(node))->parent==NULL&&((GNode*)(node))->prev==NULL&&((GNode*)(node))->next==NULL)    ! macro
    const GDK_KEY_Armenian_pyur              = 0x1000583    ! macro
    const GTK_ADJUSTMENT_GET_CLASS           = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_ADJUSTMENT,GtkAdjustmentClass))    ! macro
    const GUINT_TO_POINTER                   = ((gpointer)(guint64)(u))    ! macro
    const GDK_KEY_lstroke                    = 0x1b3    ! macro
    const GDK_KEY_Gcircumflex                =  0x2d8    ! macro
    const GDK_KEY_Ukrainian_I                =  0x6b6    ! macro
    const G_FILE_ATTRIBUTE_FILESYSTEM_SIZE   = "filesystem::size"    ! macro
    const GDK_KEY_lowrightcorner             = 0x9ea    ! macro
    const G_INET_ADDRESS_CLASS               = (G_TYPE_CHECK_CLASS_CAST((k),G_TYPE_INET_ADDRESS,GInetAddressClass))    ! macro
    const GDK_KEY_braille_dots_467           = 0x1002868    ! macro
    const G_FILE_ATTRIBUTE_STANDARD_IS_SYMLINK = "standard::is-symlink"    ! macro
    const g_array_insert_val                 = g_array_insert_vals(a,i,&(v),1)    ! macro
    const GDK_KEY_braille_dots_468           = 0x10028a8    ! macro
    const GDK_KEY_Mode_switch                =  0xff7e    ! macro
    const g_ascii_isalpha                    = ((g_ascii_table[(guchar)(c)]&G_ASCII_ALPHA)!=0)    ! macro
    const G_IS_ACTION                        = (G_TYPE_CHECK_INSTANCE_TYPE((inst),G_TYPE_ACTION))    ! macro
    const GTK_STOCK_ZOOM_OUT                 = "gtk-zoom-out"    ! macro
    const G_TYPE_TLS_DATABASE_VERIFY_FLAGS   = (g_tls_database_verify_flags_get_type())    ! macro
    const GDK_KEY_Arabic_ddal                = 0x1000688    ! macro
    const GDK_KEY_Arabic_ain                 =  0x5d9    ! macro
    const GTK_TREE_VIEW_CLASS                = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_TREE_VIEW,GtkTreeViewClass))    ! macro
    const GDK_MICRO_VERSION                  = (4)    ! macro
    const GDK_TARGET_COLORMAP                = _GDK_MAKE_ATOM(7)    ! macro
    const GDK_KEY_Thai_popla                 = 0xdbb    ! macro
    const GDK_IS_PIXBUF_ANIMATION            = (G_TYPE_CHECK_INSTANCE_TYPE((object),GDK_TYPE_PIXBUF_ANIMATION))    ! macro
    const GTK_IS_BUILDER                     = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_BUILDER))    ! macro
    const G_LIKELY                           = (expr)    ! macro
    const GTK_TYPE_DIALOG                    = (gtk_dialog_get_type())    ! macro
    const GTK_PATH_PRIO_MASK                 = 0x0f    ! macro
    const GDK_KEY_Cyrillic_ZHE               =  0x6f6    ! macro
    const G_SEARCHPATH_SEPARATOR             = ';'    ! macro
    const GDK_KEY_zacute                     = 0x1bc    ! macro
    const GDK_PIXBUF_FEATURES_H              =  1    ! macro
    const cairo_set_target_pdf               =  cairo_set_target_pdf_DEPRECATED_BY_cairo_pdf_surface_create    ! macro
    const GTK_LEVEL_BAR_OFFSET_HIGH          = "high"    ! macro
    const G_FILENAME_COMPLETER               = (G_TYPE_CHECK_INSTANCE_CAST((o),G_TYPE_FILENAME_COMPLETER,GFilenameCompleter))    ! macro
    const GTK_IS_PRINT_OPERATION_PREVIEW     = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_PRINT_OPERATION_PREVIEW))    ! macro
    const GDK_KEY_Arabic_question_mark       = 0x5bf    ! macro
    const g_assert_cmpint                    =  do{gint64 __n1=(n1),__n2=(n2);if(__n1 cmp __n2);else g_assertion_message_cmpnum(G_LOG_DOMAIN,__FILE__,__LINE__,G_STRFUNC,#n1" "#cmp" "#n2,__n1,#cmp,__n2,'i');}while(0)    ! macro
    const GTK_IS_NOTEBOOK                    = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_NOTEBOOK))    ! macro
    const GDK_KEY_Arabic_kaf                 = 0x5e3    ! macro
    const GTK_TYPE_COLOR_CHOOSER             = (gtk_color_chooser_get_type())    ! macro
    const ATK_IS_HYPERLINK                   = (G_TYPE_CHECK_INSTANCE_TYPE((obj),ATK_TYPE_HYPERLINK))    ! macro
    const GDK_KEY_Abelowdot                  = 0x1001ea0    ! macro
    const GDK_KEY_Greek_beta                 =  0x7e2    ! macro
    const G_TIME_SPAN_MINUTE                 = (G_GINT64_CONSTANT(60000000))    ! macro
    const GDK_KEY_braille_dots_478           = 0x10028c8    ! macro
    const G_TYPE_ZLIB_COMPRESSOR             = (g_zlib_compressor_get_type())    ! macro
    const GDK_KEY_Ecircumflextilde           = 0x1001ec4    ! macro
    const cairo_scale_font                   =  cairo_scale_font_REPLACED_BY_cairo_set_font_size    ! macro
    const G_VARIANT_TYPE_OBJECT_PATH         = ((const GVariantType*)"o")    ! macro
    const G_IS_FILE_OUTPUT_STREAM_CLASS      = (G_TYPE_CHECK_CLASS_TYPE((k),G_TYPE_FILE_OUTPUT_STREAM))    ! macro
    const G_VALUE_HOLDS_INT                  = (G_TYPE_CHECK_VALUE_TYPE((value),G_TYPE_INT))    ! macro
    const G_TYPE_DBUS_INTERFACE_SKELETON_FLAGS = (g_dbus_interface_skeleton_flags_get_type())    ! macro
    const GDK_KEY_cursor                     = 0xaff    ! macro
    const G_TYPE_DATA_STREAM_BYTE_ORDER      = (g_data_stream_byte_order_get_type())    ! macro
    const GDK_KEY_KP_Down                    = 0xff99    ! macro
    const GDK_KEY_Thai_maihanakat            =  0xdd1    ! macro
    const G_TYPE_DBUS_INTERFACE_SKELETON     = (g_dbus_interface_skeleton_get_type())    ! macro
    const GDK_KEY_L10                        = 0xffd1    ! macro
    const GTK_RADIO_BUTTON_GET_CLASS         = (G_TYPE_INSTANCE_GET_CLASS((obj),GTK_TYPE_RADIO_BUTTON,GtkRadioButtonClass))    ! macro
    const GTK_HBUTTON_BOX_CLASS              = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_HBUTTON_BOX,GtkHButtonBoxClass))    ! macro
    const G_ASYNC_RESULT                     = (G_TYPE_CHECK_INSTANCE_CAST((obj),G_TYPE_ASYNC_RESULT,GAsyncResult))    ! macro
    const GTK_TYPE_SCROLL_STEP               = (gtk_scroll_step_get_type())    ! macro
    const GTK_IS_TEXT_BUFFER                 = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_TEXT_BUFFER))    ! macro
    const GDK_KEY_Tcedilla                   = 0x1de    ! macro
    const GDK_KEY_Hangul                     =  0xff31    ! macro
    const GDK_KEY_threefifths                =  0xab4    ! macro
    const GDK_KEY_Ukrainian_i                =  0x6a6    ! macro
    const GDK_KEY_MenuPB                     =  0x1008ff66    ! macro
    const G_VARIANT_TYPE_BASIC               = ((const GVariantType*)"?")    ! macro
    const GTK_IS_FONT_BUTTON_CLASS           = (G_TYPE_CHECK_CLASS_TYPE((klass),GTK_TYPE_FONT_BUTTON))    ! macro
    const G_ACTION_GET_IFACE                 = (G_TYPE_INSTANCE_GET_INTERFACE((inst),G_TYPE_ACTION,GActionInterface))    ! macro
    const GDK_KEY_eabovedot                  = 0x3ec    ! macro
    const GDK_KEY_Cyrillic_HARDSIGN          =  0x6ff    ! macro
    const GDK_SELECTION_TYPE_DRAWABLE        =  _GDK_MAKE_ATOM(17)    ! macro
    const GDK_KEY_Cyrillic_ghe_bar           = 0x1000493    ! macro
    const g_main_iteration                   =  g_main_context_iteration(NULL,may_block)    ! macro
    const GTK_VOLUME_BUTTON_CLASS            = (G_TYPE_CHECK_CLASS_CAST((klass),GTK_TYPE_VOLUME_BUTTON,GtkVolumeButtonClass))    ! macro
    const G_CLOSURE_N_NOTIFIERS              = (((cl)->n_guards<<1L)+(cl)->n_fnotifiers+(cl)->n_inotifiers)    ! macro
    const GDK_KEY_Ukrainian_ie               = 0x6a4    ! macro
    const GTK_IS_LAYOUT                      = (G_TYPE_CHECK_INSTANCE_TYPE((obj),GTK_TYPE_LAYOUT))    ! macro
    const GTK_IS_THEMING_ENGINE_CLASS        = (G_TYPE_CHECK_CLASS_TYPE((c),GTK_TYPE_THEMING_ENGINE))    ! macro
    const GTK_STYLE_PROPERTIES_GET_CLASS     = (G_TYPE_INSTANCE_GET_CLASS((o),GTK_TYPE_STYLE_PROPERTIES,GtkStylePropertiesClass))    ! macro
    const ATK_DEFINE_TYPE_WITH_CODE          = _ATK_DEFINE_TYPE_EXTENDED_BEGIN(TN,t_n,T_P,0){_C_;}_ATK_DEFINE_TYPE_EXTENDED_END()    ! macro
    const GDK_KEY_hebrew_kaph                = 0xceb    ! macro
    const GTK_STOCK_SORT_ASCENDING           = "gtk-sort-ascending"    ! macro
    const g_renew                            = _G_RENEW(struct_type,mem,n_structs,realloc)    ! macro
end
